// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongodbDatabase_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabase via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabase, MongodbDatabaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabase runs a test to see if a specific instance of MongodbDatabase round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabase(subject MongodbDatabase) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabase
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabase instances for property testing - lazily instantiated by MongodbDatabaseGenerator()
var mongodbDatabaseGenerator gopter.Gen

// MongodbDatabaseGenerator returns a generator of MongodbDatabase instances for property testing.
func MongodbDatabaseGenerator() gopter.Gen {
	if mongodbDatabaseGenerator != nil {
		return mongodbDatabaseGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongodbDatabase(generators)
	mongodbDatabaseGenerator = gen.Struct(reflect.TypeOf(MongodbDatabase{}), generators)

	return mongodbDatabaseGenerator
}

// AddRelatedPropertyGeneratorsForMongodbDatabase is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabase(gens map[string]gopter.Gen) {
	gens["Spec"] = DatabaseAccountsMongodbDatabases_SPECGenerator()
	gens["Status"] = MongoDBDatabase_StatusGenerator()
}

func Test_DatabaseAccountsMongodbDatabases_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabases_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabases_SPEC, DatabaseAccountsMongodbDatabases_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabases_SPEC runs a test to see if a specific instance of DatabaseAccountsMongodbDatabases_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabases_SPEC(subject DatabaseAccountsMongodbDatabases_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabases_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabases_SPEC instances for property testing - lazily instantiated by
//DatabaseAccountsMongodbDatabases_SPECGenerator()
var databaseAccountsMongodbDatabases_specGenerator gopter.Gen

// DatabaseAccountsMongodbDatabases_SPECGenerator returns a generator of DatabaseAccountsMongodbDatabases_SPEC instances for property testing.
// We first initialize databaseAccountsMongodbDatabases_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabases_SPECGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabases_specGenerator != nil {
		return databaseAccountsMongodbDatabases_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPEC(generators)
	databaseAccountsMongodbDatabases_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabases_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPEC(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPEC(generators)
	databaseAccountsMongodbDatabases_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabases_SPEC{}), generators)

	return databaseAccountsMongodbDatabases_specGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPEC(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBDatabaseResource_SpecGenerator())
}

func Test_MongoDBDatabase_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabase_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabase_Status, MongoDBDatabase_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabase_Status runs a test to see if a specific instance of MongoDBDatabase_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabase_Status(subject MongoDBDatabase_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabase_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabase_Status instances for property testing - lazily instantiated by
//MongoDBDatabase_StatusGenerator()
var mongoDBDatabase_statusGenerator gopter.Gen

// MongoDBDatabase_StatusGenerator returns a generator of MongoDBDatabase_Status instances for property testing.
// We first initialize mongoDBDatabase_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBDatabase_StatusGenerator() gopter.Gen {
	if mongoDBDatabase_statusGenerator != nil {
		return mongoDBDatabase_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabase_Status(generators)
	mongoDBDatabase_statusGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabase_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabase_Status(generators)
	AddRelatedPropertyGeneratorsForMongoDBDatabase_Status(generators)
	mongoDBDatabase_statusGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabase_Status{}), generators)

	return mongoDBDatabase_statusGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabase_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabase_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBDatabase_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabase_Status(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBDatabaseResource_StatusGenerator())
}

func Test_CreateUpdateOptions_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreateUpdateOptions_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreateUpdateOptions_Spec, CreateUpdateOptions_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreateUpdateOptions_Spec runs a test to see if a specific instance of CreateUpdateOptions_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCreateUpdateOptions_Spec(subject CreateUpdateOptions_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreateUpdateOptions_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreateUpdateOptions_Spec instances for property testing - lazily instantiated by
//CreateUpdateOptions_SpecGenerator()
var createUpdateOptions_specGenerator gopter.Gen

// CreateUpdateOptions_SpecGenerator returns a generator of CreateUpdateOptions_Spec instances for property testing.
// We first initialize createUpdateOptions_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreateUpdateOptions_SpecGenerator() gopter.Gen {
	if createUpdateOptions_specGenerator != nil {
		return createUpdateOptions_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_Spec(generators)
	createUpdateOptions_specGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_Spec(generators)
	AddRelatedPropertyGeneratorsForCreateUpdateOptions_Spec(generators)
	createUpdateOptions_specGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_Spec{}), generators)

	return createUpdateOptions_specGenerator
}

// AddIndependentPropertyGeneratorsForCreateUpdateOptions_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreateUpdateOptions_Spec(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreateUpdateOptions_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreateUpdateOptions_Spec(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_SpecGenerator())
}

func Test_CreateUpdateOptions_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreateUpdateOptions_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreateUpdateOptions_Status, CreateUpdateOptions_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreateUpdateOptions_Status runs a test to see if a specific instance of CreateUpdateOptions_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForCreateUpdateOptions_Status(subject CreateUpdateOptions_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreateUpdateOptions_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreateUpdateOptions_Status instances for property testing - lazily instantiated by
//CreateUpdateOptions_StatusGenerator()
var createUpdateOptions_statusGenerator gopter.Gen

// CreateUpdateOptions_StatusGenerator returns a generator of CreateUpdateOptions_Status instances for property testing.
// We first initialize createUpdateOptions_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreateUpdateOptions_StatusGenerator() gopter.Gen {
	if createUpdateOptions_statusGenerator != nil {
		return createUpdateOptions_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_Status(generators)
	createUpdateOptions_statusGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_Status(generators)
	AddRelatedPropertyGeneratorsForCreateUpdateOptions_Status(generators)
	createUpdateOptions_statusGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_Status{}), generators)

	return createUpdateOptions_statusGenerator
}

// AddIndependentPropertyGeneratorsForCreateUpdateOptions_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreateUpdateOptions_Status(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreateUpdateOptions_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreateUpdateOptions_Status(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_StatusGenerator())
}

func Test_MongoDBDatabaseResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResource_Spec, MongoDBDatabaseResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResource_Spec runs a test to see if a specific instance of MongoDBDatabaseResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResource_Spec(subject MongoDBDatabaseResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_Spec instances for property testing - lazily instantiated by
//MongoDBDatabaseResource_SpecGenerator()
var mongoDBDatabaseResource_specGenerator gopter.Gen

// MongoDBDatabaseResource_SpecGenerator returns a generator of MongoDBDatabaseResource_Spec instances for property testing.
func MongoDBDatabaseResource_SpecGenerator() gopter.Gen {
	if mongoDBDatabaseResource_specGenerator != nil {
		return mongoDBDatabaseResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_Spec(generators)
	mongoDBDatabaseResource_specGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_Spec{}), generators)

	return mongoDBDatabaseResource_specGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_Spec(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_MongoDBDatabaseResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResource_Status, MongoDBDatabaseResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResource_Status runs a test to see if a specific instance of MongoDBDatabaseResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResource_Status(subject MongoDBDatabaseResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_Status instances for property testing - lazily instantiated by
//MongoDBDatabaseResource_StatusGenerator()
var mongoDBDatabaseResource_statusGenerator gopter.Gen

// MongoDBDatabaseResource_StatusGenerator returns a generator of MongoDBDatabaseResource_Status instances for property testing.
func MongoDBDatabaseResource_StatusGenerator() gopter.Gen {
	if mongoDBDatabaseResource_statusGenerator != nil {
		return mongoDBDatabaseResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_Status(generators)
	mongoDBDatabaseResource_statusGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_Status{}), generators)

	return mongoDBDatabaseResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_AutoscaleSettings_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_Spec, AutoscaleSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_Spec runs a test to see if a specific instance of AutoscaleSettings_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_Spec(subject AutoscaleSettings_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_Spec instances for property testing - lazily instantiated by
//AutoscaleSettings_SpecGenerator()
var autoscaleSettings_specGenerator gopter.Gen

// AutoscaleSettings_SpecGenerator returns a generator of AutoscaleSettings_Spec instances for property testing.
func AutoscaleSettings_SpecGenerator() gopter.Gen {
	if autoscaleSettings_specGenerator != nil {
		return autoscaleSettings_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_Spec(generators)
	autoscaleSettings_specGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_Spec{}), generators)

	return autoscaleSettings_specGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_Spec(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_AutoscaleSettings_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_Status, AutoscaleSettings_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_Status runs a test to see if a specific instance of AutoscaleSettings_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_Status(subject AutoscaleSettings_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_Status instances for property testing - lazily instantiated by
//AutoscaleSettings_StatusGenerator()
var autoscaleSettings_statusGenerator gopter.Gen

// AutoscaleSettings_StatusGenerator returns a generator of AutoscaleSettings_Status instances for property testing.
func AutoscaleSettings_StatusGenerator() gopter.Gen {
	if autoscaleSettings_statusGenerator != nil {
		return autoscaleSettings_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_Status(generators)
	autoscaleSettings_statusGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_Status{}), generators)

	return autoscaleSettings_statusGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_Status(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}
