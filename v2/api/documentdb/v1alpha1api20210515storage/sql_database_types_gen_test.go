// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlDatabase_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabase via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabase, SqlDatabaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabase runs a test to see if a specific instance of SqlDatabase round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabase(subject SqlDatabase) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabase
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabase instances for property testing - lazily instantiated by SqlDatabaseGenerator()
var sqlDatabaseGenerator gopter.Gen

// SqlDatabaseGenerator returns a generator of SqlDatabase instances for property testing.
func SqlDatabaseGenerator() gopter.Gen {
	if sqlDatabaseGenerator != nil {
		return sqlDatabaseGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabase(generators)
	sqlDatabaseGenerator = gen.Struct(reflect.TypeOf(SqlDatabase{}), generators)

	return sqlDatabaseGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabase is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabase(gens map[string]gopter.Gen) {
	gens["Spec"] = DatabaseAccountsSqlDatabases_SPECGenerator()
	gens["Status"] = SqlDatabaseCreateUpdateParameters_StatusGenerator()
}

func Test_DatabaseAccountsSqlDatabases_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabases_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabases_SPEC, DatabaseAccountsSqlDatabases_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabases_SPEC runs a test to see if a specific instance of DatabaseAccountsSqlDatabases_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabases_SPEC(subject DatabaseAccountsSqlDatabases_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabases_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabases_SPEC instances for property testing - lazily instantiated by
//DatabaseAccountsSqlDatabases_SPECGenerator()
var databaseAccountsSqlDatabases_specGenerator gopter.Gen

// DatabaseAccountsSqlDatabases_SPECGenerator returns a generator of DatabaseAccountsSqlDatabases_SPEC instances for property testing.
// We first initialize databaseAccountsSqlDatabases_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabases_SPECGenerator() gopter.Gen {
	if databaseAccountsSqlDatabases_specGenerator != nil {
		return databaseAccountsSqlDatabases_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPEC(generators)
	databaseAccountsSqlDatabases_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabases_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPEC(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPEC(generators)
	databaseAccountsSqlDatabases_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabases_SPEC{}), generators)

	return databaseAccountsSqlDatabases_specGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPEC(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecGenerator())
	gens["Resource"] = gen.PtrOf(SqlDatabaseResource_SpecGenerator())
}

func Test_SqlDatabaseCreateUpdateParameters_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateParameters_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_Status, SqlDatabaseCreateUpdateParameters_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_Status runs a test to see if a specific instance of SqlDatabaseCreateUpdateParameters_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_Status(subject SqlDatabaseCreateUpdateParameters_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateParameters_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateParameters_Status instances for property testing - lazily instantiated by
//SqlDatabaseCreateUpdateParameters_StatusGenerator()
var sqlDatabaseCreateUpdateParameters_statusGenerator gopter.Gen

// SqlDatabaseCreateUpdateParameters_StatusGenerator returns a generator of SqlDatabaseCreateUpdateParameters_Status instances for property testing.
// We first initialize sqlDatabaseCreateUpdateParameters_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabaseCreateUpdateParameters_StatusGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateParameters_statusGenerator != nil {
		return sqlDatabaseCreateUpdateParameters_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_Status(generators)
	sqlDatabaseCreateUpdateParameters_statusGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_Status(generators)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_Status(generators)
	sqlDatabaseCreateUpdateParameters_statusGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_Status{}), generators)

	return sqlDatabaseCreateUpdateParameters_statusGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_Status(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusGenerator())
	gens["Resource"] = gen.PtrOf(SqlDatabaseResource_StatusGenerator())
}

func Test_SqlDatabaseResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResource_Spec, SqlDatabaseResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResource_Spec runs a test to see if a specific instance of SqlDatabaseResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResource_Spec(subject SqlDatabaseResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_Spec instances for property testing - lazily instantiated by
//SqlDatabaseResource_SpecGenerator()
var sqlDatabaseResource_specGenerator gopter.Gen

// SqlDatabaseResource_SpecGenerator returns a generator of SqlDatabaseResource_Spec instances for property testing.
func SqlDatabaseResource_SpecGenerator() gopter.Gen {
	if sqlDatabaseResource_specGenerator != nil {
		return sqlDatabaseResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_Spec(generators)
	sqlDatabaseResource_specGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_Spec{}), generators)

	return sqlDatabaseResource_specGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResource_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResource_Spec(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SqlDatabaseResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResource_Status, SqlDatabaseResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResource_Status runs a test to see if a specific instance of SqlDatabaseResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResource_Status(subject SqlDatabaseResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_Status instances for property testing - lazily instantiated by
//SqlDatabaseResource_StatusGenerator()
var sqlDatabaseResource_statusGenerator gopter.Gen

// SqlDatabaseResource_StatusGenerator returns a generator of SqlDatabaseResource_Status instances for property testing.
func SqlDatabaseResource_StatusGenerator() gopter.Gen {
	if sqlDatabaseResource_statusGenerator != nil {
		return sqlDatabaseResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_Status(generators)
	sqlDatabaseResource_statusGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_Status{}), generators)

	return sqlDatabaseResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResource_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
