// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515storage

import (
	"fmt"
	v20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1beta20210515storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20210515.MongodbDatabaseCollection
// Deprecated version of MongodbDatabaseCollection. Use v1beta20210515.MongodbDatabaseCollection instead
type MongodbDatabaseCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsMongodbDatabasesCollection_Spec   `json:"spec,omitempty"`
	Status            DatabaseAccountsMongodbDatabasesCollection_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabaseCollection{}

// GetConditions returns the conditions of the resource
func (collection *MongodbDatabaseCollection) GetConditions() conditions.Conditions {
	return collection.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (collection *MongodbDatabaseCollection) SetConditions(conditions conditions.Conditions) {
	collection.Status.Conditions = conditions
}

var _ conversion.Convertible = &MongodbDatabaseCollection{}

// ConvertFrom populates our MongodbDatabaseCollection from the provided hub MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210515s.MongodbDatabaseCollection)
	if !ok {
		return fmt.Errorf("expected documentdb/v1beta20210515storage/MongodbDatabaseCollection but received %T instead", hub)
	}

	return collection.AssignPropertiesFromMongodbDatabaseCollection(source)
}

// ConvertTo populates the provided hub MongodbDatabaseCollection from our MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210515s.MongodbDatabaseCollection)
	if !ok {
		return fmt.Errorf("expected documentdb/v1beta20210515storage/MongodbDatabaseCollection but received %T instead", hub)
	}

	return collection.AssignPropertiesToMongodbDatabaseCollection(destination)
}

var _ genruntime.KubernetesResource = &MongodbDatabaseCollection{}

// AzureName returns the Azure name of the resource
func (collection *MongodbDatabaseCollection) AzureName() string {
	return collection.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "20210515"
func (collection MongodbDatabaseCollection) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceKind returns the kind of the resource
func (collection *MongodbDatabaseCollection) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (collection *MongodbDatabaseCollection) GetSpec() genruntime.ConvertibleSpec {
	return &collection.Spec
}

// GetStatus returns the status of this resource
func (collection *MongodbDatabaseCollection) GetStatus() genruntime.ConvertibleStatus {
	return &collection.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (collection *MongodbDatabaseCollection) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (collection *MongodbDatabaseCollection) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &DatabaseAccountsMongodbDatabasesCollection_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (collection *MongodbDatabaseCollection) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(collection.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  collection.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (collection *MongodbDatabaseCollection) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*DatabaseAccountsMongodbDatabasesCollection_STATUS); ok {
		collection.Status = *st
		return nil
	}

	// Convert status to required version
	var st DatabaseAccountsMongodbDatabasesCollection_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	collection.Status = st
	return nil
}

// AssignPropertiesFromMongodbDatabaseCollection populates our MongodbDatabaseCollection from the provided source MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) AssignPropertiesFromMongodbDatabaseCollection(source *v20210515s.MongodbDatabaseCollection) error {

	// ObjectMeta
	collection.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccountsMongodbDatabasesCollection_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec() to populate field Spec")
	}
	collection.Spec = spec

	// Status
	var status DatabaseAccountsMongodbDatabasesCollection_STATUS
	err = status.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS() to populate field Status")
	}
	collection.Status = status

	// No error
	return nil
}

// AssignPropertiesToMongodbDatabaseCollection populates the provided destination MongodbDatabaseCollection from our MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) AssignPropertiesToMongodbDatabaseCollection(destination *v20210515s.MongodbDatabaseCollection) error {

	// ObjectMeta
	destination.ObjectMeta = *collection.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec
	err := collection.Spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS
	err = collection.Status.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (collection *MongodbDatabaseCollection) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: collection.Spec.OriginalVersion,
		Kind:    "MongodbDatabaseCollection",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20210515.MongodbDatabaseCollection
// Deprecated version of MongodbDatabaseCollection. Use v1beta20210515.MongodbDatabaseCollection instead
type MongodbDatabaseCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabaseCollection `json:"items"`
}

// Storage version of v1alpha1api20210515.DatabaseAccountsMongodbDatabasesCollection_STATUS
// Deprecated version of DatabaseAccountsMongodbDatabasesCollection_STATUS. Use v1beta20210515.DatabaseAccountsMongodbDatabasesCollection_STATUS instead
type DatabaseAccountsMongodbDatabasesCollection_STATUS struct {
	Conditions  []conditions.Condition            `json:"conditions,omitempty"`
	Id          *string                           `json:"id,omitempty"`
	Location    *string                           `json:"location,omitempty"`
	Name        *string                           `json:"name,omitempty"`
	Options     *CreateUpdateOptions_STATUS       `json:"options,omitempty"`
	PropertyBag genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
	Resource    *MongoDBCollectionResource_STATUS `json:"resource,omitempty"`
	Tags        map[string]string                 `json:"tags,omitempty"`
	Type        *string                           `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &DatabaseAccountsMongodbDatabasesCollection_STATUS{}

// ConvertStatusFrom populates our DatabaseAccountsMongodbDatabasesCollection_STATUS from the provided source
func (collection *DatabaseAccountsMongodbDatabasesCollection_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS)
	if ok {
		// Populate our instance from source
		return collection.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = collection.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our DatabaseAccountsMongodbDatabasesCollection_STATUS
func (collection *DatabaseAccountsMongodbDatabasesCollection_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS)
	if ok {
		// Populate destination from our instance
		return collection.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS{}
	err := collection.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS populates our DatabaseAccountsMongodbDatabasesCollection_STATUS from the provided source DatabaseAccountsMongodbDatabasesCollection_STATUS
func (collection *DatabaseAccountsMongodbDatabasesCollection_STATUS) AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS(source *v20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	collection.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	collection.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	collection.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	collection.Name = genruntime.ClonePointerToString(source.Name)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions_STATUS
		err := option.AssignPropertiesFromCreateUpdateOptions_STATUS(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreateUpdateOptions_STATUS() to populate field Options")
		}
		collection.Options = &option
	} else {
		collection.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionResource_STATUS
		err := resource.AssignPropertiesFromMongoDBCollectionResource_STATUS(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollectionResource_STATUS() to populate field Resource")
		}
		collection.Resource = &resource
	} else {
		collection.Resource = nil
	}

	// Tags
	collection.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	collection.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		collection.PropertyBag = propertyBag
	} else {
		collection.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS populates the provided destination DatabaseAccountsMongodbDatabasesCollection_STATUS from our DatabaseAccountsMongodbDatabasesCollection_STATUS
func (collection *DatabaseAccountsMongodbDatabasesCollection_STATUS) AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS(destination *v20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(collection.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(collection.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(collection.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(collection.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(collection.Name)

	// Options
	if collection.Options != nil {
		var option v20210515s.CreateUpdateOptions_STATUS
		err := collection.Options.AssignPropertiesToCreateUpdateOptions_STATUS(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreateUpdateOptions_STATUS() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if collection.Resource != nil {
		var resource v20210515s.MongoDBCollectionResource_STATUS
		err := collection.Resource.AssignPropertiesToMongoDBCollectionResource_STATUS(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollectionResource_STATUS() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(collection.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(collection.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.DatabaseAccountsMongodbDatabasesCollection_Spec
type DatabaseAccountsMongodbDatabasesCollection_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string               `json:"azureName,omitempty"`
	Id              *string              `json:"id,omitempty"`
	Location        *string              `json:"location,omitempty"`
	Options         *CreateUpdateOptions `json:"options,omitempty"`
	OriginalVersion string               `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner       *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Resource    *MongoDBCollectionResource         `json:"resource,omitempty"`
	Tags        map[string]string                  `json:"tags,omitempty"`
	Type        *string                            `json:"type,omitempty"`
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsMongodbDatabasesCollection_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsMongodbDatabasesCollection_Spec from the provided source
func (collection *DatabaseAccountsMongodbDatabasesCollection_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec)
	if ok {
		// Populate our instance from source
		return collection.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = collection.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsMongodbDatabasesCollection_Spec
func (collection *DatabaseAccountsMongodbDatabasesCollection_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec)
	if ok {
		// Populate destination from our instance
		return collection.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec{}
	err := collection.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec populates our DatabaseAccountsMongodbDatabasesCollection_Spec from the provided source DatabaseAccountsMongodbDatabasesCollection_Spec
func (collection *DatabaseAccountsMongodbDatabasesCollection_Spec) AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec(source *v20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	collection.AzureName = source.AzureName

	// Id
	collection.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	collection.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreateUpdateOptions() to populate field Options")
		}
		collection.Options = &option
	} else {
		collection.Options = nil
	}

	// OriginalVersion
	collection.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		collection.Owner = &owner
	} else {
		collection.Owner = nil
	}

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionResource
		err := resource.AssignPropertiesFromMongoDBCollectionResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollectionResource() to populate field Resource")
		}
		collection.Resource = &resource
	} else {
		collection.Resource = nil
	}

	// Tags
	collection.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	collection.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		collection.PropertyBag = propertyBag
	} else {
		collection.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec populates the provided destination DatabaseAccountsMongodbDatabasesCollection_Spec from our DatabaseAccountsMongodbDatabasesCollection_Spec
func (collection *DatabaseAccountsMongodbDatabasesCollection_Spec) AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec(destination *v20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(collection.PropertyBag)

	// AzureName
	destination.AzureName = collection.AzureName

	// Id
	destination.Id = genruntime.ClonePointerToString(collection.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(collection.Location)

	// Options
	if collection.Options != nil {
		var option v20210515s.CreateUpdateOptions
		err := collection.Options.AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreateUpdateOptions() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = collection.OriginalVersion

	// Owner
	if collection.Owner != nil {
		owner := collection.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Resource
	if collection.Resource != nil {
		var resource v20210515s.MongoDBCollectionResource
		err := collection.Resource.AssignPropertiesToMongoDBCollectionResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollectionResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(collection.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(collection.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoDBCollectionResource
// Deprecated version of MongoDBCollectionResource. Use v1beta20210515.MongoDBCollectionResource instead
type MongoDBCollectionResource struct {
	AnalyticalStorageTtl *int                   `json:"analyticalStorageTtl,omitempty"`
	Id                   *string                `json:"id,omitempty"`
	Indexes              []MongoIndex           `json:"indexes,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ShardKey             map[string]string      `json:"shardKey,omitempty"`
}

// AssignPropertiesFromMongoDBCollectionResource populates our MongoDBCollectionResource from the provided source MongoDBCollectionResource
func (resource *MongoDBCollectionResource) AssignPropertiesFromMongoDBCollectionResource(source *v20210515s.MongoDBCollectionResource) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex
			err := indexLocal.AssignPropertiesFromMongoIndex(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromMongoIndex() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		resource.Indexes = indexList
	} else {
		resource.Indexes = nil
	}

	// ShardKey
	resource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		resource.PropertyBag = propertyBag
	} else {
		resource.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionResource populates the provided destination MongoDBCollectionResource from our MongoDBCollectionResource
func (resource *MongoDBCollectionResource) AssignPropertiesToMongoDBCollectionResource(destination *v20210515s.MongoDBCollectionResource) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(resource.PropertyBag)

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Indexes
	if resource.Indexes != nil {
		indexList := make([]v20210515s.MongoIndex, len(resource.Indexes))
		for index, indexItem := range resource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v20210515s.MongoIndex
			err := indexItem.AssignPropertiesToMongoIndex(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToMongoIndex() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(resource.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoDBCollectionResource_STATUS
// Deprecated version of MongoDBCollectionResource_STATUS. Use v1beta20210515.MongoDBCollectionResource_STATUS instead
type MongoDBCollectionResource_STATUS struct {
	AnalyticalStorageTtl *int                   `json:"analyticalStorageTtl,omitempty"`
	Id                   *string                `json:"id,omitempty"`
	Indexes              []MongoIndex_STATUS    `json:"indexes,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ShardKey             map[string]string      `json:"shardKey,omitempty"`
}

// AssignPropertiesFromMongoDBCollectionResource_STATUS populates our MongoDBCollectionResource_STATUS from the provided source MongoDBCollectionResource_STATUS
func (resource *MongoDBCollectionResource_STATUS) AssignPropertiesFromMongoDBCollectionResource_STATUS(source *v20210515s.MongoDBCollectionResource_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex_STATUS, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex_STATUS
			err := indexLocal.AssignPropertiesFromMongoIndex_STATUS(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromMongoIndex_STATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		resource.Indexes = indexList
	} else {
		resource.Indexes = nil
	}

	// ShardKey
	resource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		resource.PropertyBag = propertyBag
	} else {
		resource.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionResource_STATUS populates the provided destination MongoDBCollectionResource_STATUS from our MongoDBCollectionResource_STATUS
func (resource *MongoDBCollectionResource_STATUS) AssignPropertiesToMongoDBCollectionResource_STATUS(destination *v20210515s.MongoDBCollectionResource_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(resource.PropertyBag)

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Indexes
	if resource.Indexes != nil {
		indexList := make([]v20210515s.MongoIndex_STATUS, len(resource.Indexes))
		for index, indexItem := range resource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v20210515s.MongoIndex_STATUS
			err := indexItem.AssignPropertiesToMongoIndex_STATUS(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToMongoIndex_STATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(resource.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoIndex
// Deprecated version of MongoIndex. Use v1beta20210515.MongoIndex instead
type MongoIndex struct {
	Key         *MongoIndexKeys        `json:"key,omitempty"`
	Options     *MongoIndexOptions     `json:"options,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromMongoIndex populates our MongoIndex from the provided source MongoIndex
func (index *MongoIndex) AssignPropertiesFromMongoIndex(source *v20210515s.MongoIndex) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	if source.Key != nil {
		var key MongoIndexKeys
		err := key.AssignPropertiesFromMongoIndexKeys(source.Key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexKeys() to populate field Key")
		}
		index.Key = &key
	} else {
		index.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions
		err := option.AssignPropertiesFromMongoIndexOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexOptions() to populate field Options")
		}
		index.Options = &option
	} else {
		index.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		index.PropertyBag = propertyBag
	} else {
		index.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndex populates the provided destination MongoIndex from our MongoIndex
func (index *MongoIndex) AssignPropertiesToMongoIndex(destination *v20210515s.MongoIndex) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(index.PropertyBag)

	// Key
	if index.Key != nil {
		var key v20210515s.MongoIndexKeys
		err := index.Key.AssignPropertiesToMongoIndexKeys(&key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexKeys() to populate field Key")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if index.Options != nil {
		var option v20210515s.MongoIndexOptions
		err := index.Options.AssignPropertiesToMongoIndexOptions(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexOptions() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoIndex_STATUS
// Deprecated version of MongoIndex_STATUS. Use v1beta20210515.MongoIndex_STATUS instead
type MongoIndex_STATUS struct {
	Key         *MongoIndexKeys_STATUS    `json:"key,omitempty"`
	Options     *MongoIndexOptions_STATUS `json:"options,omitempty"`
	PropertyBag genruntime.PropertyBag    `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromMongoIndex_STATUS populates our MongoIndex_STATUS from the provided source MongoIndex_STATUS
func (index *MongoIndex_STATUS) AssignPropertiesFromMongoIndex_STATUS(source *v20210515s.MongoIndex_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	if source.Key != nil {
		var key MongoIndexKeys_STATUS
		err := key.AssignPropertiesFromMongoIndexKeys_STATUS(source.Key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexKeys_STATUS() to populate field Key")
		}
		index.Key = &key
	} else {
		index.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions_STATUS
		err := option.AssignPropertiesFromMongoIndexOptions_STATUS(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexOptions_STATUS() to populate field Options")
		}
		index.Options = &option
	} else {
		index.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		index.PropertyBag = propertyBag
	} else {
		index.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndex_STATUS populates the provided destination MongoIndex_STATUS from our MongoIndex_STATUS
func (index *MongoIndex_STATUS) AssignPropertiesToMongoIndex_STATUS(destination *v20210515s.MongoIndex_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(index.PropertyBag)

	// Key
	if index.Key != nil {
		var key v20210515s.MongoIndexKeys_STATUS
		err := index.Key.AssignPropertiesToMongoIndexKeys_STATUS(&key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexKeys_STATUS() to populate field Key")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if index.Options != nil {
		var option v20210515s.MongoIndexOptions_STATUS
		err := index.Options.AssignPropertiesToMongoIndexOptions_STATUS(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexOptions_STATUS() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoIndexKeys
// Deprecated version of MongoIndexKeys. Use v1beta20210515.MongoIndexKeys instead
type MongoIndexKeys struct {
	Keys        []string               `json:"keys,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromMongoIndexKeys populates our MongoIndexKeys from the provided source MongoIndexKeys
func (keys *MongoIndexKeys) AssignPropertiesFromMongoIndexKeys(source *v20210515s.MongoIndexKeys) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Keys
	keys.Keys = genruntime.CloneSliceOfString(source.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		keys.PropertyBag = propertyBag
	} else {
		keys.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeys populates the provided destination MongoIndexKeys from our MongoIndexKeys
func (keys *MongoIndexKeys) AssignPropertiesToMongoIndexKeys(destination *v20210515s.MongoIndexKeys) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(keys.PropertyBag)

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(keys.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoIndexKeys_STATUS
// Deprecated version of MongoIndexKeys_STATUS. Use v1beta20210515.MongoIndexKeys_STATUS instead
type MongoIndexKeys_STATUS struct {
	Keys        []string               `json:"keys,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromMongoIndexKeys_STATUS populates our MongoIndexKeys_STATUS from the provided source MongoIndexKeys_STATUS
func (keys *MongoIndexKeys_STATUS) AssignPropertiesFromMongoIndexKeys_STATUS(source *v20210515s.MongoIndexKeys_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Keys
	keys.Keys = genruntime.CloneSliceOfString(source.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		keys.PropertyBag = propertyBag
	} else {
		keys.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeys_STATUS populates the provided destination MongoIndexKeys_STATUS from our MongoIndexKeys_STATUS
func (keys *MongoIndexKeys_STATUS) AssignPropertiesToMongoIndexKeys_STATUS(destination *v20210515s.MongoIndexKeys_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(keys.PropertyBag)

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(keys.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoIndexOptions
// Deprecated version of MongoIndexOptions. Use v1beta20210515.MongoIndexOptions instead
type MongoIndexOptions struct {
	ExpireAfterSeconds *int                   `json:"expireAfterSeconds,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Unique             *bool                  `json:"unique,omitempty"`
}

// AssignPropertiesFromMongoIndexOptions populates our MongoIndexOptions from the provided source MongoIndexOptions
func (options *MongoIndexOptions) AssignPropertiesFromMongoIndexOptions(source *v20210515s.MongoIndexOptions) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ExpireAfterSeconds
	options.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		options.Unique = &unique
	} else {
		options.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		options.PropertyBag = propertyBag
	} else {
		options.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptions populates the provided destination MongoIndexOptions from our MongoIndexOptions
func (options *MongoIndexOptions) AssignPropertiesToMongoIndexOptions(destination *v20210515s.MongoIndexOptions) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(options.PropertyBag)

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(options.ExpireAfterSeconds)

	// Unique
	if options.Unique != nil {
		unique := *options.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.MongoIndexOptions_STATUS
// Deprecated version of MongoIndexOptions_STATUS. Use v1beta20210515.MongoIndexOptions_STATUS instead
type MongoIndexOptions_STATUS struct {
	ExpireAfterSeconds *int                   `json:"expireAfterSeconds,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Unique             *bool                  `json:"unique,omitempty"`
}

// AssignPropertiesFromMongoIndexOptions_STATUS populates our MongoIndexOptions_STATUS from the provided source MongoIndexOptions_STATUS
func (options *MongoIndexOptions_STATUS) AssignPropertiesFromMongoIndexOptions_STATUS(source *v20210515s.MongoIndexOptions_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ExpireAfterSeconds
	options.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		options.Unique = &unique
	} else {
		options.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		options.PropertyBag = propertyBag
	} else {
		options.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptions_STATUS populates the provided destination MongoIndexOptions_STATUS from our MongoIndexOptions_STATUS
func (options *MongoIndexOptions_STATUS) AssignPropertiesToMongoIndexOptions_STATUS(destination *v20210515s.MongoIndexOptions_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(options.PropertyBag)

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(options.ExpireAfterSeconds)

	// Unique
	if options.Unique != nil {
		unique := *options.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabaseCollection{}, &MongodbDatabaseCollectionList{})
}
