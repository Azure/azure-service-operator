// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515storage

import (
	"fmt"
	v20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1beta20210515storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20210515.SqlDatabaseContainer
// Deprecated version of SqlDatabaseContainer. Use v1beta20210515.SqlDatabaseContainer instead
type SqlDatabaseContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsSqlDatabasesContainers_Spec `json:"spec,omitempty"`
	Status            SqlContainerGetResults_STATUS               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SqlDatabaseContainer{}

// GetConditions returns the conditions of the resource
func (container *SqlDatabaseContainer) GetConditions() conditions.Conditions {
	return container.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (container *SqlDatabaseContainer) SetConditions(conditions conditions.Conditions) {
	container.Status.Conditions = conditions
}

var _ conversion.Convertible = &SqlDatabaseContainer{}

// ConvertFrom populates our SqlDatabaseContainer from the provided hub SqlDatabaseContainer
func (container *SqlDatabaseContainer) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210515s.SqlDatabaseContainer)
	if !ok {
		return fmt.Errorf("expected documentdb/v1beta20210515storage/SqlDatabaseContainer but received %T instead", hub)
	}

	return container.AssignPropertiesFromSqlDatabaseContainer(source)
}

// ConvertTo populates the provided hub SqlDatabaseContainer from our SqlDatabaseContainer
func (container *SqlDatabaseContainer) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210515s.SqlDatabaseContainer)
	if !ok {
		return fmt.Errorf("expected documentdb/v1beta20210515storage/SqlDatabaseContainer but received %T instead", hub)
	}

	return container.AssignPropertiesToSqlDatabaseContainer(destination)
}

var _ genruntime.KubernetesResource = &SqlDatabaseContainer{}

// AzureName returns the Azure name of the resource
func (container *SqlDatabaseContainer) AzureName() string {
	return container.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (container SqlDatabaseContainer) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (container *SqlDatabaseContainer) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (container *SqlDatabaseContainer) GetSpec() genruntime.ConvertibleSpec {
	return &container.Spec
}

// GetStatus returns the status of this resource
func (container *SqlDatabaseContainer) GetStatus() genruntime.ConvertibleStatus {
	return &container.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
func (container *SqlDatabaseContainer) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
}

// NewEmptyStatus returns a new empty (blank) status
func (container *SqlDatabaseContainer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SqlContainerGetResults_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (container *SqlDatabaseContainer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(container.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  container.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (container *SqlDatabaseContainer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SqlContainerGetResults_STATUS); ok {
		container.Status = *st
		return nil
	}

	// Convert status to required version
	var st SqlContainerGetResults_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	container.Status = st
	return nil
}

// AssignPropertiesFromSqlDatabaseContainer populates our SqlDatabaseContainer from the provided source SqlDatabaseContainer
func (container *SqlDatabaseContainer) AssignPropertiesFromSqlDatabaseContainer(source *v20210515s.SqlDatabaseContainer) error {

	// ObjectMeta
	container.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccountsSqlDatabasesContainers_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec() to populate field Spec")
	}
	container.Spec = spec

	// Status
	var status SqlContainerGetResults_STATUS
	err = status.AssignPropertiesFromSqlContainerGetResultsSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSqlContainerGetResultsSTATUS() to populate field Status")
	}
	container.Status = status

	// No error
	return nil
}

// AssignPropertiesToSqlDatabaseContainer populates the provided destination SqlDatabaseContainer from our SqlDatabaseContainer
func (container *SqlDatabaseContainer) AssignPropertiesToSqlDatabaseContainer(destination *v20210515s.SqlDatabaseContainer) error {

	// ObjectMeta
	destination.ObjectMeta = *container.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210515s.DatabaseAccountsSqlDatabasesContainers_Spec
	err := container.Spec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210515s.SqlContainerGetResults_STATUS
	err = container.Status.AssignPropertiesToSqlContainerGetResultsSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSqlContainerGetResultsSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (container *SqlDatabaseContainer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: container.Spec.OriginalVersion,
		Kind:    "SqlDatabaseContainer",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20210515.SqlDatabaseContainer
// Deprecated version of SqlDatabaseContainer. Use v1beta20210515.SqlDatabaseContainer instead
type SqlDatabaseContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabaseContainer `json:"items"`
}

// Storage version of v1alpha1api20210515.DatabaseAccountsSqlDatabasesContainers_Spec
type DatabaseAccountsSqlDatabasesContainers_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string               `json:"azureName,omitempty"`
	Location        *string              `json:"location,omitempty"`
	Options         *CreateUpdateOptions `json:"options,omitempty"`
	OriginalVersion string               `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a documentdb.azure.com/SqlDatabase resource
	Owner       *genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner,omitempty" kind:"SqlDatabase"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Resource    *SqlContainerResource              `json:"resource,omitempty"`
	Tags        map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsSqlDatabasesContainers_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsSqlDatabasesContainers_Spec from the provided source
func (containers *DatabaseAccountsSqlDatabasesContainers_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210515s.DatabaseAccountsSqlDatabasesContainers_Spec)
	if ok {
		// Populate our instance from source
		return containers.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(src)
	}

	// Convert to an intermediate form
	src = &v20210515s.DatabaseAccountsSqlDatabasesContainers_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = containers.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsSqlDatabasesContainers_Spec
func (containers *DatabaseAccountsSqlDatabasesContainers_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210515s.DatabaseAccountsSqlDatabasesContainers_Spec)
	if ok {
		// Populate destination from our instance
		return containers.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210515s.DatabaseAccountsSqlDatabasesContainers_Spec{}
	err := containers.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec populates our DatabaseAccountsSqlDatabasesContainers_Spec from the provided source DatabaseAccountsSqlDatabasesContainers_Spec
func (containers *DatabaseAccountsSqlDatabasesContainers_Spec) AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(source *v20210515s.DatabaseAccountsSqlDatabasesContainers_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	containers.AzureName = source.AzureName

	// Location
	containers.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreateUpdateOptions() to populate field Options")
		}
		containers.Options = &option
	} else {
		containers.Options = nil
	}

	// OriginalVersion
	containers.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		containers.Owner = &owner
	} else {
		containers.Owner = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlContainerResource
		err := resource.AssignPropertiesFromSqlContainerResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSqlContainerResource() to populate field Resource")
		}
		containers.Resource = &resource
	} else {
		containers.Resource = nil
	}

	// Tags
	containers.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		containers.PropertyBag = propertyBag
	} else {
		containers.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec populates the provided destination DatabaseAccountsSqlDatabasesContainers_Spec from our DatabaseAccountsSqlDatabasesContainers_Spec
func (containers *DatabaseAccountsSqlDatabasesContainers_Spec) AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(destination *v20210515s.DatabaseAccountsSqlDatabasesContainers_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(containers.PropertyBag)

	// AzureName
	destination.AzureName = containers.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(containers.Location)

	// Options
	if containers.Options != nil {
		var option v20210515s.CreateUpdateOptions
		err := containers.Options.AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreateUpdateOptions() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = containers.OriginalVersion

	// Owner
	if containers.Owner != nil {
		owner := containers.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Resource
	if containers.Resource != nil {
		var resource v20210515s.SqlContainerResource
		err := containers.Resource.AssignPropertiesToSqlContainerResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSqlContainerResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(containers.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.SqlContainerGetResults_STATUS
// Deprecated version of SqlContainerGetResults_STATUS. Use v1beta20210515.SqlContainerGetResults_STATUS instead
type SqlContainerGetResults_STATUS struct {
	Conditions  []conditions.Condition                     `json:"conditions,omitempty"`
	Id          *string                                    `json:"id,omitempty"`
	Location    *string                                    `json:"location,omitempty"`
	Name        *string                                    `json:"name,omitempty"`
	Options     *OptionsResource_STATUS                    `json:"options,omitempty"`
	PropertyBag genruntime.PropertyBag                     `json:"$propertyBag,omitempty"`
	Resource    *SqlContainerGetProperties_STATUS_Resource `json:"resource,omitempty"`
	Tags        map[string]string                          `json:"tags,omitempty"`
	Type        *string                                    `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SqlContainerGetResults_STATUS{}

// ConvertStatusFrom populates our SqlContainerGetResults_STATUS from the provided source
func (results *SqlContainerGetResults_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210515s.SqlContainerGetResults_STATUS)
	if ok {
		// Populate our instance from source
		return results.AssignPropertiesFromSqlContainerGetResultsSTATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210515s.SqlContainerGetResults_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = results.AssignPropertiesFromSqlContainerGetResultsSTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SqlContainerGetResults_STATUS
func (results *SqlContainerGetResults_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210515s.SqlContainerGetResults_STATUS)
	if ok {
		// Populate destination from our instance
		return results.AssignPropertiesToSqlContainerGetResultsSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210515s.SqlContainerGetResults_STATUS{}
	err := results.AssignPropertiesToSqlContainerGetResultsSTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromSqlContainerGetResultsSTATUS populates our SqlContainerGetResults_STATUS from the provided source SqlContainerGetResults_STATUS
func (results *SqlContainerGetResults_STATUS) AssignPropertiesFromSqlContainerGetResultsSTATUS(source *v20210515s.SqlContainerGetResults_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	results.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	results.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	results.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	results.Name = genruntime.ClonePointerToString(source.Name)

	// Options
	if source.Options != nil {
		var option OptionsResource_STATUS
		err := option.AssignPropertiesFromOptionsResourceSTATUS(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromOptionsResourceSTATUS() to populate field Options")
		}
		results.Options = &option
	} else {
		results.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlContainerGetProperties_STATUS_Resource
		err := resource.AssignPropertiesFromSqlContainerGetPropertiesSTATUSResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSqlContainerGetPropertiesSTATUSResource() to populate field Resource")
		}
		results.Resource = &resource
	} else {
		results.Resource = nil
	}

	// Tags
	results.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	results.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		results.PropertyBag = propertyBag
	} else {
		results.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlContainerGetResultsSTATUS populates the provided destination SqlContainerGetResults_STATUS from our SqlContainerGetResults_STATUS
func (results *SqlContainerGetResults_STATUS) AssignPropertiesToSqlContainerGetResultsSTATUS(destination *v20210515s.SqlContainerGetResults_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(results.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(results.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(results.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(results.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(results.Name)

	// Options
	if results.Options != nil {
		var option v20210515s.OptionsResource_STATUS
		err := results.Options.AssignPropertiesToOptionsResourceSTATUS(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToOptionsResourceSTATUS() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if results.Resource != nil {
		var resource v20210515s.SqlContainerGetProperties_STATUS_Resource
		err := results.Resource.AssignPropertiesToSqlContainerGetPropertiesSTATUSResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSqlContainerGetPropertiesSTATUSResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(results.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(results.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.SqlContainerGetProperties_STATUS_Resource
// Deprecated version of SqlContainerGetProperties_STATUS_Resource. Use v1beta20210515.SqlContainerGetProperties_STATUS_Resource instead
type SqlContainerGetProperties_STATUS_Resource struct {
	AnalyticalStorageTtl     *int                             `json:"analyticalStorageTtl,omitempty"`
	ConflictResolutionPolicy *ConflictResolutionPolicy_STATUS `json:"conflictResolutionPolicy,omitempty"`
	DefaultTtl               *int                             `json:"defaultTtl,omitempty"`
	Etag                     *string                          `json:"_etag,omitempty"`
	Id                       *string                          `json:"id,omitempty"`
	IndexingPolicy           *IndexingPolicy_STATUS           `json:"indexingPolicy,omitempty"`
	PartitionKey             *ContainerPartitionKey_STATUS    `json:"partitionKey,omitempty"`
	PropertyBag              genruntime.PropertyBag           `json:"$propertyBag,omitempty"`
	Rid                      *string                          `json:"_rid,omitempty"`
	Ts                       *float64                         `json:"_ts,omitempty"`
	UniqueKeyPolicy          *UniqueKeyPolicy_STATUS          `json:"uniqueKeyPolicy,omitempty"`
}

// AssignPropertiesFromSqlContainerGetPropertiesSTATUSResource populates our SqlContainerGetProperties_STATUS_Resource from the provided source SqlContainerGetProperties_STATUS_Resource
func (resource *SqlContainerGetProperties_STATUS_Resource) AssignPropertiesFromSqlContainerGetPropertiesSTATUSResource(source *v20210515s.SqlContainerGetProperties_STATUS_Resource) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy ConflictResolutionPolicy_STATUS
		err := conflictResolutionPolicy.AssignPropertiesFromConflictResolutionPolicySTATUS(source.ConflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromConflictResolutionPolicySTATUS() to populate field ConflictResolutionPolicy")
		}
		resource.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		resource.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	resource.DefaultTtl = genruntime.ClonePointerToInt(source.DefaultTtl)

	// Etag
	resource.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// IndexingPolicy
	if source.IndexingPolicy != nil {
		var indexingPolicy IndexingPolicy_STATUS
		err := indexingPolicy.AssignPropertiesFromIndexingPolicySTATUS(source.IndexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIndexingPolicySTATUS() to populate field IndexingPolicy")
		}
		resource.IndexingPolicy = &indexingPolicy
	} else {
		resource.IndexingPolicy = nil
	}

	// PartitionKey
	if source.PartitionKey != nil {
		var partitionKey ContainerPartitionKey_STATUS
		err := partitionKey.AssignPropertiesFromContainerPartitionKeySTATUS(source.PartitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromContainerPartitionKeySTATUS() to populate field PartitionKey")
		}
		resource.PartitionKey = &partitionKey
	} else {
		resource.PartitionKey = nil
	}

	// Rid
	resource.Rid = genruntime.ClonePointerToString(source.Rid)

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		resource.Ts = &t
	} else {
		resource.Ts = nil
	}

	// UniqueKeyPolicy
	if source.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy UniqueKeyPolicy_STATUS
		err := uniqueKeyPolicy.AssignPropertiesFromUniqueKeyPolicySTATUS(source.UniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUniqueKeyPolicySTATUS() to populate field UniqueKeyPolicy")
		}
		resource.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		resource.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		resource.PropertyBag = propertyBag
	} else {
		resource.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlContainerGetPropertiesSTATUSResource populates the provided destination SqlContainerGetProperties_STATUS_Resource from our SqlContainerGetProperties_STATUS_Resource
func (resource *SqlContainerGetProperties_STATUS_Resource) AssignPropertiesToSqlContainerGetPropertiesSTATUSResource(destination *v20210515s.SqlContainerGetProperties_STATUS_Resource) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(resource.PropertyBag)

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if resource.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy v20210515s.ConflictResolutionPolicy_STATUS
		err := resource.ConflictResolutionPolicy.AssignPropertiesToConflictResolutionPolicySTATUS(&conflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToConflictResolutionPolicySTATUS() to populate field ConflictResolutionPolicy")
		}
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	destination.DefaultTtl = genruntime.ClonePointerToInt(resource.DefaultTtl)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(resource.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// IndexingPolicy
	if resource.IndexingPolicy != nil {
		var indexingPolicy v20210515s.IndexingPolicy_STATUS
		err := resource.IndexingPolicy.AssignPropertiesToIndexingPolicySTATUS(&indexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIndexingPolicySTATUS() to populate field IndexingPolicy")
		}
		destination.IndexingPolicy = &indexingPolicy
	} else {
		destination.IndexingPolicy = nil
	}

	// PartitionKey
	if resource.PartitionKey != nil {
		var partitionKey v20210515s.ContainerPartitionKey_STATUS
		err := resource.PartitionKey.AssignPropertiesToContainerPartitionKeySTATUS(&partitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToContainerPartitionKeySTATUS() to populate field PartitionKey")
		}
		destination.PartitionKey = &partitionKey
	} else {
		destination.PartitionKey = nil
	}

	// Rid
	destination.Rid = genruntime.ClonePointerToString(resource.Rid)

	// Ts
	if resource.Ts != nil {
		t := *resource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// UniqueKeyPolicy
	if resource.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy v20210515s.UniqueKeyPolicy_STATUS
		err := resource.UniqueKeyPolicy.AssignPropertiesToUniqueKeyPolicySTATUS(&uniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUniqueKeyPolicySTATUS() to populate field UniqueKeyPolicy")
		}
		destination.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		destination.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.SqlContainerResource
// Deprecated version of SqlContainerResource. Use v1beta20210515.SqlContainerResource instead
type SqlContainerResource struct {
	AnalyticalStorageTtl     *int                      `json:"analyticalStorageTtl,omitempty"`
	ConflictResolutionPolicy *ConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`
	DefaultTtl               *int                      `json:"defaultTtl,omitempty"`
	Id                       *string                   `json:"id,omitempty"`
	IndexingPolicy           *IndexingPolicy           `json:"indexingPolicy,omitempty"`
	PartitionKey             *ContainerPartitionKey    `json:"partitionKey,omitempty"`
	PropertyBag              genruntime.PropertyBag    `json:"$propertyBag,omitempty"`
	UniqueKeyPolicy          *UniqueKeyPolicy          `json:"uniqueKeyPolicy,omitempty"`
}

// AssignPropertiesFromSqlContainerResource populates our SqlContainerResource from the provided source SqlContainerResource
func (resource *SqlContainerResource) AssignPropertiesFromSqlContainerResource(source *v20210515s.SqlContainerResource) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy ConflictResolutionPolicy
		err := conflictResolutionPolicy.AssignPropertiesFromConflictResolutionPolicy(source.ConflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromConflictResolutionPolicy() to populate field ConflictResolutionPolicy")
		}
		resource.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		resource.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	resource.DefaultTtl = genruntime.ClonePointerToInt(source.DefaultTtl)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// IndexingPolicy
	if source.IndexingPolicy != nil {
		var indexingPolicy IndexingPolicy
		err := indexingPolicy.AssignPropertiesFromIndexingPolicy(source.IndexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIndexingPolicy() to populate field IndexingPolicy")
		}
		resource.IndexingPolicy = &indexingPolicy
	} else {
		resource.IndexingPolicy = nil
	}

	// PartitionKey
	if source.PartitionKey != nil {
		var partitionKey ContainerPartitionKey
		err := partitionKey.AssignPropertiesFromContainerPartitionKey(source.PartitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromContainerPartitionKey() to populate field PartitionKey")
		}
		resource.PartitionKey = &partitionKey
	} else {
		resource.PartitionKey = nil
	}

	// UniqueKeyPolicy
	if source.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy UniqueKeyPolicy
		err := uniqueKeyPolicy.AssignPropertiesFromUniqueKeyPolicy(source.UniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUniqueKeyPolicy() to populate field UniqueKeyPolicy")
		}
		resource.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		resource.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		resource.PropertyBag = propertyBag
	} else {
		resource.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlContainerResource populates the provided destination SqlContainerResource from our SqlContainerResource
func (resource *SqlContainerResource) AssignPropertiesToSqlContainerResource(destination *v20210515s.SqlContainerResource) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(resource.PropertyBag)

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if resource.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy v20210515s.ConflictResolutionPolicy
		err := resource.ConflictResolutionPolicy.AssignPropertiesToConflictResolutionPolicy(&conflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToConflictResolutionPolicy() to populate field ConflictResolutionPolicy")
		}
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	destination.DefaultTtl = genruntime.ClonePointerToInt(resource.DefaultTtl)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// IndexingPolicy
	if resource.IndexingPolicy != nil {
		var indexingPolicy v20210515s.IndexingPolicy
		err := resource.IndexingPolicy.AssignPropertiesToIndexingPolicy(&indexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIndexingPolicy() to populate field IndexingPolicy")
		}
		destination.IndexingPolicy = &indexingPolicy
	} else {
		destination.IndexingPolicy = nil
	}

	// PartitionKey
	if resource.PartitionKey != nil {
		var partitionKey v20210515s.ContainerPartitionKey
		err := resource.PartitionKey.AssignPropertiesToContainerPartitionKey(&partitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToContainerPartitionKey() to populate field PartitionKey")
		}
		destination.PartitionKey = &partitionKey
	} else {
		destination.PartitionKey = nil
	}

	// UniqueKeyPolicy
	if resource.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy v20210515s.UniqueKeyPolicy
		err := resource.UniqueKeyPolicy.AssignPropertiesToUniqueKeyPolicy(&uniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUniqueKeyPolicy() to populate field UniqueKeyPolicy")
		}
		destination.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		destination.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.ConflictResolutionPolicy
// Deprecated version of ConflictResolutionPolicy. Use v1beta20210515.ConflictResolutionPolicy instead
type ConflictResolutionPolicy struct {
	ConflictResolutionPath      *string                `json:"conflictResolutionPath,omitempty"`
	ConflictResolutionProcedure *string                `json:"conflictResolutionProcedure,omitempty"`
	Mode                        *string                `json:"mode,omitempty"`
	PropertyBag                 genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromConflictResolutionPolicy populates our ConflictResolutionPolicy from the provided source ConflictResolutionPolicy
func (policy *ConflictResolutionPolicy) AssignPropertiesFromConflictResolutionPolicy(source *v20210515s.ConflictResolutionPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ConflictResolutionPath
	policy.ConflictResolutionPath = genruntime.ClonePointerToString(source.ConflictResolutionPath)

	// ConflictResolutionProcedure
	policy.ConflictResolutionProcedure = genruntime.ClonePointerToString(source.ConflictResolutionProcedure)

	// Mode
	policy.Mode = genruntime.ClonePointerToString(source.Mode)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConflictResolutionPolicy populates the provided destination ConflictResolutionPolicy from our ConflictResolutionPolicy
func (policy *ConflictResolutionPolicy) AssignPropertiesToConflictResolutionPolicy(destination *v20210515s.ConflictResolutionPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// ConflictResolutionPath
	destination.ConflictResolutionPath = genruntime.ClonePointerToString(policy.ConflictResolutionPath)

	// ConflictResolutionProcedure
	destination.ConflictResolutionProcedure = genruntime.ClonePointerToString(policy.ConflictResolutionProcedure)

	// Mode
	destination.Mode = genruntime.ClonePointerToString(policy.Mode)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.ConflictResolutionPolicy_STATUS
// Deprecated version of ConflictResolutionPolicy_STATUS. Use v1beta20210515.ConflictResolutionPolicy_STATUS instead
type ConflictResolutionPolicy_STATUS struct {
	ConflictResolutionPath      *string                `json:"conflictResolutionPath,omitempty"`
	ConflictResolutionProcedure *string                `json:"conflictResolutionProcedure,omitempty"`
	Mode                        *string                `json:"mode,omitempty"`
	PropertyBag                 genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromConflictResolutionPolicySTATUS populates our ConflictResolutionPolicy_STATUS from the provided source ConflictResolutionPolicy_STATUS
func (policy *ConflictResolutionPolicy_STATUS) AssignPropertiesFromConflictResolutionPolicySTATUS(source *v20210515s.ConflictResolutionPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ConflictResolutionPath
	policy.ConflictResolutionPath = genruntime.ClonePointerToString(source.ConflictResolutionPath)

	// ConflictResolutionProcedure
	policy.ConflictResolutionProcedure = genruntime.ClonePointerToString(source.ConflictResolutionProcedure)

	// Mode
	policy.Mode = genruntime.ClonePointerToString(source.Mode)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConflictResolutionPolicySTATUS populates the provided destination ConflictResolutionPolicy_STATUS from our ConflictResolutionPolicy_STATUS
func (policy *ConflictResolutionPolicy_STATUS) AssignPropertiesToConflictResolutionPolicySTATUS(destination *v20210515s.ConflictResolutionPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// ConflictResolutionPath
	destination.ConflictResolutionPath = genruntime.ClonePointerToString(policy.ConflictResolutionPath)

	// ConflictResolutionProcedure
	destination.ConflictResolutionProcedure = genruntime.ClonePointerToString(policy.ConflictResolutionProcedure)

	// Mode
	destination.Mode = genruntime.ClonePointerToString(policy.Mode)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.ContainerPartitionKey
// Deprecated version of ContainerPartitionKey. Use v1beta20210515.ContainerPartitionKey instead
type ContainerPartitionKey struct {
	Kind        *string                `json:"kind,omitempty"`
	Paths       []string               `json:"paths,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Version     *int                   `json:"version,omitempty"`
}

// AssignPropertiesFromContainerPartitionKey populates our ContainerPartitionKey from the provided source ContainerPartitionKey
func (partitionKey *ContainerPartitionKey) AssignPropertiesFromContainerPartitionKey(source *v20210515s.ContainerPartitionKey) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Kind
	partitionKey.Kind = genruntime.ClonePointerToString(source.Kind)

	// Paths
	partitionKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// Version
	partitionKey.Version = genruntime.ClonePointerToInt(source.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		partitionKey.PropertyBag = propertyBag
	} else {
		partitionKey.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToContainerPartitionKey populates the provided destination ContainerPartitionKey from our ContainerPartitionKey
func (partitionKey *ContainerPartitionKey) AssignPropertiesToContainerPartitionKey(destination *v20210515s.ContainerPartitionKey) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(partitionKey.PropertyBag)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(partitionKey.Kind)

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(partitionKey.Paths)

	// Version
	destination.Version = genruntime.ClonePointerToInt(partitionKey.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.ContainerPartitionKey_STATUS
// Deprecated version of ContainerPartitionKey_STATUS. Use v1beta20210515.ContainerPartitionKey_STATUS instead
type ContainerPartitionKey_STATUS struct {
	Kind        *string                `json:"kind,omitempty"`
	Paths       []string               `json:"paths,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SystemKey   *bool                  `json:"systemKey,omitempty"`
	Version     *int                   `json:"version,omitempty"`
}

// AssignPropertiesFromContainerPartitionKeySTATUS populates our ContainerPartitionKey_STATUS from the provided source ContainerPartitionKey_STATUS
func (partitionKey *ContainerPartitionKey_STATUS) AssignPropertiesFromContainerPartitionKeySTATUS(source *v20210515s.ContainerPartitionKey_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Kind
	partitionKey.Kind = genruntime.ClonePointerToString(source.Kind)

	// Paths
	partitionKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// SystemKey
	if source.SystemKey != nil {
		systemKey := *source.SystemKey
		partitionKey.SystemKey = &systemKey
	} else {
		partitionKey.SystemKey = nil
	}

	// Version
	partitionKey.Version = genruntime.ClonePointerToInt(source.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		partitionKey.PropertyBag = propertyBag
	} else {
		partitionKey.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToContainerPartitionKeySTATUS populates the provided destination ContainerPartitionKey_STATUS from our ContainerPartitionKey_STATUS
func (partitionKey *ContainerPartitionKey_STATUS) AssignPropertiesToContainerPartitionKeySTATUS(destination *v20210515s.ContainerPartitionKey_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(partitionKey.PropertyBag)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(partitionKey.Kind)

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(partitionKey.Paths)

	// SystemKey
	if partitionKey.SystemKey != nil {
		systemKey := *partitionKey.SystemKey
		destination.SystemKey = &systemKey
	} else {
		destination.SystemKey = nil
	}

	// Version
	destination.Version = genruntime.ClonePointerToInt(partitionKey.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.IndexingPolicy
// Deprecated version of IndexingPolicy. Use v1beta20210515.IndexingPolicy instead
type IndexingPolicy struct {
	Automatic        *bool                  `json:"automatic,omitempty"`
	CompositeIndexes [][]CompositePath      `json:"compositeIndexes,omitempty"`
	ExcludedPaths    []ExcludedPath         `json:"excludedPaths,omitempty"`
	IncludedPaths    []IncludedPath         `json:"includedPaths,omitempty"`
	IndexingMode     *string                `json:"indexingMode,omitempty"`
	PropertyBag      genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SpatialIndexes   []SpatialSpec          `json:"spatialIndexes,omitempty"`
}

// AssignPropertiesFromIndexingPolicy populates our IndexingPolicy from the provided source IndexingPolicy
func (policy *IndexingPolicy) AssignPropertiesFromIndexingPolicy(source *v20210515s.IndexingPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Automatic
	if source.Automatic != nil {
		automatic := *source.Automatic
		policy.Automatic = &automatic
	} else {
		policy.Automatic = nil
	}

	// CompositeIndexes
	if source.CompositeIndexes != nil {
		compositeIndexList := make([][]CompositePath, len(source.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range source.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]CompositePath, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal CompositePath
					err := compositeIndexLocal.AssignPropertiesFromCompositePath(&compositeIndexItem1)
					if err != nil {
						return errors.Wrap(err, "calling AssignPropertiesFromCompositePath() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		policy.CompositeIndexes = compositeIndexList
	} else {
		policy.CompositeIndexes = nil
	}

	// ExcludedPaths
	if source.ExcludedPaths != nil {
		excludedPathList := make([]ExcludedPath, len(source.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range source.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath ExcludedPath
			err := excludedPath.AssignPropertiesFromExcludedPath(&excludedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromExcludedPath() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		policy.ExcludedPaths = excludedPathList
	} else {
		policy.ExcludedPaths = nil
	}

	// IncludedPaths
	if source.IncludedPaths != nil {
		includedPathList := make([]IncludedPath, len(source.IncludedPaths))
		for includedPathIndex, includedPathItem := range source.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath IncludedPath
			err := includedPath.AssignPropertiesFromIncludedPath(&includedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIncludedPath() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		policy.IncludedPaths = includedPathList
	} else {
		policy.IncludedPaths = nil
	}

	// IndexingMode
	policy.IndexingMode = genruntime.ClonePointerToString(source.IndexingMode)

	// SpatialIndexes
	if source.SpatialIndexes != nil {
		spatialIndexList := make([]SpatialSpec, len(source.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range source.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal SpatialSpec
			err := spatialIndexLocal.AssignPropertiesFromSpatialSpec(&spatialIndexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSpatialSpec() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		policy.SpatialIndexes = spatialIndexList
	} else {
		policy.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIndexingPolicy populates the provided destination IndexingPolicy from our IndexingPolicy
func (policy *IndexingPolicy) AssignPropertiesToIndexingPolicy(destination *v20210515s.IndexingPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// Automatic
	if policy.Automatic != nil {
		automatic := *policy.Automatic
		destination.Automatic = &automatic
	} else {
		destination.Automatic = nil
	}

	// CompositeIndexes
	if policy.CompositeIndexes != nil {
		compositeIndexList := make([][]v20210515s.CompositePath, len(policy.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range policy.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]v20210515s.CompositePath, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal v20210515s.CompositePath
					err := compositeIndexItem1.AssignPropertiesToCompositePath(&compositeIndexLocal)
					if err != nil {
						return errors.Wrap(err, "calling AssignPropertiesToCompositePath() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		destination.CompositeIndexes = compositeIndexList
	} else {
		destination.CompositeIndexes = nil
	}

	// ExcludedPaths
	if policy.ExcludedPaths != nil {
		excludedPathList := make([]v20210515s.ExcludedPath, len(policy.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range policy.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath v20210515s.ExcludedPath
			err := excludedPathItem.AssignPropertiesToExcludedPath(&excludedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToExcludedPath() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		destination.ExcludedPaths = excludedPathList
	} else {
		destination.ExcludedPaths = nil
	}

	// IncludedPaths
	if policy.IncludedPaths != nil {
		includedPathList := make([]v20210515s.IncludedPath, len(policy.IncludedPaths))
		for includedPathIndex, includedPathItem := range policy.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath v20210515s.IncludedPath
			err := includedPathItem.AssignPropertiesToIncludedPath(&includedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIncludedPath() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		destination.IncludedPaths = includedPathList
	} else {
		destination.IncludedPaths = nil
	}

	// IndexingMode
	destination.IndexingMode = genruntime.ClonePointerToString(policy.IndexingMode)

	// SpatialIndexes
	if policy.SpatialIndexes != nil {
		spatialIndexList := make([]v20210515s.SpatialSpec, len(policy.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range policy.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal v20210515s.SpatialSpec
			err := spatialIndexItem.AssignPropertiesToSpatialSpec(&spatialIndexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSpatialSpec() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		destination.SpatialIndexes = spatialIndexList
	} else {
		destination.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.IndexingPolicy_STATUS
// Deprecated version of IndexingPolicy_STATUS. Use v1beta20210515.IndexingPolicy_STATUS instead
type IndexingPolicy_STATUS struct {
	Automatic        *bool                    `json:"automatic,omitempty"`
	CompositeIndexes [][]CompositePath_STATUS `json:"compositeIndexes,omitempty"`
	ExcludedPaths    []ExcludedPath_STATUS    `json:"excludedPaths,omitempty"`
	IncludedPaths    []IncludedPath_STATUS    `json:"includedPaths,omitempty"`
	IndexingMode     *string                  `json:"indexingMode,omitempty"`
	PropertyBag      genruntime.PropertyBag   `json:"$propertyBag,omitempty"`
	SpatialIndexes   []SpatialSpec_STATUS     `json:"spatialIndexes,omitempty"`
}

// AssignPropertiesFromIndexingPolicySTATUS populates our IndexingPolicy_STATUS from the provided source IndexingPolicy_STATUS
func (policy *IndexingPolicy_STATUS) AssignPropertiesFromIndexingPolicySTATUS(source *v20210515s.IndexingPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Automatic
	if source.Automatic != nil {
		automatic := *source.Automatic
		policy.Automatic = &automatic
	} else {
		policy.Automatic = nil
	}

	// CompositeIndexes
	if source.CompositeIndexes != nil {
		compositeIndexList := make([][]CompositePath_STATUS, len(source.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range source.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]CompositePath_STATUS, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal CompositePath_STATUS
					err := compositeIndexLocal.AssignPropertiesFromCompositePathSTATUS(&compositeIndexItem1)
					if err != nil {
						return errors.Wrap(err, "calling AssignPropertiesFromCompositePathSTATUS() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		policy.CompositeIndexes = compositeIndexList
	} else {
		policy.CompositeIndexes = nil
	}

	// ExcludedPaths
	if source.ExcludedPaths != nil {
		excludedPathList := make([]ExcludedPath_STATUS, len(source.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range source.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath ExcludedPath_STATUS
			err := excludedPath.AssignPropertiesFromExcludedPathSTATUS(&excludedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromExcludedPathSTATUS() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		policy.ExcludedPaths = excludedPathList
	} else {
		policy.ExcludedPaths = nil
	}

	// IncludedPaths
	if source.IncludedPaths != nil {
		includedPathList := make([]IncludedPath_STATUS, len(source.IncludedPaths))
		for includedPathIndex, includedPathItem := range source.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath IncludedPath_STATUS
			err := includedPath.AssignPropertiesFromIncludedPathSTATUS(&includedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIncludedPathSTATUS() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		policy.IncludedPaths = includedPathList
	} else {
		policy.IncludedPaths = nil
	}

	// IndexingMode
	policy.IndexingMode = genruntime.ClonePointerToString(source.IndexingMode)

	// SpatialIndexes
	if source.SpatialIndexes != nil {
		spatialIndexList := make([]SpatialSpec_STATUS, len(source.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range source.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal SpatialSpec_STATUS
			err := spatialIndexLocal.AssignPropertiesFromSpatialSpecSTATUS(&spatialIndexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSpatialSpecSTATUS() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		policy.SpatialIndexes = spatialIndexList
	} else {
		policy.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIndexingPolicySTATUS populates the provided destination IndexingPolicy_STATUS from our IndexingPolicy_STATUS
func (policy *IndexingPolicy_STATUS) AssignPropertiesToIndexingPolicySTATUS(destination *v20210515s.IndexingPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// Automatic
	if policy.Automatic != nil {
		automatic := *policy.Automatic
		destination.Automatic = &automatic
	} else {
		destination.Automatic = nil
	}

	// CompositeIndexes
	if policy.CompositeIndexes != nil {
		compositeIndexList := make([][]v20210515s.CompositePath_STATUS, len(policy.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range policy.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]v20210515s.CompositePath_STATUS, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal v20210515s.CompositePath_STATUS
					err := compositeIndexItem1.AssignPropertiesToCompositePathSTATUS(&compositeIndexLocal)
					if err != nil {
						return errors.Wrap(err, "calling AssignPropertiesToCompositePathSTATUS() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		destination.CompositeIndexes = compositeIndexList
	} else {
		destination.CompositeIndexes = nil
	}

	// ExcludedPaths
	if policy.ExcludedPaths != nil {
		excludedPathList := make([]v20210515s.ExcludedPath_STATUS, len(policy.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range policy.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath v20210515s.ExcludedPath_STATUS
			err := excludedPathItem.AssignPropertiesToExcludedPathSTATUS(&excludedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToExcludedPathSTATUS() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		destination.ExcludedPaths = excludedPathList
	} else {
		destination.ExcludedPaths = nil
	}

	// IncludedPaths
	if policy.IncludedPaths != nil {
		includedPathList := make([]v20210515s.IncludedPath_STATUS, len(policy.IncludedPaths))
		for includedPathIndex, includedPathItem := range policy.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath v20210515s.IncludedPath_STATUS
			err := includedPathItem.AssignPropertiesToIncludedPathSTATUS(&includedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIncludedPathSTATUS() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		destination.IncludedPaths = includedPathList
	} else {
		destination.IncludedPaths = nil
	}

	// IndexingMode
	destination.IndexingMode = genruntime.ClonePointerToString(policy.IndexingMode)

	// SpatialIndexes
	if policy.SpatialIndexes != nil {
		spatialIndexList := make([]v20210515s.SpatialSpec_STATUS, len(policy.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range policy.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal v20210515s.SpatialSpec_STATUS
			err := spatialIndexItem.AssignPropertiesToSpatialSpecSTATUS(&spatialIndexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSpatialSpecSTATUS() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		destination.SpatialIndexes = spatialIndexList
	} else {
		destination.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.UniqueKeyPolicy
// Deprecated version of UniqueKeyPolicy. Use v1beta20210515.UniqueKeyPolicy instead
type UniqueKeyPolicy struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	UniqueKeys  []UniqueKey            `json:"uniqueKeys,omitempty"`
}

// AssignPropertiesFromUniqueKeyPolicy populates our UniqueKeyPolicy from the provided source UniqueKeyPolicy
func (policy *UniqueKeyPolicy) AssignPropertiesFromUniqueKeyPolicy(source *v20210515s.UniqueKeyPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// UniqueKeys
	if source.UniqueKeys != nil {
		uniqueKeyList := make([]UniqueKey, len(source.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range source.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey UniqueKey
			err := uniqueKey.AssignPropertiesFromUniqueKey(&uniqueKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUniqueKey() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		policy.UniqueKeys = uniqueKeyList
	} else {
		policy.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUniqueKeyPolicy populates the provided destination UniqueKeyPolicy from our UniqueKeyPolicy
func (policy *UniqueKeyPolicy) AssignPropertiesToUniqueKeyPolicy(destination *v20210515s.UniqueKeyPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// UniqueKeys
	if policy.UniqueKeys != nil {
		uniqueKeyList := make([]v20210515s.UniqueKey, len(policy.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range policy.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey v20210515s.UniqueKey
			err := uniqueKeyItem.AssignPropertiesToUniqueKey(&uniqueKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUniqueKey() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		destination.UniqueKeys = uniqueKeyList
	} else {
		destination.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.UniqueKeyPolicy_STATUS
// Deprecated version of UniqueKeyPolicy_STATUS. Use v1beta20210515.UniqueKeyPolicy_STATUS instead
type UniqueKeyPolicy_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	UniqueKeys  []UniqueKey_STATUS     `json:"uniqueKeys,omitempty"`
}

// AssignPropertiesFromUniqueKeyPolicySTATUS populates our UniqueKeyPolicy_STATUS from the provided source UniqueKeyPolicy_STATUS
func (policy *UniqueKeyPolicy_STATUS) AssignPropertiesFromUniqueKeyPolicySTATUS(source *v20210515s.UniqueKeyPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// UniqueKeys
	if source.UniqueKeys != nil {
		uniqueKeyList := make([]UniqueKey_STATUS, len(source.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range source.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey UniqueKey_STATUS
			err := uniqueKey.AssignPropertiesFromUniqueKeySTATUS(&uniqueKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUniqueKeySTATUS() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		policy.UniqueKeys = uniqueKeyList
	} else {
		policy.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUniqueKeyPolicySTATUS populates the provided destination UniqueKeyPolicy_STATUS from our UniqueKeyPolicy_STATUS
func (policy *UniqueKeyPolicy_STATUS) AssignPropertiesToUniqueKeyPolicySTATUS(destination *v20210515s.UniqueKeyPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// UniqueKeys
	if policy.UniqueKeys != nil {
		uniqueKeyList := make([]v20210515s.UniqueKey_STATUS, len(policy.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range policy.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey v20210515s.UniqueKey_STATUS
			err := uniqueKeyItem.AssignPropertiesToUniqueKeySTATUS(&uniqueKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUniqueKeySTATUS() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		destination.UniqueKeys = uniqueKeyList
	} else {
		destination.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.CompositePath
// Deprecated version of CompositePath. Use v1beta20210515.CompositePath instead
type CompositePath struct {
	Order       *string                `json:"order,omitempty"`
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromCompositePath populates our CompositePath from the provided source CompositePath
func (path *CompositePath) AssignPropertiesFromCompositePath(source *v20210515s.CompositePath) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Order
	path.Order = genruntime.ClonePointerToString(source.Order)

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		path.PropertyBag = propertyBag
	} else {
		path.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCompositePath populates the provided destination CompositePath from our CompositePath
func (path *CompositePath) AssignPropertiesToCompositePath(destination *v20210515s.CompositePath) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(path.PropertyBag)

	// Order
	destination.Order = genruntime.ClonePointerToString(path.Order)

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.CompositePath_STATUS
// Deprecated version of CompositePath_STATUS. Use v1beta20210515.CompositePath_STATUS instead
type CompositePath_STATUS struct {
	Order       *string                `json:"order,omitempty"`
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromCompositePathSTATUS populates our CompositePath_STATUS from the provided source CompositePath_STATUS
func (path *CompositePath_STATUS) AssignPropertiesFromCompositePathSTATUS(source *v20210515s.CompositePath_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Order
	path.Order = genruntime.ClonePointerToString(source.Order)

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		path.PropertyBag = propertyBag
	} else {
		path.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCompositePathSTATUS populates the provided destination CompositePath_STATUS from our CompositePath_STATUS
func (path *CompositePath_STATUS) AssignPropertiesToCompositePathSTATUS(destination *v20210515s.CompositePath_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(path.PropertyBag)

	// Order
	destination.Order = genruntime.ClonePointerToString(path.Order)

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.ExcludedPath
// Deprecated version of ExcludedPath. Use v1beta20210515.ExcludedPath instead
type ExcludedPath struct {
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromExcludedPath populates our ExcludedPath from the provided source ExcludedPath
func (path *ExcludedPath) AssignPropertiesFromExcludedPath(source *v20210515s.ExcludedPath) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		path.PropertyBag = propertyBag
	} else {
		path.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExcludedPath populates the provided destination ExcludedPath from our ExcludedPath
func (path *ExcludedPath) AssignPropertiesToExcludedPath(destination *v20210515s.ExcludedPath) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(path.PropertyBag)

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.ExcludedPath_STATUS
// Deprecated version of ExcludedPath_STATUS. Use v1beta20210515.ExcludedPath_STATUS instead
type ExcludedPath_STATUS struct {
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromExcludedPathSTATUS populates our ExcludedPath_STATUS from the provided source ExcludedPath_STATUS
func (path *ExcludedPath_STATUS) AssignPropertiesFromExcludedPathSTATUS(source *v20210515s.ExcludedPath_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		path.PropertyBag = propertyBag
	} else {
		path.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExcludedPathSTATUS populates the provided destination ExcludedPath_STATUS from our ExcludedPath_STATUS
func (path *ExcludedPath_STATUS) AssignPropertiesToExcludedPathSTATUS(destination *v20210515s.ExcludedPath_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(path.PropertyBag)

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.IncludedPath
// Deprecated version of IncludedPath. Use v1beta20210515.IncludedPath instead
type IncludedPath struct {
	Indexes     []Indexes              `json:"indexes,omitempty"`
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromIncludedPath populates our IncludedPath from the provided source IncludedPath
func (path *IncludedPath) AssignPropertiesFromIncludedPath(source *v20210515s.IncludedPath) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]Indexes, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal Indexes
			err := indexLocal.AssignPropertiesFromIndexes(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIndexes() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		path.Indexes = indexList
	} else {
		path.Indexes = nil
	}

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		path.PropertyBag = propertyBag
	} else {
		path.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIncludedPath populates the provided destination IncludedPath from our IncludedPath
func (path *IncludedPath) AssignPropertiesToIncludedPath(destination *v20210515s.IncludedPath) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(path.PropertyBag)

	// Indexes
	if path.Indexes != nil {
		indexList := make([]v20210515s.Indexes, len(path.Indexes))
		for index, indexItem := range path.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v20210515s.Indexes
			err := indexItem.AssignPropertiesToIndexes(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIndexes() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.IncludedPath_STATUS
// Deprecated version of IncludedPath_STATUS. Use v1beta20210515.IncludedPath_STATUS instead
type IncludedPath_STATUS struct {
	Indexes     []Indexes_STATUS       `json:"indexes,omitempty"`
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromIncludedPathSTATUS populates our IncludedPath_STATUS from the provided source IncludedPath_STATUS
func (path *IncludedPath_STATUS) AssignPropertiesFromIncludedPathSTATUS(source *v20210515s.IncludedPath_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]Indexes_STATUS, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal Indexes_STATUS
			err := indexLocal.AssignPropertiesFromIndexesSTATUS(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIndexesSTATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		path.Indexes = indexList
	} else {
		path.Indexes = nil
	}

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		path.PropertyBag = propertyBag
	} else {
		path.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIncludedPathSTATUS populates the provided destination IncludedPath_STATUS from our IncludedPath_STATUS
func (path *IncludedPath_STATUS) AssignPropertiesToIncludedPathSTATUS(destination *v20210515s.IncludedPath_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(path.PropertyBag)

	// Indexes
	if path.Indexes != nil {
		indexList := make([]v20210515s.Indexes_STATUS, len(path.Indexes))
		for index, indexItem := range path.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v20210515s.Indexes_STATUS
			err := indexItem.AssignPropertiesToIndexesSTATUS(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIndexesSTATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.SpatialSpec
// Deprecated version of SpatialSpec. Use v1beta20210515.SpatialSpec instead
type SpatialSpec struct {
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Types       []string               `json:"types,omitempty"`
}

// AssignPropertiesFromSpatialSpec populates our SpatialSpec from the provided source SpatialSpec
func (spatial *SpatialSpec) AssignPropertiesFromSpatialSpec(source *v20210515s.SpatialSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Path
	spatial.Path = genruntime.ClonePointerToString(source.Path)

	// Types
	spatial.Types = genruntime.CloneSliceOfString(source.Types)

	// Update the property bag
	if len(propertyBag) > 0 {
		spatial.PropertyBag = propertyBag
	} else {
		spatial.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSpatialSpec populates the provided destination SpatialSpec from our SpatialSpec
func (spatial *SpatialSpec) AssignPropertiesToSpatialSpec(destination *v20210515s.SpatialSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(spatial.PropertyBag)

	// Path
	destination.Path = genruntime.ClonePointerToString(spatial.Path)

	// Types
	destination.Types = genruntime.CloneSliceOfString(spatial.Types)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.SpatialSpec_STATUS
// Deprecated version of SpatialSpec_STATUS. Use v1beta20210515.SpatialSpec_STATUS instead
type SpatialSpec_STATUS struct {
	Path        *string                `json:"path,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Types       []string               `json:"types,omitempty"`
}

// AssignPropertiesFromSpatialSpecSTATUS populates our SpatialSpec_STATUS from the provided source SpatialSpec_STATUS
func (spatial *SpatialSpec_STATUS) AssignPropertiesFromSpatialSpecSTATUS(source *v20210515s.SpatialSpec_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Path
	spatial.Path = genruntime.ClonePointerToString(source.Path)

	// Types
	spatial.Types = genruntime.CloneSliceOfString(source.Types)

	// Update the property bag
	if len(propertyBag) > 0 {
		spatial.PropertyBag = propertyBag
	} else {
		spatial.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSpatialSpecSTATUS populates the provided destination SpatialSpec_STATUS from our SpatialSpec_STATUS
func (spatial *SpatialSpec_STATUS) AssignPropertiesToSpatialSpecSTATUS(destination *v20210515s.SpatialSpec_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(spatial.PropertyBag)

	// Path
	destination.Path = genruntime.ClonePointerToString(spatial.Path)

	// Types
	destination.Types = genruntime.CloneSliceOfString(spatial.Types)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.UniqueKey
// Deprecated version of UniqueKey. Use v1beta20210515.UniqueKey instead
type UniqueKey struct {
	Paths       []string               `json:"paths,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromUniqueKey populates our UniqueKey from the provided source UniqueKey
func (uniqueKey *UniqueKey) AssignPropertiesFromUniqueKey(source *v20210515s.UniqueKey) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Paths
	uniqueKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		uniqueKey.PropertyBag = propertyBag
	} else {
		uniqueKey.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUniqueKey populates the provided destination UniqueKey from our UniqueKey
func (uniqueKey *UniqueKey) AssignPropertiesToUniqueKey(destination *v20210515s.UniqueKey) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(uniqueKey.PropertyBag)

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(uniqueKey.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.UniqueKey_STATUS
// Deprecated version of UniqueKey_STATUS. Use v1beta20210515.UniqueKey_STATUS instead
type UniqueKey_STATUS struct {
	Paths       []string               `json:"paths,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromUniqueKeySTATUS populates our UniqueKey_STATUS from the provided source UniqueKey_STATUS
func (uniqueKey *UniqueKey_STATUS) AssignPropertiesFromUniqueKeySTATUS(source *v20210515s.UniqueKey_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Paths
	uniqueKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		uniqueKey.PropertyBag = propertyBag
	} else {
		uniqueKey.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUniqueKeySTATUS populates the provided destination UniqueKey_STATUS from our UniqueKey_STATUS
func (uniqueKey *UniqueKey_STATUS) AssignPropertiesToUniqueKeySTATUS(destination *v20210515s.UniqueKey_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(uniqueKey.PropertyBag)

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(uniqueKey.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.Indexes
// Deprecated version of Indexes. Use v1beta20210515.Indexes instead
type Indexes struct {
	DataType    *string                `json:"dataType,omitempty"`
	Kind        *string                `json:"kind,omitempty"`
	Precision   *int                   `json:"precision,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromIndexes populates our Indexes from the provided source Indexes
func (indexes *Indexes) AssignPropertiesFromIndexes(source *v20210515s.Indexes) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DataType
	indexes.DataType = genruntime.ClonePointerToString(source.DataType)

	// Kind
	indexes.Kind = genruntime.ClonePointerToString(source.Kind)

	// Precision
	indexes.Precision = genruntime.ClonePointerToInt(source.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		indexes.PropertyBag = propertyBag
	} else {
		indexes.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIndexes populates the provided destination Indexes from our Indexes
func (indexes *Indexes) AssignPropertiesToIndexes(destination *v20210515s.Indexes) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(indexes.PropertyBag)

	// DataType
	destination.DataType = genruntime.ClonePointerToString(indexes.DataType)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(indexes.Kind)

	// Precision
	destination.Precision = genruntime.ClonePointerToInt(indexes.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210515.Indexes_STATUS
// Deprecated version of Indexes_STATUS. Use v1beta20210515.Indexes_STATUS instead
type Indexes_STATUS struct {
	DataType    *string                `json:"dataType,omitempty"`
	Kind        *string                `json:"kind,omitempty"`
	Precision   *int                   `json:"precision,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromIndexesSTATUS populates our Indexes_STATUS from the provided source Indexes_STATUS
func (indexes *Indexes_STATUS) AssignPropertiesFromIndexesSTATUS(source *v20210515s.Indexes_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DataType
	indexes.DataType = genruntime.ClonePointerToString(source.DataType)

	// Kind
	indexes.Kind = genruntime.ClonePointerToString(source.Kind)

	// Precision
	indexes.Precision = genruntime.ClonePointerToInt(source.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		indexes.PropertyBag = propertyBag
	} else {
		indexes.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIndexesSTATUS populates the provided destination Indexes_STATUS from our Indexes_STATUS
func (indexes *Indexes_STATUS) AssignPropertiesToIndexesSTATUS(destination *v20210515s.Indexes_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(indexes.PropertyBag)

	// DataType
	destination.DataType = genruntime.ClonePointerToString(indexes.DataType)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(indexes.Kind)

	// Precision
	destination.Precision = genruntime.ClonePointerToInt(indexes.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&SqlDatabaseContainer{}, &SqlDatabaseContainerList{})
}
