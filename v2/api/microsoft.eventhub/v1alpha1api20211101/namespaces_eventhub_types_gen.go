// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.eventhub/v1alpha1api20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.eventhub.azure.com,resources=namespaceseventhubs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.eventhub.azure.com,resources={namespaceseventhubs/status,namespaceseventhubs/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-11-01/Microsoft.EventHub.json#/resourceDefinitions/namespaces_eventhubs
type NamespacesEventhub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespacesEventhubs_Spec `json:"spec,omitempty"`
	Status            Eventhub_Status          `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NamespacesEventhub{}

// GetConditions returns the conditions of the resource
func (namespacesEventhub *NamespacesEventhub) GetConditions() conditions.Conditions {
	return namespacesEventhub.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespacesEventhub *NamespacesEventhub) SetConditions(conditions conditions.Conditions) {
	namespacesEventhub.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-eventhub-azure-com-v1alpha1api20211101-namespaceseventhub,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.eventhub.azure.com,resources=namespaceseventhubs,verbs=create;update,versions=v1alpha1api20211101,name=default.v1alpha1api20211101.namespaceseventhubs.microsoft.eventhub.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &NamespacesEventhub{}

// Default applies defaults to the NamespacesEventhub resource
func (namespacesEventhub *NamespacesEventhub) Default() {
	namespacesEventhub.defaultImpl()
	var temp interface{} = namespacesEventhub
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (namespacesEventhub *NamespacesEventhub) defaultAzureName() {
	if namespacesEventhub.Spec.AzureName == "" {
		namespacesEventhub.Spec.AzureName = namespacesEventhub.Name
	}
}

// defaultImpl applies the code generated defaults to the NamespacesEventhub resource
func (namespacesEventhub *NamespacesEventhub) defaultImpl() { namespacesEventhub.defaultAzureName() }

var _ genruntime.KubernetesResource = &NamespacesEventhub{}

// AzureName returns the Azure name of the resource
func (namespacesEventhub *NamespacesEventhub) AzureName() string {
	return namespacesEventhub.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (namespacesEventhub NamespacesEventhub) GetAPIVersion() string {
	return "2021-11-01"
}

// GetResourceKind returns the kind of the resource
func (namespacesEventhub *NamespacesEventhub) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (namespacesEventhub *NamespacesEventhub) GetSpec() genruntime.ConvertibleSpec {
	return &namespacesEventhub.Spec
}

// GetStatus returns the status of this resource
func (namespacesEventhub *NamespacesEventhub) GetStatus() genruntime.ConvertibleStatus {
	return &namespacesEventhub.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventHub/namespaces/eventhubs"
func (namespacesEventhub *NamespacesEventhub) GetType() string {
	return "Microsoft.EventHub/namespaces/eventhubs"
}

// NewEmptyStatus returns a new empty (blank) status
func (namespacesEventhub *NamespacesEventhub) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Eventhub_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespacesEventhub *NamespacesEventhub) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespacesEventhub.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: namespacesEventhub.Namespace,
		Name:      namespacesEventhub.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespacesEventhub *NamespacesEventhub) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Eventhub_Status); ok {
		namespacesEventhub.Status = *st
		return nil
	}

	// Convert status to required version
	var st Eventhub_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespacesEventhub.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-eventhub-azure-com-v1alpha1api20211101-namespaceseventhub,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.eventhub.azure.com,resources=namespaceseventhubs,verbs=create;update,versions=v1alpha1api20211101,name=validate.v1alpha1api20211101.namespaceseventhubs.microsoft.eventhub.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &NamespacesEventhub{}

// ValidateCreate validates the creation of the resource
func (namespacesEventhub *NamespacesEventhub) ValidateCreate() error {
	validations := namespacesEventhub.createValidations()
	var temp interface{} = namespacesEventhub
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (namespacesEventhub *NamespacesEventhub) ValidateDelete() error {
	validations := namespacesEventhub.deleteValidations()
	var temp interface{} = namespacesEventhub
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (namespacesEventhub *NamespacesEventhub) ValidateUpdate(old runtime.Object) error {
	validations := namespacesEventhub.updateValidations()
	var temp interface{} = namespacesEventhub
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (namespacesEventhub *NamespacesEventhub) createValidations() []func() error {
	return []func() error{namespacesEventhub.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (namespacesEventhub *NamespacesEventhub) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (namespacesEventhub *NamespacesEventhub) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return namespacesEventhub.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (namespacesEventhub *NamespacesEventhub) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&namespacesEventhub.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNamespacesEventhub populates our NamespacesEventhub from the provided source NamespacesEventhub
func (namespacesEventhub *NamespacesEventhub) AssignPropertiesFromNamespacesEventhub(source *v1alpha1api20211101storage.NamespacesEventhub) error {

	// Spec
	var spec NamespacesEventhubs_Spec
	err := spec.AssignPropertiesFromNamespacesEventhubsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromNamespacesEventhubsSpec()")
	}
	namespacesEventhub.Spec = spec

	// Status
	var status Eventhub_Status
	err = status.AssignPropertiesFromEventhubStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromEventhubStatus()")
	}
	namespacesEventhub.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhub populates the provided destination NamespacesEventhub from our NamespacesEventhub
func (namespacesEventhub *NamespacesEventhub) AssignPropertiesToNamespacesEventhub(destination *v1alpha1api20211101storage.NamespacesEventhub) error {

	// Spec
	var spec v1alpha1api20211101storage.NamespacesEventhubs_Spec
	err := namespacesEventhub.Spec.AssignPropertiesToNamespacesEventhubsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToNamespacesEventhubsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20211101storage.Eventhub_Status
	err = namespacesEventhub.Status.AssignPropertiesToEventhubStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToEventhubStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespacesEventhub *NamespacesEventhub) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespacesEventhub.Spec.OriginalVersion(),
		Kind:    "NamespacesEventhub",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-11-01/Microsoft.EventHub.json#/resourceDefinitions/namespaces_eventhubs
type NamespacesEventhubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesEventhub `json:"items"`
}

type Eventhub_Status struct {
	//CaptureDescription: Properties of capture description
	CaptureDescription *CaptureDescription_Status `json:"captureDescription,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreatedAt: Exact time the Event Hub was created.
	CreatedAt *string `json:"createdAt,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MessageRetentionInDays: Number of days to retain the events for this Event Hub,
	//value should be 1 to 7 days
	MessageRetentionInDays *int `json:"messageRetentionInDays,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//PartitionCount: Number of partitions created for the Event Hub, allowed values
	//are from 1 to 32 partitions.
	PartitionCount *int `json:"partitionCount,omitempty"`

	//PartitionIds: Current number of shards on the Event Hub.
	PartitionIds []string `json:"partitionIds,omitempty"`

	//Status: Enumerates the possible values for the status of the Event Hub.
	Status *EventhubStatusPropertiesStatus `json:"status,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or
	//"Microsoft.EventHub/Namespaces/EventHubs"
	Type *string `json:"type,omitempty"`

	//UpdatedAt: The exact time the message was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Eventhub_Status{}

// ConvertStatusFrom populates our Eventhub_Status from the provided source
func (eventhubStatus *Eventhub_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20211101storage.Eventhub_Status)
	if ok {
		// Populate our instance from source
		return eventhubStatus.AssignPropertiesFromEventhubStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211101storage.Eventhub_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = eventhubStatus.AssignPropertiesFromEventhubStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Eventhub_Status
func (eventhubStatus *Eventhub_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20211101storage.Eventhub_Status)
	if ok {
		// Populate destination from our instance
		return eventhubStatus.AssignPropertiesToEventhubStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211101storage.Eventhub_Status{}
	err := eventhubStatus.AssignPropertiesToEventhubStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Eventhub_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventhubStatus *Eventhub_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Eventhub_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventhubStatus *Eventhub_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Eventhub_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Eventhub_StatusARM, got %T", armInput)
	}

	// Set property ‘CaptureDescription’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CaptureDescription != nil {
			var captureDescription1 CaptureDescription_Status
			err := captureDescription1.PopulateFromARM(owner, *typedInput.Properties.CaptureDescription)
			if err != nil {
				return err
			}
			captureDescription := captureDescription1
			eventhubStatus.CaptureDescription = &captureDescription
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			eventhubStatus.CreatedAt = &createdAt
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		eventhubStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		eventhubStatus.Location = &location
	}

	// Set property ‘MessageRetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MessageRetentionInDays != nil {
			messageRetentionInDays := *typedInput.Properties.MessageRetentionInDays
			eventhubStatus.MessageRetentionInDays = &messageRetentionInDays
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		eventhubStatus.Name = &name
	}

	// Set property ‘PartitionCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PartitionCount != nil {
			partitionCount := *typedInput.Properties.PartitionCount
			eventhubStatus.PartitionCount = &partitionCount
		}
	}

	// Set property ‘PartitionIds’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PartitionIds {
			eventhubStatus.PartitionIds = append(eventhubStatus.PartitionIds, item)
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			eventhubStatus.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		eventhubStatus.SystemData = &systemData
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		eventhubStatus.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			eventhubStatus.UpdatedAt = &updatedAt
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromEventhubStatus populates our Eventhub_Status from the provided source Eventhub_Status
func (eventhubStatus *Eventhub_Status) AssignPropertiesFromEventhubStatus(source *v1alpha1api20211101storage.Eventhub_Status) error {

	// CaptureDescription
	if source.CaptureDescription != nil {
		var captureDescription CaptureDescription_Status
		err := captureDescription.AssignPropertiesFromCaptureDescriptionStatus(source.CaptureDescription)
		if err != nil {
			return errors.Wrap(err, "populating CaptureDescription from CaptureDescription, calling AssignPropertiesFromCaptureDescriptionStatus()")
		}
		eventhubStatus.CaptureDescription = &captureDescription
	} else {
		eventhubStatus.CaptureDescription = nil
	}

	// Conditions
	eventhubStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedAt
	eventhubStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// Id
	eventhubStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	eventhubStatus.Location = genruntime.ClonePointerToString(source.Location)

	// MessageRetentionInDays
	eventhubStatus.MessageRetentionInDays = genruntime.ClonePointerToInt(source.MessageRetentionInDays)

	// Name
	eventhubStatus.Name = genruntime.ClonePointerToString(source.Name)

	// PartitionCount
	eventhubStatus.PartitionCount = genruntime.ClonePointerToInt(source.PartitionCount)

	// PartitionIds
	eventhubStatus.PartitionIds = genruntime.CloneSliceOfString(source.PartitionIds)

	// Status
	if source.Status != nil {
		status := EventhubStatusPropertiesStatus(*source.Status)
		eventhubStatus.Status = &status
	} else {
		eventhubStatus.Status = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		eventhubStatus.SystemData = &systemDatum
	} else {
		eventhubStatus.SystemData = nil
	}

	// Type
	eventhubStatus.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	eventhubStatus.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// No error
	return nil
}

// AssignPropertiesToEventhubStatus populates the provided destination Eventhub_Status from our Eventhub_Status
func (eventhubStatus *Eventhub_Status) AssignPropertiesToEventhubStatus(destination *v1alpha1api20211101storage.Eventhub_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CaptureDescription
	if eventhubStatus.CaptureDescription != nil {
		var captureDescription v1alpha1api20211101storage.CaptureDescription_Status
		err := (*eventhubStatus.CaptureDescription).AssignPropertiesToCaptureDescriptionStatus(&captureDescription)
		if err != nil {
			return errors.Wrap(err, "populating CaptureDescription from CaptureDescription, calling AssignPropertiesToCaptureDescriptionStatus()")
		}
		destination.CaptureDescription = &captureDescription
	} else {
		destination.CaptureDescription = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(eventhubStatus.Conditions)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(eventhubStatus.CreatedAt)

	// Id
	destination.Id = genruntime.ClonePointerToString(eventhubStatus.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(eventhubStatus.Location)

	// MessageRetentionInDays
	destination.MessageRetentionInDays = genruntime.ClonePointerToInt(eventhubStatus.MessageRetentionInDays)

	// Name
	destination.Name = genruntime.ClonePointerToString(eventhubStatus.Name)

	// PartitionCount
	destination.PartitionCount = genruntime.ClonePointerToInt(eventhubStatus.PartitionCount)

	// PartitionIds
	destination.PartitionIds = genruntime.CloneSliceOfString(eventhubStatus.PartitionIds)

	// Status
	if eventhubStatus.Status != nil {
		status := string(*eventhubStatus.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SystemData
	if eventhubStatus.SystemData != nil {
		var systemDatum v1alpha1api20211101storage.SystemData_Status
		err := (*eventhubStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(eventhubStatus.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(eventhubStatus.UpdatedAt)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2021-11-01"}
type NamespacesEventhubsSpecAPIVersion string

const NamespacesEventhubsSpecAPIVersion20211101 = NamespacesEventhubsSpecAPIVersion("2021-11-01")

type NamespacesEventhubs_Spec struct {
	// +kubebuilder:validation:MaxLength=256
	// +kubebuilder:validation:MinLength=1
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//CaptureDescription: Properties to configure capture description for eventhub
	CaptureDescription *NamespacesEventhubs_Spec_Properties_CaptureDescription `json:"captureDescription,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Minimum=1
	//MessageRetentionInDays: Number of days to retain the events for this Event Hub,
	//value should be 1 to 7 days
	MessageRetentionInDays *int `json:"messageRetentionInDays,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.eventhub.azure.com" json:"owner" kind:"Namespace"`

	// +kubebuilder:validation:Minimum=1
	//PartitionCount: Number of partitions created for the Event Hub, allowed values
	//are from 1 to 32 partitions.
	PartitionCount *int `json:"partitionCount,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &NamespacesEventhubs_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespacesEventhubsSpec == nil {
		return nil, nil
	}
	var result NamespacesEventhubs_SpecARM

	// Set property ‘Location’:
	if namespacesEventhubsSpec.Location != nil {
		location := *namespacesEventhubsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if namespacesEventhubsSpec.CaptureDescription != nil {
		captureDescriptionARM, err := (*namespacesEventhubsSpec.CaptureDescription).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		captureDescription := captureDescriptionARM.(NamespacesEventhubs_Spec_Properties_CaptureDescriptionARM)
		result.Properties.CaptureDescription = &captureDescription
	}
	if namespacesEventhubsSpec.MessageRetentionInDays != nil {
		messageRetentionInDays := *namespacesEventhubsSpec.MessageRetentionInDays
		result.Properties.MessageRetentionInDays = &messageRetentionInDays
	}
	if namespacesEventhubsSpec.PartitionCount != nil {
		partitionCount := *namespacesEventhubsSpec.PartitionCount
		result.Properties.PartitionCount = &partitionCount
	}

	// Set property ‘Tags’:
	if namespacesEventhubsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range namespacesEventhubsSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesEventhubs_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesEventhubs_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesEventhubs_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	namespacesEventhubsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CaptureDescription’:
	// copying flattened property:
	if typedInput.Properties.CaptureDescription != nil {
		var captureDescription1 NamespacesEventhubs_Spec_Properties_CaptureDescription
		err := captureDescription1.PopulateFromARM(owner, *typedInput.Properties.CaptureDescription)
		if err != nil {
			return err
		}
		captureDescription := captureDescription1
		namespacesEventhubsSpec.CaptureDescription = &captureDescription
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespacesEventhubsSpec.Location = &location
	}

	// Set property ‘MessageRetentionInDays’:
	// copying flattened property:
	if typedInput.Properties.MessageRetentionInDays != nil {
		messageRetentionInDays := *typedInput.Properties.MessageRetentionInDays
		namespacesEventhubsSpec.MessageRetentionInDays = &messageRetentionInDays
	}

	// Set property ‘Owner’:
	namespacesEventhubsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PartitionCount’:
	// copying flattened property:
	if typedInput.Properties.PartitionCount != nil {
		partitionCount := *typedInput.Properties.PartitionCount
		namespacesEventhubsSpec.PartitionCount = &partitionCount
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespacesEventhubsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			namespacesEventhubsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NamespacesEventhubs_Spec{}

// ConvertSpecFrom populates our NamespacesEventhubs_Spec from the provided source
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20211101storage.NamespacesEventhubs_Spec)
	if ok {
		// Populate our instance from source
		return namespacesEventhubsSpec.AssignPropertiesFromNamespacesEventhubsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211101storage.NamespacesEventhubs_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = namespacesEventhubsSpec.AssignPropertiesFromNamespacesEventhubsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NamespacesEventhubs_Spec
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20211101storage.NamespacesEventhubs_Spec)
	if ok {
		// Populate destination from our instance
		return namespacesEventhubsSpec.AssignPropertiesToNamespacesEventhubsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211101storage.NamespacesEventhubs_Spec{}
	err := namespacesEventhubsSpec.AssignPropertiesToNamespacesEventhubsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesEventhubsSpec populates our NamespacesEventhubs_Spec from the provided source NamespacesEventhubs_Spec
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) AssignPropertiesFromNamespacesEventhubsSpec(source *v1alpha1api20211101storage.NamespacesEventhubs_Spec) error {

	// AzureName
	namespacesEventhubsSpec.AzureName = source.AzureName

	// CaptureDescription
	if source.CaptureDescription != nil {
		var captureDescription NamespacesEventhubs_Spec_Properties_CaptureDescription
		err := captureDescription.AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescription(source.CaptureDescription)
		if err != nil {
			return errors.Wrap(err, "populating CaptureDescription from CaptureDescription, calling AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescription()")
		}
		namespacesEventhubsSpec.CaptureDescription = &captureDescription
	} else {
		namespacesEventhubsSpec.CaptureDescription = nil
	}

	// Location
	namespacesEventhubsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// MessageRetentionInDays
	if source.MessageRetentionInDays != nil {
		messageRetentionInDay := *source.MessageRetentionInDays
		namespacesEventhubsSpec.MessageRetentionInDays = &messageRetentionInDay
	} else {
		namespacesEventhubsSpec.MessageRetentionInDays = nil
	}

	// Owner
	namespacesEventhubsSpec.Owner = source.Owner.Copy()

	// PartitionCount
	if source.PartitionCount != nil {
		partitionCount := *source.PartitionCount
		namespacesEventhubsSpec.PartitionCount = &partitionCount
	} else {
		namespacesEventhubsSpec.PartitionCount = nil
	}

	// Tags
	namespacesEventhubsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhubsSpec populates the provided destination NamespacesEventhubs_Spec from our NamespacesEventhubs_Spec
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) AssignPropertiesToNamespacesEventhubsSpec(destination *v1alpha1api20211101storage.NamespacesEventhubs_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = namespacesEventhubsSpec.AzureName

	// CaptureDescription
	if namespacesEventhubsSpec.CaptureDescription != nil {
		var captureDescription v1alpha1api20211101storage.NamespacesEventhubs_Spec_Properties_CaptureDescription
		err := (*namespacesEventhubsSpec.CaptureDescription).AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescription(&captureDescription)
		if err != nil {
			return errors.Wrap(err, "populating CaptureDescription from CaptureDescription, calling AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescription()")
		}
		destination.CaptureDescription = &captureDescription
	} else {
		destination.CaptureDescription = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespacesEventhubsSpec.Location)

	// MessageRetentionInDays
	if namespacesEventhubsSpec.MessageRetentionInDays != nil {
		messageRetentionInDay := *namespacesEventhubsSpec.MessageRetentionInDays
		destination.MessageRetentionInDays = &messageRetentionInDay
	} else {
		destination.MessageRetentionInDays = nil
	}

	// OriginalVersion
	destination.OriginalVersion = namespacesEventhubsSpec.OriginalVersion()

	// Owner
	destination.Owner = namespacesEventhubsSpec.Owner.Copy()

	// PartitionCount
	if namespacesEventhubsSpec.PartitionCount != nil {
		partitionCount := *namespacesEventhubsSpec.PartitionCount
		destination.PartitionCount = &partitionCount
	} else {
		destination.PartitionCount = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespacesEventhubsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (namespacesEventhubsSpec *NamespacesEventhubs_Spec) SetAzureName(azureName string) {
	namespacesEventhubsSpec.AzureName = azureName
}

type CaptureDescription_Status struct {
	//Destination: Properties of Destination where capture will be stored. (Storage
	//Account, Blob Names)
	Destination *Destination_Status `json:"destination,omitempty"`

	//Enabled: A value that indicates whether capture description is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	//Encoding: Enumerates the possible values for the encoding format of capture
	//description. Note: 'AvroDeflate' will be deprecated in New API Version
	Encoding *CaptureDescriptionStatusEncoding `json:"encoding,omitempty"`

	//IntervalInSeconds: The time window allows you to set the frequency with which
	//the capture to Azure Blobs will happen, value should between 60 to 900 seconds
	IntervalInSeconds *int `json:"intervalInSeconds,omitempty"`

	//SizeLimitInBytes: The size window defines the amount of data built up in your
	//Event Hub before an capture operation, value should be between 10485760 to
	//524288000 bytes
	SizeLimitInBytes *int `json:"sizeLimitInBytes,omitempty"`

	//SkipEmptyArchives: A value that indicates whether to Skip Empty Archives
	SkipEmptyArchives *bool `json:"skipEmptyArchives,omitempty"`
}

var _ genruntime.FromARMConverter = &CaptureDescription_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (captureDescriptionStatus *CaptureDescription_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CaptureDescription_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (captureDescriptionStatus *CaptureDescription_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CaptureDescription_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CaptureDescription_StatusARM, got %T", armInput)
	}

	// Set property ‘Destination’:
	if typedInput.Destination != nil {
		var destination1 Destination_Status
		err := destination1.PopulateFromARM(owner, *typedInput.Destination)
		if err != nil {
			return err
		}
		destination := destination1
		captureDescriptionStatus.Destination = &destination
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		captureDescriptionStatus.Enabled = &enabled
	}

	// Set property ‘Encoding’:
	if typedInput.Encoding != nil {
		encoding := *typedInput.Encoding
		captureDescriptionStatus.Encoding = &encoding
	}

	// Set property ‘IntervalInSeconds’:
	if typedInput.IntervalInSeconds != nil {
		intervalInSeconds := *typedInput.IntervalInSeconds
		captureDescriptionStatus.IntervalInSeconds = &intervalInSeconds
	}

	// Set property ‘SizeLimitInBytes’:
	if typedInput.SizeLimitInBytes != nil {
		sizeLimitInBytes := *typedInput.SizeLimitInBytes
		captureDescriptionStatus.SizeLimitInBytes = &sizeLimitInBytes
	}

	// Set property ‘SkipEmptyArchives’:
	if typedInput.SkipEmptyArchives != nil {
		skipEmptyArchives := *typedInput.SkipEmptyArchives
		captureDescriptionStatus.SkipEmptyArchives = &skipEmptyArchives
	}

	// No error
	return nil
}

// AssignPropertiesFromCaptureDescriptionStatus populates our CaptureDescription_Status from the provided source CaptureDescription_Status
func (captureDescriptionStatus *CaptureDescription_Status) AssignPropertiesFromCaptureDescriptionStatus(source *v1alpha1api20211101storage.CaptureDescription_Status) error {

	// Destination
	if source.Destination != nil {
		var destination Destination_Status
		err := destination.AssignPropertiesFromDestinationStatus(source.Destination)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesFromDestinationStatus()")
		}
		captureDescriptionStatus.Destination = &destination
	} else {
		captureDescriptionStatus.Destination = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		captureDescriptionStatus.Enabled = &enabled
	} else {
		captureDescriptionStatus.Enabled = nil
	}

	// Encoding
	if source.Encoding != nil {
		encoding := CaptureDescriptionStatusEncoding(*source.Encoding)
		captureDescriptionStatus.Encoding = &encoding
	} else {
		captureDescriptionStatus.Encoding = nil
	}

	// IntervalInSeconds
	captureDescriptionStatus.IntervalInSeconds = genruntime.ClonePointerToInt(source.IntervalInSeconds)

	// SizeLimitInBytes
	captureDescriptionStatus.SizeLimitInBytes = genruntime.ClonePointerToInt(source.SizeLimitInBytes)

	// SkipEmptyArchives
	if source.SkipEmptyArchives != nil {
		skipEmptyArchive := *source.SkipEmptyArchives
		captureDescriptionStatus.SkipEmptyArchives = &skipEmptyArchive
	} else {
		captureDescriptionStatus.SkipEmptyArchives = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCaptureDescriptionStatus populates the provided destination CaptureDescription_Status from our CaptureDescription_Status
func (captureDescriptionStatus *CaptureDescription_Status) AssignPropertiesToCaptureDescriptionStatus(destination *v1alpha1api20211101storage.CaptureDescription_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Destination
	if captureDescriptionStatus.Destination != nil {
		var destinationLocal v1alpha1api20211101storage.Destination_Status
		err := (*captureDescriptionStatus.Destination).AssignPropertiesToDestinationStatus(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesToDestinationStatus()")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// Enabled
	if captureDescriptionStatus.Enabled != nil {
		enabled := *captureDescriptionStatus.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Encoding
	if captureDescriptionStatus.Encoding != nil {
		encoding := string(*captureDescriptionStatus.Encoding)
		destination.Encoding = &encoding
	} else {
		destination.Encoding = nil
	}

	// IntervalInSeconds
	destination.IntervalInSeconds = genruntime.ClonePointerToInt(captureDescriptionStatus.IntervalInSeconds)

	// SizeLimitInBytes
	destination.SizeLimitInBytes = genruntime.ClonePointerToInt(captureDescriptionStatus.SizeLimitInBytes)

	// SkipEmptyArchives
	if captureDescriptionStatus.SkipEmptyArchives != nil {
		skipEmptyArchive := *captureDescriptionStatus.SkipEmptyArchives
		destination.SkipEmptyArchives = &skipEmptyArchive
	} else {
		destination.SkipEmptyArchives = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NamespacesEventhubs_Spec_Properties_CaptureDescription struct {
	//Destination: Capture storage details for capture description
	Destination *NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination `json:"destination,omitempty"`

	//Enabled: A value that indicates whether capture description is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	//Encoding: Enumerates the possible values for the encoding format of capture
	//description. Note: 'AvroDeflate' will be deprecated in New API Version.
	Encoding *NamespacesEventhubsSpecPropertiesCaptureDescriptionEncoding `json:"encoding,omitempty"`

	//IntervalInSeconds: The time window allows you to set the frequency with which
	//the capture to Azure Blobs will happen, value should between 60 to 900 seconds
	IntervalInSeconds *int `json:"intervalInSeconds,omitempty"`

	//SizeLimitInBytes: The size window defines the amount of data built up in your
	//Event Hub before an capture operation, value should be between 10485760 to
	//524288000 bytes
	SizeLimitInBytes *int `json:"sizeLimitInBytes,omitempty"`

	//SkipEmptyArchives: A value that indicates whether to Skip Empty Archives
	SkipEmptyArchives *bool `json:"skipEmptyArchives,omitempty"`
}

var _ genruntime.ARMTransformer = &NamespacesEventhubs_Spec_Properties_CaptureDescription{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespacesEventhubsSpecPropertiesCaptureDescription *NamespacesEventhubs_Spec_Properties_CaptureDescription) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespacesEventhubsSpecPropertiesCaptureDescription == nil {
		return nil, nil
	}
	var result NamespacesEventhubs_Spec_Properties_CaptureDescriptionARM

	// Set property ‘Destination’:
	if namespacesEventhubsSpecPropertiesCaptureDescription.Destination != nil {
		destinationARM, err := (*namespacesEventhubsSpecPropertiesCaptureDescription.Destination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		destination := destinationARM.(NamespacesEventhubs_Spec_Properties_CaptureDescription_DestinationARM)
		result.Destination = &destination
	}

	// Set property ‘Enabled’:
	if namespacesEventhubsSpecPropertiesCaptureDescription.Enabled != nil {
		enabled := *namespacesEventhubsSpecPropertiesCaptureDescription.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘Encoding’:
	if namespacesEventhubsSpecPropertiesCaptureDescription.Encoding != nil {
		encoding := *namespacesEventhubsSpecPropertiesCaptureDescription.Encoding
		result.Encoding = &encoding
	}

	// Set property ‘IntervalInSeconds’:
	if namespacesEventhubsSpecPropertiesCaptureDescription.IntervalInSeconds != nil {
		intervalInSeconds := *namespacesEventhubsSpecPropertiesCaptureDescription.IntervalInSeconds
		result.IntervalInSeconds = &intervalInSeconds
	}

	// Set property ‘SizeLimitInBytes’:
	if namespacesEventhubsSpecPropertiesCaptureDescription.SizeLimitInBytes != nil {
		sizeLimitInBytes := *namespacesEventhubsSpecPropertiesCaptureDescription.SizeLimitInBytes
		result.SizeLimitInBytes = &sizeLimitInBytes
	}

	// Set property ‘SkipEmptyArchives’:
	if namespacesEventhubsSpecPropertiesCaptureDescription.SkipEmptyArchives != nil {
		skipEmptyArchives := *namespacesEventhubsSpecPropertiesCaptureDescription.SkipEmptyArchives
		result.SkipEmptyArchives = &skipEmptyArchives
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespacesEventhubsSpecPropertiesCaptureDescription *NamespacesEventhubs_Spec_Properties_CaptureDescription) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesEventhubs_Spec_Properties_CaptureDescriptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespacesEventhubsSpecPropertiesCaptureDescription *NamespacesEventhubs_Spec_Properties_CaptureDescription) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesEventhubs_Spec_Properties_CaptureDescriptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesEventhubs_Spec_Properties_CaptureDescriptionARM, got %T", armInput)
	}

	// Set property ‘Destination’:
	if typedInput.Destination != nil {
		var destination1 NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination
		err := destination1.PopulateFromARM(owner, *typedInput.Destination)
		if err != nil {
			return err
		}
		destination := destination1
		namespacesEventhubsSpecPropertiesCaptureDescription.Destination = &destination
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		namespacesEventhubsSpecPropertiesCaptureDescription.Enabled = &enabled
	}

	// Set property ‘Encoding’:
	if typedInput.Encoding != nil {
		encoding := *typedInput.Encoding
		namespacesEventhubsSpecPropertiesCaptureDescription.Encoding = &encoding
	}

	// Set property ‘IntervalInSeconds’:
	if typedInput.IntervalInSeconds != nil {
		intervalInSeconds := *typedInput.IntervalInSeconds
		namespacesEventhubsSpecPropertiesCaptureDescription.IntervalInSeconds = &intervalInSeconds
	}

	// Set property ‘SizeLimitInBytes’:
	if typedInput.SizeLimitInBytes != nil {
		sizeLimitInBytes := *typedInput.SizeLimitInBytes
		namespacesEventhubsSpecPropertiesCaptureDescription.SizeLimitInBytes = &sizeLimitInBytes
	}

	// Set property ‘SkipEmptyArchives’:
	if typedInput.SkipEmptyArchives != nil {
		skipEmptyArchives := *typedInput.SkipEmptyArchives
		namespacesEventhubsSpecPropertiesCaptureDescription.SkipEmptyArchives = &skipEmptyArchives
	}

	// No error
	return nil
}

// AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescription populates our NamespacesEventhubs_Spec_Properties_CaptureDescription from the provided source NamespacesEventhubs_Spec_Properties_CaptureDescription
func (namespacesEventhubsSpecPropertiesCaptureDescription *NamespacesEventhubs_Spec_Properties_CaptureDescription) AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescription(source *v1alpha1api20211101storage.NamespacesEventhubs_Spec_Properties_CaptureDescription) error {

	// Destination
	if source.Destination != nil {
		var destination NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination
		err := destination.AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination(source.Destination)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination()")
		}
		namespacesEventhubsSpecPropertiesCaptureDescription.Destination = &destination
	} else {
		namespacesEventhubsSpecPropertiesCaptureDescription.Destination = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		namespacesEventhubsSpecPropertiesCaptureDescription.Enabled = &enabled
	} else {
		namespacesEventhubsSpecPropertiesCaptureDescription.Enabled = nil
	}

	// Encoding
	if source.Encoding != nil {
		encoding := NamespacesEventhubsSpecPropertiesCaptureDescriptionEncoding(*source.Encoding)
		namespacesEventhubsSpecPropertiesCaptureDescription.Encoding = &encoding
	} else {
		namespacesEventhubsSpecPropertiesCaptureDescription.Encoding = nil
	}

	// IntervalInSeconds
	namespacesEventhubsSpecPropertiesCaptureDescription.IntervalInSeconds = genruntime.ClonePointerToInt(source.IntervalInSeconds)

	// SizeLimitInBytes
	namespacesEventhubsSpecPropertiesCaptureDescription.SizeLimitInBytes = genruntime.ClonePointerToInt(source.SizeLimitInBytes)

	// SkipEmptyArchives
	if source.SkipEmptyArchives != nil {
		skipEmptyArchive := *source.SkipEmptyArchives
		namespacesEventhubsSpecPropertiesCaptureDescription.SkipEmptyArchives = &skipEmptyArchive
	} else {
		namespacesEventhubsSpecPropertiesCaptureDescription.SkipEmptyArchives = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescription populates the provided destination NamespacesEventhubs_Spec_Properties_CaptureDescription from our NamespacesEventhubs_Spec_Properties_CaptureDescription
func (namespacesEventhubsSpecPropertiesCaptureDescription *NamespacesEventhubs_Spec_Properties_CaptureDescription) AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescription(destination *v1alpha1api20211101storage.NamespacesEventhubs_Spec_Properties_CaptureDescription) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Destination
	if namespacesEventhubsSpecPropertiesCaptureDescription.Destination != nil {
		var destinationLocal v1alpha1api20211101storage.NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination
		err := (*namespacesEventhubsSpecPropertiesCaptureDescription.Destination).AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination()")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// Enabled
	if namespacesEventhubsSpecPropertiesCaptureDescription.Enabled != nil {
		enabled := *namespacesEventhubsSpecPropertiesCaptureDescription.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Encoding
	if namespacesEventhubsSpecPropertiesCaptureDescription.Encoding != nil {
		encoding := string(*namespacesEventhubsSpecPropertiesCaptureDescription.Encoding)
		destination.Encoding = &encoding
	} else {
		destination.Encoding = nil
	}

	// IntervalInSeconds
	destination.IntervalInSeconds = genruntime.ClonePointerToInt(namespacesEventhubsSpecPropertiesCaptureDescription.IntervalInSeconds)

	// SizeLimitInBytes
	destination.SizeLimitInBytes = genruntime.ClonePointerToInt(namespacesEventhubsSpecPropertiesCaptureDescription.SizeLimitInBytes)

	// SkipEmptyArchives
	if namespacesEventhubsSpecPropertiesCaptureDescription.SkipEmptyArchives != nil {
		skipEmptyArchive := *namespacesEventhubsSpecPropertiesCaptureDescription.SkipEmptyArchives
		destination.SkipEmptyArchives = &skipEmptyArchive
	} else {
		destination.SkipEmptyArchives = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Destination_Status struct {
	//ArchiveNameFormat: Blob naming convention for archive, e.g.
	//{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
	//Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective
	//of order
	ArchiveNameFormat *string `json:"archiveNameFormat,omitempty"`

	//BlobContainer: Blob container Name
	BlobContainer *string `json:"blobContainer,omitempty"`

	//DataLakeAccountName: The Azure Data Lake Store name for the captured events
	DataLakeAccountName *string `json:"dataLakeAccountName,omitempty"`

	//DataLakeFolderPath: The destination folder path for the captured events
	DataLakeFolderPath *string `json:"dataLakeFolderPath,omitempty"`

	//DataLakeSubscriptionId: Subscription Id of Azure Data Lake Store
	DataLakeSubscriptionId *string `json:"dataLakeSubscriptionId,omitempty"`

	//Name: Name for capture destination
	Name *string `json:"name,omitempty"`

	//StorageAccountResourceId: Resource id of the storage account to be used to
	//create the blobs
	StorageAccountResourceId *string `json:"storageAccountResourceId,omitempty"`
}

var _ genruntime.FromARMConverter = &Destination_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destinationStatus *Destination_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Destination_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destinationStatus *Destination_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Destination_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Destination_StatusARM, got %T", armInput)
	}

	// Set property ‘ArchiveNameFormat’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ArchiveNameFormat != nil {
			archiveNameFormat := *typedInput.Properties.ArchiveNameFormat
			destinationStatus.ArchiveNameFormat = &archiveNameFormat
		}
	}

	// Set property ‘BlobContainer’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BlobContainer != nil {
			blobContainer := *typedInput.Properties.BlobContainer
			destinationStatus.BlobContainer = &blobContainer
		}
	}

	// Set property ‘DataLakeAccountName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataLakeAccountName != nil {
			dataLakeAccountName := *typedInput.Properties.DataLakeAccountName
			destinationStatus.DataLakeAccountName = &dataLakeAccountName
		}
	}

	// Set property ‘DataLakeFolderPath’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataLakeFolderPath != nil {
			dataLakeFolderPath := *typedInput.Properties.DataLakeFolderPath
			destinationStatus.DataLakeFolderPath = &dataLakeFolderPath
		}
	}

	// Set property ‘DataLakeSubscriptionId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataLakeSubscriptionId != nil {
			dataLakeSubscriptionId := *typedInput.Properties.DataLakeSubscriptionId
			destinationStatus.DataLakeSubscriptionId = &dataLakeSubscriptionId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		destinationStatus.Name = &name
	}

	// Set property ‘StorageAccountResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageAccountResourceId != nil {
			storageAccountResourceId := *typedInput.Properties.StorageAccountResourceId
			destinationStatus.StorageAccountResourceId = &storageAccountResourceId
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromDestinationStatus populates our Destination_Status from the provided source Destination_Status
func (destinationStatus *Destination_Status) AssignPropertiesFromDestinationStatus(source *v1alpha1api20211101storage.Destination_Status) error {

	// ArchiveNameFormat
	destinationStatus.ArchiveNameFormat = genruntime.ClonePointerToString(source.ArchiveNameFormat)

	// BlobContainer
	destinationStatus.BlobContainer = genruntime.ClonePointerToString(source.BlobContainer)

	// DataLakeAccountName
	destinationStatus.DataLakeAccountName = genruntime.ClonePointerToString(source.DataLakeAccountName)

	// DataLakeFolderPath
	destinationStatus.DataLakeFolderPath = genruntime.ClonePointerToString(source.DataLakeFolderPath)

	// DataLakeSubscriptionId
	destinationStatus.DataLakeSubscriptionId = genruntime.ClonePointerToString(source.DataLakeSubscriptionId)

	// Name
	destinationStatus.Name = genruntime.ClonePointerToString(source.Name)

	// StorageAccountResourceId
	destinationStatus.StorageAccountResourceId = genruntime.ClonePointerToString(source.StorageAccountResourceId)

	// No error
	return nil
}

// AssignPropertiesToDestinationStatus populates the provided destination Destination_Status from our Destination_Status
func (destinationStatus *Destination_Status) AssignPropertiesToDestinationStatus(destination *v1alpha1api20211101storage.Destination_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ArchiveNameFormat
	destination.ArchiveNameFormat = genruntime.ClonePointerToString(destinationStatus.ArchiveNameFormat)

	// BlobContainer
	destination.BlobContainer = genruntime.ClonePointerToString(destinationStatus.BlobContainer)

	// DataLakeAccountName
	destination.DataLakeAccountName = genruntime.ClonePointerToString(destinationStatus.DataLakeAccountName)

	// DataLakeFolderPath
	destination.DataLakeFolderPath = genruntime.ClonePointerToString(destinationStatus.DataLakeFolderPath)

	// DataLakeSubscriptionId
	destination.DataLakeSubscriptionId = genruntime.ClonePointerToString(destinationStatus.DataLakeSubscriptionId)

	// Name
	destination.Name = genruntime.ClonePointerToString(destinationStatus.Name)

	// StorageAccountResourceId
	destination.StorageAccountResourceId = genruntime.ClonePointerToString(destinationStatus.StorageAccountResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Avro","AvroDeflate"}
type NamespacesEventhubsSpecPropertiesCaptureDescriptionEncoding string

const (
	NamespacesEventhubsSpecPropertiesCaptureDescriptionEncodingAvro        = NamespacesEventhubsSpecPropertiesCaptureDescriptionEncoding("Avro")
	NamespacesEventhubsSpecPropertiesCaptureDescriptionEncodingAvroDeflate = NamespacesEventhubsSpecPropertiesCaptureDescriptionEncoding("AvroDeflate")
)

type NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination struct {
	//ArchiveNameFormat: Blob naming convention for archive, e.g.
	//{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}.
	//Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective
	//of order
	ArchiveNameFormat *string `json:"archiveNameFormat,omitempty"`

	//BlobContainer: Blob container Name
	BlobContainer *string `json:"blobContainer,omitempty"`

	//DataLakeAccountName: The Azure Data Lake Store name for the captured events
	DataLakeAccountName *string `json:"dataLakeAccountName,omitempty"`

	//DataLakeFolderPath: The destination folder path for the captured events
	DataLakeFolderPath *string `json:"dataLakeFolderPath,omitempty"`

	// +kubebuilder:validation:Pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$"
	//DataLakeSubscriptionId: Subscription Id of Azure Data Lake Store
	DataLakeSubscriptionId *string `json:"dataLakeSubscriptionId,omitempty"`

	//Name: Name for capture destination
	Name *string `json:"name,omitempty"`

	//StorageAccountResourceReference: Resource id of the storage account to be used
	//to create the blobs
	StorageAccountResourceReference *genruntime.ResourceReference `armReference:"StorageAccountResourceId" json:"storageAccountResourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespacesEventhubsSpecPropertiesCaptureDescriptionDestination *NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination == nil {
		return nil, nil
	}
	var result NamespacesEventhubs_Spec_Properties_CaptureDescription_DestinationARM

	// Set property ‘Name’:
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.Name != nil {
		name := *namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.ArchiveNameFormat != nil ||
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.BlobContainer != nil ||
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeAccountName != nil ||
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeFolderPath != nil ||
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId != nil ||
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.StorageAccountResourceReference != nil {
		result.Properties = &DestinationPropertiesARM{}
	}
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.ArchiveNameFormat != nil {
		archiveNameFormat := *namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.ArchiveNameFormat
		result.Properties.ArchiveNameFormat = &archiveNameFormat
	}
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.BlobContainer != nil {
		blobContainer := *namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.BlobContainer
		result.Properties.BlobContainer = &blobContainer
	}
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeAccountName != nil {
		dataLakeAccountName := *namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeAccountName
		result.Properties.DataLakeAccountName = &dataLakeAccountName
	}
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeFolderPath != nil {
		dataLakeFolderPath := *namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeFolderPath
		result.Properties.DataLakeFolderPath = &dataLakeFolderPath
	}
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId != nil {
		dataLakeSubscriptionId := *namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId
		result.Properties.DataLakeSubscriptionId = &dataLakeSubscriptionId
	}
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.StorageAccountResourceReference != nil {
		storageAccountResourceIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.StorageAccountResourceReference)
		if err != nil {
			return nil, err
		}
		storageAccountResourceId := storageAccountResourceIdARMID
		result.Properties.StorageAccountResourceId = &storageAccountResourceId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespacesEventhubsSpecPropertiesCaptureDescriptionDestination *NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesEventhubs_Spec_Properties_CaptureDescription_DestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespacesEventhubsSpecPropertiesCaptureDescriptionDestination *NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesEventhubs_Spec_Properties_CaptureDescription_DestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesEventhubs_Spec_Properties_CaptureDescription_DestinationARM, got %T", armInput)
	}

	// Set property ‘ArchiveNameFormat’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ArchiveNameFormat != nil {
			archiveNameFormat := *typedInput.Properties.ArchiveNameFormat
			namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.ArchiveNameFormat = &archiveNameFormat
		}
	}

	// Set property ‘BlobContainer’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BlobContainer != nil {
			blobContainer := *typedInput.Properties.BlobContainer
			namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.BlobContainer = &blobContainer
		}
	}

	// Set property ‘DataLakeAccountName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataLakeAccountName != nil {
			dataLakeAccountName := *typedInput.Properties.DataLakeAccountName
			namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeAccountName = &dataLakeAccountName
		}
	}

	// Set property ‘DataLakeFolderPath’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataLakeFolderPath != nil {
			dataLakeFolderPath := *typedInput.Properties.DataLakeFolderPath
			namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeFolderPath = &dataLakeFolderPath
		}
	}

	// Set property ‘DataLakeSubscriptionId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataLakeSubscriptionId != nil {
			dataLakeSubscriptionId := *typedInput.Properties.DataLakeSubscriptionId
			namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId = &dataLakeSubscriptionId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.Name = &name
	}

	// no assignment for property ‘StorageAccountResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination populates our NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination from the provided source NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination
func (namespacesEventhubsSpecPropertiesCaptureDescriptionDestination *NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination) AssignPropertiesFromNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination(source *v1alpha1api20211101storage.NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination) error {

	// ArchiveNameFormat
	namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.ArchiveNameFormat = genruntime.ClonePointerToString(source.ArchiveNameFormat)

	// BlobContainer
	namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.BlobContainer = genruntime.ClonePointerToString(source.BlobContainer)

	// DataLakeAccountName
	namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeAccountName = genruntime.ClonePointerToString(source.DataLakeAccountName)

	// DataLakeFolderPath
	namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeFolderPath = genruntime.ClonePointerToString(source.DataLakeFolderPath)

	// DataLakeSubscriptionId
	if source.DataLakeSubscriptionId != nil {
		dataLakeSubscriptionId := *source.DataLakeSubscriptionId
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId = &dataLakeSubscriptionId
	} else {
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId = nil
	}

	// Name
	namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.Name = genruntime.ClonePointerToString(source.Name)

	// StorageAccountResourceReference
	if source.StorageAccountResourceReference != nil {
		storageAccountResourceReference := source.StorageAccountResourceReference.Copy()
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.StorageAccountResourceReference = &storageAccountResourceReference
	} else {
		namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.StorageAccountResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination populates the provided destination NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination from our NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination
func (namespacesEventhubsSpecPropertiesCaptureDescriptionDestination *NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination) AssignPropertiesToNamespacesEventhubsSpecPropertiesCaptureDescriptionDestination(destination *v1alpha1api20211101storage.NamespacesEventhubs_Spec_Properties_CaptureDescription_Destination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ArchiveNameFormat
	destination.ArchiveNameFormat = genruntime.ClonePointerToString(namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.ArchiveNameFormat)

	// BlobContainer
	destination.BlobContainer = genruntime.ClonePointerToString(namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.BlobContainer)

	// DataLakeAccountName
	destination.DataLakeAccountName = genruntime.ClonePointerToString(namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeAccountName)

	// DataLakeFolderPath
	destination.DataLakeFolderPath = genruntime.ClonePointerToString(namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeFolderPath)

	// DataLakeSubscriptionId
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId != nil {
		dataLakeSubscriptionId := *namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.DataLakeSubscriptionId
		destination.DataLakeSubscriptionId = &dataLakeSubscriptionId
	} else {
		destination.DataLakeSubscriptionId = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.Name)

	// StorageAccountResourceReference
	if namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.StorageAccountResourceReference != nil {
		storageAccountResourceReference := namespacesEventhubsSpecPropertiesCaptureDescriptionDestination.StorageAccountResourceReference.Copy()
		destination.StorageAccountResourceReference = &storageAccountResourceReference
	} else {
		destination.StorageAccountResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NamespacesEventhub{}, &NamespacesEventhubList{})
}
