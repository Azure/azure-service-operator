// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210702

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ArmIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ArmIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForArmIdentity_STATUS_ARM, ArmIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForArmIdentity_STATUS_ARM runs a test to see if a specific instance of ArmIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForArmIdentity_STATUS_ARM(subject ArmIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ArmIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ArmIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ArmIdentity_STATUS_ARMGenerator()
var armIdentity_STATUS_ARMGenerator gopter.Gen

// ArmIdentity_STATUS_ARMGenerator returns a generator of ArmIdentity_STATUS_ARM instances for property testing.
// We first initialize armIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ArmIdentity_STATUS_ARMGenerator() gopter.Gen {
	if armIdentity_STATUS_ARMGenerator != nil {
		return armIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForArmIdentity_STATUS_ARM(generators)
	armIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ArmIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForArmIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForArmIdentity_STATUS_ARM(generators)
	armIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ArmIdentity_STATUS_ARM{}), generators)

	return armIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForArmIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForArmIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ArmIdentity_Type_STATUS_ARM_None,
		ArmIdentity_Type_STATUS_ARM_SystemAssigned,
		ArmIdentity_Type_STATUS_ARM_SystemAssignedUserAssigned,
		ArmIdentity_Type_STATUS_ARM_UserAssigned))
}

// AddRelatedPropertyGeneratorsForArmIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForArmIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		ArmUserIdentity_STATUS_ARMGenerator())
}

func Test_ArmUserIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ArmUserIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForArmUserIdentity_STATUS_ARM, ArmUserIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForArmUserIdentity_STATUS_ARM runs a test to see if a specific instance of ArmUserIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForArmUserIdentity_STATUS_ARM(subject ArmUserIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ArmUserIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ArmUserIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ArmUserIdentity_STATUS_ARMGenerator()
var armUserIdentity_STATUS_ARMGenerator gopter.Gen

// ArmUserIdentity_STATUS_ARMGenerator returns a generator of ArmUserIdentity_STATUS_ARM instances for property testing.
func ArmUserIdentity_STATUS_ARMGenerator() gopter.Gen {
	if armUserIdentity_STATUS_ARMGenerator != nil {
		return armUserIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForArmUserIdentity_STATUS_ARM(generators)
	armUserIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ArmUserIdentity_STATUS_ARM{}), generators)

	return armUserIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForArmUserIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForArmUserIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_CloudToDeviceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CloudToDeviceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCloudToDeviceProperties_STATUS_ARM, CloudToDeviceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCloudToDeviceProperties_STATUS_ARM runs a test to see if a specific instance of CloudToDeviceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCloudToDeviceProperties_STATUS_ARM(subject CloudToDeviceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CloudToDeviceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CloudToDeviceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// CloudToDeviceProperties_STATUS_ARMGenerator()
var cloudToDeviceProperties_STATUS_ARMGenerator gopter.Gen

// CloudToDeviceProperties_STATUS_ARMGenerator returns a generator of CloudToDeviceProperties_STATUS_ARM instances for property testing.
// We first initialize cloudToDeviceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CloudToDeviceProperties_STATUS_ARMGenerator() gopter.Gen {
	if cloudToDeviceProperties_STATUS_ARMGenerator != nil {
		return cloudToDeviceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCloudToDeviceProperties_STATUS_ARM(generators)
	cloudToDeviceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CloudToDeviceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCloudToDeviceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForCloudToDeviceProperties_STATUS_ARM(generators)
	cloudToDeviceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CloudToDeviceProperties_STATUS_ARM{}), generators)

	return cloudToDeviceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCloudToDeviceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCloudToDeviceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultTtlAsIso8601"] = gen.PtrOf(gen.AlphaString())
	gens["MaxDeliveryCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCloudToDeviceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCloudToDeviceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Feedback"] = gen.PtrOf(FeedbackProperties_STATUS_ARMGenerator())
}

func Test_EnrichmentProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EnrichmentProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEnrichmentProperties_STATUS_ARM, EnrichmentProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEnrichmentProperties_STATUS_ARM runs a test to see if a specific instance of EnrichmentProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEnrichmentProperties_STATUS_ARM(subject EnrichmentProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EnrichmentProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EnrichmentProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EnrichmentProperties_STATUS_ARMGenerator()
var enrichmentProperties_STATUS_ARMGenerator gopter.Gen

// EnrichmentProperties_STATUS_ARMGenerator returns a generator of EnrichmentProperties_STATUS_ARM instances for property testing.
func EnrichmentProperties_STATUS_ARMGenerator() gopter.Gen {
	if enrichmentProperties_STATUS_ARMGenerator != nil {
		return enrichmentProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEnrichmentProperties_STATUS_ARM(generators)
	enrichmentProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EnrichmentProperties_STATUS_ARM{}), generators)

	return enrichmentProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEnrichmentProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEnrichmentProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EndpointNames"] = gen.SliceOf(gen.AlphaString())
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_EventHubProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventHubProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventHubProperties_STATUS_ARM, EventHubProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventHubProperties_STATUS_ARM runs a test to see if a specific instance of EventHubProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventHubProperties_STATUS_ARM(subject EventHubProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventHubProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventHubProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EventHubProperties_STATUS_ARMGenerator()
var eventHubProperties_STATUS_ARMGenerator gopter.Gen

// EventHubProperties_STATUS_ARMGenerator returns a generator of EventHubProperties_STATUS_ARM instances for property testing.
func EventHubProperties_STATUS_ARMGenerator() gopter.Gen {
	if eventHubProperties_STATUS_ARMGenerator != nil {
		return eventHubProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventHubProperties_STATUS_ARM(generators)
	eventHubProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventHubProperties_STATUS_ARM{}), generators)

	return eventHubProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventHubProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventHubProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["PartitionIds"] = gen.SliceOf(gen.AlphaString())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["RetentionTimeInDays"] = gen.PtrOf(gen.Int())
}

func Test_FallbackRouteProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FallbackRouteProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFallbackRouteProperties_STATUS_ARM, FallbackRouteProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFallbackRouteProperties_STATUS_ARM runs a test to see if a specific instance of FallbackRouteProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFallbackRouteProperties_STATUS_ARM(subject FallbackRouteProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FallbackRouteProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FallbackRouteProperties_STATUS_ARM instances for property testing - lazily instantiated by
// FallbackRouteProperties_STATUS_ARMGenerator()
var fallbackRouteProperties_STATUS_ARMGenerator gopter.Gen

// FallbackRouteProperties_STATUS_ARMGenerator returns a generator of FallbackRouteProperties_STATUS_ARM instances for property testing.
func FallbackRouteProperties_STATUS_ARMGenerator() gopter.Gen {
	if fallbackRouteProperties_STATUS_ARMGenerator != nil {
		return fallbackRouteProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFallbackRouteProperties_STATUS_ARM(generators)
	fallbackRouteProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FallbackRouteProperties_STATUS_ARM{}), generators)

	return fallbackRouteProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFallbackRouteProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFallbackRouteProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Condition"] = gen.PtrOf(gen.AlphaString())
	gens["EndpointNames"] = gen.SliceOf(gen.AlphaString())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Source"] = gen.PtrOf(gen.OneConstOf(FallbackRouteProperties_Source_STATUS_ARM_DeviceMessages))
}

func Test_FeedbackProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FeedbackProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFeedbackProperties_STATUS_ARM, FeedbackProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFeedbackProperties_STATUS_ARM runs a test to see if a specific instance of FeedbackProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFeedbackProperties_STATUS_ARM(subject FeedbackProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FeedbackProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FeedbackProperties_STATUS_ARM instances for property testing - lazily instantiated by
// FeedbackProperties_STATUS_ARMGenerator()
var feedbackProperties_STATUS_ARMGenerator gopter.Gen

// FeedbackProperties_STATUS_ARMGenerator returns a generator of FeedbackProperties_STATUS_ARM instances for property testing.
func FeedbackProperties_STATUS_ARMGenerator() gopter.Gen {
	if feedbackProperties_STATUS_ARMGenerator != nil {
		return feedbackProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFeedbackProperties_STATUS_ARM(generators)
	feedbackProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FeedbackProperties_STATUS_ARM{}), generators)

	return feedbackProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFeedbackProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFeedbackProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LockDurationAsIso8601"] = gen.PtrOf(gen.AlphaString())
	gens["MaxDeliveryCount"] = gen.PtrOf(gen.Int())
	gens["TtlAsIso8601"] = gen.PtrOf(gen.AlphaString())
}

func Test_IotHubLocationDescription_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IotHubLocationDescription_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIotHubLocationDescription_STATUS_ARM, IotHubLocationDescription_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIotHubLocationDescription_STATUS_ARM runs a test to see if a specific instance of IotHubLocationDescription_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIotHubLocationDescription_STATUS_ARM(subject IotHubLocationDescription_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IotHubLocationDescription_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IotHubLocationDescription_STATUS_ARM instances for property testing - lazily instantiated by
// IotHubLocationDescription_STATUS_ARMGenerator()
var iotHubLocationDescription_STATUS_ARMGenerator gopter.Gen

// IotHubLocationDescription_STATUS_ARMGenerator returns a generator of IotHubLocationDescription_STATUS_ARM instances for property testing.
func IotHubLocationDescription_STATUS_ARMGenerator() gopter.Gen {
	if iotHubLocationDescription_STATUS_ARMGenerator != nil {
		return iotHubLocationDescription_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIotHubLocationDescription_STATUS_ARM(generators)
	iotHubLocationDescription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IotHubLocationDescription_STATUS_ARM{}), generators)

	return iotHubLocationDescription_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIotHubLocationDescription_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIotHubLocationDescription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Role"] = gen.PtrOf(gen.OneConstOf(IotHubLocationDescription_Role_STATUS_ARM_Primary, IotHubLocationDescription_Role_STATUS_ARM_Secondary))
}

func Test_IotHubProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IotHubProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIotHubProperties_STATUS_ARM, IotHubProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIotHubProperties_STATUS_ARM runs a test to see if a specific instance of IotHubProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIotHubProperties_STATUS_ARM(subject IotHubProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IotHubProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IotHubProperties_STATUS_ARM instances for property testing - lazily instantiated by
// IotHubProperties_STATUS_ARMGenerator()
var iotHubProperties_STATUS_ARMGenerator gopter.Gen

// IotHubProperties_STATUS_ARMGenerator returns a generator of IotHubProperties_STATUS_ARM instances for property testing.
// We first initialize iotHubProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IotHubProperties_STATUS_ARMGenerator() gopter.Gen {
	if iotHubProperties_STATUS_ARMGenerator != nil {
		return iotHubProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIotHubProperties_STATUS_ARM(generators)
	iotHubProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IotHubProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIotHubProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForIotHubProperties_STATUS_ARM(generators)
	iotHubProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IotHubProperties_STATUS_ARM{}), generators)

	return iotHubProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIotHubProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIotHubProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowedFqdnList"] = gen.SliceOf(gen.AlphaString())
	gens["Comments"] = gen.PtrOf(gen.AlphaString())
	gens["DisableDeviceSAS"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["DisableModuleSAS"] = gen.PtrOf(gen.Bool())
	gens["EnableDataResidency"] = gen.PtrOf(gen.Bool())
	gens["EnableFileUploadNotifications"] = gen.PtrOf(gen.Bool())
	gens["Features"] = gen.PtrOf(gen.OneConstOf(IotHubProperties_Features_STATUS_ARM_DeviceManagement, IotHubProperties_Features_STATUS_ARM_None))
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["MinTlsVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(IotHubProperties_PublicNetworkAccess_STATUS_ARM_Disabled, IotHubProperties_PublicNetworkAccess_STATUS_ARM_Enabled))
	gens["RestrictOutboundNetworkAccess"] = gen.PtrOf(gen.Bool())
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIotHubProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIotHubProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthorizationPolicies"] = gen.SliceOf(SharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator())
	gens["CloudToDevice"] = gen.PtrOf(CloudToDeviceProperties_STATUS_ARMGenerator())
	gens["EventHubEndpoints"] = gen.MapOf(
		gen.AlphaString(),
		EventHubProperties_STATUS_ARMGenerator())
	gens["IpFilterRules"] = gen.SliceOf(IpFilterRule_STATUS_ARMGenerator())
	gens["Locations"] = gen.SliceOf(IotHubLocationDescription_STATUS_ARMGenerator())
	gens["MessagingEndpoints"] = gen.MapOf(
		gen.AlphaString(),
		MessagingEndpointProperties_STATUS_ARMGenerator())
	gens["NetworkRuleSets"] = gen.PtrOf(NetworkRuleSetProperties_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_ARMGenerator())
	gens["Routing"] = gen.PtrOf(RoutingProperties_STATUS_ARMGenerator())
	gens["StorageEndpoints"] = gen.MapOf(
		gen.AlphaString(),
		StorageEndpointProperties_STATUS_ARMGenerator())
}

func Test_IotHubSkuInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IotHubSkuInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIotHubSkuInfo_STATUS_ARM, IotHubSkuInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIotHubSkuInfo_STATUS_ARM runs a test to see if a specific instance of IotHubSkuInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIotHubSkuInfo_STATUS_ARM(subject IotHubSkuInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IotHubSkuInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IotHubSkuInfo_STATUS_ARM instances for property testing - lazily instantiated by
// IotHubSkuInfo_STATUS_ARMGenerator()
var iotHubSkuInfo_STATUS_ARMGenerator gopter.Gen

// IotHubSkuInfo_STATUS_ARMGenerator returns a generator of IotHubSkuInfo_STATUS_ARM instances for property testing.
func IotHubSkuInfo_STATUS_ARMGenerator() gopter.Gen {
	if iotHubSkuInfo_STATUS_ARMGenerator != nil {
		return iotHubSkuInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIotHubSkuInfo_STATUS_ARM(generators)
	iotHubSkuInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IotHubSkuInfo_STATUS_ARM{}), generators)

	return iotHubSkuInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIotHubSkuInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIotHubSkuInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		IotHubSkuInfo_Name_STATUS_ARM_B1,
		IotHubSkuInfo_Name_STATUS_ARM_B2,
		IotHubSkuInfo_Name_STATUS_ARM_B3,
		IotHubSkuInfo_Name_STATUS_ARM_F1,
		IotHubSkuInfo_Name_STATUS_ARM_S1,
		IotHubSkuInfo_Name_STATUS_ARM_S2,
		IotHubSkuInfo_Name_STATUS_ARM_S3))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(IotHubSkuInfo_Tier_STATUS_ARM_Basic, IotHubSkuInfo_Tier_STATUS_ARM_Free, IotHubSkuInfo_Tier_STATUS_ARM_Standard))
}

func Test_IotHub_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IotHub_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIotHub_STATUS_ARM, IotHub_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIotHub_STATUS_ARM runs a test to see if a specific instance of IotHub_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIotHub_STATUS_ARM(subject IotHub_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IotHub_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IotHub_STATUS_ARM instances for property testing - lazily instantiated by IotHub_STATUS_ARMGenerator()
var iotHub_STATUS_ARMGenerator gopter.Gen

// IotHub_STATUS_ARMGenerator returns a generator of IotHub_STATUS_ARM instances for property testing.
// We first initialize iotHub_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IotHub_STATUS_ARMGenerator() gopter.Gen {
	if iotHub_STATUS_ARMGenerator != nil {
		return iotHub_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIotHub_STATUS_ARM(generators)
	iotHub_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IotHub_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIotHub_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForIotHub_STATUS_ARM(generators)
	iotHub_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IotHub_STATUS_ARM{}), generators)

	return iotHub_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIotHub_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIotHub_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIotHub_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIotHub_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ArmIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(IotHubProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(IotHubSkuInfo_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_IpFilterRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpFilterRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpFilterRule_STATUS_ARM, IpFilterRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpFilterRule_STATUS_ARM runs a test to see if a specific instance of IpFilterRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpFilterRule_STATUS_ARM(subject IpFilterRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpFilterRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpFilterRule_STATUS_ARM instances for property testing - lazily instantiated by
// IpFilterRule_STATUS_ARMGenerator()
var ipFilterRule_STATUS_ARMGenerator gopter.Gen

// IpFilterRule_STATUS_ARMGenerator returns a generator of IpFilterRule_STATUS_ARM instances for property testing.
func IpFilterRule_STATUS_ARMGenerator() gopter.Gen {
	if ipFilterRule_STATUS_ARMGenerator != nil {
		return ipFilterRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpFilterRule_STATUS_ARM(generators)
	ipFilterRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IpFilterRule_STATUS_ARM{}), generators)

	return ipFilterRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpFilterRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpFilterRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(IpFilterRule_Action_STATUS_ARM_Accept, IpFilterRule_Action_STATUS_ARM_Reject))
	gens["FilterName"] = gen.PtrOf(gen.AlphaString())
	gens["IpMask"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentity_STATUS_ARM, ManagedIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentity_STATUS_ARM(subject ManagedIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedIdentity_STATUS_ARMGenerator()
var managedIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedIdentity_STATUS_ARMGenerator returns a generator of ManagedIdentity_STATUS_ARM instances for property testing.
func ManagedIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedIdentity_STATUS_ARMGenerator != nil {
		return managedIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentity_STATUS_ARM(generators)
	managedIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_STATUS_ARM{}), generators)

	return managedIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentity"] = gen.PtrOf(gen.AlphaString())
}

func Test_MessagingEndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MessagingEndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMessagingEndpointProperties_STATUS_ARM, MessagingEndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMessagingEndpointProperties_STATUS_ARM runs a test to see if a specific instance of MessagingEndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMessagingEndpointProperties_STATUS_ARM(subject MessagingEndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MessagingEndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MessagingEndpointProperties_STATUS_ARM instances for property testing - lazily instantiated by
// MessagingEndpointProperties_STATUS_ARMGenerator()
var messagingEndpointProperties_STATUS_ARMGenerator gopter.Gen

// MessagingEndpointProperties_STATUS_ARMGenerator returns a generator of MessagingEndpointProperties_STATUS_ARM instances for property testing.
func MessagingEndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if messagingEndpointProperties_STATUS_ARMGenerator != nil {
		return messagingEndpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMessagingEndpointProperties_STATUS_ARM(generators)
	messagingEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MessagingEndpointProperties_STATUS_ARM{}), generators)

	return messagingEndpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMessagingEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMessagingEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LockDurationAsIso8601"] = gen.PtrOf(gen.AlphaString())
	gens["MaxDeliveryCount"] = gen.PtrOf(gen.Int())
	gens["TtlAsIso8601"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkRuleSetIpRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkRuleSetIpRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkRuleSetIpRule_STATUS_ARM, NetworkRuleSetIpRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkRuleSetIpRule_STATUS_ARM runs a test to see if a specific instance of NetworkRuleSetIpRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkRuleSetIpRule_STATUS_ARM(subject NetworkRuleSetIpRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkRuleSetIpRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkRuleSetIpRule_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkRuleSetIpRule_STATUS_ARMGenerator()
var networkRuleSetIpRule_STATUS_ARMGenerator gopter.Gen

// NetworkRuleSetIpRule_STATUS_ARMGenerator returns a generator of NetworkRuleSetIpRule_STATUS_ARM instances for property testing.
func NetworkRuleSetIpRule_STATUS_ARMGenerator() gopter.Gen {
	if networkRuleSetIpRule_STATUS_ARMGenerator != nil {
		return networkRuleSetIpRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSetIpRule_STATUS_ARM(generators)
	networkRuleSetIpRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSetIpRule_STATUS_ARM{}), generators)

	return networkRuleSetIpRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkRuleSetIpRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkRuleSetIpRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSetIpRule_Action_STATUS_ARM_Allow))
	gens["FilterName"] = gen.PtrOf(gen.AlphaString())
	gens["IpMask"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkRuleSetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkRuleSetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkRuleSetProperties_STATUS_ARM, NetworkRuleSetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkRuleSetProperties_STATUS_ARM runs a test to see if a specific instance of NetworkRuleSetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkRuleSetProperties_STATUS_ARM(subject NetworkRuleSetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkRuleSetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkRuleSetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkRuleSetProperties_STATUS_ARMGenerator()
var networkRuleSetProperties_STATUS_ARMGenerator gopter.Gen

// NetworkRuleSetProperties_STATUS_ARMGenerator returns a generator of NetworkRuleSetProperties_STATUS_ARM instances for property testing.
// We first initialize networkRuleSetProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkRuleSetProperties_STATUS_ARMGenerator() gopter.Gen {
	if networkRuleSetProperties_STATUS_ARMGenerator != nil {
		return networkRuleSetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSetProperties_STATUS_ARM(generators)
	networkRuleSetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSetProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSetProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkRuleSetProperties_STATUS_ARM(generators)
	networkRuleSetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSetProperties_STATUS_ARM{}), generators)

	return networkRuleSetProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkRuleSetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkRuleSetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApplyToBuiltInEventHubEndpoint"] = gen.PtrOf(gen.Bool())
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSetProperties_DefaultAction_STATUS_ARM_Allow, NetworkRuleSetProperties_DefaultAction_STATUS_ARM_Deny))
}

// AddRelatedPropertyGeneratorsForNetworkRuleSetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkRuleSetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IpRules"] = gen.SliceOf(NetworkRuleSetIpRule_STATUS_ARMGenerator())
}

func Test_PrivateEndpointConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM, PrivateEndpointConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM(subject PrivateEndpointConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointConnection_STATUS_ARMGenerator()
var privateEndpointConnection_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_ARMGenerator returns a generator of PrivateEndpointConnection_STATUS_ARM instances for property testing.
func PrivateEndpointConnection_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_ARMGenerator != nil {
		return privateEndpointConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(generators)
	privateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_ARM{}), generators)

	return privateEndpointConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_RouteProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteProperties_STATUS_ARM, RouteProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteProperties_STATUS_ARM runs a test to see if a specific instance of RouteProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteProperties_STATUS_ARM(subject RouteProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteProperties_STATUS_ARM instances for property testing - lazily instantiated by
// RouteProperties_STATUS_ARMGenerator()
var routeProperties_STATUS_ARMGenerator gopter.Gen

// RouteProperties_STATUS_ARMGenerator returns a generator of RouteProperties_STATUS_ARM instances for property testing.
func RouteProperties_STATUS_ARMGenerator() gopter.Gen {
	if routeProperties_STATUS_ARMGenerator != nil {
		return routeProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteProperties_STATUS_ARM(generators)
	routeProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RouteProperties_STATUS_ARM{}), generators)

	return routeProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Condition"] = gen.PtrOf(gen.AlphaString())
	gens["EndpointNames"] = gen.SliceOf(gen.AlphaString())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Source"] = gen.PtrOf(gen.OneConstOf(
		RouteProperties_Source_STATUS_ARM_DeviceConnectionStateEvents,
		RouteProperties_Source_STATUS_ARM_DeviceJobLifecycleEvents,
		RouteProperties_Source_STATUS_ARM_DeviceLifecycleEvents,
		RouteProperties_Source_STATUS_ARM_DeviceMessages,
		RouteProperties_Source_STATUS_ARM_Invalid,
		RouteProperties_Source_STATUS_ARM_TwinChangeEvents))
}

func Test_RoutingEndpoints_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutingEndpoints_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutingEndpoints_STATUS_ARM, RoutingEndpoints_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutingEndpoints_STATUS_ARM runs a test to see if a specific instance of RoutingEndpoints_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutingEndpoints_STATUS_ARM(subject RoutingEndpoints_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutingEndpoints_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutingEndpoints_STATUS_ARM instances for property testing - lazily instantiated by
// RoutingEndpoints_STATUS_ARMGenerator()
var routingEndpoints_STATUS_ARMGenerator gopter.Gen

// RoutingEndpoints_STATUS_ARMGenerator returns a generator of RoutingEndpoints_STATUS_ARM instances for property testing.
func RoutingEndpoints_STATUS_ARMGenerator() gopter.Gen {
	if routingEndpoints_STATUS_ARMGenerator != nil {
		return routingEndpoints_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRoutingEndpoints_STATUS_ARM(generators)
	routingEndpoints_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingEndpoints_STATUS_ARM{}), generators)

	return routingEndpoints_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForRoutingEndpoints_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoutingEndpoints_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EventHubs"] = gen.SliceOf(RoutingEventHubProperties_STATUS_ARMGenerator())
	gens["ServiceBusQueues"] = gen.SliceOf(RoutingServiceBusQueueEndpointProperties_STATUS_ARMGenerator())
	gens["ServiceBusTopics"] = gen.SliceOf(RoutingServiceBusTopicEndpointProperties_STATUS_ARMGenerator())
	gens["StorageContainers"] = gen.SliceOf(RoutingStorageContainerProperties_STATUS_ARMGenerator())
}

func Test_RoutingEventHubProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutingEventHubProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutingEventHubProperties_STATUS_ARM, RoutingEventHubProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutingEventHubProperties_STATUS_ARM runs a test to see if a specific instance of RoutingEventHubProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutingEventHubProperties_STATUS_ARM(subject RoutingEventHubProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutingEventHubProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutingEventHubProperties_STATUS_ARM instances for property testing - lazily instantiated by
// RoutingEventHubProperties_STATUS_ARMGenerator()
var routingEventHubProperties_STATUS_ARMGenerator gopter.Gen

// RoutingEventHubProperties_STATUS_ARMGenerator returns a generator of RoutingEventHubProperties_STATUS_ARM instances for property testing.
// We first initialize routingEventHubProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoutingEventHubProperties_STATUS_ARMGenerator() gopter.Gen {
	if routingEventHubProperties_STATUS_ARMGenerator != nil {
		return routingEventHubProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingEventHubProperties_STATUS_ARM(generators)
	routingEventHubProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingEventHubProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingEventHubProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRoutingEventHubProperties_STATUS_ARM(generators)
	routingEventHubProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingEventHubProperties_STATUS_ARM{}), generators)

	return routingEventHubProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutingEventHubProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutingEventHubProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationType"] = gen.PtrOf(gen.OneConstOf(RoutingEventHubProperties_AuthenticationType_STATUS_ARM_IdentityBased, RoutingEventHubProperties_AuthenticationType_STATUS_ARM_KeyBased))
	gens["EndpointUri"] = gen.PtrOf(gen.AlphaString())
	gens["EntityPath"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoutingEventHubProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoutingEventHubProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_STATUS_ARMGenerator())
}

func Test_RoutingProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutingProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutingProperties_STATUS_ARM, RoutingProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutingProperties_STATUS_ARM runs a test to see if a specific instance of RoutingProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutingProperties_STATUS_ARM(subject RoutingProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutingProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutingProperties_STATUS_ARM instances for property testing - lazily instantiated by
// RoutingProperties_STATUS_ARMGenerator()
var routingProperties_STATUS_ARMGenerator gopter.Gen

// RoutingProperties_STATUS_ARMGenerator returns a generator of RoutingProperties_STATUS_ARM instances for property testing.
func RoutingProperties_STATUS_ARMGenerator() gopter.Gen {
	if routingProperties_STATUS_ARMGenerator != nil {
		return routingProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRoutingProperties_STATUS_ARM(generators)
	routingProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingProperties_STATUS_ARM{}), generators)

	return routingProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForRoutingProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoutingProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Endpoints"] = gen.PtrOf(RoutingEndpoints_STATUS_ARMGenerator())
	gens["Enrichments"] = gen.SliceOf(EnrichmentProperties_STATUS_ARMGenerator())
	gens["FallbackRoute"] = gen.PtrOf(FallbackRouteProperties_STATUS_ARMGenerator())
	gens["Routes"] = gen.SliceOf(RouteProperties_STATUS_ARMGenerator())
}

func Test_RoutingServiceBusQueueEndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutingServiceBusQueueEndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutingServiceBusQueueEndpointProperties_STATUS_ARM, RoutingServiceBusQueueEndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutingServiceBusQueueEndpointProperties_STATUS_ARM runs a test to see if a specific instance of RoutingServiceBusQueueEndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutingServiceBusQueueEndpointProperties_STATUS_ARM(subject RoutingServiceBusQueueEndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutingServiceBusQueueEndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutingServiceBusQueueEndpointProperties_STATUS_ARM instances for property testing - lazily instantiated
// by RoutingServiceBusQueueEndpointProperties_STATUS_ARMGenerator()
var routingServiceBusQueueEndpointProperties_STATUS_ARMGenerator gopter.Gen

// RoutingServiceBusQueueEndpointProperties_STATUS_ARMGenerator returns a generator of RoutingServiceBusQueueEndpointProperties_STATUS_ARM instances for property testing.
// We first initialize routingServiceBusQueueEndpointProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoutingServiceBusQueueEndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if routingServiceBusQueueEndpointProperties_STATUS_ARMGenerator != nil {
		return routingServiceBusQueueEndpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingServiceBusQueueEndpointProperties_STATUS_ARM(generators)
	routingServiceBusQueueEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingServiceBusQueueEndpointProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingServiceBusQueueEndpointProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRoutingServiceBusQueueEndpointProperties_STATUS_ARM(generators)
	routingServiceBusQueueEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingServiceBusQueueEndpointProperties_STATUS_ARM{}), generators)

	return routingServiceBusQueueEndpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutingServiceBusQueueEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutingServiceBusQueueEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationType"] = gen.PtrOf(gen.OneConstOf(RoutingServiceBusQueueEndpointProperties_AuthenticationType_STATUS_ARM_IdentityBased, RoutingServiceBusQueueEndpointProperties_AuthenticationType_STATUS_ARM_KeyBased))
	gens["EndpointUri"] = gen.PtrOf(gen.AlphaString())
	gens["EntityPath"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoutingServiceBusQueueEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoutingServiceBusQueueEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_STATUS_ARMGenerator())
}

func Test_RoutingServiceBusTopicEndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutingServiceBusTopicEndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutingServiceBusTopicEndpointProperties_STATUS_ARM, RoutingServiceBusTopicEndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutingServiceBusTopicEndpointProperties_STATUS_ARM runs a test to see if a specific instance of RoutingServiceBusTopicEndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutingServiceBusTopicEndpointProperties_STATUS_ARM(subject RoutingServiceBusTopicEndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutingServiceBusTopicEndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutingServiceBusTopicEndpointProperties_STATUS_ARM instances for property testing - lazily instantiated
// by RoutingServiceBusTopicEndpointProperties_STATUS_ARMGenerator()
var routingServiceBusTopicEndpointProperties_STATUS_ARMGenerator gopter.Gen

// RoutingServiceBusTopicEndpointProperties_STATUS_ARMGenerator returns a generator of RoutingServiceBusTopicEndpointProperties_STATUS_ARM instances for property testing.
// We first initialize routingServiceBusTopicEndpointProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoutingServiceBusTopicEndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if routingServiceBusTopicEndpointProperties_STATUS_ARMGenerator != nil {
		return routingServiceBusTopicEndpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingServiceBusTopicEndpointProperties_STATUS_ARM(generators)
	routingServiceBusTopicEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingServiceBusTopicEndpointProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingServiceBusTopicEndpointProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRoutingServiceBusTopicEndpointProperties_STATUS_ARM(generators)
	routingServiceBusTopicEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingServiceBusTopicEndpointProperties_STATUS_ARM{}), generators)

	return routingServiceBusTopicEndpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutingServiceBusTopicEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutingServiceBusTopicEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationType"] = gen.PtrOf(gen.OneConstOf(RoutingServiceBusTopicEndpointProperties_AuthenticationType_STATUS_ARM_IdentityBased, RoutingServiceBusTopicEndpointProperties_AuthenticationType_STATUS_ARM_KeyBased))
	gens["EndpointUri"] = gen.PtrOf(gen.AlphaString())
	gens["EntityPath"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoutingServiceBusTopicEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoutingServiceBusTopicEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_STATUS_ARMGenerator())
}

func Test_RoutingStorageContainerProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutingStorageContainerProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutingStorageContainerProperties_STATUS_ARM, RoutingStorageContainerProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutingStorageContainerProperties_STATUS_ARM runs a test to see if a specific instance of RoutingStorageContainerProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutingStorageContainerProperties_STATUS_ARM(subject RoutingStorageContainerProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutingStorageContainerProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutingStorageContainerProperties_STATUS_ARM instances for property testing - lazily instantiated by
// RoutingStorageContainerProperties_STATUS_ARMGenerator()
var routingStorageContainerProperties_STATUS_ARMGenerator gopter.Gen

// RoutingStorageContainerProperties_STATUS_ARMGenerator returns a generator of RoutingStorageContainerProperties_STATUS_ARM instances for property testing.
// We first initialize routingStorageContainerProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoutingStorageContainerProperties_STATUS_ARMGenerator() gopter.Gen {
	if routingStorageContainerProperties_STATUS_ARMGenerator != nil {
		return routingStorageContainerProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingStorageContainerProperties_STATUS_ARM(generators)
	routingStorageContainerProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingStorageContainerProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingStorageContainerProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRoutingStorageContainerProperties_STATUS_ARM(generators)
	routingStorageContainerProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingStorageContainerProperties_STATUS_ARM{}), generators)

	return routingStorageContainerProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutingStorageContainerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutingStorageContainerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationType"] = gen.PtrOf(gen.OneConstOf(RoutingStorageContainerProperties_AuthenticationType_STATUS_ARM_IdentityBased, RoutingStorageContainerProperties_AuthenticationType_STATUS_ARM_KeyBased))
	gens["BatchFrequencyInSeconds"] = gen.PtrOf(gen.Int())
	gens["ContainerName"] = gen.PtrOf(gen.AlphaString())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(RoutingStorageContainerProperties_Encoding_STATUS_ARM_Avro, RoutingStorageContainerProperties_Encoding_STATUS_ARM_AvroDeflate, RoutingStorageContainerProperties_Encoding_STATUS_ARM_JSON))
	gens["EndpointUri"] = gen.PtrOf(gen.AlphaString())
	gens["FileNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["MaxChunkSizeInBytes"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoutingStorageContainerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoutingStorageContainerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_STATUS_ARMGenerator())
}

func Test_SharedAccessSignatureAuthorizationRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedAccessSignatureAuthorizationRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedAccessSignatureAuthorizationRule_STATUS_ARM, SharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedAccessSignatureAuthorizationRule_STATUS_ARM runs a test to see if a specific instance of SharedAccessSignatureAuthorizationRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedAccessSignatureAuthorizationRule_STATUS_ARM(subject SharedAccessSignatureAuthorizationRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedAccessSignatureAuthorizationRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedAccessSignatureAuthorizationRule_STATUS_ARM instances for property testing - lazily instantiated
// by SharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator()
var sharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator gopter.Gen

// SharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator returns a generator of SharedAccessSignatureAuthorizationRule_STATUS_ARM instances for property testing.
func SharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator() gopter.Gen {
	if sharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator != nil {
		return sharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedAccessSignatureAuthorizationRule_STATUS_ARM(generators)
	sharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SharedAccessSignatureAuthorizationRule_STATUS_ARM{}), generators)

	return sharedAccessSignatureAuthorizationRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedAccessSignatureAuthorizationRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedAccessSignatureAuthorizationRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KeyName"] = gen.PtrOf(gen.AlphaString())
	gens["Rights"] = gen.PtrOf(gen.OneConstOf(
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_DeviceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryRead,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryReadDeviceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryReadRegistryWrite,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryReadRegistryWriteDeviceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryReadRegistryWriteServiceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryReadRegistryWriteServiceConnectDeviceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryReadServiceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryReadServiceConnectDeviceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryWrite,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryWriteDeviceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryWriteServiceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_RegistryWriteServiceConnectDeviceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_ServiceConnect,
		SharedAccessSignatureAuthorizationRule_Rights_STATUS_ARM_ServiceConnectDeviceConnect))
}

func Test_StorageEndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageEndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageEndpointProperties_STATUS_ARM, StorageEndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageEndpointProperties_STATUS_ARM runs a test to see if a specific instance of StorageEndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageEndpointProperties_STATUS_ARM(subject StorageEndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageEndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageEndpointProperties_STATUS_ARM instances for property testing - lazily instantiated by
// StorageEndpointProperties_STATUS_ARMGenerator()
var storageEndpointProperties_STATUS_ARMGenerator gopter.Gen

// StorageEndpointProperties_STATUS_ARMGenerator returns a generator of StorageEndpointProperties_STATUS_ARM instances for property testing.
// We first initialize storageEndpointProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageEndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if storageEndpointProperties_STATUS_ARMGenerator != nil {
		return storageEndpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageEndpointProperties_STATUS_ARM(generators)
	storageEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageEndpointProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageEndpointProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForStorageEndpointProperties_STATUS_ARM(generators)
	storageEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageEndpointProperties_STATUS_ARM{}), generators)

	return storageEndpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationType"] = gen.PtrOf(gen.OneConstOf(StorageEndpointProperties_AuthenticationType_STATUS_ARM_IdentityBased, StorageEndpointProperties_AuthenticationType_STATUS_ARM_KeyBased))
	gens["ContainerName"] = gen.PtrOf(gen.AlphaString())
	gens["SasTtlAsIso8601"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForStorageEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_STATUS_ARMGenerator())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_ARM_Application,
		SystemData_CreatedByType_STATUS_ARM_Key,
		SystemData_CreatedByType_STATUS_ARM_ManagedIdentity,
		SystemData_CreatedByType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_ARM_Application,
		SystemData_LastModifiedByType_STATUS_ARM_Key,
		SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_ARM_User))
}
