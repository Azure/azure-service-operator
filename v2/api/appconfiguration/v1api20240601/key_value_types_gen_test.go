// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240601

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/appconfiguration/v1api20240601/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_KeyValue_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from KeyValue to hub returns original",
		prop.ForAll(RunResourceConversionTestForKeyValue, KeyValueGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForKeyValue tests if a specific instance of KeyValue round trips to the hub storage version and back losslessly
func RunResourceConversionTestForKeyValue(subject KeyValue) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.KeyValue
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual KeyValue
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_KeyValue_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from KeyValue to KeyValue via AssignProperties_To_KeyValue & AssignProperties_From_KeyValue returns original",
		prop.ForAll(RunPropertyAssignmentTestForKeyValue, KeyValueGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForKeyValue tests if a specific instance of KeyValue can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForKeyValue(subject KeyValue) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.KeyValue
	err := copied.AssignProperties_To_KeyValue(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual KeyValue
	err = actual.AssignProperties_From_KeyValue(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_KeyValue_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyValue via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyValue, KeyValueGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyValue runs a test to see if a specific instance of KeyValue round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyValue(subject KeyValue) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyValue
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyValue instances for property testing - lazily instantiated by KeyValueGenerator()
var keyValueGenerator gopter.Gen

// KeyValueGenerator returns a generator of KeyValue instances for property testing.
func KeyValueGenerator() gopter.Gen {
	if keyValueGenerator != nil {
		return keyValueGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForKeyValue(generators)
	keyValueGenerator = gen.Struct(reflect.TypeOf(KeyValue{}), generators)

	return keyValueGenerator
}

// AddRelatedPropertyGeneratorsForKeyValue is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyValue(gens map[string]gopter.Gen) {
	gens["Spec"] = KeyValue_SpecGenerator()
	gens["Status"] = KeyValue_STATUSGenerator()
}

func Test_KeyValueOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from KeyValueOperatorSpec to KeyValueOperatorSpec via AssignProperties_To_KeyValueOperatorSpec & AssignProperties_From_KeyValueOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForKeyValueOperatorSpec, KeyValueOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForKeyValueOperatorSpec tests if a specific instance of KeyValueOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForKeyValueOperatorSpec(subject KeyValueOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.KeyValueOperatorSpec
	err := copied.AssignProperties_To_KeyValueOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual KeyValueOperatorSpec
	err = actual.AssignProperties_From_KeyValueOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_KeyValueOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyValueOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyValueOperatorSpec, KeyValueOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyValueOperatorSpec runs a test to see if a specific instance of KeyValueOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyValueOperatorSpec(subject KeyValueOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyValueOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyValueOperatorSpec instances for property testing - lazily instantiated by
// KeyValueOperatorSpecGenerator()
var keyValueOperatorSpecGenerator gopter.Gen

// KeyValueOperatorSpecGenerator returns a generator of KeyValueOperatorSpec instances for property testing.
func KeyValueOperatorSpecGenerator() gopter.Gen {
	if keyValueOperatorSpecGenerator != nil {
		return keyValueOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	keyValueOperatorSpecGenerator = gen.Struct(reflect.TypeOf(KeyValueOperatorSpec{}), generators)

	return keyValueOperatorSpecGenerator
}

func Test_KeyValue_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from KeyValue_STATUS to KeyValue_STATUS via AssignProperties_To_KeyValue_STATUS & AssignProperties_From_KeyValue_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForKeyValue_STATUS, KeyValue_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForKeyValue_STATUS tests if a specific instance of KeyValue_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForKeyValue_STATUS(subject KeyValue_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.KeyValue_STATUS
	err := copied.AssignProperties_To_KeyValue_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual KeyValue_STATUS
	err = actual.AssignProperties_From_KeyValue_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_KeyValue_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyValue_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyValue_STATUS, KeyValue_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyValue_STATUS runs a test to see if a specific instance of KeyValue_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyValue_STATUS(subject KeyValue_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyValue_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyValue_STATUS instances for property testing - lazily instantiated by KeyValue_STATUSGenerator()
var keyValue_STATUSGenerator gopter.Gen

// KeyValue_STATUSGenerator returns a generator of KeyValue_STATUS instances for property testing.
func KeyValue_STATUSGenerator() gopter.Gen {
	if keyValue_STATUSGenerator != nil {
		return keyValue_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyValue_STATUS(generators)
	keyValue_STATUSGenerator = gen.Struct(reflect.TypeOf(KeyValue_STATUS{}), generators)

	return keyValue_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForKeyValue_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyValue_STATUS(gens map[string]gopter.Gen) {
	gens["ContentType"] = gen.PtrOf(gen.AlphaString())
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Label"] = gen.PtrOf(gen.AlphaString())
	gens["LastModified"] = gen.PtrOf(gen.AlphaString())
	gens["Locked"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_KeyValue_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from KeyValue_Spec to KeyValue_Spec via AssignProperties_To_KeyValue_Spec & AssignProperties_From_KeyValue_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForKeyValue_Spec, KeyValue_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForKeyValue_Spec tests if a specific instance of KeyValue_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForKeyValue_Spec(subject KeyValue_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.KeyValue_Spec
	err := copied.AssignProperties_To_KeyValue_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual KeyValue_Spec
	err = actual.AssignProperties_From_KeyValue_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_KeyValue_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyValue_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyValue_Spec, KeyValue_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyValue_Spec runs a test to see if a specific instance of KeyValue_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyValue_Spec(subject KeyValue_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyValue_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyValue_Spec instances for property testing - lazily instantiated by KeyValue_SpecGenerator()
var keyValue_SpecGenerator gopter.Gen

// KeyValue_SpecGenerator returns a generator of KeyValue_Spec instances for property testing.
// We first initialize keyValue_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyValue_SpecGenerator() gopter.Gen {
	if keyValue_SpecGenerator != nil {
		return keyValue_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyValue_Spec(generators)
	keyValue_SpecGenerator = gen.Struct(reflect.TypeOf(KeyValue_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyValue_Spec(generators)
	AddRelatedPropertyGeneratorsForKeyValue_Spec(generators)
	keyValue_SpecGenerator = gen.Struct(reflect.TypeOf(KeyValue_Spec{}), generators)

	return keyValue_SpecGenerator
}

// AddIndependentPropertyGeneratorsForKeyValue_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyValue_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["ContentType"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKeyValue_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyValue_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(KeyValueOperatorSpecGenerator())
}
