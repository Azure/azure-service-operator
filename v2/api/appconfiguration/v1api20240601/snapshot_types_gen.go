// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240601

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/appconfiguration/v1api20240601/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/appconfiguration/v1api20240601/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,appconfiguration}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /appconfiguration/resource-manager/Microsoft.AppConfiguration/AppConfiguration/stable/2024-06-01/appconfiguration.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/snapshots/{snapshotName}
type Snapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Snapshot_Spec   `json:"spec,omitempty"`
	Status            Snapshot_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Snapshot{}

// GetConditions returns the conditions of the resource
func (snapshot *Snapshot) GetConditions() conditions.Conditions {
	return snapshot.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (snapshot *Snapshot) SetConditions(conditions conditions.Conditions) {
	snapshot.Status.Conditions = conditions
}

var _ conversion.Convertible = &Snapshot{}

// ConvertFrom populates our Snapshot from the provided hub Snapshot
func (snapshot *Snapshot) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.Snapshot)
	if !ok {
		return fmt.Errorf("expected appconfiguration/v1api20240601/storage/Snapshot but received %T instead", hub)
	}

	return snapshot.AssignProperties_From_Snapshot(source)
}

// ConvertTo populates the provided hub Snapshot from our Snapshot
func (snapshot *Snapshot) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.Snapshot)
	if !ok {
		return fmt.Errorf("expected appconfiguration/v1api20240601/storage/Snapshot but received %T instead", hub)
	}

	return snapshot.AssignProperties_To_Snapshot(destination)
}

var _ configmaps.Exporter = &Snapshot{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (snapshot *Snapshot) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if snapshot.Spec.OperatorSpec == nil {
		return nil
	}
	return snapshot.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &Snapshot{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (snapshot *Snapshot) SecretDestinationExpressions() []*core.DestinationExpression {
	if snapshot.Spec.OperatorSpec == nil {
		return nil
	}
	return snapshot.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &Snapshot{}

// InitializeSpec initializes the spec for this resource from the given status
func (snapshot *Snapshot) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*Snapshot_STATUS); ok {
		return snapshot.Spec.Initialize_From_Snapshot_STATUS(s)
	}

	return fmt.Errorf("expected Status of type Snapshot_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &Snapshot{}

// AzureName returns the Azure name of the resource
func (snapshot *Snapshot) AzureName() string {
	return snapshot.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-06-01"
func (snapshot Snapshot) GetAPIVersion() string {
	return "2024-06-01"
}

// GetResourceScope returns the scope of the resource
func (snapshot *Snapshot) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (snapshot *Snapshot) GetSpec() genruntime.ConvertibleSpec {
	return &snapshot.Spec
}

// GetStatus returns the status of this resource
func (snapshot *Snapshot) GetStatus() genruntime.ConvertibleStatus {
	return &snapshot.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (snapshot *Snapshot) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.AppConfiguration/configurationStores/snapshots"
func (snapshot *Snapshot) GetType() string {
	return "Microsoft.AppConfiguration/configurationStores/snapshots"
}

// NewEmptyStatus returns a new empty (blank) status
func (snapshot *Snapshot) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Snapshot_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (snapshot *Snapshot) Owner() *genruntime.ResourceReference {
	if snapshot.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(snapshot.Spec)
	return snapshot.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (snapshot *Snapshot) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Snapshot_STATUS); ok {
		snapshot.Status = *st
		return nil
	}

	// Convert status to required version
	var st Snapshot_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	snapshot.Status = st
	return nil
}

// AssignProperties_From_Snapshot populates our Snapshot from the provided source Snapshot
func (snapshot *Snapshot) AssignProperties_From_Snapshot(source *storage.Snapshot) error {

	// ObjectMeta
	snapshot.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Snapshot_Spec
	err := spec.AssignProperties_From_Snapshot_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_Snapshot_Spec() to populate field Spec")
	}
	snapshot.Spec = spec

	// Status
	var status Snapshot_STATUS
	err = status.AssignProperties_From_Snapshot_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_Snapshot_STATUS() to populate field Status")
	}
	snapshot.Status = status

	// No error
	return nil
}

// AssignProperties_To_Snapshot populates the provided destination Snapshot from our Snapshot
func (snapshot *Snapshot) AssignProperties_To_Snapshot(destination *storage.Snapshot) error {

	// ObjectMeta
	destination.ObjectMeta = *snapshot.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.Snapshot_Spec
	err := snapshot.Spec.AssignProperties_To_Snapshot_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_Snapshot_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.Snapshot_STATUS
	err = snapshot.Status.AssignProperties_To_Snapshot_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_Snapshot_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (snapshot *Snapshot) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: snapshot.Spec.OriginalVersion(),
		Kind:    "Snapshot",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /appconfiguration/resource-manager/Microsoft.AppConfiguration/AppConfiguration/stable/2024-06-01/appconfiguration.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/snapshots/{snapshotName}
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Snapshot `json:"items"`
}

type Snapshot_Spec struct {
	// +kubebuilder:validation:Pattern="^[^\\x00-\\x1F\\x7F]+$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// CompositionType: The composition type describes how the key-values within the snapshot are composed. The 'key'
	// composition type ensures there are no two key-values containing the same key. The 'key_label' composition type ensures
	// there are no two key-values containing the same key and label.
	CompositionType *SnapshotProperties_CompositionType `json:"compositionType,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxItems=3
	// +kubebuilder:validation:MinItems=1
	// Filters: A list of filters used to filter the key-values included in the snapshot.
	Filters []KeyValueFilter `json:"filters,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *SnapshotOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a appconfiguration.azure.com/ConfigurationStore resource
	Owner *genruntime.KnownResourceReference `group:"appconfiguration.azure.com" json:"owner,omitempty" kind:"ConfigurationStore"`

	// +kubebuilder:validation:Maximum=7776000
	// +kubebuilder:validation:Minimum=3600
	// RetentionPeriod: The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This
	// property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value
	// revisions will be used.
	RetentionPeriod *int `json:"retentionPeriod,omitempty"`

	// Tags: The tags of the snapshot. NOTE: These are data plane tags, not Azure Resource Manager (ARM) tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &Snapshot_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (snapshot *Snapshot_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if snapshot == nil {
		return nil, nil
	}
	result := &arm.Snapshot_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if snapshot.CompositionType != nil ||
		snapshot.Filters != nil ||
		snapshot.RetentionPeriod != nil ||
		snapshot.Tags != nil {
		result.Properties = &arm.SnapshotProperties{}
	}
	if snapshot.CompositionType != nil {
		var temp string
		temp = string(*snapshot.CompositionType)
		compositionType := arm.SnapshotProperties_CompositionType(temp)
		result.Properties.CompositionType = &compositionType
	}
	for _, item := range snapshot.Filters {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Filters = append(result.Properties.Filters, *item_ARM.(*arm.KeyValueFilter))
	}
	if snapshot.RetentionPeriod != nil {
		retentionPeriod := *snapshot.RetentionPeriod
		result.Properties.RetentionPeriod = &retentionPeriod
	}
	if snapshot.Tags != nil {
		result.Properties.Tags = make(map[string]string, len(snapshot.Tags))
		for key, value := range snapshot.Tags {
			result.Properties.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (snapshot *Snapshot_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Snapshot_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (snapshot *Snapshot_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Snapshot_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Snapshot_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	snapshot.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "CompositionType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CompositionType != nil {
			var temp string
			temp = string(*typedInput.Properties.CompositionType)
			compositionType := SnapshotProperties_CompositionType(temp)
			snapshot.CompositionType = &compositionType
		}
	}

	// Set property "Filters":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Filters {
			var item1 KeyValueFilter
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			snapshot.Filters = append(snapshot.Filters, item1)
		}
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	snapshot.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "RetentionPeriod":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionPeriod != nil {
			retentionPeriod := *typedInput.Properties.RetentionPeriod
			snapshot.RetentionPeriod = &retentionPeriod
		}
	}

	// Set property "Tags":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			snapshot.Tags = make(map[string]string, len(typedInput.Properties.Tags))
			for key, value := range typedInput.Properties.Tags {
				snapshot.Tags[key] = value
			}
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Snapshot_Spec{}

// ConvertSpecFrom populates our Snapshot_Spec from the provided source
func (snapshot *Snapshot_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.Snapshot_Spec)
	if ok {
		// Populate our instance from source
		return snapshot.AssignProperties_From_Snapshot_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.Snapshot_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = snapshot.AssignProperties_From_Snapshot_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Snapshot_Spec
func (snapshot *Snapshot_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.Snapshot_Spec)
	if ok {
		// Populate destination from our instance
		return snapshot.AssignProperties_To_Snapshot_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Snapshot_Spec{}
	err := snapshot.AssignProperties_To_Snapshot_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Snapshot_Spec populates our Snapshot_Spec from the provided source Snapshot_Spec
func (snapshot *Snapshot_Spec) AssignProperties_From_Snapshot_Spec(source *storage.Snapshot_Spec) error {

	// AzureName
	snapshot.AzureName = source.AzureName

	// CompositionType
	if source.CompositionType != nil {
		compositionType := *source.CompositionType
		compositionTypeTemp := genruntime.ToEnum(compositionType, snapshotProperties_CompositionType_Values)
		snapshot.CompositionType = &compositionTypeTemp
	} else {
		snapshot.CompositionType = nil
	}

	// Filters
	if source.Filters != nil {
		filterList := make([]KeyValueFilter, len(source.Filters))
		for filterIndex, filterItem := range source.Filters {
			// Shadow the loop variable to avoid aliasing
			filterItem := filterItem
			var filter KeyValueFilter
			err := filter.AssignProperties_From_KeyValueFilter(&filterItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_KeyValueFilter() to populate field Filters")
			}
			filterList[filterIndex] = filter
		}
		snapshot.Filters = filterList
	} else {
		snapshot.Filters = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec SnapshotOperatorSpec
		err := operatorSpec.AssignProperties_From_SnapshotOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SnapshotOperatorSpec() to populate field OperatorSpec")
		}
		snapshot.OperatorSpec = &operatorSpec
	} else {
		snapshot.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		snapshot.Owner = &owner
	} else {
		snapshot.Owner = nil
	}

	// RetentionPeriod
	snapshot.RetentionPeriod = genruntime.ClonePointerToInt(source.RetentionPeriod)

	// Tags
	snapshot.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_Snapshot_Spec populates the provided destination Snapshot_Spec from our Snapshot_Spec
func (snapshot *Snapshot_Spec) AssignProperties_To_Snapshot_Spec(destination *storage.Snapshot_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = snapshot.AzureName

	// CompositionType
	if snapshot.CompositionType != nil {
		compositionType := string(*snapshot.CompositionType)
		destination.CompositionType = &compositionType
	} else {
		destination.CompositionType = nil
	}

	// Filters
	if snapshot.Filters != nil {
		filterList := make([]storage.KeyValueFilter, len(snapshot.Filters))
		for filterIndex, filterItem := range snapshot.Filters {
			// Shadow the loop variable to avoid aliasing
			filterItem := filterItem
			var filter storage.KeyValueFilter
			err := filterItem.AssignProperties_To_KeyValueFilter(&filter)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_KeyValueFilter() to populate field Filters")
			}
			filterList[filterIndex] = filter
		}
		destination.Filters = filterList
	} else {
		destination.Filters = nil
	}

	// OperatorSpec
	if snapshot.OperatorSpec != nil {
		var operatorSpec storage.SnapshotOperatorSpec
		err := snapshot.OperatorSpec.AssignProperties_To_SnapshotOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SnapshotOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = snapshot.OriginalVersion()

	// Owner
	if snapshot.Owner != nil {
		owner := snapshot.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RetentionPeriod
	destination.RetentionPeriod = genruntime.ClonePointerToInt(snapshot.RetentionPeriod)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(snapshot.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Snapshot_STATUS populates our Snapshot_Spec from the provided source Snapshot_STATUS
func (snapshot *Snapshot_Spec) Initialize_From_Snapshot_STATUS(source *Snapshot_STATUS) error {

	// CompositionType
	if source.CompositionType != nil {
		compositionType := genruntime.ToEnum(string(*source.CompositionType), snapshotProperties_CompositionType_Values)
		snapshot.CompositionType = &compositionType
	} else {
		snapshot.CompositionType = nil
	}

	// Filters
	if source.Filters != nil {
		filterList := make([]KeyValueFilter, len(source.Filters))
		for filterIndex, filterItem := range source.Filters {
			// Shadow the loop variable to avoid aliasing
			filterItem := filterItem
			var filter KeyValueFilter
			err := filter.Initialize_From_KeyValueFilter_STATUS(&filterItem)
			if err != nil {
				return eris.Wrap(err, "calling Initialize_From_KeyValueFilter_STATUS() to populate field Filters")
			}
			filterList[filterIndex] = filter
		}
		snapshot.Filters = filterList
	} else {
		snapshot.Filters = nil
	}

	// RetentionPeriod
	snapshot.RetentionPeriod = genruntime.ClonePointerToInt(source.RetentionPeriod)

	// Tags
	snapshot.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (snapshot *Snapshot_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (snapshot *Snapshot_Spec) SetAzureName(azureName string) { snapshot.AzureName = azureName }

type Snapshot_STATUS struct {
	// CompositionType: The composition type describes how the key-values within the snapshot are composed. The 'key'
	// composition type ensures there are no two key-values containing the same key. The 'key_label' composition type ensures
	// there are no two key-values containing the same key and label.
	CompositionType *SnapshotProperties_CompositionType_STATUS `json:"compositionType,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Created: The time that the snapshot was created.
	Created *string `json:"created,omitempty"`

	// Etag: A value representing the current state of the snapshot.
	Etag *string `json:"etag,omitempty"`

	// Expires: The time that the snapshot will expire.
	Expires *string `json:"expires,omitempty"`

	// Filters: A list of filters used to filter the key-values included in the snapshot.
	Filters []KeyValueFilter_STATUS `json:"filters,omitempty"`

	// Id: The resource ID.
	Id *string `json:"id,omitempty"`

	// ItemsCount: The amount of key-values in the snapshot.
	ItemsCount *int `json:"itemsCount,omitempty"`

	// Name: The name of the snapshot.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the snapshot.
	ProvisioningState *SnapshotProperties_ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// RetentionPeriod: The amount of time, in seconds, that a snapshot will remain in the archived state before expiring. This
	// property is only writable during the creation of a snapshot. If not specified, the default lifetime of key-value
	// revisions will be used.
	RetentionPeriod *int `json:"retentionPeriod,omitempty"`

	// Size: The size in bytes of the snapshot.
	Size *int `json:"size,omitempty"`

	// Status: The current status of the snapshot.
	Status *SnapshotProperties_Status_STATUS `json:"status,omitempty"`

	// Tags: The tags of the snapshot. NOTE: These are data plane tags, not Azure Resource Manager (ARM) tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Snapshot_STATUS{}

// ConvertStatusFrom populates our Snapshot_STATUS from the provided source
func (snapshot *Snapshot_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.Snapshot_STATUS)
	if ok {
		// Populate our instance from source
		return snapshot.AssignProperties_From_Snapshot_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.Snapshot_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = snapshot.AssignProperties_From_Snapshot_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Snapshot_STATUS
func (snapshot *Snapshot_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.Snapshot_STATUS)
	if ok {
		// Populate destination from our instance
		return snapshot.AssignProperties_To_Snapshot_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Snapshot_STATUS{}
	err := snapshot.AssignProperties_To_Snapshot_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Snapshot_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (snapshot *Snapshot_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Snapshot_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (snapshot *Snapshot_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Snapshot_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Snapshot_STATUS, got %T", armInput)
	}

	// Set property "CompositionType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CompositionType != nil {
			var temp string
			temp = string(*typedInput.Properties.CompositionType)
			compositionType := SnapshotProperties_CompositionType_STATUS(temp)
			snapshot.CompositionType = &compositionType
		}
	}

	// no assignment for property "Conditions"

	// Set property "Created":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Created != nil {
			created := *typedInput.Properties.Created
			snapshot.Created = &created
		}
	}

	// Set property "Etag":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Etag != nil {
			etag := *typedInput.Properties.Etag
			snapshot.Etag = &etag
		}
	}

	// Set property "Expires":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Expires != nil {
			expires := *typedInput.Properties.Expires
			snapshot.Expires = &expires
		}
	}

	// Set property "Filters":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Filters {
			var item1 KeyValueFilter_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			snapshot.Filters = append(snapshot.Filters, item1)
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		snapshot.Id = &id
	}

	// Set property "ItemsCount":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ItemsCount != nil {
			itemsCount := *typedInput.Properties.ItemsCount
			snapshot.ItemsCount = &itemsCount
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		snapshot.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			var temp string
			temp = string(*typedInput.Properties.ProvisioningState)
			provisioningState := SnapshotProperties_ProvisioningState_STATUS(temp)
			snapshot.ProvisioningState = &provisioningState
		}
	}

	// Set property "RetentionPeriod":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionPeriod != nil {
			retentionPeriod := *typedInput.Properties.RetentionPeriod
			snapshot.RetentionPeriod = &retentionPeriod
		}
	}

	// Set property "Size":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Size != nil {
			size := *typedInput.Properties.Size
			snapshot.Size = &size
		}
	}

	// Set property "Status":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			var temp string
			temp = string(*typedInput.Properties.Status)
			status := SnapshotProperties_Status_STATUS(temp)
			snapshot.Status = &status
		}
	}

	// Set property "Tags":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			snapshot.Tags = make(map[string]string, len(typedInput.Properties.Tags))
			for key, value := range typedInput.Properties.Tags {
				snapshot.Tags[key] = value
			}
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		snapshot.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Snapshot_STATUS populates our Snapshot_STATUS from the provided source Snapshot_STATUS
func (snapshot *Snapshot_STATUS) AssignProperties_From_Snapshot_STATUS(source *storage.Snapshot_STATUS) error {

	// CompositionType
	if source.CompositionType != nil {
		compositionType := *source.CompositionType
		compositionTypeTemp := genruntime.ToEnum(compositionType, snapshotProperties_CompositionType_STATUS_Values)
		snapshot.CompositionType = &compositionTypeTemp
	} else {
		snapshot.CompositionType = nil
	}

	// Conditions
	snapshot.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Created
	snapshot.Created = genruntime.ClonePointerToString(source.Created)

	// Etag
	snapshot.Etag = genruntime.ClonePointerToString(source.Etag)

	// Expires
	snapshot.Expires = genruntime.ClonePointerToString(source.Expires)

	// Filters
	if source.Filters != nil {
		filterList := make([]KeyValueFilter_STATUS, len(source.Filters))
		for filterIndex, filterItem := range source.Filters {
			// Shadow the loop variable to avoid aliasing
			filterItem := filterItem
			var filter KeyValueFilter_STATUS
			err := filter.AssignProperties_From_KeyValueFilter_STATUS(&filterItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_KeyValueFilter_STATUS() to populate field Filters")
			}
			filterList[filterIndex] = filter
		}
		snapshot.Filters = filterList
	} else {
		snapshot.Filters = nil
	}

	// Id
	snapshot.Id = genruntime.ClonePointerToString(source.Id)

	// ItemsCount
	snapshot.ItemsCount = genruntime.ClonePointerToInt(source.ItemsCount)

	// Name
	snapshot.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, snapshotProperties_ProvisioningState_STATUS_Values)
		snapshot.ProvisioningState = &provisioningStateTemp
	} else {
		snapshot.ProvisioningState = nil
	}

	// RetentionPeriod
	snapshot.RetentionPeriod = genruntime.ClonePointerToInt(source.RetentionPeriod)

	// Size
	snapshot.Size = genruntime.ClonePointerToInt(source.Size)

	// Status
	if source.Status != nil {
		status := *source.Status
		statusTemp := genruntime.ToEnum(status, snapshotProperties_Status_STATUS_Values)
		snapshot.Status = &statusTemp
	} else {
		snapshot.Status = nil
	}

	// Tags
	snapshot.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	snapshot.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Snapshot_STATUS populates the provided destination Snapshot_STATUS from our Snapshot_STATUS
func (snapshot *Snapshot_STATUS) AssignProperties_To_Snapshot_STATUS(destination *storage.Snapshot_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CompositionType
	if snapshot.CompositionType != nil {
		compositionType := string(*snapshot.CompositionType)
		destination.CompositionType = &compositionType
	} else {
		destination.CompositionType = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(snapshot.Conditions)

	// Created
	destination.Created = genruntime.ClonePointerToString(snapshot.Created)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(snapshot.Etag)

	// Expires
	destination.Expires = genruntime.ClonePointerToString(snapshot.Expires)

	// Filters
	if snapshot.Filters != nil {
		filterList := make([]storage.KeyValueFilter_STATUS, len(snapshot.Filters))
		for filterIndex, filterItem := range snapshot.Filters {
			// Shadow the loop variable to avoid aliasing
			filterItem := filterItem
			var filter storage.KeyValueFilter_STATUS
			err := filterItem.AssignProperties_To_KeyValueFilter_STATUS(&filter)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_KeyValueFilter_STATUS() to populate field Filters")
			}
			filterList[filterIndex] = filter
		}
		destination.Filters = filterList
	} else {
		destination.Filters = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(snapshot.Id)

	// ItemsCount
	destination.ItemsCount = genruntime.ClonePointerToInt(snapshot.ItemsCount)

	// Name
	destination.Name = genruntime.ClonePointerToString(snapshot.Name)

	// ProvisioningState
	if snapshot.ProvisioningState != nil {
		provisioningState := string(*snapshot.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RetentionPeriod
	destination.RetentionPeriod = genruntime.ClonePointerToInt(snapshot.RetentionPeriod)

	// Size
	destination.Size = genruntime.ClonePointerToInt(snapshot.Size)

	// Status
	if snapshot.Status != nil {
		status := string(*snapshot.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(snapshot.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(snapshot.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Enables filtering of key-values.
type KeyValueFilter struct {
	// +kubebuilder:validation:Required
	// Key: Filters key-values by their key field.
	Key *string `json:"key,omitempty"`

	// Label: Filters key-values by their label field.
	Label *string `json:"label,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyValueFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *KeyValueFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	result := &arm.KeyValueFilter{}

	// Set property "Key":
	if filter.Key != nil {
		key := *filter.Key
		result.Key = &key
	}

	// Set property "Label":
	if filter.Label != nil {
		label := *filter.Label
		result.Label = &label
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *KeyValueFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.KeyValueFilter{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *KeyValueFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.KeyValueFilter)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.KeyValueFilter, got %T", armInput)
	}

	// Set property "Key":
	if typedInput.Key != nil {
		key := *typedInput.Key
		filter.Key = &key
	}

	// Set property "Label":
	if typedInput.Label != nil {
		label := *typedInput.Label
		filter.Label = &label
	}

	// No error
	return nil
}

// AssignProperties_From_KeyValueFilter populates our KeyValueFilter from the provided source KeyValueFilter
func (filter *KeyValueFilter) AssignProperties_From_KeyValueFilter(source *storage.KeyValueFilter) error {

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// Label
	filter.Label = genruntime.ClonePointerToString(source.Label)

	// No error
	return nil
}

// AssignProperties_To_KeyValueFilter populates the provided destination KeyValueFilter from our KeyValueFilter
func (filter *KeyValueFilter) AssignProperties_To_KeyValueFilter(destination *storage.KeyValueFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// Label
	destination.Label = genruntime.ClonePointerToString(filter.Label)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_KeyValueFilter_STATUS populates our KeyValueFilter from the provided source KeyValueFilter_STATUS
func (filter *KeyValueFilter) Initialize_From_KeyValueFilter_STATUS(source *KeyValueFilter_STATUS) error {

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// Label
	filter.Label = genruntime.ClonePointerToString(source.Label)

	// No error
	return nil
}

// Enables filtering of key-values.
type KeyValueFilter_STATUS struct {
	// +kubebuilder:validation:Required
	// Key: Filters key-values by their key field.
	Key *string `json:"key,omitempty"`

	// Label: Filters key-values by their label field.
	Label *string `json:"label,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyValueFilter_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *KeyValueFilter_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.KeyValueFilter_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *KeyValueFilter_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.KeyValueFilter_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.KeyValueFilter_STATUS, got %T", armInput)
	}

	// Set property "Key":
	if typedInput.Key != nil {
		key := *typedInput.Key
		filter.Key = &key
	}

	// Set property "Label":
	if typedInput.Label != nil {
		label := *typedInput.Label
		filter.Label = &label
	}

	// No error
	return nil
}

// AssignProperties_From_KeyValueFilter_STATUS populates our KeyValueFilter_STATUS from the provided source KeyValueFilter_STATUS
func (filter *KeyValueFilter_STATUS) AssignProperties_From_KeyValueFilter_STATUS(source *storage.KeyValueFilter_STATUS) error {

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// Label
	filter.Label = genruntime.ClonePointerToString(source.Label)

	// No error
	return nil
}

// AssignProperties_To_KeyValueFilter_STATUS populates the provided destination KeyValueFilter_STATUS from our KeyValueFilter_STATUS
func (filter *KeyValueFilter_STATUS) AssignProperties_To_KeyValueFilter_STATUS(destination *storage.KeyValueFilter_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// Label
	destination.Label = genruntime.ClonePointerToString(filter.Label)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type SnapshotOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_SnapshotOperatorSpec populates our SnapshotOperatorSpec from the provided source SnapshotOperatorSpec
func (operator *SnapshotOperatorSpec) AssignProperties_From_SnapshotOperatorSpec(source *storage.SnapshotOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SnapshotOperatorSpec populates the provided destination SnapshotOperatorSpec from our SnapshotOperatorSpec
func (operator *SnapshotOperatorSpec) AssignProperties_To_SnapshotOperatorSpec(destination *storage.SnapshotOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Key","Key_Label"}
type SnapshotProperties_CompositionType string

const (
	SnapshotProperties_CompositionType_Key       = SnapshotProperties_CompositionType("Key")
	SnapshotProperties_CompositionType_Key_Label = SnapshotProperties_CompositionType("Key_Label")
)

// Mapping from string to SnapshotProperties_CompositionType
var snapshotProperties_CompositionType_Values = map[string]SnapshotProperties_CompositionType{
	"key":       SnapshotProperties_CompositionType_Key,
	"key_label": SnapshotProperties_CompositionType_Key_Label,
}

type SnapshotProperties_CompositionType_STATUS string

const (
	SnapshotProperties_CompositionType_STATUS_Key       = SnapshotProperties_CompositionType_STATUS("Key")
	SnapshotProperties_CompositionType_STATUS_Key_Label = SnapshotProperties_CompositionType_STATUS("Key_Label")
)

// Mapping from string to SnapshotProperties_CompositionType_STATUS
var snapshotProperties_CompositionType_STATUS_Values = map[string]SnapshotProperties_CompositionType_STATUS{
	"key":       SnapshotProperties_CompositionType_STATUS_Key,
	"key_label": SnapshotProperties_CompositionType_STATUS_Key_Label,
}

type SnapshotProperties_ProvisioningState_STATUS string

const (
	SnapshotProperties_ProvisioningState_STATUS_Canceled  = SnapshotProperties_ProvisioningState_STATUS("Canceled")
	SnapshotProperties_ProvisioningState_STATUS_Creating  = SnapshotProperties_ProvisioningState_STATUS("Creating")
	SnapshotProperties_ProvisioningState_STATUS_Deleting  = SnapshotProperties_ProvisioningState_STATUS("Deleting")
	SnapshotProperties_ProvisioningState_STATUS_Failed    = SnapshotProperties_ProvisioningState_STATUS("Failed")
	SnapshotProperties_ProvisioningState_STATUS_Succeeded = SnapshotProperties_ProvisioningState_STATUS("Succeeded")
	SnapshotProperties_ProvisioningState_STATUS_Updating  = SnapshotProperties_ProvisioningState_STATUS("Updating")
)

// Mapping from string to SnapshotProperties_ProvisioningState_STATUS
var snapshotProperties_ProvisioningState_STATUS_Values = map[string]SnapshotProperties_ProvisioningState_STATUS{
	"canceled":  SnapshotProperties_ProvisioningState_STATUS_Canceled,
	"creating":  SnapshotProperties_ProvisioningState_STATUS_Creating,
	"deleting":  SnapshotProperties_ProvisioningState_STATUS_Deleting,
	"failed":    SnapshotProperties_ProvisioningState_STATUS_Failed,
	"succeeded": SnapshotProperties_ProvisioningState_STATUS_Succeeded,
	"updating":  SnapshotProperties_ProvisioningState_STATUS_Updating,
}

type SnapshotProperties_Status_STATUS string

const (
	SnapshotProperties_Status_STATUS_Archived     = SnapshotProperties_Status_STATUS("Archived")
	SnapshotProperties_Status_STATUS_Failed       = SnapshotProperties_Status_STATUS("Failed")
	SnapshotProperties_Status_STATUS_Provisioning = SnapshotProperties_Status_STATUS("Provisioning")
	SnapshotProperties_Status_STATUS_Ready        = SnapshotProperties_Status_STATUS("Ready")
)

// Mapping from string to SnapshotProperties_Status_STATUS
var snapshotProperties_Status_STATUS_Values = map[string]SnapshotProperties_Status_STATUS{
	"archived":     SnapshotProperties_Status_STATUS_Archived,
	"failed":       SnapshotProperties_Status_STATUS_Failed,
	"provisioning": SnapshotProperties_Status_STATUS_Provisioning,
	"ready":        SnapshotProperties_Status_STATUS_Ready,
}

func init() {
	SchemeBuilder.Register(&Snapshot{}, &SnapshotList{})
}
