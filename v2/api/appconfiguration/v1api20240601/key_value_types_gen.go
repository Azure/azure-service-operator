// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240601

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/appconfiguration/v1api20240601/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/appconfiguration/v1api20240601/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,appconfiguration}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /appconfiguration/resource-manager/Microsoft.AppConfiguration/AppConfiguration/stable/2024-06-01/appconfiguration.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}
type KeyValue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyValue_Spec   `json:"spec,omitempty"`
	Status            KeyValue_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &KeyValue{}

// GetConditions returns the conditions of the resource
func (value *KeyValue) GetConditions() conditions.Conditions {
	return value.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (value *KeyValue) SetConditions(conditions conditions.Conditions) {
	value.Status.Conditions = conditions
}

var _ conversion.Convertible = &KeyValue{}

// ConvertFrom populates our KeyValue from the provided hub KeyValue
func (value *KeyValue) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.KeyValue)
	if !ok {
		return fmt.Errorf("expected appconfiguration/v1api20240601/storage/KeyValue but received %T instead", hub)
	}

	return value.AssignProperties_From_KeyValue(source)
}

// ConvertTo populates the provided hub KeyValue from our KeyValue
func (value *KeyValue) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.KeyValue)
	if !ok {
		return fmt.Errorf("expected appconfiguration/v1api20240601/storage/KeyValue but received %T instead", hub)
	}

	return value.AssignProperties_To_KeyValue(destination)
}

var _ configmaps.Exporter = &KeyValue{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (value *KeyValue) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if value.Spec.OperatorSpec == nil {
		return nil
	}
	return value.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &KeyValue{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (value *KeyValue) SecretDestinationExpressions() []*core.DestinationExpression {
	if value.Spec.OperatorSpec == nil {
		return nil
	}
	return value.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &KeyValue{}

// InitializeSpec initializes the spec for this resource from the given status
func (value *KeyValue) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*KeyValue_STATUS); ok {
		return value.Spec.Initialize_From_KeyValue_STATUS(s)
	}

	return fmt.Errorf("expected Status of type KeyValue_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &KeyValue{}

// AzureName returns the Azure name of the resource
func (value *KeyValue) AzureName() string {
	return value.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-06-01"
func (value KeyValue) GetAPIVersion() string {
	return "2024-06-01"
}

// GetResourceScope returns the scope of the resource
func (value *KeyValue) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (value *KeyValue) GetSpec() genruntime.ConvertibleSpec {
	return &value.Spec
}

// GetStatus returns the status of this resource
func (value *KeyValue) GetStatus() genruntime.ConvertibleStatus {
	return &value.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (value *KeyValue) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.AppConfiguration/configurationStores/keyValues"
func (value *KeyValue) GetType() string {
	return "Microsoft.AppConfiguration/configurationStores/keyValues"
}

// NewEmptyStatus returns a new empty (blank) status
func (value *KeyValue) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &KeyValue_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (value *KeyValue) Owner() *genruntime.ResourceReference {
	if value.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(value.Spec)
	return value.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (value *KeyValue) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*KeyValue_STATUS); ok {
		value.Status = *st
		return nil
	}

	// Convert status to required version
	var st KeyValue_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	value.Status = st
	return nil
}

// AssignProperties_From_KeyValue populates our KeyValue from the provided source KeyValue
func (value *KeyValue) AssignProperties_From_KeyValue(source *storage.KeyValue) error {

	// ObjectMeta
	value.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec KeyValue_Spec
	err := spec.AssignProperties_From_KeyValue_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_KeyValue_Spec() to populate field Spec")
	}
	value.Spec = spec

	// Status
	var status KeyValue_STATUS
	err = status.AssignProperties_From_KeyValue_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_KeyValue_STATUS() to populate field Status")
	}
	value.Status = status

	// No error
	return nil
}

// AssignProperties_To_KeyValue populates the provided destination KeyValue from our KeyValue
func (value *KeyValue) AssignProperties_To_KeyValue(destination *storage.KeyValue) error {

	// ObjectMeta
	destination.ObjectMeta = *value.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.KeyValue_Spec
	err := value.Spec.AssignProperties_To_KeyValue_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_KeyValue_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.KeyValue_STATUS
	err = value.Status.AssignProperties_To_KeyValue_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_KeyValue_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (value *KeyValue) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: value.Spec.OriginalVersion(),
		Kind:    "KeyValue",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /appconfiguration/resource-manager/Microsoft.AppConfiguration/AppConfiguration/stable/2024-06-01/appconfiguration.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}
type KeyValueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyValue `json:"items"`
}

type KeyValue_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// ContentType: The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType *string `json:"contentType,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *KeyValueOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a appconfiguration.azure.com/ConfigurationStore resource
	Owner *genruntime.KnownResourceReference `group:"appconfiguration.azure.com" json:"owner,omitempty" kind:"ConfigurationStore"`

	// Tags: A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags map[string]string `json:"tags,omitempty"`

	// Value: The value of the key-value.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyValue_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (value *KeyValue_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if value == nil {
		return nil, nil
	}
	result := &arm.KeyValue_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if value.ContentType != nil ||
		value.Tags != nil ||
		value.Value != nil {
		result.Properties = &arm.KeyValueProperties{}
	}
	if value.ContentType != nil {
		contentType := *value.ContentType
		result.Properties.ContentType = &contentType
	}
	if value.Tags != nil {
		result.Properties.Tags = make(map[string]string, len(value.Tags))
		for key, tagsValue := range value.Tags {
			result.Properties.Tags[key] = tagsValue
		}
	}
	if value.Value != nil {
		value1 := *value.Value
		result.Properties.Value = &value1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (value *KeyValue_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.KeyValue_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (value *KeyValue_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.KeyValue_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.KeyValue_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	value.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "ContentType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContentType != nil {
			contentType := *typedInput.Properties.ContentType
			value.ContentType = &contentType
		}
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	value.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Tags":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			value.Tags = make(map[string]string, len(typedInput.Properties.Tags))
			for key, tagsValue := range typedInput.Properties.Tags {
				value.Tags[key] = tagsValue
			}
		}
	}

	// Set property "Value":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Value != nil {
			value1 := *typedInput.Properties.Value
			value.Value = &value1
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &KeyValue_Spec{}

// ConvertSpecFrom populates our KeyValue_Spec from the provided source
func (value *KeyValue_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.KeyValue_Spec)
	if ok {
		// Populate our instance from source
		return value.AssignProperties_From_KeyValue_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.KeyValue_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = value.AssignProperties_From_KeyValue_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our KeyValue_Spec
func (value *KeyValue_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.KeyValue_Spec)
	if ok {
		// Populate destination from our instance
		return value.AssignProperties_To_KeyValue_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.KeyValue_Spec{}
	err := value.AssignProperties_To_KeyValue_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_KeyValue_Spec populates our KeyValue_Spec from the provided source KeyValue_Spec
func (value *KeyValue_Spec) AssignProperties_From_KeyValue_Spec(source *storage.KeyValue_Spec) error {

	// AzureName
	value.AzureName = source.AzureName

	// ContentType
	value.ContentType = genruntime.ClonePointerToString(source.ContentType)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec KeyValueOperatorSpec
		err := operatorSpec.AssignProperties_From_KeyValueOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_KeyValueOperatorSpec() to populate field OperatorSpec")
		}
		value.OperatorSpec = &operatorSpec
	} else {
		value.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		value.Owner = &owner
	} else {
		value.Owner = nil
	}

	// Tags
	value.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Value
	value.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_KeyValue_Spec populates the provided destination KeyValue_Spec from our KeyValue_Spec
func (value *KeyValue_Spec) AssignProperties_To_KeyValue_Spec(destination *storage.KeyValue_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = value.AzureName

	// ContentType
	destination.ContentType = genruntime.ClonePointerToString(value.ContentType)

	// OperatorSpec
	if value.OperatorSpec != nil {
		var operatorSpec storage.KeyValueOperatorSpec
		err := value.OperatorSpec.AssignProperties_To_KeyValueOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_KeyValueOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = value.OriginalVersion()

	// Owner
	if value.Owner != nil {
		owner := value.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(value.Tags)

	// Value
	destination.Value = genruntime.ClonePointerToString(value.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_KeyValue_STATUS populates our KeyValue_Spec from the provided source KeyValue_STATUS
func (value *KeyValue_Spec) Initialize_From_KeyValue_STATUS(source *KeyValue_STATUS) error {

	// ContentType
	value.ContentType = genruntime.ClonePointerToString(source.ContentType)

	// Tags
	value.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Value
	value.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (value *KeyValue_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (value *KeyValue_Spec) SetAzureName(azureName string) { value.AzureName = azureName }

type KeyValue_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ContentType: The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType *string `json:"contentType,omitempty"`

	// ETag: An ETag indicating the state of a key-value within a configuration store.
	ETag *string `json:"eTag,omitempty"`

	// Id: The resource ID.
	Id *string `json:"id,omitempty"`

	// Key: The primary identifier of a key-value.
	// The key is used in unison with the label to uniquely identify a key-value.
	Key *string `json:"key,omitempty"`

	// Label: A value used to group key-values.
	// The label is used in unison with the key to uniquely identify a key-value.
	Label *string `json:"label,omitempty"`

	// LastModified: The last time a modifying operation was performed on the given key-value.
	LastModified *string `json:"lastModified,omitempty"`

	// Locked: A value indicating whether the key-value is locked.
	// A locked key-value may not be modified until it is unlocked.
	Locked *bool `json:"locked,omitempty"`

	// Name: The name of the resource.
	Name *string `json:"name,omitempty"`

	// Tags: A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource.
	Type *string `json:"type,omitempty"`

	// Value: The value of the key-value.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ConvertibleStatus = &KeyValue_STATUS{}

// ConvertStatusFrom populates our KeyValue_STATUS from the provided source
func (value *KeyValue_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.KeyValue_STATUS)
	if ok {
		// Populate our instance from source
		return value.AssignProperties_From_KeyValue_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.KeyValue_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = value.AssignProperties_From_KeyValue_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our KeyValue_STATUS
func (value *KeyValue_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.KeyValue_STATUS)
	if ok {
		// Populate destination from our instance
		return value.AssignProperties_To_KeyValue_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.KeyValue_STATUS{}
	err := value.AssignProperties_To_KeyValue_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &KeyValue_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (value *KeyValue_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.KeyValue_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (value *KeyValue_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.KeyValue_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.KeyValue_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "ContentType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContentType != nil {
			contentType := *typedInput.Properties.ContentType
			value.ContentType = &contentType
		}
	}

	// Set property "ETag":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ETag != nil {
			eTag := *typedInput.Properties.ETag
			value.ETag = &eTag
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		value.Id = &id
	}

	// Set property "Key":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Key != nil {
			key := *typedInput.Properties.Key
			value.Key = &key
		}
	}

	// Set property "Label":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Label != nil {
			label := *typedInput.Properties.Label
			value.Label = &label
		}
	}

	// Set property "LastModified":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastModified != nil {
			lastModified := *typedInput.Properties.LastModified
			value.LastModified = &lastModified
		}
	}

	// Set property "Locked":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Locked != nil {
			locked := *typedInput.Properties.Locked
			value.Locked = &locked
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		value.Name = &name
	}

	// Set property "Tags":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			value.Tags = make(map[string]string, len(typedInput.Properties.Tags))
			for key, tagsValue := range typedInput.Properties.Tags {
				value.Tags[key] = tagsValue
			}
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		value.Type = &typeVar
	}

	// Set property "Value":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Value != nil {
			value1 := *typedInput.Properties.Value
			value.Value = &value1
		}
	}

	// No error
	return nil
}

// AssignProperties_From_KeyValue_STATUS populates our KeyValue_STATUS from the provided source KeyValue_STATUS
func (value *KeyValue_STATUS) AssignProperties_From_KeyValue_STATUS(source *storage.KeyValue_STATUS) error {

	// Conditions
	value.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ContentType
	value.ContentType = genruntime.ClonePointerToString(source.ContentType)

	// ETag
	value.ETag = genruntime.ClonePointerToString(source.ETag)

	// Id
	value.Id = genruntime.ClonePointerToString(source.Id)

	// Key
	value.Key = genruntime.ClonePointerToString(source.Key)

	// Label
	value.Label = genruntime.ClonePointerToString(source.Label)

	// LastModified
	value.LastModified = genruntime.ClonePointerToString(source.LastModified)

	// Locked
	if source.Locked != nil {
		locked := *source.Locked
		value.Locked = &locked
	} else {
		value.Locked = nil
	}

	// Name
	value.Name = genruntime.ClonePointerToString(source.Name)

	// Tags
	value.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	value.Type = genruntime.ClonePointerToString(source.Type)

	// Value
	value.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_KeyValue_STATUS populates the provided destination KeyValue_STATUS from our KeyValue_STATUS
func (value *KeyValue_STATUS) AssignProperties_To_KeyValue_STATUS(destination *storage.KeyValue_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(value.Conditions)

	// ContentType
	destination.ContentType = genruntime.ClonePointerToString(value.ContentType)

	// ETag
	destination.ETag = genruntime.ClonePointerToString(value.ETag)

	// Id
	destination.Id = genruntime.ClonePointerToString(value.Id)

	// Key
	destination.Key = genruntime.ClonePointerToString(value.Key)

	// Label
	destination.Label = genruntime.ClonePointerToString(value.Label)

	// LastModified
	destination.LastModified = genruntime.ClonePointerToString(value.LastModified)

	// Locked
	if value.Locked != nil {
		locked := *value.Locked
		destination.Locked = &locked
	} else {
		destination.Locked = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(value.Name)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(value.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(value.Type)

	// Value
	destination.Value = genruntime.ClonePointerToString(value.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type KeyValueOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_KeyValueOperatorSpec populates our KeyValueOperatorSpec from the provided source KeyValueOperatorSpec
func (operator *KeyValueOperatorSpec) AssignProperties_From_KeyValueOperatorSpec(source *storage.KeyValueOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_KeyValueOperatorSpec populates the provided destination KeyValueOperatorSpec from our KeyValueOperatorSpec
func (operator *KeyValueOperatorSpec) AssignProperties_To_KeyValueOperatorSpec(destination *storage.KeyValueOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&KeyValue{}, &KeyValueList{})
}
