// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_KeyValueFilter_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyValueFilter_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyValueFilter_STATUS, KeyValueFilter_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyValueFilter_STATUS runs a test to see if a specific instance of KeyValueFilter_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyValueFilter_STATUS(subject KeyValueFilter_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyValueFilter_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyValueFilter_STATUS instances for property testing - lazily instantiated by
// KeyValueFilter_STATUSGenerator()
var keyValueFilter_STATUSGenerator gopter.Gen

// KeyValueFilter_STATUSGenerator returns a generator of KeyValueFilter_STATUS instances for property testing.
func KeyValueFilter_STATUSGenerator() gopter.Gen {
	if keyValueFilter_STATUSGenerator != nil {
		return keyValueFilter_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyValueFilter_STATUS(generators)
	keyValueFilter_STATUSGenerator = gen.Struct(reflect.TypeOf(KeyValueFilter_STATUS{}), generators)

	return keyValueFilter_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForKeyValueFilter_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyValueFilter_STATUS(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Label"] = gen.PtrOf(gen.AlphaString())
}

func Test_SnapshotProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SnapshotProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshotProperties_STATUS, SnapshotProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshotProperties_STATUS runs a test to see if a specific instance of SnapshotProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshotProperties_STATUS(subject SnapshotProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SnapshotProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SnapshotProperties_STATUS instances for property testing - lazily instantiated by
// SnapshotProperties_STATUSGenerator()
var snapshotProperties_STATUSGenerator gopter.Gen

// SnapshotProperties_STATUSGenerator returns a generator of SnapshotProperties_STATUS instances for property testing.
// We first initialize snapshotProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SnapshotProperties_STATUSGenerator() gopter.Gen {
	if snapshotProperties_STATUSGenerator != nil {
		return snapshotProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS(generators)
	snapshotProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(SnapshotProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForSnapshotProperties_STATUS(generators)
	snapshotProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(SnapshotProperties_STATUS{}), generators)

	return snapshotProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS(gens map[string]gopter.Gen) {
	gens["CompositionType"] = gen.PtrOf(gen.OneConstOf(SnapshotProperties_CompositionType_STATUS_Key, SnapshotProperties_CompositionType_STATUS_Key_Label))
	gens["Created"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Expires"] = gen.PtrOf(gen.AlphaString())
	gens["ItemsCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		SnapshotProperties_ProvisioningState_STATUS_Canceled,
		SnapshotProperties_ProvisioningState_STATUS_Creating,
		SnapshotProperties_ProvisioningState_STATUS_Deleting,
		SnapshotProperties_ProvisioningState_STATUS_Failed,
		SnapshotProperties_ProvisioningState_STATUS_Succeeded,
		SnapshotProperties_ProvisioningState_STATUS_Updating))
	gens["RetentionPeriod"] = gen.PtrOf(gen.Int())
	gens["Size"] = gen.PtrOf(gen.Int())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		SnapshotProperties_Status_STATUS_Archived,
		SnapshotProperties_Status_STATUS_Failed,
		SnapshotProperties_Status_STATUS_Provisioning,
		SnapshotProperties_Status_STATUS_Ready))
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSnapshotProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSnapshotProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Filters"] = gen.SliceOf(KeyValueFilter_STATUSGenerator())
}

func Test_Snapshot_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Snapshot_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshot_STATUS, Snapshot_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshot_STATUS runs a test to see if a specific instance of Snapshot_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshot_STATUS(subject Snapshot_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Snapshot_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Snapshot_STATUS instances for property testing - lazily instantiated by Snapshot_STATUSGenerator()
var snapshot_STATUSGenerator gopter.Gen

// Snapshot_STATUSGenerator returns a generator of Snapshot_STATUS instances for property testing.
// We first initialize snapshot_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Snapshot_STATUSGenerator() gopter.Gen {
	if snapshot_STATUSGenerator != nil {
		return snapshot_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshot_STATUS(generators)
	snapshot_STATUSGenerator = gen.Struct(reflect.TypeOf(Snapshot_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshot_STATUS(generators)
	AddRelatedPropertyGeneratorsForSnapshot_STATUS(generators)
	snapshot_STATUSGenerator = gen.Struct(reflect.TypeOf(Snapshot_STATUS{}), generators)

	return snapshot_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSnapshot_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshot_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSnapshot_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSnapshot_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SnapshotProperties_STATUSGenerator())
}
