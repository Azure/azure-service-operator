// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type EventSubscriptions_SPECARM struct {
	AzureName string `json:"azureName"`
	Name      string `json:"name"`

	//Properties: Properties of the event subscription.
	Properties *EventSubscriptionProperties_SpecARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &EventSubscriptions_SPECARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (specarm EventSubscriptions_SPECARM) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetName returns the Name of the resource
func (specarm EventSubscriptions_SPECARM) GetName() string {
	return specarm.Name
}

// GetType returns the ARM Type of the resource. This is always ""
func (specarm EventSubscriptions_SPECARM) GetType() string {
	return ""
}

type EventSubscriptionProperties_SpecARM struct {
	//DeadLetterDestination: The DeadLetter destination of the event subscription.
	DeadLetterDestination *DeadLetterDestination_SpecARM `json:"deadLetterDestination,omitempty"`

	//Destination: Information about the destination where events have to be delivered
	//for the event subscription.
	Destination *EventSubscriptionDestination_SpecARM `json:"destination,omitempty"`

	//EventDeliverySchema: The event delivery schema for the event subscription.
	EventDeliverySchema *EventSubscriptionPropertiesSpecEventDeliverySchema `json:"eventDeliverySchema,omitempty"`

	//ExpirationTimeUtc: Expiration time of the event subscription.
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty"`

	//Filter: Information about the filter for the event subscription.
	Filter *EventSubscriptionFilter_SpecARM `json:"filter,omitempty"`

	//Labels: List of user defined labels.
	Labels []string `json:"labels,omitempty"`

	//RetryPolicy: The retry policy for events. This can be used to configure maximum
	//number of delivery attempts and time to live for events.
	RetryPolicy *RetryPolicy_SpecARM `json:"retryPolicy,omitempty"`
}

type DeadLetterDestination_SpecARM struct {
	//EndpointType: Type of the endpoint for the dead letter destination
	EndpointType DeadLetterDestinationSpecEndpointType `json:"endpointType"`
}

type EventSubscriptionDestination_SpecARM struct {
	//EndpointType: Type of the endpoint for the event subscription destination.
	EndpointType EventSubscriptionDestinationSpecEndpointType `json:"endpointType"`
}

type EventSubscriptionFilter_SpecARM struct {
	//AdvancedFilters: An array of advanced filters that are used for filtering event
	//subscriptions.
	AdvancedFilters []AdvancedFilter_SpecARM `json:"advancedFilters,omitempty"`

	//IncludedEventTypes: A list of applicable event types that need to be part of the
	//event subscription. If it is desired to subscribe to all default event types,
	//set the IncludedEventTypes to null.
	IncludedEventTypes []string `json:"includedEventTypes,omitempty"`

	//IsSubjectCaseSensitive: Specifies if the SubjectBeginsWith and SubjectEndsWith
	//properties of the filter
	//should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `json:"isSubjectCaseSensitive,omitempty"`

	//SubjectBeginsWith: An optional string to filter events for an event subscription
	//based on a resource path prefix.
	//The format of this depends on the publisher of the events.
	//Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty"`

	//SubjectEndsWith: An optional string to filter events for an event subscription
	//based on a resource path suffix.
	//Wildcard characters are not supported in this path.
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty"`
}

type RetryPolicy_SpecARM struct {
	//EventTimeToLiveInMinutes: Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`

	//MaxDeliveryAttempts: Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `json:"maxDeliveryAttempts,omitempty"`
}

type AdvancedFilter_SpecARM struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	//OperatorType: The operator type used for filtering, e.g., NumberIn,
	//StringContains, BoolEquals and others.
	OperatorType AdvancedFilterSpecOperatorType `json:"operatorType"`
}
