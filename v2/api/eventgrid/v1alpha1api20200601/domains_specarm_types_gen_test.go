// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Domains_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Domains_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainsSPECARM, DomainsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainsSPECARM runs a test to see if a specific instance of Domains_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainsSPECARM(subject Domains_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Domains_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Domains_SPECARM instances for property testing - lazily instantiated by DomainsSPECARMGenerator()
var domainsSPECARMGenerator gopter.Gen

// DomainsSPECARMGenerator returns a generator of Domains_SPECARM instances for property testing.
// We first initialize domainsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DomainsSPECARMGenerator() gopter.Gen {
	if domainsSPECARMGenerator != nil {
		return domainsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainsSPECARM(generators)
	domainsSPECARMGenerator = gen.Struct(reflect.TypeOf(Domains_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainsSPECARM(generators)
	AddRelatedPropertyGeneratorsForDomainsSPECARM(generators)
	domainsSPECARMGenerator = gen.Struct(reflect.TypeOf(Domains_SPECARM{}), generators)

	return domainsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDomainsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomainsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DomainPropertiesSpecARMGenerator())
}

func Test_DomainProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainPropertiesSpecARM, DomainPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainPropertiesSpecARM runs a test to see if a specific instance of DomainProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainPropertiesSpecARM(subject DomainProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainProperties_SpecARM instances for property testing - lazily instantiated by
//DomainPropertiesSpecARMGenerator()
var domainPropertiesSpecARMGenerator gopter.Gen

// DomainPropertiesSpecARMGenerator returns a generator of DomainProperties_SpecARM instances for property testing.
// We first initialize domainPropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DomainPropertiesSpecARMGenerator() gopter.Gen {
	if domainPropertiesSpecARMGenerator != nil {
		return domainPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainPropertiesSpecARM(generators)
	domainPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainPropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForDomainPropertiesSpecARM(generators)
	domainPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_SpecARM{}), generators)

	return domainPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["InputSchema"] = gen.PtrOf(gen.OneConstOf(DomainPropertiesSpecInputSchemaCloudEventSchemaV10, DomainPropertiesSpecInputSchemaCustomEventSchema, DomainPropertiesSpecInputSchemaEventGridSchema))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(DomainPropertiesSpecPublicNetworkAccessDisabled, DomainPropertiesSpecPublicNetworkAccessEnabled))
}

// AddRelatedPropertyGeneratorsForDomainPropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomainPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["InboundIpRules"] = gen.SliceOf(InboundIpRuleSpecARMGenerator())
	gens["InputSchemaMapping"] = gen.PtrOf(InputSchemaMappingSpecARMGenerator())
}

func Test_InboundIpRule_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundIpRule_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundIpRuleSpecARM, InboundIpRuleSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundIpRuleSpecARM runs a test to see if a specific instance of InboundIpRule_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundIpRuleSpecARM(subject InboundIpRule_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundIpRule_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundIpRule_SpecARM instances for property testing - lazily instantiated by
//InboundIpRuleSpecARMGenerator()
var inboundIpRuleSpecARMGenerator gopter.Gen

// InboundIpRuleSpecARMGenerator returns a generator of InboundIpRule_SpecARM instances for property testing.
func InboundIpRuleSpecARMGenerator() gopter.Gen {
	if inboundIpRuleSpecARMGenerator != nil {
		return inboundIpRuleSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundIpRuleSpecARM(generators)
	inboundIpRuleSpecARMGenerator = gen.Struct(reflect.TypeOf(InboundIpRule_SpecARM{}), generators)

	return inboundIpRuleSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundIpRuleSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundIpRuleSpecARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(InboundIpRuleSpecActionAllow))
	gens["IpMask"] = gen.PtrOf(gen.AlphaString())
}

func Test_InputSchemaMapping_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InputSchemaMapping_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInputSchemaMappingSpecARM, InputSchemaMappingSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInputSchemaMappingSpecARM runs a test to see if a specific instance of InputSchemaMapping_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInputSchemaMappingSpecARM(subject InputSchemaMapping_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InputSchemaMapping_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InputSchemaMapping_SpecARM instances for property testing - lazily instantiated by
//InputSchemaMappingSpecARMGenerator()
var inputSchemaMappingSpecARMGenerator gopter.Gen

// InputSchemaMappingSpecARMGenerator returns a generator of InputSchemaMapping_SpecARM instances for property testing.
func InputSchemaMappingSpecARMGenerator() gopter.Gen {
	if inputSchemaMappingSpecARMGenerator != nil {
		return inputSchemaMappingSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInputSchemaMappingSpecARM(generators)
	inputSchemaMappingSpecARMGenerator = gen.Struct(reflect.TypeOf(InputSchemaMapping_SpecARM{}), generators)

	return inputSchemaMappingSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForInputSchemaMappingSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInputSchemaMappingSpecARM(gens map[string]gopter.Gen) {
	gens["InputSchemaMappingType"] = gen.OneConstOf(InputSchemaMappingSpecInputSchemaMappingTypeJson)
}
