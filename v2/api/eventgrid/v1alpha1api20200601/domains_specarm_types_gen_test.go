// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Domains_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Domains_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomains_SPECARM, Domains_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomains_SPECARM runs a test to see if a specific instance of Domains_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomains_SPECARM(subject Domains_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Domains_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Domains_SPECARM instances for property testing - lazily instantiated by Domains_SPECARMGenerator()
var domains_specarmGenerator gopter.Gen

// Domains_SPECARMGenerator returns a generator of Domains_SPECARM instances for property testing.
// We first initialize domains_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Domains_SPECARMGenerator() gopter.Gen {
	if domains_specarmGenerator != nil {
		return domains_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomains_SPECARM(generators)
	domains_specarmGenerator = gen.Struct(reflect.TypeOf(Domains_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomains_SPECARM(generators)
	AddRelatedPropertyGeneratorsForDomains_SPECARM(generators)
	domains_specarmGenerator = gen.Struct(reflect.TypeOf(Domains_SPECARM{}), generators)

	return domains_specarmGenerator
}

// AddIndependentPropertyGeneratorsForDomains_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomains_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDomains_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomains_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DomainProperties_SpecARMGenerator())
}

func Test_DomainProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainProperties_SpecARM, DomainProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainProperties_SpecARM runs a test to see if a specific instance of DomainProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainProperties_SpecARM(subject DomainProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainProperties_SpecARM instances for property testing - lazily instantiated by
//DomainProperties_SpecARMGenerator()
var domainProperties_specARMGenerator gopter.Gen

// DomainProperties_SpecARMGenerator returns a generator of DomainProperties_SpecARM instances for property testing.
// We first initialize domainProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DomainProperties_SpecARMGenerator() gopter.Gen {
	if domainProperties_specARMGenerator != nil {
		return domainProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainProperties_SpecARM(generators)
	domainProperties_specARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDomainProperties_SpecARM(generators)
	domainProperties_specARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_SpecARM{}), generators)

	return domainProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["InputSchema"] = gen.PtrOf(gen.OneConstOf(DomainProperties_InputSchema_SpecCloudEventSchemaV1_0, DomainProperties_InputSchema_SpecCustomEventSchema, DomainProperties_InputSchema_SpecEventGridSchema))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(DomainProperties_PublicNetworkAccess_SpecDisabled, DomainProperties_PublicNetworkAccess_SpecEnabled))
}

// AddRelatedPropertyGeneratorsForDomainProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomainProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["InboundIpRules"] = gen.SliceOf(InboundIpRule_SpecARMGenerator())
	gens["InputSchemaMapping"] = gen.PtrOf(InputSchemaMapping_SpecARMGenerator())
}

func Test_InboundIpRule_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundIpRule_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundIpRule_SpecARM, InboundIpRule_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundIpRule_SpecARM runs a test to see if a specific instance of InboundIpRule_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundIpRule_SpecARM(subject InboundIpRule_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundIpRule_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundIpRule_SpecARM instances for property testing - lazily instantiated by
//InboundIpRule_SpecARMGenerator()
var inboundIpRule_specARMGenerator gopter.Gen

// InboundIpRule_SpecARMGenerator returns a generator of InboundIpRule_SpecARM instances for property testing.
func InboundIpRule_SpecARMGenerator() gopter.Gen {
	if inboundIpRule_specARMGenerator != nil {
		return inboundIpRule_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundIpRule_SpecARM(generators)
	inboundIpRule_specARMGenerator = gen.Struct(reflect.TypeOf(InboundIpRule_SpecARM{}), generators)

	return inboundIpRule_specARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundIpRule_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundIpRule_SpecARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(InboundIpRule_Action_SpecAllow))
	gens["IpMask"] = gen.PtrOf(gen.AlphaString())
}

func Test_InputSchemaMapping_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InputSchemaMapping_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInputSchemaMapping_SpecARM, InputSchemaMapping_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInputSchemaMapping_SpecARM runs a test to see if a specific instance of InputSchemaMapping_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInputSchemaMapping_SpecARM(subject InputSchemaMapping_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InputSchemaMapping_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InputSchemaMapping_SpecARM instances for property testing - lazily instantiated by
//InputSchemaMapping_SpecARMGenerator()
var inputSchemaMapping_specARMGenerator gopter.Gen

// InputSchemaMapping_SpecARMGenerator returns a generator of InputSchemaMapping_SpecARM instances for property testing.
func InputSchemaMapping_SpecARMGenerator() gopter.Gen {
	if inputSchemaMapping_specARMGenerator != nil {
		return inputSchemaMapping_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInputSchemaMapping_SpecARM(generators)
	inputSchemaMapping_specARMGenerator = gen.Struct(reflect.TypeOf(InputSchemaMapping_SpecARM{}), generators)

	return inputSchemaMapping_specARMGenerator
}

// AddIndependentPropertyGeneratorsForInputSchemaMapping_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInputSchemaMapping_SpecARM(gens map[string]gopter.Gen) {
	gens["InputSchemaMappingType"] = gen.OneConstOf(InputSchemaMapping_InputSchemaMappingType_SpecJson)
}
