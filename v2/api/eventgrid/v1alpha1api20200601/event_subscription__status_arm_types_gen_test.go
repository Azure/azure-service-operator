// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EventSubscription_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscription_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscription_StatusARM, EventSubscription_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscription_StatusARM runs a test to see if a specific instance of EventSubscription_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscription_StatusARM(subject EventSubscription_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscription_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscription_StatusARM instances for property testing - lazily instantiated by
//EventSubscription_StatusARMGenerator()
var eventSubscription_statusARMGenerator gopter.Gen

// EventSubscription_StatusARMGenerator returns a generator of EventSubscription_StatusARM instances for property testing.
// We first initialize eventSubscription_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscription_StatusARMGenerator() gopter.Gen {
	if eventSubscription_statusARMGenerator != nil {
		return eventSubscription_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_StatusARM(generators)
	eventSubscription_statusARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_StatusARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscription_StatusARM(generators)
	eventSubscription_statusARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_StatusARM{}), generators)

	return eventSubscription_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscription_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscription_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscription_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscription_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventSubscriptionProperties_StatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_EventSubscriptionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionProperties_StatusARM, EventSubscriptionProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionProperties_StatusARM runs a test to see if a specific instance of EventSubscriptionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionProperties_StatusARM(subject EventSubscriptionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionProperties_StatusARM instances for property testing - lazily instantiated by
//EventSubscriptionProperties_StatusARMGenerator()
var eventSubscriptionProperties_statusARMGenerator gopter.Gen

// EventSubscriptionProperties_StatusARMGenerator returns a generator of EventSubscriptionProperties_StatusARM instances for property testing.
// We first initialize eventSubscriptionProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionProperties_StatusARMGenerator() gopter.Gen {
	if eventSubscriptionProperties_statusARMGenerator != nil {
		return eventSubscriptionProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_StatusARM(generators)
	eventSubscriptionProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionProperties_StatusARM(generators)
	eventSubscriptionProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_StatusARM{}), generators)

	return eventSubscriptionProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["EventDeliverySchema"] = gen.PtrOf(gen.OneConstOf(EventSubscriptionProperties_EventDeliverySchema_StatusCloudEventSchemaV1_0, EventSubscriptionProperties_EventDeliverySchema_StatusCustomInputSchema, EventSubscriptionProperties_EventDeliverySchema_StatusEventGridSchema))
	gens["ExpirationTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionProperties_ProvisioningState_StatusAwaitingManualAction,
		EventSubscriptionProperties_ProvisioningState_StatusCanceled,
		EventSubscriptionProperties_ProvisioningState_StatusCreating,
		EventSubscriptionProperties_ProvisioningState_StatusDeleting,
		EventSubscriptionProperties_ProvisioningState_StatusFailed,
		EventSubscriptionProperties_ProvisioningState_StatusSucceeded,
		EventSubscriptionProperties_ProvisioningState_StatusUpdating))
	gens["Topic"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["DeadLetterDestination"] = gen.PtrOf(DeadLetterDestination_StatusARMGenerator())
	gens["Destination"] = gen.PtrOf(EventSubscriptionDestination_StatusARMGenerator())
	gens["Filter"] = gen.PtrOf(EventSubscriptionFilter_StatusARMGenerator())
	gens["RetryPolicy"] = gen.PtrOf(RetryPolicy_StatusARMGenerator())
}

func Test_DeadLetterDestination_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeadLetterDestination_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeadLetterDestination_StatusARM, DeadLetterDestination_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeadLetterDestination_StatusARM runs a test to see if a specific instance of DeadLetterDestination_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeadLetterDestination_StatusARM(subject DeadLetterDestination_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeadLetterDestination_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeadLetterDestination_StatusARM instances for property testing - lazily instantiated by
//DeadLetterDestination_StatusARMGenerator()
var deadLetterDestination_statusARMGenerator gopter.Gen

// DeadLetterDestination_StatusARMGenerator returns a generator of DeadLetterDestination_StatusARM instances for property testing.
func DeadLetterDestination_StatusARMGenerator() gopter.Gen {
	if deadLetterDestination_statusARMGenerator != nil {
		return deadLetterDestination_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeadLetterDestination_StatusARM(generators)
	deadLetterDestination_statusARMGenerator = gen.Struct(reflect.TypeOf(DeadLetterDestination_StatusARM{}), generators)

	return deadLetterDestination_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeadLetterDestination_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeadLetterDestination_StatusARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(DeadLetterDestination_EndpointType_StatusStorageBlob)
}

func Test_EventSubscriptionDestination_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionDestination_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionDestination_StatusARM, EventSubscriptionDestination_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionDestination_StatusARM runs a test to see if a specific instance of EventSubscriptionDestination_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionDestination_StatusARM(subject EventSubscriptionDestination_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionDestination_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionDestination_StatusARM instances for property testing - lazily instantiated by
//EventSubscriptionDestination_StatusARMGenerator()
var eventSubscriptionDestination_statusARMGenerator gopter.Gen

// EventSubscriptionDestination_StatusARMGenerator returns a generator of EventSubscriptionDestination_StatusARM instances for property testing.
func EventSubscriptionDestination_StatusARMGenerator() gopter.Gen {
	if eventSubscriptionDestination_statusARMGenerator != nil {
		return eventSubscriptionDestination_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionDestination_StatusARM(generators)
	eventSubscriptionDestination_statusARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionDestination_StatusARM{}), generators)

	return eventSubscriptionDestination_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionDestination_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionDestination_StatusARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(
		EventSubscriptionDestination_EndpointType_StatusAzureFunction,
		EventSubscriptionDestination_EndpointType_StatusEventHub,
		EventSubscriptionDestination_EndpointType_StatusHybridConnection,
		EventSubscriptionDestination_EndpointType_StatusServiceBusQueue,
		EventSubscriptionDestination_EndpointType_StatusServiceBusTopic,
		EventSubscriptionDestination_EndpointType_StatusStorageQueue,
		EventSubscriptionDestination_EndpointType_StatusWebHook)
}

func Test_EventSubscriptionFilter_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionFilter_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionFilter_StatusARM, EventSubscriptionFilter_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionFilter_StatusARM runs a test to see if a specific instance of EventSubscriptionFilter_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionFilter_StatusARM(subject EventSubscriptionFilter_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionFilter_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionFilter_StatusARM instances for property testing - lazily instantiated by
//EventSubscriptionFilter_StatusARMGenerator()
var eventSubscriptionFilter_statusARMGenerator gopter.Gen

// EventSubscriptionFilter_StatusARMGenerator returns a generator of EventSubscriptionFilter_StatusARM instances for property testing.
// We first initialize eventSubscriptionFilter_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionFilter_StatusARMGenerator() gopter.Gen {
	if eventSubscriptionFilter_statusARMGenerator != nil {
		return eventSubscriptionFilter_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_StatusARM(generators)
	eventSubscriptionFilter_statusARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_StatusARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionFilter_StatusARM(generators)
	eventSubscriptionFilter_statusARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_StatusARM{}), generators)

	return eventSubscriptionFilter_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionFilter_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionFilter_StatusARM(gens map[string]gopter.Gen) {
	gens["IncludedEventTypes"] = gen.SliceOf(gen.AlphaString())
	gens["IsSubjectCaseSensitive"] = gen.PtrOf(gen.Bool())
	gens["SubjectBeginsWith"] = gen.PtrOf(gen.AlphaString())
	gens["SubjectEndsWith"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionFilter_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionFilter_StatusARM(gens map[string]gopter.Gen) {
	gens["AdvancedFilters"] = gen.SliceOf(AdvancedFilter_StatusARMGenerator())
}

func Test_RetryPolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetryPolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetryPolicy_StatusARM, RetryPolicy_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetryPolicy_StatusARM runs a test to see if a specific instance of RetryPolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetryPolicy_StatusARM(subject RetryPolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetryPolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetryPolicy_StatusARM instances for property testing - lazily instantiated by
//RetryPolicy_StatusARMGenerator()
var retryPolicy_statusARMGenerator gopter.Gen

// RetryPolicy_StatusARMGenerator returns a generator of RetryPolicy_StatusARM instances for property testing.
func RetryPolicy_StatusARMGenerator() gopter.Gen {
	if retryPolicy_statusARMGenerator != nil {
		return retryPolicy_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetryPolicy_StatusARM(generators)
	retryPolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(RetryPolicy_StatusARM{}), generators)

	return retryPolicy_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForRetryPolicy_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetryPolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["EventTimeToLiveInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxDeliveryAttempts"] = gen.PtrOf(gen.Int())
}

func Test_AdvancedFilter_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilter_StatusARM, AdvancedFilter_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilter_StatusARM runs a test to see if a specific instance of AdvancedFilter_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilter_StatusARM(subject AdvancedFilter_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_StatusARM instances for property testing - lazily instantiated by
//AdvancedFilter_StatusARMGenerator()
var advancedFilter_statusARMGenerator gopter.Gen

// AdvancedFilter_StatusARMGenerator returns a generator of AdvancedFilter_StatusARM instances for property testing.
func AdvancedFilter_StatusARMGenerator() gopter.Gen {
	if advancedFilter_statusARMGenerator != nil {
		return advancedFilter_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilter_StatusARM(generators)
	advancedFilter_statusARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_StatusARM{}), generators)

	return advancedFilter_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilter_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilter_StatusARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(
		AdvancedFilter_OperatorType_StatusBoolEquals,
		AdvancedFilter_OperatorType_StatusNumberGreaterThan,
		AdvancedFilter_OperatorType_StatusNumberGreaterThanOrEquals,
		AdvancedFilter_OperatorType_StatusNumberIn,
		AdvancedFilter_OperatorType_StatusNumberLessThan,
		AdvancedFilter_OperatorType_StatusNumberLessThanOrEquals,
		AdvancedFilter_OperatorType_StatusNumberNotIn,
		AdvancedFilter_OperatorType_StatusStringBeginsWith,
		AdvancedFilter_OperatorType_StatusStringContains,
		AdvancedFilter_OperatorType_StatusStringEndsWith,
		AdvancedFilter_OperatorType_StatusStringIn,
		AdvancedFilter_OperatorType_StatusStringNotIn)
}
