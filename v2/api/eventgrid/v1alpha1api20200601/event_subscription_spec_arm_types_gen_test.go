// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EventSubscription_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscription_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscription_Spec_ARM, EventSubscription_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscription_Spec_ARM runs a test to see if a specific instance of EventSubscription_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscription_Spec_ARM(subject EventSubscription_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscription_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscription_Spec_ARM instances for property testing - lazily instantiated by
// EventSubscription_Spec_ARMGenerator()
var eventSubscription_Spec_ARMGenerator gopter.Gen

// EventSubscription_Spec_ARMGenerator returns a generator of EventSubscription_Spec_ARM instances for property testing.
// We first initialize eventSubscription_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscription_Spec_ARMGenerator() gopter.Gen {
	if eventSubscription_Spec_ARMGenerator != nil {
		return eventSubscription_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_Spec_ARM(generators)
	eventSubscription_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscription_Spec_ARM(generators)
	eventSubscription_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_Spec_ARM{}), generators)

	return eventSubscription_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscription_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscription_Spec_ARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForEventSubscription_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscription_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventSubscriptionProperties_ARMGenerator())
}

func Test_EventSubscriptionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionProperties_ARM, EventSubscriptionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionProperties_ARM runs a test to see if a specific instance of EventSubscriptionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionProperties_ARM(subject EventSubscriptionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionProperties_ARM instances for property testing - lazily instantiated by
// EventSubscriptionProperties_ARMGenerator()
var eventSubscriptionProperties_ARMGenerator gopter.Gen

// EventSubscriptionProperties_ARMGenerator returns a generator of EventSubscriptionProperties_ARM instances for property testing.
// We first initialize eventSubscriptionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionProperties_ARMGenerator() gopter.Gen {
	if eventSubscriptionProperties_ARMGenerator != nil {
		return eventSubscriptionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_ARM(generators)
	eventSubscriptionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionProperties_ARM(generators)
	eventSubscriptionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_ARM{}), generators)

	return eventSubscriptionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionProperties_ARM(gens map[string]gopter.Gen) {
	gens["EventDeliverySchema"] = gen.PtrOf(gen.OneConstOf(EventSubscriptionProperties_EventDeliverySchema_CloudEventSchemaV1_0, EventSubscriptionProperties_EventDeliverySchema_CustomInputSchema, EventSubscriptionProperties_EventDeliverySchema_EventGridSchema))
	gens["ExpirationTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionProperties_ARM(gens map[string]gopter.Gen) {
	gens["DeadLetterDestination"] = gen.PtrOf(DeadLetterDestination_ARMGenerator())
	gens["Destination"] = gen.PtrOf(EventSubscriptionDestination_ARMGenerator())
	gens["Filter"] = gen.PtrOf(EventSubscriptionFilter_ARMGenerator())
	gens["RetryPolicy"] = gen.PtrOf(RetryPolicy_ARMGenerator())
}

func Test_DeadLetterDestination_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeadLetterDestination_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeadLetterDestination_ARM, DeadLetterDestination_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeadLetterDestination_ARM runs a test to see if a specific instance of DeadLetterDestination_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeadLetterDestination_ARM(subject DeadLetterDestination_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeadLetterDestination_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeadLetterDestination_ARM instances for property testing - lazily instantiated by
// DeadLetterDestination_ARMGenerator()
var deadLetterDestination_ARMGenerator gopter.Gen

// DeadLetterDestination_ARMGenerator returns a generator of DeadLetterDestination_ARM instances for property testing.
func DeadLetterDestination_ARMGenerator() gopter.Gen {
	if deadLetterDestination_ARMGenerator != nil {
		return deadLetterDestination_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeadLetterDestination_ARM(generators)
	deadLetterDestination_ARMGenerator = gen.Struct(reflect.TypeOf(DeadLetterDestination_ARM{}), generators)

	return deadLetterDestination_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeadLetterDestination_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeadLetterDestination_ARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(DeadLetterDestination_EndpointType_StorageBlob))
}

func Test_EventSubscriptionDestination_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionDestination_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionDestination_ARM, EventSubscriptionDestination_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionDestination_ARM runs a test to see if a specific instance of EventSubscriptionDestination_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionDestination_ARM(subject EventSubscriptionDestination_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionDestination_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionDestination_ARM instances for property testing - lazily instantiated by
// EventSubscriptionDestination_ARMGenerator()
var eventSubscriptionDestination_ARMGenerator gopter.Gen

// EventSubscriptionDestination_ARMGenerator returns a generator of EventSubscriptionDestination_ARM instances for property testing.
func EventSubscriptionDestination_ARMGenerator() gopter.Gen {
	if eventSubscriptionDestination_ARMGenerator != nil {
		return eventSubscriptionDestination_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionDestination_ARM(generators)
	eventSubscriptionDestination_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionDestination_ARM{}), generators)

	return eventSubscriptionDestination_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionDestination_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionDestination_ARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionDestination_EndpointType_AzureFunction,
		EventSubscriptionDestination_EndpointType_EventHub,
		EventSubscriptionDestination_EndpointType_HybridConnection,
		EventSubscriptionDestination_EndpointType_ServiceBusQueue,
		EventSubscriptionDestination_EndpointType_ServiceBusTopic,
		EventSubscriptionDestination_EndpointType_StorageQueue,
		EventSubscriptionDestination_EndpointType_WebHook))
}

func Test_EventSubscriptionFilter_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionFilter_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionFilter_ARM, EventSubscriptionFilter_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionFilter_ARM runs a test to see if a specific instance of EventSubscriptionFilter_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionFilter_ARM(subject EventSubscriptionFilter_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionFilter_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionFilter_ARM instances for property testing - lazily instantiated by
// EventSubscriptionFilter_ARMGenerator()
var eventSubscriptionFilter_ARMGenerator gopter.Gen

// EventSubscriptionFilter_ARMGenerator returns a generator of EventSubscriptionFilter_ARM instances for property testing.
// We first initialize eventSubscriptionFilter_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionFilter_ARMGenerator() gopter.Gen {
	if eventSubscriptionFilter_ARMGenerator != nil {
		return eventSubscriptionFilter_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_ARM(generators)
	eventSubscriptionFilter_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_ARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionFilter_ARM(generators)
	eventSubscriptionFilter_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_ARM{}), generators)

	return eventSubscriptionFilter_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionFilter_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionFilter_ARM(gens map[string]gopter.Gen) {
	gens["IncludedEventTypes"] = gen.SliceOf(gen.AlphaString())
	gens["IsSubjectCaseSensitive"] = gen.PtrOf(gen.Bool())
	gens["SubjectBeginsWith"] = gen.PtrOf(gen.AlphaString())
	gens["SubjectEndsWith"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionFilter_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionFilter_ARM(gens map[string]gopter.Gen) {
	gens["AdvancedFilters"] = gen.SliceOf(AdvancedFilter_ARMGenerator())
}

func Test_RetryPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetryPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetryPolicy_ARM, RetryPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetryPolicy_ARM runs a test to see if a specific instance of RetryPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetryPolicy_ARM(subject RetryPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetryPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetryPolicy_ARM instances for property testing - lazily instantiated by RetryPolicy_ARMGenerator()
var retryPolicy_ARMGenerator gopter.Gen

// RetryPolicy_ARMGenerator returns a generator of RetryPolicy_ARM instances for property testing.
func RetryPolicy_ARMGenerator() gopter.Gen {
	if retryPolicy_ARMGenerator != nil {
		return retryPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetryPolicy_ARM(generators)
	retryPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(RetryPolicy_ARM{}), generators)

	return retryPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRetryPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetryPolicy_ARM(gens map[string]gopter.Gen) {
	gens["EventTimeToLiveInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxDeliveryAttempts"] = gen.PtrOf(gen.Int())
}

func Test_AdvancedFilter_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilter_ARM, AdvancedFilter_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilter_ARM runs a test to see if a specific instance of AdvancedFilter_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilter_ARM(subject AdvancedFilter_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_ARM instances for property testing - lazily instantiated by AdvancedFilter_ARMGenerator()
var advancedFilter_ARMGenerator gopter.Gen

// AdvancedFilter_ARMGenerator returns a generator of AdvancedFilter_ARM instances for property testing.
func AdvancedFilter_ARMGenerator() gopter.Gen {
	if advancedFilter_ARMGenerator != nil {
		return advancedFilter_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilter_ARM(generators)
	advancedFilter_ARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_ARM{}), generators)

	return advancedFilter_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilter_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilter_ARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.PtrOf(gen.OneConstOf(
		AdvancedFilter_OperatorType_BoolEquals,
		AdvancedFilter_OperatorType_NumberGreaterThan,
		AdvancedFilter_OperatorType_NumberGreaterThanOrEquals,
		AdvancedFilter_OperatorType_NumberIn,
		AdvancedFilter_OperatorType_NumberLessThan,
		AdvancedFilter_OperatorType_NumberLessThanOrEquals,
		AdvancedFilter_OperatorType_NumberNotIn,
		AdvancedFilter_OperatorType_StringBeginsWith,
		AdvancedFilter_OperatorType_StringContains,
		AdvancedFilter_OperatorType_StringEndsWith,
		AdvancedFilter_OperatorType_StringIn,
		AdvancedFilter_OperatorType_StringNotIn))
}
