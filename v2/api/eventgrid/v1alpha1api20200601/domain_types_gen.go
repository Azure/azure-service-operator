// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"fmt"
	alpha20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Domains_Spec  `json:"spec,omitempty"`
	Status            Domain_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Domain{}

// GetConditions returns the conditions of the resource
func (domain *Domain) GetConditions() conditions.Conditions {
	return domain.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (domain *Domain) SetConditions(conditions conditions.Conditions) {
	domain.Status.Conditions = conditions
}

var _ conversion.Convertible = &Domain{}

// ConvertFrom populates our Domain from the provided hub Domain
func (domain *Domain) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20200601s.Domain

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = domain.AssignProperties_From_Domain(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to domain")
	}

	return nil
}

// ConvertTo populates the provided hub Domain from our Domain
func (domain *Domain) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20200601s.Domain
	err := domain.AssignProperties_To_Domain(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from domain")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-eventgrid-azure-com-v1alpha1api20200601-domain,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=domains,verbs=create;update,versions=v1alpha1api20200601,name=default.v1alpha1api20200601.domains.eventgrid.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Domain{}

// Default applies defaults to the Domain resource
func (domain *Domain) Default() {
	domain.defaultImpl()
	var temp interface{} = domain
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (domain *Domain) defaultAzureName() {
	if domain.Spec.AzureName == "" {
		domain.Spec.AzureName = domain.Name
	}
}

// defaultImpl applies the code generated defaults to the Domain resource
func (domain *Domain) defaultImpl() { domain.defaultAzureName() }

var _ genruntime.KubernetesResource = &Domain{}

// AzureName returns the Azure name of the resource
func (domain *Domain) AzureName() string {
	return domain.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (domain Domain) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (domain *Domain) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (domain *Domain) GetSpec() genruntime.ConvertibleSpec {
	return &domain.Spec
}

// GetStatus returns the status of this resource
func (domain *Domain) GetStatus() genruntime.ConvertibleStatus {
	return &domain.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/domains"
func (domain *Domain) GetType() string {
	return "Microsoft.EventGrid/domains"
}

// NewEmptyStatus returns a new empty (blank) status
func (domain *Domain) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Domain_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (domain *Domain) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(domain.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  domain.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (domain *Domain) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Domain_STATUS); ok {
		domain.Status = *st
		return nil
	}

	// Convert status to required version
	var st Domain_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	domain.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventgrid-azure-com-v1alpha1api20200601-domain,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=domains,verbs=create;update,versions=v1alpha1api20200601,name=validate.v1alpha1api20200601.domains.eventgrid.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Domain{}

// ValidateCreate validates the creation of the resource
func (domain *Domain) ValidateCreate() error {
	validations := domain.createValidations()
	var temp interface{} = domain
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (domain *Domain) ValidateDelete() error {
	validations := domain.deleteValidations()
	var temp interface{} = domain
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (domain *Domain) ValidateUpdate(old runtime.Object) error {
	validations := domain.updateValidations()
	var temp interface{} = domain
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (domain *Domain) createValidations() []func() error {
	return []func() error{domain.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (domain *Domain) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (domain *Domain) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return domain.validateResourceReferences()
		},
		domain.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (domain *Domain) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&domain.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (domain *Domain) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Domain)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, domain)
}

// AssignProperties_From_Domain populates our Domain from the provided source Domain
func (domain *Domain) AssignProperties_From_Domain(source *alpha20200601s.Domain) error {

	// ObjectMeta
	domain.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Domains_Spec
	err := spec.AssignProperties_From_Domains_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Domains_Spec() to populate field Spec")
	}
	domain.Spec = spec

	// Status
	var status Domain_STATUS
	err = status.AssignProperties_From_Domain_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Domain_STATUS() to populate field Status")
	}
	domain.Status = status

	// No error
	return nil
}

// AssignProperties_To_Domain populates the provided destination Domain from our Domain
func (domain *Domain) AssignProperties_To_Domain(destination *alpha20200601s.Domain) error {

	// ObjectMeta
	destination.ObjectMeta = *domain.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20200601s.Domains_Spec
	err := domain.Spec.AssignProperties_To_Domains_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Domains_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20200601s.Domain_STATUS
	err = domain.Status.AssignProperties_To_Domain_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Domain_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (domain *Domain) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: domain.Spec.OriginalVersion(),
		Kind:    "Domain",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Deprecated version of APIVersion. Use v1beta20200601.APIVersion instead
// +kubebuilder:validation:Enum={"2020-06-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-06-01")

// Deprecated version of Domain_STATUS. Use v1beta20200601.Domain_STATUS instead
type Domain_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions                 []conditions.Condition                                        `json:"conditions,omitempty"`
	Endpoint                   *string                                                       `json:"endpoint,omitempty"`
	Id                         *string                                                       `json:"id,omitempty"`
	InboundIpRules             []InboundIpRule_STATUS                                        `json:"inboundIpRules,omitempty"`
	InputSchema                *DomainProperties_STATUS_InputSchema                          `json:"inputSchema,omitempty"`
	InputSchemaMapping         *InputSchemaMapping_STATUS                                    `json:"inputSchemaMapping,omitempty"`
	Location                   *string                                                       `json:"location,omitempty"`
	MetricResourceId           *string                                                       `json:"metricResourceId,omitempty"`
	Name                       *string                                                       `json:"name,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	ProvisioningState          *DomainProperties_STATUS_ProvisioningState                    `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *DomainProperties_STATUS_PublicNetworkAccess                  `json:"publicNetworkAccess,omitempty"`
	SystemData                 *SystemData_STATUS                                            `json:"systemData,omitempty"`
	Tags                       map[string]string                                             `json:"tags,omitempty"`
	Type                       *string                                                       `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Domain_STATUS{}

// ConvertStatusFrom populates our Domain_STATUS from the provided source
func (domain *Domain_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20200601s.Domain_STATUS)
	if ok {
		// Populate our instance from source
		return domain.AssignProperties_From_Domain_STATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20200601s.Domain_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = domain.AssignProperties_From_Domain_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Domain_STATUS
func (domain *Domain_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20200601s.Domain_STATUS)
	if ok {
		// Populate destination from our instance
		return domain.AssignProperties_To_Domain_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20200601s.Domain_STATUS{}
	err := domain.AssignProperties_To_Domain_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Domain_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domain *Domain_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Domain_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domain *Domain_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Domain_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Domain_STATUSARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Endpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Endpoint != nil {
			endpoint := *typedInput.Properties.Endpoint
			domain.Endpoint = &endpoint
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		domain.Id = &id
	}

	// Set property ‘InboundIpRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.InboundIpRules {
			var item1 InboundIpRule_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			domain.InboundIpRules = append(domain.InboundIpRules, item1)
		}
	}

	// Set property ‘InputSchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchema != nil {
			inputSchema := *typedInput.Properties.InputSchema
			domain.InputSchema = &inputSchema
		}
	}

	// Set property ‘InputSchemaMapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchemaMapping != nil {
			var inputSchemaMapping1 InputSchemaMapping_STATUS
			err := inputSchemaMapping1.PopulateFromARM(owner, *typedInput.Properties.InputSchemaMapping)
			if err != nil {
				return err
			}
			inputSchemaMapping := inputSchemaMapping1
			domain.InputSchemaMapping = &inputSchemaMapping
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		domain.Location = &location
	}

	// Set property ‘MetricResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MetricResourceId != nil {
			metricResourceId := *typedInput.Properties.MetricResourceId
			domain.MetricResourceId = &metricResourceId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		domain.Name = &name
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			domain.PrivateEndpointConnections = append(domain.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			domain.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			domain.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		domain.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		domain.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			domain.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		domain.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Domain_STATUS populates our Domain_STATUS from the provided source Domain_STATUS
func (domain *Domain_STATUS) AssignProperties_From_Domain_STATUS(source *alpha20200601s.Domain_STATUS) error {

	// Conditions
	domain.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Endpoint
	domain.Endpoint = genruntime.ClonePointerToString(source.Endpoint)

	// Id
	domain.Id = genruntime.ClonePointerToString(source.Id)

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule_STATUS, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule_STATUS
			err := inboundIpRule.AssignProperties_From_InboundIpRule_STATUS(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_InboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domain.InboundIpRules = inboundIpRuleList
	} else {
		domain.InboundIpRules = nil
	}

	// InputSchema
	if source.InputSchema != nil {
		inputSchema := DomainProperties_STATUS_InputSchema(*source.InputSchema)
		domain.InputSchema = &inputSchema
	} else {
		domain.InputSchema = nil
	}

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping_STATUS
		err := inputSchemaMapping.AssignProperties_From_InputSchemaMapping_STATUS(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_InputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		domain.InputSchemaMapping = &inputSchemaMapping
	} else {
		domain.InputSchemaMapping = nil
	}

	// Location
	domain.Location = genruntime.ClonePointerToString(source.Location)

	// MetricResourceId
	domain.MetricResourceId = genruntime.ClonePointerToString(source.MetricResourceId)

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
			err := privateEndpointConnection.AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		domain.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		domain.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := DomainProperties_STATUS_ProvisioningState(*source.ProvisioningState)
		domain.ProvisioningState = &provisioningState
	} else {
		domain.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := DomainProperties_STATUS_PublicNetworkAccess(*source.PublicNetworkAccess)
		domain.PublicNetworkAccess = &publicNetworkAccess
	} else {
		domain.PublicNetworkAccess = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		domain.SystemData = &systemDatum
	} else {
		domain.SystemData = nil
	}

	// Tags
	domain.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	domain.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Domain_STATUS populates the provided destination Domain_STATUS from our Domain_STATUS
func (domain *Domain_STATUS) AssignProperties_To_Domain_STATUS(destination *alpha20200601s.Domain_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(domain.Conditions)

	// Endpoint
	destination.Endpoint = genruntime.ClonePointerToString(domain.Endpoint)

	// Id
	destination.Id = genruntime.ClonePointerToString(domain.Id)

	// InboundIpRules
	if domain.InboundIpRules != nil {
		inboundIpRuleList := make([]alpha20200601s.InboundIpRule_STATUS, len(domain.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domain.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule alpha20200601s.InboundIpRule_STATUS
			err := inboundIpRuleItem.AssignProperties_To_InboundIpRule_STATUS(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_InboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	if domain.InputSchema != nil {
		inputSchema := string(*domain.InputSchema)
		destination.InputSchema = &inputSchema
	} else {
		destination.InputSchema = nil
	}

	// InputSchemaMapping
	if domain.InputSchemaMapping != nil {
		var inputSchemaMapping alpha20200601s.InputSchemaMapping_STATUS
		err := domain.InputSchemaMapping.AssignProperties_To_InputSchemaMapping_STATUS(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_InputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domain.Location)

	// MetricResourceId
	destination.MetricResourceId = genruntime.ClonePointerToString(domain.MetricResourceId)

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// PrivateEndpointConnections
	if domain.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]alpha20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded, len(domain.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range domain.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection alpha20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if domain.ProvisioningState != nil {
		provisioningState := string(*domain.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if domain.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*domain.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// SystemData
	if domain.SystemData != nil {
		var systemDatum alpha20200601s.SystemData_STATUS
		err := domain.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domain.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(domain.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Domains_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName          string                        `json:"azureName,omitempty"`
	InboundIpRules     []InboundIpRule               `json:"inboundIpRules,omitempty"`
	InputSchema        *DomainProperties_InputSchema `json:"inputSchema,omitempty"`
	InputSchemaMapping *JsonInputSchemaMapping       `json:"inputSchemaMapping,omitempty"`
	Location           *string                       `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference    `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PublicNetworkAccess *DomainProperties_PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`
	Tags                map[string]string                     `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &Domains_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (domains *Domains_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if domains == nil {
		return nil, nil
	}
	result := &Domains_SpecARM{}

	// Set property ‘Location’:
	if domains.Location != nil {
		location := *domains.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if domains.InboundIpRules != nil ||
		domains.InputSchema != nil ||
		domains.InputSchemaMapping != nil ||
		domains.PublicNetworkAccess != nil {
		result.Properties = &DomainPropertiesARM{}
	}
	for _, item := range domains.InboundIpRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.InboundIpRules = append(result.Properties.InboundIpRules, *itemARM.(*InboundIpRuleARM))
	}
	if domains.InputSchema != nil {
		inputSchema := *domains.InputSchema
		result.Properties.InputSchema = &inputSchema
	}
	if domains.InputSchemaMapping != nil {
		inputSchemaMappingARM, err := (*domains.InputSchemaMapping).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		inputSchemaMapping := *inputSchemaMappingARM.(*JsonInputSchemaMappingARM)
		result.Properties.InputSchemaMapping = &inputSchemaMapping
	}
	if domains.PublicNetworkAccess != nil {
		publicNetworkAccess := *domains.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if domains.Tags != nil {
		result.Tags = make(map[string]string, len(domains.Tags))
		for key, value := range domains.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domains *Domains_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Domains_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domains *Domains_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Domains_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Domains_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	domains.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘InboundIpRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.InboundIpRules {
			var item1 InboundIpRule
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			domains.InboundIpRules = append(domains.InboundIpRules, item1)
		}
	}

	// Set property ‘InputSchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchema != nil {
			inputSchema := *typedInput.Properties.InputSchema
			domains.InputSchema = &inputSchema
		}
	}

	// Set property ‘InputSchemaMapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchemaMapping != nil {
			var inputSchemaMapping1 JsonInputSchemaMapping
			err := inputSchemaMapping1.PopulateFromARM(owner, *typedInput.Properties.InputSchemaMapping)
			if err != nil {
				return err
			}
			inputSchemaMapping := inputSchemaMapping1
			domains.InputSchemaMapping = &inputSchemaMapping
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		domains.Location = &location
	}

	// Set property ‘Owner’:
	domains.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			domains.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		domains.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			domains.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Domains_Spec{}

// ConvertSpecFrom populates our Domains_Spec from the provided source
func (domains *Domains_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20200601s.Domains_Spec)
	if ok {
		// Populate our instance from source
		return domains.AssignProperties_From_Domains_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20200601s.Domains_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = domains.AssignProperties_From_Domains_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Domains_Spec
func (domains *Domains_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20200601s.Domains_Spec)
	if ok {
		// Populate destination from our instance
		return domains.AssignProperties_To_Domains_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20200601s.Domains_Spec{}
	err := domains.AssignProperties_To_Domains_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Domains_Spec populates our Domains_Spec from the provided source Domains_Spec
func (domains *Domains_Spec) AssignProperties_From_Domains_Spec(source *alpha20200601s.Domains_Spec) error {

	// AzureName
	domains.AzureName = source.AzureName

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule
			err := inboundIpRule.AssignProperties_From_InboundIpRule(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_InboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domains.InboundIpRules = inboundIpRuleList
	} else {
		domains.InboundIpRules = nil
	}

	// InputSchema
	if source.InputSchema != nil {
		inputSchema := DomainProperties_InputSchema(*source.InputSchema)
		domains.InputSchema = &inputSchema
	} else {
		domains.InputSchema = nil
	}

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping JsonInputSchemaMapping
		err := inputSchemaMapping.AssignProperties_From_JsonInputSchemaMapping(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonInputSchemaMapping() to populate field InputSchemaMapping")
		}
		domains.InputSchemaMapping = &inputSchemaMapping
	} else {
		domains.InputSchemaMapping = nil
	}

	// Location
	domains.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		domains.Owner = &owner
	} else {
		domains.Owner = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := DomainProperties_PublicNetworkAccess(*source.PublicNetworkAccess)
		domains.PublicNetworkAccess = &publicNetworkAccess
	} else {
		domains.PublicNetworkAccess = nil
	}

	// Tags
	domains.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_Domains_Spec populates the provided destination Domains_Spec from our Domains_Spec
func (domains *Domains_Spec) AssignProperties_To_Domains_Spec(destination *alpha20200601s.Domains_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = domains.AzureName

	// InboundIpRules
	if domains.InboundIpRules != nil {
		inboundIpRuleList := make([]alpha20200601s.InboundIpRule, len(domains.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domains.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule alpha20200601s.InboundIpRule
			err := inboundIpRuleItem.AssignProperties_To_InboundIpRule(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_InboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	if domains.InputSchema != nil {
		inputSchema := string(*domains.InputSchema)
		destination.InputSchema = &inputSchema
	} else {
		destination.InputSchema = nil
	}

	// InputSchemaMapping
	if domains.InputSchemaMapping != nil {
		var inputSchemaMapping alpha20200601s.JsonInputSchemaMapping
		err := domains.InputSchemaMapping.AssignProperties_To_JsonInputSchemaMapping(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonInputSchemaMapping() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domains.Location)

	// OriginalVersion
	destination.OriginalVersion = domains.OriginalVersion()

	// Owner
	if domains.Owner != nil {
		owner := domains.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	if domains.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*domains.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domains.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (domains *Domains_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (domains *Domains_Spec) SetAzureName(azureName string) { domains.AzureName = azureName }

// Deprecated version of DomainProperties_InputSchema. Use v1beta20200601.DomainProperties_InputSchema instead
// +kubebuilder:validation:Enum={"CloudEventSchemaV1_0","CustomEventSchema","EventGridSchema"}
type DomainProperties_InputSchema string

const (
	DomainProperties_InputSchema_CloudEventSchemaV1_0 = DomainProperties_InputSchema("CloudEventSchemaV1_0")
	DomainProperties_InputSchema_CustomEventSchema    = DomainProperties_InputSchema("CustomEventSchema")
	DomainProperties_InputSchema_EventGridSchema      = DomainProperties_InputSchema("EventGridSchema")
)

// Deprecated version of DomainProperties_PublicNetworkAccess. Use v1beta20200601.DomainProperties_PublicNetworkAccess
// instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type DomainProperties_PublicNetworkAccess string

const (
	DomainProperties_PublicNetworkAccess_Disabled = DomainProperties_PublicNetworkAccess("Disabled")
	DomainProperties_PublicNetworkAccess_Enabled  = DomainProperties_PublicNetworkAccess("Enabled")
)

// Deprecated version of DomainProperties_STATUS_InputSchema. Use v1beta20200601.DomainProperties_STATUS_InputSchema instead
type DomainProperties_STATUS_InputSchema string

const (
	DomainProperties_STATUS_InputSchema_CloudEventSchemaV1_0 = DomainProperties_STATUS_InputSchema("CloudEventSchemaV1_0")
	DomainProperties_STATUS_InputSchema_CustomEventSchema    = DomainProperties_STATUS_InputSchema("CustomEventSchema")
	DomainProperties_STATUS_InputSchema_EventGridSchema      = DomainProperties_STATUS_InputSchema("EventGridSchema")
)

// Deprecated version of DomainProperties_STATUS_ProvisioningState. Use
// v1beta20200601.DomainProperties_STATUS_ProvisioningState instead
type DomainProperties_STATUS_ProvisioningState string

const (
	DomainProperties_STATUS_ProvisioningState_Canceled  = DomainProperties_STATUS_ProvisioningState("Canceled")
	DomainProperties_STATUS_ProvisioningState_Creating  = DomainProperties_STATUS_ProvisioningState("Creating")
	DomainProperties_STATUS_ProvisioningState_Deleting  = DomainProperties_STATUS_ProvisioningState("Deleting")
	DomainProperties_STATUS_ProvisioningState_Failed    = DomainProperties_STATUS_ProvisioningState("Failed")
	DomainProperties_STATUS_ProvisioningState_Succeeded = DomainProperties_STATUS_ProvisioningState("Succeeded")
	DomainProperties_STATUS_ProvisioningState_Updating  = DomainProperties_STATUS_ProvisioningState("Updating")
)

// Deprecated version of DomainProperties_STATUS_PublicNetworkAccess. Use
// v1beta20200601.DomainProperties_STATUS_PublicNetworkAccess instead
type DomainProperties_STATUS_PublicNetworkAccess string

const (
	DomainProperties_STATUS_PublicNetworkAccess_Disabled = DomainProperties_STATUS_PublicNetworkAccess("Disabled")
	DomainProperties_STATUS_PublicNetworkAccess_Enabled  = DomainProperties_STATUS_PublicNetworkAccess("Enabled")
)

// Deprecated version of InboundIpRule. Use v1beta20200601.InboundIpRule instead
type InboundIpRule struct {
	Action *InboundIpRule_Action `json:"action,omitempty"`
	IpMask *string               `json:"ipMask,omitempty"`
}

var _ genruntime.ARMTransformer = &InboundIpRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *InboundIpRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &InboundIpRuleARM{}

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘IpMask’:
	if rule.IpMask != nil {
		ipMask := *rule.IpMask
		result.IpMask = &ipMask
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *InboundIpRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &InboundIpRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *InboundIpRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(InboundIpRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected InboundIpRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘IpMask’:
	if typedInput.IpMask != nil {
		ipMask := *typedInput.IpMask
		rule.IpMask = &ipMask
	}

	// No error
	return nil
}

// AssignProperties_From_InboundIpRule populates our InboundIpRule from the provided source InboundIpRule
func (rule *InboundIpRule) AssignProperties_From_InboundIpRule(source *alpha20200601s.InboundIpRule) error {

	// Action
	if source.Action != nil {
		action := InboundIpRule_Action(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// No error
	return nil
}

// AssignProperties_To_InboundIpRule populates the provided destination InboundIpRule from our InboundIpRule
func (rule *InboundIpRule) AssignProperties_To_InboundIpRule(destination *alpha20200601s.InboundIpRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of InboundIpRule_STATUS. Use v1beta20200601.InboundIpRule_STATUS instead
type InboundIpRule_STATUS struct {
	Action *InboundIpRule_STATUS_Action `json:"action,omitempty"`
	IpMask *string                      `json:"ipMask,omitempty"`
}

var _ genruntime.FromARMConverter = &InboundIpRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *InboundIpRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &InboundIpRule_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *InboundIpRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(InboundIpRule_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected InboundIpRule_STATUSARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘IpMask’:
	if typedInput.IpMask != nil {
		ipMask := *typedInput.IpMask
		rule.IpMask = &ipMask
	}

	// No error
	return nil
}

// AssignProperties_From_InboundIpRule_STATUS populates our InboundIpRule_STATUS from the provided source InboundIpRule_STATUS
func (rule *InboundIpRule_STATUS) AssignProperties_From_InboundIpRule_STATUS(source *alpha20200601s.InboundIpRule_STATUS) error {

	// Action
	if source.Action != nil {
		action := InboundIpRule_STATUS_Action(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// No error
	return nil
}

// AssignProperties_To_InboundIpRule_STATUS populates the provided destination InboundIpRule_STATUS from our InboundIpRule_STATUS
func (rule *InboundIpRule_STATUS) AssignProperties_To_InboundIpRule_STATUS(destination *alpha20200601s.InboundIpRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of InputSchemaMapping_STATUS. Use v1beta20200601.InputSchemaMapping_STATUS instead
type InputSchemaMapping_STATUS struct {
	InputSchemaMappingType *InputSchemaMapping_STATUS_InputSchemaMappingType `json:"inputSchemaMappingType,omitempty"`
}

var _ genruntime.FromARMConverter = &InputSchemaMapping_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mapping *InputSchemaMapping_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &InputSchemaMapping_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mapping *InputSchemaMapping_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(InputSchemaMapping_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected InputSchemaMapping_STATUSARM, got %T", armInput)
	}

	// Set property ‘InputSchemaMappingType’:
	if typedInput.InputSchemaMappingType != nil {
		inputSchemaMappingType := *typedInput.InputSchemaMappingType
		mapping.InputSchemaMappingType = &inputSchemaMappingType
	}

	// No error
	return nil
}

// AssignProperties_From_InputSchemaMapping_STATUS populates our InputSchemaMapping_STATUS from the provided source InputSchemaMapping_STATUS
func (mapping *InputSchemaMapping_STATUS) AssignProperties_From_InputSchemaMapping_STATUS(source *alpha20200601s.InputSchemaMapping_STATUS) error {

	// InputSchemaMappingType
	if source.InputSchemaMappingType != nil {
		inputSchemaMappingType := InputSchemaMapping_STATUS_InputSchemaMappingType(*source.InputSchemaMappingType)
		mapping.InputSchemaMappingType = &inputSchemaMappingType
	} else {
		mapping.InputSchemaMappingType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_InputSchemaMapping_STATUS populates the provided destination InputSchemaMapping_STATUS from our InputSchemaMapping_STATUS
func (mapping *InputSchemaMapping_STATUS) AssignProperties_To_InputSchemaMapping_STATUS(destination *alpha20200601s.InputSchemaMapping_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// InputSchemaMappingType
	if mapping.InputSchemaMappingType != nil {
		inputSchemaMappingType := string(*mapping.InputSchemaMappingType)
		destination.InputSchemaMappingType = &inputSchemaMappingType
	} else {
		destination.InputSchemaMappingType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of JsonInputSchemaMapping. Use v1beta20200601.JsonInputSchemaMapping instead
type JsonInputSchemaMapping struct {
	// +kubebuilder:validation:Required
	InputSchemaMappingType *JsonInputSchemaMapping_InputSchemaMappingType `json:"inputSchemaMappingType,omitempty"`
	Properties             *JsonInputSchemaMappingProperties              `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &JsonInputSchemaMapping{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (mapping *JsonInputSchemaMapping) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if mapping == nil {
		return nil, nil
	}
	result := &JsonInputSchemaMappingARM{}

	// Set property ‘InputSchemaMappingType’:
	if mapping.InputSchemaMappingType != nil {
		inputSchemaMappingType := *mapping.InputSchemaMappingType
		result.InputSchemaMappingType = &inputSchemaMappingType
	}

	// Set property ‘Properties’:
	if mapping.Properties != nil {
		propertiesARM, err := (*mapping.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*JsonInputSchemaMappingPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mapping *JsonInputSchemaMapping) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &JsonInputSchemaMappingARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mapping *JsonInputSchemaMapping) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(JsonInputSchemaMappingARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected JsonInputSchemaMappingARM, got %T", armInput)
	}

	// Set property ‘InputSchemaMappingType’:
	if typedInput.InputSchemaMappingType != nil {
		inputSchemaMappingType := *typedInput.InputSchemaMappingType
		mapping.InputSchemaMappingType = &inputSchemaMappingType
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 JsonInputSchemaMappingProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		mapping.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_JsonInputSchemaMapping populates our JsonInputSchemaMapping from the provided source JsonInputSchemaMapping
func (mapping *JsonInputSchemaMapping) AssignProperties_From_JsonInputSchemaMapping(source *alpha20200601s.JsonInputSchemaMapping) error {

	// InputSchemaMappingType
	if source.InputSchemaMappingType != nil {
		inputSchemaMappingType := JsonInputSchemaMapping_InputSchemaMappingType(*source.InputSchemaMappingType)
		mapping.InputSchemaMappingType = &inputSchemaMappingType
	} else {
		mapping.InputSchemaMappingType = nil
	}

	// Properties
	if source.Properties != nil {
		var property JsonInputSchemaMappingProperties
		err := property.AssignProperties_From_JsonInputSchemaMappingProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonInputSchemaMappingProperties() to populate field Properties")
		}
		mapping.Properties = &property
	} else {
		mapping.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_JsonInputSchemaMapping populates the provided destination JsonInputSchemaMapping from our JsonInputSchemaMapping
func (mapping *JsonInputSchemaMapping) AssignProperties_To_JsonInputSchemaMapping(destination *alpha20200601s.JsonInputSchemaMapping) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// InputSchemaMappingType
	if mapping.InputSchemaMappingType != nil {
		inputSchemaMappingType := string(*mapping.InputSchemaMappingType)
		destination.InputSchemaMappingType = &inputSchemaMappingType
	} else {
		destination.InputSchemaMappingType = nil
	}

	// Properties
	if mapping.Properties != nil {
		var property alpha20200601s.JsonInputSchemaMappingProperties
		err := mapping.Properties.AssignProperties_To_JsonInputSchemaMappingProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonInputSchemaMappingProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded. Use v1beta20200601.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded instead
type PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_STATUS_Domain_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_STATUS_Domain_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_STATUS_Domain_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded populates our PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded from the provided source PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(source *alpha20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded populates the provided destination PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded from our PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(destination *alpha20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SystemData_STATUS. Use v1beta20200601.SystemData_STATUS instead
type SystemData_STATUS struct {
	CreatedAt          *string                               `json:"createdAt,omitempty"`
	CreatedBy          *string                               `json:"createdBy,omitempty"`
	CreatedByType      *SystemData_STATUS_CreatedByType      `json:"createdByType,omitempty"`
	LastModifiedAt     *string                               `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                               `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *SystemData_STATUS_LastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_STATUSARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *alpha20200601s.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemData_STATUS_CreatedByType(*source.CreatedByType)
		data.CreatedByType = &createdByType
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemData_STATUS_LastModifiedByType(*source.LastModifiedByType)
		data.LastModifiedByType = &lastModifiedByType
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *alpha20200601s.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of InboundIpRule_Action. Use v1beta20200601.InboundIpRule_Action instead
// +kubebuilder:validation:Enum={"Allow"}
type InboundIpRule_Action string

const InboundIpRule_Action_Allow = InboundIpRule_Action("Allow")

// Deprecated version of InboundIpRule_STATUS_Action. Use v1beta20200601.InboundIpRule_STATUS_Action instead
type InboundIpRule_STATUS_Action string

const InboundIpRule_STATUS_Action_Allow = InboundIpRule_STATUS_Action("Allow")

// Deprecated version of InputSchemaMapping_STATUS_InputSchemaMappingType. Use
// v1beta20200601.InputSchemaMapping_STATUS_InputSchemaMappingType instead
type InputSchemaMapping_STATUS_InputSchemaMappingType string

const InputSchemaMapping_STATUS_InputSchemaMappingType_Json = InputSchemaMapping_STATUS_InputSchemaMappingType("Json")

// Deprecated version of JsonInputSchemaMapping_InputSchemaMappingType. Use
// v1beta20200601.JsonInputSchemaMapping_InputSchemaMappingType instead
// +kubebuilder:validation:Enum={"Json"}
type JsonInputSchemaMapping_InputSchemaMappingType string

const JsonInputSchemaMapping_InputSchemaMappingType_Json = JsonInputSchemaMapping_InputSchemaMappingType("Json")

// Deprecated version of JsonInputSchemaMappingProperties. Use v1beta20200601.JsonInputSchemaMappingProperties instead
type JsonInputSchemaMappingProperties struct {
	DataVersion *JsonFieldWithDefault `json:"dataVersion,omitempty"`
	EventTime   *JsonField            `json:"eventTime,omitempty"`
	EventType   *JsonFieldWithDefault `json:"eventType,omitempty"`
	Id          *JsonField            `json:"id,omitempty"`
	Subject     *JsonFieldWithDefault `json:"subject,omitempty"`
	Topic       *JsonField            `json:"topic,omitempty"`
}

var _ genruntime.ARMTransformer = &JsonInputSchemaMappingProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *JsonInputSchemaMappingProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &JsonInputSchemaMappingPropertiesARM{}

	// Set property ‘DataVersion’:
	if properties.DataVersion != nil {
		dataVersionARM, err := (*properties.DataVersion).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		dataVersion := *dataVersionARM.(*JsonFieldWithDefaultARM)
		result.DataVersion = &dataVersion
	}

	// Set property ‘EventTime’:
	if properties.EventTime != nil {
		eventTimeARM, err := (*properties.EventTime).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		eventTime := *eventTimeARM.(*JsonFieldARM)
		result.EventTime = &eventTime
	}

	// Set property ‘EventType’:
	if properties.EventType != nil {
		eventTypeARM, err := (*properties.EventType).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		eventType := *eventTypeARM.(*JsonFieldWithDefaultARM)
		result.EventType = &eventType
	}

	// Set property ‘Id’:
	if properties.Id != nil {
		idARM, err := (*properties.Id).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		id := *idARM.(*JsonFieldARM)
		result.Id = &id
	}

	// Set property ‘Subject’:
	if properties.Subject != nil {
		subjectARM, err := (*properties.Subject).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		subject := *subjectARM.(*JsonFieldWithDefaultARM)
		result.Subject = &subject
	}

	// Set property ‘Topic’:
	if properties.Topic != nil {
		topicARM, err := (*properties.Topic).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		topic := *topicARM.(*JsonFieldARM)
		result.Topic = &topic
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *JsonInputSchemaMappingProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &JsonInputSchemaMappingPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *JsonInputSchemaMappingProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(JsonInputSchemaMappingPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected JsonInputSchemaMappingPropertiesARM, got %T", armInput)
	}

	// Set property ‘DataVersion’:
	if typedInput.DataVersion != nil {
		var dataVersion1 JsonFieldWithDefault
		err := dataVersion1.PopulateFromARM(owner, *typedInput.DataVersion)
		if err != nil {
			return err
		}
		dataVersion := dataVersion1
		properties.DataVersion = &dataVersion
	}

	// Set property ‘EventTime’:
	if typedInput.EventTime != nil {
		var eventTime1 JsonField
		err := eventTime1.PopulateFromARM(owner, *typedInput.EventTime)
		if err != nil {
			return err
		}
		eventTime := eventTime1
		properties.EventTime = &eventTime
	}

	// Set property ‘EventType’:
	if typedInput.EventType != nil {
		var eventType1 JsonFieldWithDefault
		err := eventType1.PopulateFromARM(owner, *typedInput.EventType)
		if err != nil {
			return err
		}
		eventType := eventType1
		properties.EventType = &eventType
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		var id1 JsonField
		err := id1.PopulateFromARM(owner, *typedInput.Id)
		if err != nil {
			return err
		}
		id := id1
		properties.Id = &id
	}

	// Set property ‘Subject’:
	if typedInput.Subject != nil {
		var subject1 JsonFieldWithDefault
		err := subject1.PopulateFromARM(owner, *typedInput.Subject)
		if err != nil {
			return err
		}
		subject := subject1
		properties.Subject = &subject
	}

	// Set property ‘Topic’:
	if typedInput.Topic != nil {
		var topic1 JsonField
		err := topic1.PopulateFromARM(owner, *typedInput.Topic)
		if err != nil {
			return err
		}
		topic := topic1
		properties.Topic = &topic
	}

	// No error
	return nil
}

// AssignProperties_From_JsonInputSchemaMappingProperties populates our JsonInputSchemaMappingProperties from the provided source JsonInputSchemaMappingProperties
func (properties *JsonInputSchemaMappingProperties) AssignProperties_From_JsonInputSchemaMappingProperties(source *alpha20200601s.JsonInputSchemaMappingProperties) error {

	// DataVersion
	if source.DataVersion != nil {
		var dataVersion JsonFieldWithDefault
		err := dataVersion.AssignProperties_From_JsonFieldWithDefault(source.DataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault() to populate field DataVersion")
		}
		properties.DataVersion = &dataVersion
	} else {
		properties.DataVersion = nil
	}

	// EventTime
	if source.EventTime != nil {
		var eventTime JsonField
		err := eventTime.AssignProperties_From_JsonField(source.EventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField() to populate field EventTime")
		}
		properties.EventTime = &eventTime
	} else {
		properties.EventTime = nil
	}

	// EventType
	if source.EventType != nil {
		var eventType JsonFieldWithDefault
		err := eventType.AssignProperties_From_JsonFieldWithDefault(source.EventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault() to populate field EventType")
		}
		properties.EventType = &eventType
	} else {
		properties.EventType = nil
	}

	// Id
	if source.Id != nil {
		var id JsonField
		err := id.AssignProperties_From_JsonField(source.Id)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField() to populate field Id")
		}
		properties.Id = &id
	} else {
		properties.Id = nil
	}

	// Subject
	if source.Subject != nil {
		var subject JsonFieldWithDefault
		err := subject.AssignProperties_From_JsonFieldWithDefault(source.Subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault() to populate field Subject")
		}
		properties.Subject = &subject
	} else {
		properties.Subject = nil
	}

	// Topic
	if source.Topic != nil {
		var topic JsonField
		err := topic.AssignProperties_From_JsonField(source.Topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField() to populate field Topic")
		}
		properties.Topic = &topic
	} else {
		properties.Topic = nil
	}

	// No error
	return nil
}

// AssignProperties_To_JsonInputSchemaMappingProperties populates the provided destination JsonInputSchemaMappingProperties from our JsonInputSchemaMappingProperties
func (properties *JsonInputSchemaMappingProperties) AssignProperties_To_JsonInputSchemaMappingProperties(destination *alpha20200601s.JsonInputSchemaMappingProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataVersion
	if properties.DataVersion != nil {
		var dataVersion alpha20200601s.JsonFieldWithDefault
		err := properties.DataVersion.AssignProperties_To_JsonFieldWithDefault(&dataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault() to populate field DataVersion")
		}
		destination.DataVersion = &dataVersion
	} else {
		destination.DataVersion = nil
	}

	// EventTime
	if properties.EventTime != nil {
		var eventTime alpha20200601s.JsonField
		err := properties.EventTime.AssignProperties_To_JsonField(&eventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField() to populate field EventTime")
		}
		destination.EventTime = &eventTime
	} else {
		destination.EventTime = nil
	}

	// EventType
	if properties.EventType != nil {
		var eventType alpha20200601s.JsonFieldWithDefault
		err := properties.EventType.AssignProperties_To_JsonFieldWithDefault(&eventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault() to populate field EventType")
		}
		destination.EventType = &eventType
	} else {
		destination.EventType = nil
	}

	// Id
	if properties.Id != nil {
		var id alpha20200601s.JsonField
		err := properties.Id.AssignProperties_To_JsonField(&id)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField() to populate field Id")
		}
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Subject
	if properties.Subject != nil {
		var subject alpha20200601s.JsonFieldWithDefault
		err := properties.Subject.AssignProperties_To_JsonFieldWithDefault(&subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault() to populate field Subject")
		}
		destination.Subject = &subject
	} else {
		destination.Subject = nil
	}

	// Topic
	if properties.Topic != nil {
		var topic alpha20200601s.JsonField
		err := properties.Topic.AssignProperties_To_JsonField(&topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField() to populate field Topic")
		}
		destination.Topic = &topic
	} else {
		destination.Topic = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of JsonField. Use v1beta20200601.JsonField instead
type JsonField struct {
	SourceField *string `json:"sourceField,omitempty"`
}

var _ genruntime.ARMTransformer = &JsonField{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (field *JsonField) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if field == nil {
		return nil, nil
	}
	result := &JsonFieldARM{}

	// Set property ‘SourceField’:
	if field.SourceField != nil {
		sourceField := *field.SourceField
		result.SourceField = &sourceField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (field *JsonField) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &JsonFieldARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (field *JsonField) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(JsonFieldARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected JsonFieldARM, got %T", armInput)
	}

	// Set property ‘SourceField’:
	if typedInput.SourceField != nil {
		sourceField := *typedInput.SourceField
		field.SourceField = &sourceField
	}

	// No error
	return nil
}

// AssignProperties_From_JsonField populates our JsonField from the provided source JsonField
func (field *JsonField) AssignProperties_From_JsonField(source *alpha20200601s.JsonField) error {

	// SourceField
	field.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// No error
	return nil
}

// AssignProperties_To_JsonField populates the provided destination JsonField from our JsonField
func (field *JsonField) AssignProperties_To_JsonField(destination *alpha20200601s.JsonField) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(field.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of JsonFieldWithDefault. Use v1beta20200601.JsonFieldWithDefault instead
type JsonFieldWithDefault struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	SourceField  *string `json:"sourceField,omitempty"`
}

var _ genruntime.ARMTransformer = &JsonFieldWithDefault{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (withDefault *JsonFieldWithDefault) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if withDefault == nil {
		return nil, nil
	}
	result := &JsonFieldWithDefaultARM{}

	// Set property ‘DefaultValue’:
	if withDefault.DefaultValue != nil {
		defaultValue := *withDefault.DefaultValue
		result.DefaultValue = &defaultValue
	}

	// Set property ‘SourceField’:
	if withDefault.SourceField != nil {
		sourceField := *withDefault.SourceField
		result.SourceField = &sourceField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (withDefault *JsonFieldWithDefault) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &JsonFieldWithDefaultARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (withDefault *JsonFieldWithDefault) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(JsonFieldWithDefaultARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected JsonFieldWithDefaultARM, got %T", armInput)
	}

	// Set property ‘DefaultValue’:
	if typedInput.DefaultValue != nil {
		defaultValue := *typedInput.DefaultValue
		withDefault.DefaultValue = &defaultValue
	}

	// Set property ‘SourceField’:
	if typedInput.SourceField != nil {
		sourceField := *typedInput.SourceField
		withDefault.SourceField = &sourceField
	}

	// No error
	return nil
}

// AssignProperties_From_JsonFieldWithDefault populates our JsonFieldWithDefault from the provided source JsonFieldWithDefault
func (withDefault *JsonFieldWithDefault) AssignProperties_From_JsonFieldWithDefault(source *alpha20200601s.JsonFieldWithDefault) error {

	// DefaultValue
	withDefault.DefaultValue = genruntime.ClonePointerToString(source.DefaultValue)

	// SourceField
	withDefault.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// No error
	return nil
}

// AssignProperties_To_JsonFieldWithDefault populates the provided destination JsonFieldWithDefault from our JsonFieldWithDefault
func (withDefault *JsonFieldWithDefault) AssignProperties_To_JsonFieldWithDefault(destination *alpha20200601s.JsonFieldWithDefault) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultValue
	destination.DefaultValue = genruntime.ClonePointerToString(withDefault.DefaultValue)

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(withDefault.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
