// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/unknown_resourceDefinitions/eventSubscriptions
type EventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSubscriptions_Spec  `json:"spec,omitempty"`
	Status            EventSubscription_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &EventSubscription{}

// GetConditions returns the conditions of the resource
func (eventSubscription *EventSubscription) GetConditions() conditions.Conditions {
	return eventSubscription.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (eventSubscription *EventSubscription) SetConditions(conditions conditions.Conditions) {
	eventSubscription.Status.Conditions = conditions
}

var _ conversion.Convertible = &EventSubscription{}

// ConvertFrom populates our EventSubscription from the provided hub EventSubscription
func (eventSubscription *EventSubscription) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200601storage.EventSubscription)
	if !ok {
		return fmt.Errorf("expected storage:eventgrid/v1alpha1api20200601storage/EventSubscription but received %T instead", hub)
	}

	return eventSubscription.AssignPropertiesFromEventSubscription(source)
}

// ConvertTo populates the provided hub EventSubscription from our EventSubscription
func (eventSubscription *EventSubscription) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200601storage.EventSubscription)
	if !ok {
		return fmt.Errorf("expected storage:eventgrid/v1alpha1api20200601storage/EventSubscription but received %T instead", hub)
	}

	return eventSubscription.AssignPropertiesToEventSubscription(destination)
}

// +kubebuilder:webhook:path=/mutate-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=default.v1alpha1api20200601.eventsubscriptions.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &EventSubscription{}

// Default applies defaults to the EventSubscription resource
func (eventSubscription *EventSubscription) Default() {
	eventSubscription.defaultImpl()
	var temp interface{} = eventSubscription
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (eventSubscription *EventSubscription) defaultAzureName() {
	if eventSubscription.Spec.AzureName == "" {
		eventSubscription.Spec.AzureName = eventSubscription.Name
	}
}

// defaultImpl applies the code generated defaults to the EventSubscription resource
func (eventSubscription *EventSubscription) defaultImpl() { eventSubscription.defaultAzureName() }

var _ genruntime.KubernetesResource = &EventSubscription{}

// AzureName returns the Azure name of the resource
func (eventSubscription *EventSubscription) AzureName() string {
	return eventSubscription.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (eventSubscription EventSubscription) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (eventSubscription *EventSubscription) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindExtension
}

// GetSpec returns the specification of this resource
func (eventSubscription *EventSubscription) GetSpec() genruntime.ConvertibleSpec {
	return &eventSubscription.Spec
}

// GetStatus returns the status of this resource
func (eventSubscription *EventSubscription) GetStatus() genruntime.ConvertibleStatus {
	return &eventSubscription.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/eventSubscriptions"
func (eventSubscription *EventSubscription) GetType() string {
	return "Microsoft.EventGrid/eventSubscriptions"
}

// NewEmptyStatus returns a new empty (blank) status
func (eventSubscription *EventSubscription) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EventSubscription_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (eventSubscription *EventSubscription) Owner() *genruntime.ResourceReference {
	return &genruntime.ResourceReference{
		Group: eventSubscription.Spec.Owner.Group,
		Kind:  eventSubscription.Spec.Owner.Kind,
		Name:  eventSubscription.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (eventSubscription *EventSubscription) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EventSubscription_Status); ok {
		eventSubscription.Status = *st
		return nil
	}

	// Convert status to required version
	var st EventSubscription_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	eventSubscription.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=validate.v1alpha1api20200601.eventsubscriptions.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &EventSubscription{}

// ValidateCreate validates the creation of the resource
func (eventSubscription *EventSubscription) ValidateCreate() error {
	validations := eventSubscription.createValidations()
	var temp interface{} = eventSubscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (eventSubscription *EventSubscription) ValidateDelete() error {
	validations := eventSubscription.deleteValidations()
	var temp interface{} = eventSubscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (eventSubscription *EventSubscription) ValidateUpdate(old runtime.Object) error {
	validations := eventSubscription.updateValidations()
	var temp interface{} = eventSubscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (eventSubscription *EventSubscription) createValidations() []func() error {
	return []func() error{eventSubscription.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (eventSubscription *EventSubscription) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (eventSubscription *EventSubscription) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return eventSubscription.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (eventSubscription *EventSubscription) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&eventSubscription.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromEventSubscription populates our EventSubscription from the provided source EventSubscription
func (eventSubscription *EventSubscription) AssignPropertiesFromEventSubscription(source *v1alpha1api20200601storage.EventSubscription) error {

	// ObjectMeta
	eventSubscription.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec EventSubscriptions_Spec
	err := spec.AssignPropertiesFromEventSubscriptionsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionsSpec() to populate field Spec")
	}
	eventSubscription.Spec = spec

	// Status
	var status EventSubscription_Status
	err = status.AssignPropertiesFromEventSubscriptionStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionStatus() to populate field Status")
	}
	eventSubscription.Status = status

	// No error
	return nil
}

// AssignPropertiesToEventSubscription populates the provided destination EventSubscription from our EventSubscription
func (eventSubscription *EventSubscription) AssignPropertiesToEventSubscription(destination *v1alpha1api20200601storage.EventSubscription) error {

	// ObjectMeta
	destination.ObjectMeta = *eventSubscription.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200601storage.EventSubscriptions_Spec
	err := eventSubscription.Spec.AssignPropertiesToEventSubscriptionsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20200601storage.EventSubscription_Status
	err = eventSubscription.Status.AssignPropertiesToEventSubscriptionStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (eventSubscription *EventSubscription) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: eventSubscription.Spec.OriginalVersion(),
		Kind:    "EventSubscription",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/unknown_resourceDefinitions/eventSubscriptions
type EventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventSubscription `json:"items"`
}

type EventSubscription_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DeadLetterDestination: The DeadLetter destination of the event subscription.
	DeadLetterDestination *DeadLetterDestination_Status `json:"deadLetterDestination,omitempty"`

	//Destination: Information about the destination where events have to be delivered
	//for the event subscription.
	Destination *EventSubscriptionDestination_Status `json:"destination,omitempty"`

	//EventDeliverySchema: The event delivery schema for the event subscription.
	EventDeliverySchema *EventSubscriptionPropertiesStatusEventDeliverySchema `json:"eventDeliverySchema,omitempty"`

	//ExpirationTimeUtc: Expiration time of the event subscription.
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty"`

	//Filter: Information about the filter for the event subscription.
	Filter *EventSubscriptionFilter_Status `json:"filter,omitempty"`

	//Id: Fully qualified identifier of the resource.
	Id *string `json:"id,omitempty"`

	//Labels: List of user defined labels.
	Labels []string `json:"labels,omitempty"`

	//Name: Name of the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: Provisioning state of the event subscription.
	ProvisioningState *EventSubscriptionPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//RetryPolicy: The retry policy for events. This can be used to configure maximum
	//number of delivery attempts and time to live for events.
	RetryPolicy *RetryPolicy_Status `json:"retryPolicy,omitempty"`

	//SystemData: The system metadata relating to Event Subscription resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Topic: Name of the topic of the event subscription.
	Topic *string `json:"topic,omitempty"`

	//Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EventSubscription_Status{}

// ConvertStatusFrom populates our EventSubscription_Status from the provided source
func (eventSubscriptionStatus *EventSubscription_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20200601storage.EventSubscription_Status)
	if ok {
		// Populate our instance from source
		return eventSubscriptionStatus.AssignPropertiesFromEventSubscriptionStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.EventSubscription_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = eventSubscriptionStatus.AssignPropertiesFromEventSubscriptionStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EventSubscription_Status
func (eventSubscriptionStatus *EventSubscription_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20200601storage.EventSubscription_Status)
	if ok {
		// Populate destination from our instance
		return eventSubscriptionStatus.AssignPropertiesToEventSubscriptionStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.EventSubscription_Status{}
	err := eventSubscriptionStatus.AssignPropertiesToEventSubscriptionStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &EventSubscription_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionStatus *EventSubscription_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscription_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionStatus *EventSubscription_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscription_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscription_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetterDestination != nil {
			var deadLetterDestination1 DeadLetterDestination_Status
			err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
			if err != nil {
				return err
			}
			deadLetterDestination := deadLetterDestination1
			eventSubscriptionStatus.DeadLetterDestination = &deadLetterDestination
		}
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Destination != nil {
			var destination1 EventSubscriptionDestination_Status
			err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
			if err != nil {
				return err
			}
			destination := destination1
			eventSubscriptionStatus.Destination = &destination
		}
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EventDeliverySchema != nil {
			eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
			eventSubscriptionStatus.EventDeliverySchema = &eventDeliverySchema
		}
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpirationTimeUtc != nil {
			expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
			eventSubscriptionStatus.ExpirationTimeUtc = &expirationTimeUtc
		}
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Filter != nil {
			var filter1 EventSubscriptionFilter_Status
			err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
			if err != nil {
				return err
			}
			filter := filter1
			eventSubscriptionStatus.Filter = &filter
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		eventSubscriptionStatus.Id = &id
	}

	// Set property ‘Labels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Labels {
			eventSubscriptionStatus.Labels = append(eventSubscriptionStatus.Labels, item)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		eventSubscriptionStatus.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			eventSubscriptionStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryPolicy != nil {
			var retryPolicy1 RetryPolicy_Status
			err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
			if err != nil {
				return err
			}
			retryPolicy := retryPolicy1
			eventSubscriptionStatus.RetryPolicy = &retryPolicy
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		eventSubscriptionStatus.SystemData = &systemData
	}

	// Set property ‘Topic’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Topic != nil {
			topic := *typedInput.Properties.Topic
			eventSubscriptionStatus.Topic = &topic
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		eventSubscriptionStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionStatus populates our EventSubscription_Status from the provided source EventSubscription_Status
func (eventSubscriptionStatus *EventSubscription_Status) AssignPropertiesFromEventSubscriptionStatus(source *v1alpha1api20200601storage.EventSubscription_Status) error {

	// Conditions
	eventSubscriptionStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination_Status
		err := deadLetterDestination.AssignPropertiesFromDeadLetterDestinationStatus(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeadLetterDestinationStatus() to populate field DeadLetterDestination")
		}
		eventSubscriptionStatus.DeadLetterDestination = &deadLetterDestination
	} else {
		eventSubscriptionStatus.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination_Status
		err := destination.AssignPropertiesFromEventSubscriptionDestinationStatus(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionDestinationStatus() to populate field Destination")
		}
		eventSubscriptionStatus.Destination = &destination
	} else {
		eventSubscriptionStatus.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionPropertiesStatusEventDeliverySchema(*source.EventDeliverySchema)
		eventSubscriptionStatus.EventDeliverySchema = &eventDeliverySchema
	} else {
		eventSubscriptionStatus.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	eventSubscriptionStatus.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter_Status
		err := filter.AssignPropertiesFromEventSubscriptionFilterStatus(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionFilterStatus() to populate field Filter")
		}
		eventSubscriptionStatus.Filter = &filter
	} else {
		eventSubscriptionStatus.Filter = nil
	}

	// Id
	eventSubscriptionStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Labels
	eventSubscriptionStatus.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Name
	eventSubscriptionStatus.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := EventSubscriptionPropertiesStatusProvisioningState(*source.ProvisioningState)
		eventSubscriptionStatus.ProvisioningState = &provisioningState
	} else {
		eventSubscriptionStatus.ProvisioningState = nil
	}

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy_Status
		err := retryPolicy.AssignPropertiesFromRetryPolicyStatus(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetryPolicyStatus() to populate field RetryPolicy")
		}
		eventSubscriptionStatus.RetryPolicy = &retryPolicy
	} else {
		eventSubscriptionStatus.RetryPolicy = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		eventSubscriptionStatus.SystemData = &systemDatum
	} else {
		eventSubscriptionStatus.SystemData = nil
	}

	// Topic
	eventSubscriptionStatus.Topic = genruntime.ClonePointerToString(source.Topic)

	// Type
	eventSubscriptionStatus.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionStatus populates the provided destination EventSubscription_Status from our EventSubscription_Status
func (eventSubscriptionStatus *EventSubscription_Status) AssignPropertiesToEventSubscriptionStatus(destination *v1alpha1api20200601storage.EventSubscription_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(eventSubscriptionStatus.Conditions)

	// DeadLetterDestination
	if eventSubscriptionStatus.DeadLetterDestination != nil {
		var deadLetterDestination v1alpha1api20200601storage.DeadLetterDestination_Status
		err := eventSubscriptionStatus.DeadLetterDestination.AssignPropertiesToDeadLetterDestinationStatus(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeadLetterDestinationStatus() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if eventSubscriptionStatus.Destination != nil {
		var destinationLocal v1alpha1api20200601storage.EventSubscriptionDestination_Status
		err := eventSubscriptionStatus.Destination.AssignPropertiesToEventSubscriptionDestinationStatus(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionDestinationStatus() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if eventSubscriptionStatus.EventDeliverySchema != nil {
		eventDeliverySchema := string(*eventSubscriptionStatus.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(eventSubscriptionStatus.ExpirationTimeUtc)

	// Filter
	if eventSubscriptionStatus.Filter != nil {
		var filter v1alpha1api20200601storage.EventSubscriptionFilter_Status
		err := eventSubscriptionStatus.Filter.AssignPropertiesToEventSubscriptionFilterStatus(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionFilterStatus() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(eventSubscriptionStatus.Id)

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(eventSubscriptionStatus.Labels)

	// Name
	destination.Name = genruntime.ClonePointerToString(eventSubscriptionStatus.Name)

	// ProvisioningState
	if eventSubscriptionStatus.ProvisioningState != nil {
		provisioningState := string(*eventSubscriptionStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RetryPolicy
	if eventSubscriptionStatus.RetryPolicy != nil {
		var retryPolicy v1alpha1api20200601storage.RetryPolicy_Status
		err := eventSubscriptionStatus.RetryPolicy.AssignPropertiesToRetryPolicyStatus(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetryPolicyStatus() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// SystemData
	if eventSubscriptionStatus.SystemData != nil {
		var systemDatum v1alpha1api20200601storage.SystemData_Status
		err := eventSubscriptionStatus.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Topic
	destination.Topic = genruntime.ClonePointerToString(eventSubscriptionStatus.Topic)

	// Type
	destination.Type = genruntime.ClonePointerToString(eventSubscriptionStatus.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type EventSubscriptionsSpecAPIVersion string

const EventSubscriptionsSpecAPIVersion20200601 = EventSubscriptionsSpecAPIVersion("2020-06-01")

type EventSubscriptions_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DeadLetterDestination: Information about the dead letter destination for an
	//event subscription. To configure a deadletter destination, do not directly
	//instantiate an object of this class. Instead, instantiate an object of a derived
	//class. Currently, StorageBlobDeadLetterDestination is the only class that
	//derives from this class.
	DeadLetterDestination *StorageBlobDeadLetterDestination `json:"deadLetterDestination,omitempty"`

	//Destination: Information about the destination for an event subscription.
	Destination *EventSubscriptionDestination `json:"destination,omitempty"`

	//EventDeliverySchema: The event delivery schema for the event subscription.
	EventDeliverySchema *EventSubscriptionPropertiesEventDeliverySchema `json:"eventDeliverySchema,omitempty"`

	//ExpirationTimeUtc: Expiration time of the event subscription.
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty"`

	//Filter: Filter for the Event Subscription.
	Filter *EventSubscriptionFilter `json:"filter,omitempty"`

	//Labels: List of user defined labels.
	Labels []string `json:"labels,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.ArbitraryOwnerReference `json:"owner"`

	//RetryPolicy: Information about the retry policy for an event subscription.
	RetryPolicy *RetryPolicy `json:"retryPolicy,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptions_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventSubscriptionsSpec *EventSubscriptions_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventSubscriptionsSpec == nil {
		return nil, nil
	}
	var result EventSubscriptions_SpecARM

	// Set property ‘Location’:
	if eventSubscriptionsSpec.Location != nil {
		location := *eventSubscriptionsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if eventSubscriptionsSpec.DeadLetterDestination != nil {
		deadLetterDestinationARM, err := (*eventSubscriptionsSpec.DeadLetterDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deadLetterDestination := deadLetterDestinationARM.(StorageBlobDeadLetterDestinationARM)
		result.Properties.DeadLetterDestination = &deadLetterDestination
	}
	if eventSubscriptionsSpec.Destination != nil {
		destinationARM, err := (*eventSubscriptionsSpec.Destination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		destination := destinationARM.(EventSubscriptionDestinationARM)
		result.Properties.Destination = &destination
	}
	if eventSubscriptionsSpec.EventDeliverySchema != nil {
		eventDeliverySchema := *eventSubscriptionsSpec.EventDeliverySchema
		result.Properties.EventDeliverySchema = &eventDeliverySchema
	}
	if eventSubscriptionsSpec.ExpirationTimeUtc != nil {
		expirationTimeUtc := *eventSubscriptionsSpec.ExpirationTimeUtc
		result.Properties.ExpirationTimeUtc = &expirationTimeUtc
	}
	if eventSubscriptionsSpec.Filter != nil {
		filterARM, err := (*eventSubscriptionsSpec.Filter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		filter := filterARM.(EventSubscriptionFilterARM)
		result.Properties.Filter = &filter
	}
	for _, item := range eventSubscriptionsSpec.Labels {
		result.Properties.Labels = append(result.Properties.Labels, item)
	}
	if eventSubscriptionsSpec.RetryPolicy != nil {
		retryPolicyARM, err := (*eventSubscriptionsSpec.RetryPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		retryPolicy := retryPolicyARM.(RetryPolicyARM)
		result.Properties.RetryPolicy = &retryPolicy
	}

	// Set property ‘Tags’:
	if eventSubscriptionsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range eventSubscriptionsSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionsSpec *EventSubscriptions_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptions_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionsSpec *EventSubscriptions_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptions_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptions_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	eventSubscriptionsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties.DeadLetterDestination != nil {
		var deadLetterDestination1 StorageBlobDeadLetterDestination
		err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
		if err != nil {
			return err
		}
		deadLetterDestination := deadLetterDestination1
		eventSubscriptionsSpec.DeadLetterDestination = &deadLetterDestination
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties.Destination != nil {
		var destination1 EventSubscriptionDestination
		err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
		if err != nil {
			return err
		}
		destination := destination1
		eventSubscriptionsSpec.Destination = &destination
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties.EventDeliverySchema != nil {
		eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
		eventSubscriptionsSpec.EventDeliverySchema = &eventDeliverySchema
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties.ExpirationTimeUtc != nil {
		expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
		eventSubscriptionsSpec.ExpirationTimeUtc = &expirationTimeUtc
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties.Filter != nil {
		var filter1 EventSubscriptionFilter
		err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
		if err != nil {
			return err
		}
		filter := filter1
		eventSubscriptionsSpec.Filter = &filter
	}

	// Set property ‘Labels’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Labels {
		eventSubscriptionsSpec.Labels = append(eventSubscriptionsSpec.Labels, item)
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		eventSubscriptionsSpec.Location = &location
	}

	// Set property ‘Owner’:
	eventSubscriptionsSpec.Owner = owner

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties.RetryPolicy != nil {
		var retryPolicy1 RetryPolicy
		err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
		if err != nil {
			return err
		}
		retryPolicy := retryPolicy1
		eventSubscriptionsSpec.RetryPolicy = &retryPolicy
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		eventSubscriptionsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			eventSubscriptionsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &EventSubscriptions_Spec{}

// ConvertSpecFrom populates our EventSubscriptions_Spec from the provided source
func (eventSubscriptionsSpec *EventSubscriptions_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200601storage.EventSubscriptions_Spec)
	if ok {
		// Populate our instance from source
		return eventSubscriptionsSpec.AssignPropertiesFromEventSubscriptionsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.EventSubscriptions_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = eventSubscriptionsSpec.AssignPropertiesFromEventSubscriptionsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our EventSubscriptions_Spec
func (eventSubscriptionsSpec *EventSubscriptions_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200601storage.EventSubscriptions_Spec)
	if ok {
		// Populate destination from our instance
		return eventSubscriptionsSpec.AssignPropertiesToEventSubscriptionsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.EventSubscriptions_Spec{}
	err := eventSubscriptionsSpec.AssignPropertiesToEventSubscriptionsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromEventSubscriptionsSpec populates our EventSubscriptions_Spec from the provided source EventSubscriptions_Spec
func (eventSubscriptionsSpec *EventSubscriptions_Spec) AssignPropertiesFromEventSubscriptionsSpec(source *v1alpha1api20200601storage.EventSubscriptions_Spec) error {

	// AzureName
	eventSubscriptionsSpec.AzureName = source.AzureName

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination StorageBlobDeadLetterDestination
		err := deadLetterDestination.AssignPropertiesFromStorageBlobDeadLetterDestination(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageBlobDeadLetterDestination() to populate field DeadLetterDestination")
		}
		eventSubscriptionsSpec.DeadLetterDestination = &deadLetterDestination
	} else {
		eventSubscriptionsSpec.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination
		err := destination.AssignPropertiesFromEventSubscriptionDestination(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionDestination() to populate field Destination")
		}
		eventSubscriptionsSpec.Destination = &destination
	} else {
		eventSubscriptionsSpec.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionPropertiesEventDeliverySchema(*source.EventDeliverySchema)
		eventSubscriptionsSpec.EventDeliverySchema = &eventDeliverySchema
	} else {
		eventSubscriptionsSpec.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if source.ExpirationTimeUtc != nil {
		expirationTimeUtc := *source.ExpirationTimeUtc
		eventSubscriptionsSpec.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		eventSubscriptionsSpec.ExpirationTimeUtc = nil
	}

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter
		err := filter.AssignPropertiesFromEventSubscriptionFilter(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionFilter() to populate field Filter")
		}
		eventSubscriptionsSpec.Filter = &filter
	} else {
		eventSubscriptionsSpec.Filter = nil
	}

	// Labels
	eventSubscriptionsSpec.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Location
	eventSubscriptionsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	eventSubscriptionsSpec.Owner = source.Owner.Copy()

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy
		err := retryPolicy.AssignPropertiesFromRetryPolicy(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetryPolicy() to populate field RetryPolicy")
		}
		eventSubscriptionsSpec.RetryPolicy = &retryPolicy
	} else {
		eventSubscriptionsSpec.RetryPolicy = nil
	}

	// Tags
	eventSubscriptionsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionsSpec populates the provided destination EventSubscriptions_Spec from our EventSubscriptions_Spec
func (eventSubscriptionsSpec *EventSubscriptions_Spec) AssignPropertiesToEventSubscriptionsSpec(destination *v1alpha1api20200601storage.EventSubscriptions_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = eventSubscriptionsSpec.AzureName

	// DeadLetterDestination
	if eventSubscriptionsSpec.DeadLetterDestination != nil {
		var deadLetterDestination v1alpha1api20200601storage.StorageBlobDeadLetterDestination
		err := eventSubscriptionsSpec.DeadLetterDestination.AssignPropertiesToStorageBlobDeadLetterDestination(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageBlobDeadLetterDestination() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if eventSubscriptionsSpec.Destination != nil {
		var destinationLocal v1alpha1api20200601storage.EventSubscriptionDestination
		err := eventSubscriptionsSpec.Destination.AssignPropertiesToEventSubscriptionDestination(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionDestination() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if eventSubscriptionsSpec.EventDeliverySchema != nil {
		eventDeliverySchema := string(*eventSubscriptionsSpec.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if eventSubscriptionsSpec.ExpirationTimeUtc != nil {
		expirationTimeUtc := *eventSubscriptionsSpec.ExpirationTimeUtc
		destination.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		destination.ExpirationTimeUtc = nil
	}

	// Filter
	if eventSubscriptionsSpec.Filter != nil {
		var filter v1alpha1api20200601storage.EventSubscriptionFilter
		err := eventSubscriptionsSpec.Filter.AssignPropertiesToEventSubscriptionFilter(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionFilter() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(eventSubscriptionsSpec.Labels)

	// Location
	destination.Location = genruntime.ClonePointerToString(eventSubscriptionsSpec.Location)

	// OriginalVersion
	destination.OriginalVersion = eventSubscriptionsSpec.OriginalVersion()

	// Owner
	destination.Owner = eventSubscriptionsSpec.Owner.Copy()

	// RetryPolicy
	if eventSubscriptionsSpec.RetryPolicy != nil {
		var retryPolicy v1alpha1api20200601storage.RetryPolicy
		err := eventSubscriptionsSpec.RetryPolicy.AssignPropertiesToRetryPolicy(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetryPolicy() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(eventSubscriptionsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (eventSubscriptionsSpec *EventSubscriptions_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (eventSubscriptionsSpec *EventSubscriptions_Spec) SetAzureName(azureName string) {
	eventSubscriptionsSpec.AzureName = azureName
}

type DeadLetterDestination_Status struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the dead letter destination
	EndpointType DeadLetterDestinationStatusEndpointType `json:"endpointType"`
}

var _ genruntime.FromARMConverter = &DeadLetterDestination_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (deadLetterDestinationStatus *DeadLetterDestination_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeadLetterDestination_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (deadLetterDestinationStatus *DeadLetterDestination_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeadLetterDestination_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeadLetterDestination_StatusARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	deadLetterDestinationStatus.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromDeadLetterDestinationStatus populates our DeadLetterDestination_Status from the provided source DeadLetterDestination_Status
func (deadLetterDestinationStatus *DeadLetterDestination_Status) AssignPropertiesFromDeadLetterDestinationStatus(source *v1alpha1api20200601storage.DeadLetterDestination_Status) error {

	// EndpointType
	if source.EndpointType != nil {
		deadLetterDestinationStatus.EndpointType = DeadLetterDestinationStatusEndpointType(*source.EndpointType)
	} else {
		deadLetterDestinationStatus.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToDeadLetterDestinationStatus populates the provided destination DeadLetterDestination_Status from our DeadLetterDestination_Status
func (deadLetterDestinationStatus *DeadLetterDestination_Status) AssignPropertiesToDeadLetterDestinationStatus(destination *v1alpha1api20200601storage.DeadLetterDestination_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(deadLetterDestinationStatus.EndpointType)
	destination.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventSubscriptionDestination
type EventSubscriptionDestination struct {
	//AzureFunction: Mutually exclusive with all other properties
	AzureFunction *AzureFunctionEventSubscriptionDestination `json:"azureFunctionEventSubscriptionDestination,omitempty"`

	//EventHub: Mutually exclusive with all other properties
	EventHub *EventHubEventSubscriptionDestination `json:"eventHubEventSubscriptionDestination,omitempty"`

	//HybridConnection: Mutually exclusive with all other properties
	HybridConnection *HybridConnectionEventSubscriptionDestination `json:"hybridConnectionEventSubscriptionDestination,omitempty"`

	//ServiceBusQueue: Mutually exclusive with all other properties
	ServiceBusQueue *ServiceBusQueueEventSubscriptionDestination `json:"serviceBusQueueEventSubscriptionDestination,omitempty"`

	//ServiceBusTopic: Mutually exclusive with all other properties
	ServiceBusTopic *ServiceBusTopicEventSubscriptionDestination `json:"serviceBusTopicEventSubscriptionDestination,omitempty"`

	//StorageQueue: Mutually exclusive with all other properties
	StorageQueue *StorageQueueEventSubscriptionDestination `json:"storageQueueEventSubscriptionDestination,omitempty"`

	//WebHook: Mutually exclusive with all other properties
	WebHook *WebHookEventSubscriptionDestination `json:"webHookEventSubscriptionDestination,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventSubscriptionDestination *EventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventSubscriptionDestination == nil {
		return nil, nil
	}
	var result EventSubscriptionDestinationARM

	// Set property ‘AzureFunction’:
	if eventSubscriptionDestination.AzureFunction != nil {
		azureFunctionARM, err := (*eventSubscriptionDestination.AzureFunction).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		azureFunction := azureFunctionARM.(AzureFunctionEventSubscriptionDestinationARM)
		result.AzureFunction = &azureFunction
	}

	// Set property ‘EventHub’:
	if eventSubscriptionDestination.EventHub != nil {
		eventHubARM, err := (*eventSubscriptionDestination.EventHub).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		eventHub := eventHubARM.(EventHubEventSubscriptionDestinationARM)
		result.EventHub = &eventHub
	}

	// Set property ‘HybridConnection’:
	if eventSubscriptionDestination.HybridConnection != nil {
		hybridConnectionARM, err := (*eventSubscriptionDestination.HybridConnection).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		hybridConnection := hybridConnectionARM.(HybridConnectionEventSubscriptionDestinationARM)
		result.HybridConnection = &hybridConnection
	}

	// Set property ‘ServiceBusQueue’:
	if eventSubscriptionDestination.ServiceBusQueue != nil {
		serviceBusQueueARM, err := (*eventSubscriptionDestination.ServiceBusQueue).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		serviceBusQueue := serviceBusQueueARM.(ServiceBusQueueEventSubscriptionDestinationARM)
		result.ServiceBusQueue = &serviceBusQueue
	}

	// Set property ‘ServiceBusTopic’:
	if eventSubscriptionDestination.ServiceBusTopic != nil {
		serviceBusTopicARM, err := (*eventSubscriptionDestination.ServiceBusTopic).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		serviceBusTopic := serviceBusTopicARM.(ServiceBusTopicEventSubscriptionDestinationARM)
		result.ServiceBusTopic = &serviceBusTopic
	}

	// Set property ‘StorageQueue’:
	if eventSubscriptionDestination.StorageQueue != nil {
		storageQueueARM, err := (*eventSubscriptionDestination.StorageQueue).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storageQueue := storageQueueARM.(StorageQueueEventSubscriptionDestinationARM)
		result.StorageQueue = &storageQueue
	}

	// Set property ‘WebHook’:
	if eventSubscriptionDestination.WebHook != nil {
		webHookARM, err := (*eventSubscriptionDestination.WebHook).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		webHook := webHookARM.(WebHookEventSubscriptionDestinationARM)
		result.WebHook = &webHook
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionDestination *EventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionDestination *EventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘AzureFunction’:
	if typedInput.AzureFunction != nil {
		var azureFunction1 AzureFunctionEventSubscriptionDestination
		err := azureFunction1.PopulateFromARM(owner, *typedInput.AzureFunction)
		if err != nil {
			return err
		}
		azureFunction := azureFunction1
		eventSubscriptionDestination.AzureFunction = &azureFunction
	}

	// Set property ‘EventHub’:
	if typedInput.EventHub != nil {
		var eventHub1 EventHubEventSubscriptionDestination
		err := eventHub1.PopulateFromARM(owner, *typedInput.EventHub)
		if err != nil {
			return err
		}
		eventHub := eventHub1
		eventSubscriptionDestination.EventHub = &eventHub
	}

	// Set property ‘HybridConnection’:
	if typedInput.HybridConnection != nil {
		var hybridConnection1 HybridConnectionEventSubscriptionDestination
		err := hybridConnection1.PopulateFromARM(owner, *typedInput.HybridConnection)
		if err != nil {
			return err
		}
		hybridConnection := hybridConnection1
		eventSubscriptionDestination.HybridConnection = &hybridConnection
	}

	// Set property ‘ServiceBusQueue’:
	if typedInput.ServiceBusQueue != nil {
		var serviceBusQueue1 ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueue1.PopulateFromARM(owner, *typedInput.ServiceBusQueue)
		if err != nil {
			return err
		}
		serviceBusQueue := serviceBusQueue1
		eventSubscriptionDestination.ServiceBusQueue = &serviceBusQueue
	}

	// Set property ‘ServiceBusTopic’:
	if typedInput.ServiceBusTopic != nil {
		var serviceBusTopic1 ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopic1.PopulateFromARM(owner, *typedInput.ServiceBusTopic)
		if err != nil {
			return err
		}
		serviceBusTopic := serviceBusTopic1
		eventSubscriptionDestination.ServiceBusTopic = &serviceBusTopic
	}

	// Set property ‘StorageQueue’:
	if typedInput.StorageQueue != nil {
		var storageQueue1 StorageQueueEventSubscriptionDestination
		err := storageQueue1.PopulateFromARM(owner, *typedInput.StorageQueue)
		if err != nil {
			return err
		}
		storageQueue := storageQueue1
		eventSubscriptionDestination.StorageQueue = &storageQueue
	}

	// Set property ‘WebHook’:
	if typedInput.WebHook != nil {
		var webHook1 WebHookEventSubscriptionDestination
		err := webHook1.PopulateFromARM(owner, *typedInput.WebHook)
		if err != nil {
			return err
		}
		webHook := webHook1
		eventSubscriptionDestination.WebHook = &webHook
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionDestination populates our EventSubscriptionDestination from the provided source EventSubscriptionDestination
func (eventSubscriptionDestination *EventSubscriptionDestination) AssignPropertiesFromEventSubscriptionDestination(source *v1alpha1api20200601storage.EventSubscriptionDestination) error {

	// AzureFunction
	if source.AzureFunction != nil {
		var azureFunction AzureFunctionEventSubscriptionDestination
		err := azureFunction.AssignPropertiesFromAzureFunctionEventSubscriptionDestination(source.AzureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		eventSubscriptionDestination.AzureFunction = &azureFunction
	} else {
		eventSubscriptionDestination.AzureFunction = nil
	}

	// EventHub
	if source.EventHub != nil {
		var eventHub EventHubEventSubscriptionDestination
		err := eventHub.AssignPropertiesFromEventHubEventSubscriptionDestination(source.EventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventHubEventSubscriptionDestination() to populate field EventHub")
		}
		eventSubscriptionDestination.EventHub = &eventHub
	} else {
		eventSubscriptionDestination.EventHub = nil
	}

	// HybridConnection
	if source.HybridConnection != nil {
		var hybridConnection HybridConnectionEventSubscriptionDestination
		err := hybridConnection.AssignPropertiesFromHybridConnectionEventSubscriptionDestination(source.HybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		eventSubscriptionDestination.HybridConnection = &hybridConnection
	} else {
		eventSubscriptionDestination.HybridConnection = nil
	}

	// ServiceBusQueue
	if source.ServiceBusQueue != nil {
		var serviceBusQueue ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueue.AssignPropertiesFromServiceBusQueueEventSubscriptionDestination(source.ServiceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		eventSubscriptionDestination.ServiceBusQueue = &serviceBusQueue
	} else {
		eventSubscriptionDestination.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if source.ServiceBusTopic != nil {
		var serviceBusTopic ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopic.AssignPropertiesFromServiceBusTopicEventSubscriptionDestination(source.ServiceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		eventSubscriptionDestination.ServiceBusTopic = &serviceBusTopic
	} else {
		eventSubscriptionDestination.ServiceBusTopic = nil
	}

	// StorageQueue
	if source.StorageQueue != nil {
		var storageQueue StorageQueueEventSubscriptionDestination
		err := storageQueue.AssignPropertiesFromStorageQueueEventSubscriptionDestination(source.StorageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		eventSubscriptionDestination.StorageQueue = &storageQueue
	} else {
		eventSubscriptionDestination.StorageQueue = nil
	}

	// WebHook
	if source.WebHook != nil {
		var webHook WebHookEventSubscriptionDestination
		err := webHook.AssignPropertiesFromWebHookEventSubscriptionDestination(source.WebHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebHookEventSubscriptionDestination() to populate field WebHook")
		}
		eventSubscriptionDestination.WebHook = &webHook
	} else {
		eventSubscriptionDestination.WebHook = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestination populates the provided destination EventSubscriptionDestination from our EventSubscriptionDestination
func (eventSubscriptionDestination *EventSubscriptionDestination) AssignPropertiesToEventSubscriptionDestination(destination *v1alpha1api20200601storage.EventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureFunction
	if eventSubscriptionDestination.AzureFunction != nil {
		var azureFunction v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestination
		err := eventSubscriptionDestination.AzureFunction.AssignPropertiesToAzureFunctionEventSubscriptionDestination(&azureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		destination.AzureFunction = &azureFunction
	} else {
		destination.AzureFunction = nil
	}

	// EventHub
	if eventSubscriptionDestination.EventHub != nil {
		var eventHub v1alpha1api20200601storage.EventHubEventSubscriptionDestination
		err := eventSubscriptionDestination.EventHub.AssignPropertiesToEventHubEventSubscriptionDestination(&eventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventHubEventSubscriptionDestination() to populate field EventHub")
		}
		destination.EventHub = &eventHub
	} else {
		destination.EventHub = nil
	}

	// HybridConnection
	if eventSubscriptionDestination.HybridConnection != nil {
		var hybridConnection v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestination
		err := eventSubscriptionDestination.HybridConnection.AssignPropertiesToHybridConnectionEventSubscriptionDestination(&hybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		destination.HybridConnection = &hybridConnection
	} else {
		destination.HybridConnection = nil
	}

	// ServiceBusQueue
	if eventSubscriptionDestination.ServiceBusQueue != nil {
		var serviceBusQueue v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestination
		err := eventSubscriptionDestination.ServiceBusQueue.AssignPropertiesToServiceBusQueueEventSubscriptionDestination(&serviceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		destination.ServiceBusQueue = &serviceBusQueue
	} else {
		destination.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if eventSubscriptionDestination.ServiceBusTopic != nil {
		var serviceBusTopic v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestination
		err := eventSubscriptionDestination.ServiceBusTopic.AssignPropertiesToServiceBusTopicEventSubscriptionDestination(&serviceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		destination.ServiceBusTopic = &serviceBusTopic
	} else {
		destination.ServiceBusTopic = nil
	}

	// StorageQueue
	if eventSubscriptionDestination.StorageQueue != nil {
		var storageQueue v1alpha1api20200601storage.StorageQueueEventSubscriptionDestination
		err := eventSubscriptionDestination.StorageQueue.AssignPropertiesToStorageQueueEventSubscriptionDestination(&storageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		destination.StorageQueue = &storageQueue
	} else {
		destination.StorageQueue = nil
	}

	// WebHook
	if eventSubscriptionDestination.WebHook != nil {
		var webHook v1alpha1api20200601storage.WebHookEventSubscriptionDestination
		err := eventSubscriptionDestination.WebHook.AssignPropertiesToWebHookEventSubscriptionDestination(&webHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebHookEventSubscriptionDestination() to populate field WebHook")
		}
		destination.WebHook = &webHook
	} else {
		destination.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionDestination_Status struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the event subscription destination.
	EndpointType EventSubscriptionDestinationStatusEndpointType `json:"endpointType"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionDestination_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestination_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestination_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestination_StatusARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	eventSubscriptionDestinationStatus.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionDestinationStatus populates our EventSubscriptionDestination_Status from the provided source EventSubscriptionDestination_Status
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) AssignPropertiesFromEventSubscriptionDestinationStatus(source *v1alpha1api20200601storage.EventSubscriptionDestination_Status) error {

	// EndpointType
	if source.EndpointType != nil {
		eventSubscriptionDestinationStatus.EndpointType = EventSubscriptionDestinationStatusEndpointType(*source.EndpointType)
	} else {
		eventSubscriptionDestinationStatus.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestinationStatus populates the provided destination EventSubscriptionDestination_Status from our EventSubscriptionDestination_Status
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) AssignPropertiesToEventSubscriptionDestinationStatus(destination *v1alpha1api20200601storage.EventSubscriptionDestination_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(eventSubscriptionDestinationStatus.EndpointType)
	destination.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventSubscriptionFilter
type EventSubscriptionFilter struct {
	//AdvancedFilters: An array of advanced filters that are used for filtering event
	//subscriptions.
	AdvancedFilters []AdvancedFilter `json:"advancedFilters,omitempty"`

	//IncludedEventTypes: A list of applicable event types that need to be part of the
	//event subscription. If it is desired to subscribe to all default event types,
	//set the IncludedEventTypes to null.
	IncludedEventTypes []string `json:"includedEventTypes,omitempty"`

	//IsSubjectCaseSensitive: Specifies if the SubjectBeginsWith and SubjectEndsWith
	//properties of the filter
	//should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `json:"isSubjectCaseSensitive,omitempty"`

	//SubjectBeginsWith: An optional string to filter events for an event subscription
	//based on a resource path prefix.
	//The format of this depends on the publisher of the events.
	//Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty"`

	//SubjectEndsWith: An optional string to filter events for an event subscription
	//based on a resource path suffix.
	//Wildcard characters are not supported in this path.
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventSubscriptionFilter *EventSubscriptionFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventSubscriptionFilter == nil {
		return nil, nil
	}
	var result EventSubscriptionFilterARM

	// Set property ‘AdvancedFilters’:
	for _, item := range eventSubscriptionFilter.AdvancedFilters {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.AdvancedFilters = append(result.AdvancedFilters, itemARM.(AdvancedFilterARM))
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range eventSubscriptionFilter.IncludedEventTypes {
		result.IncludedEventTypes = append(result.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if eventSubscriptionFilter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *eventSubscriptionFilter.IsSubjectCaseSensitive
		result.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if eventSubscriptionFilter.SubjectBeginsWith != nil {
		subjectBeginsWith := *eventSubscriptionFilter.SubjectBeginsWith
		result.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if eventSubscriptionFilter.SubjectEndsWith != nil {
		subjectEndsWith := *eventSubscriptionFilter.SubjectEndsWith
		result.SubjectEndsWith = &subjectEndsWith
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionFilter *EventSubscriptionFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionFilter *EventSubscriptionFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilterARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		eventSubscriptionFilter.AdvancedFilters = append(eventSubscriptionFilter.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		eventSubscriptionFilter.IncludedEventTypes = append(eventSubscriptionFilter.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		eventSubscriptionFilter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		eventSubscriptionFilter.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		eventSubscriptionFilter.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionFilter populates our EventSubscriptionFilter from the provided source EventSubscriptionFilter
func (eventSubscriptionFilter *EventSubscriptionFilter) AssignPropertiesFromEventSubscriptionFilter(source *v1alpha1api20200601storage.EventSubscriptionFilter) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter
			err := advancedFilter.AssignPropertiesFromAdvancedFilter(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		eventSubscriptionFilter.AdvancedFilters = advancedFilterList
	} else {
		eventSubscriptionFilter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	eventSubscriptionFilter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		eventSubscriptionFilter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		eventSubscriptionFilter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	eventSubscriptionFilter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	eventSubscriptionFilter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionFilter populates the provided destination EventSubscriptionFilter from our EventSubscriptionFilter
func (eventSubscriptionFilter *EventSubscriptionFilter) AssignPropertiesToEventSubscriptionFilter(destination *v1alpha1api20200601storage.EventSubscriptionFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if eventSubscriptionFilter.AdvancedFilters != nil {
		advancedFilterList := make([]v1alpha1api20200601storage.AdvancedFilter, len(eventSubscriptionFilter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range eventSubscriptionFilter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v1alpha1api20200601storage.AdvancedFilter
			err := advancedFilterItem.AssignPropertiesToAdvancedFilter(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(eventSubscriptionFilter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if eventSubscriptionFilter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *eventSubscriptionFilter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(eventSubscriptionFilter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(eventSubscriptionFilter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionFilter_Status struct {
	//AdvancedFilters: An array of advanced filters that are used for filtering event
	//subscriptions.
	AdvancedFilters []AdvancedFilter_Status `json:"advancedFilters,omitempty"`

	//IncludedEventTypes: A list of applicable event types that need to be part of the
	//event subscription. If it is desired to subscribe to all default event types,
	//set the IncludedEventTypes to null.
	IncludedEventTypes []string `json:"includedEventTypes,omitempty"`

	//IsSubjectCaseSensitive: Specifies if the SubjectBeginsWith and SubjectEndsWith
	//properties of the filter
	//should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `json:"isSubjectCaseSensitive,omitempty"`

	//SubjectBeginsWith: An optional string to filter events for an event subscription
	//based on a resource path prefix.
	//The format of this depends on the publisher of the events.
	//Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty"`

	//SubjectEndsWith: An optional string to filter events for an event subscription
	//based on a resource path suffix.
	//Wildcard characters are not supported in this path.
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionFilter_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		eventSubscriptionFilterStatus.AdvancedFilters = append(eventSubscriptionFilterStatus.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		eventSubscriptionFilterStatus.IncludedEventTypes = append(eventSubscriptionFilterStatus.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		eventSubscriptionFilterStatus.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		eventSubscriptionFilterStatus.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		eventSubscriptionFilterStatus.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionFilterStatus populates our EventSubscriptionFilter_Status from the provided source EventSubscriptionFilter_Status
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) AssignPropertiesFromEventSubscriptionFilterStatus(source *v1alpha1api20200601storage.EventSubscriptionFilter_Status) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter_Status, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter_Status
			err := advancedFilter.AssignPropertiesFromAdvancedFilterStatus(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStatus() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		eventSubscriptionFilterStatus.AdvancedFilters = advancedFilterList
	} else {
		eventSubscriptionFilterStatus.AdvancedFilters = nil
	}

	// IncludedEventTypes
	eventSubscriptionFilterStatus.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		eventSubscriptionFilterStatus.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		eventSubscriptionFilterStatus.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	eventSubscriptionFilterStatus.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	eventSubscriptionFilterStatus.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionFilterStatus populates the provided destination EventSubscriptionFilter_Status from our EventSubscriptionFilter_Status
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) AssignPropertiesToEventSubscriptionFilterStatus(destination *v1alpha1api20200601storage.EventSubscriptionFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if eventSubscriptionFilterStatus.AdvancedFilters != nil {
		advancedFilterList := make([]v1alpha1api20200601storage.AdvancedFilter_Status, len(eventSubscriptionFilterStatus.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range eventSubscriptionFilterStatus.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v1alpha1api20200601storage.AdvancedFilter_Status
			err := advancedFilterItem.AssignPropertiesToAdvancedFilterStatus(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStatus() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(eventSubscriptionFilterStatus.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if eventSubscriptionFilterStatus.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *eventSubscriptionFilterStatus.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(eventSubscriptionFilterStatus.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(eventSubscriptionFilterStatus.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"CloudEventSchemaV1_0","CustomInputSchema","EventGridSchema"}
type EventSubscriptionPropertiesEventDeliverySchema string

const (
	EventSubscriptionPropertiesEventDeliverySchemaCloudEventSchemaV10 = EventSubscriptionPropertiesEventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionPropertiesEventDeliverySchemaCustomInputSchema   = EventSubscriptionPropertiesEventDeliverySchema("CustomInputSchema")
	EventSubscriptionPropertiesEventDeliverySchemaEventGridSchema     = EventSubscriptionPropertiesEventDeliverySchema("EventGridSchema")
)

type EventSubscriptionPropertiesStatusEventDeliverySchema string

const (
	EventSubscriptionPropertiesStatusEventDeliverySchemaCloudEventSchemaV10 = EventSubscriptionPropertiesStatusEventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionPropertiesStatusEventDeliverySchemaCustomInputSchema   = EventSubscriptionPropertiesStatusEventDeliverySchema("CustomInputSchema")
	EventSubscriptionPropertiesStatusEventDeliverySchemaEventGridSchema     = EventSubscriptionPropertiesStatusEventDeliverySchema("EventGridSchema")
)

type EventSubscriptionPropertiesStatusProvisioningState string

const (
	EventSubscriptionPropertiesStatusProvisioningStateAwaitingManualAction = EventSubscriptionPropertiesStatusProvisioningState("AwaitingManualAction")
	EventSubscriptionPropertiesStatusProvisioningStateCanceled             = EventSubscriptionPropertiesStatusProvisioningState("Canceled")
	EventSubscriptionPropertiesStatusProvisioningStateCreating             = EventSubscriptionPropertiesStatusProvisioningState("Creating")
	EventSubscriptionPropertiesStatusProvisioningStateDeleting             = EventSubscriptionPropertiesStatusProvisioningState("Deleting")
	EventSubscriptionPropertiesStatusProvisioningStateFailed               = EventSubscriptionPropertiesStatusProvisioningState("Failed")
	EventSubscriptionPropertiesStatusProvisioningStateSucceeded            = EventSubscriptionPropertiesStatusProvisioningState("Succeeded")
	EventSubscriptionPropertiesStatusProvisioningStateUpdating             = EventSubscriptionPropertiesStatusProvisioningState("Updating")
)

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/RetryPolicy
type RetryPolicy struct {
	//EventTimeToLiveInMinutes: Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`

	//MaxDeliveryAttempts: Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.ARMTransformer = &RetryPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (retryPolicy *RetryPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if retryPolicy == nil {
		return nil, nil
	}
	var result RetryPolicyARM

	// Set property ‘EventTimeToLiveInMinutes’:
	if retryPolicy.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *retryPolicy.EventTimeToLiveInMinutes
		result.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if retryPolicy.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *retryPolicy.MaxDeliveryAttempts
		result.MaxDeliveryAttempts = &maxDeliveryAttempts
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (retryPolicy *RetryPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (retryPolicy *RetryPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicyARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		retryPolicy.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		retryPolicy.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignPropertiesFromRetryPolicy populates our RetryPolicy from the provided source RetryPolicy
func (retryPolicy *RetryPolicy) AssignPropertiesFromRetryPolicy(source *v1alpha1api20200601storage.RetryPolicy) error {

	// EventTimeToLiveInMinutes
	retryPolicy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	retryPolicy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignPropertiesToRetryPolicy populates the provided destination RetryPolicy from our RetryPolicy
func (retryPolicy *RetryPolicy) AssignPropertiesToRetryPolicy(destination *v1alpha1api20200601storage.RetryPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(retryPolicy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(retryPolicy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RetryPolicy_Status struct {
	//EventTimeToLiveInMinutes: Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`

	//MaxDeliveryAttempts: Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.FromARMConverter = &RetryPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (retryPolicyStatus *RetryPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (retryPolicyStatus *RetryPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		retryPolicyStatus.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		retryPolicyStatus.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignPropertiesFromRetryPolicyStatus populates our RetryPolicy_Status from the provided source RetryPolicy_Status
func (retryPolicyStatus *RetryPolicy_Status) AssignPropertiesFromRetryPolicyStatus(source *v1alpha1api20200601storage.RetryPolicy_Status) error {

	// EventTimeToLiveInMinutes
	retryPolicyStatus.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	retryPolicyStatus.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignPropertiesToRetryPolicyStatus populates the provided destination RetryPolicy_Status from our RetryPolicy_Status
func (retryPolicyStatus *RetryPolicy_Status) AssignPropertiesToRetryPolicyStatus(destination *v1alpha1api20200601storage.RetryPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(retryPolicyStatus.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(retryPolicyStatus.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageBlobDeadLetterDestination
type StorageBlobDeadLetterDestination struct {
	// +kubebuilder:validation:Required
	EndpointType StorageBlobDeadLetterDestinationEndpointType `json:"endpointType"`

	//Properties: Properties of the storage blob based dead letter destination.
	Properties *StorageBlobDeadLetterDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageBlobDeadLetterDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageBlobDeadLetterDestination == nil {
		return nil, nil
	}
	var result StorageBlobDeadLetterDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = storageBlobDeadLetterDestination.EndpointType

	// Set property ‘Properties’:
	if storageBlobDeadLetterDestination.Properties != nil {
		propertiesARM, err := (*storageBlobDeadLetterDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(StorageBlobDeadLetterDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageBlobDeadLetterDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageBlobDeadLetterDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageBlobDeadLetterDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	storageBlobDeadLetterDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 StorageBlobDeadLetterDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		storageBlobDeadLetterDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageBlobDeadLetterDestination populates our StorageBlobDeadLetterDestination from the provided source StorageBlobDeadLetterDestination
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) AssignPropertiesFromStorageBlobDeadLetterDestination(source *v1alpha1api20200601storage.StorageBlobDeadLetterDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		storageBlobDeadLetterDestination.EndpointType = StorageBlobDeadLetterDestinationEndpointType(*source.EndpointType)
	} else {
		storageBlobDeadLetterDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property StorageBlobDeadLetterDestinationProperties
		err := property.AssignPropertiesFromStorageBlobDeadLetterDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageBlobDeadLetterDestinationProperties() to populate field Properties")
		}
		storageBlobDeadLetterDestination.Properties = &property
	} else {
		storageBlobDeadLetterDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageBlobDeadLetterDestination populates the provided destination StorageBlobDeadLetterDestination from our StorageBlobDeadLetterDestination
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) AssignPropertiesToStorageBlobDeadLetterDestination(destination *v1alpha1api20200601storage.StorageBlobDeadLetterDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(storageBlobDeadLetterDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if storageBlobDeadLetterDestination.Properties != nil {
		var property v1alpha1api20200601storage.StorageBlobDeadLetterDestinationProperties
		err := storageBlobDeadLetterDestination.Properties.AssignPropertiesToStorageBlobDeadLetterDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageBlobDeadLetterDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/AdvancedFilter
type AdvancedFilter struct {
	//BoolEquals: Mutually exclusive with all other properties
	BoolEquals *AdvancedFilter_BoolEquals `json:"boolEqualsAdvancedFilter,omitempty"`

	//NumberGreaterThan: Mutually exclusive with all other properties
	NumberGreaterThan *AdvancedFilter_NumberGreaterThan `json:"numberGreaterThanAdvancedFilter,omitempty"`

	//NumberGreaterThanOrEquals: Mutually exclusive with all other properties
	NumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals `json:"numberGreaterThanOrEqualsAdvancedFilter,omitempty"`

	//NumberIn: Mutually exclusive with all other properties
	NumberIn *AdvancedFilter_NumberIn `json:"numberInAdvancedFilter,omitempty"`

	//NumberLessThan: Mutually exclusive with all other properties
	NumberLessThan *AdvancedFilter_NumberLessThan `json:"numberLessThanAdvancedFilter,omitempty"`

	//NumberLessThanOrEquals: Mutually exclusive with all other properties
	NumberLessThanOrEquals *AdvancedFilter_NumberLessThanOrEquals `json:"numberLessThanOrEqualsAdvancedFilter,omitempty"`

	//NumberNotIn: Mutually exclusive with all other properties
	NumberNotIn *AdvancedFilter_NumberNotIn `json:"numberNotInAdvancedFilter,omitempty"`

	//StringBeginsWith: Mutually exclusive with all other properties
	StringBeginsWith *AdvancedFilter_StringBeginsWith `json:"stringBeginsWithAdvancedFilter,omitempty"`

	//StringContains: Mutually exclusive with all other properties
	StringContains *AdvancedFilter_StringContains `json:"stringContainsAdvancedFilter,omitempty"`

	//StringEndsWith: Mutually exclusive with all other properties
	StringEndsWith *AdvancedFilter_StringEndsWith `json:"stringEndsWithAdvancedFilter,omitempty"`

	//StringIn: Mutually exclusive with all other properties
	StringIn *AdvancedFilter_StringIn `json:"stringInAdvancedFilter,omitempty"`

	//StringNotIn: Mutually exclusive with all other properties
	StringNotIn *AdvancedFilter_StringNotIn `json:"stringNotInAdvancedFilter,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilter *AdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilterARM

	// Set property ‘BoolEquals’:
	if advancedFilter.BoolEquals != nil {
		boolEqualsARM, err := (*advancedFilter.BoolEquals).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		boolEquals := boolEqualsARM.(AdvancedFilter_BoolEqualsARM)
		result.BoolEquals = &boolEquals
	}

	// Set property ‘NumberGreaterThan’:
	if advancedFilter.NumberGreaterThan != nil {
		numberGreaterThanARM, err := (*advancedFilter.NumberGreaterThan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberGreaterThan := numberGreaterThanARM.(AdvancedFilter_NumberGreaterThanARM)
		result.NumberGreaterThan = &numberGreaterThan
	}

	// Set property ‘NumberGreaterThanOrEquals’:
	if advancedFilter.NumberGreaterThanOrEquals != nil {
		numberGreaterThanOrEqualsARM, err := (*advancedFilter.NumberGreaterThanOrEquals).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberGreaterThanOrEquals := numberGreaterThanOrEqualsARM.(AdvancedFilter_NumberGreaterThanOrEqualsARM)
		result.NumberGreaterThanOrEquals = &numberGreaterThanOrEquals
	}

	// Set property ‘NumberIn’:
	if advancedFilter.NumberIn != nil {
		numberInARM, err := (*advancedFilter.NumberIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberIn := numberInARM.(AdvancedFilter_NumberInARM)
		result.NumberIn = &numberIn
	}

	// Set property ‘NumberLessThan’:
	if advancedFilter.NumberLessThan != nil {
		numberLessThanARM, err := (*advancedFilter.NumberLessThan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberLessThan := numberLessThanARM.(AdvancedFilter_NumberLessThanARM)
		result.NumberLessThan = &numberLessThan
	}

	// Set property ‘NumberLessThanOrEquals’:
	if advancedFilter.NumberLessThanOrEquals != nil {
		numberLessThanOrEqualsARM, err := (*advancedFilter.NumberLessThanOrEquals).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberLessThanOrEquals := numberLessThanOrEqualsARM.(AdvancedFilter_NumberLessThanOrEqualsARM)
		result.NumberLessThanOrEquals = &numberLessThanOrEquals
	}

	// Set property ‘NumberNotIn’:
	if advancedFilter.NumberNotIn != nil {
		numberNotInARM, err := (*advancedFilter.NumberNotIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberNotIn := numberNotInARM.(AdvancedFilter_NumberNotInARM)
		result.NumberNotIn = &numberNotIn
	}

	// Set property ‘StringBeginsWith’:
	if advancedFilter.StringBeginsWith != nil {
		stringBeginsWithARM, err := (*advancedFilter.StringBeginsWith).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringBeginsWith := stringBeginsWithARM.(AdvancedFilter_StringBeginsWithARM)
		result.StringBeginsWith = &stringBeginsWith
	}

	// Set property ‘StringContains’:
	if advancedFilter.StringContains != nil {
		stringContainsARM, err := (*advancedFilter.StringContains).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringContains := stringContainsARM.(AdvancedFilter_StringContainsARM)
		result.StringContains = &stringContains
	}

	// Set property ‘StringEndsWith’:
	if advancedFilter.StringEndsWith != nil {
		stringEndsWithARM, err := (*advancedFilter.StringEndsWith).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringEndsWith := stringEndsWithARM.(AdvancedFilter_StringEndsWithARM)
		result.StringEndsWith = &stringEndsWith
	}

	// Set property ‘StringIn’:
	if advancedFilter.StringIn != nil {
		stringInARM, err := (*advancedFilter.StringIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringIn := stringInARM.(AdvancedFilter_StringInARM)
		result.StringIn = &stringIn
	}

	// Set property ‘StringNotIn’:
	if advancedFilter.StringNotIn != nil {
		stringNotInARM, err := (*advancedFilter.StringNotIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringNotIn := stringNotInARM.(AdvancedFilter_StringNotInARM)
		result.StringNotIn = &stringNotIn
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilter *AdvancedFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilter *AdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘BoolEquals’:
	if typedInput.BoolEquals != nil {
		var boolEquals1 AdvancedFilter_BoolEquals
		err := boolEquals1.PopulateFromARM(owner, *typedInput.BoolEquals)
		if err != nil {
			return err
		}
		boolEquals := boolEquals1
		advancedFilter.BoolEquals = &boolEquals
	}

	// Set property ‘NumberGreaterThan’:
	if typedInput.NumberGreaterThan != nil {
		var numberGreaterThan1 AdvancedFilter_NumberGreaterThan
		err := numberGreaterThan1.PopulateFromARM(owner, *typedInput.NumberGreaterThan)
		if err != nil {
			return err
		}
		numberGreaterThan := numberGreaterThan1
		advancedFilter.NumberGreaterThan = &numberGreaterThan
	}

	// Set property ‘NumberGreaterThanOrEquals’:
	if typedInput.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEquals1 AdvancedFilter_NumberGreaterThanOrEquals
		err := numberGreaterThanOrEquals1.PopulateFromARM(owner, *typedInput.NumberGreaterThanOrEquals)
		if err != nil {
			return err
		}
		numberGreaterThanOrEquals := numberGreaterThanOrEquals1
		advancedFilter.NumberGreaterThanOrEquals = &numberGreaterThanOrEquals
	}

	// Set property ‘NumberIn’:
	if typedInput.NumberIn != nil {
		var numberIn1 AdvancedFilter_NumberIn
		err := numberIn1.PopulateFromARM(owner, *typedInput.NumberIn)
		if err != nil {
			return err
		}
		numberIn := numberIn1
		advancedFilter.NumberIn = &numberIn
	}

	// Set property ‘NumberLessThan’:
	if typedInput.NumberLessThan != nil {
		var numberLessThan1 AdvancedFilter_NumberLessThan
		err := numberLessThan1.PopulateFromARM(owner, *typedInput.NumberLessThan)
		if err != nil {
			return err
		}
		numberLessThan := numberLessThan1
		advancedFilter.NumberLessThan = &numberLessThan
	}

	// Set property ‘NumberLessThanOrEquals’:
	if typedInput.NumberLessThanOrEquals != nil {
		var numberLessThanOrEquals1 AdvancedFilter_NumberLessThanOrEquals
		err := numberLessThanOrEquals1.PopulateFromARM(owner, *typedInput.NumberLessThanOrEquals)
		if err != nil {
			return err
		}
		numberLessThanOrEquals := numberLessThanOrEquals1
		advancedFilter.NumberLessThanOrEquals = &numberLessThanOrEquals
	}

	// Set property ‘NumberNotIn’:
	if typedInput.NumberNotIn != nil {
		var numberNotIn1 AdvancedFilter_NumberNotIn
		err := numberNotIn1.PopulateFromARM(owner, *typedInput.NumberNotIn)
		if err != nil {
			return err
		}
		numberNotIn := numberNotIn1
		advancedFilter.NumberNotIn = &numberNotIn
	}

	// Set property ‘StringBeginsWith’:
	if typedInput.StringBeginsWith != nil {
		var stringBeginsWith1 AdvancedFilter_StringBeginsWith
		err := stringBeginsWith1.PopulateFromARM(owner, *typedInput.StringBeginsWith)
		if err != nil {
			return err
		}
		stringBeginsWith := stringBeginsWith1
		advancedFilter.StringBeginsWith = &stringBeginsWith
	}

	// Set property ‘StringContains’:
	if typedInput.StringContains != nil {
		var stringContains1 AdvancedFilter_StringContains
		err := stringContains1.PopulateFromARM(owner, *typedInput.StringContains)
		if err != nil {
			return err
		}
		stringContains := stringContains1
		advancedFilter.StringContains = &stringContains
	}

	// Set property ‘StringEndsWith’:
	if typedInput.StringEndsWith != nil {
		var stringEndsWith1 AdvancedFilter_StringEndsWith
		err := stringEndsWith1.PopulateFromARM(owner, *typedInput.StringEndsWith)
		if err != nil {
			return err
		}
		stringEndsWith := stringEndsWith1
		advancedFilter.StringEndsWith = &stringEndsWith
	}

	// Set property ‘StringIn’:
	if typedInput.StringIn != nil {
		var stringIn1 AdvancedFilter_StringIn
		err := stringIn1.PopulateFromARM(owner, *typedInput.StringIn)
		if err != nil {
			return err
		}
		stringIn := stringIn1
		advancedFilter.StringIn = &stringIn
	}

	// Set property ‘StringNotIn’:
	if typedInput.StringNotIn != nil {
		var stringNotIn1 AdvancedFilter_StringNotIn
		err := stringNotIn1.PopulateFromARM(owner, *typedInput.StringNotIn)
		if err != nil {
			return err
		}
		stringNotIn := stringNotIn1
		advancedFilter.StringNotIn = &stringNotIn
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilter populates our AdvancedFilter from the provided source AdvancedFilter
func (advancedFilter *AdvancedFilter) AssignPropertiesFromAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter) error {

	// BoolEquals
	if source.BoolEquals != nil {
		var boolEqual AdvancedFilter_BoolEquals
		err := boolEqual.AssignPropertiesFromAdvancedFilterBoolEquals(source.BoolEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterBoolEquals() to populate field BoolEquals")
		}
		advancedFilter.BoolEquals = &boolEqual
	} else {
		advancedFilter.BoolEquals = nil
	}

	// NumberGreaterThan
	if source.NumberGreaterThan != nil {
		var numberGreaterThan AdvancedFilter_NumberGreaterThan
		err := numberGreaterThan.AssignPropertiesFromAdvancedFilterNumberGreaterThan(source.NumberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberGreaterThan() to populate field NumberGreaterThan")
		}
		advancedFilter.NumberGreaterThan = &numberGreaterThan
	} else {
		advancedFilter.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if source.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual AdvancedFilter_NumberGreaterThanOrEquals
		err := numberGreaterThanOrEqual.AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEquals(source.NumberGreaterThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEquals() to populate field NumberGreaterThanOrEquals")
		}
		advancedFilter.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		advancedFilter.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if source.NumberIn != nil {
		var numberIn AdvancedFilter_NumberIn
		err := numberIn.AssignPropertiesFromAdvancedFilterNumberIn(source.NumberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberIn() to populate field NumberIn")
		}
		advancedFilter.NumberIn = &numberIn
	} else {
		advancedFilter.NumberIn = nil
	}

	// NumberLessThan
	if source.NumberLessThan != nil {
		var numberLessThan AdvancedFilter_NumberLessThan
		err := numberLessThan.AssignPropertiesFromAdvancedFilterNumberLessThan(source.NumberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberLessThan() to populate field NumberLessThan")
		}
		advancedFilter.NumberLessThan = &numberLessThan
	} else {
		advancedFilter.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if source.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual AdvancedFilter_NumberLessThanOrEquals
		err := numberLessThanOrEqual.AssignPropertiesFromAdvancedFilterNumberLessThanOrEquals(source.NumberLessThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberLessThanOrEquals() to populate field NumberLessThanOrEquals")
		}
		advancedFilter.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		advancedFilter.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if source.NumberNotIn != nil {
		var numberNotIn AdvancedFilter_NumberNotIn
		err := numberNotIn.AssignPropertiesFromAdvancedFilterNumberNotIn(source.NumberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberNotIn() to populate field NumberNotIn")
		}
		advancedFilter.NumberNotIn = &numberNotIn
	} else {
		advancedFilter.NumberNotIn = nil
	}

	// StringBeginsWith
	if source.StringBeginsWith != nil {
		var stringBeginsWith AdvancedFilter_StringBeginsWith
		err := stringBeginsWith.AssignPropertiesFromAdvancedFilterStringBeginsWith(source.StringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringBeginsWith() to populate field StringBeginsWith")
		}
		advancedFilter.StringBeginsWith = &stringBeginsWith
	} else {
		advancedFilter.StringBeginsWith = nil
	}

	// StringContains
	if source.StringContains != nil {
		var stringContain AdvancedFilter_StringContains
		err := stringContain.AssignPropertiesFromAdvancedFilterStringContains(source.StringContains)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringContains() to populate field StringContains")
		}
		advancedFilter.StringContains = &stringContain
	} else {
		advancedFilter.StringContains = nil
	}

	// StringEndsWith
	if source.StringEndsWith != nil {
		var stringEndsWith AdvancedFilter_StringEndsWith
		err := stringEndsWith.AssignPropertiesFromAdvancedFilterStringEndsWith(source.StringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringEndsWith() to populate field StringEndsWith")
		}
		advancedFilter.StringEndsWith = &stringEndsWith
	} else {
		advancedFilter.StringEndsWith = nil
	}

	// StringIn
	if source.StringIn != nil {
		var stringIn AdvancedFilter_StringIn
		err := stringIn.AssignPropertiesFromAdvancedFilterStringIn(source.StringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringIn() to populate field StringIn")
		}
		advancedFilter.StringIn = &stringIn
	} else {
		advancedFilter.StringIn = nil
	}

	// StringNotIn
	if source.StringNotIn != nil {
		var stringNotIn AdvancedFilter_StringNotIn
		err := stringNotIn.AssignPropertiesFromAdvancedFilterStringNotIn(source.StringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringNotIn() to populate field StringNotIn")
		}
		advancedFilter.StringNotIn = &stringNotIn
	} else {
		advancedFilter.StringNotIn = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilter populates the provided destination AdvancedFilter from our AdvancedFilter
func (advancedFilter *AdvancedFilter) AssignPropertiesToAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BoolEquals
	if advancedFilter.BoolEquals != nil {
		var boolEqual v1alpha1api20200601storage.AdvancedFilter_BoolEquals
		err := advancedFilter.BoolEquals.AssignPropertiesToAdvancedFilterBoolEquals(&boolEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterBoolEquals() to populate field BoolEquals")
		}
		destination.BoolEquals = &boolEqual
	} else {
		destination.BoolEquals = nil
	}

	// NumberGreaterThan
	if advancedFilter.NumberGreaterThan != nil {
		var numberGreaterThan v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThan
		err := advancedFilter.NumberGreaterThan.AssignPropertiesToAdvancedFilterNumberGreaterThan(&numberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberGreaterThan() to populate field NumberGreaterThan")
		}
		destination.NumberGreaterThan = &numberGreaterThan
	} else {
		destination.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if advancedFilter.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanOrEquals
		err := advancedFilter.NumberGreaterThanOrEquals.AssignPropertiesToAdvancedFilterNumberGreaterThanOrEquals(&numberGreaterThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberGreaterThanOrEquals() to populate field NumberGreaterThanOrEquals")
		}
		destination.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		destination.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if advancedFilter.NumberIn != nil {
		var numberIn v1alpha1api20200601storage.AdvancedFilter_NumberIn
		err := advancedFilter.NumberIn.AssignPropertiesToAdvancedFilterNumberIn(&numberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberIn() to populate field NumberIn")
		}
		destination.NumberIn = &numberIn
	} else {
		destination.NumberIn = nil
	}

	// NumberLessThan
	if advancedFilter.NumberLessThan != nil {
		var numberLessThan v1alpha1api20200601storage.AdvancedFilter_NumberLessThan
		err := advancedFilter.NumberLessThan.AssignPropertiesToAdvancedFilterNumberLessThan(&numberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberLessThan() to populate field NumberLessThan")
		}
		destination.NumberLessThan = &numberLessThan
	} else {
		destination.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if advancedFilter.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual v1alpha1api20200601storage.AdvancedFilter_NumberLessThanOrEquals
		err := advancedFilter.NumberLessThanOrEquals.AssignPropertiesToAdvancedFilterNumberLessThanOrEquals(&numberLessThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberLessThanOrEquals() to populate field NumberLessThanOrEquals")
		}
		destination.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		destination.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if advancedFilter.NumberNotIn != nil {
		var numberNotIn v1alpha1api20200601storage.AdvancedFilter_NumberNotIn
		err := advancedFilter.NumberNotIn.AssignPropertiesToAdvancedFilterNumberNotIn(&numberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberNotIn() to populate field NumberNotIn")
		}
		destination.NumberNotIn = &numberNotIn
	} else {
		destination.NumberNotIn = nil
	}

	// StringBeginsWith
	if advancedFilter.StringBeginsWith != nil {
		var stringBeginsWith v1alpha1api20200601storage.AdvancedFilter_StringBeginsWith
		err := advancedFilter.StringBeginsWith.AssignPropertiesToAdvancedFilterStringBeginsWith(&stringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringBeginsWith() to populate field StringBeginsWith")
		}
		destination.StringBeginsWith = &stringBeginsWith
	} else {
		destination.StringBeginsWith = nil
	}

	// StringContains
	if advancedFilter.StringContains != nil {
		var stringContain v1alpha1api20200601storage.AdvancedFilter_StringContains
		err := advancedFilter.StringContains.AssignPropertiesToAdvancedFilterStringContains(&stringContain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringContains() to populate field StringContains")
		}
		destination.StringContains = &stringContain
	} else {
		destination.StringContains = nil
	}

	// StringEndsWith
	if advancedFilter.StringEndsWith != nil {
		var stringEndsWith v1alpha1api20200601storage.AdvancedFilter_StringEndsWith
		err := advancedFilter.StringEndsWith.AssignPropertiesToAdvancedFilterStringEndsWith(&stringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringEndsWith() to populate field StringEndsWith")
		}
		destination.StringEndsWith = &stringEndsWith
	} else {
		destination.StringEndsWith = nil
	}

	// StringIn
	if advancedFilter.StringIn != nil {
		var stringIn v1alpha1api20200601storage.AdvancedFilter_StringIn
		err := advancedFilter.StringIn.AssignPropertiesToAdvancedFilterStringIn(&stringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringIn() to populate field StringIn")
		}
		destination.StringIn = &stringIn
	} else {
		destination.StringIn = nil
	}

	// StringNotIn
	if advancedFilter.StringNotIn != nil {
		var stringNotIn v1alpha1api20200601storage.AdvancedFilter_StringNotIn
		err := advancedFilter.StringNotIn.AssignPropertiesToAdvancedFilterStringNotIn(&stringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringNotIn() to populate field StringNotIn")
		}
		destination.StringNotIn = &stringNotIn
	} else {
		destination.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_Status struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	//OperatorType: The operator type used for filtering, e.g., NumberIn,
	//StringContains, BoolEquals and others.
	OperatorType AdvancedFilterStatusOperatorType `json:"operatorType"`
}

var _ genruntime.FromARMConverter = &AdvancedFilter_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStatus *AdvancedFilter_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStatus *AdvancedFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStatus.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStatus.OperatorType = typedInput.OperatorType

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStatus populates our AdvancedFilter_Status from the provided source AdvancedFilter_Status
func (advancedFilterStatus *AdvancedFilter_Status) AssignPropertiesFromAdvancedFilterStatus(source *v1alpha1api20200601storage.AdvancedFilter_Status) error {

	// Key
	advancedFilterStatus.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStatus.OperatorType = AdvancedFilterStatusOperatorType(*source.OperatorType)
	} else {
		advancedFilterStatus.OperatorType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStatus populates the provided destination AdvancedFilter_Status from our AdvancedFilter_Status
func (advancedFilterStatus *AdvancedFilter_Status) AssignPropertiesToAdvancedFilterStatus(destination *v1alpha1api20200601storage.AdvancedFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStatus.Key)

	// OperatorType
	operatorType := string(advancedFilterStatus.OperatorType)
	destination.OperatorType = &operatorType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/AzureFunctionEventSubscriptionDestination
type AzureFunctionEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType AzureFunctionEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties that represent the Azure Function destination of an
	//event subscription.
	Properties *AzureFunctionEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFunctionEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if azureFunctionEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result AzureFunctionEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = azureFunctionEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if azureFunctionEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*azureFunctionEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(AzureFunctionEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFunctionEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFunctionEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFunctionEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	azureFunctionEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 AzureFunctionEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		azureFunctionEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromAzureFunctionEventSubscriptionDestination populates our AzureFunctionEventSubscriptionDestination from the provided source AzureFunctionEventSubscriptionDestination
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) AssignPropertiesFromAzureFunctionEventSubscriptionDestination(source *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		azureFunctionEventSubscriptionDestination.EndpointType = AzureFunctionEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		azureFunctionEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property AzureFunctionEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		azureFunctionEventSubscriptionDestination.Properties = &property
	} else {
		azureFunctionEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFunctionEventSubscriptionDestination populates the provided destination AzureFunctionEventSubscriptionDestination from our AzureFunctionEventSubscriptionDestination
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) AssignPropertiesToAzureFunctionEventSubscriptionDestination(destination *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(azureFunctionEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if azureFunctionEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestinationProperties
		err := azureFunctionEventSubscriptionDestination.Properties.AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeadLetterDestinationStatusEndpointType string

const DeadLetterDestinationStatusEndpointTypeStorageBlob = DeadLetterDestinationStatusEndpointType("StorageBlob")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventHubEventSubscriptionDestination
type EventHubEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType EventHubEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties for a event hub destination.
	Properties *EventHubEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &EventHubEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventHubEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result EventHubEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = eventHubEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if eventHubEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*eventHubEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(EventHubEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventHubEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventHubEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventHubEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	eventHubEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 EventHubEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		eventHubEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromEventHubEventSubscriptionDestination populates our EventHubEventSubscriptionDestination from the provided source EventHubEventSubscriptionDestination
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) AssignPropertiesFromEventHubEventSubscriptionDestination(source *v1alpha1api20200601storage.EventHubEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		eventHubEventSubscriptionDestination.EndpointType = EventHubEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		eventHubEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property EventHubEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromEventHubEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventHubEventSubscriptionDestinationProperties() to populate field Properties")
		}
		eventHubEventSubscriptionDestination.Properties = &property
	} else {
		eventHubEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventHubEventSubscriptionDestination populates the provided destination EventHubEventSubscriptionDestination from our EventHubEventSubscriptionDestination
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) AssignPropertiesToEventHubEventSubscriptionDestination(destination *v1alpha1api20200601storage.EventHubEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(eventHubEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if eventHubEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.EventHubEventSubscriptionDestinationProperties
		err := eventHubEventSubscriptionDestination.Properties.AssignPropertiesToEventHubEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventHubEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionDestinationStatusEndpointType string

const (
	EventSubscriptionDestinationStatusEndpointTypeAzureFunction    = EventSubscriptionDestinationStatusEndpointType("AzureFunction")
	EventSubscriptionDestinationStatusEndpointTypeEventHub         = EventSubscriptionDestinationStatusEndpointType("EventHub")
	EventSubscriptionDestinationStatusEndpointTypeHybridConnection = EventSubscriptionDestinationStatusEndpointType("HybridConnection")
	EventSubscriptionDestinationStatusEndpointTypeServiceBusQueue  = EventSubscriptionDestinationStatusEndpointType("ServiceBusQueue")
	EventSubscriptionDestinationStatusEndpointTypeServiceBusTopic  = EventSubscriptionDestinationStatusEndpointType("ServiceBusTopic")
	EventSubscriptionDestinationStatusEndpointTypeStorageQueue     = EventSubscriptionDestinationStatusEndpointType("StorageQueue")
	EventSubscriptionDestinationStatusEndpointTypeWebHook          = EventSubscriptionDestinationStatusEndpointType("WebHook")
)

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/HybridConnectionEventSubscriptionDestination
type HybridConnectionEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType HybridConnectionEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties for a hybrid connection destination.
	Properties *HybridConnectionEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &HybridConnectionEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if hybridConnectionEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result HybridConnectionEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = hybridConnectionEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if hybridConnectionEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*hybridConnectionEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(HybridConnectionEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HybridConnectionEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HybridConnectionEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HybridConnectionEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	hybridConnectionEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 HybridConnectionEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		hybridConnectionEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromHybridConnectionEventSubscriptionDestination populates our HybridConnectionEventSubscriptionDestination from the provided source HybridConnectionEventSubscriptionDestination
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) AssignPropertiesFromHybridConnectionEventSubscriptionDestination(source *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		hybridConnectionEventSubscriptionDestination.EndpointType = HybridConnectionEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		hybridConnectionEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property HybridConnectionEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		hybridConnectionEventSubscriptionDestination.Properties = &property
	} else {
		hybridConnectionEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHybridConnectionEventSubscriptionDestination populates the provided destination HybridConnectionEventSubscriptionDestination from our HybridConnectionEventSubscriptionDestination
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) AssignPropertiesToHybridConnectionEventSubscriptionDestination(destination *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(hybridConnectionEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if hybridConnectionEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestinationProperties
		err := hybridConnectionEventSubscriptionDestination.Properties.AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusQueueEventSubscriptionDestination
type ServiceBusQueueEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType ServiceBusQueueEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties that represent the Service Bus destination of an
	//event subscription.
	Properties *ServiceBusQueueEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusQueueEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusQueueEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result ServiceBusQueueEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = serviceBusQueueEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if serviceBusQueueEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*serviceBusQueueEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(ServiceBusQueueEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusQueueEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceBusQueueEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusQueueEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	serviceBusQueueEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 ServiceBusQueueEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		serviceBusQueueEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceBusQueueEventSubscriptionDestination populates our ServiceBusQueueEventSubscriptionDestination from the provided source ServiceBusQueueEventSubscriptionDestination
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) AssignPropertiesFromServiceBusQueueEventSubscriptionDestination(source *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		serviceBusQueueEventSubscriptionDestination.EndpointType = ServiceBusQueueEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		serviceBusQueueEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property ServiceBusQueueEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		serviceBusQueueEventSubscriptionDestination.Properties = &property
	} else {
		serviceBusQueueEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusQueueEventSubscriptionDestination populates the provided destination ServiceBusQueueEventSubscriptionDestination from our ServiceBusQueueEventSubscriptionDestination
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) AssignPropertiesToServiceBusQueueEventSubscriptionDestination(destination *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(serviceBusQueueEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if serviceBusQueueEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestinationProperties
		err := serviceBusQueueEventSubscriptionDestination.Properties.AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusTopicEventSubscriptionDestination
type ServiceBusTopicEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType ServiceBusTopicEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties that represent the Service Bus Topic destination of
	//an event subscription.
	Properties *ServiceBusTopicEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusTopicEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusTopicEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result ServiceBusTopicEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = serviceBusTopicEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if serviceBusTopicEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*serviceBusTopicEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(ServiceBusTopicEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusTopicEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceBusTopicEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusTopicEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	serviceBusTopicEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 ServiceBusTopicEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		serviceBusTopicEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceBusTopicEventSubscriptionDestination populates our ServiceBusTopicEventSubscriptionDestination from the provided source ServiceBusTopicEventSubscriptionDestination
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) AssignPropertiesFromServiceBusTopicEventSubscriptionDestination(source *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		serviceBusTopicEventSubscriptionDestination.EndpointType = ServiceBusTopicEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		serviceBusTopicEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property ServiceBusTopicEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties() to populate field Properties")
		}
		serviceBusTopicEventSubscriptionDestination.Properties = &property
	} else {
		serviceBusTopicEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusTopicEventSubscriptionDestination populates the provided destination ServiceBusTopicEventSubscriptionDestination from our ServiceBusTopicEventSubscriptionDestination
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) AssignPropertiesToServiceBusTopicEventSubscriptionDestination(destination *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(serviceBusTopicEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if serviceBusTopicEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestinationProperties
		err := serviceBusTopicEventSubscriptionDestination.Properties.AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"StorageBlob"}
type StorageBlobDeadLetterDestinationEndpointType string

const StorageBlobDeadLetterDestinationEndpointTypeStorageBlob = StorageBlobDeadLetterDestinationEndpointType("StorageBlob")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageBlobDeadLetterDestinationProperties
type StorageBlobDeadLetterDestinationProperties struct {
	//BlobContainerName: The name of the Storage blob container that is the
	//destination of the deadletter events
	BlobContainerName *string `json:"blobContainerName,omitempty"`

	//ResourceReference: The Azure Resource ID of the storage account that is the
	//destination of the deadletter events
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageBlobDeadLetterDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageBlobDeadLetterDestinationProperties == nil {
		return nil, nil
	}
	var result StorageBlobDeadLetterDestinationPropertiesARM

	// Set property ‘BlobContainerName’:
	if storageBlobDeadLetterDestinationProperties.BlobContainerName != nil {
		blobContainerName := *storageBlobDeadLetterDestinationProperties.BlobContainerName
		result.BlobContainerName = &blobContainerName
	}

	// Set property ‘ResourceId’:
	if storageBlobDeadLetterDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*storageBlobDeadLetterDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageBlobDeadLetterDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageBlobDeadLetterDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageBlobDeadLetterDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘BlobContainerName’:
	if typedInput.BlobContainerName != nil {
		blobContainerName := *typedInput.BlobContainerName
		storageBlobDeadLetterDestinationProperties.BlobContainerName = &blobContainerName
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromStorageBlobDeadLetterDestinationProperties populates our StorageBlobDeadLetterDestinationProperties from the provided source StorageBlobDeadLetterDestinationProperties
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) AssignPropertiesFromStorageBlobDeadLetterDestinationProperties(source *v1alpha1api20200601storage.StorageBlobDeadLetterDestinationProperties) error {

	// BlobContainerName
	storageBlobDeadLetterDestinationProperties.BlobContainerName = genruntime.ClonePointerToString(source.BlobContainerName)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		storageBlobDeadLetterDestinationProperties.ResourceReference = &resourceReference
	} else {
		storageBlobDeadLetterDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageBlobDeadLetterDestinationProperties populates the provided destination StorageBlobDeadLetterDestinationProperties from our StorageBlobDeadLetterDestinationProperties
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) AssignPropertiesToStorageBlobDeadLetterDestinationProperties(destination *v1alpha1api20200601storage.StorageBlobDeadLetterDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobContainerName
	destination.BlobContainerName = genruntime.ClonePointerToString(storageBlobDeadLetterDestinationProperties.BlobContainerName)

	// ResourceReference
	if storageBlobDeadLetterDestinationProperties.ResourceReference != nil {
		resourceReference := storageBlobDeadLetterDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageQueueEventSubscriptionDestination
type StorageQueueEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType StorageQueueEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties for a storage queue destination.
	Properties *StorageQueueEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageQueueEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageQueueEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result StorageQueueEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = storageQueueEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if storageQueueEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*storageQueueEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(StorageQueueEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageQueueEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageQueueEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageQueueEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	storageQueueEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 StorageQueueEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		storageQueueEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageQueueEventSubscriptionDestination populates our StorageQueueEventSubscriptionDestination from the provided source StorageQueueEventSubscriptionDestination
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) AssignPropertiesFromStorageQueueEventSubscriptionDestination(source *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		storageQueueEventSubscriptionDestination.EndpointType = StorageQueueEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		storageQueueEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property StorageQueueEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		storageQueueEventSubscriptionDestination.Properties = &property
	} else {
		storageQueueEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageQueueEventSubscriptionDestination populates the provided destination StorageQueueEventSubscriptionDestination from our StorageQueueEventSubscriptionDestination
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) AssignPropertiesToStorageQueueEventSubscriptionDestination(destination *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(storageQueueEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if storageQueueEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.StorageQueueEventSubscriptionDestinationProperties
		err := storageQueueEventSubscriptionDestination.Properties.AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/WebHookEventSubscriptionDestination
type WebHookEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType WebHookEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: Information about the webhook destination properties for an event
	//subscription.
	Properties *WebHookEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &WebHookEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if webHookEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result WebHookEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = webHookEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if webHookEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*webHookEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(WebHookEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebHookEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebHookEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebHookEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	webHookEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 WebHookEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		webHookEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromWebHookEventSubscriptionDestination populates our WebHookEventSubscriptionDestination from the provided source WebHookEventSubscriptionDestination
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) AssignPropertiesFromWebHookEventSubscriptionDestination(source *v1alpha1api20200601storage.WebHookEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		webHookEventSubscriptionDestination.EndpointType = WebHookEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		webHookEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property WebHookEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromWebHookEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebHookEventSubscriptionDestinationProperties() to populate field Properties")
		}
		webHookEventSubscriptionDestination.Properties = &property
	} else {
		webHookEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebHookEventSubscriptionDestination populates the provided destination WebHookEventSubscriptionDestination from our WebHookEventSubscriptionDestination
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) AssignPropertiesToWebHookEventSubscriptionDestination(destination *v1alpha1api20200601storage.WebHookEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(webHookEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if webHookEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.WebHookEventSubscriptionDestinationProperties
		err := webHookEventSubscriptionDestination.Properties.AssignPropertiesToWebHookEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebHookEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilterStatusOperatorType string

const (
	AdvancedFilterStatusOperatorTypeBoolEquals                = AdvancedFilterStatusOperatorType("BoolEquals")
	AdvancedFilterStatusOperatorTypeNumberGreaterThan         = AdvancedFilterStatusOperatorType("NumberGreaterThan")
	AdvancedFilterStatusOperatorTypeNumberGreaterThanOrEquals = AdvancedFilterStatusOperatorType("NumberGreaterThanOrEquals")
	AdvancedFilterStatusOperatorTypeNumberIn                  = AdvancedFilterStatusOperatorType("NumberIn")
	AdvancedFilterStatusOperatorTypeNumberLessThan            = AdvancedFilterStatusOperatorType("NumberLessThan")
	AdvancedFilterStatusOperatorTypeNumberLessThanOrEquals    = AdvancedFilterStatusOperatorType("NumberLessThanOrEquals")
	AdvancedFilterStatusOperatorTypeNumberNotIn               = AdvancedFilterStatusOperatorType("NumberNotIn")
	AdvancedFilterStatusOperatorTypeStringBeginsWith          = AdvancedFilterStatusOperatorType("StringBeginsWith")
	AdvancedFilterStatusOperatorTypeStringContains            = AdvancedFilterStatusOperatorType("StringContains")
	AdvancedFilterStatusOperatorTypeStringEndsWith            = AdvancedFilterStatusOperatorType("StringEndsWith")
	AdvancedFilterStatusOperatorTypeStringIn                  = AdvancedFilterStatusOperatorType("StringIn")
	AdvancedFilterStatusOperatorTypeStringNotIn               = AdvancedFilterStatusOperatorType("StringNotIn")
)

type AdvancedFilter_BoolEquals struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterBoolEqualsOperatorType `json:"operatorType"`

	//Value: The boolean filter value.
	Value *bool `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_BoolEquals{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterBoolEquals *AdvancedFilter_BoolEquals) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterBoolEquals == nil {
		return nil, nil
	}
	var result AdvancedFilter_BoolEqualsARM

	// Set property ‘Key’:
	if advancedFilterBoolEquals.Key != nil {
		key := *advancedFilterBoolEquals.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterBoolEquals.OperatorType

	// Set property ‘Value’:
	if advancedFilterBoolEquals.Value != nil {
		value := *advancedFilterBoolEquals.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterBoolEquals *AdvancedFilter_BoolEquals) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_BoolEqualsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterBoolEquals *AdvancedFilter_BoolEquals) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_BoolEqualsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_BoolEqualsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterBoolEquals.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterBoolEquals.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterBoolEquals.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterBoolEquals populates our AdvancedFilter_BoolEquals from the provided source AdvancedFilter_BoolEquals
func (advancedFilterBoolEquals *AdvancedFilter_BoolEquals) AssignPropertiesFromAdvancedFilterBoolEquals(source *v1alpha1api20200601storage.AdvancedFilter_BoolEquals) error {

	// Key
	advancedFilterBoolEquals.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterBoolEquals.OperatorType = AdvancedFilterBoolEqualsOperatorType(*source.OperatorType)
	} else {
		advancedFilterBoolEquals.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterBoolEquals.Value = &value
	} else {
		advancedFilterBoolEquals.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterBoolEquals populates the provided destination AdvancedFilter_BoolEquals from our AdvancedFilter_BoolEquals
func (advancedFilterBoolEquals *AdvancedFilter_BoolEquals) AssignPropertiesToAdvancedFilterBoolEquals(destination *v1alpha1api20200601storage.AdvancedFilter_BoolEquals) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterBoolEquals.Key)

	// OperatorType
	operatorType := string(advancedFilterBoolEquals.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterBoolEquals.Value != nil {
		value := *advancedFilterBoolEquals.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberGreaterThan struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberGreaterThanOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberGreaterThan{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberGreaterThan *AdvancedFilter_NumberGreaterThan) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberGreaterThan == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberGreaterThanARM

	// Set property ‘Key’:
	if advancedFilterNumberGreaterThan.Key != nil {
		key := *advancedFilterNumberGreaterThan.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberGreaterThan.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberGreaterThan.Value != nil {
		value := *advancedFilterNumberGreaterThan.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberGreaterThan *AdvancedFilter_NumberGreaterThan) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberGreaterThanARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberGreaterThan *AdvancedFilter_NumberGreaterThan) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberGreaterThanARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberGreaterThanARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberGreaterThan.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberGreaterThan.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberGreaterThan.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberGreaterThan populates our AdvancedFilter_NumberGreaterThan from the provided source AdvancedFilter_NumberGreaterThan
func (advancedFilterNumberGreaterThan *AdvancedFilter_NumberGreaterThan) AssignPropertiesFromAdvancedFilterNumberGreaterThan(source *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThan) error {

	// Key
	advancedFilterNumberGreaterThan.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberGreaterThan.OperatorType = AdvancedFilterNumberGreaterThanOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberGreaterThan.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberGreaterThan.Value = &value
	} else {
		advancedFilterNumberGreaterThan.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberGreaterThan populates the provided destination AdvancedFilter_NumberGreaterThan from our AdvancedFilter_NumberGreaterThan
func (advancedFilterNumberGreaterThan *AdvancedFilter_NumberGreaterThan) AssignPropertiesToAdvancedFilterNumberGreaterThan(destination *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThan) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberGreaterThan.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberGreaterThan.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberGreaterThan.Value != nil {
		value := *advancedFilterNumberGreaterThan.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberGreaterThanOrEquals struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberGreaterThanOrEqualsOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberGreaterThanOrEquals{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberGreaterThanOrEquals == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberGreaterThanOrEqualsARM

	// Set property ‘Key’:
	if advancedFilterNumberGreaterThanOrEquals.Key != nil {
		key := *advancedFilterNumberGreaterThanOrEquals.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberGreaterThanOrEquals.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberGreaterThanOrEquals.Value != nil {
		value := *advancedFilterNumberGreaterThanOrEquals.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberGreaterThanOrEqualsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberGreaterThanOrEqualsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberGreaterThanOrEqualsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberGreaterThanOrEquals.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberGreaterThanOrEquals.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberGreaterThanOrEquals.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEquals populates our AdvancedFilter_NumberGreaterThanOrEquals from the provided source AdvancedFilter_NumberGreaterThanOrEquals
func (advancedFilterNumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals) AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEquals(source *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanOrEquals) error {

	// Key
	advancedFilterNumberGreaterThanOrEquals.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberGreaterThanOrEquals.OperatorType = AdvancedFilterNumberGreaterThanOrEqualsOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberGreaterThanOrEquals.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberGreaterThanOrEquals.Value = &value
	} else {
		advancedFilterNumberGreaterThanOrEquals.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberGreaterThanOrEquals populates the provided destination AdvancedFilter_NumberGreaterThanOrEquals from our AdvancedFilter_NumberGreaterThanOrEquals
func (advancedFilterNumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals) AssignPropertiesToAdvancedFilterNumberGreaterThanOrEquals(destination *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanOrEquals) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberGreaterThanOrEquals.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberGreaterThanOrEquals.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberGreaterThanOrEquals.Value != nil {
		value := *advancedFilterNumberGreaterThanOrEquals.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberIn struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberInOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []float64 `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberIn *AdvancedFilter_NumberIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberIn == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberInARM

	// Set property ‘Key’:
	if advancedFilterNumberIn.Key != nil {
		key := *advancedFilterNumberIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberIn.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterNumberIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberIn *AdvancedFilter_NumberIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberIn *AdvancedFilter_NumberIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberIn.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberIn.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterNumberIn.Values = append(advancedFilterNumberIn.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberIn populates our AdvancedFilter_NumberIn from the provided source AdvancedFilter_NumberIn
func (advancedFilterNumberIn *AdvancedFilter_NumberIn) AssignPropertiesFromAdvancedFilterNumberIn(source *v1alpha1api20200601storage.AdvancedFilter_NumberIn) error {

	// Key
	advancedFilterNumberIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberIn.OperatorType = AdvancedFilterNumberInOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberIn.OperatorType = ""
	}

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		advancedFilterNumberIn.Values = valueList
	} else {
		advancedFilterNumberIn.Values = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberIn populates the provided destination AdvancedFilter_NumberIn from our AdvancedFilter_NumberIn
func (advancedFilterNumberIn *AdvancedFilter_NumberIn) AssignPropertiesToAdvancedFilterNumberIn(destination *v1alpha1api20200601storage.AdvancedFilter_NumberIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberIn.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberIn.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	if advancedFilterNumberIn.Values != nil {
		valueList := make([]float64, len(advancedFilterNumberIn.Values))
		for valueIndex, valueItem := range advancedFilterNumberIn.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberLessThan struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberLessThanOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberLessThan{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberLessThan *AdvancedFilter_NumberLessThan) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberLessThan == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberLessThanARM

	// Set property ‘Key’:
	if advancedFilterNumberLessThan.Key != nil {
		key := *advancedFilterNumberLessThan.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberLessThan.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberLessThan.Value != nil {
		value := *advancedFilterNumberLessThan.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberLessThan *AdvancedFilter_NumberLessThan) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberLessThanARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberLessThan *AdvancedFilter_NumberLessThan) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberLessThanARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberLessThanARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberLessThan.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberLessThan.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberLessThan.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberLessThan populates our AdvancedFilter_NumberLessThan from the provided source AdvancedFilter_NumberLessThan
func (advancedFilterNumberLessThan *AdvancedFilter_NumberLessThan) AssignPropertiesFromAdvancedFilterNumberLessThan(source *v1alpha1api20200601storage.AdvancedFilter_NumberLessThan) error {

	// Key
	advancedFilterNumberLessThan.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberLessThan.OperatorType = AdvancedFilterNumberLessThanOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberLessThan.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberLessThan.Value = &value
	} else {
		advancedFilterNumberLessThan.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberLessThan populates the provided destination AdvancedFilter_NumberLessThan from our AdvancedFilter_NumberLessThan
func (advancedFilterNumberLessThan *AdvancedFilter_NumberLessThan) AssignPropertiesToAdvancedFilterNumberLessThan(destination *v1alpha1api20200601storage.AdvancedFilter_NumberLessThan) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberLessThan.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberLessThan.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberLessThan.Value != nil {
		value := *advancedFilterNumberLessThan.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberLessThanOrEquals struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberLessThanOrEqualsOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberLessThanOrEquals{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberLessThanOrEquals *AdvancedFilter_NumberLessThanOrEquals) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberLessThanOrEquals == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberLessThanOrEqualsARM

	// Set property ‘Key’:
	if advancedFilterNumberLessThanOrEquals.Key != nil {
		key := *advancedFilterNumberLessThanOrEquals.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberLessThanOrEquals.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberLessThanOrEquals.Value != nil {
		value := *advancedFilterNumberLessThanOrEquals.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberLessThanOrEquals *AdvancedFilter_NumberLessThanOrEquals) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberLessThanOrEqualsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberLessThanOrEquals *AdvancedFilter_NumberLessThanOrEquals) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberLessThanOrEqualsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberLessThanOrEqualsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberLessThanOrEquals.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberLessThanOrEquals.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberLessThanOrEquals.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberLessThanOrEquals populates our AdvancedFilter_NumberLessThanOrEquals from the provided source AdvancedFilter_NumberLessThanOrEquals
func (advancedFilterNumberLessThanOrEquals *AdvancedFilter_NumberLessThanOrEquals) AssignPropertiesFromAdvancedFilterNumberLessThanOrEquals(source *v1alpha1api20200601storage.AdvancedFilter_NumberLessThanOrEquals) error {

	// Key
	advancedFilterNumberLessThanOrEquals.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberLessThanOrEquals.OperatorType = AdvancedFilterNumberLessThanOrEqualsOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberLessThanOrEquals.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberLessThanOrEquals.Value = &value
	} else {
		advancedFilterNumberLessThanOrEquals.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberLessThanOrEquals populates the provided destination AdvancedFilter_NumberLessThanOrEquals from our AdvancedFilter_NumberLessThanOrEquals
func (advancedFilterNumberLessThanOrEquals *AdvancedFilter_NumberLessThanOrEquals) AssignPropertiesToAdvancedFilterNumberLessThanOrEquals(destination *v1alpha1api20200601storage.AdvancedFilter_NumberLessThanOrEquals) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberLessThanOrEquals.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberLessThanOrEquals.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberLessThanOrEquals.Value != nil {
		value := *advancedFilterNumberLessThanOrEquals.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberNotIn struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberNotInOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []float64 `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberNotIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberNotIn *AdvancedFilter_NumberNotIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberNotIn == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberNotInARM

	// Set property ‘Key’:
	if advancedFilterNumberNotIn.Key != nil {
		key := *advancedFilterNumberNotIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberNotIn.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterNumberNotIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberNotIn *AdvancedFilter_NumberNotIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberNotInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberNotIn *AdvancedFilter_NumberNotIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberNotInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberNotInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberNotIn.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberNotIn.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterNumberNotIn.Values = append(advancedFilterNumberNotIn.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberNotIn populates our AdvancedFilter_NumberNotIn from the provided source AdvancedFilter_NumberNotIn
func (advancedFilterNumberNotIn *AdvancedFilter_NumberNotIn) AssignPropertiesFromAdvancedFilterNumberNotIn(source *v1alpha1api20200601storage.AdvancedFilter_NumberNotIn) error {

	// Key
	advancedFilterNumberNotIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberNotIn.OperatorType = AdvancedFilterNumberNotInOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberNotIn.OperatorType = ""
	}

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		advancedFilterNumberNotIn.Values = valueList
	} else {
		advancedFilterNumberNotIn.Values = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberNotIn populates the provided destination AdvancedFilter_NumberNotIn from our AdvancedFilter_NumberNotIn
func (advancedFilterNumberNotIn *AdvancedFilter_NumberNotIn) AssignPropertiesToAdvancedFilterNumberNotIn(destination *v1alpha1api20200601storage.AdvancedFilter_NumberNotIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberNotIn.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberNotIn.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	if advancedFilterNumberNotIn.Values != nil {
		valueList := make([]float64, len(advancedFilterNumberNotIn.Values))
		for valueIndex, valueItem := range advancedFilterNumberNotIn.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringBeginsWith struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringBeginsWithOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringBeginsWith{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringBeginsWith *AdvancedFilter_StringBeginsWith) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringBeginsWith == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringBeginsWithARM

	// Set property ‘Key’:
	if advancedFilterStringBeginsWith.Key != nil {
		key := *advancedFilterStringBeginsWith.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringBeginsWith.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringBeginsWith.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringBeginsWith *AdvancedFilter_StringBeginsWith) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringBeginsWithARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringBeginsWith *AdvancedFilter_StringBeginsWith) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringBeginsWithARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringBeginsWithARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringBeginsWith.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringBeginsWith.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringBeginsWith.Values = append(advancedFilterStringBeginsWith.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringBeginsWith populates our AdvancedFilter_StringBeginsWith from the provided source AdvancedFilter_StringBeginsWith
func (advancedFilterStringBeginsWith *AdvancedFilter_StringBeginsWith) AssignPropertiesFromAdvancedFilterStringBeginsWith(source *v1alpha1api20200601storage.AdvancedFilter_StringBeginsWith) error {

	// Key
	advancedFilterStringBeginsWith.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringBeginsWith.OperatorType = AdvancedFilterStringBeginsWithOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringBeginsWith.OperatorType = ""
	}

	// Values
	advancedFilterStringBeginsWith.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringBeginsWith populates the provided destination AdvancedFilter_StringBeginsWith from our AdvancedFilter_StringBeginsWith
func (advancedFilterStringBeginsWith *AdvancedFilter_StringBeginsWith) AssignPropertiesToAdvancedFilterStringBeginsWith(destination *v1alpha1api20200601storage.AdvancedFilter_StringBeginsWith) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringBeginsWith.Key)

	// OperatorType
	operatorType := string(advancedFilterStringBeginsWith.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringBeginsWith.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringContains struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringContainsOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringContains{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringContains *AdvancedFilter_StringContains) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringContains == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringContainsARM

	// Set property ‘Key’:
	if advancedFilterStringContains.Key != nil {
		key := *advancedFilterStringContains.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringContains.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringContains.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringContains *AdvancedFilter_StringContains) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringContainsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringContains *AdvancedFilter_StringContains) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringContainsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringContainsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringContains.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringContains.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringContains.Values = append(advancedFilterStringContains.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringContains populates our AdvancedFilter_StringContains from the provided source AdvancedFilter_StringContains
func (advancedFilterStringContains *AdvancedFilter_StringContains) AssignPropertiesFromAdvancedFilterStringContains(source *v1alpha1api20200601storage.AdvancedFilter_StringContains) error {

	// Key
	advancedFilterStringContains.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringContains.OperatorType = AdvancedFilterStringContainsOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringContains.OperatorType = ""
	}

	// Values
	advancedFilterStringContains.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringContains populates the provided destination AdvancedFilter_StringContains from our AdvancedFilter_StringContains
func (advancedFilterStringContains *AdvancedFilter_StringContains) AssignPropertiesToAdvancedFilterStringContains(destination *v1alpha1api20200601storage.AdvancedFilter_StringContains) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringContains.Key)

	// OperatorType
	operatorType := string(advancedFilterStringContains.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringContains.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringEndsWith struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringEndsWithOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringEndsWith{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringEndsWith *AdvancedFilter_StringEndsWith) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringEndsWith == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringEndsWithARM

	// Set property ‘Key’:
	if advancedFilterStringEndsWith.Key != nil {
		key := *advancedFilterStringEndsWith.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringEndsWith.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringEndsWith.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringEndsWith *AdvancedFilter_StringEndsWith) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringEndsWithARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringEndsWith *AdvancedFilter_StringEndsWith) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringEndsWithARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringEndsWithARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringEndsWith.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringEndsWith.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringEndsWith.Values = append(advancedFilterStringEndsWith.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringEndsWith populates our AdvancedFilter_StringEndsWith from the provided source AdvancedFilter_StringEndsWith
func (advancedFilterStringEndsWith *AdvancedFilter_StringEndsWith) AssignPropertiesFromAdvancedFilterStringEndsWith(source *v1alpha1api20200601storage.AdvancedFilter_StringEndsWith) error {

	// Key
	advancedFilterStringEndsWith.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringEndsWith.OperatorType = AdvancedFilterStringEndsWithOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringEndsWith.OperatorType = ""
	}

	// Values
	advancedFilterStringEndsWith.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringEndsWith populates the provided destination AdvancedFilter_StringEndsWith from our AdvancedFilter_StringEndsWith
func (advancedFilterStringEndsWith *AdvancedFilter_StringEndsWith) AssignPropertiesToAdvancedFilterStringEndsWith(destination *v1alpha1api20200601storage.AdvancedFilter_StringEndsWith) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringEndsWith.Key)

	// OperatorType
	operatorType := string(advancedFilterStringEndsWith.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringEndsWith.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringIn struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringInOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringIn *AdvancedFilter_StringIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringIn == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringInARM

	// Set property ‘Key’:
	if advancedFilterStringIn.Key != nil {
		key := *advancedFilterStringIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringIn.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringIn *AdvancedFilter_StringIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringIn *AdvancedFilter_StringIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringIn.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringIn.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringIn.Values = append(advancedFilterStringIn.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringIn populates our AdvancedFilter_StringIn from the provided source AdvancedFilter_StringIn
func (advancedFilterStringIn *AdvancedFilter_StringIn) AssignPropertiesFromAdvancedFilterStringIn(source *v1alpha1api20200601storage.AdvancedFilter_StringIn) error {

	// Key
	advancedFilterStringIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringIn.OperatorType = AdvancedFilterStringInOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringIn.OperatorType = ""
	}

	// Values
	advancedFilterStringIn.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringIn populates the provided destination AdvancedFilter_StringIn from our AdvancedFilter_StringIn
func (advancedFilterStringIn *AdvancedFilter_StringIn) AssignPropertiesToAdvancedFilterStringIn(destination *v1alpha1api20200601storage.AdvancedFilter_StringIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringIn.Key)

	// OperatorType
	operatorType := string(advancedFilterStringIn.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringIn.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringNotIn struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringNotInOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringNotIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringNotIn *AdvancedFilter_StringNotIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringNotIn == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringNotInARM

	// Set property ‘Key’:
	if advancedFilterStringNotIn.Key != nil {
		key := *advancedFilterStringNotIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringNotIn.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringNotIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringNotIn *AdvancedFilter_StringNotIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringNotInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringNotIn *AdvancedFilter_StringNotIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringNotInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringNotInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringNotIn.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringNotIn.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringNotIn.Values = append(advancedFilterStringNotIn.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringNotIn populates our AdvancedFilter_StringNotIn from the provided source AdvancedFilter_StringNotIn
func (advancedFilterStringNotIn *AdvancedFilter_StringNotIn) AssignPropertiesFromAdvancedFilterStringNotIn(source *v1alpha1api20200601storage.AdvancedFilter_StringNotIn) error {

	// Key
	advancedFilterStringNotIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringNotIn.OperatorType = AdvancedFilterStringNotInOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringNotIn.OperatorType = ""
	}

	// Values
	advancedFilterStringNotIn.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringNotIn populates the provided destination AdvancedFilter_StringNotIn from our AdvancedFilter_StringNotIn
func (advancedFilterStringNotIn *AdvancedFilter_StringNotIn) AssignPropertiesToAdvancedFilterStringNotIn(destination *v1alpha1api20200601storage.AdvancedFilter_StringNotIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringNotIn.Key)

	// OperatorType
	operatorType := string(advancedFilterStringNotIn.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringNotIn.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AzureFunction"}
type AzureFunctionEventSubscriptionDestinationEndpointType string

const AzureFunctionEventSubscriptionDestinationEndpointTypeAzureFunction = AzureFunctionEventSubscriptionDestinationEndpointType("AzureFunction")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/AzureFunctionEventSubscriptionDestinationProperties
type AzureFunctionEventSubscriptionDestinationProperties struct {
	//MaxEventsPerBatch: Maximum number of events per batch.
	MaxEventsPerBatch *int `json:"maxEventsPerBatch,omitempty"`

	//PreferredBatchSizeInKilobytes: Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `json:"preferredBatchSizeInKilobytes,omitempty"`

	//ResourceReference: The Azure Resource Id that represents the endpoint of the
	//Azure Function destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFunctionEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if azureFunctionEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result AzureFunctionEventSubscriptionDestinationPropertiesARM

	// Set property ‘MaxEventsPerBatch’:
	if azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch
		result.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes
		result.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// Set property ‘ResourceId’:
	if azureFunctionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*azureFunctionEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFunctionEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFunctionEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFunctionEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘MaxEventsPerBatch’:
	if typedInput.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *typedInput.MaxEventsPerBatch
		azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if typedInput.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *typedInput.PreferredBatchSizeInKilobytes
		azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties populates our AzureFunctionEventSubscriptionDestinationProperties from the provided source AzureFunctionEventSubscriptionDestinationProperties
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestinationProperties) error {

	// MaxEventsPerBatch
	azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		azureFunctionEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		azureFunctionEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties populates the provided destination AzureFunctionEventSubscriptionDestinationProperties from our AzureFunctionEventSubscriptionDestinationProperties
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if azureFunctionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := azureFunctionEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"EventHub"}
type EventHubEventSubscriptionDestinationEndpointType string

const EventHubEventSubscriptionDestinationEndpointTypeEventHub = EventHubEventSubscriptionDestinationEndpointType("EventHub")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventHubEventSubscriptionDestinationProperties
type EventHubEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource Id that represents the endpoint of an
	//Event Hub destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &EventHubEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventHubEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result EventHubEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if eventHubEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*eventHubEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventHubEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(EventHubEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventHubEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromEventHubEventSubscriptionDestinationProperties populates our EventHubEventSubscriptionDestinationProperties from the provided source EventHubEventSubscriptionDestinationProperties
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) AssignPropertiesFromEventHubEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.EventHubEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		eventHubEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		eventHubEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventHubEventSubscriptionDestinationProperties populates the provided destination EventHubEventSubscriptionDestinationProperties from our EventHubEventSubscriptionDestinationProperties
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) AssignPropertiesToEventHubEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.EventHubEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if eventHubEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := eventHubEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"HybridConnection"}
type HybridConnectionEventSubscriptionDestinationEndpointType string

const HybridConnectionEventSubscriptionDestinationEndpointTypeHybridConnection = HybridConnectionEventSubscriptionDestinationEndpointType("HybridConnection")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/HybridConnectionEventSubscriptionDestinationProperties
type HybridConnectionEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource ID of an hybrid connection that is the
	//destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &HybridConnectionEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if hybridConnectionEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result HybridConnectionEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if hybridConnectionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*hybridConnectionEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HybridConnectionEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(HybridConnectionEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HybridConnectionEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties populates our HybridConnectionEventSubscriptionDestinationProperties from the provided source HybridConnectionEventSubscriptionDestinationProperties
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		hybridConnectionEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		hybridConnectionEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties populates the provided destination HybridConnectionEventSubscriptionDestinationProperties from our HybridConnectionEventSubscriptionDestinationProperties
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if hybridConnectionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := hybridConnectionEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ServiceBusQueue"}
type ServiceBusQueueEventSubscriptionDestinationEndpointType string

const ServiceBusQueueEventSubscriptionDestinationEndpointTypeServiceBusQueue = ServiceBusQueueEventSubscriptionDestinationEndpointType("ServiceBusQueue")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusQueueEventSubscriptionDestinationProperties
type ServiceBusQueueEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource Id that represents the endpoint of the
	//Service Bus destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusQueueEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusQueueEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result ServiceBusQueueEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusQueueEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(ServiceBusQueueEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusQueueEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties populates our ServiceBusQueueEventSubscriptionDestinationProperties from the provided source ServiceBusQueueEventSubscriptionDestinationProperties
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties populates the provided destination ServiceBusQueueEventSubscriptionDestinationProperties from our ServiceBusQueueEventSubscriptionDestinationProperties
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ServiceBusTopic"}
type ServiceBusTopicEventSubscriptionDestinationEndpointType string

const ServiceBusTopicEventSubscriptionDestinationEndpointTypeServiceBusTopic = ServiceBusTopicEventSubscriptionDestinationEndpointType("ServiceBusTopic")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusTopicEventSubscriptionDestinationProperties
type ServiceBusTopicEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource Id that represents the endpoint of the
	//Service Bus Topic destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusTopicEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusTopicEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result ServiceBusTopicEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusTopicEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(ServiceBusTopicEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusTopicEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties populates our ServiceBusTopicEventSubscriptionDestinationProperties from the provided source ServiceBusTopicEventSubscriptionDestinationProperties
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties populates the provided destination ServiceBusTopicEventSubscriptionDestinationProperties from our ServiceBusTopicEventSubscriptionDestinationProperties
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"StorageQueue"}
type StorageQueueEventSubscriptionDestinationEndpointType string

const StorageQueueEventSubscriptionDestinationEndpointTypeStorageQueue = StorageQueueEventSubscriptionDestinationEndpointType("StorageQueue")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageQueueEventSubscriptionDestinationProperties
type StorageQueueEventSubscriptionDestinationProperties struct {
	//QueueName: The name of the Storage queue under a storage account that is the
	//destination of an event subscription.
	QueueName *string `json:"queueName,omitempty"`

	//ResourceReference: The Azure Resource ID of the storage account that contains
	//the queue that is the destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageQueueEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageQueueEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result StorageQueueEventSubscriptionDestinationPropertiesARM

	// Set property ‘QueueName’:
	if storageQueueEventSubscriptionDestinationProperties.QueueName != nil {
		queueName := *storageQueueEventSubscriptionDestinationProperties.QueueName
		result.QueueName = &queueName
	}

	// Set property ‘ResourceId’:
	if storageQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*storageQueueEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageQueueEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageQueueEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageQueueEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘QueueName’:
	if typedInput.QueueName != nil {
		queueName := *typedInput.QueueName
		storageQueueEventSubscriptionDestinationProperties.QueueName = &queueName
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties populates our StorageQueueEventSubscriptionDestinationProperties from the provided source StorageQueueEventSubscriptionDestinationProperties
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestinationProperties) error {

	// QueueName
	storageQueueEventSubscriptionDestinationProperties.QueueName = genruntime.ClonePointerToString(source.QueueName)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		storageQueueEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		storageQueueEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties populates the provided destination StorageQueueEventSubscriptionDestinationProperties from our StorageQueueEventSubscriptionDestinationProperties
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// QueueName
	destination.QueueName = genruntime.ClonePointerToString(storageQueueEventSubscriptionDestinationProperties.QueueName)

	// ResourceReference
	if storageQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := storageQueueEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"WebHook"}
type WebHookEventSubscriptionDestinationEndpointType string

const WebHookEventSubscriptionDestinationEndpointTypeWebHook = WebHookEventSubscriptionDestinationEndpointType("WebHook")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/WebHookEventSubscriptionDestinationProperties
type WebHookEventSubscriptionDestinationProperties struct {
	//AzureActiveDirectoryApplicationIdOrUri: The Azure Active Directory Application
	//ID or URI to get the access token that will be included as the bearer token in
	//delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `json:"azureActiveDirectoryApplicationIdOrUri,omitempty"`

	//AzureActiveDirectoryTenantId: The Azure Active Directory Tenant ID to get the
	//access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `json:"azureActiveDirectoryTenantId,omitempty"`

	//EndpointUrl: The URL that represents the endpoint of the destination of an event
	//subscription.
	EndpointUrl *string `json:"endpointUrl,omitempty"`

	//MaxEventsPerBatch: Maximum number of events per batch.
	MaxEventsPerBatch *int `json:"maxEventsPerBatch,omitempty"`

	//PreferredBatchSizeInKilobytes: Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `json:"preferredBatchSizeInKilobytes,omitempty"`
}

var _ genruntime.ARMTransformer = &WebHookEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if webHookEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result WebHookEventSubscriptionDestinationPropertiesARM

	// Set property ‘AzureActiveDirectoryApplicationIdOrUri’:
	if webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri != nil {
		azureActiveDirectoryApplicationIdOrUri := *webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri
		result.AzureActiveDirectoryApplicationIdOrUri = &azureActiveDirectoryApplicationIdOrUri
	}

	// Set property ‘AzureActiveDirectoryTenantId’:
	if webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId != nil {
		azureActiveDirectoryTenantId := *webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId
		result.AzureActiveDirectoryTenantId = &azureActiveDirectoryTenantId
	}

	// Set property ‘EndpointUrl’:
	if webHookEventSubscriptionDestinationProperties.EndpointUrl != nil {
		endpointUrl := *webHookEventSubscriptionDestinationProperties.EndpointUrl
		result.EndpointUrl = &endpointUrl
	}

	// Set property ‘MaxEventsPerBatch’:
	if webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch
		result.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes
		result.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebHookEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebHookEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebHookEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘AzureActiveDirectoryApplicationIdOrUri’:
	if typedInput.AzureActiveDirectoryApplicationIdOrUri != nil {
		azureActiveDirectoryApplicationIdOrUri := *typedInput.AzureActiveDirectoryApplicationIdOrUri
		webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri = &azureActiveDirectoryApplicationIdOrUri
	}

	// Set property ‘AzureActiveDirectoryTenantId’:
	if typedInput.AzureActiveDirectoryTenantId != nil {
		azureActiveDirectoryTenantId := *typedInput.AzureActiveDirectoryTenantId
		webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId = &azureActiveDirectoryTenantId
	}

	// Set property ‘EndpointUrl’:
	if typedInput.EndpointUrl != nil {
		endpointUrl := *typedInput.EndpointUrl
		webHookEventSubscriptionDestinationProperties.EndpointUrl = &endpointUrl
	}

	// Set property ‘MaxEventsPerBatch’:
	if typedInput.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *typedInput.MaxEventsPerBatch
		webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if typedInput.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *typedInput.PreferredBatchSizeInKilobytes
		webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// No error
	return nil
}

// AssignPropertiesFromWebHookEventSubscriptionDestinationProperties populates our WebHookEventSubscriptionDestinationProperties from the provided source WebHookEventSubscriptionDestinationProperties
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) AssignPropertiesFromWebHookEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.WebHookEventSubscriptionDestinationProperties) error {

	// AzureActiveDirectoryApplicationIdOrUri
	webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(source.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(source.AzureActiveDirectoryTenantId)

	// EndpointUrl
	webHookEventSubscriptionDestinationProperties.EndpointUrl = genruntime.ClonePointerToString(source.EndpointUrl)

	// MaxEventsPerBatch
	webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// No error
	return nil
}

// AssignPropertiesToWebHookEventSubscriptionDestinationProperties populates the provided destination WebHookEventSubscriptionDestinationProperties from our WebHookEventSubscriptionDestinationProperties
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) AssignPropertiesToWebHookEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.WebHookEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureActiveDirectoryApplicationIdOrUri
	destination.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	destination.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId)

	// EndpointUrl
	destination.EndpointUrl = genruntime.ClonePointerToString(webHookEventSubscriptionDestinationProperties.EndpointUrl)

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BoolEquals"}
type AdvancedFilterBoolEqualsOperatorType string

const AdvancedFilterBoolEqualsOperatorTypeBoolEquals = AdvancedFilterBoolEqualsOperatorType("BoolEquals")

// +kubebuilder:validation:Enum={"NumberGreaterThan"}
type AdvancedFilterNumberGreaterThanOperatorType string

const AdvancedFilterNumberGreaterThanOperatorTypeNumberGreaterThan = AdvancedFilterNumberGreaterThanOperatorType("NumberGreaterThan")

// +kubebuilder:validation:Enum={"NumberGreaterThanOrEquals"}
type AdvancedFilterNumberGreaterThanOrEqualsOperatorType string

const AdvancedFilterNumberGreaterThanOrEqualsOperatorTypeNumberGreaterThanOrEquals = AdvancedFilterNumberGreaterThanOrEqualsOperatorType("NumberGreaterThanOrEquals")

// +kubebuilder:validation:Enum={"NumberIn"}
type AdvancedFilterNumberInOperatorType string

const AdvancedFilterNumberInOperatorTypeNumberIn = AdvancedFilterNumberInOperatorType("NumberIn")

// +kubebuilder:validation:Enum={"NumberLessThan"}
type AdvancedFilterNumberLessThanOperatorType string

const AdvancedFilterNumberLessThanOperatorTypeNumberLessThan = AdvancedFilterNumberLessThanOperatorType("NumberLessThan")

// +kubebuilder:validation:Enum={"NumberLessThanOrEquals"}
type AdvancedFilterNumberLessThanOrEqualsOperatorType string

const AdvancedFilterNumberLessThanOrEqualsOperatorTypeNumberLessThanOrEquals = AdvancedFilterNumberLessThanOrEqualsOperatorType("NumberLessThanOrEquals")

// +kubebuilder:validation:Enum={"NumberNotIn"}
type AdvancedFilterNumberNotInOperatorType string

const AdvancedFilterNumberNotInOperatorTypeNumberNotIn = AdvancedFilterNumberNotInOperatorType("NumberNotIn")

// +kubebuilder:validation:Enum={"StringBeginsWith"}
type AdvancedFilterStringBeginsWithOperatorType string

const AdvancedFilterStringBeginsWithOperatorTypeStringBeginsWith = AdvancedFilterStringBeginsWithOperatorType("StringBeginsWith")

// +kubebuilder:validation:Enum={"StringContains"}
type AdvancedFilterStringContainsOperatorType string

const AdvancedFilterStringContainsOperatorTypeStringContains = AdvancedFilterStringContainsOperatorType("StringContains")

// +kubebuilder:validation:Enum={"StringEndsWith"}
type AdvancedFilterStringEndsWithOperatorType string

const AdvancedFilterStringEndsWithOperatorTypeStringEndsWith = AdvancedFilterStringEndsWithOperatorType("StringEndsWith")

// +kubebuilder:validation:Enum={"StringIn"}
type AdvancedFilterStringInOperatorType string

const AdvancedFilterStringInOperatorTypeStringIn = AdvancedFilterStringInOperatorType("StringIn")

// +kubebuilder:validation:Enum={"StringNotIn"}
type AdvancedFilterStringNotInOperatorType string

const AdvancedFilterStringNotInOperatorTypeStringNotIn = AdvancedFilterStringNotInOperatorType("StringNotIn")

func init() {
	SchemeBuilder.Register(&EventSubscription{}, &EventSubscriptionList{})
}
