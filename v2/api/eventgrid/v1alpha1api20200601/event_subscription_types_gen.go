// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
type EventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSubscriptions_SPEC  `json:"spec,omitempty"`
	Status            EventSubscription_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &EventSubscription{}

// GetConditions returns the conditions of the resource
func (subscription *EventSubscription) GetConditions() conditions.Conditions {
	return subscription.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (subscription *EventSubscription) SetConditions(conditions conditions.Conditions) {
	subscription.Status.Conditions = conditions
}

var _ conversion.Convertible = &EventSubscription{}

// ConvertFrom populates our EventSubscription from the provided hub EventSubscription
func (subscription *EventSubscription) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200601storage.EventSubscription)
	if !ok {
		return fmt.Errorf("expected storage:eventgrid/v1alpha1api20200601storage/EventSubscription but received %T instead", hub)
	}

	return subscription.AssignPropertiesFromEventSubscription(source)
}

// ConvertTo populates the provided hub EventSubscription from our EventSubscription
func (subscription *EventSubscription) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200601storage.EventSubscription)
	if !ok {
		return fmt.Errorf("expected storage:eventgrid/v1alpha1api20200601storage/EventSubscription but received %T instead", hub)
	}

	return subscription.AssignPropertiesToEventSubscription(destination)
}

// +kubebuilder:webhook:path=/mutate-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=default.v1alpha1api20200601.eventsubscriptions.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &EventSubscription{}

// Default applies defaults to the EventSubscription resource
func (subscription *EventSubscription) Default() {
	subscription.defaultImpl()
	var temp interface{} = subscription
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (subscription *EventSubscription) defaultAzureName() {
	if subscription.Spec.AzureName == "" {
		subscription.Spec.AzureName = subscription.Name
	}
}

// defaultImpl applies the code generated defaults to the EventSubscription resource
func (subscription *EventSubscription) defaultImpl() { subscription.defaultAzureName() }

var _ genruntime.KubernetesResource = &EventSubscription{}

// AzureName returns the Azure name of the resource
func (subscription *EventSubscription) AzureName() string {
	return subscription.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (subscription EventSubscription) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (subscription *EventSubscription) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (subscription *EventSubscription) GetSpec() genruntime.ConvertibleSpec {
	return &subscription.Spec
}

// GetStatus returns the status of this resource
func (subscription *EventSubscription) GetStatus() genruntime.ConvertibleStatus {
	return &subscription.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (subscription *EventSubscription) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (subscription *EventSubscription) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EventSubscription_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (subscription *EventSubscription) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(subscription.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  subscription.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (subscription *EventSubscription) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EventSubscription_Status); ok {
		subscription.Status = *st
		return nil
	}

	// Convert status to required version
	var st EventSubscription_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	subscription.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=validate.v1alpha1api20200601.eventsubscriptions.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &EventSubscription{}

// ValidateCreate validates the creation of the resource
func (subscription *EventSubscription) ValidateCreate() error {
	validations := subscription.createValidations()
	var temp interface{} = subscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (subscription *EventSubscription) ValidateDelete() error {
	validations := subscription.deleteValidations()
	var temp interface{} = subscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (subscription *EventSubscription) ValidateUpdate(old runtime.Object) error {
	validations := subscription.updateValidations()
	var temp interface{} = subscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (subscription *EventSubscription) createValidations() []func() error {
	return []func() error{subscription.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (subscription *EventSubscription) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (subscription *EventSubscription) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return subscription.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (subscription *EventSubscription) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&subscription.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromEventSubscription populates our EventSubscription from the provided source EventSubscription
func (subscription *EventSubscription) AssignPropertiesFromEventSubscription(source *v1alpha1api20200601storage.EventSubscription) error {

	// ObjectMeta
	subscription.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec EventSubscriptions_SPEC
	err := spec.AssignPropertiesFromEventSubscriptionsSPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionsSPEC() to populate field Spec")
	}
	subscription.Spec = spec

	// Status
	var status EventSubscription_Status
	err = status.AssignPropertiesFromEventSubscriptionStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionStatus() to populate field Status")
	}
	subscription.Status = status

	// No error
	return nil
}

// AssignPropertiesToEventSubscription populates the provided destination EventSubscription from our EventSubscription
func (subscription *EventSubscription) AssignPropertiesToEventSubscription(destination *v1alpha1api20200601storage.EventSubscription) error {

	// ObjectMeta
	destination.ObjectMeta = *subscription.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200601storage.EventSubscriptions_SPEC
	err := subscription.Spec.AssignPropertiesToEventSubscriptionsSPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionsSPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20200601storage.EventSubscription_Status
	err = subscription.Status.AssignPropertiesToEventSubscriptionStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (subscription *EventSubscription) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: subscription.Spec.OriginalVersion(),
		Kind:    "EventSubscription",
	}
}

// +kubebuilder:object:root=true
type EventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventSubscription `json:"items"`
}

type EventSubscription_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DeadLetterDestination: The DeadLetter destination of the event subscription.
	DeadLetterDestination *DeadLetterDestination_Status `json:"deadLetterDestination,omitempty"`

	//Destination: Information about the destination where events have to be delivered
	//for the event subscription.
	Destination *EventSubscriptionDestination_Status `json:"destination,omitempty"`

	//EventDeliverySchema: The event delivery schema for the event subscription.
	EventDeliverySchema *EventSubscriptionPropertiesStatusEventDeliverySchema `json:"eventDeliverySchema,omitempty"`

	//ExpirationTimeUtc: Expiration time of the event subscription.
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty"`

	//Filter: Information about the filter for the event subscription.
	Filter *EventSubscriptionFilter_Status `json:"filter,omitempty"`

	//Id: Fully qualified identifier of the resource.
	Id *string `json:"id,omitempty"`

	//Labels: List of user defined labels.
	Labels []string `json:"labels,omitempty"`

	//Name: Name of the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: Provisioning state of the event subscription.
	ProvisioningState *EventSubscriptionPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//RetryPolicy: The retry policy for events. This can be used to configure maximum
	//number of delivery attempts and time to live for events.
	RetryPolicy *RetryPolicy_Status `json:"retryPolicy,omitempty"`

	//SystemData: The system metadata relating to Event Subscription resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Topic: Name of the topic of the event subscription.
	Topic *string `json:"topic,omitempty"`

	//Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EventSubscription_Status{}

// ConvertStatusFrom populates our EventSubscription_Status from the provided source
func (subscription *EventSubscription_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20200601storage.EventSubscription_Status)
	if ok {
		// Populate our instance from source
		return subscription.AssignPropertiesFromEventSubscriptionStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.EventSubscription_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = subscription.AssignPropertiesFromEventSubscriptionStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EventSubscription_Status
func (subscription *EventSubscription_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20200601storage.EventSubscription_Status)
	if ok {
		// Populate destination from our instance
		return subscription.AssignPropertiesToEventSubscriptionStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.EventSubscription_Status{}
	err := subscription.AssignPropertiesToEventSubscriptionStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &EventSubscription_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subscription *EventSubscription_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscription_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subscription *EventSubscription_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscription_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscription_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetterDestination != nil {
			var deadLetterDestination1 DeadLetterDestination_Status
			err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
			if err != nil {
				return err
			}
			deadLetterDestination := deadLetterDestination1
			subscription.DeadLetterDestination = &deadLetterDestination
		}
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Destination != nil {
			var destination1 EventSubscriptionDestination_Status
			err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
			if err != nil {
				return err
			}
			destination := destination1
			subscription.Destination = &destination
		}
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EventDeliverySchema != nil {
			eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
			subscription.EventDeliverySchema = &eventDeliverySchema
		}
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpirationTimeUtc != nil {
			expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
			subscription.ExpirationTimeUtc = &expirationTimeUtc
		}
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Filter != nil {
			var filter1 EventSubscriptionFilter_Status
			err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
			if err != nil {
				return err
			}
			filter := filter1
			subscription.Filter = &filter
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subscription.Id = &id
	}

	// Set property ‘Labels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Labels {
			subscription.Labels = append(subscription.Labels, item)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		subscription.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			subscription.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryPolicy != nil {
			var retryPolicy1 RetryPolicy_Status
			err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
			if err != nil {
				return err
			}
			retryPolicy := retryPolicy1
			subscription.RetryPolicy = &retryPolicy
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		subscription.SystemData = &systemData
	}

	// Set property ‘Topic’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Topic != nil {
			topic := *typedInput.Properties.Topic
			subscription.Topic = &topic
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		subscription.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionStatus populates our EventSubscription_Status from the provided source EventSubscription_Status
func (subscription *EventSubscription_Status) AssignPropertiesFromEventSubscriptionStatus(source *v1alpha1api20200601storage.EventSubscription_Status) error {

	// Conditions
	subscription.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination_Status
		err := deadLetterDestination.AssignPropertiesFromDeadLetterDestinationStatus(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeadLetterDestinationStatus() to populate field DeadLetterDestination")
		}
		subscription.DeadLetterDestination = &deadLetterDestination
	} else {
		subscription.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination_Status
		err := destination.AssignPropertiesFromEventSubscriptionDestinationStatus(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionDestinationStatus() to populate field Destination")
		}
		subscription.Destination = &destination
	} else {
		subscription.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionPropertiesStatusEventDeliverySchema(*source.EventDeliverySchema)
		subscription.EventDeliverySchema = &eventDeliverySchema
	} else {
		subscription.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	subscription.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter_Status
		err := filter.AssignPropertiesFromEventSubscriptionFilterStatus(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionFilterStatus() to populate field Filter")
		}
		subscription.Filter = &filter
	} else {
		subscription.Filter = nil
	}

	// Id
	subscription.Id = genruntime.ClonePointerToString(source.Id)

	// Labels
	subscription.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Name
	subscription.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := EventSubscriptionPropertiesStatusProvisioningState(*source.ProvisioningState)
		subscription.ProvisioningState = &provisioningState
	} else {
		subscription.ProvisioningState = nil
	}

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy_Status
		err := retryPolicy.AssignPropertiesFromRetryPolicyStatus(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetryPolicyStatus() to populate field RetryPolicy")
		}
		subscription.RetryPolicy = &retryPolicy
	} else {
		subscription.RetryPolicy = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		subscription.SystemData = &systemDatum
	} else {
		subscription.SystemData = nil
	}

	// Topic
	subscription.Topic = genruntime.ClonePointerToString(source.Topic)

	// Type
	subscription.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionStatus populates the provided destination EventSubscription_Status from our EventSubscription_Status
func (subscription *EventSubscription_Status) AssignPropertiesToEventSubscriptionStatus(destination *v1alpha1api20200601storage.EventSubscription_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(subscription.Conditions)

	// DeadLetterDestination
	if subscription.DeadLetterDestination != nil {
		var deadLetterDestination v1alpha1api20200601storage.DeadLetterDestination_Status
		err := subscription.DeadLetterDestination.AssignPropertiesToDeadLetterDestinationStatus(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeadLetterDestinationStatus() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if subscription.Destination != nil {
		var destinationLocal v1alpha1api20200601storage.EventSubscriptionDestination_Status
		err := subscription.Destination.AssignPropertiesToEventSubscriptionDestinationStatus(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionDestinationStatus() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if subscription.EventDeliverySchema != nil {
		eventDeliverySchema := string(*subscription.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(subscription.ExpirationTimeUtc)

	// Filter
	if subscription.Filter != nil {
		var filter v1alpha1api20200601storage.EventSubscriptionFilter_Status
		err := subscription.Filter.AssignPropertiesToEventSubscriptionFilterStatus(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionFilterStatus() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(subscription.Id)

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(subscription.Labels)

	// Name
	destination.Name = genruntime.ClonePointerToString(subscription.Name)

	// ProvisioningState
	if subscription.ProvisioningState != nil {
		provisioningState := string(*subscription.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RetryPolicy
	if subscription.RetryPolicy != nil {
		var retryPolicy v1alpha1api20200601storage.RetryPolicy_Status
		err := subscription.RetryPolicy.AssignPropertiesToRetryPolicyStatus(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetryPolicyStatus() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// SystemData
	if subscription.SystemData != nil {
		var systemDatum v1alpha1api20200601storage.SystemData_Status
		err := subscription.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Topic
	destination.Topic = genruntime.ClonePointerToString(subscription.Topic)

	// Type
	destination.Type = genruntime.ClonePointerToString(subscription.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptions_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DeadLetterDestination: The DeadLetter destination of the event subscription.
	DeadLetterDestination *DeadLetterDestination_Spec `json:"deadLetterDestination,omitempty"`

	//Destination: Information about the destination where events have to be delivered
	//for the event subscription.
	Destination *EventSubscriptionDestination_Spec `json:"destination,omitempty"`

	//EventDeliverySchema: The event delivery schema for the event subscription.
	EventDeliverySchema *EventSubscriptionPropertiesSpecEventDeliverySchema `json:"eventDeliverySchema,omitempty"`

	//ExpirationTimeUtc: Expiration time of the event subscription.
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty"`

	//Filter: Information about the filter for the event subscription.
	Filter *EventSubscriptionFilter_Spec `json:"filter,omitempty"`

	//Labels: List of user defined labels.
	Labels []string `json:"labels,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//RetryPolicy: The retry policy for events. This can be used to configure maximum
	//number of delivery attempts and time to live for events.
	RetryPolicy *RetryPolicy_Spec `json:"retryPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptions_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *EventSubscriptions_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result EventSubscriptions_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.DeadLetterDestination != nil ||
		spec.Destination != nil ||
		spec.EventDeliverySchema != nil ||
		spec.ExpirationTimeUtc != nil ||
		spec.Filter != nil ||
		spec.Labels != nil ||
		spec.RetryPolicy != nil {
		result.Properties = &EventSubscriptionProperties_SpecARM{}
	}
	if spec.DeadLetterDestination != nil {
		deadLetterDestinationARM, err := (*spec.DeadLetterDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deadLetterDestination := deadLetterDestinationARM.(DeadLetterDestination_SpecARM)
		result.Properties.DeadLetterDestination = &deadLetterDestination
	}
	if spec.Destination != nil {
		destinationARM, err := (*spec.Destination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		destination := destinationARM.(EventSubscriptionDestination_SpecARM)
		result.Properties.Destination = &destination
	}
	if spec.EventDeliverySchema != nil {
		eventDeliverySchema := *spec.EventDeliverySchema
		result.Properties.EventDeliverySchema = &eventDeliverySchema
	}
	if spec.ExpirationTimeUtc != nil {
		expirationTimeUtc := *spec.ExpirationTimeUtc
		result.Properties.ExpirationTimeUtc = &expirationTimeUtc
	}
	if spec.Filter != nil {
		filterARM, err := (*spec.Filter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		filter := filterARM.(EventSubscriptionFilter_SpecARM)
		result.Properties.Filter = &filter
	}
	for _, item := range spec.Labels {
		result.Properties.Labels = append(result.Properties.Labels, item)
	}
	if spec.RetryPolicy != nil {
		retryPolicyARM, err := (*spec.RetryPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		retryPolicy := retryPolicyARM.(RetryPolicy_SpecARM)
		result.Properties.RetryPolicy = &retryPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *EventSubscriptions_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptions_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *EventSubscriptions_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptions_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptions_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetterDestination != nil {
			var deadLetterDestination1 DeadLetterDestination_Spec
			err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
			if err != nil {
				return err
			}
			deadLetterDestination := deadLetterDestination1
			spec.DeadLetterDestination = &deadLetterDestination
		}
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Destination != nil {
			var destination1 EventSubscriptionDestination_Spec
			err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
			if err != nil {
				return err
			}
			destination := destination1
			spec.Destination = &destination
		}
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EventDeliverySchema != nil {
			eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
			spec.EventDeliverySchema = &eventDeliverySchema
		}
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpirationTimeUtc != nil {
			expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
			spec.ExpirationTimeUtc = &expirationTimeUtc
		}
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Filter != nil {
			var filter1 EventSubscriptionFilter_Spec
			err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
			if err != nil {
				return err
			}
			filter := filter1
			spec.Filter = &filter
		}
	}

	// Set property ‘Labels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Labels {
			spec.Labels = append(spec.Labels, item)
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryPolicy != nil {
			var retryPolicy1 RetryPolicy_Spec
			err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
			if err != nil {
				return err
			}
			retryPolicy := retryPolicy1
			spec.RetryPolicy = &retryPolicy
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &EventSubscriptions_SPEC{}

// ConvertSpecFrom populates our EventSubscriptions_SPEC from the provided source
func (spec *EventSubscriptions_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200601storage.EventSubscriptions_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromEventSubscriptionsSPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.EventSubscriptions_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromEventSubscriptionsSPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our EventSubscriptions_SPEC
func (spec *EventSubscriptions_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200601storage.EventSubscriptions_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToEventSubscriptionsSPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.EventSubscriptions_SPEC{}
	err := spec.AssignPropertiesToEventSubscriptionsSPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromEventSubscriptionsSPEC populates our EventSubscriptions_SPEC from the provided source EventSubscriptions_SPEC
func (spec *EventSubscriptions_SPEC) AssignPropertiesFromEventSubscriptionsSPEC(source *v1alpha1api20200601storage.EventSubscriptions_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination_Spec
		err := deadLetterDestination.AssignPropertiesFromDeadLetterDestinationSpec(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeadLetterDestinationSpec() to populate field DeadLetterDestination")
		}
		spec.DeadLetterDestination = &deadLetterDestination
	} else {
		spec.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination_Spec
		err := destination.AssignPropertiesFromEventSubscriptionDestinationSpec(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionDestinationSpec() to populate field Destination")
		}
		spec.Destination = &destination
	} else {
		spec.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionPropertiesSpecEventDeliverySchema(*source.EventDeliverySchema)
		spec.EventDeliverySchema = &eventDeliverySchema
	} else {
		spec.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if source.ExpirationTimeUtc != nil {
		expirationTimeUtc := *source.ExpirationTimeUtc
		spec.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		spec.ExpirationTimeUtc = nil
	}

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter_Spec
		err := filter.AssignPropertiesFromEventSubscriptionFilterSpec(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionFilterSpec() to populate field Filter")
		}
		spec.Filter = &filter
	} else {
		spec.Filter = nil
	}

	// Labels
	spec.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Owner
	spec.Owner = source.Owner.Copy()

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy_Spec
		err := retryPolicy.AssignPropertiesFromRetryPolicySpec(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetryPolicySpec() to populate field RetryPolicy")
		}
		spec.RetryPolicy = &retryPolicy
	} else {
		spec.RetryPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionsSPEC populates the provided destination EventSubscriptions_SPEC from our EventSubscriptions_SPEC
func (spec *EventSubscriptions_SPEC) AssignPropertiesToEventSubscriptionsSPEC(destination *v1alpha1api20200601storage.EventSubscriptions_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// DeadLetterDestination
	if spec.DeadLetterDestination != nil {
		var deadLetterDestination v1alpha1api20200601storage.DeadLetterDestination_Spec
		err := spec.DeadLetterDestination.AssignPropertiesToDeadLetterDestinationSpec(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeadLetterDestinationSpec() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if spec.Destination != nil {
		var destinationLocal v1alpha1api20200601storage.EventSubscriptionDestination_Spec
		err := spec.Destination.AssignPropertiesToEventSubscriptionDestinationSpec(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionDestinationSpec() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if spec.EventDeliverySchema != nil {
		eventDeliverySchema := string(*spec.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if spec.ExpirationTimeUtc != nil {
		expirationTimeUtc := *spec.ExpirationTimeUtc
		destination.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		destination.ExpirationTimeUtc = nil
	}

	// Filter
	if spec.Filter != nil {
		var filter v1alpha1api20200601storage.EventSubscriptionFilter_Spec
		err := spec.Filter.AssignPropertiesToEventSubscriptionFilterSpec(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionFilterSpec() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(spec.Labels)

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// RetryPolicy
	if spec.RetryPolicy != nil {
		var retryPolicy v1alpha1api20200601storage.RetryPolicy_Spec
		err := spec.RetryPolicy.AssignPropertiesToRetryPolicySpec(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetryPolicySpec() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *EventSubscriptions_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *EventSubscriptions_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type DeadLetterDestination_Spec struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the dead letter destination
	EndpointType DeadLetterDestinationSpecEndpointType `json:"endpointType"`
}

var _ genruntime.ARMTransformer = &DeadLetterDestination_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *DeadLetterDestination_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	var result DeadLetterDestination_SpecARM

	// Set property ‘EndpointType’:
	result.EndpointType = destination.EndpointType
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *DeadLetterDestination_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeadLetterDestination_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *DeadLetterDestination_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeadLetterDestination_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeadLetterDestination_SpecARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromDeadLetterDestinationSpec populates our DeadLetterDestination_Spec from the provided source DeadLetterDestination_Spec
func (destination *DeadLetterDestination_Spec) AssignPropertiesFromDeadLetterDestinationSpec(source *v1alpha1api20200601storage.DeadLetterDestination_Spec) error {

	// EndpointType
	if source.EndpointType != nil {
		destination.EndpointType = DeadLetterDestinationSpecEndpointType(*source.EndpointType)
	} else {
		destination.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToDeadLetterDestinationSpec populates the provided destination DeadLetterDestination_Spec from our DeadLetterDestination_Spec
func (destination *DeadLetterDestination_Spec) AssignPropertiesToDeadLetterDestinationSpec(target *v1alpha1api20200601storage.DeadLetterDestination_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(destination.EndpointType)
	target.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

type DeadLetterDestination_Status struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the dead letter destination
	EndpointType DeadLetterDestinationStatusEndpointType `json:"endpointType"`
}

var _ genruntime.FromARMConverter = &DeadLetterDestination_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *DeadLetterDestination_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeadLetterDestination_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *DeadLetterDestination_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeadLetterDestination_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeadLetterDestination_StatusARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromDeadLetterDestinationStatus populates our DeadLetterDestination_Status from the provided source DeadLetterDestination_Status
func (destination *DeadLetterDestination_Status) AssignPropertiesFromDeadLetterDestinationStatus(source *v1alpha1api20200601storage.DeadLetterDestination_Status) error {

	// EndpointType
	if source.EndpointType != nil {
		destination.EndpointType = DeadLetterDestinationStatusEndpointType(*source.EndpointType)
	} else {
		destination.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToDeadLetterDestinationStatus populates the provided destination DeadLetterDestination_Status from our DeadLetterDestination_Status
func (destination *DeadLetterDestination_Status) AssignPropertiesToDeadLetterDestinationStatus(target *v1alpha1api20200601storage.DeadLetterDestination_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(destination.EndpointType)
	target.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionDestination_Spec struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the event subscription destination.
	EndpointType EventSubscriptionDestinationSpecEndpointType `json:"endpointType"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionDestination_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *EventSubscriptionDestination_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	var result EventSubscriptionDestination_SpecARM

	// Set property ‘EndpointType’:
	result.EndpointType = destination.EndpointType
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *EventSubscriptionDestination_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestination_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *EventSubscriptionDestination_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestination_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestination_SpecARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionDestinationSpec populates our EventSubscriptionDestination_Spec from the provided source EventSubscriptionDestination_Spec
func (destination *EventSubscriptionDestination_Spec) AssignPropertiesFromEventSubscriptionDestinationSpec(source *v1alpha1api20200601storage.EventSubscriptionDestination_Spec) error {

	// EndpointType
	if source.EndpointType != nil {
		destination.EndpointType = EventSubscriptionDestinationSpecEndpointType(*source.EndpointType)
	} else {
		destination.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestinationSpec populates the provided destination EventSubscriptionDestination_Spec from our EventSubscriptionDestination_Spec
func (destination *EventSubscriptionDestination_Spec) AssignPropertiesToEventSubscriptionDestinationSpec(target *v1alpha1api20200601storage.EventSubscriptionDestination_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(destination.EndpointType)
	target.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionDestination_Status struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the event subscription destination.
	EndpointType EventSubscriptionDestinationStatusEndpointType `json:"endpointType"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionDestination_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *EventSubscriptionDestination_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestination_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *EventSubscriptionDestination_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestination_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestination_StatusARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionDestinationStatus populates our EventSubscriptionDestination_Status from the provided source EventSubscriptionDestination_Status
func (destination *EventSubscriptionDestination_Status) AssignPropertiesFromEventSubscriptionDestinationStatus(source *v1alpha1api20200601storage.EventSubscriptionDestination_Status) error {

	// EndpointType
	if source.EndpointType != nil {
		destination.EndpointType = EventSubscriptionDestinationStatusEndpointType(*source.EndpointType)
	} else {
		destination.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestinationStatus populates the provided destination EventSubscriptionDestination_Status from our EventSubscriptionDestination_Status
func (destination *EventSubscriptionDestination_Status) AssignPropertiesToEventSubscriptionDestinationStatus(target *v1alpha1api20200601storage.EventSubscriptionDestination_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(destination.EndpointType)
	target.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionFilter_Spec struct {
	//AdvancedFilters: An array of advanced filters that are used for filtering event
	//subscriptions.
	AdvancedFilters []AdvancedFilter_Spec `json:"advancedFilters,omitempty"`

	//IncludedEventTypes: A list of applicable event types that need to be part of the
	//event subscription. If it is desired to subscribe to all default event types,
	//set the IncludedEventTypes to null.
	IncludedEventTypes []string `json:"includedEventTypes,omitempty"`

	//IsSubjectCaseSensitive: Specifies if the SubjectBeginsWith and SubjectEndsWith
	//properties of the filter
	//should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `json:"isSubjectCaseSensitive,omitempty"`

	//SubjectBeginsWith: An optional string to filter events for an event subscription
	//based on a resource path prefix.
	//The format of this depends on the publisher of the events.
	//Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty"`

	//SubjectEndsWith: An optional string to filter events for an event subscription
	//based on a resource path suffix.
	//Wildcard characters are not supported in this path.
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionFilter_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *EventSubscriptionFilter_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	var result EventSubscriptionFilter_SpecARM

	// Set property ‘AdvancedFilters’:
	for _, item := range filter.AdvancedFilters {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.AdvancedFilters = append(result.AdvancedFilters, itemARM.(AdvancedFilter_SpecARM))
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range filter.IncludedEventTypes {
		result.IncludedEventTypes = append(result.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		result.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if filter.SubjectBeginsWith != nil {
		subjectBeginsWith := *filter.SubjectBeginsWith
		result.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if filter.SubjectEndsWith != nil {
		subjectEndsWith := *filter.SubjectEndsWith
		result.SubjectEndsWith = &subjectEndsWith
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *EventSubscriptionFilter_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilter_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *EventSubscriptionFilter_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilter_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilter_SpecARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.AdvancedFilters = append(filter.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		filter.IncludedEventTypes = append(filter.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		filter.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		filter.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionFilterSpec populates our EventSubscriptionFilter_Spec from the provided source EventSubscriptionFilter_Spec
func (filter *EventSubscriptionFilter_Spec) AssignPropertiesFromEventSubscriptionFilterSpec(source *v1alpha1api20200601storage.EventSubscriptionFilter_Spec) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter_Spec, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter_Spec
			err := advancedFilter.AssignPropertiesFromAdvancedFilterSpec(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterSpec() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionFilterSpec populates the provided destination EventSubscriptionFilter_Spec from our EventSubscriptionFilter_Spec
func (filter *EventSubscriptionFilter_Spec) AssignPropertiesToEventSubscriptionFilterSpec(destination *v1alpha1api20200601storage.EventSubscriptionFilter_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]v1alpha1api20200601storage.AdvancedFilter_Spec, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v1alpha1api20200601storage.AdvancedFilter_Spec
			err := advancedFilterItem.AssignPropertiesToAdvancedFilterSpec(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterSpec() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionFilter_Status struct {
	//AdvancedFilters: An array of advanced filters that are used for filtering event
	//subscriptions.
	AdvancedFilters []AdvancedFilter_Status `json:"advancedFilters,omitempty"`

	//IncludedEventTypes: A list of applicable event types that need to be part of the
	//event subscription. If it is desired to subscribe to all default event types,
	//set the IncludedEventTypes to null.
	IncludedEventTypes []string `json:"includedEventTypes,omitempty"`

	//IsSubjectCaseSensitive: Specifies if the SubjectBeginsWith and SubjectEndsWith
	//properties of the filter
	//should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `json:"isSubjectCaseSensitive,omitempty"`

	//SubjectBeginsWith: An optional string to filter events for an event subscription
	//based on a resource path prefix.
	//The format of this depends on the publisher of the events.
	//Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty"`

	//SubjectEndsWith: An optional string to filter events for an event subscription
	//based on a resource path suffix.
	//Wildcard characters are not supported in this path.
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionFilter_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *EventSubscriptionFilter_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *EventSubscriptionFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.AdvancedFilters = append(filter.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		filter.IncludedEventTypes = append(filter.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		filter.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		filter.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionFilterStatus populates our EventSubscriptionFilter_Status from the provided source EventSubscriptionFilter_Status
func (filter *EventSubscriptionFilter_Status) AssignPropertiesFromEventSubscriptionFilterStatus(source *v1alpha1api20200601storage.EventSubscriptionFilter_Status) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter_Status, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter_Status
			err := advancedFilter.AssignPropertiesFromAdvancedFilterStatus(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStatus() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionFilterStatus populates the provided destination EventSubscriptionFilter_Status from our EventSubscriptionFilter_Status
func (filter *EventSubscriptionFilter_Status) AssignPropertiesToEventSubscriptionFilterStatus(destination *v1alpha1api20200601storage.EventSubscriptionFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]v1alpha1api20200601storage.AdvancedFilter_Status, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v1alpha1api20200601storage.AdvancedFilter_Status
			err := advancedFilterItem.AssignPropertiesToAdvancedFilterStatus(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStatus() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"CloudEventSchemaV1_0","CustomInputSchema","EventGridSchema"}
type EventSubscriptionPropertiesSpecEventDeliverySchema string

const (
	EventSubscriptionPropertiesSpecEventDeliverySchemaCloudEventSchemaV10 = EventSubscriptionPropertiesSpecEventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionPropertiesSpecEventDeliverySchemaCustomInputSchema   = EventSubscriptionPropertiesSpecEventDeliverySchema("CustomInputSchema")
	EventSubscriptionPropertiesSpecEventDeliverySchemaEventGridSchema     = EventSubscriptionPropertiesSpecEventDeliverySchema("EventGridSchema")
)

type EventSubscriptionPropertiesStatusEventDeliverySchema string

const (
	EventSubscriptionPropertiesStatusEventDeliverySchemaCloudEventSchemaV10 = EventSubscriptionPropertiesStatusEventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionPropertiesStatusEventDeliverySchemaCustomInputSchema   = EventSubscriptionPropertiesStatusEventDeliverySchema("CustomInputSchema")
	EventSubscriptionPropertiesStatusEventDeliverySchemaEventGridSchema     = EventSubscriptionPropertiesStatusEventDeliverySchema("EventGridSchema")
)

type EventSubscriptionPropertiesStatusProvisioningState string

const (
	EventSubscriptionPropertiesStatusProvisioningStateAwaitingManualAction = EventSubscriptionPropertiesStatusProvisioningState("AwaitingManualAction")
	EventSubscriptionPropertiesStatusProvisioningStateCanceled             = EventSubscriptionPropertiesStatusProvisioningState("Canceled")
	EventSubscriptionPropertiesStatusProvisioningStateCreating             = EventSubscriptionPropertiesStatusProvisioningState("Creating")
	EventSubscriptionPropertiesStatusProvisioningStateDeleting             = EventSubscriptionPropertiesStatusProvisioningState("Deleting")
	EventSubscriptionPropertiesStatusProvisioningStateFailed               = EventSubscriptionPropertiesStatusProvisioningState("Failed")
	EventSubscriptionPropertiesStatusProvisioningStateSucceeded            = EventSubscriptionPropertiesStatusProvisioningState("Succeeded")
	EventSubscriptionPropertiesStatusProvisioningStateUpdating             = EventSubscriptionPropertiesStatusProvisioningState("Updating")
)

type RetryPolicy_Spec struct {
	//EventTimeToLiveInMinutes: Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`

	//MaxDeliveryAttempts: Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.ARMTransformer = &RetryPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *RetryPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result RetryPolicy_SpecARM

	// Set property ‘EventTimeToLiveInMinutes’:
	if policy.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *policy.EventTimeToLiveInMinutes
		result.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if policy.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *policy.MaxDeliveryAttempts
		result.MaxDeliveryAttempts = &maxDeliveryAttempts
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetryPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetryPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		policy.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		policy.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignPropertiesFromRetryPolicySpec populates our RetryPolicy_Spec from the provided source RetryPolicy_Spec
func (policy *RetryPolicy_Spec) AssignPropertiesFromRetryPolicySpec(source *v1alpha1api20200601storage.RetryPolicy_Spec) error {

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignPropertiesToRetryPolicySpec populates the provided destination RetryPolicy_Spec from our RetryPolicy_Spec
func (policy *RetryPolicy_Spec) AssignPropertiesToRetryPolicySpec(destination *v1alpha1api20200601storage.RetryPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RetryPolicy_Status struct {
	//EventTimeToLiveInMinutes: Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`

	//MaxDeliveryAttempts: Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.FromARMConverter = &RetryPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetryPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetryPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		policy.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		policy.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignPropertiesFromRetryPolicyStatus populates our RetryPolicy_Status from the provided source RetryPolicy_Status
func (policy *RetryPolicy_Status) AssignPropertiesFromRetryPolicyStatus(source *v1alpha1api20200601storage.RetryPolicy_Status) error {

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignPropertiesToRetryPolicyStatus populates the provided destination RetryPolicy_Status from our RetryPolicy_Status
func (policy *RetryPolicy_Status) AssignPropertiesToRetryPolicyStatus(destination *v1alpha1api20200601storage.RetryPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_Spec struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	//OperatorType: The operator type used for filtering, e.g., NumberIn,
	//StringContains, BoolEquals and others.
	OperatorType AdvancedFilterSpecOperatorType `json:"operatorType"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *AdvancedFilter_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	var result AdvancedFilter_SpecARM

	// Set property ‘Key’:
	if filter.Key != nil {
		key := *filter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = filter.OperatorType
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *AdvancedFilter_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *AdvancedFilter_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_SpecARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		filter.Key = &key
	}

	// Set property ‘OperatorType’:
	filter.OperatorType = typedInput.OperatorType

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterSpec populates our AdvancedFilter_Spec from the provided source AdvancedFilter_Spec
func (filter *AdvancedFilter_Spec) AssignPropertiesFromAdvancedFilterSpec(source *v1alpha1api20200601storage.AdvancedFilter_Spec) error {

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		filter.OperatorType = AdvancedFilterSpecOperatorType(*source.OperatorType)
	} else {
		filter.OperatorType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterSpec populates the provided destination AdvancedFilter_Spec from our AdvancedFilter_Spec
func (filter *AdvancedFilter_Spec) AssignPropertiesToAdvancedFilterSpec(destination *v1alpha1api20200601storage.AdvancedFilter_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	operatorType := string(filter.OperatorType)
	destination.OperatorType = &operatorType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_Status struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	//OperatorType: The operator type used for filtering, e.g., NumberIn,
	//StringContains, BoolEquals and others.
	OperatorType AdvancedFilterStatusOperatorType `json:"operatorType"`
}

var _ genruntime.FromARMConverter = &AdvancedFilter_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *AdvancedFilter_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *AdvancedFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		filter.Key = &key
	}

	// Set property ‘OperatorType’:
	filter.OperatorType = typedInput.OperatorType

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStatus populates our AdvancedFilter_Status from the provided source AdvancedFilter_Status
func (filter *AdvancedFilter_Status) AssignPropertiesFromAdvancedFilterStatus(source *v1alpha1api20200601storage.AdvancedFilter_Status) error {

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		filter.OperatorType = AdvancedFilterStatusOperatorType(*source.OperatorType)
	} else {
		filter.OperatorType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStatus populates the provided destination AdvancedFilter_Status from our AdvancedFilter_Status
func (filter *AdvancedFilter_Status) AssignPropertiesToAdvancedFilterStatus(destination *v1alpha1api20200601storage.AdvancedFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	operatorType := string(filter.OperatorType)
	destination.OperatorType = &operatorType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"StorageBlob"}
type DeadLetterDestinationSpecEndpointType string

const DeadLetterDestinationSpecEndpointTypeStorageBlob = DeadLetterDestinationSpecEndpointType("StorageBlob")

type DeadLetterDestinationStatusEndpointType string

const DeadLetterDestinationStatusEndpointTypeStorageBlob = DeadLetterDestinationStatusEndpointType("StorageBlob")

// +kubebuilder:validation:Enum={"AzureFunction","EventHub","HybridConnection","ServiceBusQueue","ServiceBusTopic","StorageQueue","WebHook"}
type EventSubscriptionDestinationSpecEndpointType string

const (
	EventSubscriptionDestinationSpecEndpointTypeAzureFunction    = EventSubscriptionDestinationSpecEndpointType("AzureFunction")
	EventSubscriptionDestinationSpecEndpointTypeEventHub         = EventSubscriptionDestinationSpecEndpointType("EventHub")
	EventSubscriptionDestinationSpecEndpointTypeHybridConnection = EventSubscriptionDestinationSpecEndpointType("HybridConnection")
	EventSubscriptionDestinationSpecEndpointTypeServiceBusQueue  = EventSubscriptionDestinationSpecEndpointType("ServiceBusQueue")
	EventSubscriptionDestinationSpecEndpointTypeServiceBusTopic  = EventSubscriptionDestinationSpecEndpointType("ServiceBusTopic")
	EventSubscriptionDestinationSpecEndpointTypeStorageQueue     = EventSubscriptionDestinationSpecEndpointType("StorageQueue")
	EventSubscriptionDestinationSpecEndpointTypeWebHook          = EventSubscriptionDestinationSpecEndpointType("WebHook")
)

type EventSubscriptionDestinationStatusEndpointType string

const (
	EventSubscriptionDestinationStatusEndpointTypeAzureFunction    = EventSubscriptionDestinationStatusEndpointType("AzureFunction")
	EventSubscriptionDestinationStatusEndpointTypeEventHub         = EventSubscriptionDestinationStatusEndpointType("EventHub")
	EventSubscriptionDestinationStatusEndpointTypeHybridConnection = EventSubscriptionDestinationStatusEndpointType("HybridConnection")
	EventSubscriptionDestinationStatusEndpointTypeServiceBusQueue  = EventSubscriptionDestinationStatusEndpointType("ServiceBusQueue")
	EventSubscriptionDestinationStatusEndpointTypeServiceBusTopic  = EventSubscriptionDestinationStatusEndpointType("ServiceBusTopic")
	EventSubscriptionDestinationStatusEndpointTypeStorageQueue     = EventSubscriptionDestinationStatusEndpointType("StorageQueue")
	EventSubscriptionDestinationStatusEndpointTypeWebHook          = EventSubscriptionDestinationStatusEndpointType("WebHook")
)

// +kubebuilder:validation:Enum={"BoolEquals","NumberGreaterThan","NumberGreaterThanOrEquals","NumberIn","NumberLessThan","NumberLessThanOrEquals","NumberNotIn","StringBeginsWith","StringContains","StringEndsWith","StringIn","StringNotIn"}
type AdvancedFilterSpecOperatorType string

const (
	AdvancedFilterSpecOperatorTypeBoolEquals                = AdvancedFilterSpecOperatorType("BoolEquals")
	AdvancedFilterSpecOperatorTypeNumberGreaterThan         = AdvancedFilterSpecOperatorType("NumberGreaterThan")
	AdvancedFilterSpecOperatorTypeNumberGreaterThanOrEquals = AdvancedFilterSpecOperatorType("NumberGreaterThanOrEquals")
	AdvancedFilterSpecOperatorTypeNumberIn                  = AdvancedFilterSpecOperatorType("NumberIn")
	AdvancedFilterSpecOperatorTypeNumberLessThan            = AdvancedFilterSpecOperatorType("NumberLessThan")
	AdvancedFilterSpecOperatorTypeNumberLessThanOrEquals    = AdvancedFilterSpecOperatorType("NumberLessThanOrEquals")
	AdvancedFilterSpecOperatorTypeNumberNotIn               = AdvancedFilterSpecOperatorType("NumberNotIn")
	AdvancedFilterSpecOperatorTypeStringBeginsWith          = AdvancedFilterSpecOperatorType("StringBeginsWith")
	AdvancedFilterSpecOperatorTypeStringContains            = AdvancedFilterSpecOperatorType("StringContains")
	AdvancedFilterSpecOperatorTypeStringEndsWith            = AdvancedFilterSpecOperatorType("StringEndsWith")
	AdvancedFilterSpecOperatorTypeStringIn                  = AdvancedFilterSpecOperatorType("StringIn")
	AdvancedFilterSpecOperatorTypeStringNotIn               = AdvancedFilterSpecOperatorType("StringNotIn")
)

type AdvancedFilterStatusOperatorType string

const (
	AdvancedFilterStatusOperatorTypeBoolEquals                = AdvancedFilterStatusOperatorType("BoolEquals")
	AdvancedFilterStatusOperatorTypeNumberGreaterThan         = AdvancedFilterStatusOperatorType("NumberGreaterThan")
	AdvancedFilterStatusOperatorTypeNumberGreaterThanOrEquals = AdvancedFilterStatusOperatorType("NumberGreaterThanOrEquals")
	AdvancedFilterStatusOperatorTypeNumberIn                  = AdvancedFilterStatusOperatorType("NumberIn")
	AdvancedFilterStatusOperatorTypeNumberLessThan            = AdvancedFilterStatusOperatorType("NumberLessThan")
	AdvancedFilterStatusOperatorTypeNumberLessThanOrEquals    = AdvancedFilterStatusOperatorType("NumberLessThanOrEquals")
	AdvancedFilterStatusOperatorTypeNumberNotIn               = AdvancedFilterStatusOperatorType("NumberNotIn")
	AdvancedFilterStatusOperatorTypeStringBeginsWith          = AdvancedFilterStatusOperatorType("StringBeginsWith")
	AdvancedFilterStatusOperatorTypeStringContains            = AdvancedFilterStatusOperatorType("StringContains")
	AdvancedFilterStatusOperatorTypeStringEndsWith            = AdvancedFilterStatusOperatorType("StringEndsWith")
	AdvancedFilterStatusOperatorTypeStringIn                  = AdvancedFilterStatusOperatorType("StringIn")
	AdvancedFilterStatusOperatorTypeStringNotIn               = AdvancedFilterStatusOperatorType("StringNotIn")
)

func init() {
	SchemeBuilder.Register(&EventSubscription{}, &EventSubscriptionList{})
}
