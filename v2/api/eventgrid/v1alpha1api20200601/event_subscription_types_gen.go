// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"fmt"
	alpha20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of EventSubscription. Use v1beta20200601.EventSubscription instead
type EventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSubscription_Spec   `json:"spec,omitempty"`
	Status            EventSubscription_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &EventSubscription{}

// GetConditions returns the conditions of the resource
func (subscription *EventSubscription) GetConditions() conditions.Conditions {
	return subscription.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (subscription *EventSubscription) SetConditions(conditions conditions.Conditions) {
	subscription.Status.Conditions = conditions
}

var _ conversion.Convertible = &EventSubscription{}

// ConvertFrom populates our EventSubscription from the provided hub EventSubscription
func (subscription *EventSubscription) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20200601s.EventSubscription

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = subscription.AssignProperties_From_EventSubscription(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to subscription")
	}

	return nil
}

// ConvertTo populates the provided hub EventSubscription from our EventSubscription
func (subscription *EventSubscription) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20200601s.EventSubscription
	err := subscription.AssignProperties_To_EventSubscription(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from subscription")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=default.v1alpha1api20200601.eventsubscriptions.eventgrid.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &EventSubscription{}

// Default applies defaults to the EventSubscription resource
func (subscription *EventSubscription) Default() {
	subscription.defaultImpl()
	var temp interface{} = subscription
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (subscription *EventSubscription) defaultAzureName() {
	if subscription.Spec.AzureName == "" {
		subscription.Spec.AzureName = subscription.Name
	}
}

// defaultImpl applies the code generated defaults to the EventSubscription resource
func (subscription *EventSubscription) defaultImpl() { subscription.defaultAzureName() }

var _ genruntime.KubernetesResource = &EventSubscription{}

// AzureName returns the Azure name of the resource
func (subscription *EventSubscription) AzureName() string {
	return subscription.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (subscription EventSubscription) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (subscription *EventSubscription) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeExtension
}

// GetSpec returns the specification of this resource
func (subscription *EventSubscription) GetSpec() genruntime.ConvertibleSpec {
	return &subscription.Spec
}

// GetStatus returns the status of this resource
func (subscription *EventSubscription) GetStatus() genruntime.ConvertibleStatus {
	return &subscription.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/eventSubscriptions"
func (subscription *EventSubscription) GetType() string {
	return "Microsoft.EventGrid/eventSubscriptions"
}

// NewEmptyStatus returns a new empty (blank) status
func (subscription *EventSubscription) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EventSubscription_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (subscription *EventSubscription) Owner() *genruntime.ResourceReference {
	return &genruntime.ResourceReference{
		Group: subscription.Spec.Owner.Group,
		Kind:  subscription.Spec.Owner.Kind,
		Name:  subscription.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (subscription *EventSubscription) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EventSubscription_STATUS); ok {
		subscription.Status = *st
		return nil
	}

	// Convert status to required version
	var st EventSubscription_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	subscription.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=validate.v1alpha1api20200601.eventsubscriptions.eventgrid.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &EventSubscription{}

// ValidateCreate validates the creation of the resource
func (subscription *EventSubscription) ValidateCreate() error {
	validations := subscription.createValidations()
	var temp interface{} = subscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (subscription *EventSubscription) ValidateDelete() error {
	validations := subscription.deleteValidations()
	var temp interface{} = subscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (subscription *EventSubscription) ValidateUpdate(old runtime.Object) error {
	validations := subscription.updateValidations()
	var temp interface{} = subscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (subscription *EventSubscription) createValidations() []func() error {
	return []func() error{subscription.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (subscription *EventSubscription) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (subscription *EventSubscription) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return subscription.validateResourceReferences()
		},
		subscription.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (subscription *EventSubscription) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&subscription.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (subscription *EventSubscription) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*EventSubscription)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, subscription)
}

// AssignProperties_From_EventSubscription populates our EventSubscription from the provided source EventSubscription
func (subscription *EventSubscription) AssignProperties_From_EventSubscription(source *alpha20200601s.EventSubscription) error {

	// ObjectMeta
	subscription.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec EventSubscription_Spec
	err := spec.AssignProperties_From_EventSubscription_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_EventSubscription_Spec() to populate field Spec")
	}
	subscription.Spec = spec

	// Status
	var status EventSubscription_STATUS
	err = status.AssignProperties_From_EventSubscription_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_EventSubscription_STATUS() to populate field Status")
	}
	subscription.Status = status

	// No error
	return nil
}

// AssignProperties_To_EventSubscription populates the provided destination EventSubscription from our EventSubscription
func (subscription *EventSubscription) AssignProperties_To_EventSubscription(destination *alpha20200601s.EventSubscription) error {

	// ObjectMeta
	destination.ObjectMeta = *subscription.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20200601s.EventSubscription_Spec
	err := subscription.Spec.AssignProperties_To_EventSubscription_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_EventSubscription_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20200601s.EventSubscription_STATUS
	err = subscription.Status.AssignProperties_To_EventSubscription_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_EventSubscription_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (subscription *EventSubscription) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: subscription.Spec.OriginalVersion(),
		Kind:    "EventSubscription",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of EventSubscription. Use v1beta20200601.EventSubscription instead
type EventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventSubscription `json:"items"`
}

type EventSubscription_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName             string                                           `json:"azureName,omitempty"`
	DeadLetterDestination *StorageBlobDeadLetterDestination                `json:"deadLetterDestination,omitempty"`
	Destination           *EventSubscriptionDestination                    `json:"destination,omitempty"`
	EventDeliverySchema   *EventSubscriptionProperties_EventDeliverySchema `json:"eventDeliverySchema,omitempty"`
	ExpirationTimeUtc     *string                                          `json:"expirationTimeUtc,omitempty"`
	Filter                *EventSubscriptionFilter                         `json:"filter,omitempty"`
	Labels                []string                                         `json:"labels,omitempty"`
	Location              *string                                          `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. This resource is an
	// extension resource, which means that any other Azure resource can be its owner.
	Owner       *genruntime.ArbitraryOwnerReference `json:"owner,omitempty"`
	RetryPolicy *RetryPolicy                        `json:"retryPolicy,omitempty"`
	Tags        map[string]string                   `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscription_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (subscription *EventSubscription_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if subscription == nil {
		return nil, nil
	}
	result := &EventSubscription_SpecARM{}

	// Set property ‘Location’:
	if subscription.Location != nil {
		location := *subscription.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if subscription.DeadLetterDestination != nil ||
		subscription.Destination != nil ||
		subscription.EventDeliverySchema != nil ||
		subscription.ExpirationTimeUtc != nil ||
		subscription.Filter != nil ||
		subscription.Labels != nil ||
		subscription.RetryPolicy != nil {
		result.Properties = &EventSubscriptionPropertiesARM{}
	}
	if subscription.DeadLetterDestination != nil {
		deadLetterDestinationARM, err := (*subscription.DeadLetterDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deadLetterDestination := *deadLetterDestinationARM.(*StorageBlobDeadLetterDestinationARM)
		result.Properties.DeadLetterDestination = &deadLetterDestination
	}
	if subscription.Destination != nil {
		destinationARM, err := (*subscription.Destination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		destination := *destinationARM.(*EventSubscriptionDestinationARM)
		result.Properties.Destination = &destination
	}
	if subscription.EventDeliverySchema != nil {
		eventDeliverySchema := *subscription.EventDeliverySchema
		result.Properties.EventDeliverySchema = &eventDeliverySchema
	}
	if subscription.ExpirationTimeUtc != nil {
		expirationTimeUtc := *subscription.ExpirationTimeUtc
		result.Properties.ExpirationTimeUtc = &expirationTimeUtc
	}
	if subscription.Filter != nil {
		filterARM, err := (*subscription.Filter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		filter := *filterARM.(*EventSubscriptionFilterARM)
		result.Properties.Filter = &filter
	}
	for _, item := range subscription.Labels {
		result.Properties.Labels = append(result.Properties.Labels, item)
	}
	if subscription.RetryPolicy != nil {
		retryPolicyARM, err := (*subscription.RetryPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		retryPolicy := *retryPolicyARM.(*RetryPolicyARM)
		result.Properties.RetryPolicy = &retryPolicy
	}

	// Set property ‘Tags’:
	if subscription.Tags != nil {
		result.Tags = make(map[string]string, len(subscription.Tags))
		for key, value := range subscription.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subscription *EventSubscription_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscription_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subscription *EventSubscription_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscription_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscription_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	subscription.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetterDestination != nil {
			var deadLetterDestination1 StorageBlobDeadLetterDestination
			err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
			if err != nil {
				return err
			}
			deadLetterDestination := deadLetterDestination1
			subscription.DeadLetterDestination = &deadLetterDestination
		}
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Destination != nil {
			var destination1 EventSubscriptionDestination
			err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
			if err != nil {
				return err
			}
			destination := destination1
			subscription.Destination = &destination
		}
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EventDeliverySchema != nil {
			eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
			subscription.EventDeliverySchema = &eventDeliverySchema
		}
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpirationTimeUtc != nil {
			expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
			subscription.ExpirationTimeUtc = &expirationTimeUtc
		}
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Filter != nil {
			var filter1 EventSubscriptionFilter
			err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
			if err != nil {
				return err
			}
			filter := filter1
			subscription.Filter = &filter
		}
	}

	// Set property ‘Labels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Labels {
			subscription.Labels = append(subscription.Labels, item)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		subscription.Location = &location
	}

	// Set property ‘Owner’:
	subscription.Owner = &owner

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryPolicy != nil {
			var retryPolicy1 RetryPolicy
			err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
			if err != nil {
				return err
			}
			retryPolicy := retryPolicy1
			subscription.RetryPolicy = &retryPolicy
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		subscription.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			subscription.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &EventSubscription_Spec{}

// ConvertSpecFrom populates our EventSubscription_Spec from the provided source
func (subscription *EventSubscription_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20200601s.EventSubscription_Spec)
	if ok {
		// Populate our instance from source
		return subscription.AssignProperties_From_EventSubscription_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20200601s.EventSubscription_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = subscription.AssignProperties_From_EventSubscription_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our EventSubscription_Spec
func (subscription *EventSubscription_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20200601s.EventSubscription_Spec)
	if ok {
		// Populate destination from our instance
		return subscription.AssignProperties_To_EventSubscription_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20200601s.EventSubscription_Spec{}
	err := subscription.AssignProperties_To_EventSubscription_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_EventSubscription_Spec populates our EventSubscription_Spec from the provided source EventSubscription_Spec
func (subscription *EventSubscription_Spec) AssignProperties_From_EventSubscription_Spec(source *alpha20200601s.EventSubscription_Spec) error {

	// AzureName
	subscription.AzureName = source.AzureName

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination StorageBlobDeadLetterDestination
		err := deadLetterDestination.AssignProperties_From_StorageBlobDeadLetterDestination(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageBlobDeadLetterDestination() to populate field DeadLetterDestination")
		}
		subscription.DeadLetterDestination = &deadLetterDestination
	} else {
		subscription.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination
		err := destination.AssignProperties_From_EventSubscriptionDestination(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionDestination() to populate field Destination")
		}
		subscription.Destination = &destination
	} else {
		subscription.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionProperties_EventDeliverySchema(*source.EventDeliverySchema)
		subscription.EventDeliverySchema = &eventDeliverySchema
	} else {
		subscription.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if source.ExpirationTimeUtc != nil {
		expirationTimeUtc := *source.ExpirationTimeUtc
		subscription.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		subscription.ExpirationTimeUtc = nil
	}

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter
		err := filter.AssignProperties_From_EventSubscriptionFilter(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionFilter() to populate field Filter")
		}
		subscription.Filter = &filter
	} else {
		subscription.Filter = nil
	}

	// Labels
	subscription.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Location
	subscription.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		subscription.Owner = &owner
	} else {
		subscription.Owner = nil
	}

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy
		err := retryPolicy.AssignProperties_From_RetryPolicy(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RetryPolicy() to populate field RetryPolicy")
		}
		subscription.RetryPolicy = &retryPolicy
	} else {
		subscription.RetryPolicy = nil
	}

	// Tags
	subscription.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_EventSubscription_Spec populates the provided destination EventSubscription_Spec from our EventSubscription_Spec
func (subscription *EventSubscription_Spec) AssignProperties_To_EventSubscription_Spec(destination *alpha20200601s.EventSubscription_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = subscription.AzureName

	// DeadLetterDestination
	if subscription.DeadLetterDestination != nil {
		var deadLetterDestination alpha20200601s.StorageBlobDeadLetterDestination
		err := subscription.DeadLetterDestination.AssignProperties_To_StorageBlobDeadLetterDestination(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageBlobDeadLetterDestination() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if subscription.Destination != nil {
		var destinationLocal alpha20200601s.EventSubscriptionDestination
		err := subscription.Destination.AssignProperties_To_EventSubscriptionDestination(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionDestination() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if subscription.EventDeliverySchema != nil {
		eventDeliverySchema := string(*subscription.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if subscription.ExpirationTimeUtc != nil {
		expirationTimeUtc := *subscription.ExpirationTimeUtc
		destination.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		destination.ExpirationTimeUtc = nil
	}

	// Filter
	if subscription.Filter != nil {
		var filter alpha20200601s.EventSubscriptionFilter
		err := subscription.Filter.AssignProperties_To_EventSubscriptionFilter(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionFilter() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(subscription.Labels)

	// Location
	destination.Location = genruntime.ClonePointerToString(subscription.Location)

	// OriginalVersion
	destination.OriginalVersion = subscription.OriginalVersion()

	// Owner
	if subscription.Owner != nil {
		owner := subscription.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RetryPolicy
	if subscription.RetryPolicy != nil {
		var retryPolicy alpha20200601s.RetryPolicy
		err := subscription.RetryPolicy.AssignProperties_To_RetryPolicy(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RetryPolicy() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(subscription.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (subscription *EventSubscription_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (subscription *EventSubscription_Spec) SetAzureName(azureName string) {
	subscription.AzureName = azureName
}

// Deprecated version of EventSubscription_STATUS. Use v1beta20200601.EventSubscription_STATUS instead
type EventSubscription_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions            []conditions.Condition                                  `json:"conditions,omitempty"`
	DeadLetterDestination *DeadLetterDestination_STATUS                           `json:"deadLetterDestination,omitempty"`
	Destination           *EventSubscriptionDestination_STATUS                    `json:"destination,omitempty"`
	EventDeliverySchema   *EventSubscriptionProperties_STATUS_EventDeliverySchema `json:"eventDeliverySchema,omitempty"`
	ExpirationTimeUtc     *string                                                 `json:"expirationTimeUtc,omitempty"`
	Filter                *EventSubscriptionFilter_STATUS                         `json:"filter,omitempty"`
	Id                    *string                                                 `json:"id,omitempty"`
	Labels                []string                                                `json:"labels,omitempty"`
	Name                  *string                                                 `json:"name,omitempty"`
	ProvisioningState     *EventSubscriptionProperties_STATUS_ProvisioningState   `json:"provisioningState,omitempty"`
	RetryPolicy           *RetryPolicy_STATUS                                     `json:"retryPolicy,omitempty"`
	SystemData            *SystemData_STATUS                                      `json:"systemData,omitempty"`
	Topic                 *string                                                 `json:"topic,omitempty"`
	Type                  *string                                                 `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EventSubscription_STATUS{}

// ConvertStatusFrom populates our EventSubscription_STATUS from the provided source
func (subscription *EventSubscription_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20200601s.EventSubscription_STATUS)
	if ok {
		// Populate our instance from source
		return subscription.AssignProperties_From_EventSubscription_STATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20200601s.EventSubscription_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = subscription.AssignProperties_From_EventSubscription_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20200601s.EventSubscription_STATUS)
	if ok {
		// Populate destination from our instance
		return subscription.AssignProperties_To_EventSubscription_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20200601s.EventSubscription_STATUS{}
	err := subscription.AssignProperties_To_EventSubscription_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &EventSubscription_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subscription *EventSubscription_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscription_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subscription *EventSubscription_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscription_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscription_STATUSARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetterDestination != nil {
			var deadLetterDestination1 DeadLetterDestination_STATUS
			err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
			if err != nil {
				return err
			}
			deadLetterDestination := deadLetterDestination1
			subscription.DeadLetterDestination = &deadLetterDestination
		}
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Destination != nil {
			var destination1 EventSubscriptionDestination_STATUS
			err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
			if err != nil {
				return err
			}
			destination := destination1
			subscription.Destination = &destination
		}
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EventDeliverySchema != nil {
			eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
			subscription.EventDeliverySchema = &eventDeliverySchema
		}
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpirationTimeUtc != nil {
			expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
			subscription.ExpirationTimeUtc = &expirationTimeUtc
		}
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Filter != nil {
			var filter1 EventSubscriptionFilter_STATUS
			err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
			if err != nil {
				return err
			}
			filter := filter1
			subscription.Filter = &filter
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subscription.Id = &id
	}

	// Set property ‘Labels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Labels {
			subscription.Labels = append(subscription.Labels, item)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		subscription.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			subscription.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryPolicy != nil {
			var retryPolicy1 RetryPolicy_STATUS
			err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
			if err != nil {
				return err
			}
			retryPolicy := retryPolicy1
			subscription.RetryPolicy = &retryPolicy
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		subscription.SystemData = &systemData
	}

	// Set property ‘Topic’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Topic != nil {
			topic := *typedInput.Properties.Topic
			subscription.Topic = &topic
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		subscription.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_EventSubscription_STATUS populates our EventSubscription_STATUS from the provided source EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignProperties_From_EventSubscription_STATUS(source *alpha20200601s.EventSubscription_STATUS) error {

	// Conditions
	subscription.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination_STATUS
		err := deadLetterDestination.AssignProperties_From_DeadLetterDestination_STATUS(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeadLetterDestination_STATUS() to populate field DeadLetterDestination")
		}
		subscription.DeadLetterDestination = &deadLetterDestination
	} else {
		subscription.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination_STATUS
		err := destination.AssignProperties_From_EventSubscriptionDestination_STATUS(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionDestination_STATUS() to populate field Destination")
		}
		subscription.Destination = &destination
	} else {
		subscription.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionProperties_STATUS_EventDeliverySchema(*source.EventDeliverySchema)
		subscription.EventDeliverySchema = &eventDeliverySchema
	} else {
		subscription.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	subscription.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter_STATUS
		err := filter.AssignProperties_From_EventSubscriptionFilter_STATUS(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionFilter_STATUS() to populate field Filter")
		}
		subscription.Filter = &filter
	} else {
		subscription.Filter = nil
	}

	// Id
	subscription.Id = genruntime.ClonePointerToString(source.Id)

	// Labels
	subscription.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Name
	subscription.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := EventSubscriptionProperties_STATUS_ProvisioningState(*source.ProvisioningState)
		subscription.ProvisioningState = &provisioningState
	} else {
		subscription.ProvisioningState = nil
	}

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy_STATUS
		err := retryPolicy.AssignProperties_From_RetryPolicy_STATUS(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RetryPolicy_STATUS() to populate field RetryPolicy")
		}
		subscription.RetryPolicy = &retryPolicy
	} else {
		subscription.RetryPolicy = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		subscription.SystemData = &systemDatum
	} else {
		subscription.SystemData = nil
	}

	// Topic
	subscription.Topic = genruntime.ClonePointerToString(source.Topic)

	// Type
	subscription.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_EventSubscription_STATUS populates the provided destination EventSubscription_STATUS from our EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignProperties_To_EventSubscription_STATUS(destination *alpha20200601s.EventSubscription_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(subscription.Conditions)

	// DeadLetterDestination
	if subscription.DeadLetterDestination != nil {
		var deadLetterDestination alpha20200601s.DeadLetterDestination_STATUS
		err := subscription.DeadLetterDestination.AssignProperties_To_DeadLetterDestination_STATUS(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeadLetterDestination_STATUS() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if subscription.Destination != nil {
		var destinationLocal alpha20200601s.EventSubscriptionDestination_STATUS
		err := subscription.Destination.AssignProperties_To_EventSubscriptionDestination_STATUS(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionDestination_STATUS() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if subscription.EventDeliverySchema != nil {
		eventDeliverySchema := string(*subscription.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(subscription.ExpirationTimeUtc)

	// Filter
	if subscription.Filter != nil {
		var filter alpha20200601s.EventSubscriptionFilter_STATUS
		err := subscription.Filter.AssignProperties_To_EventSubscriptionFilter_STATUS(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionFilter_STATUS() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(subscription.Id)

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(subscription.Labels)

	// Name
	destination.Name = genruntime.ClonePointerToString(subscription.Name)

	// ProvisioningState
	if subscription.ProvisioningState != nil {
		provisioningState := string(*subscription.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RetryPolicy
	if subscription.RetryPolicy != nil {
		var retryPolicy alpha20200601s.RetryPolicy_STATUS
		err := subscription.RetryPolicy.AssignProperties_To_RetryPolicy_STATUS(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RetryPolicy_STATUS() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// SystemData
	if subscription.SystemData != nil {
		var systemDatum alpha20200601s.SystemData_STATUS
		err := subscription.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Topic
	destination.Topic = genruntime.ClonePointerToString(subscription.Topic)

	// Type
	destination.Type = genruntime.ClonePointerToString(subscription.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DeadLetterDestination_STATUS. Use v1beta20200601.DeadLetterDestination_STATUS instead
type DeadLetterDestination_STATUS struct {
	EndpointType *DeadLetterDestination_STATUS_EndpointType `json:"endpointType,omitempty"`
}

var _ genruntime.FromARMConverter = &DeadLetterDestination_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *DeadLetterDestination_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeadLetterDestination_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *DeadLetterDestination_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeadLetterDestination_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeadLetterDestination_STATUSARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	if typedInput.EndpointType != nil {
		endpointType := *typedInput.EndpointType
		destination.EndpointType = &endpointType
	}

	// No error
	return nil
}

// AssignProperties_From_DeadLetterDestination_STATUS populates our DeadLetterDestination_STATUS from the provided source DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignProperties_From_DeadLetterDestination_STATUS(source *alpha20200601s.DeadLetterDestination_STATUS) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := DeadLetterDestination_STATUS_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeadLetterDestination_STATUS populates the provided destination DeadLetterDestination_STATUS from our DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignProperties_To_DeadLetterDestination_STATUS(target *alpha20200601s.DeadLetterDestination_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EventSubscriptionDestination. Use v1beta20200601.EventSubscriptionDestination instead
type EventSubscriptionDestination struct {
	AzureFunction    *AzureFunctionEventSubscriptionDestination    `json:"azureFunctionEventSubscriptionDestination,omitempty"`
	EventHub         *EventHubEventSubscriptionDestination         `json:"eventHubEventSubscriptionDestination,omitempty"`
	HybridConnection *HybridConnectionEventSubscriptionDestination `json:"hybridConnectionEventSubscriptionDestination,omitempty"`
	ServiceBusQueue  *ServiceBusQueueEventSubscriptionDestination  `json:"serviceBusQueueEventSubscriptionDestination,omitempty"`
	ServiceBusTopic  *ServiceBusTopicEventSubscriptionDestination  `json:"serviceBusTopicEventSubscriptionDestination,omitempty"`
	StorageQueue     *StorageQueueEventSubscriptionDestination     `json:"storageQueueEventSubscriptionDestination,omitempty"`
	WebHook          *WebHookEventSubscriptionDestination          `json:"webHookEventSubscriptionDestination,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *EventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &EventSubscriptionDestinationARM{}

	// Set property ‘AzureFunction’:
	if destination.AzureFunction != nil {
		azureFunctionARM, err := (*destination.AzureFunction).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		azureFunction := *azureFunctionARM.(*AzureFunctionEventSubscriptionDestinationARM)
		result.AzureFunction = &azureFunction
	}

	// Set property ‘EventHub’:
	if destination.EventHub != nil {
		eventHubARM, err := (*destination.EventHub).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		eventHub := *eventHubARM.(*EventHubEventSubscriptionDestinationARM)
		result.EventHub = &eventHub
	}

	// Set property ‘HybridConnection’:
	if destination.HybridConnection != nil {
		hybridConnectionARM, err := (*destination.HybridConnection).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		hybridConnection := *hybridConnectionARM.(*HybridConnectionEventSubscriptionDestinationARM)
		result.HybridConnection = &hybridConnection
	}

	// Set property ‘ServiceBusQueue’:
	if destination.ServiceBusQueue != nil {
		serviceBusQueueARM, err := (*destination.ServiceBusQueue).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		serviceBusQueue := *serviceBusQueueARM.(*ServiceBusQueueEventSubscriptionDestinationARM)
		result.ServiceBusQueue = &serviceBusQueue
	}

	// Set property ‘ServiceBusTopic’:
	if destination.ServiceBusTopic != nil {
		serviceBusTopicARM, err := (*destination.ServiceBusTopic).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		serviceBusTopic := *serviceBusTopicARM.(*ServiceBusTopicEventSubscriptionDestinationARM)
		result.ServiceBusTopic = &serviceBusTopic
	}

	// Set property ‘StorageQueue’:
	if destination.StorageQueue != nil {
		storageQueueARM, err := (*destination.StorageQueue).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storageQueue := *storageQueueARM.(*StorageQueueEventSubscriptionDestinationARM)
		result.StorageQueue = &storageQueue
	}

	// Set property ‘WebHook’:
	if destination.WebHook != nil {
		webHookARM, err := (*destination.WebHook).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		webHook := *webHookARM.(*WebHookEventSubscriptionDestinationARM)
		result.WebHook = &webHook
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *EventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *EventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘AzureFunction’:
	if typedInput.AzureFunction != nil {
		var azureFunction1 AzureFunctionEventSubscriptionDestination
		err := azureFunction1.PopulateFromARM(owner, *typedInput.AzureFunction)
		if err != nil {
			return err
		}
		azureFunction := azureFunction1
		destination.AzureFunction = &azureFunction
	}

	// Set property ‘EventHub’:
	if typedInput.EventHub != nil {
		var eventHub1 EventHubEventSubscriptionDestination
		err := eventHub1.PopulateFromARM(owner, *typedInput.EventHub)
		if err != nil {
			return err
		}
		eventHub := eventHub1
		destination.EventHub = &eventHub
	}

	// Set property ‘HybridConnection’:
	if typedInput.HybridConnection != nil {
		var hybridConnection1 HybridConnectionEventSubscriptionDestination
		err := hybridConnection1.PopulateFromARM(owner, *typedInput.HybridConnection)
		if err != nil {
			return err
		}
		hybridConnection := hybridConnection1
		destination.HybridConnection = &hybridConnection
	}

	// Set property ‘ServiceBusQueue’:
	if typedInput.ServiceBusQueue != nil {
		var serviceBusQueue1 ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueue1.PopulateFromARM(owner, *typedInput.ServiceBusQueue)
		if err != nil {
			return err
		}
		serviceBusQueue := serviceBusQueue1
		destination.ServiceBusQueue = &serviceBusQueue
	}

	// Set property ‘ServiceBusTopic’:
	if typedInput.ServiceBusTopic != nil {
		var serviceBusTopic1 ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopic1.PopulateFromARM(owner, *typedInput.ServiceBusTopic)
		if err != nil {
			return err
		}
		serviceBusTopic := serviceBusTopic1
		destination.ServiceBusTopic = &serviceBusTopic
	}

	// Set property ‘StorageQueue’:
	if typedInput.StorageQueue != nil {
		var storageQueue1 StorageQueueEventSubscriptionDestination
		err := storageQueue1.PopulateFromARM(owner, *typedInput.StorageQueue)
		if err != nil {
			return err
		}
		storageQueue := storageQueue1
		destination.StorageQueue = &storageQueue
	}

	// Set property ‘WebHook’:
	if typedInput.WebHook != nil {
		var webHook1 WebHookEventSubscriptionDestination
		err := webHook1.PopulateFromARM(owner, *typedInput.WebHook)
		if err != nil {
			return err
		}
		webHook := webHook1
		destination.WebHook = &webHook
	}

	// No error
	return nil
}

// AssignProperties_From_EventSubscriptionDestination populates our EventSubscriptionDestination from the provided source EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignProperties_From_EventSubscriptionDestination(source *alpha20200601s.EventSubscriptionDestination) error {

	// AzureFunction
	if source.AzureFunction != nil {
		var azureFunction AzureFunctionEventSubscriptionDestination
		err := azureFunction.AssignProperties_From_AzureFunctionEventSubscriptionDestination(source.AzureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		destination.AzureFunction = &azureFunction
	} else {
		destination.AzureFunction = nil
	}

	// EventHub
	if source.EventHub != nil {
		var eventHub EventHubEventSubscriptionDestination
		err := eventHub.AssignProperties_From_EventHubEventSubscriptionDestination(source.EventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventHubEventSubscriptionDestination() to populate field EventHub")
		}
		destination.EventHub = &eventHub
	} else {
		destination.EventHub = nil
	}

	// HybridConnection
	if source.HybridConnection != nil {
		var hybridConnection HybridConnectionEventSubscriptionDestination
		err := hybridConnection.AssignProperties_From_HybridConnectionEventSubscriptionDestination(source.HybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		destination.HybridConnection = &hybridConnection
	} else {
		destination.HybridConnection = nil
	}

	// ServiceBusQueue
	if source.ServiceBusQueue != nil {
		var serviceBusQueue ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueue.AssignProperties_From_ServiceBusQueueEventSubscriptionDestination(source.ServiceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		destination.ServiceBusQueue = &serviceBusQueue
	} else {
		destination.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if source.ServiceBusTopic != nil {
		var serviceBusTopic ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopic.AssignProperties_From_ServiceBusTopicEventSubscriptionDestination(source.ServiceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		destination.ServiceBusTopic = &serviceBusTopic
	} else {
		destination.ServiceBusTopic = nil
	}

	// StorageQueue
	if source.StorageQueue != nil {
		var storageQueue StorageQueueEventSubscriptionDestination
		err := storageQueue.AssignProperties_From_StorageQueueEventSubscriptionDestination(source.StorageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		destination.StorageQueue = &storageQueue
	} else {
		destination.StorageQueue = nil
	}

	// WebHook
	if source.WebHook != nil {
		var webHook WebHookEventSubscriptionDestination
		err := webHook.AssignProperties_From_WebHookEventSubscriptionDestination(source.WebHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebHookEventSubscriptionDestination() to populate field WebHook")
		}
		destination.WebHook = &webHook
	} else {
		destination.WebHook = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionDestination populates the provided destination EventSubscriptionDestination from our EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignProperties_To_EventSubscriptionDestination(target *alpha20200601s.EventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureFunction
	if destination.AzureFunction != nil {
		var azureFunction alpha20200601s.AzureFunctionEventSubscriptionDestination
		err := destination.AzureFunction.AssignProperties_To_AzureFunctionEventSubscriptionDestination(&azureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		target.AzureFunction = &azureFunction
	} else {
		target.AzureFunction = nil
	}

	// EventHub
	if destination.EventHub != nil {
		var eventHub alpha20200601s.EventHubEventSubscriptionDestination
		err := destination.EventHub.AssignProperties_To_EventHubEventSubscriptionDestination(&eventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventHubEventSubscriptionDestination() to populate field EventHub")
		}
		target.EventHub = &eventHub
	} else {
		target.EventHub = nil
	}

	// HybridConnection
	if destination.HybridConnection != nil {
		var hybridConnection alpha20200601s.HybridConnectionEventSubscriptionDestination
		err := destination.HybridConnection.AssignProperties_To_HybridConnectionEventSubscriptionDestination(&hybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		target.HybridConnection = &hybridConnection
	} else {
		target.HybridConnection = nil
	}

	// ServiceBusQueue
	if destination.ServiceBusQueue != nil {
		var serviceBusQueue alpha20200601s.ServiceBusQueueEventSubscriptionDestination
		err := destination.ServiceBusQueue.AssignProperties_To_ServiceBusQueueEventSubscriptionDestination(&serviceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		target.ServiceBusQueue = &serviceBusQueue
	} else {
		target.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if destination.ServiceBusTopic != nil {
		var serviceBusTopic alpha20200601s.ServiceBusTopicEventSubscriptionDestination
		err := destination.ServiceBusTopic.AssignProperties_To_ServiceBusTopicEventSubscriptionDestination(&serviceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		target.ServiceBusTopic = &serviceBusTopic
	} else {
		target.ServiceBusTopic = nil
	}

	// StorageQueue
	if destination.StorageQueue != nil {
		var storageQueue alpha20200601s.StorageQueueEventSubscriptionDestination
		err := destination.StorageQueue.AssignProperties_To_StorageQueueEventSubscriptionDestination(&storageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		target.StorageQueue = &storageQueue
	} else {
		target.StorageQueue = nil
	}

	// WebHook
	if destination.WebHook != nil {
		var webHook alpha20200601s.WebHookEventSubscriptionDestination
		err := destination.WebHook.AssignProperties_To_WebHookEventSubscriptionDestination(&webHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebHookEventSubscriptionDestination() to populate field WebHook")
		}
		target.WebHook = &webHook
	} else {
		target.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EventSubscriptionDestination_STATUS. Use v1beta20200601.EventSubscriptionDestination_STATUS instead
type EventSubscriptionDestination_STATUS struct {
	EndpointType *EventSubscriptionDestination_STATUS_EndpointType `json:"endpointType,omitempty"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionDestination_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *EventSubscriptionDestination_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestination_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *EventSubscriptionDestination_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestination_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestination_STATUSARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	if typedInput.EndpointType != nil {
		endpointType := *typedInput.EndpointType
		destination.EndpointType = &endpointType
	}

	// No error
	return nil
}

// AssignProperties_From_EventSubscriptionDestination_STATUS populates our EventSubscriptionDestination_STATUS from the provided source EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignProperties_From_EventSubscriptionDestination_STATUS(source *alpha20200601s.EventSubscriptionDestination_STATUS) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := EventSubscriptionDestination_STATUS_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionDestination_STATUS populates the provided destination EventSubscriptionDestination_STATUS from our EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignProperties_To_EventSubscriptionDestination_STATUS(target *alpha20200601s.EventSubscriptionDestination_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EventSubscriptionFilter. Use v1beta20200601.EventSubscriptionFilter instead
type EventSubscriptionFilter struct {
	AdvancedFilters        []AdvancedFilter `json:"advancedFilters,omitempty"`
	IncludedEventTypes     []string         `json:"includedEventTypes,omitempty"`
	IsSubjectCaseSensitive *bool            `json:"isSubjectCaseSensitive,omitempty"`
	SubjectBeginsWith      *string          `json:"subjectBeginsWith,omitempty"`
	SubjectEndsWith        *string          `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *EventSubscriptionFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	result := &EventSubscriptionFilterARM{}

	// Set property ‘AdvancedFilters’:
	for _, item := range filter.AdvancedFilters {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.AdvancedFilters = append(result.AdvancedFilters, *itemARM.(*AdvancedFilterARM))
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range filter.IncludedEventTypes {
		result.IncludedEventTypes = append(result.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		result.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if filter.SubjectBeginsWith != nil {
		subjectBeginsWith := *filter.SubjectBeginsWith
		result.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if filter.SubjectEndsWith != nil {
		subjectEndsWith := *filter.SubjectEndsWith
		result.SubjectEndsWith = &subjectEndsWith
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *EventSubscriptionFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *EventSubscriptionFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilterARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.AdvancedFilters = append(filter.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		filter.IncludedEventTypes = append(filter.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		filter.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		filter.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignProperties_From_EventSubscriptionFilter populates our EventSubscriptionFilter from the provided source EventSubscriptionFilter
func (filter *EventSubscriptionFilter) AssignProperties_From_EventSubscriptionFilter(source *alpha20200601s.EventSubscriptionFilter) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter
			err := advancedFilter.AssignProperties_From_AdvancedFilter(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionFilter populates the provided destination EventSubscriptionFilter from our EventSubscriptionFilter
func (filter *EventSubscriptionFilter) AssignProperties_To_EventSubscriptionFilter(destination *alpha20200601s.EventSubscriptionFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]alpha20200601s.AdvancedFilter, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter alpha20200601s.AdvancedFilter
			err := advancedFilterItem.AssignProperties_To_AdvancedFilter(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EventSubscriptionFilter_STATUS. Use v1beta20200601.EventSubscriptionFilter_STATUS instead
type EventSubscriptionFilter_STATUS struct {
	AdvancedFilters        []AdvancedFilter_STATUS `json:"advancedFilters,omitempty"`
	IncludedEventTypes     []string                `json:"includedEventTypes,omitempty"`
	IsSubjectCaseSensitive *bool                   `json:"isSubjectCaseSensitive,omitempty"`
	SubjectBeginsWith      *string                 `json:"subjectBeginsWith,omitempty"`
	SubjectEndsWith        *string                 `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionFilter_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *EventSubscriptionFilter_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilter_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *EventSubscriptionFilter_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilter_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilter_STATUSARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.AdvancedFilters = append(filter.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		filter.IncludedEventTypes = append(filter.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		filter.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		filter.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignProperties_From_EventSubscriptionFilter_STATUS populates our EventSubscriptionFilter_STATUS from the provided source EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignProperties_From_EventSubscriptionFilter_STATUS(source *alpha20200601s.EventSubscriptionFilter_STATUS) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter_STATUS, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter_STATUS
			err := advancedFilter.AssignProperties_From_AdvancedFilter_STATUS(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_STATUS() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionFilter_STATUS populates the provided destination EventSubscriptionFilter_STATUS from our EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignProperties_To_EventSubscriptionFilter_STATUS(destination *alpha20200601s.EventSubscriptionFilter_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]alpha20200601s.AdvancedFilter_STATUS, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter alpha20200601s.AdvancedFilter_STATUS
			err := advancedFilterItem.AssignProperties_To_AdvancedFilter_STATUS(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_STATUS() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EventSubscriptionProperties_EventDeliverySchema. Use
// v1beta20200601.EventSubscriptionProperties_EventDeliverySchema instead
// +kubebuilder:validation:Enum={"CloudEventSchemaV1_0","CustomInputSchema","EventGridSchema"}
type EventSubscriptionProperties_EventDeliverySchema string

const (
	EventSubscriptionProperties_EventDeliverySchema_CloudEventSchemaV1_0 = EventSubscriptionProperties_EventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionProperties_EventDeliverySchema_CustomInputSchema    = EventSubscriptionProperties_EventDeliverySchema("CustomInputSchema")
	EventSubscriptionProperties_EventDeliverySchema_EventGridSchema      = EventSubscriptionProperties_EventDeliverySchema("EventGridSchema")
)

// Deprecated version of EventSubscriptionProperties_STATUS_EventDeliverySchema. Use
// v1beta20200601.EventSubscriptionProperties_STATUS_EventDeliverySchema instead
type EventSubscriptionProperties_STATUS_EventDeliverySchema string

const (
	EventSubscriptionProperties_STATUS_EventDeliverySchema_CloudEventSchemaV1_0 = EventSubscriptionProperties_STATUS_EventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionProperties_STATUS_EventDeliverySchema_CustomInputSchema    = EventSubscriptionProperties_STATUS_EventDeliverySchema("CustomInputSchema")
	EventSubscriptionProperties_STATUS_EventDeliverySchema_EventGridSchema      = EventSubscriptionProperties_STATUS_EventDeliverySchema("EventGridSchema")
)

// Deprecated version of EventSubscriptionProperties_STATUS_ProvisioningState. Use
// v1beta20200601.EventSubscriptionProperties_STATUS_ProvisioningState instead
type EventSubscriptionProperties_STATUS_ProvisioningState string

const (
	EventSubscriptionProperties_STATUS_ProvisioningState_AwaitingManualAction = EventSubscriptionProperties_STATUS_ProvisioningState("AwaitingManualAction")
	EventSubscriptionProperties_STATUS_ProvisioningState_Canceled             = EventSubscriptionProperties_STATUS_ProvisioningState("Canceled")
	EventSubscriptionProperties_STATUS_ProvisioningState_Creating             = EventSubscriptionProperties_STATUS_ProvisioningState("Creating")
	EventSubscriptionProperties_STATUS_ProvisioningState_Deleting             = EventSubscriptionProperties_STATUS_ProvisioningState("Deleting")
	EventSubscriptionProperties_STATUS_ProvisioningState_Failed               = EventSubscriptionProperties_STATUS_ProvisioningState("Failed")
	EventSubscriptionProperties_STATUS_ProvisioningState_Succeeded            = EventSubscriptionProperties_STATUS_ProvisioningState("Succeeded")
	EventSubscriptionProperties_STATUS_ProvisioningState_Updating             = EventSubscriptionProperties_STATUS_ProvisioningState("Updating")
)

// Deprecated version of RetryPolicy. Use v1beta20200601.RetryPolicy instead
type RetryPolicy struct {
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`
	MaxDeliveryAttempts      *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.ARMTransformer = &RetryPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *RetryPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &RetryPolicyARM{}

	// Set property ‘EventTimeToLiveInMinutes’:
	if policy.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *policy.EventTimeToLiveInMinutes
		result.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if policy.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *policy.MaxDeliveryAttempts
		result.MaxDeliveryAttempts = &maxDeliveryAttempts
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetryPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetryPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicyARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		policy.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		policy.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignProperties_From_RetryPolicy populates our RetryPolicy from the provided source RetryPolicy
func (policy *RetryPolicy) AssignProperties_From_RetryPolicy(source *alpha20200601s.RetryPolicy) error {

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignProperties_To_RetryPolicy populates the provided destination RetryPolicy from our RetryPolicy
func (policy *RetryPolicy) AssignProperties_To_RetryPolicy(destination *alpha20200601s.RetryPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RetryPolicy_STATUS. Use v1beta20200601.RetryPolicy_STATUS instead
type RetryPolicy_STATUS struct {
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`
	MaxDeliveryAttempts      *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.FromARMConverter = &RetryPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetryPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetryPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		policy.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		policy.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignProperties_From_RetryPolicy_STATUS populates our RetryPolicy_STATUS from the provided source RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignProperties_From_RetryPolicy_STATUS(source *alpha20200601s.RetryPolicy_STATUS) error {

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignProperties_To_RetryPolicy_STATUS populates the provided destination RetryPolicy_STATUS from our RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignProperties_To_RetryPolicy_STATUS(destination *alpha20200601s.RetryPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of StorageBlobDeadLetterDestination. Use v1beta20200601.StorageBlobDeadLetterDestination instead
type StorageBlobDeadLetterDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *StorageBlobDeadLetterDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *StorageBlobDeadLetterDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageBlobDeadLetterDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *StorageBlobDeadLetterDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &StorageBlobDeadLetterDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		endpointType := *destination.EndpointType
		result.EndpointType = &endpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*StorageBlobDeadLetterDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *StorageBlobDeadLetterDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageBlobDeadLetterDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *StorageBlobDeadLetterDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageBlobDeadLetterDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageBlobDeadLetterDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	if typedInput.EndpointType != nil {
		endpointType := *typedInput.EndpointType
		destination.EndpointType = &endpointType
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 StorageBlobDeadLetterDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_StorageBlobDeadLetterDestination populates our StorageBlobDeadLetterDestination from the provided source StorageBlobDeadLetterDestination
func (destination *StorageBlobDeadLetterDestination) AssignProperties_From_StorageBlobDeadLetterDestination(source *alpha20200601s.StorageBlobDeadLetterDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := StorageBlobDeadLetterDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property StorageBlobDeadLetterDestinationProperties
		err := property.AssignProperties_From_StorageBlobDeadLetterDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageBlobDeadLetterDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageBlobDeadLetterDestination populates the provided destination StorageBlobDeadLetterDestination from our StorageBlobDeadLetterDestination
func (destination *StorageBlobDeadLetterDestination) AssignProperties_To_StorageBlobDeadLetterDestination(target *alpha20200601s.StorageBlobDeadLetterDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.StorageBlobDeadLetterDestinationProperties
		err := destination.Properties.AssignProperties_To_StorageBlobDeadLetterDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageBlobDeadLetterDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter. Use v1beta20200601.AdvancedFilter instead
type AdvancedFilter struct {
	BoolEquals                *AdvancedFilter_BoolEquals                `json:"boolEqualsAdvancedFilter,omitempty"`
	NumberGreaterThan         *AdvancedFilter_NumberGreaterThan         `json:"numberGreaterThanAdvancedFilter,omitempty"`
	NumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals `json:"numberGreaterThanOrEqualsAdvancedFilter,omitempty"`
	NumberIn                  *AdvancedFilter_NumberIn                  `json:"numberInAdvancedFilter,omitempty"`
	NumberLessThan            *AdvancedFilter_NumberLessThan            `json:"numberLessThanAdvancedFilter,omitempty"`
	NumberLessThanOrEquals    *AdvancedFilter_NumberLessThanOrEquals    `json:"numberLessThanOrEqualsAdvancedFilter,omitempty"`
	NumberNotIn               *AdvancedFilter_NumberNotIn               `json:"numberNotInAdvancedFilter,omitempty"`
	StringBeginsWith          *AdvancedFilter_StringBeginsWith          `json:"stringBeginsWithAdvancedFilter,omitempty"`
	StringContains            *AdvancedFilter_StringContains            `json:"stringContainsAdvancedFilter,omitempty"`
	StringEndsWith            *AdvancedFilter_StringEndsWith            `json:"stringEndsWithAdvancedFilter,omitempty"`
	StringIn                  *AdvancedFilter_StringIn                  `json:"stringInAdvancedFilter,omitempty"`
	StringNotIn               *AdvancedFilter_StringNotIn               `json:"stringNotInAdvancedFilter,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *AdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	result := &AdvancedFilterARM{}

	// Set property ‘BoolEquals’:
	if filter.BoolEquals != nil {
		boolEqualsARM, err := (*filter.BoolEquals).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		boolEquals := *boolEqualsARM.(*AdvancedFilter_BoolEqualsARM)
		result.BoolEquals = &boolEquals
	}

	// Set property ‘NumberGreaterThan’:
	if filter.NumberGreaterThan != nil {
		numberGreaterThanARM, err := (*filter.NumberGreaterThan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberGreaterThan := *numberGreaterThanARM.(*AdvancedFilter_NumberGreaterThanARM)
		result.NumberGreaterThan = &numberGreaterThan
	}

	// Set property ‘NumberGreaterThanOrEquals’:
	if filter.NumberGreaterThanOrEquals != nil {
		numberGreaterThanOrEqualsARM, err := (*filter.NumberGreaterThanOrEquals).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberGreaterThanOrEquals := *numberGreaterThanOrEqualsARM.(*AdvancedFilter_NumberGreaterThanOrEqualsARM)
		result.NumberGreaterThanOrEquals = &numberGreaterThanOrEquals
	}

	// Set property ‘NumberIn’:
	if filter.NumberIn != nil {
		numberInARM, err := (*filter.NumberIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberIn := *numberInARM.(*AdvancedFilter_NumberInARM)
		result.NumberIn = &numberIn
	}

	// Set property ‘NumberLessThan’:
	if filter.NumberLessThan != nil {
		numberLessThanARM, err := (*filter.NumberLessThan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberLessThan := *numberLessThanARM.(*AdvancedFilter_NumberLessThanARM)
		result.NumberLessThan = &numberLessThan
	}

	// Set property ‘NumberLessThanOrEquals’:
	if filter.NumberLessThanOrEquals != nil {
		numberLessThanOrEqualsARM, err := (*filter.NumberLessThanOrEquals).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberLessThanOrEquals := *numberLessThanOrEqualsARM.(*AdvancedFilter_NumberLessThanOrEqualsARM)
		result.NumberLessThanOrEquals = &numberLessThanOrEquals
	}

	// Set property ‘NumberNotIn’:
	if filter.NumberNotIn != nil {
		numberNotInARM, err := (*filter.NumberNotIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberNotIn := *numberNotInARM.(*AdvancedFilter_NumberNotInARM)
		result.NumberNotIn = &numberNotIn
	}

	// Set property ‘StringBeginsWith’:
	if filter.StringBeginsWith != nil {
		stringBeginsWithARM, err := (*filter.StringBeginsWith).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringBeginsWith := *stringBeginsWithARM.(*AdvancedFilter_StringBeginsWithARM)
		result.StringBeginsWith = &stringBeginsWith
	}

	// Set property ‘StringContains’:
	if filter.StringContains != nil {
		stringContainsARM, err := (*filter.StringContains).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringContains := *stringContainsARM.(*AdvancedFilter_StringContainsARM)
		result.StringContains = &stringContains
	}

	// Set property ‘StringEndsWith’:
	if filter.StringEndsWith != nil {
		stringEndsWithARM, err := (*filter.StringEndsWith).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringEndsWith := *stringEndsWithARM.(*AdvancedFilter_StringEndsWithARM)
		result.StringEndsWith = &stringEndsWith
	}

	// Set property ‘StringIn’:
	if filter.StringIn != nil {
		stringInARM, err := (*filter.StringIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringIn := *stringInARM.(*AdvancedFilter_StringInARM)
		result.StringIn = &stringIn
	}

	// Set property ‘StringNotIn’:
	if filter.StringNotIn != nil {
		stringNotInARM, err := (*filter.StringNotIn).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringNotIn := *stringNotInARM.(*AdvancedFilter_StringNotInARM)
		result.StringNotIn = &stringNotIn
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *AdvancedFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *AdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘BoolEquals’:
	if typedInput.BoolEquals != nil {
		var boolEquals1 AdvancedFilter_BoolEquals
		err := boolEquals1.PopulateFromARM(owner, *typedInput.BoolEquals)
		if err != nil {
			return err
		}
		boolEquals := boolEquals1
		filter.BoolEquals = &boolEquals
	}

	// Set property ‘NumberGreaterThan’:
	if typedInput.NumberGreaterThan != nil {
		var numberGreaterThan1 AdvancedFilter_NumberGreaterThan
		err := numberGreaterThan1.PopulateFromARM(owner, *typedInput.NumberGreaterThan)
		if err != nil {
			return err
		}
		numberGreaterThan := numberGreaterThan1
		filter.NumberGreaterThan = &numberGreaterThan
	}

	// Set property ‘NumberGreaterThanOrEquals’:
	if typedInput.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEquals1 AdvancedFilter_NumberGreaterThanOrEquals
		err := numberGreaterThanOrEquals1.PopulateFromARM(owner, *typedInput.NumberGreaterThanOrEquals)
		if err != nil {
			return err
		}
		numberGreaterThanOrEquals := numberGreaterThanOrEquals1
		filter.NumberGreaterThanOrEquals = &numberGreaterThanOrEquals
	}

	// Set property ‘NumberIn’:
	if typedInput.NumberIn != nil {
		var numberIn1 AdvancedFilter_NumberIn
		err := numberIn1.PopulateFromARM(owner, *typedInput.NumberIn)
		if err != nil {
			return err
		}
		numberIn := numberIn1
		filter.NumberIn = &numberIn
	}

	// Set property ‘NumberLessThan’:
	if typedInput.NumberLessThan != nil {
		var numberLessThan1 AdvancedFilter_NumberLessThan
		err := numberLessThan1.PopulateFromARM(owner, *typedInput.NumberLessThan)
		if err != nil {
			return err
		}
		numberLessThan := numberLessThan1
		filter.NumberLessThan = &numberLessThan
	}

	// Set property ‘NumberLessThanOrEquals’:
	if typedInput.NumberLessThanOrEquals != nil {
		var numberLessThanOrEquals1 AdvancedFilter_NumberLessThanOrEquals
		err := numberLessThanOrEquals1.PopulateFromARM(owner, *typedInput.NumberLessThanOrEquals)
		if err != nil {
			return err
		}
		numberLessThanOrEquals := numberLessThanOrEquals1
		filter.NumberLessThanOrEquals = &numberLessThanOrEquals
	}

	// Set property ‘NumberNotIn’:
	if typedInput.NumberNotIn != nil {
		var numberNotIn1 AdvancedFilter_NumberNotIn
		err := numberNotIn1.PopulateFromARM(owner, *typedInput.NumberNotIn)
		if err != nil {
			return err
		}
		numberNotIn := numberNotIn1
		filter.NumberNotIn = &numberNotIn
	}

	// Set property ‘StringBeginsWith’:
	if typedInput.StringBeginsWith != nil {
		var stringBeginsWith1 AdvancedFilter_StringBeginsWith
		err := stringBeginsWith1.PopulateFromARM(owner, *typedInput.StringBeginsWith)
		if err != nil {
			return err
		}
		stringBeginsWith := stringBeginsWith1
		filter.StringBeginsWith = &stringBeginsWith
	}

	// Set property ‘StringContains’:
	if typedInput.StringContains != nil {
		var stringContains1 AdvancedFilter_StringContains
		err := stringContains1.PopulateFromARM(owner, *typedInput.StringContains)
		if err != nil {
			return err
		}
		stringContains := stringContains1
		filter.StringContains = &stringContains
	}

	// Set property ‘StringEndsWith’:
	if typedInput.StringEndsWith != nil {
		var stringEndsWith1 AdvancedFilter_StringEndsWith
		err := stringEndsWith1.PopulateFromARM(owner, *typedInput.StringEndsWith)
		if err != nil {
			return err
		}
		stringEndsWith := stringEndsWith1
		filter.StringEndsWith = &stringEndsWith
	}

	// Set property ‘StringIn’:
	if typedInput.StringIn != nil {
		var stringIn1 AdvancedFilter_StringIn
		err := stringIn1.PopulateFromARM(owner, *typedInput.StringIn)
		if err != nil {
			return err
		}
		stringIn := stringIn1
		filter.StringIn = &stringIn
	}

	// Set property ‘StringNotIn’:
	if typedInput.StringNotIn != nil {
		var stringNotIn1 AdvancedFilter_StringNotIn
		err := stringNotIn1.PopulateFromARM(owner, *typedInput.StringNotIn)
		if err != nil {
			return err
		}
		stringNotIn := stringNotIn1
		filter.StringNotIn = &stringNotIn
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter populates our AdvancedFilter from the provided source AdvancedFilter
func (filter *AdvancedFilter) AssignProperties_From_AdvancedFilter(source *alpha20200601s.AdvancedFilter) error {

	// BoolEquals
	if source.BoolEquals != nil {
		var boolEqual AdvancedFilter_BoolEquals
		err := boolEqual.AssignProperties_From_AdvancedFilter_BoolEquals(source.BoolEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_BoolEquals() to populate field BoolEquals")
		}
		filter.BoolEquals = &boolEqual
	} else {
		filter.BoolEquals = nil
	}

	// NumberGreaterThan
	if source.NumberGreaterThan != nil {
		var numberGreaterThan AdvancedFilter_NumberGreaterThan
		err := numberGreaterThan.AssignProperties_From_AdvancedFilter_NumberGreaterThan(source.NumberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_NumberGreaterThan() to populate field NumberGreaterThan")
		}
		filter.NumberGreaterThan = &numberGreaterThan
	} else {
		filter.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if source.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual AdvancedFilter_NumberGreaterThanOrEquals
		err := numberGreaterThanOrEqual.AssignProperties_From_AdvancedFilter_NumberGreaterThanOrEquals(source.NumberGreaterThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_NumberGreaterThanOrEquals() to populate field NumberGreaterThanOrEquals")
		}
		filter.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		filter.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if source.NumberIn != nil {
		var numberIn AdvancedFilter_NumberIn
		err := numberIn.AssignProperties_From_AdvancedFilter_NumberIn(source.NumberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_NumberIn() to populate field NumberIn")
		}
		filter.NumberIn = &numberIn
	} else {
		filter.NumberIn = nil
	}

	// NumberLessThan
	if source.NumberLessThan != nil {
		var numberLessThan AdvancedFilter_NumberLessThan
		err := numberLessThan.AssignProperties_From_AdvancedFilter_NumberLessThan(source.NumberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_NumberLessThan() to populate field NumberLessThan")
		}
		filter.NumberLessThan = &numberLessThan
	} else {
		filter.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if source.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual AdvancedFilter_NumberLessThanOrEquals
		err := numberLessThanOrEqual.AssignProperties_From_AdvancedFilter_NumberLessThanOrEquals(source.NumberLessThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_NumberLessThanOrEquals() to populate field NumberLessThanOrEquals")
		}
		filter.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		filter.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if source.NumberNotIn != nil {
		var numberNotIn AdvancedFilter_NumberNotIn
		err := numberNotIn.AssignProperties_From_AdvancedFilter_NumberNotIn(source.NumberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_NumberNotIn() to populate field NumberNotIn")
		}
		filter.NumberNotIn = &numberNotIn
	} else {
		filter.NumberNotIn = nil
	}

	// StringBeginsWith
	if source.StringBeginsWith != nil {
		var stringBeginsWith AdvancedFilter_StringBeginsWith
		err := stringBeginsWith.AssignProperties_From_AdvancedFilter_StringBeginsWith(source.StringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_StringBeginsWith() to populate field StringBeginsWith")
		}
		filter.StringBeginsWith = &stringBeginsWith
	} else {
		filter.StringBeginsWith = nil
	}

	// StringContains
	if source.StringContains != nil {
		var stringContain AdvancedFilter_StringContains
		err := stringContain.AssignProperties_From_AdvancedFilter_StringContains(source.StringContains)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_StringContains() to populate field StringContains")
		}
		filter.StringContains = &stringContain
	} else {
		filter.StringContains = nil
	}

	// StringEndsWith
	if source.StringEndsWith != nil {
		var stringEndsWith AdvancedFilter_StringEndsWith
		err := stringEndsWith.AssignProperties_From_AdvancedFilter_StringEndsWith(source.StringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_StringEndsWith() to populate field StringEndsWith")
		}
		filter.StringEndsWith = &stringEndsWith
	} else {
		filter.StringEndsWith = nil
	}

	// StringIn
	if source.StringIn != nil {
		var stringIn AdvancedFilter_StringIn
		err := stringIn.AssignProperties_From_AdvancedFilter_StringIn(source.StringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_StringIn() to populate field StringIn")
		}
		filter.StringIn = &stringIn
	} else {
		filter.StringIn = nil
	}

	// StringNotIn
	if source.StringNotIn != nil {
		var stringNotIn AdvancedFilter_StringNotIn
		err := stringNotIn.AssignProperties_From_AdvancedFilter_StringNotIn(source.StringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_StringNotIn() to populate field StringNotIn")
		}
		filter.StringNotIn = &stringNotIn
	} else {
		filter.StringNotIn = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter populates the provided destination AdvancedFilter from our AdvancedFilter
func (filter *AdvancedFilter) AssignProperties_To_AdvancedFilter(destination *alpha20200601s.AdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BoolEquals
	if filter.BoolEquals != nil {
		var boolEqual alpha20200601s.AdvancedFilter_BoolEquals
		err := filter.BoolEquals.AssignProperties_To_AdvancedFilter_BoolEquals(&boolEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_BoolEquals() to populate field BoolEquals")
		}
		destination.BoolEquals = &boolEqual
	} else {
		destination.BoolEquals = nil
	}

	// NumberGreaterThan
	if filter.NumberGreaterThan != nil {
		var numberGreaterThan alpha20200601s.AdvancedFilter_NumberGreaterThan
		err := filter.NumberGreaterThan.AssignProperties_To_AdvancedFilter_NumberGreaterThan(&numberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_NumberGreaterThan() to populate field NumberGreaterThan")
		}
		destination.NumberGreaterThan = &numberGreaterThan
	} else {
		destination.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if filter.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual alpha20200601s.AdvancedFilter_NumberGreaterThanOrEquals
		err := filter.NumberGreaterThanOrEquals.AssignProperties_To_AdvancedFilter_NumberGreaterThanOrEquals(&numberGreaterThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_NumberGreaterThanOrEquals() to populate field NumberGreaterThanOrEquals")
		}
		destination.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		destination.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if filter.NumberIn != nil {
		var numberIn alpha20200601s.AdvancedFilter_NumberIn
		err := filter.NumberIn.AssignProperties_To_AdvancedFilter_NumberIn(&numberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_NumberIn() to populate field NumberIn")
		}
		destination.NumberIn = &numberIn
	} else {
		destination.NumberIn = nil
	}

	// NumberLessThan
	if filter.NumberLessThan != nil {
		var numberLessThan alpha20200601s.AdvancedFilter_NumberLessThan
		err := filter.NumberLessThan.AssignProperties_To_AdvancedFilter_NumberLessThan(&numberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_NumberLessThan() to populate field NumberLessThan")
		}
		destination.NumberLessThan = &numberLessThan
	} else {
		destination.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if filter.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual alpha20200601s.AdvancedFilter_NumberLessThanOrEquals
		err := filter.NumberLessThanOrEquals.AssignProperties_To_AdvancedFilter_NumberLessThanOrEquals(&numberLessThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_NumberLessThanOrEquals() to populate field NumberLessThanOrEquals")
		}
		destination.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		destination.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if filter.NumberNotIn != nil {
		var numberNotIn alpha20200601s.AdvancedFilter_NumberNotIn
		err := filter.NumberNotIn.AssignProperties_To_AdvancedFilter_NumberNotIn(&numberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_NumberNotIn() to populate field NumberNotIn")
		}
		destination.NumberNotIn = &numberNotIn
	} else {
		destination.NumberNotIn = nil
	}

	// StringBeginsWith
	if filter.StringBeginsWith != nil {
		var stringBeginsWith alpha20200601s.AdvancedFilter_StringBeginsWith
		err := filter.StringBeginsWith.AssignProperties_To_AdvancedFilter_StringBeginsWith(&stringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_StringBeginsWith() to populate field StringBeginsWith")
		}
		destination.StringBeginsWith = &stringBeginsWith
	} else {
		destination.StringBeginsWith = nil
	}

	// StringContains
	if filter.StringContains != nil {
		var stringContain alpha20200601s.AdvancedFilter_StringContains
		err := filter.StringContains.AssignProperties_To_AdvancedFilter_StringContains(&stringContain)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_StringContains() to populate field StringContains")
		}
		destination.StringContains = &stringContain
	} else {
		destination.StringContains = nil
	}

	// StringEndsWith
	if filter.StringEndsWith != nil {
		var stringEndsWith alpha20200601s.AdvancedFilter_StringEndsWith
		err := filter.StringEndsWith.AssignProperties_To_AdvancedFilter_StringEndsWith(&stringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_StringEndsWith() to populate field StringEndsWith")
		}
		destination.StringEndsWith = &stringEndsWith
	} else {
		destination.StringEndsWith = nil
	}

	// StringIn
	if filter.StringIn != nil {
		var stringIn alpha20200601s.AdvancedFilter_StringIn
		err := filter.StringIn.AssignProperties_To_AdvancedFilter_StringIn(&stringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_StringIn() to populate field StringIn")
		}
		destination.StringIn = &stringIn
	} else {
		destination.StringIn = nil
	}

	// StringNotIn
	if filter.StringNotIn != nil {
		var stringNotIn alpha20200601s.AdvancedFilter_StringNotIn
		err := filter.StringNotIn.AssignProperties_To_AdvancedFilter_StringNotIn(&stringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_StringNotIn() to populate field StringNotIn")
		}
		destination.StringNotIn = &stringNotIn
	} else {
		destination.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_STATUS. Use v1beta20200601.AdvancedFilter_STATUS instead
type AdvancedFilter_STATUS struct {
	Key          *string                             `json:"key,omitempty"`
	OperatorType *AdvancedFilter_STATUS_OperatorType `json:"operatorType,omitempty"`
}

var _ genruntime.FromARMConverter = &AdvancedFilter_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *AdvancedFilter_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *AdvancedFilter_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_STATUSARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		filter.Key = &key
	}

	// Set property ‘OperatorType’:
	if typedInput.OperatorType != nil {
		operatorType := *typedInput.OperatorType
		filter.OperatorType = &operatorType
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_STATUS populates our AdvancedFilter_STATUS from the provided source AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignProperties_From_AdvancedFilter_STATUS(source *alpha20200601s.AdvancedFilter_STATUS) error {

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_STATUS_OperatorType(*source.OperatorType)
		filter.OperatorType = &operatorType
	} else {
		filter.OperatorType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_STATUS populates the provided destination AdvancedFilter_STATUS from our AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignProperties_To_AdvancedFilter_STATUS(destination *alpha20200601s.AdvancedFilter_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	if filter.OperatorType != nil {
		operatorType := string(*filter.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AzureFunctionEventSubscriptionDestination. Use v1beta20200601.AzureFunctionEventSubscriptionDestination instead
type AzureFunctionEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *AzureFunctionEventSubscriptionDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *AzureFunctionEventSubscriptionDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFunctionEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *AzureFunctionEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &AzureFunctionEventSubscriptionDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		result.EndpointType = *destination.EndpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*AzureFunctionEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *AzureFunctionEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFunctionEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *AzureFunctionEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFunctionEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFunctionEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = &typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 AzureFunctionEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_AzureFunctionEventSubscriptionDestination populates our AzureFunctionEventSubscriptionDestination from the provided source AzureFunctionEventSubscriptionDestination
func (destination *AzureFunctionEventSubscriptionDestination) AssignProperties_From_AzureFunctionEventSubscriptionDestination(source *alpha20200601s.AzureFunctionEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := AzureFunctionEventSubscriptionDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property AzureFunctionEventSubscriptionDestinationProperties
		err := property.AssignProperties_From_AzureFunctionEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AzureFunctionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AzureFunctionEventSubscriptionDestination populates the provided destination AzureFunctionEventSubscriptionDestination from our AzureFunctionEventSubscriptionDestination
func (destination *AzureFunctionEventSubscriptionDestination) AssignProperties_To_AzureFunctionEventSubscriptionDestination(target *alpha20200601s.AzureFunctionEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.AzureFunctionEventSubscriptionDestinationProperties
		err := destination.Properties.AssignProperties_To_AzureFunctionEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AzureFunctionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DeadLetterDestination_STATUS_EndpointType. Use
// v1beta20200601.DeadLetterDestination_STATUS_EndpointType instead
type DeadLetterDestination_STATUS_EndpointType string

const DeadLetterDestination_STATUS_EndpointType_StorageBlob = DeadLetterDestination_STATUS_EndpointType("StorageBlob")

// Deprecated version of EventHubEventSubscriptionDestination. Use v1beta20200601.EventHubEventSubscriptionDestination instead
type EventHubEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *EventHubEventSubscriptionDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *EventHubEventSubscriptionDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &EventHubEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *EventHubEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &EventHubEventSubscriptionDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		result.EndpointType = *destination.EndpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*EventHubEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *EventHubEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventHubEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *EventHubEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventHubEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventHubEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = &typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 EventHubEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_EventHubEventSubscriptionDestination populates our EventHubEventSubscriptionDestination from the provided source EventHubEventSubscriptionDestination
func (destination *EventHubEventSubscriptionDestination) AssignProperties_From_EventHubEventSubscriptionDestination(source *alpha20200601s.EventHubEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := EventHubEventSubscriptionDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property EventHubEventSubscriptionDestinationProperties
		err := property.AssignProperties_From_EventHubEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventHubEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventHubEventSubscriptionDestination populates the provided destination EventHubEventSubscriptionDestination from our EventHubEventSubscriptionDestination
func (destination *EventHubEventSubscriptionDestination) AssignProperties_To_EventHubEventSubscriptionDestination(target *alpha20200601s.EventHubEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.EventHubEventSubscriptionDestinationProperties
		err := destination.Properties.AssignProperties_To_EventHubEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventHubEventSubscriptionDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EventSubscriptionDestination_STATUS_EndpointType. Use
// v1beta20200601.EventSubscriptionDestination_STATUS_EndpointType instead
type EventSubscriptionDestination_STATUS_EndpointType string

const (
	EventSubscriptionDestination_STATUS_EndpointType_AzureFunction    = EventSubscriptionDestination_STATUS_EndpointType("AzureFunction")
	EventSubscriptionDestination_STATUS_EndpointType_EventHub         = EventSubscriptionDestination_STATUS_EndpointType("EventHub")
	EventSubscriptionDestination_STATUS_EndpointType_HybridConnection = EventSubscriptionDestination_STATUS_EndpointType("HybridConnection")
	EventSubscriptionDestination_STATUS_EndpointType_ServiceBusQueue  = EventSubscriptionDestination_STATUS_EndpointType("ServiceBusQueue")
	EventSubscriptionDestination_STATUS_EndpointType_ServiceBusTopic  = EventSubscriptionDestination_STATUS_EndpointType("ServiceBusTopic")
	EventSubscriptionDestination_STATUS_EndpointType_StorageQueue     = EventSubscriptionDestination_STATUS_EndpointType("StorageQueue")
	EventSubscriptionDestination_STATUS_EndpointType_WebHook          = EventSubscriptionDestination_STATUS_EndpointType("WebHook")
)

// Deprecated version of HybridConnectionEventSubscriptionDestination. Use v1beta20200601.HybridConnectionEventSubscriptionDestination instead
type HybridConnectionEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *HybridConnectionEventSubscriptionDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *HybridConnectionEventSubscriptionDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &HybridConnectionEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *HybridConnectionEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &HybridConnectionEventSubscriptionDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		result.EndpointType = *destination.EndpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*HybridConnectionEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *HybridConnectionEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HybridConnectionEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *HybridConnectionEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HybridConnectionEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HybridConnectionEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = &typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 HybridConnectionEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_HybridConnectionEventSubscriptionDestination populates our HybridConnectionEventSubscriptionDestination from the provided source HybridConnectionEventSubscriptionDestination
func (destination *HybridConnectionEventSubscriptionDestination) AssignProperties_From_HybridConnectionEventSubscriptionDestination(source *alpha20200601s.HybridConnectionEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := HybridConnectionEventSubscriptionDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property HybridConnectionEventSubscriptionDestinationProperties
		err := property.AssignProperties_From_HybridConnectionEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HybridConnectionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HybridConnectionEventSubscriptionDestination populates the provided destination HybridConnectionEventSubscriptionDestination from our HybridConnectionEventSubscriptionDestination
func (destination *HybridConnectionEventSubscriptionDestination) AssignProperties_To_HybridConnectionEventSubscriptionDestination(target *alpha20200601s.HybridConnectionEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.HybridConnectionEventSubscriptionDestinationProperties
		err := destination.Properties.AssignProperties_To_HybridConnectionEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HybridConnectionEventSubscriptionDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ServiceBusQueueEventSubscriptionDestination. Use v1beta20200601.ServiceBusQueueEventSubscriptionDestination instead
type ServiceBusQueueEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *ServiceBusQueueEventSubscriptionDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *ServiceBusQueueEventSubscriptionDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusQueueEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *ServiceBusQueueEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &ServiceBusQueueEventSubscriptionDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		result.EndpointType = *destination.EndpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*ServiceBusQueueEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *ServiceBusQueueEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusQueueEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *ServiceBusQueueEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceBusQueueEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusQueueEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = &typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 ServiceBusQueueEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_ServiceBusQueueEventSubscriptionDestination populates our ServiceBusQueueEventSubscriptionDestination from the provided source ServiceBusQueueEventSubscriptionDestination
func (destination *ServiceBusQueueEventSubscriptionDestination) AssignProperties_From_ServiceBusQueueEventSubscriptionDestination(source *alpha20200601s.ServiceBusQueueEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := ServiceBusQueueEventSubscriptionDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property ServiceBusQueueEventSubscriptionDestinationProperties
		err := property.AssignProperties_From_ServiceBusQueueEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusQueueEventSubscriptionDestination populates the provided destination ServiceBusQueueEventSubscriptionDestination from our ServiceBusQueueEventSubscriptionDestination
func (destination *ServiceBusQueueEventSubscriptionDestination) AssignProperties_To_ServiceBusQueueEventSubscriptionDestination(target *alpha20200601s.ServiceBusQueueEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.ServiceBusQueueEventSubscriptionDestinationProperties
		err := destination.Properties.AssignProperties_To_ServiceBusQueueEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ServiceBusTopicEventSubscriptionDestination. Use v1beta20200601.ServiceBusTopicEventSubscriptionDestination instead
type ServiceBusTopicEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *ServiceBusTopicEventSubscriptionDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *ServiceBusTopicEventSubscriptionDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusTopicEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *ServiceBusTopicEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &ServiceBusTopicEventSubscriptionDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		result.EndpointType = *destination.EndpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*ServiceBusTopicEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *ServiceBusTopicEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusTopicEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *ServiceBusTopicEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceBusTopicEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusTopicEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = &typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 ServiceBusTopicEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_ServiceBusTopicEventSubscriptionDestination populates our ServiceBusTopicEventSubscriptionDestination from the provided source ServiceBusTopicEventSubscriptionDestination
func (destination *ServiceBusTopicEventSubscriptionDestination) AssignProperties_From_ServiceBusTopicEventSubscriptionDestination(source *alpha20200601s.ServiceBusTopicEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := ServiceBusTopicEventSubscriptionDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property ServiceBusTopicEventSubscriptionDestinationProperties
		err := property.AssignProperties_From_ServiceBusTopicEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusTopicEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusTopicEventSubscriptionDestination populates the provided destination ServiceBusTopicEventSubscriptionDestination from our ServiceBusTopicEventSubscriptionDestination
func (destination *ServiceBusTopicEventSubscriptionDestination) AssignProperties_To_ServiceBusTopicEventSubscriptionDestination(target *alpha20200601s.ServiceBusTopicEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.ServiceBusTopicEventSubscriptionDestinationProperties
		err := destination.Properties.AssignProperties_To_ServiceBusTopicEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusTopicEventSubscriptionDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of StorageBlobDeadLetterDestination_EndpointType. Use
// v1beta20200601.StorageBlobDeadLetterDestination_EndpointType instead
// +kubebuilder:validation:Enum={"StorageBlob"}
type StorageBlobDeadLetterDestination_EndpointType string

const StorageBlobDeadLetterDestination_EndpointType_StorageBlob = StorageBlobDeadLetterDestination_EndpointType("StorageBlob")

// Deprecated version of StorageBlobDeadLetterDestinationProperties. Use v1beta20200601.StorageBlobDeadLetterDestinationProperties instead
type StorageBlobDeadLetterDestinationProperties struct {
	BlobContainerName *string                       `json:"blobContainerName,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageBlobDeadLetterDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *StorageBlobDeadLetterDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &StorageBlobDeadLetterDestinationPropertiesARM{}

	// Set property ‘BlobContainerName’:
	if properties.BlobContainerName != nil {
		blobContainerName := *properties.BlobContainerName
		result.BlobContainerName = &blobContainerName
	}

	// Set property ‘ResourceId’:
	if properties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *StorageBlobDeadLetterDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageBlobDeadLetterDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *StorageBlobDeadLetterDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageBlobDeadLetterDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageBlobDeadLetterDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘BlobContainerName’:
	if typedInput.BlobContainerName != nil {
		blobContainerName := *typedInput.BlobContainerName
		properties.BlobContainerName = &blobContainerName
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignProperties_From_StorageBlobDeadLetterDestinationProperties populates our StorageBlobDeadLetterDestinationProperties from the provided source StorageBlobDeadLetterDestinationProperties
func (properties *StorageBlobDeadLetterDestinationProperties) AssignProperties_From_StorageBlobDeadLetterDestinationProperties(source *alpha20200601s.StorageBlobDeadLetterDestinationProperties) error {

	// BlobContainerName
	properties.BlobContainerName = genruntime.ClonePointerToString(source.BlobContainerName)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		properties.ResourceReference = &resourceReference
	} else {
		properties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageBlobDeadLetterDestinationProperties populates the provided destination StorageBlobDeadLetterDestinationProperties from our StorageBlobDeadLetterDestinationProperties
func (properties *StorageBlobDeadLetterDestinationProperties) AssignProperties_To_StorageBlobDeadLetterDestinationProperties(destination *alpha20200601s.StorageBlobDeadLetterDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobContainerName
	destination.BlobContainerName = genruntime.ClonePointerToString(properties.BlobContainerName)

	// ResourceReference
	if properties.ResourceReference != nil {
		resourceReference := properties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of StorageQueueEventSubscriptionDestination. Use v1beta20200601.StorageQueueEventSubscriptionDestination instead
type StorageQueueEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *StorageQueueEventSubscriptionDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *StorageQueueEventSubscriptionDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageQueueEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *StorageQueueEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &StorageQueueEventSubscriptionDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		result.EndpointType = *destination.EndpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*StorageQueueEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *StorageQueueEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageQueueEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *StorageQueueEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageQueueEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageQueueEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = &typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 StorageQueueEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_StorageQueueEventSubscriptionDestination populates our StorageQueueEventSubscriptionDestination from the provided source StorageQueueEventSubscriptionDestination
func (destination *StorageQueueEventSubscriptionDestination) AssignProperties_From_StorageQueueEventSubscriptionDestination(source *alpha20200601s.StorageQueueEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := StorageQueueEventSubscriptionDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property StorageQueueEventSubscriptionDestinationProperties
		err := property.AssignProperties_From_StorageQueueEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageQueueEventSubscriptionDestination populates the provided destination StorageQueueEventSubscriptionDestination from our StorageQueueEventSubscriptionDestination
func (destination *StorageQueueEventSubscriptionDestination) AssignProperties_To_StorageQueueEventSubscriptionDestination(target *alpha20200601s.StorageQueueEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.StorageQueueEventSubscriptionDestinationProperties
		err := destination.Properties.AssignProperties_To_StorageQueueEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageQueueEventSubscriptionDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebHookEventSubscriptionDestination. Use v1beta20200601.WebHookEventSubscriptionDestination instead
type WebHookEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType *WebHookEventSubscriptionDestination_EndpointType `json:"endpointType,omitempty"`
	Properties   *WebHookEventSubscriptionDestinationProperties    `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &WebHookEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (destination *WebHookEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if destination == nil {
		return nil, nil
	}
	result := &WebHookEventSubscriptionDestinationARM{}

	// Set property ‘EndpointType’:
	if destination.EndpointType != nil {
		result.EndpointType = *destination.EndpointType
	}

	// Set property ‘Properties’:
	if destination.Properties != nil {
		propertiesARM, err := (*destination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*WebHookEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (destination *WebHookEventSubscriptionDestination) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebHookEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (destination *WebHookEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebHookEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebHookEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	destination.EndpointType = &typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 WebHookEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		destination.Properties = &properties
	}

	// No error
	return nil
}

// AssignProperties_From_WebHookEventSubscriptionDestination populates our WebHookEventSubscriptionDestination from the provided source WebHookEventSubscriptionDestination
func (destination *WebHookEventSubscriptionDestination) AssignProperties_From_WebHookEventSubscriptionDestination(source *alpha20200601s.WebHookEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		endpointType := WebHookEventSubscriptionDestination_EndpointType(*source.EndpointType)
		destination.EndpointType = &endpointType
	} else {
		destination.EndpointType = nil
	}

	// Properties
	if source.Properties != nil {
		var property WebHookEventSubscriptionDestinationProperties
		err := property.AssignProperties_From_WebHookEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebHookEventSubscriptionDestinationProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebHookEventSubscriptionDestination populates the provided destination WebHookEventSubscriptionDestination from our WebHookEventSubscriptionDestination
func (destination *WebHookEventSubscriptionDestination) AssignProperties_To_WebHookEventSubscriptionDestination(target *alpha20200601s.WebHookEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	if destination.EndpointType != nil {
		endpointType := string(*destination.EndpointType)
		target.EndpointType = &endpointType
	} else {
		target.EndpointType = nil
	}

	// Properties
	if destination.Properties != nil {
		var property alpha20200601s.WebHookEventSubscriptionDestinationProperties
		err := destination.Properties.AssignProperties_To_WebHookEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebHookEventSubscriptionDestinationProperties() to populate field Properties")
		}
		target.Properties = &property
	} else {
		target.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_BoolEquals. Use v1beta20200601.AdvancedFilter_BoolEquals instead
type AdvancedFilter_BoolEquals struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_BoolEquals_OperatorType `json:"operatorType,omitempty"`
	Value        *bool                                   `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_BoolEquals{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (equals *AdvancedFilter_BoolEquals) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if equals == nil {
		return nil, nil
	}
	result := &AdvancedFilter_BoolEqualsARM{}

	// Set property ‘Key’:
	if equals.Key != nil {
		key := *equals.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if equals.OperatorType != nil {
		result.OperatorType = *equals.OperatorType
	}

	// Set property ‘Value’:
	if equals.Value != nil {
		value := *equals.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (equals *AdvancedFilter_BoolEquals) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_BoolEqualsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (equals *AdvancedFilter_BoolEquals) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_BoolEqualsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_BoolEqualsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		equals.Key = &key
	}

	// Set property ‘OperatorType’:
	equals.OperatorType = &typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		equals.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_BoolEquals populates our AdvancedFilter_BoolEquals from the provided source AdvancedFilter_BoolEquals
func (equals *AdvancedFilter_BoolEquals) AssignProperties_From_AdvancedFilter_BoolEquals(source *alpha20200601s.AdvancedFilter_BoolEquals) error {

	// Key
	equals.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_BoolEquals_OperatorType(*source.OperatorType)
		equals.OperatorType = &operatorType
	} else {
		equals.OperatorType = nil
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		equals.Value = &value
	} else {
		equals.Value = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_BoolEquals populates the provided destination AdvancedFilter_BoolEquals from our AdvancedFilter_BoolEquals
func (equals *AdvancedFilter_BoolEquals) AssignProperties_To_AdvancedFilter_BoolEquals(destination *alpha20200601s.AdvancedFilter_BoolEquals) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(equals.Key)

	// OperatorType
	if equals.OperatorType != nil {
		operatorType := string(*equals.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Value
	if equals.Value != nil {
		value := *equals.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_NumberGreaterThan. Use v1beta20200601.AdvancedFilter_NumberGreaterThan instead
type AdvancedFilter_NumberGreaterThan struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_NumberGreaterThan_OperatorType `json:"operatorType,omitempty"`
	Value        *float64                                       `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberGreaterThan{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (than *AdvancedFilter_NumberGreaterThan) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if than == nil {
		return nil, nil
	}
	result := &AdvancedFilter_NumberGreaterThanARM{}

	// Set property ‘Key’:
	if than.Key != nil {
		key := *than.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if than.OperatorType != nil {
		result.OperatorType = *than.OperatorType
	}

	// Set property ‘Value’:
	if than.Value != nil {
		value := *than.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (than *AdvancedFilter_NumberGreaterThan) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberGreaterThanARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (than *AdvancedFilter_NumberGreaterThan) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberGreaterThanARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberGreaterThanARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		than.Key = &key
	}

	// Set property ‘OperatorType’:
	than.OperatorType = &typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		than.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_NumberGreaterThan populates our AdvancedFilter_NumberGreaterThan from the provided source AdvancedFilter_NumberGreaterThan
func (than *AdvancedFilter_NumberGreaterThan) AssignProperties_From_AdvancedFilter_NumberGreaterThan(source *alpha20200601s.AdvancedFilter_NumberGreaterThan) error {

	// Key
	than.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_NumberGreaterThan_OperatorType(*source.OperatorType)
		than.OperatorType = &operatorType
	} else {
		than.OperatorType = nil
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		than.Value = &value
	} else {
		than.Value = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_NumberGreaterThan populates the provided destination AdvancedFilter_NumberGreaterThan from our AdvancedFilter_NumberGreaterThan
func (than *AdvancedFilter_NumberGreaterThan) AssignProperties_To_AdvancedFilter_NumberGreaterThan(destination *alpha20200601s.AdvancedFilter_NumberGreaterThan) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(than.Key)

	// OperatorType
	if than.OperatorType != nil {
		operatorType := string(*than.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Value
	if than.Value != nil {
		value := *than.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_NumberGreaterThanOrEquals. Use v1beta20200601.AdvancedFilter_NumberGreaterThanOrEquals instead
type AdvancedFilter_NumberGreaterThanOrEquals struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_NumberGreaterThanOrEquals_OperatorType `json:"operatorType,omitempty"`
	Value        *float64                                               `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberGreaterThanOrEquals{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (equals *AdvancedFilter_NumberGreaterThanOrEquals) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if equals == nil {
		return nil, nil
	}
	result := &AdvancedFilter_NumberGreaterThanOrEqualsARM{}

	// Set property ‘Key’:
	if equals.Key != nil {
		key := *equals.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if equals.OperatorType != nil {
		result.OperatorType = *equals.OperatorType
	}

	// Set property ‘Value’:
	if equals.Value != nil {
		value := *equals.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (equals *AdvancedFilter_NumberGreaterThanOrEquals) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberGreaterThanOrEqualsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (equals *AdvancedFilter_NumberGreaterThanOrEquals) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberGreaterThanOrEqualsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberGreaterThanOrEqualsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		equals.Key = &key
	}

	// Set property ‘OperatorType’:
	equals.OperatorType = &typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		equals.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_NumberGreaterThanOrEquals populates our AdvancedFilter_NumberGreaterThanOrEquals from the provided source AdvancedFilter_NumberGreaterThanOrEquals
func (equals *AdvancedFilter_NumberGreaterThanOrEquals) AssignProperties_From_AdvancedFilter_NumberGreaterThanOrEquals(source *alpha20200601s.AdvancedFilter_NumberGreaterThanOrEquals) error {

	// Key
	equals.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_NumberGreaterThanOrEquals_OperatorType(*source.OperatorType)
		equals.OperatorType = &operatorType
	} else {
		equals.OperatorType = nil
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		equals.Value = &value
	} else {
		equals.Value = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_NumberGreaterThanOrEquals populates the provided destination AdvancedFilter_NumberGreaterThanOrEquals from our AdvancedFilter_NumberGreaterThanOrEquals
func (equals *AdvancedFilter_NumberGreaterThanOrEquals) AssignProperties_To_AdvancedFilter_NumberGreaterThanOrEquals(destination *alpha20200601s.AdvancedFilter_NumberGreaterThanOrEquals) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(equals.Key)

	// OperatorType
	if equals.OperatorType != nil {
		operatorType := string(*equals.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Value
	if equals.Value != nil {
		value := *equals.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_NumberIn. Use v1beta20200601.AdvancedFilter_NumberIn instead
type AdvancedFilter_NumberIn struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_NumberIn_OperatorType `json:"operatorType,omitempty"`
	Values       []float64                             `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (numberIn *AdvancedFilter_NumberIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if numberIn == nil {
		return nil, nil
	}
	result := &AdvancedFilter_NumberInARM{}

	// Set property ‘Key’:
	if numberIn.Key != nil {
		key := *numberIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if numberIn.OperatorType != nil {
		result.OperatorType = *numberIn.OperatorType
	}

	// Set property ‘Values’:
	for _, item := range numberIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (numberIn *AdvancedFilter_NumberIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (numberIn *AdvancedFilter_NumberIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		numberIn.Key = &key
	}

	// Set property ‘OperatorType’:
	numberIn.OperatorType = &typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		numberIn.Values = append(numberIn.Values, item)
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_NumberIn populates our AdvancedFilter_NumberIn from the provided source AdvancedFilter_NumberIn
func (numberIn *AdvancedFilter_NumberIn) AssignProperties_From_AdvancedFilter_NumberIn(source *alpha20200601s.AdvancedFilter_NumberIn) error {

	// Key
	numberIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_NumberIn_OperatorType(*source.OperatorType)
		numberIn.OperatorType = &operatorType
	} else {
		numberIn.OperatorType = nil
	}

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		numberIn.Values = valueList
	} else {
		numberIn.Values = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_NumberIn populates the provided destination AdvancedFilter_NumberIn from our AdvancedFilter_NumberIn
func (numberIn *AdvancedFilter_NumberIn) AssignProperties_To_AdvancedFilter_NumberIn(destination *alpha20200601s.AdvancedFilter_NumberIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(numberIn.Key)

	// OperatorType
	if numberIn.OperatorType != nil {
		operatorType := string(*numberIn.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Values
	if numberIn.Values != nil {
		valueList := make([]float64, len(numberIn.Values))
		for valueIndex, valueItem := range numberIn.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_NumberLessThan. Use v1beta20200601.AdvancedFilter_NumberLessThan instead
type AdvancedFilter_NumberLessThan struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_NumberLessThan_OperatorType `json:"operatorType,omitempty"`
	Value        *float64                                    `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberLessThan{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (than *AdvancedFilter_NumberLessThan) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if than == nil {
		return nil, nil
	}
	result := &AdvancedFilter_NumberLessThanARM{}

	// Set property ‘Key’:
	if than.Key != nil {
		key := *than.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if than.OperatorType != nil {
		result.OperatorType = *than.OperatorType
	}

	// Set property ‘Value’:
	if than.Value != nil {
		value := *than.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (than *AdvancedFilter_NumberLessThan) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberLessThanARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (than *AdvancedFilter_NumberLessThan) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberLessThanARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberLessThanARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		than.Key = &key
	}

	// Set property ‘OperatorType’:
	than.OperatorType = &typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		than.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_NumberLessThan populates our AdvancedFilter_NumberLessThan from the provided source AdvancedFilter_NumberLessThan
func (than *AdvancedFilter_NumberLessThan) AssignProperties_From_AdvancedFilter_NumberLessThan(source *alpha20200601s.AdvancedFilter_NumberLessThan) error {

	// Key
	than.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_NumberLessThan_OperatorType(*source.OperatorType)
		than.OperatorType = &operatorType
	} else {
		than.OperatorType = nil
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		than.Value = &value
	} else {
		than.Value = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_NumberLessThan populates the provided destination AdvancedFilter_NumberLessThan from our AdvancedFilter_NumberLessThan
func (than *AdvancedFilter_NumberLessThan) AssignProperties_To_AdvancedFilter_NumberLessThan(destination *alpha20200601s.AdvancedFilter_NumberLessThan) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(than.Key)

	// OperatorType
	if than.OperatorType != nil {
		operatorType := string(*than.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Value
	if than.Value != nil {
		value := *than.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_NumberLessThanOrEquals. Use v1beta20200601.AdvancedFilter_NumberLessThanOrEquals instead
type AdvancedFilter_NumberLessThanOrEquals struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_NumberLessThanOrEquals_OperatorType `json:"operatorType,omitempty"`
	Value        *float64                                            `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberLessThanOrEquals{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (equals *AdvancedFilter_NumberLessThanOrEquals) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if equals == nil {
		return nil, nil
	}
	result := &AdvancedFilter_NumberLessThanOrEqualsARM{}

	// Set property ‘Key’:
	if equals.Key != nil {
		key := *equals.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if equals.OperatorType != nil {
		result.OperatorType = *equals.OperatorType
	}

	// Set property ‘Value’:
	if equals.Value != nil {
		value := *equals.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (equals *AdvancedFilter_NumberLessThanOrEquals) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberLessThanOrEqualsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (equals *AdvancedFilter_NumberLessThanOrEquals) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberLessThanOrEqualsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberLessThanOrEqualsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		equals.Key = &key
	}

	// Set property ‘OperatorType’:
	equals.OperatorType = &typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		equals.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_NumberLessThanOrEquals populates our AdvancedFilter_NumberLessThanOrEquals from the provided source AdvancedFilter_NumberLessThanOrEquals
func (equals *AdvancedFilter_NumberLessThanOrEquals) AssignProperties_From_AdvancedFilter_NumberLessThanOrEquals(source *alpha20200601s.AdvancedFilter_NumberLessThanOrEquals) error {

	// Key
	equals.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_NumberLessThanOrEquals_OperatorType(*source.OperatorType)
		equals.OperatorType = &operatorType
	} else {
		equals.OperatorType = nil
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		equals.Value = &value
	} else {
		equals.Value = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_NumberLessThanOrEquals populates the provided destination AdvancedFilter_NumberLessThanOrEquals from our AdvancedFilter_NumberLessThanOrEquals
func (equals *AdvancedFilter_NumberLessThanOrEquals) AssignProperties_To_AdvancedFilter_NumberLessThanOrEquals(destination *alpha20200601s.AdvancedFilter_NumberLessThanOrEquals) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(equals.Key)

	// OperatorType
	if equals.OperatorType != nil {
		operatorType := string(*equals.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Value
	if equals.Value != nil {
		value := *equals.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_NumberNotIn. Use v1beta20200601.AdvancedFilter_NumberNotIn instead
type AdvancedFilter_NumberNotIn struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_NumberNotIn_OperatorType `json:"operatorType,omitempty"`
	Values       []float64                                `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberNotIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (notIn *AdvancedFilter_NumberNotIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if notIn == nil {
		return nil, nil
	}
	result := &AdvancedFilter_NumberNotInARM{}

	// Set property ‘Key’:
	if notIn.Key != nil {
		key := *notIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if notIn.OperatorType != nil {
		result.OperatorType = *notIn.OperatorType
	}

	// Set property ‘Values’:
	for _, item := range notIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (notIn *AdvancedFilter_NumberNotIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberNotInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (notIn *AdvancedFilter_NumberNotIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberNotInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberNotInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		notIn.Key = &key
	}

	// Set property ‘OperatorType’:
	notIn.OperatorType = &typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		notIn.Values = append(notIn.Values, item)
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_NumberNotIn populates our AdvancedFilter_NumberNotIn from the provided source AdvancedFilter_NumberNotIn
func (notIn *AdvancedFilter_NumberNotIn) AssignProperties_From_AdvancedFilter_NumberNotIn(source *alpha20200601s.AdvancedFilter_NumberNotIn) error {

	// Key
	notIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_NumberNotIn_OperatorType(*source.OperatorType)
		notIn.OperatorType = &operatorType
	} else {
		notIn.OperatorType = nil
	}

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		notIn.Values = valueList
	} else {
		notIn.Values = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_NumberNotIn populates the provided destination AdvancedFilter_NumberNotIn from our AdvancedFilter_NumberNotIn
func (notIn *AdvancedFilter_NumberNotIn) AssignProperties_To_AdvancedFilter_NumberNotIn(destination *alpha20200601s.AdvancedFilter_NumberNotIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(notIn.Key)

	// OperatorType
	if notIn.OperatorType != nil {
		operatorType := string(*notIn.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Values
	if notIn.Values != nil {
		valueList := make([]float64, len(notIn.Values))
		for valueIndex, valueItem := range notIn.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_STATUS_OperatorType. Use v1beta20200601.AdvancedFilter_STATUS_OperatorType instead
type AdvancedFilter_STATUS_OperatorType string

const (
	AdvancedFilter_STATUS_OperatorType_BoolEquals                = AdvancedFilter_STATUS_OperatorType("BoolEquals")
	AdvancedFilter_STATUS_OperatorType_NumberGreaterThan         = AdvancedFilter_STATUS_OperatorType("NumberGreaterThan")
	AdvancedFilter_STATUS_OperatorType_NumberGreaterThanOrEquals = AdvancedFilter_STATUS_OperatorType("NumberGreaterThanOrEquals")
	AdvancedFilter_STATUS_OperatorType_NumberIn                  = AdvancedFilter_STATUS_OperatorType("NumberIn")
	AdvancedFilter_STATUS_OperatorType_NumberLessThan            = AdvancedFilter_STATUS_OperatorType("NumberLessThan")
	AdvancedFilter_STATUS_OperatorType_NumberLessThanOrEquals    = AdvancedFilter_STATUS_OperatorType("NumberLessThanOrEquals")
	AdvancedFilter_STATUS_OperatorType_NumberNotIn               = AdvancedFilter_STATUS_OperatorType("NumberNotIn")
	AdvancedFilter_STATUS_OperatorType_StringBeginsWith          = AdvancedFilter_STATUS_OperatorType("StringBeginsWith")
	AdvancedFilter_STATUS_OperatorType_StringContains            = AdvancedFilter_STATUS_OperatorType("StringContains")
	AdvancedFilter_STATUS_OperatorType_StringEndsWith            = AdvancedFilter_STATUS_OperatorType("StringEndsWith")
	AdvancedFilter_STATUS_OperatorType_StringIn                  = AdvancedFilter_STATUS_OperatorType("StringIn")
	AdvancedFilter_STATUS_OperatorType_StringNotIn               = AdvancedFilter_STATUS_OperatorType("StringNotIn")
)

// Deprecated version of AdvancedFilter_StringBeginsWith. Use v1beta20200601.AdvancedFilter_StringBeginsWith instead
type AdvancedFilter_StringBeginsWith struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_StringBeginsWith_OperatorType `json:"operatorType,omitempty"`
	Values       []string                                      `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringBeginsWith{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (with *AdvancedFilter_StringBeginsWith) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if with == nil {
		return nil, nil
	}
	result := &AdvancedFilter_StringBeginsWithARM{}

	// Set property ‘Key’:
	if with.Key != nil {
		key := *with.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if with.OperatorType != nil {
		result.OperatorType = *with.OperatorType
	}

	// Set property ‘Values’:
	for _, item := range with.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (with *AdvancedFilter_StringBeginsWith) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringBeginsWithARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (with *AdvancedFilter_StringBeginsWith) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringBeginsWithARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringBeginsWithARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		with.Key = &key
	}

	// Set property ‘OperatorType’:
	with.OperatorType = &typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		with.Values = append(with.Values, item)
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_StringBeginsWith populates our AdvancedFilter_StringBeginsWith from the provided source AdvancedFilter_StringBeginsWith
func (with *AdvancedFilter_StringBeginsWith) AssignProperties_From_AdvancedFilter_StringBeginsWith(source *alpha20200601s.AdvancedFilter_StringBeginsWith) error {

	// Key
	with.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_StringBeginsWith_OperatorType(*source.OperatorType)
		with.OperatorType = &operatorType
	} else {
		with.OperatorType = nil
	}

	// Values
	with.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_StringBeginsWith populates the provided destination AdvancedFilter_StringBeginsWith from our AdvancedFilter_StringBeginsWith
func (with *AdvancedFilter_StringBeginsWith) AssignProperties_To_AdvancedFilter_StringBeginsWith(destination *alpha20200601s.AdvancedFilter_StringBeginsWith) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(with.Key)

	// OperatorType
	if with.OperatorType != nil {
		operatorType := string(*with.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Values
	destination.Values = genruntime.CloneSliceOfString(with.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_StringContains. Use v1beta20200601.AdvancedFilter_StringContains instead
type AdvancedFilter_StringContains struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_StringContains_OperatorType `json:"operatorType,omitempty"`
	Values       []string                                    `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringContains{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (contains *AdvancedFilter_StringContains) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if contains == nil {
		return nil, nil
	}
	result := &AdvancedFilter_StringContainsARM{}

	// Set property ‘Key’:
	if contains.Key != nil {
		key := *contains.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if contains.OperatorType != nil {
		result.OperatorType = *contains.OperatorType
	}

	// Set property ‘Values’:
	for _, item := range contains.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contains *AdvancedFilter_StringContains) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringContainsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contains *AdvancedFilter_StringContains) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringContainsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringContainsARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		contains.Key = &key
	}

	// Set property ‘OperatorType’:
	contains.OperatorType = &typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		contains.Values = append(contains.Values, item)
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_StringContains populates our AdvancedFilter_StringContains from the provided source AdvancedFilter_StringContains
func (contains *AdvancedFilter_StringContains) AssignProperties_From_AdvancedFilter_StringContains(source *alpha20200601s.AdvancedFilter_StringContains) error {

	// Key
	contains.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_StringContains_OperatorType(*source.OperatorType)
		contains.OperatorType = &operatorType
	} else {
		contains.OperatorType = nil
	}

	// Values
	contains.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_StringContains populates the provided destination AdvancedFilter_StringContains from our AdvancedFilter_StringContains
func (contains *AdvancedFilter_StringContains) AssignProperties_To_AdvancedFilter_StringContains(destination *alpha20200601s.AdvancedFilter_StringContains) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(contains.Key)

	// OperatorType
	if contains.OperatorType != nil {
		operatorType := string(*contains.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Values
	destination.Values = genruntime.CloneSliceOfString(contains.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_StringEndsWith. Use v1beta20200601.AdvancedFilter_StringEndsWith instead
type AdvancedFilter_StringEndsWith struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_StringEndsWith_OperatorType `json:"operatorType,omitempty"`
	Values       []string                                    `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringEndsWith{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (with *AdvancedFilter_StringEndsWith) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if with == nil {
		return nil, nil
	}
	result := &AdvancedFilter_StringEndsWithARM{}

	// Set property ‘Key’:
	if with.Key != nil {
		key := *with.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if with.OperatorType != nil {
		result.OperatorType = *with.OperatorType
	}

	// Set property ‘Values’:
	for _, item := range with.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (with *AdvancedFilter_StringEndsWith) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringEndsWithARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (with *AdvancedFilter_StringEndsWith) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringEndsWithARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringEndsWithARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		with.Key = &key
	}

	// Set property ‘OperatorType’:
	with.OperatorType = &typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		with.Values = append(with.Values, item)
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_StringEndsWith populates our AdvancedFilter_StringEndsWith from the provided source AdvancedFilter_StringEndsWith
func (with *AdvancedFilter_StringEndsWith) AssignProperties_From_AdvancedFilter_StringEndsWith(source *alpha20200601s.AdvancedFilter_StringEndsWith) error {

	// Key
	with.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_StringEndsWith_OperatorType(*source.OperatorType)
		with.OperatorType = &operatorType
	} else {
		with.OperatorType = nil
	}

	// Values
	with.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_StringEndsWith populates the provided destination AdvancedFilter_StringEndsWith from our AdvancedFilter_StringEndsWith
func (with *AdvancedFilter_StringEndsWith) AssignProperties_To_AdvancedFilter_StringEndsWith(destination *alpha20200601s.AdvancedFilter_StringEndsWith) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(with.Key)

	// OperatorType
	if with.OperatorType != nil {
		operatorType := string(*with.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Values
	destination.Values = genruntime.CloneSliceOfString(with.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_StringIn. Use v1beta20200601.AdvancedFilter_StringIn instead
type AdvancedFilter_StringIn struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_StringIn_OperatorType `json:"operatorType,omitempty"`
	Values       []string                              `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (stringIn *AdvancedFilter_StringIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if stringIn == nil {
		return nil, nil
	}
	result := &AdvancedFilter_StringInARM{}

	// Set property ‘Key’:
	if stringIn.Key != nil {
		key := *stringIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if stringIn.OperatorType != nil {
		result.OperatorType = *stringIn.OperatorType
	}

	// Set property ‘Values’:
	for _, item := range stringIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (stringIn *AdvancedFilter_StringIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (stringIn *AdvancedFilter_StringIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		stringIn.Key = &key
	}

	// Set property ‘OperatorType’:
	stringIn.OperatorType = &typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		stringIn.Values = append(stringIn.Values, item)
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_StringIn populates our AdvancedFilter_StringIn from the provided source AdvancedFilter_StringIn
func (stringIn *AdvancedFilter_StringIn) AssignProperties_From_AdvancedFilter_StringIn(source *alpha20200601s.AdvancedFilter_StringIn) error {

	// Key
	stringIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_StringIn_OperatorType(*source.OperatorType)
		stringIn.OperatorType = &operatorType
	} else {
		stringIn.OperatorType = nil
	}

	// Values
	stringIn.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_StringIn populates the provided destination AdvancedFilter_StringIn from our AdvancedFilter_StringIn
func (stringIn *AdvancedFilter_StringIn) AssignProperties_To_AdvancedFilter_StringIn(destination *alpha20200601s.AdvancedFilter_StringIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(stringIn.Key)

	// OperatorType
	if stringIn.OperatorType != nil {
		operatorType := string(*stringIn.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Values
	destination.Values = genruntime.CloneSliceOfString(stringIn.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_StringNotIn. Use v1beta20200601.AdvancedFilter_StringNotIn instead
type AdvancedFilter_StringNotIn struct {
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType *AdvancedFilter_StringNotIn_OperatorType `json:"operatorType,omitempty"`
	Values       []string                                 `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringNotIn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (notIn *AdvancedFilter_StringNotIn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if notIn == nil {
		return nil, nil
	}
	result := &AdvancedFilter_StringNotInARM{}

	// Set property ‘Key’:
	if notIn.Key != nil {
		key := *notIn.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	if notIn.OperatorType != nil {
		result.OperatorType = *notIn.OperatorType
	}

	// Set property ‘Values’:
	for _, item := range notIn.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (notIn *AdvancedFilter_StringNotIn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringNotInARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (notIn *AdvancedFilter_StringNotIn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringNotInARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringNotInARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		notIn.Key = &key
	}

	// Set property ‘OperatorType’:
	notIn.OperatorType = &typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		notIn.Values = append(notIn.Values, item)
	}

	// No error
	return nil
}

// AssignProperties_From_AdvancedFilter_StringNotIn populates our AdvancedFilter_StringNotIn from the provided source AdvancedFilter_StringNotIn
func (notIn *AdvancedFilter_StringNotIn) AssignProperties_From_AdvancedFilter_StringNotIn(source *alpha20200601s.AdvancedFilter_StringNotIn) error {

	// Key
	notIn.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		operatorType := AdvancedFilter_StringNotIn_OperatorType(*source.OperatorType)
		notIn.OperatorType = &operatorType
	} else {
		notIn.OperatorType = nil
	}

	// Values
	notIn.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_StringNotIn populates the provided destination AdvancedFilter_StringNotIn from our AdvancedFilter_StringNotIn
func (notIn *AdvancedFilter_StringNotIn) AssignProperties_To_AdvancedFilter_StringNotIn(destination *alpha20200601s.AdvancedFilter_StringNotIn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(notIn.Key)

	// OperatorType
	if notIn.OperatorType != nil {
		operatorType := string(*notIn.OperatorType)
		destination.OperatorType = &operatorType
	} else {
		destination.OperatorType = nil
	}

	// Values
	destination.Values = genruntime.CloneSliceOfString(notIn.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AzureFunctionEventSubscriptionDestination_EndpointType. Use
// v1beta20200601.AzureFunctionEventSubscriptionDestination_EndpointType instead
// +kubebuilder:validation:Enum={"AzureFunction"}
type AzureFunctionEventSubscriptionDestination_EndpointType string

const AzureFunctionEventSubscriptionDestination_EndpointType_AzureFunction = AzureFunctionEventSubscriptionDestination_EndpointType("AzureFunction")

// Deprecated version of AzureFunctionEventSubscriptionDestinationProperties. Use v1beta20200601.AzureFunctionEventSubscriptionDestinationProperties instead
type AzureFunctionEventSubscriptionDestinationProperties struct {
	MaxEventsPerBatch             *int                          `json:"maxEventsPerBatch,omitempty"`
	PreferredBatchSizeInKilobytes *int                          `json:"preferredBatchSizeInKilobytes,omitempty"`
	ResourceReference             *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFunctionEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *AzureFunctionEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &AzureFunctionEventSubscriptionDestinationPropertiesARM{}

	// Set property ‘MaxEventsPerBatch’:
	if properties.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *properties.MaxEventsPerBatch
		result.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if properties.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *properties.PreferredBatchSizeInKilobytes
		result.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// Set property ‘ResourceId’:
	if properties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AzureFunctionEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFunctionEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AzureFunctionEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFunctionEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFunctionEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘MaxEventsPerBatch’:
	if typedInput.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *typedInput.MaxEventsPerBatch
		properties.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if typedInput.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *typedInput.PreferredBatchSizeInKilobytes
		properties.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignProperties_From_AzureFunctionEventSubscriptionDestinationProperties populates our AzureFunctionEventSubscriptionDestinationProperties from the provided source AzureFunctionEventSubscriptionDestinationProperties
func (properties *AzureFunctionEventSubscriptionDestinationProperties) AssignProperties_From_AzureFunctionEventSubscriptionDestinationProperties(source *alpha20200601s.AzureFunctionEventSubscriptionDestinationProperties) error {

	// MaxEventsPerBatch
	properties.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	properties.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		properties.ResourceReference = &resourceReference
	} else {
		properties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AzureFunctionEventSubscriptionDestinationProperties populates the provided destination AzureFunctionEventSubscriptionDestinationProperties from our AzureFunctionEventSubscriptionDestinationProperties
func (properties *AzureFunctionEventSubscriptionDestinationProperties) AssignProperties_To_AzureFunctionEventSubscriptionDestinationProperties(destination *alpha20200601s.AzureFunctionEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(properties.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(properties.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if properties.ResourceReference != nil {
		resourceReference := properties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EventHubEventSubscriptionDestination_EndpointType. Use
// v1beta20200601.EventHubEventSubscriptionDestination_EndpointType instead
// +kubebuilder:validation:Enum={"EventHub"}
type EventHubEventSubscriptionDestination_EndpointType string

const EventHubEventSubscriptionDestination_EndpointType_EventHub = EventHubEventSubscriptionDestination_EndpointType("EventHub")

// Deprecated version of EventHubEventSubscriptionDestinationProperties. Use v1beta20200601.EventHubEventSubscriptionDestinationProperties instead
type EventHubEventSubscriptionDestinationProperties struct {
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &EventHubEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *EventHubEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &EventHubEventSubscriptionDestinationPropertiesARM{}

	// Set property ‘ResourceId’:
	if properties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *EventHubEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventHubEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *EventHubEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(EventHubEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventHubEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignProperties_From_EventHubEventSubscriptionDestinationProperties populates our EventHubEventSubscriptionDestinationProperties from the provided source EventHubEventSubscriptionDestinationProperties
func (properties *EventHubEventSubscriptionDestinationProperties) AssignProperties_From_EventHubEventSubscriptionDestinationProperties(source *alpha20200601s.EventHubEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		properties.ResourceReference = &resourceReference
	} else {
		properties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventHubEventSubscriptionDestinationProperties populates the provided destination EventHubEventSubscriptionDestinationProperties from our EventHubEventSubscriptionDestinationProperties
func (properties *EventHubEventSubscriptionDestinationProperties) AssignProperties_To_EventHubEventSubscriptionDestinationProperties(destination *alpha20200601s.EventHubEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if properties.ResourceReference != nil {
		resourceReference := properties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of HybridConnectionEventSubscriptionDestination_EndpointType. Use
// v1beta20200601.HybridConnectionEventSubscriptionDestination_EndpointType instead
// +kubebuilder:validation:Enum={"HybridConnection"}
type HybridConnectionEventSubscriptionDestination_EndpointType string

const HybridConnectionEventSubscriptionDestination_EndpointType_HybridConnection = HybridConnectionEventSubscriptionDestination_EndpointType("HybridConnection")

// Deprecated version of HybridConnectionEventSubscriptionDestinationProperties. Use v1beta20200601.HybridConnectionEventSubscriptionDestinationProperties instead
type HybridConnectionEventSubscriptionDestinationProperties struct {
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &HybridConnectionEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *HybridConnectionEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &HybridConnectionEventSubscriptionDestinationPropertiesARM{}

	// Set property ‘ResourceId’:
	if properties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *HybridConnectionEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HybridConnectionEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *HybridConnectionEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(HybridConnectionEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HybridConnectionEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignProperties_From_HybridConnectionEventSubscriptionDestinationProperties populates our HybridConnectionEventSubscriptionDestinationProperties from the provided source HybridConnectionEventSubscriptionDestinationProperties
func (properties *HybridConnectionEventSubscriptionDestinationProperties) AssignProperties_From_HybridConnectionEventSubscriptionDestinationProperties(source *alpha20200601s.HybridConnectionEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		properties.ResourceReference = &resourceReference
	} else {
		properties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HybridConnectionEventSubscriptionDestinationProperties populates the provided destination HybridConnectionEventSubscriptionDestinationProperties from our HybridConnectionEventSubscriptionDestinationProperties
func (properties *HybridConnectionEventSubscriptionDestinationProperties) AssignProperties_To_HybridConnectionEventSubscriptionDestinationProperties(destination *alpha20200601s.HybridConnectionEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if properties.ResourceReference != nil {
		resourceReference := properties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ServiceBusQueueEventSubscriptionDestination_EndpointType. Use
// v1beta20200601.ServiceBusQueueEventSubscriptionDestination_EndpointType instead
// +kubebuilder:validation:Enum={"ServiceBusQueue"}
type ServiceBusQueueEventSubscriptionDestination_EndpointType string

const ServiceBusQueueEventSubscriptionDestination_EndpointType_ServiceBusQueue = ServiceBusQueueEventSubscriptionDestination_EndpointType("ServiceBusQueue")

// Deprecated version of ServiceBusQueueEventSubscriptionDestinationProperties. Use v1beta20200601.ServiceBusQueueEventSubscriptionDestinationProperties instead
type ServiceBusQueueEventSubscriptionDestinationProperties struct {
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusQueueEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *ServiceBusQueueEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &ServiceBusQueueEventSubscriptionDestinationPropertiesARM{}

	// Set property ‘ResourceId’:
	if properties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ServiceBusQueueEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusQueueEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ServiceBusQueueEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(ServiceBusQueueEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusQueueEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignProperties_From_ServiceBusQueueEventSubscriptionDestinationProperties populates our ServiceBusQueueEventSubscriptionDestinationProperties from the provided source ServiceBusQueueEventSubscriptionDestinationProperties
func (properties *ServiceBusQueueEventSubscriptionDestinationProperties) AssignProperties_From_ServiceBusQueueEventSubscriptionDestinationProperties(source *alpha20200601s.ServiceBusQueueEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		properties.ResourceReference = &resourceReference
	} else {
		properties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusQueueEventSubscriptionDestinationProperties populates the provided destination ServiceBusQueueEventSubscriptionDestinationProperties from our ServiceBusQueueEventSubscriptionDestinationProperties
func (properties *ServiceBusQueueEventSubscriptionDestinationProperties) AssignProperties_To_ServiceBusQueueEventSubscriptionDestinationProperties(destination *alpha20200601s.ServiceBusQueueEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if properties.ResourceReference != nil {
		resourceReference := properties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ServiceBusTopicEventSubscriptionDestination_EndpointType. Use
// v1beta20200601.ServiceBusTopicEventSubscriptionDestination_EndpointType instead
// +kubebuilder:validation:Enum={"ServiceBusTopic"}
type ServiceBusTopicEventSubscriptionDestination_EndpointType string

const ServiceBusTopicEventSubscriptionDestination_EndpointType_ServiceBusTopic = ServiceBusTopicEventSubscriptionDestination_EndpointType("ServiceBusTopic")

// Deprecated version of ServiceBusTopicEventSubscriptionDestinationProperties. Use v1beta20200601.ServiceBusTopicEventSubscriptionDestinationProperties instead
type ServiceBusTopicEventSubscriptionDestinationProperties struct {
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusTopicEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *ServiceBusTopicEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &ServiceBusTopicEventSubscriptionDestinationPropertiesARM{}

	// Set property ‘ResourceId’:
	if properties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ServiceBusTopicEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusTopicEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ServiceBusTopicEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(ServiceBusTopicEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusTopicEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignProperties_From_ServiceBusTopicEventSubscriptionDestinationProperties populates our ServiceBusTopicEventSubscriptionDestinationProperties from the provided source ServiceBusTopicEventSubscriptionDestinationProperties
func (properties *ServiceBusTopicEventSubscriptionDestinationProperties) AssignProperties_From_ServiceBusTopicEventSubscriptionDestinationProperties(source *alpha20200601s.ServiceBusTopicEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		properties.ResourceReference = &resourceReference
	} else {
		properties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusTopicEventSubscriptionDestinationProperties populates the provided destination ServiceBusTopicEventSubscriptionDestinationProperties from our ServiceBusTopicEventSubscriptionDestinationProperties
func (properties *ServiceBusTopicEventSubscriptionDestinationProperties) AssignProperties_To_ServiceBusTopicEventSubscriptionDestinationProperties(destination *alpha20200601s.ServiceBusTopicEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if properties.ResourceReference != nil {
		resourceReference := properties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of StorageQueueEventSubscriptionDestination_EndpointType. Use
// v1beta20200601.StorageQueueEventSubscriptionDestination_EndpointType instead
// +kubebuilder:validation:Enum={"StorageQueue"}
type StorageQueueEventSubscriptionDestination_EndpointType string

const StorageQueueEventSubscriptionDestination_EndpointType_StorageQueue = StorageQueueEventSubscriptionDestination_EndpointType("StorageQueue")

// Deprecated version of StorageQueueEventSubscriptionDestinationProperties. Use v1beta20200601.StorageQueueEventSubscriptionDestinationProperties instead
type StorageQueueEventSubscriptionDestinationProperties struct {
	QueueName         *string                       `json:"queueName,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageQueueEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *StorageQueueEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &StorageQueueEventSubscriptionDestinationPropertiesARM{}

	// Set property ‘QueueName’:
	if properties.QueueName != nil {
		queueName := *properties.QueueName
		result.QueueName = &queueName
	}

	// Set property ‘ResourceId’:
	if properties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *StorageQueueEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageQueueEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *StorageQueueEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageQueueEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageQueueEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘QueueName’:
	if typedInput.QueueName != nil {
		queueName := *typedInput.QueueName
		properties.QueueName = &queueName
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignProperties_From_StorageQueueEventSubscriptionDestinationProperties populates our StorageQueueEventSubscriptionDestinationProperties from the provided source StorageQueueEventSubscriptionDestinationProperties
func (properties *StorageQueueEventSubscriptionDestinationProperties) AssignProperties_From_StorageQueueEventSubscriptionDestinationProperties(source *alpha20200601s.StorageQueueEventSubscriptionDestinationProperties) error {

	// QueueName
	properties.QueueName = genruntime.ClonePointerToString(source.QueueName)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		properties.ResourceReference = &resourceReference
	} else {
		properties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageQueueEventSubscriptionDestinationProperties populates the provided destination StorageQueueEventSubscriptionDestinationProperties from our StorageQueueEventSubscriptionDestinationProperties
func (properties *StorageQueueEventSubscriptionDestinationProperties) AssignProperties_To_StorageQueueEventSubscriptionDestinationProperties(destination *alpha20200601s.StorageQueueEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// QueueName
	destination.QueueName = genruntime.ClonePointerToString(properties.QueueName)

	// ResourceReference
	if properties.ResourceReference != nil {
		resourceReference := properties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebHookEventSubscriptionDestination_EndpointType. Use
// v1beta20200601.WebHookEventSubscriptionDestination_EndpointType instead
// +kubebuilder:validation:Enum={"WebHook"}
type WebHookEventSubscriptionDestination_EndpointType string

const WebHookEventSubscriptionDestination_EndpointType_WebHook = WebHookEventSubscriptionDestination_EndpointType("WebHook")

// Deprecated version of WebHookEventSubscriptionDestinationProperties. Use v1beta20200601.WebHookEventSubscriptionDestinationProperties instead
type WebHookEventSubscriptionDestinationProperties struct {
	AzureActiveDirectoryApplicationIdOrUri *string `json:"azureActiveDirectoryApplicationIdOrUri,omitempty"`
	AzureActiveDirectoryTenantId           *string `json:"azureActiveDirectoryTenantId,omitempty"`
	EndpointUrl                            *string `json:"endpointUrl,omitempty"`
	MaxEventsPerBatch                      *int    `json:"maxEventsPerBatch,omitempty"`
	PreferredBatchSizeInKilobytes          *int    `json:"preferredBatchSizeInKilobytes,omitempty"`
}

var _ genruntime.ARMTransformer = &WebHookEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *WebHookEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &WebHookEventSubscriptionDestinationPropertiesARM{}

	// Set property ‘AzureActiveDirectoryApplicationIdOrUri’:
	if properties.AzureActiveDirectoryApplicationIdOrUri != nil {
		azureActiveDirectoryApplicationIdOrUri := *properties.AzureActiveDirectoryApplicationIdOrUri
		result.AzureActiveDirectoryApplicationIdOrUri = &azureActiveDirectoryApplicationIdOrUri
	}

	// Set property ‘AzureActiveDirectoryTenantId’:
	if properties.AzureActiveDirectoryTenantId != nil {
		azureActiveDirectoryTenantId := *properties.AzureActiveDirectoryTenantId
		result.AzureActiveDirectoryTenantId = &azureActiveDirectoryTenantId
	}

	// Set property ‘EndpointUrl’:
	if properties.EndpointUrl != nil {
		endpointUrl := *properties.EndpointUrl
		result.EndpointUrl = &endpointUrl
	}

	// Set property ‘MaxEventsPerBatch’:
	if properties.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *properties.MaxEventsPerBatch
		result.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if properties.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *properties.PreferredBatchSizeInKilobytes
		result.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *WebHookEventSubscriptionDestinationProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebHookEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *WebHookEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebHookEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebHookEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘AzureActiveDirectoryApplicationIdOrUri’:
	if typedInput.AzureActiveDirectoryApplicationIdOrUri != nil {
		azureActiveDirectoryApplicationIdOrUri := *typedInput.AzureActiveDirectoryApplicationIdOrUri
		properties.AzureActiveDirectoryApplicationIdOrUri = &azureActiveDirectoryApplicationIdOrUri
	}

	// Set property ‘AzureActiveDirectoryTenantId’:
	if typedInput.AzureActiveDirectoryTenantId != nil {
		azureActiveDirectoryTenantId := *typedInput.AzureActiveDirectoryTenantId
		properties.AzureActiveDirectoryTenantId = &azureActiveDirectoryTenantId
	}

	// Set property ‘EndpointUrl’:
	if typedInput.EndpointUrl != nil {
		endpointUrl := *typedInput.EndpointUrl
		properties.EndpointUrl = &endpointUrl
	}

	// Set property ‘MaxEventsPerBatch’:
	if typedInput.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *typedInput.MaxEventsPerBatch
		properties.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if typedInput.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *typedInput.PreferredBatchSizeInKilobytes
		properties.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// No error
	return nil
}

// AssignProperties_From_WebHookEventSubscriptionDestinationProperties populates our WebHookEventSubscriptionDestinationProperties from the provided source WebHookEventSubscriptionDestinationProperties
func (properties *WebHookEventSubscriptionDestinationProperties) AssignProperties_From_WebHookEventSubscriptionDestinationProperties(source *alpha20200601s.WebHookEventSubscriptionDestinationProperties) error {

	// AzureActiveDirectoryApplicationIdOrUri
	properties.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(source.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	properties.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(source.AzureActiveDirectoryTenantId)

	// EndpointUrl
	properties.EndpointUrl = genruntime.ClonePointerToString(source.EndpointUrl)

	// MaxEventsPerBatch
	properties.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	properties.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// No error
	return nil
}

// AssignProperties_To_WebHookEventSubscriptionDestinationProperties populates the provided destination WebHookEventSubscriptionDestinationProperties from our WebHookEventSubscriptionDestinationProperties
func (properties *WebHookEventSubscriptionDestinationProperties) AssignProperties_To_WebHookEventSubscriptionDestinationProperties(destination *alpha20200601s.WebHookEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureActiveDirectoryApplicationIdOrUri
	destination.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(properties.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	destination.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(properties.AzureActiveDirectoryTenantId)

	// EndpointUrl
	destination.EndpointUrl = genruntime.ClonePointerToString(properties.EndpointUrl)

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(properties.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(properties.PreferredBatchSizeInKilobytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AdvancedFilter_BoolEquals_OperatorType. Use v1beta20200601.AdvancedFilter_BoolEquals_OperatorType
// instead
// +kubebuilder:validation:Enum={"BoolEquals"}
type AdvancedFilter_BoolEquals_OperatorType string

const AdvancedFilter_BoolEquals_OperatorType_BoolEquals = AdvancedFilter_BoolEquals_OperatorType("BoolEquals")

// Deprecated version of AdvancedFilter_NumberGreaterThan_OperatorType. Use
// v1beta20200601.AdvancedFilter_NumberGreaterThan_OperatorType instead
// +kubebuilder:validation:Enum={"NumberGreaterThan"}
type AdvancedFilter_NumberGreaterThan_OperatorType string

const AdvancedFilter_NumberGreaterThan_OperatorType_NumberGreaterThan = AdvancedFilter_NumberGreaterThan_OperatorType("NumberGreaterThan")

// Deprecated version of AdvancedFilter_NumberGreaterThanOrEquals_OperatorType. Use
// v1beta20200601.AdvancedFilter_NumberGreaterThanOrEquals_OperatorType instead
// +kubebuilder:validation:Enum={"NumberGreaterThanOrEquals"}
type AdvancedFilter_NumberGreaterThanOrEquals_OperatorType string

const AdvancedFilter_NumberGreaterThanOrEquals_OperatorType_NumberGreaterThanOrEquals = AdvancedFilter_NumberGreaterThanOrEquals_OperatorType("NumberGreaterThanOrEquals")

// Deprecated version of AdvancedFilter_NumberIn_OperatorType. Use v1beta20200601.AdvancedFilter_NumberIn_OperatorType
// instead
// +kubebuilder:validation:Enum={"NumberIn"}
type AdvancedFilter_NumberIn_OperatorType string

const AdvancedFilter_NumberIn_OperatorType_NumberIn = AdvancedFilter_NumberIn_OperatorType("NumberIn")

// Deprecated version of AdvancedFilter_NumberLessThan_OperatorType. Use
// v1beta20200601.AdvancedFilter_NumberLessThan_OperatorType instead
// +kubebuilder:validation:Enum={"NumberLessThan"}
type AdvancedFilter_NumberLessThan_OperatorType string

const AdvancedFilter_NumberLessThan_OperatorType_NumberLessThan = AdvancedFilter_NumberLessThan_OperatorType("NumberLessThan")

// Deprecated version of AdvancedFilter_NumberLessThanOrEquals_OperatorType. Use
// v1beta20200601.AdvancedFilter_NumberLessThanOrEquals_OperatorType instead
// +kubebuilder:validation:Enum={"NumberLessThanOrEquals"}
type AdvancedFilter_NumberLessThanOrEquals_OperatorType string

const AdvancedFilter_NumberLessThanOrEquals_OperatorType_NumberLessThanOrEquals = AdvancedFilter_NumberLessThanOrEquals_OperatorType("NumberLessThanOrEquals")

// Deprecated version of AdvancedFilter_NumberNotIn_OperatorType. Use
// v1beta20200601.AdvancedFilter_NumberNotIn_OperatorType instead
// +kubebuilder:validation:Enum={"NumberNotIn"}
type AdvancedFilter_NumberNotIn_OperatorType string

const AdvancedFilter_NumberNotIn_OperatorType_NumberNotIn = AdvancedFilter_NumberNotIn_OperatorType("NumberNotIn")

// Deprecated version of AdvancedFilter_StringBeginsWith_OperatorType. Use
// v1beta20200601.AdvancedFilter_StringBeginsWith_OperatorType instead
// +kubebuilder:validation:Enum={"StringBeginsWith"}
type AdvancedFilter_StringBeginsWith_OperatorType string

const AdvancedFilter_StringBeginsWith_OperatorType_StringBeginsWith = AdvancedFilter_StringBeginsWith_OperatorType("StringBeginsWith")

// Deprecated version of AdvancedFilter_StringContains_OperatorType. Use
// v1beta20200601.AdvancedFilter_StringContains_OperatorType instead
// +kubebuilder:validation:Enum={"StringContains"}
type AdvancedFilter_StringContains_OperatorType string

const AdvancedFilter_StringContains_OperatorType_StringContains = AdvancedFilter_StringContains_OperatorType("StringContains")

// Deprecated version of AdvancedFilter_StringEndsWith_OperatorType. Use
// v1beta20200601.AdvancedFilter_StringEndsWith_OperatorType instead
// +kubebuilder:validation:Enum={"StringEndsWith"}
type AdvancedFilter_StringEndsWith_OperatorType string

const AdvancedFilter_StringEndsWith_OperatorType_StringEndsWith = AdvancedFilter_StringEndsWith_OperatorType("StringEndsWith")

// Deprecated version of AdvancedFilter_StringIn_OperatorType. Use v1beta20200601.AdvancedFilter_StringIn_OperatorType
// instead
// +kubebuilder:validation:Enum={"StringIn"}
type AdvancedFilter_StringIn_OperatorType string

const AdvancedFilter_StringIn_OperatorType_StringIn = AdvancedFilter_StringIn_OperatorType("StringIn")

// Deprecated version of AdvancedFilter_StringNotIn_OperatorType. Use
// v1beta20200601.AdvancedFilter_StringNotIn_OperatorType instead
// +kubebuilder:validation:Enum={"StringNotIn"}
type AdvancedFilter_StringNotIn_OperatorType string

const AdvancedFilter_StringNotIn_OperatorType_StringNotIn = AdvancedFilter_StringNotIn_OperatorType("StringNotIn")

func init() {
	SchemeBuilder.Register(&EventSubscription{}, &EventSubscriptionList{})
}
