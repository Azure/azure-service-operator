// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Domain_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Domain_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomain_StatusARM, Domain_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomain_StatusARM runs a test to see if a specific instance of Domain_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomain_StatusARM(subject Domain_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Domain_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Domain_StatusARM instances for property testing - lazily instantiated by Domain_StatusARMGenerator()
var domain_statusARMGenerator gopter.Gen

// Domain_StatusARMGenerator returns a generator of Domain_StatusARM instances for property testing.
// We first initialize domain_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Domain_StatusARMGenerator() gopter.Gen {
	if domain_statusARMGenerator != nil {
		return domain_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomain_StatusARM(generators)
	domain_statusARMGenerator = gen.Struct(reflect.TypeOf(Domain_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomain_StatusARM(generators)
	AddRelatedPropertyGeneratorsForDomain_StatusARM(generators)
	domain_statusARMGenerator = gen.Struct(reflect.TypeOf(Domain_StatusARM{}), generators)

	return domain_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDomain_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomain_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDomain_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomain_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DomainProperties_StatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_DomainProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainProperties_StatusARM, DomainProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainProperties_StatusARM runs a test to see if a specific instance of DomainProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainProperties_StatusARM(subject DomainProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainProperties_StatusARM instances for property testing - lazily instantiated by
//DomainProperties_StatusARMGenerator()
var domainProperties_statusARMGenerator gopter.Gen

// DomainProperties_StatusARMGenerator returns a generator of DomainProperties_StatusARM instances for property testing.
// We first initialize domainProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DomainProperties_StatusARMGenerator() gopter.Gen {
	if domainProperties_statusARMGenerator != nil {
		return domainProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainProperties_StatusARM(generators)
	domainProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForDomainProperties_StatusARM(generators)
	domainProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_StatusARM{}), generators)

	return domainProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
	gens["InputSchema"] = gen.PtrOf(gen.AlphaString())
	gens["MetricResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDomainProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomainProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["InboundIpRules"] = gen.SliceOf(InboundIpRule_StatusARMGenerator())
	gens["InputSchemaMapping"] = gen.PtrOf(InputSchemaMapping_StatusARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARMGenerator())
}

func Test_SystemData_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_StatusARM, SystemData_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_StatusARM runs a test to see if a specific instance of SystemData_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_StatusARM(subject SystemData_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_StatusARM instances for property testing - lazily instantiated by
//SystemData_StatusARMGenerator()
var systemData_statusARMGenerator gopter.Gen

// SystemData_StatusARMGenerator returns a generator of SystemData_StatusARM instances for property testing.
func SystemData_StatusARMGenerator() gopter.Gen {
	if systemData_statusARMGenerator != nil {
		return systemData_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_StatusARM(generators)
	systemData_statusARMGenerator = gen.Struct(reflect.TypeOf(SystemData_StatusARM{}), generators)

	return systemData_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_StatusARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.AlphaString())
}

func Test_InboundIpRule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundIpRule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundIpRule_StatusARM, InboundIpRule_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundIpRule_StatusARM runs a test to see if a specific instance of InboundIpRule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundIpRule_StatusARM(subject InboundIpRule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundIpRule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundIpRule_StatusARM instances for property testing - lazily instantiated by
//InboundIpRule_StatusARMGenerator()
var inboundIpRule_statusARMGenerator gopter.Gen

// InboundIpRule_StatusARMGenerator returns a generator of InboundIpRule_StatusARM instances for property testing.
func InboundIpRule_StatusARMGenerator() gopter.Gen {
	if inboundIpRule_statusARMGenerator != nil {
		return inboundIpRule_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundIpRule_StatusARM(generators)
	inboundIpRule_statusARMGenerator = gen.Struct(reflect.TypeOf(InboundIpRule_StatusARM{}), generators)

	return inboundIpRule_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundIpRule_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundIpRule_StatusARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.AlphaString())
	gens["IpMask"] = gen.PtrOf(gen.AlphaString())
}

func Test_InputSchemaMapping_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InputSchemaMapping_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInputSchemaMapping_StatusARM, InputSchemaMapping_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInputSchemaMapping_StatusARM runs a test to see if a specific instance of InputSchemaMapping_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInputSchemaMapping_StatusARM(subject InputSchemaMapping_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InputSchemaMapping_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InputSchemaMapping_StatusARM instances for property testing - lazily instantiated by
//InputSchemaMapping_StatusARMGenerator()
var inputSchemaMapping_statusARMGenerator gopter.Gen

// InputSchemaMapping_StatusARMGenerator returns a generator of InputSchemaMapping_StatusARM instances for property testing.
func InputSchemaMapping_StatusARMGenerator() gopter.Gen {
	if inputSchemaMapping_statusARMGenerator != nil {
		return inputSchemaMapping_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInputSchemaMapping_StatusARM(generators)
	inputSchemaMapping_statusARMGenerator = gen.Struct(reflect.TypeOf(InputSchemaMapping_StatusARM{}), generators)

	return inputSchemaMapping_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForInputSchemaMapping_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInputSchemaMapping_StatusARM(gens map[string]gopter.Gen) {
	gens["InputSchemaMappingType"] = gen.AlphaString()
}

func Test_PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM, PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM(subject PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARMGenerator()
var privateEndpointConnection_status_domain_subResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM instances for property testing.
func PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnection_status_domain_subResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnection_status_domain_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM(generators)
	privateEndpointConnection_status_domain_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnection_status_domain_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_Domain_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
