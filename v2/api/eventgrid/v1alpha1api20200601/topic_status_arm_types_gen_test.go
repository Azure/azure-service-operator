// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Topic_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Topic_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTopic_STATUSARM, Topic_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTopic_STATUSARM runs a test to see if a specific instance of Topic_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTopic_STATUSARM(subject Topic_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Topic_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Topic_STATUSARM instances for property testing - lazily instantiated by Topic_STATUSARMGenerator()
var topic_STATUSARMGenerator gopter.Gen

// Topic_STATUSARMGenerator returns a generator of Topic_STATUSARM instances for property testing.
// We first initialize topic_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Topic_STATUSARMGenerator() gopter.Gen {
	if topic_STATUSARMGenerator != nil {
		return topic_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopic_STATUSARM(generators)
	topic_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Topic_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopic_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForTopic_STATUSARM(generators)
	topic_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Topic_STATUSARM{}), generators)

	return topic_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTopic_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTopic_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForTopic_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTopic_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(TopicProperties_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_TopicProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TopicProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTopicProperties_STATUSARM, TopicProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTopicProperties_STATUSARM runs a test to see if a specific instance of TopicProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTopicProperties_STATUSARM(subject TopicProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TopicProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TopicProperties_STATUSARM instances for property testing - lazily instantiated by
// TopicProperties_STATUSARMGenerator()
var topicProperties_STATUSARMGenerator gopter.Gen

// TopicProperties_STATUSARMGenerator returns a generator of TopicProperties_STATUSARM instances for property testing.
// We first initialize topicProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TopicProperties_STATUSARMGenerator() gopter.Gen {
	if topicProperties_STATUSARMGenerator != nil {
		return topicProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicProperties_STATUSARM(generators)
	topicProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(TopicProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForTopicProperties_STATUSARM(generators)
	topicProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(TopicProperties_STATUSARM{}), generators)

	return topicProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTopicProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTopicProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
	gens["InputSchema"] = gen.PtrOf(gen.OneConstOf(TopicProperties_STATUS_InputSchema_CloudEventSchemaV1_0, TopicProperties_STATUS_InputSchema_CustomEventSchema, TopicProperties_STATUS_InputSchema_EventGridSchema))
	gens["MetricResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		TopicProperties_STATUS_ProvisioningState_Canceled,
		TopicProperties_STATUS_ProvisioningState_Creating,
		TopicProperties_STATUS_ProvisioningState_Deleting,
		TopicProperties_STATUS_ProvisioningState_Failed,
		TopicProperties_STATUS_ProvisioningState_Succeeded,
		TopicProperties_STATUS_ProvisioningState_Updating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(TopicProperties_STATUS_PublicNetworkAccess_Disabled, TopicProperties_STATUS_PublicNetworkAccess_Enabled))
}

// AddRelatedPropertyGeneratorsForTopicProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTopicProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["InboundIpRules"] = gen.SliceOf(InboundIpRule_STATUSARMGenerator())
	gens["InputSchemaMapping"] = gen.PtrOf(InputSchemaMapping_STATUSARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator())
}

func Test_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM, PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM(subject PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator()
var privateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM instances for property testing.
func PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM(generators)
	privateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
