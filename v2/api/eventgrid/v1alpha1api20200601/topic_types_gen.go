// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/resourceDefinitions/topics
type Topic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Topics_Spec  `json:"spec,omitempty"`
	Status            Topic_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Topic{}

// GetConditions returns the conditions of the resource
func (topic *Topic) GetConditions() conditions.Conditions {
	return topic.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (topic *Topic) SetConditions(conditions conditions.Conditions) {
	topic.Status.Conditions = conditions
}

var _ conversion.Convertible = &Topic{}

// ConvertFrom populates our Topic from the provided hub Topic
func (topic *Topic) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200601storage.Topic)
	if !ok {
		return fmt.Errorf("expected storage:eventgrid/v1alpha1api20200601storage/Topic but received %T instead", hub)
	}

	return topic.AssignPropertiesFromTopic(source)
}

// ConvertTo populates the provided hub Topic from our Topic
func (topic *Topic) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200601storage.Topic)
	if !ok {
		return fmt.Errorf("expected storage:eventgrid/v1alpha1api20200601storage/Topic but received %T instead", hub)
	}

	return topic.AssignPropertiesToTopic(destination)
}

// +kubebuilder:webhook:path=/mutate-eventgrid-azure-com-v1alpha1api20200601-topic,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=topics,verbs=create;update,versions=v1alpha1api20200601,name=default.v1alpha1api20200601.topics.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Topic{}

// Default applies defaults to the Topic resource
func (topic *Topic) Default() {
	topic.defaultImpl()
	var temp interface{} = topic
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (topic *Topic) defaultAzureName() {
	if topic.Spec.AzureName == "" {
		topic.Spec.AzureName = topic.Name
	}
}

// defaultImpl applies the code generated defaults to the Topic resource
func (topic *Topic) defaultImpl() { topic.defaultAzureName() }

var _ genruntime.KubernetesResource = &Topic{}

// AzureName returns the Azure name of the resource
func (topic *Topic) AzureName() string {
	return topic.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (topic Topic) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (topic *Topic) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (topic *Topic) GetSpec() genruntime.ConvertibleSpec {
	return &topic.Spec
}

// GetStatus returns the status of this resource
func (topic *Topic) GetStatus() genruntime.ConvertibleStatus {
	return &topic.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/topics"
func (topic *Topic) GetType() string {
	return "Microsoft.EventGrid/topics"
}

// NewEmptyStatus returns a new empty (blank) status
func (topic *Topic) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Topic_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (topic *Topic) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(topic.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: topic.Namespace,
		Name:      topic.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (topic *Topic) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Topic_Status); ok {
		topic.Status = *st
		return nil
	}

	// Convert status to required version
	var st Topic_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	topic.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventgrid-azure-com-v1alpha1api20200601-topic,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=topics,verbs=create;update,versions=v1alpha1api20200601,name=validate.v1alpha1api20200601.topics.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Topic{}

// ValidateCreate validates the creation of the resource
func (topic *Topic) ValidateCreate() error {
	validations := topic.createValidations()
	var temp interface{} = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (topic *Topic) ValidateDelete() error {
	validations := topic.deleteValidations()
	var temp interface{} = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (topic *Topic) ValidateUpdate(old runtime.Object) error {
	validations := topic.updateValidations()
	var temp interface{} = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (topic *Topic) createValidations() []func() error {
	return []func() error{topic.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (topic *Topic) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (topic *Topic) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return topic.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (topic *Topic) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&topic.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromTopic populates our Topic from the provided source Topic
func (topic *Topic) AssignPropertiesFromTopic(source *v1alpha1api20200601storage.Topic) error {

	// ObjectMeta
	topic.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Topics_Spec
	err := spec.AssignPropertiesFromTopicsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromTopicsSpec()")
	}
	topic.Spec = spec

	// Status
	var status Topic_Status
	err = status.AssignPropertiesFromTopicStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromTopicStatus()")
	}
	topic.Status = status

	// No error
	return nil
}

// AssignPropertiesToTopic populates the provided destination Topic from our Topic
func (topic *Topic) AssignPropertiesToTopic(destination *v1alpha1api20200601storage.Topic) error {

	// ObjectMeta
	destination.ObjectMeta = *topic.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200601storage.Topics_Spec
	err := topic.Spec.AssignPropertiesToTopicsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToTopicsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20200601storage.Topic_Status
	err = topic.Status.AssignPropertiesToTopicStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToTopicStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (topic *Topic) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: topic.Spec.OriginalVersion(),
		Kind:    "Topic",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/resourceDefinitions/topics
type TopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Topic `json:"items"`
}

type Topic_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Endpoint: Endpoint for the topic.
	Endpoint *string `json:"endpoint,omitempty"`

	//Id: Fully qualified identifier of the resource.
	Id *string `json:"id,omitempty"`

	//InboundIpRules: This can be used to restrict traffic from specific IPs instead
	//of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
	InboundIpRules []InboundIpRule_Status `json:"inboundIpRules,omitempty"`

	//InputSchema: This determines the format that Event Grid should expect for
	//incoming events published to the topic.
	InputSchema *TopicPropertiesStatusInputSchema `json:"inputSchema,omitempty"`

	//InputSchemaMapping: This enables publishing using custom event schemas. An
	//InputSchemaMapping can be specified to map various properties of a source schema
	//to various required properties of the EventGridEvent schema.
	InputSchemaMapping *InputSchemaMapping_Status `json:"inputSchemaMapping,omitempty"`

	//Location: Location of the resource.
	Location *string `json:"location,omitempty"`

	//MetricResourceId: Metric resource id for the topic.
	MetricResourceId *string `json:"metricResourceId,omitempty"`

	//Name: Name of the resource.
	Name                       *string                                                      `json:"name,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_Status_Topic_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Provisioning state of the topic.
	ProvisioningState *TopicPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//PublicNetworkAccess: This determines if traffic is allowed over public network.
	//By default it is enabled.
	//You can further restrict to specific IPs by configuring <seealso
	//cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules"
	///>
	PublicNetworkAccess *TopicPropertiesStatusPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//SystemData: The system metadata relating to Topic resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Tags: Tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Topic_Status{}

// ConvertStatusFrom populates our Topic_Status from the provided source
func (topicStatus *Topic_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20200601storage.Topic_Status)
	if ok {
		// Populate our instance from source
		return topicStatus.AssignPropertiesFromTopicStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.Topic_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = topicStatus.AssignPropertiesFromTopicStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Topic_Status
func (topicStatus *Topic_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20200601storage.Topic_Status)
	if ok {
		// Populate destination from our instance
		return topicStatus.AssignPropertiesToTopicStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.Topic_Status{}
	err := topicStatus.AssignPropertiesToTopicStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Topic_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (topicStatus *Topic_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Topic_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (topicStatus *Topic_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Topic_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Topic_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Endpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Endpoint != nil {
			endpoint := *typedInput.Properties.Endpoint
			topicStatus.Endpoint = &endpoint
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		topicStatus.Id = &id
	}

	// Set property ‘InboundIpRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.InboundIpRules {
			var item1 InboundIpRule_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			topicStatus.InboundIpRules = append(topicStatus.InboundIpRules, item1)
		}
	}

	// Set property ‘InputSchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchema != nil {
			inputSchema := *typedInput.Properties.InputSchema
			topicStatus.InputSchema = &inputSchema
		}
	}

	// Set property ‘InputSchemaMapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchemaMapping != nil {
			var inputSchemaMapping1 InputSchemaMapping_Status
			err := inputSchemaMapping1.PopulateFromARM(owner, *typedInput.Properties.InputSchemaMapping)
			if err != nil {
				return err
			}
			inputSchemaMapping := inputSchemaMapping1
			topicStatus.InputSchemaMapping = &inputSchemaMapping
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		topicStatus.Location = &location
	}

	// Set property ‘MetricResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MetricResourceId != nil {
			metricResourceId := *typedInput.Properties.MetricResourceId
			topicStatus.MetricResourceId = &metricResourceId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		topicStatus.Name = &name
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_Topic_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			topicStatus.PrivateEndpointConnections = append(topicStatus.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			topicStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			topicStatus.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		topicStatus.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		topicStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			topicStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		topicStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromTopicStatus populates our Topic_Status from the provided source Topic_Status
func (topicStatus *Topic_Status) AssignPropertiesFromTopicStatus(source *v1alpha1api20200601storage.Topic_Status) error {

	// Conditions
	topicStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Endpoint
	topicStatus.Endpoint = genruntime.ClonePointerToString(source.Endpoint)

	// Id
	topicStatus.Id = genruntime.ClonePointerToString(source.Id)

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule_Status, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule_Status
			err := inboundIpRule.AssignPropertiesFromInboundIpRuleStatus(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "populating InboundIpRules from InboundIpRules, calling AssignPropertiesFromInboundIpRuleStatus()")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		topicStatus.InboundIpRules = inboundIpRuleList
	} else {
		topicStatus.InboundIpRules = nil
	}

	// InputSchema
	if source.InputSchema != nil {
		inputSchema := TopicPropertiesStatusInputSchema(*source.InputSchema)
		topicStatus.InputSchema = &inputSchema
	} else {
		topicStatus.InputSchema = nil
	}

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping_Status
		err := inputSchemaMapping.AssignPropertiesFromInputSchemaMappingStatus(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "populating InputSchemaMapping from InputSchemaMapping, calling AssignPropertiesFromInputSchemaMappingStatus()")
		}
		topicStatus.InputSchemaMapping = &inputSchemaMapping
	} else {
		topicStatus.InputSchemaMapping = nil
	}

	// Location
	topicStatus.Location = genruntime.ClonePointerToString(source.Location)

	// MetricResourceId
	topicStatus.MetricResourceId = genruntime.ClonePointerToString(source.MetricResourceId)

	// Name
	topicStatus.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_Topic_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_Topic_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusTopicSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesFromPrivateEndpointConnectionStatusTopicSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		topicStatus.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		topicStatus.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := TopicPropertiesStatusProvisioningState(*source.ProvisioningState)
		topicStatus.ProvisioningState = &provisioningState
	} else {
		topicStatus.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := TopicPropertiesStatusPublicNetworkAccess(*source.PublicNetworkAccess)
		topicStatus.PublicNetworkAccess = &publicNetworkAccess
	} else {
		topicStatus.PublicNetworkAccess = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		topicStatus.SystemData = &systemDatum
	} else {
		topicStatus.SystemData = nil
	}

	// Tags
	topicStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	topicStatus.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToTopicStatus populates the provided destination Topic_Status from our Topic_Status
func (topicStatus *Topic_Status) AssignPropertiesToTopicStatus(destination *v1alpha1api20200601storage.Topic_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(topicStatus.Conditions)

	// Endpoint
	destination.Endpoint = genruntime.ClonePointerToString(topicStatus.Endpoint)

	// Id
	destination.Id = genruntime.ClonePointerToString(topicStatus.Id)

	// InboundIpRules
	if topicStatus.InboundIpRules != nil {
		inboundIpRuleList := make([]v1alpha1api20200601storage.InboundIpRule_Status, len(topicStatus.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range topicStatus.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v1alpha1api20200601storage.InboundIpRule_Status
			err := inboundIpRuleItem.AssignPropertiesToInboundIpRuleStatus(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "populating InboundIpRules from InboundIpRules, calling AssignPropertiesToInboundIpRuleStatus()")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	if topicStatus.InputSchema != nil {
		inputSchema := string(*topicStatus.InputSchema)
		destination.InputSchema = &inputSchema
	} else {
		destination.InputSchema = nil
	}

	// InputSchemaMapping
	if topicStatus.InputSchemaMapping != nil {
		var inputSchemaMapping v1alpha1api20200601storage.InputSchemaMapping_Status
		err := (*topicStatus.InputSchemaMapping).AssignPropertiesToInputSchemaMappingStatus(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "populating InputSchemaMapping from InputSchemaMapping, calling AssignPropertiesToInputSchemaMappingStatus()")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(topicStatus.Location)

	// MetricResourceId
	destination.MetricResourceId = genruntime.ClonePointerToString(topicStatus.MetricResourceId)

	// Name
	destination.Name = genruntime.ClonePointerToString(topicStatus.Name)

	// PrivateEndpointConnections
	if topicStatus.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20200601storage.PrivateEndpointConnection_Status_Topic_SubResourceEmbedded, len(topicStatus.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range topicStatus.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20200601storage.PrivateEndpointConnection_Status_Topic_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusTopicSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesToPrivateEndpointConnectionStatusTopicSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if topicStatus.ProvisioningState != nil {
		provisioningState := string(*topicStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if topicStatus.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*topicStatus.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// SystemData
	if topicStatus.SystemData != nil {
		var systemDatum v1alpha1api20200601storage.SystemData_Status
		err := (*topicStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(topicStatus.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(topicStatus.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type TopicsSpecAPIVersion string

const TopicsSpecAPIVersion20200601 = TopicsSpecAPIVersion("2020-06-01")

type Topics_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &Topics_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (topicsSpec *Topics_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if topicsSpec == nil {
		return nil, nil
	}
	var result Topics_SpecARM

	// Set property ‘Location’:
	result.Location = topicsSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Tags’:
	if topicsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range topicsSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (topicsSpec *Topics_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Topics_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (topicsSpec *Topics_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Topics_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Topics_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	topicsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	topicsSpec.Location = typedInput.Location

	// Set property ‘Owner’:
	topicsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		topicsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			topicsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Topics_Spec{}

// ConvertSpecFrom populates our Topics_Spec from the provided source
func (topicsSpec *Topics_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200601storage.Topics_Spec)
	if ok {
		// Populate our instance from source
		return topicsSpec.AssignPropertiesFromTopicsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.Topics_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = topicsSpec.AssignPropertiesFromTopicsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Topics_Spec
func (topicsSpec *Topics_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200601storage.Topics_Spec)
	if ok {
		// Populate destination from our instance
		return topicsSpec.AssignPropertiesToTopicsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.Topics_Spec{}
	err := topicsSpec.AssignPropertiesToTopicsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromTopicsSpec populates our Topics_Spec from the provided source Topics_Spec
func (topicsSpec *Topics_Spec) AssignPropertiesFromTopicsSpec(source *v1alpha1api20200601storage.Topics_Spec) error {

	// AzureName
	topicsSpec.AzureName = source.AzureName

	// Location
	topicsSpec.Location = genruntime.GetOptionalStringValue(source.Location)

	// Owner
	topicsSpec.Owner = source.Owner.Copy()

	// Tags
	topicsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToTopicsSpec populates the provided destination Topics_Spec from our Topics_Spec
func (topicsSpec *Topics_Spec) AssignPropertiesToTopicsSpec(destination *v1alpha1api20200601storage.Topics_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = topicsSpec.AzureName

	// Location
	location := topicsSpec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = topicsSpec.OriginalVersion()

	// Owner
	destination.Owner = topicsSpec.Owner.Copy()

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(topicsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (topicsSpec *Topics_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (topicsSpec *Topics_Spec) SetAzureName(azureName string) { topicsSpec.AzureName = azureName }

type InboundIpRule_Status struct {
	//Action: Action to perform based on the match or no match of the IpMask.
	Action *InboundIpRuleStatusAction `json:"action,omitempty"`

	//IpMask: IP Address in CIDR notation e.g., 10.0.0.0/8.
	IpMask *string `json:"ipMask,omitempty"`
}

var _ genruntime.FromARMConverter = &InboundIpRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (inboundIpRuleStatus *InboundIpRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &InboundIpRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (inboundIpRuleStatus *InboundIpRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(InboundIpRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected InboundIpRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		inboundIpRuleStatus.Action = &action
	}

	// Set property ‘IpMask’:
	if typedInput.IpMask != nil {
		ipMask := *typedInput.IpMask
		inboundIpRuleStatus.IpMask = &ipMask
	}

	// No error
	return nil
}

// AssignPropertiesFromInboundIpRuleStatus populates our InboundIpRule_Status from the provided source InboundIpRule_Status
func (inboundIpRuleStatus *InboundIpRule_Status) AssignPropertiesFromInboundIpRuleStatus(source *v1alpha1api20200601storage.InboundIpRule_Status) error {

	// Action
	if source.Action != nil {
		action := InboundIpRuleStatusAction(*source.Action)
		inboundIpRuleStatus.Action = &action
	} else {
		inboundIpRuleStatus.Action = nil
	}

	// IpMask
	inboundIpRuleStatus.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// No error
	return nil
}

// AssignPropertiesToInboundIpRuleStatus populates the provided destination InboundIpRule_Status from our InboundIpRule_Status
func (inboundIpRuleStatus *InboundIpRule_Status) AssignPropertiesToInboundIpRuleStatus(destination *v1alpha1api20200601storage.InboundIpRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if inboundIpRuleStatus.Action != nil {
		action := string(*inboundIpRuleStatus.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(inboundIpRuleStatus.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type InputSchemaMapping_Status struct {
	// +kubebuilder:validation:Required
	//InputSchemaMappingType: Type of the custom mapping
	InputSchemaMappingType InputSchemaMappingStatusInputSchemaMappingType `json:"inputSchemaMappingType"`
}

var _ genruntime.FromARMConverter = &InputSchemaMapping_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (inputSchemaMappingStatus *InputSchemaMapping_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &InputSchemaMapping_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (inputSchemaMappingStatus *InputSchemaMapping_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(InputSchemaMapping_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected InputSchemaMapping_StatusARM, got %T", armInput)
	}

	// Set property ‘InputSchemaMappingType’:
	inputSchemaMappingStatus.InputSchemaMappingType = typedInput.InputSchemaMappingType

	// No error
	return nil
}

// AssignPropertiesFromInputSchemaMappingStatus populates our InputSchemaMapping_Status from the provided source InputSchemaMapping_Status
func (inputSchemaMappingStatus *InputSchemaMapping_Status) AssignPropertiesFromInputSchemaMappingStatus(source *v1alpha1api20200601storage.InputSchemaMapping_Status) error {

	// InputSchemaMappingType
	if source.InputSchemaMappingType != nil {
		inputSchemaMappingStatus.InputSchemaMappingType = InputSchemaMappingStatusInputSchemaMappingType(*source.InputSchemaMappingType)
	} else {
		inputSchemaMappingStatus.InputSchemaMappingType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToInputSchemaMappingStatus populates the provided destination InputSchemaMapping_Status from our InputSchemaMapping_Status
func (inputSchemaMappingStatus *InputSchemaMapping_Status) AssignPropertiesToInputSchemaMappingStatus(destination *v1alpha1api20200601storage.InputSchemaMapping_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// InputSchemaMappingType
	inputSchemaMappingType := string(inputSchemaMappingStatus.InputSchemaMappingType)
	destination.InputSchemaMappingType = &inputSchemaMappingType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Status_Topic_SubResourceEmbedded struct {
	//Id: Fully qualified identifier of the resource.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_Topic_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointConnectionStatusTopicSubResourceEmbedded *PrivateEndpointConnection_Status_Topic_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_Topic_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointConnectionStatusTopicSubResourceEmbedded *PrivateEndpointConnection_Status_Topic_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_Topic_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_Topic_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointConnectionStatusTopicSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusTopicSubResourceEmbedded populates our PrivateEndpointConnection_Status_Topic_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_Topic_SubResourceEmbedded
func (privateEndpointConnectionStatusTopicSubResourceEmbedded *PrivateEndpointConnection_Status_Topic_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusTopicSubResourceEmbedded(source *v1alpha1api20200601storage.PrivateEndpointConnection_Status_Topic_SubResourceEmbedded) error {

	// Id
	privateEndpointConnectionStatusTopicSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusTopicSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_Topic_SubResourceEmbedded from our PrivateEndpointConnection_Status_Topic_SubResourceEmbedded
func (privateEndpointConnectionStatusTopicSubResourceEmbedded *PrivateEndpointConnection_Status_Topic_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusTopicSubResourceEmbedded(destination *v1alpha1api20200601storage.PrivateEndpointConnection_Status_Topic_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(privateEndpointConnectionStatusTopicSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	//CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	//CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemDataStatusCreatedByType `json:"createdByType,omitempty"`

	//LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	//LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemDataStatusLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (systemDataStatus *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (systemDataStatus *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		systemDataStatus.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		systemDataStatus.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		systemDataStatus.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		systemDataStatus.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		systemDataStatus.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		systemDataStatus.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (systemDataStatus *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *v1alpha1api20200601storage.SystemData_Status) error {

	// CreatedAt
	systemDataStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	systemDataStatus.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataStatusCreatedByType(*source.CreatedByType)
		systemDataStatus.CreatedByType = &createdByType
	} else {
		systemDataStatus.CreatedByType = nil
	}

	// LastModifiedAt
	systemDataStatus.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	systemDataStatus.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataStatusLastModifiedByType(*source.LastModifiedByType)
		systemDataStatus.LastModifiedByType = &lastModifiedByType
	} else {
		systemDataStatus.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (systemDataStatus *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *v1alpha1api20200601storage.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(systemDataStatus.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(systemDataStatus.CreatedBy)

	// CreatedByType
	if systemDataStatus.CreatedByType != nil {
		createdByType := string(*systemDataStatus.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(systemDataStatus.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(systemDataStatus.LastModifiedBy)

	// LastModifiedByType
	if systemDataStatus.LastModifiedByType != nil {
		lastModifiedByType := string(*systemDataStatus.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type TopicPropertiesStatusInputSchema string

const (
	TopicPropertiesStatusInputSchemaCloudEventSchemaV10 = TopicPropertiesStatusInputSchema("CloudEventSchemaV1_0")
	TopicPropertiesStatusInputSchemaCustomEventSchema   = TopicPropertiesStatusInputSchema("CustomEventSchema")
	TopicPropertiesStatusInputSchemaEventGridSchema     = TopicPropertiesStatusInputSchema("EventGridSchema")
)

type TopicPropertiesStatusProvisioningState string

const (
	TopicPropertiesStatusProvisioningStateCanceled  = TopicPropertiesStatusProvisioningState("Canceled")
	TopicPropertiesStatusProvisioningStateCreating  = TopicPropertiesStatusProvisioningState("Creating")
	TopicPropertiesStatusProvisioningStateDeleting  = TopicPropertiesStatusProvisioningState("Deleting")
	TopicPropertiesStatusProvisioningStateFailed    = TopicPropertiesStatusProvisioningState("Failed")
	TopicPropertiesStatusProvisioningStateSucceeded = TopicPropertiesStatusProvisioningState("Succeeded")
	TopicPropertiesStatusProvisioningStateUpdating  = TopicPropertiesStatusProvisioningState("Updating")
)

type TopicPropertiesStatusPublicNetworkAccess string

const (
	TopicPropertiesStatusPublicNetworkAccessDisabled = TopicPropertiesStatusPublicNetworkAccess("Disabled")
	TopicPropertiesStatusPublicNetworkAccessEnabled  = TopicPropertiesStatusPublicNetworkAccess("Enabled")
)

type InboundIpRuleStatusAction string

const InboundIpRuleStatusActionAllow = InboundIpRuleStatusAction("Allow")

type InputSchemaMappingStatusInputSchemaMappingType string

const InputSchemaMappingStatusInputSchemaMappingTypeJson = InputSchemaMappingStatusInputSchemaMappingType("Json")

func init() {
	SchemeBuilder.Register(&Topic{}, &TopicList{})
}
