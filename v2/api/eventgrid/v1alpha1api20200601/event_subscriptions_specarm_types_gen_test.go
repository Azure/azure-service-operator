// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EventSubscriptions_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptions_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptions_SPECARM, EventSubscriptions_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptions_SPECARM runs a test to see if a specific instance of EventSubscriptions_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptions_SPECARM(subject EventSubscriptions_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptions_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptions_SPECARM instances for property testing - lazily instantiated by
//EventSubscriptions_SPECARMGenerator()
var eventSubscriptions_specarmGenerator gopter.Gen

// EventSubscriptions_SPECARMGenerator returns a generator of EventSubscriptions_SPECARM instances for property testing.
// We first initialize eventSubscriptions_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptions_SPECARMGenerator() gopter.Gen {
	if eventSubscriptions_specarmGenerator != nil {
		return eventSubscriptions_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptions_SPECARM(generators)
	eventSubscriptions_specarmGenerator = gen.Struct(reflect.TypeOf(EventSubscriptions_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptions_SPECARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptions_SPECARM(generators)
	eventSubscriptions_specarmGenerator = gen.Struct(reflect.TypeOf(EventSubscriptions_SPECARM{}), generators)

	return eventSubscriptions_specarmGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptions_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptions_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForEventSubscriptions_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptions_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventSubscriptionProperties_SpecARMGenerator())
}

func Test_EventSubscriptionProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionProperties_SpecARM, EventSubscriptionProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionProperties_SpecARM runs a test to see if a specific instance of EventSubscriptionProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionProperties_SpecARM(subject EventSubscriptionProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionProperties_SpecARM instances for property testing - lazily instantiated by
//EventSubscriptionProperties_SpecARMGenerator()
var eventSubscriptionProperties_specARMGenerator gopter.Gen

// EventSubscriptionProperties_SpecARMGenerator returns a generator of EventSubscriptionProperties_SpecARM instances for property testing.
// We first initialize eventSubscriptionProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionProperties_SpecARMGenerator() gopter.Gen {
	if eventSubscriptionProperties_specARMGenerator != nil {
		return eventSubscriptionProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_SpecARM(generators)
	eventSubscriptionProperties_specARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionProperties_SpecARM(generators)
	eventSubscriptionProperties_specARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_SpecARM{}), generators)

	return eventSubscriptionProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["EventDeliverySchema"] = gen.PtrOf(gen.OneConstOf(EventSubscriptionProperties_EventDeliverySchema_SpecCloudEventSchemaV1_0, EventSubscriptionProperties_EventDeliverySchema_SpecCustomInputSchema, EventSubscriptionProperties_EventDeliverySchema_SpecEventGridSchema))
	gens["ExpirationTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["DeadLetterDestination"] = gen.PtrOf(DeadLetterDestination_SpecARMGenerator())
	gens["Destination"] = gen.PtrOf(EventSubscriptionDestination_SpecARMGenerator())
	gens["Filter"] = gen.PtrOf(EventSubscriptionFilter_SpecARMGenerator())
	gens["RetryPolicy"] = gen.PtrOf(RetryPolicy_SpecARMGenerator())
}

func Test_DeadLetterDestination_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeadLetterDestination_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeadLetterDestination_SpecARM, DeadLetterDestination_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeadLetterDestination_SpecARM runs a test to see if a specific instance of DeadLetterDestination_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeadLetterDestination_SpecARM(subject DeadLetterDestination_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeadLetterDestination_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeadLetterDestination_SpecARM instances for property testing - lazily instantiated by
//DeadLetterDestination_SpecARMGenerator()
var deadLetterDestination_specARMGenerator gopter.Gen

// DeadLetterDestination_SpecARMGenerator returns a generator of DeadLetterDestination_SpecARM instances for property testing.
func DeadLetterDestination_SpecARMGenerator() gopter.Gen {
	if deadLetterDestination_specARMGenerator != nil {
		return deadLetterDestination_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeadLetterDestination_SpecARM(generators)
	deadLetterDestination_specARMGenerator = gen.Struct(reflect.TypeOf(DeadLetterDestination_SpecARM{}), generators)

	return deadLetterDestination_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDeadLetterDestination_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeadLetterDestination_SpecARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(DeadLetterDestination_EndpointType_SpecStorageBlob)
}

func Test_EventSubscriptionDestination_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionDestination_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionDestination_SpecARM, EventSubscriptionDestination_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionDestination_SpecARM runs a test to see if a specific instance of EventSubscriptionDestination_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionDestination_SpecARM(subject EventSubscriptionDestination_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionDestination_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionDestination_SpecARM instances for property testing - lazily instantiated by
//EventSubscriptionDestination_SpecARMGenerator()
var eventSubscriptionDestination_specARMGenerator gopter.Gen

// EventSubscriptionDestination_SpecARMGenerator returns a generator of EventSubscriptionDestination_SpecARM instances for property testing.
func EventSubscriptionDestination_SpecARMGenerator() gopter.Gen {
	if eventSubscriptionDestination_specARMGenerator != nil {
		return eventSubscriptionDestination_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionDestination_SpecARM(generators)
	eventSubscriptionDestination_specARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionDestination_SpecARM{}), generators)

	return eventSubscriptionDestination_specARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionDestination_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionDestination_SpecARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(
		EventSubscriptionDestination_EndpointType_SpecAzureFunction,
		EventSubscriptionDestination_EndpointType_SpecEventHub,
		EventSubscriptionDestination_EndpointType_SpecHybridConnection,
		EventSubscriptionDestination_EndpointType_SpecServiceBusQueue,
		EventSubscriptionDestination_EndpointType_SpecServiceBusTopic,
		EventSubscriptionDestination_EndpointType_SpecStorageQueue,
		EventSubscriptionDestination_EndpointType_SpecWebHook)
}

func Test_EventSubscriptionFilter_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionFilter_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionFilter_SpecARM, EventSubscriptionFilter_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionFilter_SpecARM runs a test to see if a specific instance of EventSubscriptionFilter_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionFilter_SpecARM(subject EventSubscriptionFilter_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionFilter_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionFilter_SpecARM instances for property testing - lazily instantiated by
//EventSubscriptionFilter_SpecARMGenerator()
var eventSubscriptionFilter_specARMGenerator gopter.Gen

// EventSubscriptionFilter_SpecARMGenerator returns a generator of EventSubscriptionFilter_SpecARM instances for property testing.
// We first initialize eventSubscriptionFilter_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionFilter_SpecARMGenerator() gopter.Gen {
	if eventSubscriptionFilter_specARMGenerator != nil {
		return eventSubscriptionFilter_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_SpecARM(generators)
	eventSubscriptionFilter_specARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_SpecARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionFilter_SpecARM(generators)
	eventSubscriptionFilter_specARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_SpecARM{}), generators)

	return eventSubscriptionFilter_specARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionFilter_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionFilter_SpecARM(gens map[string]gopter.Gen) {
	gens["IncludedEventTypes"] = gen.SliceOf(gen.AlphaString())
	gens["IsSubjectCaseSensitive"] = gen.PtrOf(gen.Bool())
	gens["SubjectBeginsWith"] = gen.PtrOf(gen.AlphaString())
	gens["SubjectEndsWith"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionFilter_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionFilter_SpecARM(gens map[string]gopter.Gen) {
	gens["AdvancedFilters"] = gen.SliceOf(AdvancedFilter_SpecARMGenerator())
}

func Test_RetryPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetryPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetryPolicy_SpecARM, RetryPolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetryPolicy_SpecARM runs a test to see if a specific instance of RetryPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetryPolicy_SpecARM(subject RetryPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetryPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetryPolicy_SpecARM instances for property testing - lazily instantiated by
//RetryPolicy_SpecARMGenerator()
var retryPolicy_specARMGenerator gopter.Gen

// RetryPolicy_SpecARMGenerator returns a generator of RetryPolicy_SpecARM instances for property testing.
func RetryPolicy_SpecARMGenerator() gopter.Gen {
	if retryPolicy_specARMGenerator != nil {
		return retryPolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetryPolicy_SpecARM(generators)
	retryPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(RetryPolicy_SpecARM{}), generators)

	return retryPolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRetryPolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetryPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["EventTimeToLiveInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxDeliveryAttempts"] = gen.PtrOf(gen.Int())
}

func Test_AdvancedFilter_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilter_SpecARM, AdvancedFilter_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilter_SpecARM runs a test to see if a specific instance of AdvancedFilter_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilter_SpecARM(subject AdvancedFilter_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_SpecARM instances for property testing - lazily instantiated by
//AdvancedFilter_SpecARMGenerator()
var advancedFilter_specARMGenerator gopter.Gen

// AdvancedFilter_SpecARMGenerator returns a generator of AdvancedFilter_SpecARM instances for property testing.
func AdvancedFilter_SpecARMGenerator() gopter.Gen {
	if advancedFilter_specARMGenerator != nil {
		return advancedFilter_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilter_SpecARM(generators)
	advancedFilter_specARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_SpecARM{}), generators)

	return advancedFilter_specARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilter_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilter_SpecARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(
		AdvancedFilter_OperatorType_SpecBoolEquals,
		AdvancedFilter_OperatorType_SpecNumberGreaterThan,
		AdvancedFilter_OperatorType_SpecNumberGreaterThanOrEquals,
		AdvancedFilter_OperatorType_SpecNumberIn,
		AdvancedFilter_OperatorType_SpecNumberLessThan,
		AdvancedFilter_OperatorType_SpecNumberLessThanOrEquals,
		AdvancedFilter_OperatorType_SpecNumberNotIn,
		AdvancedFilter_OperatorType_SpecStringBeginsWith,
		AdvancedFilter_OperatorType_SpecStringContains,
		AdvancedFilter_OperatorType_SpecStringEndsWith,
		AdvancedFilter_OperatorType_SpecStringIn,
		AdvancedFilter_OperatorType_SpecStringNotIn)
}
