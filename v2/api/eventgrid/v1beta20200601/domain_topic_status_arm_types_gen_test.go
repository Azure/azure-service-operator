// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DomainTopic_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainTopic_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainTopic_STATUSARM, DomainTopic_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainTopic_STATUSARM runs a test to see if a specific instance of DomainTopic_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainTopic_STATUSARM(subject DomainTopic_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainTopic_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainTopic_STATUSARM instances for property testing - lazily instantiated by
// DomainTopic_STATUSARMGenerator()
var domainTopic_STATUSARMGenerator gopter.Gen

// DomainTopic_STATUSARMGenerator returns a generator of DomainTopic_STATUSARM instances for property testing.
// We first initialize domainTopic_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DomainTopic_STATUSARMGenerator() gopter.Gen {
	if domainTopic_STATUSARMGenerator != nil {
		return domainTopic_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainTopic_STATUSARM(generators)
	domainTopic_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DomainTopic_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainTopic_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDomainTopic_STATUSARM(generators)
	domainTopic_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DomainTopic_STATUSARM{}), generators)

	return domainTopic_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainTopic_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainTopic_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDomainTopic_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomainTopic_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DomainTopicProperties_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_DomainTopicProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainTopicProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainTopicProperties_STATUSARM, DomainTopicProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainTopicProperties_STATUSARM runs a test to see if a specific instance of DomainTopicProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainTopicProperties_STATUSARM(subject DomainTopicProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainTopicProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainTopicProperties_STATUSARM instances for property testing - lazily instantiated by
// DomainTopicProperties_STATUSARMGenerator()
var domainTopicProperties_STATUSARMGenerator gopter.Gen

// DomainTopicProperties_STATUSARMGenerator returns a generator of DomainTopicProperties_STATUSARM instances for property testing.
func DomainTopicProperties_STATUSARMGenerator() gopter.Gen {
	if domainTopicProperties_STATUSARMGenerator != nil {
		return domainTopicProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainTopicProperties_STATUSARM(generators)
	domainTopicProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DomainTopicProperties_STATUSARM{}), generators)

	return domainTopicProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainTopicProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainTopicProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DomainTopicProperties_STATUS_ProvisioningState_Canceled,
		DomainTopicProperties_STATUS_ProvisioningState_Creating,
		DomainTopicProperties_STATUS_ProvisioningState_Deleting,
		DomainTopicProperties_STATUS_ProvisioningState_Failed,
		DomainTopicProperties_STATUS_ProvisioningState_Succeeded,
		DomainTopicProperties_STATUS_ProvisioningState_Updating))
}

func Test_SystemData_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUSARM, SystemData_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUSARM runs a test to see if a specific instance of SystemData_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUSARM(subject SystemData_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUSARM instances for property testing - lazily instantiated by
// SystemData_STATUSARMGenerator()
var systemData_STATUSARMGenerator gopter.Gen

// SystemData_STATUSARMGenerator returns a generator of SystemData_STATUSARM instances for property testing.
func SystemData_STATUSARMGenerator() gopter.Gen {
	if systemData_STATUSARMGenerator != nil {
		return systemData_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUSARM(generators)
	systemData_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUSARM{}), generators)

	return systemData_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUSARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_STATUS_CreatedByType_Application,
		SystemData_STATUS_CreatedByType_Key,
		SystemData_STATUS_CreatedByType_ManagedIdentity,
		SystemData_STATUS_CreatedByType_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_STATUS_LastModifiedByType_Application,
		SystemData_STATUS_LastModifiedByType_Key,
		SystemData_STATUS_LastModifiedByType_ManagedIdentity,
		SystemData_STATUS_LastModifiedByType_User))
}
