// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EventSubscription_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscription_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscription_STATUSARM, EventSubscription_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscription_STATUSARM runs a test to see if a specific instance of EventSubscription_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscription_STATUSARM(subject EventSubscription_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscription_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscription_STATUSARM instances for property testing - lazily instantiated by
// EventSubscription_STATUSARMGenerator()
var eventSubscription_STATUSARMGenerator gopter.Gen

// EventSubscription_STATUSARMGenerator returns a generator of EventSubscription_STATUSARM instances for property testing.
// We first initialize eventSubscription_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscription_STATUSARMGenerator() gopter.Gen {
	if eventSubscription_STATUSARMGenerator != nil {
		return eventSubscription_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_STATUSARM(generators)
	eventSubscription_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscription_STATUSARM(generators)
	eventSubscription_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_STATUSARM{}), generators)

	return eventSubscription_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscription_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscription_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscription_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscription_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventSubscriptionProperties_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_EventSubscriptionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionProperties_STATUSARM, EventSubscriptionProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionProperties_STATUSARM runs a test to see if a specific instance of EventSubscriptionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionProperties_STATUSARM(subject EventSubscriptionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionProperties_STATUSARM instances for property testing - lazily instantiated by
// EventSubscriptionProperties_STATUSARMGenerator()
var eventSubscriptionProperties_STATUSARMGenerator gopter.Gen

// EventSubscriptionProperties_STATUSARMGenerator returns a generator of EventSubscriptionProperties_STATUSARM instances for property testing.
// We first initialize eventSubscriptionProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionProperties_STATUSARMGenerator() gopter.Gen {
	if eventSubscriptionProperties_STATUSARMGenerator != nil {
		return eventSubscriptionProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUSARM(generators)
	eventSubscriptionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionProperties_STATUSARM(generators)
	eventSubscriptionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_STATUSARM{}), generators)

	return eventSubscriptionProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["EventDeliverySchema"] = gen.PtrOf(gen.OneConstOf(EventSubscriptionProperties_STATUS_EventDeliverySchema_CloudEventSchemaV1_0, EventSubscriptionProperties_STATUS_EventDeliverySchema_CustomInputSchema, EventSubscriptionProperties_STATUS_EventDeliverySchema_EventGridSchema))
	gens["ExpirationTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionProperties_STATUS_ProvisioningState_AwaitingManualAction,
		EventSubscriptionProperties_STATUS_ProvisioningState_Canceled,
		EventSubscriptionProperties_STATUS_ProvisioningState_Creating,
		EventSubscriptionProperties_STATUS_ProvisioningState_Deleting,
		EventSubscriptionProperties_STATUS_ProvisioningState_Failed,
		EventSubscriptionProperties_STATUS_ProvisioningState_Succeeded,
		EventSubscriptionProperties_STATUS_ProvisioningState_Updating))
	gens["Topic"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["DeadLetterDestination"] = gen.PtrOf(DeadLetterDestination_STATUSARMGenerator())
	gens["Destination"] = gen.PtrOf(EventSubscriptionDestination_STATUSARMGenerator())
	gens["Filter"] = gen.PtrOf(EventSubscriptionFilter_STATUSARMGenerator())
	gens["RetryPolicy"] = gen.PtrOf(RetryPolicy_STATUSARMGenerator())
}

func Test_DeadLetterDestination_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeadLetterDestination_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeadLetterDestination_STATUSARM, DeadLetterDestination_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeadLetterDestination_STATUSARM runs a test to see if a specific instance of DeadLetterDestination_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeadLetterDestination_STATUSARM(subject DeadLetterDestination_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeadLetterDestination_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeadLetterDestination_STATUSARM instances for property testing - lazily instantiated by
// DeadLetterDestination_STATUSARMGenerator()
var deadLetterDestination_STATUSARMGenerator gopter.Gen

// DeadLetterDestination_STATUSARMGenerator returns a generator of DeadLetterDestination_STATUSARM instances for property testing.
func DeadLetterDestination_STATUSARMGenerator() gopter.Gen {
	if deadLetterDestination_STATUSARMGenerator != nil {
		return deadLetterDestination_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeadLetterDestination_STATUSARM(generators)
	deadLetterDestination_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeadLetterDestination_STATUSARM{}), generators)

	return deadLetterDestination_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeadLetterDestination_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeadLetterDestination_STATUSARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(DeadLetterDestination_STATUS_EndpointType_StorageBlob))
}

func Test_EventSubscriptionDestination_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionDestination_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionDestination_STATUSARM, EventSubscriptionDestination_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionDestination_STATUSARM runs a test to see if a specific instance of EventSubscriptionDestination_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionDestination_STATUSARM(subject EventSubscriptionDestination_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionDestination_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionDestination_STATUSARM instances for property testing - lazily instantiated by
// EventSubscriptionDestination_STATUSARMGenerator()
var eventSubscriptionDestination_STATUSARMGenerator gopter.Gen

// EventSubscriptionDestination_STATUSARMGenerator returns a generator of EventSubscriptionDestination_STATUSARM instances for property testing.
func EventSubscriptionDestination_STATUSARMGenerator() gopter.Gen {
	if eventSubscriptionDestination_STATUSARMGenerator != nil {
		return eventSubscriptionDestination_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionDestination_STATUSARM(generators)
	eventSubscriptionDestination_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionDestination_STATUSARM{}), generators)

	return eventSubscriptionDestination_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionDestination_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionDestination_STATUSARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionDestination_STATUS_EndpointType_AzureFunction,
		EventSubscriptionDestination_STATUS_EndpointType_EventHub,
		EventSubscriptionDestination_STATUS_EndpointType_HybridConnection,
		EventSubscriptionDestination_STATUS_EndpointType_ServiceBusQueue,
		EventSubscriptionDestination_STATUS_EndpointType_ServiceBusTopic,
		EventSubscriptionDestination_STATUS_EndpointType_StorageQueue,
		EventSubscriptionDestination_STATUS_EndpointType_WebHook))
}

func Test_EventSubscriptionFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionFilter_STATUSARM, EventSubscriptionFilter_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionFilter_STATUSARM runs a test to see if a specific instance of EventSubscriptionFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionFilter_STATUSARM(subject EventSubscriptionFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionFilter_STATUSARM instances for property testing - lazily instantiated by
// EventSubscriptionFilter_STATUSARMGenerator()
var eventSubscriptionFilter_STATUSARMGenerator gopter.Gen

// EventSubscriptionFilter_STATUSARMGenerator returns a generator of EventSubscriptionFilter_STATUSARM instances for property testing.
// We first initialize eventSubscriptionFilter_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionFilter_STATUSARMGenerator() gopter.Gen {
	if eventSubscriptionFilter_STATUSARMGenerator != nil {
		return eventSubscriptionFilter_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUSARM(generators)
	eventSubscriptionFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionFilter_STATUSARM(generators)
	eventSubscriptionFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_STATUSARM{}), generators)

	return eventSubscriptionFilter_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["IncludedEventTypes"] = gen.SliceOf(gen.AlphaString())
	gens["IsSubjectCaseSensitive"] = gen.PtrOf(gen.Bool())
	gens["SubjectBeginsWith"] = gen.PtrOf(gen.AlphaString())
	gens["SubjectEndsWith"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionFilter_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["AdvancedFilters"] = gen.SliceOf(AdvancedFilter_STATUSARMGenerator())
}

func Test_RetryPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetryPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetryPolicy_STATUSARM, RetryPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetryPolicy_STATUSARM runs a test to see if a specific instance of RetryPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetryPolicy_STATUSARM(subject RetryPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetryPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetryPolicy_STATUSARM instances for property testing - lazily instantiated by
// RetryPolicy_STATUSARMGenerator()
var retryPolicy_STATUSARMGenerator gopter.Gen

// RetryPolicy_STATUSARMGenerator returns a generator of RetryPolicy_STATUSARM instances for property testing.
func RetryPolicy_STATUSARMGenerator() gopter.Gen {
	if retryPolicy_STATUSARMGenerator != nil {
		return retryPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetryPolicy_STATUSARM(generators)
	retryPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RetryPolicy_STATUSARM{}), generators)

	return retryPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRetryPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetryPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["EventTimeToLiveInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxDeliveryAttempts"] = gen.PtrOf(gen.Int())
}

func Test_AdvancedFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilter_STATUSARM, AdvancedFilter_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilter_STATUSARM runs a test to see if a specific instance of AdvancedFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilter_STATUSARM(subject AdvancedFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_STATUSARM instances for property testing - lazily instantiated by
// AdvancedFilter_STATUSARMGenerator()
var advancedFilter_STATUSARMGenerator gopter.Gen

// AdvancedFilter_STATUSARMGenerator returns a generator of AdvancedFilter_STATUSARM instances for property testing.
func AdvancedFilter_STATUSARMGenerator() gopter.Gen {
	if advancedFilter_STATUSARMGenerator != nil {
		return advancedFilter_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilter_STATUSARM(generators)
	advancedFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_STATUSARM{}), generators)

	return advancedFilter_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilter_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.PtrOf(gen.OneConstOf(
		AdvancedFilter_STATUS_OperatorType_BoolEquals,
		AdvancedFilter_STATUS_OperatorType_NumberGreaterThan,
		AdvancedFilter_STATUS_OperatorType_NumberGreaterThanOrEquals,
		AdvancedFilter_STATUS_OperatorType_NumberIn,
		AdvancedFilter_STATUS_OperatorType_NumberLessThan,
		AdvancedFilter_STATUS_OperatorType_NumberLessThanOrEquals,
		AdvancedFilter_STATUS_OperatorType_NumberNotIn,
		AdvancedFilter_STATUS_OperatorType_StringBeginsWith,
		AdvancedFilter_STATUS_OperatorType_StringContains,
		AdvancedFilter_STATUS_OperatorType_StringEndsWith,
		AdvancedFilter_STATUS_OperatorType_StringIn,
		AdvancedFilter_STATUS_OperatorType_StringNotIn))
}
