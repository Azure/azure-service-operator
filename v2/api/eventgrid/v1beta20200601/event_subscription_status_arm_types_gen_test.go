// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EventSubscription_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscription_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionSTATUSARM, EventSubscriptionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionSTATUSARM runs a test to see if a specific instance of EventSubscription_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionSTATUSARM(subject EventSubscription_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscription_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscription_STATUSARM instances for property testing - lazily instantiated by
// EventSubscriptionSTATUSARMGenerator()
var eventSubscriptionSTATUSARMGenerator gopter.Gen

// EventSubscriptionSTATUSARMGenerator returns a generator of EventSubscription_STATUSARM instances for property testing.
// We first initialize eventSubscriptionSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionSTATUSARMGenerator() gopter.Gen {
	if eventSubscriptionSTATUSARMGenerator != nil {
		return eventSubscriptionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionSTATUSARM(generators)
	eventSubscriptionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionSTATUSARM(generators)
	eventSubscriptionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_STATUSARM{}), generators)

	return eventSubscriptionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventSubscriptionPropertiesSTATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_EventSubscriptionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionPropertiesSTATUSARM, EventSubscriptionPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionPropertiesSTATUSARM runs a test to see if a specific instance of EventSubscriptionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionPropertiesSTATUSARM(subject EventSubscriptionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionProperties_STATUSARM instances for property testing - lazily instantiated by
// EventSubscriptionPropertiesSTATUSARMGenerator()
var eventSubscriptionPropertiesSTATUSARMGenerator gopter.Gen

// EventSubscriptionPropertiesSTATUSARMGenerator returns a generator of EventSubscriptionProperties_STATUSARM instances for property testing.
// We first initialize eventSubscriptionPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionPropertiesSTATUSARMGenerator() gopter.Gen {
	if eventSubscriptionPropertiesSTATUSARMGenerator != nil {
		return eventSubscriptionPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesSTATUSARM(generators)
	eventSubscriptionPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionPropertiesSTATUSARM(generators)
	eventSubscriptionPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_STATUSARM{}), generators)

	return eventSubscriptionPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["EventDeliverySchema"] = gen.PtrOf(gen.OneConstOf(EventSubscriptionPropertiesSTATUSEventDeliverySchema_CloudEventSchemaV10, EventSubscriptionPropertiesSTATUSEventDeliverySchema_CustomInputSchema, EventSubscriptionPropertiesSTATUSEventDeliverySchema_EventGridSchema))
	gens["ExpirationTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionPropertiesSTATUSProvisioningState_AwaitingManualAction,
		EventSubscriptionPropertiesSTATUSProvisioningState_Canceled,
		EventSubscriptionPropertiesSTATUSProvisioningState_Creating,
		EventSubscriptionPropertiesSTATUSProvisioningState_Deleting,
		EventSubscriptionPropertiesSTATUSProvisioningState_Failed,
		EventSubscriptionPropertiesSTATUSProvisioningState_Succeeded,
		EventSubscriptionPropertiesSTATUSProvisioningState_Updating))
	gens["Topic"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["DeadLetterDestination"] = gen.PtrOf(DeadLetterDestinationSTATUSARMGenerator())
	gens["Destination"] = gen.PtrOf(EventSubscriptionDestinationSTATUSARMGenerator())
	gens["Filter"] = gen.PtrOf(EventSubscriptionFilterSTATUSARMGenerator())
	gens["RetryPolicy"] = gen.PtrOf(RetryPolicySTATUSARMGenerator())
}

func Test_DeadLetterDestination_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeadLetterDestination_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeadLetterDestinationSTATUSARM, DeadLetterDestinationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeadLetterDestinationSTATUSARM runs a test to see if a specific instance of DeadLetterDestination_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeadLetterDestinationSTATUSARM(subject DeadLetterDestination_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeadLetterDestination_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeadLetterDestination_STATUSARM instances for property testing - lazily instantiated by
// DeadLetterDestinationSTATUSARMGenerator()
var deadLetterDestinationSTATUSARMGenerator gopter.Gen

// DeadLetterDestinationSTATUSARMGenerator returns a generator of DeadLetterDestination_STATUSARM instances for property testing.
func DeadLetterDestinationSTATUSARMGenerator() gopter.Gen {
	if deadLetterDestinationSTATUSARMGenerator != nil {
		return deadLetterDestinationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeadLetterDestinationSTATUSARM(generators)
	deadLetterDestinationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeadLetterDestination_STATUSARM{}), generators)

	return deadLetterDestinationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeadLetterDestinationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeadLetterDestinationSTATUSARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(DeadLetterDestinationSTATUSEndpointType_StorageBlob))
}

func Test_EventSubscriptionDestination_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionDestination_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionDestinationSTATUSARM, EventSubscriptionDestinationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionDestinationSTATUSARM runs a test to see if a specific instance of EventSubscriptionDestination_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionDestinationSTATUSARM(subject EventSubscriptionDestination_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionDestination_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionDestination_STATUSARM instances for property testing - lazily instantiated by
// EventSubscriptionDestinationSTATUSARMGenerator()
var eventSubscriptionDestinationSTATUSARMGenerator gopter.Gen

// EventSubscriptionDestinationSTATUSARMGenerator returns a generator of EventSubscriptionDestination_STATUSARM instances for property testing.
func EventSubscriptionDestinationSTATUSARMGenerator() gopter.Gen {
	if eventSubscriptionDestinationSTATUSARMGenerator != nil {
		return eventSubscriptionDestinationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionDestinationSTATUSARM(generators)
	eventSubscriptionDestinationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionDestination_STATUSARM{}), generators)

	return eventSubscriptionDestinationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionDestinationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionDestinationSTATUSARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionDestinationSTATUSEndpointType_AzureFunction,
		EventSubscriptionDestinationSTATUSEndpointType_EventHub,
		EventSubscriptionDestinationSTATUSEndpointType_HybridConnection,
		EventSubscriptionDestinationSTATUSEndpointType_ServiceBusQueue,
		EventSubscriptionDestinationSTATUSEndpointType_ServiceBusTopic,
		EventSubscriptionDestinationSTATUSEndpointType_StorageQueue,
		EventSubscriptionDestinationSTATUSEndpointType_WebHook))
}

func Test_EventSubscriptionFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionFilterSTATUSARM, EventSubscriptionFilterSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionFilterSTATUSARM runs a test to see if a specific instance of EventSubscriptionFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionFilterSTATUSARM(subject EventSubscriptionFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionFilter_STATUSARM instances for property testing - lazily instantiated by
// EventSubscriptionFilterSTATUSARMGenerator()
var eventSubscriptionFilterSTATUSARMGenerator gopter.Gen

// EventSubscriptionFilterSTATUSARMGenerator returns a generator of EventSubscriptionFilter_STATUSARM instances for property testing.
// We first initialize eventSubscriptionFilterSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionFilterSTATUSARMGenerator() gopter.Gen {
	if eventSubscriptionFilterSTATUSARMGenerator != nil {
		return eventSubscriptionFilterSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilterSTATUSARM(generators)
	eventSubscriptionFilterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilterSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionFilterSTATUSARM(generators)
	eventSubscriptionFilterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_STATUSARM{}), generators)

	return eventSubscriptionFilterSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionFilterSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionFilterSTATUSARM(gens map[string]gopter.Gen) {
	gens["IncludedEventTypes"] = gen.SliceOf(gen.AlphaString())
	gens["IsSubjectCaseSensitive"] = gen.PtrOf(gen.Bool())
	gens["SubjectBeginsWith"] = gen.PtrOf(gen.AlphaString())
	gens["SubjectEndsWith"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionFilterSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionFilterSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdvancedFilters"] = gen.SliceOf(AdvancedFilterSTATUSARMGenerator())
}

func Test_RetryPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetryPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetryPolicySTATUSARM, RetryPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetryPolicySTATUSARM runs a test to see if a specific instance of RetryPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetryPolicySTATUSARM(subject RetryPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetryPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetryPolicy_STATUSARM instances for property testing - lazily instantiated by
// RetryPolicySTATUSARMGenerator()
var retryPolicySTATUSARMGenerator gopter.Gen

// RetryPolicySTATUSARMGenerator returns a generator of RetryPolicy_STATUSARM instances for property testing.
func RetryPolicySTATUSARMGenerator() gopter.Gen {
	if retryPolicySTATUSARMGenerator != nil {
		return retryPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetryPolicySTATUSARM(generators)
	retryPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(RetryPolicy_STATUSARM{}), generators)

	return retryPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRetryPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetryPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["EventTimeToLiveInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxDeliveryAttempts"] = gen.PtrOf(gen.Int())
}

func Test_AdvancedFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterSTATUSARM, AdvancedFilterSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterSTATUSARM runs a test to see if a specific instance of AdvancedFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterSTATUSARM(subject AdvancedFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_STATUSARM instances for property testing - lazily instantiated by
// AdvancedFilterSTATUSARMGenerator()
var advancedFilterSTATUSARMGenerator gopter.Gen

// AdvancedFilterSTATUSARMGenerator returns a generator of AdvancedFilter_STATUSARM instances for property testing.
func AdvancedFilterSTATUSARMGenerator() gopter.Gen {
	if advancedFilterSTATUSARMGenerator != nil {
		return advancedFilterSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterSTATUSARM(generators)
	advancedFilterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_STATUSARM{}), generators)

	return advancedFilterSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterSTATUSARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.PtrOf(gen.OneConstOf(
		AdvancedFilterSTATUSOperatorType_BoolEquals,
		AdvancedFilterSTATUSOperatorType_NumberGreaterThan,
		AdvancedFilterSTATUSOperatorType_NumberGreaterThanOrEquals,
		AdvancedFilterSTATUSOperatorType_NumberIn,
		AdvancedFilterSTATUSOperatorType_NumberLessThan,
		AdvancedFilterSTATUSOperatorType_NumberLessThanOrEquals,
		AdvancedFilterSTATUSOperatorType_NumberNotIn,
		AdvancedFilterSTATUSOperatorType_StringBeginsWith,
		AdvancedFilterSTATUSOperatorType_StringContains,
		AdvancedFilterSTATUSOperatorType_StringEndsWith,
		AdvancedFilterSTATUSOperatorType_StringIn,
		AdvancedFilterSTATUSOperatorType_StringNotIn))
}
