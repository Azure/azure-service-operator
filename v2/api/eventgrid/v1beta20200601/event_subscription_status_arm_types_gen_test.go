// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EventSubscription_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscription_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscription_STATUS_ARM, EventSubscription_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscription_STATUS_ARM runs a test to see if a specific instance of EventSubscription_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscription_STATUS_ARM(subject EventSubscription_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscription_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscription_STATUS_ARM instances for property testing - lazily instantiated by
// EventSubscription_STATUS_ARMGenerator()
var eventSubscription_STATUS_ARMGenerator gopter.Gen

// EventSubscription_STATUS_ARMGenerator returns a generator of EventSubscription_STATUS_ARM instances for property testing.
// We first initialize eventSubscription_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscription_STATUS_ARMGenerator() gopter.Gen {
	if eventSubscription_STATUS_ARMGenerator != nil {
		return eventSubscription_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_STATUS_ARM(generators)
	eventSubscription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscription_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscription_STATUS_ARM(generators)
	eventSubscription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscription_STATUS_ARM{}), generators)

	return eventSubscription_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscription_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscription_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventSubscriptionProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_EventSubscriptionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionProperties_STATUS_ARM, EventSubscriptionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionProperties_STATUS_ARM runs a test to see if a specific instance of EventSubscriptionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionProperties_STATUS_ARM(subject EventSubscriptionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EventSubscriptionProperties_STATUS_ARMGenerator()
var eventSubscriptionProperties_STATUS_ARMGenerator gopter.Gen

// EventSubscriptionProperties_STATUS_ARMGenerator returns a generator of EventSubscriptionProperties_STATUS_ARM instances for property testing.
// We first initialize eventSubscriptionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionProperties_STATUS_ARMGenerator() gopter.Gen {
	if eventSubscriptionProperties_STATUS_ARMGenerator != nil {
		return eventSubscriptionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUS_ARM(generators)
	eventSubscriptionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionProperties_STATUS_ARM(generators)
	eventSubscriptionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionProperties_STATUS_ARM{}), generators)

	return eventSubscriptionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EventDeliverySchema"] = gen.PtrOf(gen.OneConstOf(EventSubscriptionProperties_EventDeliverySchema_STATUS_CloudEventSchemaV1_0, EventSubscriptionProperties_EventDeliverySchema_STATUS_CustomInputSchema, EventSubscriptionProperties_EventDeliverySchema_STATUS_EventGridSchema))
	gens["ExpirationTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionProperties_ProvisioningState_STATUS_AwaitingManualAction,
		EventSubscriptionProperties_ProvisioningState_STATUS_Canceled,
		EventSubscriptionProperties_ProvisioningState_STATUS_Creating,
		EventSubscriptionProperties_ProvisioningState_STATUS_Deleting,
		EventSubscriptionProperties_ProvisioningState_STATUS_Failed,
		EventSubscriptionProperties_ProvisioningState_STATUS_Succeeded,
		EventSubscriptionProperties_ProvisioningState_STATUS_Updating))
	gens["Topic"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeadLetterDestination"] = gen.PtrOf(DeadLetterDestination_STATUS_ARMGenerator())
	gens["Destination"] = gen.PtrOf(EventSubscriptionDestination_STATUS_ARMGenerator())
	gens["Filter"] = gen.PtrOf(EventSubscriptionFilter_STATUS_ARMGenerator())
	gens["RetryPolicy"] = gen.PtrOf(RetryPolicy_STATUS_ARMGenerator())
}

func Test_DeadLetterDestination_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeadLetterDestination_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeadLetterDestination_STATUS_ARM, DeadLetterDestination_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeadLetterDestination_STATUS_ARM runs a test to see if a specific instance of DeadLetterDestination_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeadLetterDestination_STATUS_ARM(subject DeadLetterDestination_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeadLetterDestination_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeadLetterDestination_STATUS_ARM instances for property testing - lazily instantiated by
// DeadLetterDestination_STATUS_ARMGenerator()
var deadLetterDestination_STATUS_ARMGenerator gopter.Gen

// DeadLetterDestination_STATUS_ARMGenerator returns a generator of DeadLetterDestination_STATUS_ARM instances for property testing.
func DeadLetterDestination_STATUS_ARMGenerator() gopter.Gen {
	if deadLetterDestination_STATUS_ARMGenerator != nil {
		return deadLetterDestination_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeadLetterDestination_STATUS_ARM(generators)
	deadLetterDestination_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeadLetterDestination_STATUS_ARM{}), generators)

	return deadLetterDestination_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeadLetterDestination_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeadLetterDestination_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(DeadLetterDestination_EndpointType_STATUS_StorageBlob))
}

func Test_EventSubscriptionDestination_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionDestination_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionDestination_STATUS_ARM, EventSubscriptionDestination_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionDestination_STATUS_ARM runs a test to see if a specific instance of EventSubscriptionDestination_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionDestination_STATUS_ARM(subject EventSubscriptionDestination_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionDestination_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionDestination_STATUS_ARM instances for property testing - lazily instantiated by
// EventSubscriptionDestination_STATUS_ARMGenerator()
var eventSubscriptionDestination_STATUS_ARMGenerator gopter.Gen

// EventSubscriptionDestination_STATUS_ARMGenerator returns a generator of EventSubscriptionDestination_STATUS_ARM instances for property testing.
func EventSubscriptionDestination_STATUS_ARMGenerator() gopter.Gen {
	if eventSubscriptionDestination_STATUS_ARMGenerator != nil {
		return eventSubscriptionDestination_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionDestination_STATUS_ARM(generators)
	eventSubscriptionDestination_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionDestination_STATUS_ARM{}), generators)

	return eventSubscriptionDestination_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionDestination_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionDestination_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.PtrOf(gen.OneConstOf(
		EventSubscriptionDestination_EndpointType_STATUS_AzureFunction,
		EventSubscriptionDestination_EndpointType_STATUS_EventHub,
		EventSubscriptionDestination_EndpointType_STATUS_HybridConnection,
		EventSubscriptionDestination_EndpointType_STATUS_ServiceBusQueue,
		EventSubscriptionDestination_EndpointType_STATUS_ServiceBusTopic,
		EventSubscriptionDestination_EndpointType_STATUS_StorageQueue,
		EventSubscriptionDestination_EndpointType_STATUS_WebHook))
}

func Test_EventSubscriptionFilter_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionFilter_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionFilter_STATUS_ARM, EventSubscriptionFilter_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionFilter_STATUS_ARM runs a test to see if a specific instance of EventSubscriptionFilter_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionFilter_STATUS_ARM(subject EventSubscriptionFilter_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionFilter_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionFilter_STATUS_ARM instances for property testing - lazily instantiated by
// EventSubscriptionFilter_STATUS_ARMGenerator()
var eventSubscriptionFilter_STATUS_ARMGenerator gopter.Gen

// EventSubscriptionFilter_STATUS_ARMGenerator returns a generator of EventSubscriptionFilter_STATUS_ARM instances for property testing.
// We first initialize eventSubscriptionFilter_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionFilter_STATUS_ARMGenerator() gopter.Gen {
	if eventSubscriptionFilter_STATUS_ARMGenerator != nil {
		return eventSubscriptionFilter_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUS_ARM(generators)
	eventSubscriptionFilter_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionFilter_STATUS_ARM(generators)
	eventSubscriptionFilter_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilter_STATUS_ARM{}), generators)

	return eventSubscriptionFilter_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionFilter_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IncludedEventTypes"] = gen.SliceOf(gen.AlphaString())
	gens["IsSubjectCaseSensitive"] = gen.PtrOf(gen.Bool())
	gens["SubjectBeginsWith"] = gen.PtrOf(gen.AlphaString())
	gens["SubjectEndsWith"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionFilter_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionFilter_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdvancedFilters"] = gen.SliceOf(AdvancedFilter_STATUS_ARMGenerator())
}

func Test_RetryPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetryPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetryPolicy_STATUS_ARM, RetryPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetryPolicy_STATUS_ARM runs a test to see if a specific instance of RetryPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetryPolicy_STATUS_ARM(subject RetryPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetryPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetryPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// RetryPolicy_STATUS_ARMGenerator()
var retryPolicy_STATUS_ARMGenerator gopter.Gen

// RetryPolicy_STATUS_ARMGenerator returns a generator of RetryPolicy_STATUS_ARM instances for property testing.
func RetryPolicy_STATUS_ARMGenerator() gopter.Gen {
	if retryPolicy_STATUS_ARMGenerator != nil {
		return retryPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetryPolicy_STATUS_ARM(generators)
	retryPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RetryPolicy_STATUS_ARM{}), generators)

	return retryPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRetryPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetryPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EventTimeToLiveInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxDeliveryAttempts"] = gen.PtrOf(gen.Int())
}

func Test_AdvancedFilter_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilter_STATUS_ARM, AdvancedFilter_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilter_STATUS_ARM runs a test to see if a specific instance of AdvancedFilter_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilter_STATUS_ARM(subject AdvancedFilter_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_STATUS_ARM instances for property testing - lazily instantiated by
// AdvancedFilter_STATUS_ARMGenerator()
var advancedFilter_STATUS_ARMGenerator gopter.Gen

// AdvancedFilter_STATUS_ARMGenerator returns a generator of AdvancedFilter_STATUS_ARM instances for property testing.
func AdvancedFilter_STATUS_ARMGenerator() gopter.Gen {
	if advancedFilter_STATUS_ARMGenerator != nil {
		return advancedFilter_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilter_STATUS_ARM(generators)
	advancedFilter_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_STATUS_ARM{}), generators)

	return advancedFilter_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilter_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilter_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.PtrOf(gen.OneConstOf(
		AdvancedFilter_OperatorType_STATUS_BoolEquals,
		AdvancedFilter_OperatorType_STATUS_NumberGreaterThan,
		AdvancedFilter_OperatorType_STATUS_NumberGreaterThanOrEquals,
		AdvancedFilter_OperatorType_STATUS_NumberIn,
		AdvancedFilter_OperatorType_STATUS_NumberLessThan,
		AdvancedFilter_OperatorType_STATUS_NumberLessThanOrEquals,
		AdvancedFilter_OperatorType_STATUS_NumberNotIn,
		AdvancedFilter_OperatorType_STATUS_StringBeginsWith,
		AdvancedFilter_OperatorType_STATUS_StringContains,
		AdvancedFilter_OperatorType_STATUS_StringEndsWith,
		AdvancedFilter_OperatorType_STATUS_StringIn,
		AdvancedFilter_OperatorType_STATUS_StringNotIn))
}
