// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DomainsTopic_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainsTopic_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainsTopic_SpecARM, DomainsTopic_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainsTopic_SpecARM runs a test to see if a specific instance of DomainsTopic_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainsTopic_SpecARM(subject DomainsTopic_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainsTopic_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainsTopic_SpecARM instances for property testing - lazily instantiated by
// DomainsTopic_SpecARMGenerator()
var domainsTopic_SpecARMGenerator gopter.Gen

// DomainsTopic_SpecARMGenerator returns a generator of DomainsTopic_SpecARM instances for property testing.
func DomainsTopic_SpecARMGenerator() gopter.Gen {
	if domainsTopic_SpecARMGenerator != nil {
		return domainsTopic_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainsTopic_SpecARM(generators)
	domainsTopic_SpecARMGenerator = gen.Struct(reflect.TypeOf(DomainsTopic_SpecARM{}), generators)

	return domainsTopic_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainsTopic_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainsTopic_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}
