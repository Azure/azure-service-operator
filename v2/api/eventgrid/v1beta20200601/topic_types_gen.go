// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"fmt"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1beta20200601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /eventgrid/resource-manager/Microsoft.EventGrid/stable/2020-06-01/EventGrid.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}
type Topic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Topic_Spec   `json:"spec,omitempty"`
	Status            Topic_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Topic{}

// GetConditions returns the conditions of the resource
func (topic *Topic) GetConditions() conditions.Conditions {
	return topic.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (topic *Topic) SetConditions(conditions conditions.Conditions) {
	topic.Status.Conditions = conditions
}

var _ conversion.Convertible = &Topic{}

// ConvertFrom populates our Topic from the provided hub Topic
func (topic *Topic) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200601s.Topic)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Topic but received %T instead", hub)
	}

	return topic.AssignProperties_From_Topic(source)
}

// ConvertTo populates the provided hub Topic from our Topic
func (topic *Topic) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200601s.Topic)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Topic but received %T instead", hub)
	}

	return topic.AssignProperties_To_Topic(destination)
}

// +kubebuilder:webhook:path=/mutate-eventgrid-azure-com-v1beta20200601-topic,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=topics,verbs=create;update,versions=v1beta20200601,name=default.v1beta20200601.topics.eventgrid.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Topic{}

// Default applies defaults to the Topic resource
func (topic *Topic) Default() {
	topic.defaultImpl()
	var temp any = topic
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (topic *Topic) defaultAzureName() {
	if topic.Spec.AzureName == "" {
		topic.Spec.AzureName = topic.Name
	}
}

// defaultImpl applies the code generated defaults to the Topic resource
func (topic *Topic) defaultImpl() { topic.defaultAzureName() }

var _ genruntime.KubernetesResource = &Topic{}

// AzureName returns the Azure name of the resource
func (topic *Topic) AzureName() string {
	return topic.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (topic Topic) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (topic *Topic) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (topic *Topic) GetSpec() genruntime.ConvertibleSpec {
	return &topic.Spec
}

// GetStatus returns the status of this resource
func (topic *Topic) GetStatus() genruntime.ConvertibleStatus {
	return &topic.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/topics"
func (topic *Topic) GetType() string {
	return "Microsoft.EventGrid/topics"
}

// NewEmptyStatus returns a new empty (blank) status
func (topic *Topic) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Topic_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (topic *Topic) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(topic.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  topic.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (topic *Topic) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Topic_STATUS); ok {
		topic.Status = *st
		return nil
	}

	// Convert status to required version
	var st Topic_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	topic.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventgrid-azure-com-v1beta20200601-topic,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventgrid.azure.com,resources=topics,verbs=create;update,versions=v1beta20200601,name=validate.v1beta20200601.topics.eventgrid.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Topic{}

// ValidateCreate validates the creation of the resource
func (topic *Topic) ValidateCreate() error {
	validations := topic.createValidations()
	var temp any = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (topic *Topic) ValidateDelete() error {
	validations := topic.deleteValidations()
	var temp any = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (topic *Topic) ValidateUpdate(old runtime.Object) error {
	validations := topic.updateValidations()
	var temp any = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (topic *Topic) createValidations() []func() error {
	return []func() error{topic.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (topic *Topic) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (topic *Topic) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return topic.validateResourceReferences()
		},
		topic.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (topic *Topic) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&topic.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (topic *Topic) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Topic)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, topic)
}

// AssignProperties_From_Topic populates our Topic from the provided source Topic
func (topic *Topic) AssignProperties_From_Topic(source *v20200601s.Topic) error {

	// ObjectMeta
	topic.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Topic_Spec
	err := spec.AssignProperties_From_Topic_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Topic_Spec() to populate field Spec")
	}
	topic.Spec = spec

	// Status
	var status Topic_STATUS
	err = status.AssignProperties_From_Topic_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Topic_STATUS() to populate field Status")
	}
	topic.Status = status

	// No error
	return nil
}

// AssignProperties_To_Topic populates the provided destination Topic from our Topic
func (topic *Topic) AssignProperties_To_Topic(destination *v20200601s.Topic) error {

	// ObjectMeta
	destination.ObjectMeta = *topic.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200601s.Topic_Spec
	err := topic.Spec.AssignProperties_To_Topic_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Topic_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200601s.Topic_STATUS
	err = topic.Status.AssignProperties_To_Topic_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Topic_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (topic *Topic) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: topic.Spec.OriginalVersion(),
		Kind:    "Topic",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /eventgrid/resource-manager/Microsoft.EventGrid/stable/2020-06-01/EventGrid.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}
type TopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Topic `json:"items"`
}

type Topic_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// InboundIpRules: This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered
	// only if PublicNetworkAccess is enabled.
	InboundIpRules []InboundIpRule `json:"inboundIpRules,omitempty"`

	// InputSchema: This determines the format that Event Grid should expect for incoming events published to the topic.
	InputSchema *TopicProperties_InputSchema `json:"inputSchema,omitempty"`

	// InputSchemaMapping: This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map
	// various properties of a source schema to various required properties of the EventGridEvent schema.
	InputSchemaMapping *InputSchemaMapping `json:"inputSchemaMapping,omitempty"`

	// +kubebuilder:validation:Required
	// Location: Location of the resource.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// PublicNetworkAccess: This determines if traffic is allowed over public network. By default it is enabled.
	// You can further restrict to specific IPs by configuring <seealso
	// cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
	PublicNetworkAccess *TopicProperties_PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// Tags: Tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &Topic_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (topic *Topic_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if topic == nil {
		return nil, nil
	}
	result := &Topic_Spec_ARM{}

	// Set property ‘Location’:
	if topic.Location != nil {
		location := *topic.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if topic.InboundIpRules != nil ||
		topic.InputSchema != nil ||
		topic.InputSchemaMapping != nil ||
		topic.PublicNetworkAccess != nil {
		result.Properties = &TopicProperties_ARM{}
	}
	for _, item := range topic.InboundIpRules {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.InboundIpRules = append(result.Properties.InboundIpRules, *item_ARM.(*InboundIpRule_ARM))
	}
	if topic.InputSchema != nil {
		inputSchema := *topic.InputSchema
		result.Properties.InputSchema = &inputSchema
	}
	if topic.InputSchemaMapping != nil {
		inputSchemaMapping_ARM, err := (*topic.InputSchemaMapping).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		inputSchemaMapping := *inputSchemaMapping_ARM.(*InputSchemaMapping_ARM)
		result.Properties.InputSchemaMapping = &inputSchemaMapping
	}
	if topic.PublicNetworkAccess != nil {
		publicNetworkAccess := *topic.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if topic.Tags != nil {
		result.Tags = make(map[string]string, len(topic.Tags))
		for key, value := range topic.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (topic *Topic_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Topic_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (topic *Topic_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Topic_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Topic_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	topic.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘InboundIpRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.InboundIpRules {
			var item1 InboundIpRule
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			topic.InboundIpRules = append(topic.InboundIpRules, item1)
		}
	}

	// Set property ‘InputSchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchema != nil {
			inputSchema := *typedInput.Properties.InputSchema
			topic.InputSchema = &inputSchema
		}
	}

	// Set property ‘InputSchemaMapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchemaMapping != nil {
			var inputSchemaMapping1 InputSchemaMapping
			err := inputSchemaMapping1.PopulateFromARM(owner, *typedInput.Properties.InputSchemaMapping)
			if err != nil {
				return err
			}
			inputSchemaMapping := inputSchemaMapping1
			topic.InputSchemaMapping = &inputSchemaMapping
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		topic.Location = &location
	}

	// Set property ‘Owner’:
	topic.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			topic.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		topic.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			topic.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Topic_Spec{}

// ConvertSpecFrom populates our Topic_Spec from the provided source
func (topic *Topic_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200601s.Topic_Spec)
	if ok {
		// Populate our instance from source
		return topic.AssignProperties_From_Topic_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Topic_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = topic.AssignProperties_From_Topic_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Topic_Spec
func (topic *Topic_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200601s.Topic_Spec)
	if ok {
		// Populate destination from our instance
		return topic.AssignProperties_To_Topic_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Topic_Spec{}
	err := topic.AssignProperties_To_Topic_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Topic_Spec populates our Topic_Spec from the provided source Topic_Spec
func (topic *Topic_Spec) AssignProperties_From_Topic_Spec(source *v20200601s.Topic_Spec) error {

	// AzureName
	topic.AzureName = source.AzureName

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule
			err := inboundIpRule.AssignProperties_From_InboundIpRule(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_InboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		topic.InboundIpRules = inboundIpRuleList
	} else {
		topic.InboundIpRules = nil
	}

	// InputSchema
	if source.InputSchema != nil {
		inputSchema := TopicProperties_InputSchema(*source.InputSchema)
		topic.InputSchema = &inputSchema
	} else {
		topic.InputSchema = nil
	}

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping
		err := inputSchemaMapping.AssignProperties_From_InputSchemaMapping(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_InputSchemaMapping() to populate field InputSchemaMapping")
		}
		topic.InputSchemaMapping = &inputSchemaMapping
	} else {
		topic.InputSchemaMapping = nil
	}

	// Location
	topic.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		topic.Owner = &owner
	} else {
		topic.Owner = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := TopicProperties_PublicNetworkAccess(*source.PublicNetworkAccess)
		topic.PublicNetworkAccess = &publicNetworkAccess
	} else {
		topic.PublicNetworkAccess = nil
	}

	// Tags
	topic.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_Topic_Spec populates the provided destination Topic_Spec from our Topic_Spec
func (topic *Topic_Spec) AssignProperties_To_Topic_Spec(destination *v20200601s.Topic_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = topic.AzureName

	// InboundIpRules
	if topic.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule, len(topic.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range topic.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule
			err := inboundIpRuleItem.AssignProperties_To_InboundIpRule(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_InboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	if topic.InputSchema != nil {
		inputSchema := string(*topic.InputSchema)
		destination.InputSchema = &inputSchema
	} else {
		destination.InputSchema = nil
	}

	// InputSchemaMapping
	if topic.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.InputSchemaMapping
		err := topic.InputSchemaMapping.AssignProperties_To_InputSchemaMapping(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_InputSchemaMapping() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(topic.Location)

	// OriginalVersion
	destination.OriginalVersion = topic.OriginalVersion()

	// Owner
	if topic.Owner != nil {
		owner := topic.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	if topic.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*topic.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(topic.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (topic *Topic_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (topic *Topic_Spec) SetAzureName(azureName string) { topic.AzureName = azureName }

// EventGrid Topic
type Topic_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Endpoint: Endpoint for the topic.
	Endpoint *string `json:"endpoint,omitempty"`

	// Id: Fully qualified identifier of the resource.
	Id *string `json:"id,omitempty"`

	// InboundIpRules: This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered
	// only if PublicNetworkAccess is enabled.
	InboundIpRules []InboundIpRule_STATUS `json:"inboundIpRules,omitempty"`

	// InputSchema: This determines the format that Event Grid should expect for incoming events published to the topic.
	InputSchema *TopicProperties_InputSchema_STATUS `json:"inputSchema,omitempty"`

	// InputSchemaMapping: This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map
	// various properties of a source schema to various required properties of the EventGridEvent schema.
	InputSchemaMapping *InputSchemaMapping_STATUS `json:"inputSchemaMapping,omitempty"`

	// Location: Location of the resource.
	Location *string `json:"location,omitempty"`

	// MetricResourceId: Metric resource id for the topic.
	MetricResourceId *string `json:"metricResourceId,omitempty"`

	// Name: Name of the resource.
	Name                       *string                                                      `json:"name,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	// ProvisioningState: Provisioning state of the topic.
	ProvisioningState *TopicProperties_ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// PublicNetworkAccess: This determines if traffic is allowed over public network. By default it is enabled.
	// You can further restrict to specific IPs by configuring <seealso
	// cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
	PublicNetworkAccess *TopicProperties_PublicNetworkAccess_STATUS `json:"publicNetworkAccess,omitempty"`

	// SystemData: The system metadata relating to Topic resource.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Tags: Tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Topic_STATUS{}

// ConvertStatusFrom populates our Topic_STATUS from the provided source
func (topic *Topic_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200601s.Topic_STATUS)
	if ok {
		// Populate our instance from source
		return topic.AssignProperties_From_Topic_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Topic_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = topic.AssignProperties_From_Topic_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Topic_STATUS
func (topic *Topic_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200601s.Topic_STATUS)
	if ok {
		// Populate destination from our instance
		return topic.AssignProperties_To_Topic_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Topic_STATUS{}
	err := topic.AssignProperties_To_Topic_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Topic_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (topic *Topic_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Topic_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (topic *Topic_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Topic_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Topic_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Endpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Endpoint != nil {
			endpoint := *typedInput.Properties.Endpoint
			topic.Endpoint = &endpoint
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		topic.Id = &id
	}

	// Set property ‘InboundIpRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.InboundIpRules {
			var item1 InboundIpRule_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			topic.InboundIpRules = append(topic.InboundIpRules, item1)
		}
	}

	// Set property ‘InputSchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchema != nil {
			inputSchema := *typedInput.Properties.InputSchema
			topic.InputSchema = &inputSchema
		}
	}

	// Set property ‘InputSchemaMapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InputSchemaMapping != nil {
			var inputSchemaMapping1 InputSchemaMapping_STATUS
			err := inputSchemaMapping1.PopulateFromARM(owner, *typedInput.Properties.InputSchemaMapping)
			if err != nil {
				return err
			}
			inputSchemaMapping := inputSchemaMapping1
			topic.InputSchemaMapping = &inputSchemaMapping
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		topic.Location = &location
	}

	// Set property ‘MetricResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MetricResourceId != nil {
			metricResourceId := *typedInput.Properties.MetricResourceId
			topic.MetricResourceId = &metricResourceId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		topic.Name = &name
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			topic.PrivateEndpointConnections = append(topic.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			topic.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			topic.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		topic.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		topic.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			topic.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		topic.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Topic_STATUS populates our Topic_STATUS from the provided source Topic_STATUS
func (topic *Topic_STATUS) AssignProperties_From_Topic_STATUS(source *v20200601s.Topic_STATUS) error {

	// Conditions
	topic.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Endpoint
	topic.Endpoint = genruntime.ClonePointerToString(source.Endpoint)

	// Id
	topic.Id = genruntime.ClonePointerToString(source.Id)

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule_STATUS, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule_STATUS
			err := inboundIpRule.AssignProperties_From_InboundIpRule_STATUS(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_InboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		topic.InboundIpRules = inboundIpRuleList
	} else {
		topic.InboundIpRules = nil
	}

	// InputSchema
	if source.InputSchema != nil {
		inputSchema := TopicProperties_InputSchema_STATUS(*source.InputSchema)
		topic.InputSchema = &inputSchema
	} else {
		topic.InputSchema = nil
	}

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping_STATUS
		err := inputSchemaMapping.AssignProperties_From_InputSchemaMapping_STATUS(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_InputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		topic.InputSchemaMapping = &inputSchemaMapping
	} else {
		topic.InputSchemaMapping = nil
	}

	// Location
	topic.Location = genruntime.ClonePointerToString(source.Location)

	// MetricResourceId
	topic.MetricResourceId = genruntime.ClonePointerToString(source.MetricResourceId)

	// Name
	topic.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded
			err := privateEndpointConnection.AssignProperties_From_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		topic.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		topic.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := TopicProperties_ProvisioningState_STATUS(*source.ProvisioningState)
		topic.ProvisioningState = &provisioningState
	} else {
		topic.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := TopicProperties_PublicNetworkAccess_STATUS(*source.PublicNetworkAccess)
		topic.PublicNetworkAccess = &publicNetworkAccess
	} else {
		topic.PublicNetworkAccess = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		topic.SystemData = &systemDatum
	} else {
		topic.SystemData = nil
	}

	// Tags
	topic.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	topic.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Topic_STATUS populates the provided destination Topic_STATUS from our Topic_STATUS
func (topic *Topic_STATUS) AssignProperties_To_Topic_STATUS(destination *v20200601s.Topic_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(topic.Conditions)

	// Endpoint
	destination.Endpoint = genruntime.ClonePointerToString(topic.Endpoint)

	// Id
	destination.Id = genruntime.ClonePointerToString(topic.Id)

	// InboundIpRules
	if topic.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule_STATUS, len(topic.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range topic.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule_STATUS
			err := inboundIpRuleItem.AssignProperties_To_InboundIpRule_STATUS(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_InboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	if topic.InputSchema != nil {
		inputSchema := string(*topic.InputSchema)
		destination.InputSchema = &inputSchema
	} else {
		destination.InputSchema = nil
	}

	// InputSchemaMapping
	if topic.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.InputSchemaMapping_STATUS
		err := topic.InputSchemaMapping.AssignProperties_To_InputSchemaMapping_STATUS(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_InputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(topic.Location)

	// MetricResourceId
	destination.MetricResourceId = genruntime.ClonePointerToString(topic.MetricResourceId)

	// Name
	destination.Name = genruntime.ClonePointerToString(topic.Name)

	// PrivateEndpointConnections
	if topic.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20200601s.PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded, len(topic.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range topic.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20200601s.PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignProperties_To_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if topic.ProvisioningState != nil {
		provisioningState := string(*topic.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if topic.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*topic.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// SystemData
	if topic.SystemData != nil {
		var systemDatum v20200601s.SystemData_STATUS
		err := topic.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(topic.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(topic.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded struct {
	// Id: Fully qualified identifier of the resource.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded populates our PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded from the provided source PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded) AssignProperties_From_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded(source *v20200601s.PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded populates the provided destination PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded from our PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded) AssignProperties_To_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded(destination *v20200601s.PrivateEndpointConnection_STATUS_Topic_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"CloudEventSchemaV1_0","CustomEventSchema","EventGridSchema"}
type TopicProperties_InputSchema string

const (
	TopicProperties_InputSchema_CloudEventSchemaV1_0 = TopicProperties_InputSchema("CloudEventSchemaV1_0")
	TopicProperties_InputSchema_CustomEventSchema    = TopicProperties_InputSchema("CustomEventSchema")
	TopicProperties_InputSchema_EventGridSchema      = TopicProperties_InputSchema("EventGridSchema")
)

type TopicProperties_InputSchema_STATUS string

const (
	TopicProperties_InputSchema_STATUS_CloudEventSchemaV1_0 = TopicProperties_InputSchema_STATUS("CloudEventSchemaV1_0")
	TopicProperties_InputSchema_STATUS_CustomEventSchema    = TopicProperties_InputSchema_STATUS("CustomEventSchema")
	TopicProperties_InputSchema_STATUS_EventGridSchema      = TopicProperties_InputSchema_STATUS("EventGridSchema")
)

type TopicProperties_ProvisioningState_STATUS string

const (
	TopicProperties_ProvisioningState_STATUS_Canceled  = TopicProperties_ProvisioningState_STATUS("Canceled")
	TopicProperties_ProvisioningState_STATUS_Creating  = TopicProperties_ProvisioningState_STATUS("Creating")
	TopicProperties_ProvisioningState_STATUS_Deleting  = TopicProperties_ProvisioningState_STATUS("Deleting")
	TopicProperties_ProvisioningState_STATUS_Failed    = TopicProperties_ProvisioningState_STATUS("Failed")
	TopicProperties_ProvisioningState_STATUS_Succeeded = TopicProperties_ProvisioningState_STATUS("Succeeded")
	TopicProperties_ProvisioningState_STATUS_Updating  = TopicProperties_ProvisioningState_STATUS("Updating")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type TopicProperties_PublicNetworkAccess string

const (
	TopicProperties_PublicNetworkAccess_Disabled = TopicProperties_PublicNetworkAccess("Disabled")
	TopicProperties_PublicNetworkAccess_Enabled  = TopicProperties_PublicNetworkAccess("Enabled")
)

type TopicProperties_PublicNetworkAccess_STATUS string

const (
	TopicProperties_PublicNetworkAccess_STATUS_Disabled = TopicProperties_PublicNetworkAccess_STATUS("Disabled")
	TopicProperties_PublicNetworkAccess_STATUS_Enabled  = TopicProperties_PublicNetworkAccess_STATUS("Enabled")
)

func init() {
	SchemeBuilder.Register(&Topic{}, &TopicList{})
}
