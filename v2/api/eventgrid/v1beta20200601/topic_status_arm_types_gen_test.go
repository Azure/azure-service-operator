// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Topic_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Topic_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTopicSTATUSARM, TopicSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTopicSTATUSARM runs a test to see if a specific instance of Topic_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTopicSTATUSARM(subject Topic_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Topic_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Topic_STATUSARM instances for property testing - lazily instantiated by TopicSTATUSARMGenerator()
var topicSTATUSARMGenerator gopter.Gen

// TopicSTATUSARMGenerator returns a generator of Topic_STATUSARM instances for property testing.
// We first initialize topicSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TopicSTATUSARMGenerator() gopter.Gen {
	if topicSTATUSARMGenerator != nil {
		return topicSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicSTATUSARM(generators)
	topicSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Topic_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForTopicSTATUSARM(generators)
	topicSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Topic_STATUSARM{}), generators)

	return topicSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTopicSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTopicSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForTopicSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTopicSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(TopicPropertiesSTATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_TopicProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TopicProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTopicPropertiesSTATUSARM, TopicPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTopicPropertiesSTATUSARM runs a test to see if a specific instance of TopicProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTopicPropertiesSTATUSARM(subject TopicProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TopicProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TopicProperties_STATUSARM instances for property testing - lazily instantiated by
// TopicPropertiesSTATUSARMGenerator()
var topicPropertiesSTATUSARMGenerator gopter.Gen

// TopicPropertiesSTATUSARMGenerator returns a generator of TopicProperties_STATUSARM instances for property testing.
// We first initialize topicPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TopicPropertiesSTATUSARMGenerator() gopter.Gen {
	if topicPropertiesSTATUSARMGenerator != nil {
		return topicPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicPropertiesSTATUSARM(generators)
	topicPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(TopicProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForTopicPropertiesSTATUSARM(generators)
	topicPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(TopicProperties_STATUSARM{}), generators)

	return topicPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTopicPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTopicPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
	gens["InputSchema"] = gen.PtrOf(gen.OneConstOf(TopicPropertiesSTATUSInputSchema_CloudEventSchemaV10, TopicPropertiesSTATUSInputSchema_CustomEventSchema, TopicPropertiesSTATUSInputSchema_EventGridSchema))
	gens["MetricResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		TopicPropertiesSTATUSProvisioningState_Canceled,
		TopicPropertiesSTATUSProvisioningState_Creating,
		TopicPropertiesSTATUSProvisioningState_Deleting,
		TopicPropertiesSTATUSProvisioningState_Failed,
		TopicPropertiesSTATUSProvisioningState_Succeeded,
		TopicPropertiesSTATUSProvisioningState_Updating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(TopicPropertiesSTATUSPublicNetworkAccess_Disabled, TopicPropertiesSTATUSPublicNetworkAccess_Enabled))
}

// AddRelatedPropertyGeneratorsForTopicPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTopicPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["InboundIpRules"] = gen.SliceOf(InboundIpRuleSTATUSARMGenerator())
	gens["InputSchemaMapping"] = gen.PtrOf(InputSchemaMappingSTATUSARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator())
}

func Test_PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARM, PrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARM(subject PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator()
var privateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM instances for property testing.
func PrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARM(generators)
	privateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_Topic_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnectionSTATUSTopicSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSTopicSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
