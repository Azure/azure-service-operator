// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601storage

import (
	"fmt"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1beta20200601storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20200601.EventSubscription
// Deprecated version of EventSubscription. Use v1beta20200601.EventSubscription instead
type EventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSubscription_Spec   `json:"spec,omitempty"`
	Status            EventSubscription_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &EventSubscription{}

// GetConditions returns the conditions of the resource
func (subscription *EventSubscription) GetConditions() conditions.Conditions {
	return subscription.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (subscription *EventSubscription) SetConditions(conditions conditions.Conditions) {
	subscription.Status.Conditions = conditions
}

var _ conversion.Convertible = &EventSubscription{}

// ConvertFrom populates our EventSubscription from the provided hub EventSubscription
func (subscription *EventSubscription) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200601s.EventSubscription)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/EventSubscription but received %T instead", hub)
	}

	return subscription.AssignProperties_From_EventSubscription(source)
}

// ConvertTo populates the provided hub EventSubscription from our EventSubscription
func (subscription *EventSubscription) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200601s.EventSubscription)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/EventSubscription but received %T instead", hub)
	}

	return subscription.AssignProperties_To_EventSubscription(destination)
}

var _ genruntime.KubernetesResource = &EventSubscription{}

// AzureName returns the Azure name of the resource
func (subscription *EventSubscription) AzureName() string {
	return subscription.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (subscription EventSubscription) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (subscription *EventSubscription) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeExtension
}

// GetSpec returns the specification of this resource
func (subscription *EventSubscription) GetSpec() genruntime.ConvertibleSpec {
	return &subscription.Spec
}

// GetStatus returns the status of this resource
func (subscription *EventSubscription) GetStatus() genruntime.ConvertibleStatus {
	return &subscription.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/eventSubscriptions"
func (subscription *EventSubscription) GetType() string {
	return "Microsoft.EventGrid/eventSubscriptions"
}

// NewEmptyStatus returns a new empty (blank) status
func (subscription *EventSubscription) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EventSubscription_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (subscription *EventSubscription) Owner() *genruntime.ResourceReference {
	return &genruntime.ResourceReference{
		Group: subscription.Spec.Owner.Group,
		Kind:  subscription.Spec.Owner.Kind,
		Name:  subscription.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (subscription *EventSubscription) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EventSubscription_STATUS); ok {
		subscription.Status = *st
		return nil
	}

	// Convert status to required version
	var st EventSubscription_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	subscription.Status = st
	return nil
}

// AssignProperties_From_EventSubscription populates our EventSubscription from the provided source EventSubscription
func (subscription *EventSubscription) AssignProperties_From_EventSubscription(source *v20200601s.EventSubscription) error {

	// ObjectMeta
	subscription.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec EventSubscription_Spec
	err := spec.AssignProperties_From_EventSubscription_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_EventSubscription_Spec() to populate field Spec")
	}
	subscription.Spec = spec

	// Status
	var status EventSubscription_STATUS
	err = status.AssignProperties_From_EventSubscription_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_EventSubscription_STATUS() to populate field Status")
	}
	subscription.Status = status

	// No error
	return nil
}

// AssignProperties_To_EventSubscription populates the provided destination EventSubscription from our EventSubscription
func (subscription *EventSubscription) AssignProperties_To_EventSubscription(destination *v20200601s.EventSubscription) error {

	// ObjectMeta
	destination.ObjectMeta = *subscription.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200601s.EventSubscription_Spec
	err := subscription.Spec.AssignProperties_To_EventSubscription_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_EventSubscription_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200601s.EventSubscription_STATUS
	err = subscription.Status.AssignProperties_To_EventSubscription_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_EventSubscription_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (subscription *EventSubscription) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: subscription.Spec.OriginalVersion,
		Kind:    "EventSubscription",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20200601.EventSubscription
// Deprecated version of EventSubscription. Use v1beta20200601.EventSubscription instead
type EventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventSubscription `json:"items"`
}

// Storage version of v1alpha1api20200601.EventSubscription_Spec
type EventSubscription_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName             string                        `json:"azureName,omitempty"`
	DeadLetterDestination *DeadLetterDestination        `json:"deadLetterDestination,omitempty"`
	Destination           *EventSubscriptionDestination `json:"destination,omitempty"`
	EventDeliverySchema   *string                       `json:"eventDeliverySchema,omitempty"`
	ExpirationTimeUtc     *string                       `json:"expirationTimeUtc,omitempty"`
	Filter                *EventSubscriptionFilter      `json:"filter,omitempty"`
	Labels                []string                      `json:"labels,omitempty"`
	OriginalVersion       string                        `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. This resource is an
	// extension resource, which means that any other Azure resource can be its owner.
	Owner       *genruntime.ArbitraryOwnerReference `json:"owner,omitempty"`
	PropertyBag genruntime.PropertyBag              `json:"$propertyBag,omitempty"`
	RetryPolicy *RetryPolicy                        `json:"retryPolicy,omitempty"`
}

var _ genruntime.ConvertibleSpec = &EventSubscription_Spec{}

// ConvertSpecFrom populates our EventSubscription_Spec from the provided source
func (subscription *EventSubscription_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200601s.EventSubscription_Spec)
	if ok {
		// Populate our instance from source
		return subscription.AssignProperties_From_EventSubscription_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.EventSubscription_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = subscription.AssignProperties_From_EventSubscription_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our EventSubscription_Spec
func (subscription *EventSubscription_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200601s.EventSubscription_Spec)
	if ok {
		// Populate destination from our instance
		return subscription.AssignProperties_To_EventSubscription_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.EventSubscription_Spec{}
	err := subscription.AssignProperties_To_EventSubscription_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_EventSubscription_Spec populates our EventSubscription_Spec from the provided source EventSubscription_Spec
func (subscription *EventSubscription_Spec) AssignProperties_From_EventSubscription_Spec(source *v20200601s.EventSubscription_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	subscription.AzureName = source.AzureName

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination
		err := deadLetterDestination.AssignProperties_From_DeadLetterDestination(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeadLetterDestination() to populate field DeadLetterDestination")
		}
		subscription.DeadLetterDestination = &deadLetterDestination
	} else {
		subscription.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination
		err := destination.AssignProperties_From_EventSubscriptionDestination(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionDestination() to populate field Destination")
		}
		subscription.Destination = &destination
	} else {
		subscription.Destination = nil
	}

	// EventDeliverySchema
	subscription.EventDeliverySchema = genruntime.ClonePointerToString(source.EventDeliverySchema)

	// ExpirationTimeUtc
	subscription.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter
		err := filter.AssignProperties_From_EventSubscriptionFilter(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionFilter() to populate field Filter")
		}
		subscription.Filter = &filter
	} else {
		subscription.Filter = nil
	}

	// Labels
	subscription.Labels = genruntime.CloneSliceOfString(source.Labels)

	// OriginalVersion
	subscription.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		subscription.Owner = &owner
	} else {
		subscription.Owner = nil
	}

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy
		err := retryPolicy.AssignProperties_From_RetryPolicy(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RetryPolicy() to populate field RetryPolicy")
		}
		subscription.RetryPolicy = &retryPolicy
	} else {
		subscription.RetryPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		subscription.PropertyBag = propertyBag
	} else {
		subscription.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscription_Spec populates the provided destination EventSubscription_Spec from our EventSubscription_Spec
func (subscription *EventSubscription_Spec) AssignProperties_To_EventSubscription_Spec(destination *v20200601s.EventSubscription_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(subscription.PropertyBag)

	// AzureName
	destination.AzureName = subscription.AzureName

	// DeadLetterDestination
	if subscription.DeadLetterDestination != nil {
		var deadLetterDestination v20200601s.DeadLetterDestination
		err := subscription.DeadLetterDestination.AssignProperties_To_DeadLetterDestination(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeadLetterDestination() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if subscription.Destination != nil {
		var destinationLocal v20200601s.EventSubscriptionDestination
		err := subscription.Destination.AssignProperties_To_EventSubscriptionDestination(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionDestination() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	destination.EventDeliverySchema = genruntime.ClonePointerToString(subscription.EventDeliverySchema)

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(subscription.ExpirationTimeUtc)

	// Filter
	if subscription.Filter != nil {
		var filter v20200601s.EventSubscriptionFilter
		err := subscription.Filter.AssignProperties_To_EventSubscriptionFilter(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionFilter() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(subscription.Labels)

	// OriginalVersion
	destination.OriginalVersion = subscription.OriginalVersion

	// Owner
	if subscription.Owner != nil {
		owner := subscription.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RetryPolicy
	if subscription.RetryPolicy != nil {
		var retryPolicy v20200601s.RetryPolicy
		err := subscription.RetryPolicy.AssignProperties_To_RetryPolicy(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RetryPolicy() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscription_STATUS
// Deprecated version of EventSubscription_STATUS. Use v1beta20200601.EventSubscription_STATUS instead
type EventSubscription_STATUS struct {
	Conditions            []conditions.Condition               `json:"conditions,omitempty"`
	DeadLetterDestination *DeadLetterDestination_STATUS        `json:"deadLetterDestination,omitempty"`
	Destination           *EventSubscriptionDestination_STATUS `json:"destination,omitempty"`
	EventDeliverySchema   *string                              `json:"eventDeliverySchema,omitempty"`
	ExpirationTimeUtc     *string                              `json:"expirationTimeUtc,omitempty"`
	Filter                *EventSubscriptionFilter_STATUS      `json:"filter,omitempty"`
	Id                    *string                              `json:"id,omitempty"`
	Labels                []string                             `json:"labels,omitempty"`
	Name                  *string                              `json:"name,omitempty"`
	PropertyBag           genruntime.PropertyBag               `json:"$propertyBag,omitempty"`
	ProvisioningState     *string                              `json:"provisioningState,omitempty"`
	RetryPolicy           *RetryPolicy_STATUS                  `json:"retryPolicy,omitempty"`
	SystemData            *SystemData_STATUS                   `json:"systemData,omitempty"`
	Topic                 *string                              `json:"topic,omitempty"`
	Type                  *string                              `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EventSubscription_STATUS{}

// ConvertStatusFrom populates our EventSubscription_STATUS from the provided source
func (subscription *EventSubscription_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200601s.EventSubscription_STATUS)
	if ok {
		// Populate our instance from source
		return subscription.AssignProperties_From_EventSubscription_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.EventSubscription_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = subscription.AssignProperties_From_EventSubscription_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200601s.EventSubscription_STATUS)
	if ok {
		// Populate destination from our instance
		return subscription.AssignProperties_To_EventSubscription_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.EventSubscription_STATUS{}
	err := subscription.AssignProperties_To_EventSubscription_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignProperties_From_EventSubscription_STATUS populates our EventSubscription_STATUS from the provided source EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignProperties_From_EventSubscription_STATUS(source *v20200601s.EventSubscription_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	subscription.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination_STATUS
		err := deadLetterDestination.AssignProperties_From_DeadLetterDestination_STATUS(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeadLetterDestination_STATUS() to populate field DeadLetterDestination")
		}
		subscription.DeadLetterDestination = &deadLetterDestination
	} else {
		subscription.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination_STATUS
		err := destination.AssignProperties_From_EventSubscriptionDestination_STATUS(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionDestination_STATUS() to populate field Destination")
		}
		subscription.Destination = &destination
	} else {
		subscription.Destination = nil
	}

	// EventDeliverySchema
	subscription.EventDeliverySchema = genruntime.ClonePointerToString(source.EventDeliverySchema)

	// ExpirationTimeUtc
	subscription.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter_STATUS
		err := filter.AssignProperties_From_EventSubscriptionFilter_STATUS(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventSubscriptionFilter_STATUS() to populate field Filter")
		}
		subscription.Filter = &filter
	} else {
		subscription.Filter = nil
	}

	// Id
	subscription.Id = genruntime.ClonePointerToString(source.Id)

	// Labels
	subscription.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Name
	subscription.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	subscription.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy_STATUS
		err := retryPolicy.AssignProperties_From_RetryPolicy_STATUS(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RetryPolicy_STATUS() to populate field RetryPolicy")
		}
		subscription.RetryPolicy = &retryPolicy
	} else {
		subscription.RetryPolicy = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		subscription.SystemData = &systemDatum
	} else {
		subscription.SystemData = nil
	}

	// Topic
	subscription.Topic = genruntime.ClonePointerToString(source.Topic)

	// Type
	subscription.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		subscription.PropertyBag = propertyBag
	} else {
		subscription.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscription_STATUS populates the provided destination EventSubscription_STATUS from our EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignProperties_To_EventSubscription_STATUS(destination *v20200601s.EventSubscription_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(subscription.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(subscription.Conditions)

	// DeadLetterDestination
	if subscription.DeadLetterDestination != nil {
		var deadLetterDestination v20200601s.DeadLetterDestination_STATUS
		err := subscription.DeadLetterDestination.AssignProperties_To_DeadLetterDestination_STATUS(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeadLetterDestination_STATUS() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if subscription.Destination != nil {
		var destinationLocal v20200601s.EventSubscriptionDestination_STATUS
		err := subscription.Destination.AssignProperties_To_EventSubscriptionDestination_STATUS(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionDestination_STATUS() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	destination.EventDeliverySchema = genruntime.ClonePointerToString(subscription.EventDeliverySchema)

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(subscription.ExpirationTimeUtc)

	// Filter
	if subscription.Filter != nil {
		var filter v20200601s.EventSubscriptionFilter_STATUS
		err := subscription.Filter.AssignProperties_To_EventSubscriptionFilter_STATUS(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventSubscriptionFilter_STATUS() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(subscription.Id)

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(subscription.Labels)

	// Name
	destination.Name = genruntime.ClonePointerToString(subscription.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(subscription.ProvisioningState)

	// RetryPolicy
	if subscription.RetryPolicy != nil {
		var retryPolicy v20200601s.RetryPolicy_STATUS
		err := subscription.RetryPolicy.AssignProperties_To_RetryPolicy_STATUS(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RetryPolicy_STATUS() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// SystemData
	if subscription.SystemData != nil {
		var systemDatum v20200601s.SystemData_STATUS
		err := subscription.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Topic
	destination.Topic = genruntime.ClonePointerToString(subscription.Topic)

	// Type
	destination.Type = genruntime.ClonePointerToString(subscription.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.DeadLetterDestination
// Deprecated version of DeadLetterDestination. Use v1beta20200601.DeadLetterDestination instead
type DeadLetterDestination struct {
	PropertyBag genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
	StorageBlob *StorageBlobDeadLetterDestination `json:"storageBlob,omitempty"`
}

// AssignProperties_From_DeadLetterDestination populates our DeadLetterDestination from the provided source DeadLetterDestination
func (destination *DeadLetterDestination) AssignProperties_From_DeadLetterDestination(source *v20200601s.DeadLetterDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// StorageBlob
	if source.StorageBlob != nil {
		var storageBlob StorageBlobDeadLetterDestination
		err := storageBlob.AssignProperties_From_StorageBlobDeadLetterDestination(source.StorageBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageBlobDeadLetterDestination() to populate field StorageBlob")
		}
		destination.StorageBlob = &storageBlob
	} else {
		destination.StorageBlob = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeadLetterDestination populates the provided destination DeadLetterDestination from our DeadLetterDestination
func (destination *DeadLetterDestination) AssignProperties_To_DeadLetterDestination(target *v20200601s.DeadLetterDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// StorageBlob
	if destination.StorageBlob != nil {
		var storageBlob v20200601s.StorageBlobDeadLetterDestination
		err := destination.StorageBlob.AssignProperties_To_StorageBlobDeadLetterDestination(&storageBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageBlobDeadLetterDestination() to populate field StorageBlob")
		}
		target.StorageBlob = &storageBlob
	} else {
		target.StorageBlob = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.DeadLetterDestination_STATUS
// Deprecated version of DeadLetterDestination_STATUS. Use v1beta20200601.DeadLetterDestination_STATUS instead
type DeadLetterDestination_STATUS struct {
	PropertyBag genruntime.PropertyBag                   `json:"$propertyBag,omitempty"`
	StorageBlob *StorageBlobDeadLetterDestination_STATUS `json:"storageBlob,omitempty"`
}

// AssignProperties_From_DeadLetterDestination_STATUS populates our DeadLetterDestination_STATUS from the provided source DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignProperties_From_DeadLetterDestination_STATUS(source *v20200601s.DeadLetterDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// StorageBlob
	if source.StorageBlob != nil {
		var storageBlob StorageBlobDeadLetterDestination_STATUS
		err := storageBlob.AssignProperties_From_StorageBlobDeadLetterDestination_STATUS(source.StorageBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageBlobDeadLetterDestination_STATUS() to populate field StorageBlob")
		}
		destination.StorageBlob = &storageBlob
	} else {
		destination.StorageBlob = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeadLetterDestination_STATUS populates the provided destination DeadLetterDestination_STATUS from our DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignProperties_To_DeadLetterDestination_STATUS(target *v20200601s.DeadLetterDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// StorageBlob
	if destination.StorageBlob != nil {
		var storageBlob v20200601s.StorageBlobDeadLetterDestination_STATUS
		err := destination.StorageBlob.AssignProperties_To_StorageBlobDeadLetterDestination_STATUS(&storageBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageBlobDeadLetterDestination_STATUS() to populate field StorageBlob")
		}
		target.StorageBlob = &storageBlob
	} else {
		target.StorageBlob = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionDestination
// Deprecated version of EventSubscriptionDestination. Use v1beta20200601.EventSubscriptionDestination instead
type EventSubscriptionDestination struct {
	AzureFunction    *AzureFunctionEventSubscriptionDestination    `json:"azureFunction,omitempty"`
	EventHub         *EventHubEventSubscriptionDestination         `json:"eventHub,omitempty"`
	HybridConnection *HybridConnectionEventSubscriptionDestination `json:"hybridConnection,omitempty"`
	PropertyBag      genruntime.PropertyBag                        `json:"$propertyBag,omitempty"`
	ServiceBusQueue  *ServiceBusQueueEventSubscriptionDestination  `json:"serviceBusQueue,omitempty"`
	ServiceBusTopic  *ServiceBusTopicEventSubscriptionDestination  `json:"serviceBusTopic,omitempty"`
	StorageQueue     *StorageQueueEventSubscriptionDestination     `json:"storageQueue,omitempty"`
	WebHook          *WebHookEventSubscriptionDestination          `json:"webHook,omitempty"`
}

// AssignProperties_From_EventSubscriptionDestination populates our EventSubscriptionDestination from the provided source EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignProperties_From_EventSubscriptionDestination(source *v20200601s.EventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureFunction
	if source.AzureFunction != nil {
		var azureFunction AzureFunctionEventSubscriptionDestination
		err := azureFunction.AssignProperties_From_AzureFunctionEventSubscriptionDestination(source.AzureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		destination.AzureFunction = &azureFunction
	} else {
		destination.AzureFunction = nil
	}

	// EventHub
	if source.EventHub != nil {
		var eventHub EventHubEventSubscriptionDestination
		err := eventHub.AssignProperties_From_EventHubEventSubscriptionDestination(source.EventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventHubEventSubscriptionDestination() to populate field EventHub")
		}
		destination.EventHub = &eventHub
	} else {
		destination.EventHub = nil
	}

	// HybridConnection
	if source.HybridConnection != nil {
		var hybridConnection HybridConnectionEventSubscriptionDestination
		err := hybridConnection.AssignProperties_From_HybridConnectionEventSubscriptionDestination(source.HybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		destination.HybridConnection = &hybridConnection
	} else {
		destination.HybridConnection = nil
	}

	// ServiceBusQueue
	if source.ServiceBusQueue != nil {
		var serviceBusQueue ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueue.AssignProperties_From_ServiceBusQueueEventSubscriptionDestination(source.ServiceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		destination.ServiceBusQueue = &serviceBusQueue
	} else {
		destination.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if source.ServiceBusTopic != nil {
		var serviceBusTopic ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopic.AssignProperties_From_ServiceBusTopicEventSubscriptionDestination(source.ServiceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		destination.ServiceBusTopic = &serviceBusTopic
	} else {
		destination.ServiceBusTopic = nil
	}

	// StorageQueue
	if source.StorageQueue != nil {
		var storageQueue StorageQueueEventSubscriptionDestination
		err := storageQueue.AssignProperties_From_StorageQueueEventSubscriptionDestination(source.StorageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		destination.StorageQueue = &storageQueue
	} else {
		destination.StorageQueue = nil
	}

	// WebHook
	if source.WebHook != nil {
		var webHook WebHookEventSubscriptionDestination
		err := webHook.AssignProperties_From_WebHookEventSubscriptionDestination(source.WebHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebHookEventSubscriptionDestination() to populate field WebHook")
		}
		destination.WebHook = &webHook
	} else {
		destination.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionDestination populates the provided destination EventSubscriptionDestination from our EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignProperties_To_EventSubscriptionDestination(target *v20200601s.EventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// AzureFunction
	if destination.AzureFunction != nil {
		var azureFunction v20200601s.AzureFunctionEventSubscriptionDestination
		err := destination.AzureFunction.AssignProperties_To_AzureFunctionEventSubscriptionDestination(&azureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		target.AzureFunction = &azureFunction
	} else {
		target.AzureFunction = nil
	}

	// EventHub
	if destination.EventHub != nil {
		var eventHub v20200601s.EventHubEventSubscriptionDestination
		err := destination.EventHub.AssignProperties_To_EventHubEventSubscriptionDestination(&eventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventHubEventSubscriptionDestination() to populate field EventHub")
		}
		target.EventHub = &eventHub
	} else {
		target.EventHub = nil
	}

	// HybridConnection
	if destination.HybridConnection != nil {
		var hybridConnection v20200601s.HybridConnectionEventSubscriptionDestination
		err := destination.HybridConnection.AssignProperties_To_HybridConnectionEventSubscriptionDestination(&hybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		target.HybridConnection = &hybridConnection
	} else {
		target.HybridConnection = nil
	}

	// ServiceBusQueue
	if destination.ServiceBusQueue != nil {
		var serviceBusQueue v20200601s.ServiceBusQueueEventSubscriptionDestination
		err := destination.ServiceBusQueue.AssignProperties_To_ServiceBusQueueEventSubscriptionDestination(&serviceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		target.ServiceBusQueue = &serviceBusQueue
	} else {
		target.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if destination.ServiceBusTopic != nil {
		var serviceBusTopic v20200601s.ServiceBusTopicEventSubscriptionDestination
		err := destination.ServiceBusTopic.AssignProperties_To_ServiceBusTopicEventSubscriptionDestination(&serviceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		target.ServiceBusTopic = &serviceBusTopic
	} else {
		target.ServiceBusTopic = nil
	}

	// StorageQueue
	if destination.StorageQueue != nil {
		var storageQueue v20200601s.StorageQueueEventSubscriptionDestination
		err := destination.StorageQueue.AssignProperties_To_StorageQueueEventSubscriptionDestination(&storageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		target.StorageQueue = &storageQueue
	} else {
		target.StorageQueue = nil
	}

	// WebHook
	if destination.WebHook != nil {
		var webHook v20200601s.WebHookEventSubscriptionDestination
		err := destination.WebHook.AssignProperties_To_WebHookEventSubscriptionDestination(&webHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebHookEventSubscriptionDestination() to populate field WebHook")
		}
		target.WebHook = &webHook
	} else {
		target.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionDestination_STATUS
// Deprecated version of EventSubscriptionDestination_STATUS. Use v1beta20200601.EventSubscriptionDestination_STATUS instead
type EventSubscriptionDestination_STATUS struct {
	AzureFunction    *AzureFunctionEventSubscriptionDestination_STATUS    `json:"azureFunction,omitempty"`
	EventHub         *EventHubEventSubscriptionDestination_STATUS         `json:"eventHub,omitempty"`
	HybridConnection *HybridConnectionEventSubscriptionDestination_STATUS `json:"hybridConnection,omitempty"`
	PropertyBag      genruntime.PropertyBag                               `json:"$propertyBag,omitempty"`
	ServiceBusQueue  *ServiceBusQueueEventSubscriptionDestination_STATUS  `json:"serviceBusQueue,omitempty"`
	ServiceBusTopic  *ServiceBusTopicEventSubscriptionDestination_STATUS  `json:"serviceBusTopic,omitempty"`
	StorageQueue     *StorageQueueEventSubscriptionDestination_STATUS     `json:"storageQueue,omitempty"`
	WebHook          *WebHookEventSubscriptionDestination_STATUS          `json:"webHook,omitempty"`
}

// AssignProperties_From_EventSubscriptionDestination_STATUS populates our EventSubscriptionDestination_STATUS from the provided source EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignProperties_From_EventSubscriptionDestination_STATUS(source *v20200601s.EventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureFunction
	if source.AzureFunction != nil {
		var azureFunction AzureFunctionEventSubscriptionDestination_STATUS
		err := azureFunction.AssignProperties_From_AzureFunctionEventSubscriptionDestination_STATUS(source.AzureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AzureFunctionEventSubscriptionDestination_STATUS() to populate field AzureFunction")
		}
		destination.AzureFunction = &azureFunction
	} else {
		destination.AzureFunction = nil
	}

	// EventHub
	if source.EventHub != nil {
		var eventHub EventHubEventSubscriptionDestination_STATUS
		err := eventHub.AssignProperties_From_EventHubEventSubscriptionDestination_STATUS(source.EventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EventHubEventSubscriptionDestination_STATUS() to populate field EventHub")
		}
		destination.EventHub = &eventHub
	} else {
		destination.EventHub = nil
	}

	// HybridConnection
	if source.HybridConnection != nil {
		var hybridConnection HybridConnectionEventSubscriptionDestination_STATUS
		err := hybridConnection.AssignProperties_From_HybridConnectionEventSubscriptionDestination_STATUS(source.HybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HybridConnectionEventSubscriptionDestination_STATUS() to populate field HybridConnection")
		}
		destination.HybridConnection = &hybridConnection
	} else {
		destination.HybridConnection = nil
	}

	// ServiceBusQueue
	if source.ServiceBusQueue != nil {
		var serviceBusQueue ServiceBusQueueEventSubscriptionDestination_STATUS
		err := serviceBusQueue.AssignProperties_From_ServiceBusQueueEventSubscriptionDestination_STATUS(source.ServiceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusQueueEventSubscriptionDestination_STATUS() to populate field ServiceBusQueue")
		}
		destination.ServiceBusQueue = &serviceBusQueue
	} else {
		destination.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if source.ServiceBusTopic != nil {
		var serviceBusTopic ServiceBusTopicEventSubscriptionDestination_STATUS
		err := serviceBusTopic.AssignProperties_From_ServiceBusTopicEventSubscriptionDestination_STATUS(source.ServiceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServiceBusTopicEventSubscriptionDestination_STATUS() to populate field ServiceBusTopic")
		}
		destination.ServiceBusTopic = &serviceBusTopic
	} else {
		destination.ServiceBusTopic = nil
	}

	// StorageQueue
	if source.StorageQueue != nil {
		var storageQueue StorageQueueEventSubscriptionDestination_STATUS
		err := storageQueue.AssignProperties_From_StorageQueueEventSubscriptionDestination_STATUS(source.StorageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StorageQueueEventSubscriptionDestination_STATUS() to populate field StorageQueue")
		}
		destination.StorageQueue = &storageQueue
	} else {
		destination.StorageQueue = nil
	}

	// WebHook
	if source.WebHook != nil {
		var webHook WebHookEventSubscriptionDestination_STATUS
		err := webHook.AssignProperties_From_WebHookEventSubscriptionDestination_STATUS(source.WebHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebHookEventSubscriptionDestination_STATUS() to populate field WebHook")
		}
		destination.WebHook = &webHook
	} else {
		destination.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionDestination_STATUS populates the provided destination EventSubscriptionDestination_STATUS from our EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignProperties_To_EventSubscriptionDestination_STATUS(target *v20200601s.EventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// AzureFunction
	if destination.AzureFunction != nil {
		var azureFunction v20200601s.AzureFunctionEventSubscriptionDestination_STATUS
		err := destination.AzureFunction.AssignProperties_To_AzureFunctionEventSubscriptionDestination_STATUS(&azureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AzureFunctionEventSubscriptionDestination_STATUS() to populate field AzureFunction")
		}
		target.AzureFunction = &azureFunction
	} else {
		target.AzureFunction = nil
	}

	// EventHub
	if destination.EventHub != nil {
		var eventHub v20200601s.EventHubEventSubscriptionDestination_STATUS
		err := destination.EventHub.AssignProperties_To_EventHubEventSubscriptionDestination_STATUS(&eventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EventHubEventSubscriptionDestination_STATUS() to populate field EventHub")
		}
		target.EventHub = &eventHub
	} else {
		target.EventHub = nil
	}

	// HybridConnection
	if destination.HybridConnection != nil {
		var hybridConnection v20200601s.HybridConnectionEventSubscriptionDestination_STATUS
		err := destination.HybridConnection.AssignProperties_To_HybridConnectionEventSubscriptionDestination_STATUS(&hybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HybridConnectionEventSubscriptionDestination_STATUS() to populate field HybridConnection")
		}
		target.HybridConnection = &hybridConnection
	} else {
		target.HybridConnection = nil
	}

	// ServiceBusQueue
	if destination.ServiceBusQueue != nil {
		var serviceBusQueue v20200601s.ServiceBusQueueEventSubscriptionDestination_STATUS
		err := destination.ServiceBusQueue.AssignProperties_To_ServiceBusQueueEventSubscriptionDestination_STATUS(&serviceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusQueueEventSubscriptionDestination_STATUS() to populate field ServiceBusQueue")
		}
		target.ServiceBusQueue = &serviceBusQueue
	} else {
		target.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if destination.ServiceBusTopic != nil {
		var serviceBusTopic v20200601s.ServiceBusTopicEventSubscriptionDestination_STATUS
		err := destination.ServiceBusTopic.AssignProperties_To_ServiceBusTopicEventSubscriptionDestination_STATUS(&serviceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServiceBusTopicEventSubscriptionDestination_STATUS() to populate field ServiceBusTopic")
		}
		target.ServiceBusTopic = &serviceBusTopic
	} else {
		target.ServiceBusTopic = nil
	}

	// StorageQueue
	if destination.StorageQueue != nil {
		var storageQueue v20200601s.StorageQueueEventSubscriptionDestination_STATUS
		err := destination.StorageQueue.AssignProperties_To_StorageQueueEventSubscriptionDestination_STATUS(&storageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StorageQueueEventSubscriptionDestination_STATUS() to populate field StorageQueue")
		}
		target.StorageQueue = &storageQueue
	} else {
		target.StorageQueue = nil
	}

	// WebHook
	if destination.WebHook != nil {
		var webHook v20200601s.WebHookEventSubscriptionDestination_STATUS
		err := destination.WebHook.AssignProperties_To_WebHookEventSubscriptionDestination_STATUS(&webHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebHookEventSubscriptionDestination_STATUS() to populate field WebHook")
		}
		target.WebHook = &webHook
	} else {
		target.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionFilter
// Deprecated version of EventSubscriptionFilter. Use v1beta20200601.EventSubscriptionFilter instead
type EventSubscriptionFilter struct {
	AdvancedFilters        []AdvancedFilter       `json:"advancedFilters,omitempty"`
	IncludedEventTypes     []string               `json:"includedEventTypes,omitempty"`
	IsSubjectCaseSensitive *bool                  `json:"isSubjectCaseSensitive,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SubjectBeginsWith      *string                `json:"subjectBeginsWith,omitempty"`
	SubjectEndsWith        *string                `json:"subjectEndsWith,omitempty"`
}

// AssignProperties_From_EventSubscriptionFilter populates our EventSubscriptionFilter from the provided source EventSubscriptionFilter
func (filter *EventSubscriptionFilter) AssignProperties_From_EventSubscriptionFilter(source *v20200601s.EventSubscriptionFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter
			err := advancedFilter.AssignProperties_From_AdvancedFilter(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionFilter populates the provided destination EventSubscriptionFilter from our EventSubscriptionFilter
func (filter *EventSubscriptionFilter) AssignProperties_To_EventSubscriptionFilter(destination *v20200601s.EventSubscriptionFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]v20200601s.AdvancedFilter, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v20200601s.AdvancedFilter
			err := advancedFilterItem.AssignProperties_To_AdvancedFilter(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionFilter_STATUS
// Deprecated version of EventSubscriptionFilter_STATUS. Use v1beta20200601.EventSubscriptionFilter_STATUS instead
type EventSubscriptionFilter_STATUS struct {
	AdvancedFilters        []AdvancedFilter_STATUS `json:"advancedFilters,omitempty"`
	IncludedEventTypes     []string                `json:"includedEventTypes,omitempty"`
	IsSubjectCaseSensitive *bool                   `json:"isSubjectCaseSensitive,omitempty"`
	PropertyBag            genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
	SubjectBeginsWith      *string                 `json:"subjectBeginsWith,omitempty"`
	SubjectEndsWith        *string                 `json:"subjectEndsWith,omitempty"`
}

// AssignProperties_From_EventSubscriptionFilter_STATUS populates our EventSubscriptionFilter_STATUS from the provided source EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignProperties_From_EventSubscriptionFilter_STATUS(source *v20200601s.EventSubscriptionFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter_STATUS, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter_STATUS
			err := advancedFilter.AssignProperties_From_AdvancedFilter_STATUS(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AdvancedFilter_STATUS() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventSubscriptionFilter_STATUS populates the provided destination EventSubscriptionFilter_STATUS from our EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignProperties_To_EventSubscriptionFilter_STATUS(destination *v20200601s.EventSubscriptionFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]v20200601s.AdvancedFilter_STATUS, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v20200601s.AdvancedFilter_STATUS
			err := advancedFilterItem.AssignProperties_To_AdvancedFilter_STATUS(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AdvancedFilter_STATUS() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.RetryPolicy
// Deprecated version of RetryPolicy. Use v1beta20200601.RetryPolicy instead
type RetryPolicy struct {
	EventTimeToLiveInMinutes *int                   `json:"eventTimeToLiveInMinutes,omitempty"`
	MaxDeliveryAttempts      *int                   `json:"maxDeliveryAttempts,omitempty"`
	PropertyBag              genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_RetryPolicy populates our RetryPolicy from the provided source RetryPolicy
func (policy *RetryPolicy) AssignProperties_From_RetryPolicy(source *v20200601s.RetryPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RetryPolicy populates the provided destination RetryPolicy from our RetryPolicy
func (policy *RetryPolicy) AssignProperties_To_RetryPolicy(destination *v20200601s.RetryPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.RetryPolicy_STATUS
// Deprecated version of RetryPolicy_STATUS. Use v1beta20200601.RetryPolicy_STATUS instead
type RetryPolicy_STATUS struct {
	EventTimeToLiveInMinutes *int                   `json:"eventTimeToLiveInMinutes,omitempty"`
	MaxDeliveryAttempts      *int                   `json:"maxDeliveryAttempts,omitempty"`
	PropertyBag              genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_RetryPolicy_STATUS populates our RetryPolicy_STATUS from the provided source RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignProperties_From_RetryPolicy_STATUS(source *v20200601s.RetryPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RetryPolicy_STATUS populates the provided destination RetryPolicy_STATUS from our RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignProperties_To_RetryPolicy_STATUS(destination *v20200601s.RetryPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.AdvancedFilter
// Deprecated version of AdvancedFilter. Use v1beta20200601.AdvancedFilter instead
type AdvancedFilter struct {
	BoolEquals                *BoolEqualsAdvancedFilter                `json:"boolEquals,omitempty"`
	NumberGreaterThan         *NumberGreaterThanAdvancedFilter         `json:"numberGreaterThan,omitempty"`
	NumberGreaterThanOrEquals *NumberGreaterThanOrEqualsAdvancedFilter `json:"numberGreaterThanOrEquals,omitempty"`
	NumberIn                  *NumberInAdvancedFilter                  `json:"numberIn,omitempty"`
	NumberLessThan            *NumberLessThanAdvancedFilter            `json:"numberLessThan,omitempty"`
	NumberLessThanOrEquals    *NumberLessThanOrEqualsAdvancedFilter    `json:"numberLessThanOrEquals,omitempty"`
	NumberNotIn               *NumberNotInAdvancedFilter               `json:"numberNotIn,omitempty"`
	PropertyBag               genruntime.PropertyBag                   `json:"$propertyBag,omitempty"`
	StringBeginsWith          *StringBeginsWithAdvancedFilter          `json:"stringBeginsWith,omitempty"`
	StringContains            *StringContainsAdvancedFilter            `json:"stringContains,omitempty"`
	StringEndsWith            *StringEndsWithAdvancedFilter            `json:"stringEndsWith,omitempty"`
	StringIn                  *StringInAdvancedFilter                  `json:"stringIn,omitempty"`
	StringNotIn               *StringNotInAdvancedFilter               `json:"stringNotIn,omitempty"`
}

// AssignProperties_From_AdvancedFilter populates our AdvancedFilter from the provided source AdvancedFilter
func (filter *AdvancedFilter) AssignProperties_From_AdvancedFilter(source *v20200601s.AdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BoolEquals
	if source.BoolEquals != nil {
		var boolEqual BoolEqualsAdvancedFilter
		err := boolEqual.AssignProperties_From_BoolEqualsAdvancedFilter(source.BoolEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_BoolEqualsAdvancedFilter() to populate field BoolEquals")
		}
		filter.BoolEquals = &boolEqual
	} else {
		filter.BoolEquals = nil
	}

	// NumberGreaterThan
	if source.NumberGreaterThan != nil {
		var numberGreaterThan NumberGreaterThanAdvancedFilter
		err := numberGreaterThan.AssignProperties_From_NumberGreaterThanAdvancedFilter(source.NumberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberGreaterThanAdvancedFilter() to populate field NumberGreaterThan")
		}
		filter.NumberGreaterThan = &numberGreaterThan
	} else {
		filter.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if source.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual NumberGreaterThanOrEqualsAdvancedFilter
		err := numberGreaterThanOrEqual.AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter(source.NumberGreaterThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter() to populate field NumberGreaterThanOrEquals")
		}
		filter.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		filter.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if source.NumberIn != nil {
		var numberIn NumberInAdvancedFilter
		err := numberIn.AssignProperties_From_NumberInAdvancedFilter(source.NumberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberInAdvancedFilter() to populate field NumberIn")
		}
		filter.NumberIn = &numberIn
	} else {
		filter.NumberIn = nil
	}

	// NumberLessThan
	if source.NumberLessThan != nil {
		var numberLessThan NumberLessThanAdvancedFilter
		err := numberLessThan.AssignProperties_From_NumberLessThanAdvancedFilter(source.NumberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberLessThanAdvancedFilter() to populate field NumberLessThan")
		}
		filter.NumberLessThan = &numberLessThan
	} else {
		filter.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if source.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual NumberLessThanOrEqualsAdvancedFilter
		err := numberLessThanOrEqual.AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter(source.NumberLessThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter() to populate field NumberLessThanOrEquals")
		}
		filter.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		filter.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if source.NumberNotIn != nil {
		var numberNotIn NumberNotInAdvancedFilter
		err := numberNotIn.AssignProperties_From_NumberNotInAdvancedFilter(source.NumberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberNotInAdvancedFilter() to populate field NumberNotIn")
		}
		filter.NumberNotIn = &numberNotIn
	} else {
		filter.NumberNotIn = nil
	}

	// StringBeginsWith
	if source.StringBeginsWith != nil {
		var stringBeginsWith StringBeginsWithAdvancedFilter
		err := stringBeginsWith.AssignProperties_From_StringBeginsWithAdvancedFilter(source.StringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringBeginsWithAdvancedFilter() to populate field StringBeginsWith")
		}
		filter.StringBeginsWith = &stringBeginsWith
	} else {
		filter.StringBeginsWith = nil
	}

	// StringContains
	if source.StringContains != nil {
		var stringContain StringContainsAdvancedFilter
		err := stringContain.AssignProperties_From_StringContainsAdvancedFilter(source.StringContains)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringContainsAdvancedFilter() to populate field StringContains")
		}
		filter.StringContains = &stringContain
	} else {
		filter.StringContains = nil
	}

	// StringEndsWith
	if source.StringEndsWith != nil {
		var stringEndsWith StringEndsWithAdvancedFilter
		err := stringEndsWith.AssignProperties_From_StringEndsWithAdvancedFilter(source.StringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringEndsWithAdvancedFilter() to populate field StringEndsWith")
		}
		filter.StringEndsWith = &stringEndsWith
	} else {
		filter.StringEndsWith = nil
	}

	// StringIn
	if source.StringIn != nil {
		var stringIn StringInAdvancedFilter
		err := stringIn.AssignProperties_From_StringInAdvancedFilter(source.StringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringInAdvancedFilter() to populate field StringIn")
		}
		filter.StringIn = &stringIn
	} else {
		filter.StringIn = nil
	}

	// StringNotIn
	if source.StringNotIn != nil {
		var stringNotIn StringNotInAdvancedFilter
		err := stringNotIn.AssignProperties_From_StringNotInAdvancedFilter(source.StringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringNotInAdvancedFilter() to populate field StringNotIn")
		}
		filter.StringNotIn = &stringNotIn
	} else {
		filter.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter populates the provided destination AdvancedFilter from our AdvancedFilter
func (filter *AdvancedFilter) AssignProperties_To_AdvancedFilter(destination *v20200601s.AdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// BoolEquals
	if filter.BoolEquals != nil {
		var boolEqual v20200601s.BoolEqualsAdvancedFilter
		err := filter.BoolEquals.AssignProperties_To_BoolEqualsAdvancedFilter(&boolEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_BoolEqualsAdvancedFilter() to populate field BoolEquals")
		}
		destination.BoolEquals = &boolEqual
	} else {
		destination.BoolEquals = nil
	}

	// NumberGreaterThan
	if filter.NumberGreaterThan != nil {
		var numberGreaterThan v20200601s.NumberGreaterThanAdvancedFilter
		err := filter.NumberGreaterThan.AssignProperties_To_NumberGreaterThanAdvancedFilter(&numberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberGreaterThanAdvancedFilter() to populate field NumberGreaterThan")
		}
		destination.NumberGreaterThan = &numberGreaterThan
	} else {
		destination.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if filter.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual v20200601s.NumberGreaterThanOrEqualsAdvancedFilter
		err := filter.NumberGreaterThanOrEquals.AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter(&numberGreaterThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter() to populate field NumberGreaterThanOrEquals")
		}
		destination.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		destination.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if filter.NumberIn != nil {
		var numberIn v20200601s.NumberInAdvancedFilter
		err := filter.NumberIn.AssignProperties_To_NumberInAdvancedFilter(&numberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberInAdvancedFilter() to populate field NumberIn")
		}
		destination.NumberIn = &numberIn
	} else {
		destination.NumberIn = nil
	}

	// NumberLessThan
	if filter.NumberLessThan != nil {
		var numberLessThan v20200601s.NumberLessThanAdvancedFilter
		err := filter.NumberLessThan.AssignProperties_To_NumberLessThanAdvancedFilter(&numberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberLessThanAdvancedFilter() to populate field NumberLessThan")
		}
		destination.NumberLessThan = &numberLessThan
	} else {
		destination.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if filter.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual v20200601s.NumberLessThanOrEqualsAdvancedFilter
		err := filter.NumberLessThanOrEquals.AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter(&numberLessThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter() to populate field NumberLessThanOrEquals")
		}
		destination.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		destination.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if filter.NumberNotIn != nil {
		var numberNotIn v20200601s.NumberNotInAdvancedFilter
		err := filter.NumberNotIn.AssignProperties_To_NumberNotInAdvancedFilter(&numberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberNotInAdvancedFilter() to populate field NumberNotIn")
		}
		destination.NumberNotIn = &numberNotIn
	} else {
		destination.NumberNotIn = nil
	}

	// StringBeginsWith
	if filter.StringBeginsWith != nil {
		var stringBeginsWith v20200601s.StringBeginsWithAdvancedFilter
		err := filter.StringBeginsWith.AssignProperties_To_StringBeginsWithAdvancedFilter(&stringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringBeginsWithAdvancedFilter() to populate field StringBeginsWith")
		}
		destination.StringBeginsWith = &stringBeginsWith
	} else {
		destination.StringBeginsWith = nil
	}

	// StringContains
	if filter.StringContains != nil {
		var stringContain v20200601s.StringContainsAdvancedFilter
		err := filter.StringContains.AssignProperties_To_StringContainsAdvancedFilter(&stringContain)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringContainsAdvancedFilter() to populate field StringContains")
		}
		destination.StringContains = &stringContain
	} else {
		destination.StringContains = nil
	}

	// StringEndsWith
	if filter.StringEndsWith != nil {
		var stringEndsWith v20200601s.StringEndsWithAdvancedFilter
		err := filter.StringEndsWith.AssignProperties_To_StringEndsWithAdvancedFilter(&stringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringEndsWithAdvancedFilter() to populate field StringEndsWith")
		}
		destination.StringEndsWith = &stringEndsWith
	} else {
		destination.StringEndsWith = nil
	}

	// StringIn
	if filter.StringIn != nil {
		var stringIn v20200601s.StringInAdvancedFilter
		err := filter.StringIn.AssignProperties_To_StringInAdvancedFilter(&stringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringInAdvancedFilter() to populate field StringIn")
		}
		destination.StringIn = &stringIn
	} else {
		destination.StringIn = nil
	}

	// StringNotIn
	if filter.StringNotIn != nil {
		var stringNotIn v20200601s.StringNotInAdvancedFilter
		err := filter.StringNotIn.AssignProperties_To_StringNotInAdvancedFilter(&stringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringNotInAdvancedFilter() to populate field StringNotIn")
		}
		destination.StringNotIn = &stringNotIn
	} else {
		destination.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.AdvancedFilter_STATUS
// Deprecated version of AdvancedFilter_STATUS. Use v1beta20200601.AdvancedFilter_STATUS instead
type AdvancedFilter_STATUS struct {
	BoolEquals                *BoolEqualsAdvancedFilter_STATUS                `json:"boolEquals,omitempty"`
	NumberGreaterThan         *NumberGreaterThanAdvancedFilter_STATUS         `json:"numberGreaterThan,omitempty"`
	NumberGreaterThanOrEquals *NumberGreaterThanOrEqualsAdvancedFilter_STATUS `json:"numberGreaterThanOrEquals,omitempty"`
	NumberIn                  *NumberInAdvancedFilter_STATUS                  `json:"numberIn,omitempty"`
	NumberLessThan            *NumberLessThanAdvancedFilter_STATUS            `json:"numberLessThan,omitempty"`
	NumberLessThanOrEquals    *NumberLessThanOrEqualsAdvancedFilter_STATUS    `json:"numberLessThanOrEquals,omitempty"`
	NumberNotIn               *NumberNotInAdvancedFilter_STATUS               `json:"numberNotIn,omitempty"`
	PropertyBag               genruntime.PropertyBag                          `json:"$propertyBag,omitempty"`
	StringBeginsWith          *StringBeginsWithAdvancedFilter_STATUS          `json:"stringBeginsWith,omitempty"`
	StringContains            *StringContainsAdvancedFilter_STATUS            `json:"stringContains,omitempty"`
	StringEndsWith            *StringEndsWithAdvancedFilter_STATUS            `json:"stringEndsWith,omitempty"`
	StringIn                  *StringInAdvancedFilter_STATUS                  `json:"stringIn,omitempty"`
	StringNotIn               *StringNotInAdvancedFilter_STATUS               `json:"stringNotIn,omitempty"`
}

// AssignProperties_From_AdvancedFilter_STATUS populates our AdvancedFilter_STATUS from the provided source AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignProperties_From_AdvancedFilter_STATUS(source *v20200601s.AdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BoolEquals
	if source.BoolEquals != nil {
		var boolEqual BoolEqualsAdvancedFilter_STATUS
		err := boolEqual.AssignProperties_From_BoolEqualsAdvancedFilter_STATUS(source.BoolEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_BoolEqualsAdvancedFilter_STATUS() to populate field BoolEquals")
		}
		filter.BoolEquals = &boolEqual
	} else {
		filter.BoolEquals = nil
	}

	// NumberGreaterThan
	if source.NumberGreaterThan != nil {
		var numberGreaterThan NumberGreaterThanAdvancedFilter_STATUS
		err := numberGreaterThan.AssignProperties_From_NumberGreaterThanAdvancedFilter_STATUS(source.NumberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberGreaterThanAdvancedFilter_STATUS() to populate field NumberGreaterThan")
		}
		filter.NumberGreaterThan = &numberGreaterThan
	} else {
		filter.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if source.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual NumberGreaterThanOrEqualsAdvancedFilter_STATUS
		err := numberGreaterThanOrEqual.AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter_STATUS(source.NumberGreaterThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter_STATUS() to populate field NumberGreaterThanOrEquals")
		}
		filter.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		filter.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if source.NumberIn != nil {
		var numberIn NumberInAdvancedFilter_STATUS
		err := numberIn.AssignProperties_From_NumberInAdvancedFilter_STATUS(source.NumberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberInAdvancedFilter_STATUS() to populate field NumberIn")
		}
		filter.NumberIn = &numberIn
	} else {
		filter.NumberIn = nil
	}

	// NumberLessThan
	if source.NumberLessThan != nil {
		var numberLessThan NumberLessThanAdvancedFilter_STATUS
		err := numberLessThan.AssignProperties_From_NumberLessThanAdvancedFilter_STATUS(source.NumberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberLessThanAdvancedFilter_STATUS() to populate field NumberLessThan")
		}
		filter.NumberLessThan = &numberLessThan
	} else {
		filter.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if source.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual NumberLessThanOrEqualsAdvancedFilter_STATUS
		err := numberLessThanOrEqual.AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter_STATUS(source.NumberLessThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter_STATUS() to populate field NumberLessThanOrEquals")
		}
		filter.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		filter.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if source.NumberNotIn != nil {
		var numberNotIn NumberNotInAdvancedFilter_STATUS
		err := numberNotIn.AssignProperties_From_NumberNotInAdvancedFilter_STATUS(source.NumberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NumberNotInAdvancedFilter_STATUS() to populate field NumberNotIn")
		}
		filter.NumberNotIn = &numberNotIn
	} else {
		filter.NumberNotIn = nil
	}

	// StringBeginsWith
	if source.StringBeginsWith != nil {
		var stringBeginsWith StringBeginsWithAdvancedFilter_STATUS
		err := stringBeginsWith.AssignProperties_From_StringBeginsWithAdvancedFilter_STATUS(source.StringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringBeginsWithAdvancedFilter_STATUS() to populate field StringBeginsWith")
		}
		filter.StringBeginsWith = &stringBeginsWith
	} else {
		filter.StringBeginsWith = nil
	}

	// StringContains
	if source.StringContains != nil {
		var stringContain StringContainsAdvancedFilter_STATUS
		err := stringContain.AssignProperties_From_StringContainsAdvancedFilter_STATUS(source.StringContains)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringContainsAdvancedFilter_STATUS() to populate field StringContains")
		}
		filter.StringContains = &stringContain
	} else {
		filter.StringContains = nil
	}

	// StringEndsWith
	if source.StringEndsWith != nil {
		var stringEndsWith StringEndsWithAdvancedFilter_STATUS
		err := stringEndsWith.AssignProperties_From_StringEndsWithAdvancedFilter_STATUS(source.StringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringEndsWithAdvancedFilter_STATUS() to populate field StringEndsWith")
		}
		filter.StringEndsWith = &stringEndsWith
	} else {
		filter.StringEndsWith = nil
	}

	// StringIn
	if source.StringIn != nil {
		var stringIn StringInAdvancedFilter_STATUS
		err := stringIn.AssignProperties_From_StringInAdvancedFilter_STATUS(source.StringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringInAdvancedFilter_STATUS() to populate field StringIn")
		}
		filter.StringIn = &stringIn
	} else {
		filter.StringIn = nil
	}

	// StringNotIn
	if source.StringNotIn != nil {
		var stringNotIn StringNotInAdvancedFilter_STATUS
		err := stringNotIn.AssignProperties_From_StringNotInAdvancedFilter_STATUS(source.StringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_StringNotInAdvancedFilter_STATUS() to populate field StringNotIn")
		}
		filter.StringNotIn = &stringNotIn
	} else {
		filter.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AdvancedFilter_STATUS populates the provided destination AdvancedFilter_STATUS from our AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignProperties_To_AdvancedFilter_STATUS(destination *v20200601s.AdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// BoolEquals
	if filter.BoolEquals != nil {
		var boolEqual v20200601s.BoolEqualsAdvancedFilter_STATUS
		err := filter.BoolEquals.AssignProperties_To_BoolEqualsAdvancedFilter_STATUS(&boolEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_BoolEqualsAdvancedFilter_STATUS() to populate field BoolEquals")
		}
		destination.BoolEquals = &boolEqual
	} else {
		destination.BoolEquals = nil
	}

	// NumberGreaterThan
	if filter.NumberGreaterThan != nil {
		var numberGreaterThan v20200601s.NumberGreaterThanAdvancedFilter_STATUS
		err := filter.NumberGreaterThan.AssignProperties_To_NumberGreaterThanAdvancedFilter_STATUS(&numberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberGreaterThanAdvancedFilter_STATUS() to populate field NumberGreaterThan")
		}
		destination.NumberGreaterThan = &numberGreaterThan
	} else {
		destination.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if filter.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual v20200601s.NumberGreaterThanOrEqualsAdvancedFilter_STATUS
		err := filter.NumberGreaterThanOrEquals.AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter_STATUS(&numberGreaterThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter_STATUS() to populate field NumberGreaterThanOrEquals")
		}
		destination.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		destination.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if filter.NumberIn != nil {
		var numberIn v20200601s.NumberInAdvancedFilter_STATUS
		err := filter.NumberIn.AssignProperties_To_NumberInAdvancedFilter_STATUS(&numberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberInAdvancedFilter_STATUS() to populate field NumberIn")
		}
		destination.NumberIn = &numberIn
	} else {
		destination.NumberIn = nil
	}

	// NumberLessThan
	if filter.NumberLessThan != nil {
		var numberLessThan v20200601s.NumberLessThanAdvancedFilter_STATUS
		err := filter.NumberLessThan.AssignProperties_To_NumberLessThanAdvancedFilter_STATUS(&numberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberLessThanAdvancedFilter_STATUS() to populate field NumberLessThan")
		}
		destination.NumberLessThan = &numberLessThan
	} else {
		destination.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if filter.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual v20200601s.NumberLessThanOrEqualsAdvancedFilter_STATUS
		err := filter.NumberLessThanOrEquals.AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter_STATUS(&numberLessThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter_STATUS() to populate field NumberLessThanOrEquals")
		}
		destination.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		destination.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if filter.NumberNotIn != nil {
		var numberNotIn v20200601s.NumberNotInAdvancedFilter_STATUS
		err := filter.NumberNotIn.AssignProperties_To_NumberNotInAdvancedFilter_STATUS(&numberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NumberNotInAdvancedFilter_STATUS() to populate field NumberNotIn")
		}
		destination.NumberNotIn = &numberNotIn
	} else {
		destination.NumberNotIn = nil
	}

	// StringBeginsWith
	if filter.StringBeginsWith != nil {
		var stringBeginsWith v20200601s.StringBeginsWithAdvancedFilter_STATUS
		err := filter.StringBeginsWith.AssignProperties_To_StringBeginsWithAdvancedFilter_STATUS(&stringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringBeginsWithAdvancedFilter_STATUS() to populate field StringBeginsWith")
		}
		destination.StringBeginsWith = &stringBeginsWith
	} else {
		destination.StringBeginsWith = nil
	}

	// StringContains
	if filter.StringContains != nil {
		var stringContain v20200601s.StringContainsAdvancedFilter_STATUS
		err := filter.StringContains.AssignProperties_To_StringContainsAdvancedFilter_STATUS(&stringContain)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringContainsAdvancedFilter_STATUS() to populate field StringContains")
		}
		destination.StringContains = &stringContain
	} else {
		destination.StringContains = nil
	}

	// StringEndsWith
	if filter.StringEndsWith != nil {
		var stringEndsWith v20200601s.StringEndsWithAdvancedFilter_STATUS
		err := filter.StringEndsWith.AssignProperties_To_StringEndsWithAdvancedFilter_STATUS(&stringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringEndsWithAdvancedFilter_STATUS() to populate field StringEndsWith")
		}
		destination.StringEndsWith = &stringEndsWith
	} else {
		destination.StringEndsWith = nil
	}

	// StringIn
	if filter.StringIn != nil {
		var stringIn v20200601s.StringInAdvancedFilter_STATUS
		err := filter.StringIn.AssignProperties_To_StringInAdvancedFilter_STATUS(&stringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringInAdvancedFilter_STATUS() to populate field StringIn")
		}
		destination.StringIn = &stringIn
	} else {
		destination.StringIn = nil
	}

	// StringNotIn
	if filter.StringNotIn != nil {
		var stringNotIn v20200601s.StringNotInAdvancedFilter_STATUS
		err := filter.StringNotIn.AssignProperties_To_StringNotInAdvancedFilter_STATUS(&stringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_StringNotInAdvancedFilter_STATUS() to populate field StringNotIn")
		}
		destination.StringNotIn = &stringNotIn
	} else {
		destination.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.AzureFunctionEventSubscriptionDestination
// Deprecated version of AzureFunctionEventSubscriptionDestination. Use v1beta20200601.AzureFunctionEventSubscriptionDestination instead
type AzureFunctionEventSubscriptionDestination struct {
	EndpointType                  *string                       `json:"endpointType,omitempty"`
	MaxEventsPerBatch             *int                          `json:"maxEventsPerBatch,omitempty"`
	PreferredBatchSizeInKilobytes *int                          `json:"preferredBatchSizeInKilobytes,omitempty"`
	PropertyBag                   genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	ResourceReference             *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

// AssignProperties_From_AzureFunctionEventSubscriptionDestination populates our AzureFunctionEventSubscriptionDestination from the provided source AzureFunctionEventSubscriptionDestination
func (destination *AzureFunctionEventSubscriptionDestination) AssignProperties_From_AzureFunctionEventSubscriptionDestination(source *v20200601s.AzureFunctionEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AzureFunctionEventSubscriptionDestination populates the provided destination AzureFunctionEventSubscriptionDestination from our AzureFunctionEventSubscriptionDestination
func (destination *AzureFunctionEventSubscriptionDestination) AssignProperties_To_AzureFunctionEventSubscriptionDestination(target *v20200601s.AzureFunctionEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// MaxEventsPerBatch
	target.MaxEventsPerBatch = genruntime.ClonePointerToInt(destination.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	target.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(destination.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if destination.ResourceReference != nil {
		resourceReference := destination.ResourceReference.Copy()
		target.ResourceReference = &resourceReference
	} else {
		target.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.AzureFunctionEventSubscriptionDestination_STATUS
// Deprecated version of AzureFunctionEventSubscriptionDestination_STATUS. Use v1beta20200601.AzureFunctionEventSubscriptionDestination_STATUS instead
type AzureFunctionEventSubscriptionDestination_STATUS struct {
	EndpointType                  *string                `json:"endpointType,omitempty"`
	MaxEventsPerBatch             *int                   `json:"maxEventsPerBatch,omitempty"`
	PreferredBatchSizeInKilobytes *int                   `json:"preferredBatchSizeInKilobytes,omitempty"`
	PropertyBag                   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId                    *string                `json:"resourceId,omitempty"`
}

// AssignProperties_From_AzureFunctionEventSubscriptionDestination_STATUS populates our AzureFunctionEventSubscriptionDestination_STATUS from the provided source AzureFunctionEventSubscriptionDestination_STATUS
func (destination *AzureFunctionEventSubscriptionDestination_STATUS) AssignProperties_From_AzureFunctionEventSubscriptionDestination_STATUS(source *v20200601s.AzureFunctionEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AzureFunctionEventSubscriptionDestination_STATUS populates the provided destination AzureFunctionEventSubscriptionDestination_STATUS from our AzureFunctionEventSubscriptionDestination_STATUS
func (destination *AzureFunctionEventSubscriptionDestination_STATUS) AssignProperties_To_AzureFunctionEventSubscriptionDestination_STATUS(target *v20200601s.AzureFunctionEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// MaxEventsPerBatch
	target.MaxEventsPerBatch = genruntime.ClonePointerToInt(destination.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	target.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(destination.PreferredBatchSizeInKilobytes)

	// ResourceId
	target.ResourceId = genruntime.ClonePointerToString(destination.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventHubEventSubscriptionDestination
// Deprecated version of EventHubEventSubscriptionDestination. Use v1beta20200601.EventHubEventSubscriptionDestination instead
type EventHubEventSubscriptionDestination struct {
	EndpointType      *string                       `json:"endpointType,omitempty"`
	PropertyBag       genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

// AssignProperties_From_EventHubEventSubscriptionDestination populates our EventHubEventSubscriptionDestination from the provided source EventHubEventSubscriptionDestination
func (destination *EventHubEventSubscriptionDestination) AssignProperties_From_EventHubEventSubscriptionDestination(source *v20200601s.EventHubEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventHubEventSubscriptionDestination populates the provided destination EventHubEventSubscriptionDestination from our EventHubEventSubscriptionDestination
func (destination *EventHubEventSubscriptionDestination) AssignProperties_To_EventHubEventSubscriptionDestination(target *v20200601s.EventHubEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceReference
	if destination.ResourceReference != nil {
		resourceReference := destination.ResourceReference.Copy()
		target.ResourceReference = &resourceReference
	} else {
		target.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventHubEventSubscriptionDestination_STATUS
// Deprecated version of EventHubEventSubscriptionDestination_STATUS. Use v1beta20200601.EventHubEventSubscriptionDestination_STATUS instead
type EventHubEventSubscriptionDestination_STATUS struct {
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId   *string                `json:"resourceId,omitempty"`
}

// AssignProperties_From_EventHubEventSubscriptionDestination_STATUS populates our EventHubEventSubscriptionDestination_STATUS from the provided source EventHubEventSubscriptionDestination_STATUS
func (destination *EventHubEventSubscriptionDestination_STATUS) AssignProperties_From_EventHubEventSubscriptionDestination_STATUS(source *v20200601s.EventHubEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EventHubEventSubscriptionDestination_STATUS populates the provided destination EventHubEventSubscriptionDestination_STATUS from our EventHubEventSubscriptionDestination_STATUS
func (destination *EventHubEventSubscriptionDestination_STATUS) AssignProperties_To_EventHubEventSubscriptionDestination_STATUS(target *v20200601s.EventHubEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceId
	target.ResourceId = genruntime.ClonePointerToString(destination.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.HybridConnectionEventSubscriptionDestination
// Deprecated version of HybridConnectionEventSubscriptionDestination. Use v1beta20200601.HybridConnectionEventSubscriptionDestination instead
type HybridConnectionEventSubscriptionDestination struct {
	EndpointType      *string                       `json:"endpointType,omitempty"`
	PropertyBag       genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

// AssignProperties_From_HybridConnectionEventSubscriptionDestination populates our HybridConnectionEventSubscriptionDestination from the provided source HybridConnectionEventSubscriptionDestination
func (destination *HybridConnectionEventSubscriptionDestination) AssignProperties_From_HybridConnectionEventSubscriptionDestination(source *v20200601s.HybridConnectionEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HybridConnectionEventSubscriptionDestination populates the provided destination HybridConnectionEventSubscriptionDestination from our HybridConnectionEventSubscriptionDestination
func (destination *HybridConnectionEventSubscriptionDestination) AssignProperties_To_HybridConnectionEventSubscriptionDestination(target *v20200601s.HybridConnectionEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceReference
	if destination.ResourceReference != nil {
		resourceReference := destination.ResourceReference.Copy()
		target.ResourceReference = &resourceReference
	} else {
		target.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.HybridConnectionEventSubscriptionDestination_STATUS
// Deprecated version of HybridConnectionEventSubscriptionDestination_STATUS. Use v1beta20200601.HybridConnectionEventSubscriptionDestination_STATUS instead
type HybridConnectionEventSubscriptionDestination_STATUS struct {
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId   *string                `json:"resourceId,omitempty"`
}

// AssignProperties_From_HybridConnectionEventSubscriptionDestination_STATUS populates our HybridConnectionEventSubscriptionDestination_STATUS from the provided source HybridConnectionEventSubscriptionDestination_STATUS
func (destination *HybridConnectionEventSubscriptionDestination_STATUS) AssignProperties_From_HybridConnectionEventSubscriptionDestination_STATUS(source *v20200601s.HybridConnectionEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HybridConnectionEventSubscriptionDestination_STATUS populates the provided destination HybridConnectionEventSubscriptionDestination_STATUS from our HybridConnectionEventSubscriptionDestination_STATUS
func (destination *HybridConnectionEventSubscriptionDestination_STATUS) AssignProperties_To_HybridConnectionEventSubscriptionDestination_STATUS(target *v20200601s.HybridConnectionEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceId
	target.ResourceId = genruntime.ClonePointerToString(destination.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.ServiceBusQueueEventSubscriptionDestination
// Deprecated version of ServiceBusQueueEventSubscriptionDestination. Use v1beta20200601.ServiceBusQueueEventSubscriptionDestination instead
type ServiceBusQueueEventSubscriptionDestination struct {
	EndpointType      *string                       `json:"endpointType,omitempty"`
	PropertyBag       genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

// AssignProperties_From_ServiceBusQueueEventSubscriptionDestination populates our ServiceBusQueueEventSubscriptionDestination from the provided source ServiceBusQueueEventSubscriptionDestination
func (destination *ServiceBusQueueEventSubscriptionDestination) AssignProperties_From_ServiceBusQueueEventSubscriptionDestination(source *v20200601s.ServiceBusQueueEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusQueueEventSubscriptionDestination populates the provided destination ServiceBusQueueEventSubscriptionDestination from our ServiceBusQueueEventSubscriptionDestination
func (destination *ServiceBusQueueEventSubscriptionDestination) AssignProperties_To_ServiceBusQueueEventSubscriptionDestination(target *v20200601s.ServiceBusQueueEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceReference
	if destination.ResourceReference != nil {
		resourceReference := destination.ResourceReference.Copy()
		target.ResourceReference = &resourceReference
	} else {
		target.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.ServiceBusQueueEventSubscriptionDestination_STATUS
// Deprecated version of ServiceBusQueueEventSubscriptionDestination_STATUS. Use v1beta20200601.ServiceBusQueueEventSubscriptionDestination_STATUS instead
type ServiceBusQueueEventSubscriptionDestination_STATUS struct {
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId   *string                `json:"resourceId,omitempty"`
}

// AssignProperties_From_ServiceBusQueueEventSubscriptionDestination_STATUS populates our ServiceBusQueueEventSubscriptionDestination_STATUS from the provided source ServiceBusQueueEventSubscriptionDestination_STATUS
func (destination *ServiceBusQueueEventSubscriptionDestination_STATUS) AssignProperties_From_ServiceBusQueueEventSubscriptionDestination_STATUS(source *v20200601s.ServiceBusQueueEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusQueueEventSubscriptionDestination_STATUS populates the provided destination ServiceBusQueueEventSubscriptionDestination_STATUS from our ServiceBusQueueEventSubscriptionDestination_STATUS
func (destination *ServiceBusQueueEventSubscriptionDestination_STATUS) AssignProperties_To_ServiceBusQueueEventSubscriptionDestination_STATUS(target *v20200601s.ServiceBusQueueEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceId
	target.ResourceId = genruntime.ClonePointerToString(destination.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.ServiceBusTopicEventSubscriptionDestination
// Deprecated version of ServiceBusTopicEventSubscriptionDestination. Use v1beta20200601.ServiceBusTopicEventSubscriptionDestination instead
type ServiceBusTopicEventSubscriptionDestination struct {
	EndpointType      *string                       `json:"endpointType,omitempty"`
	PropertyBag       genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

// AssignProperties_From_ServiceBusTopicEventSubscriptionDestination populates our ServiceBusTopicEventSubscriptionDestination from the provided source ServiceBusTopicEventSubscriptionDestination
func (destination *ServiceBusTopicEventSubscriptionDestination) AssignProperties_From_ServiceBusTopicEventSubscriptionDestination(source *v20200601s.ServiceBusTopicEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusTopicEventSubscriptionDestination populates the provided destination ServiceBusTopicEventSubscriptionDestination from our ServiceBusTopicEventSubscriptionDestination
func (destination *ServiceBusTopicEventSubscriptionDestination) AssignProperties_To_ServiceBusTopicEventSubscriptionDestination(target *v20200601s.ServiceBusTopicEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceReference
	if destination.ResourceReference != nil {
		resourceReference := destination.ResourceReference.Copy()
		target.ResourceReference = &resourceReference
	} else {
		target.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.ServiceBusTopicEventSubscriptionDestination_STATUS
// Deprecated version of ServiceBusTopicEventSubscriptionDestination_STATUS. Use v1beta20200601.ServiceBusTopicEventSubscriptionDestination_STATUS instead
type ServiceBusTopicEventSubscriptionDestination_STATUS struct {
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId   *string                `json:"resourceId,omitempty"`
}

// AssignProperties_From_ServiceBusTopicEventSubscriptionDestination_STATUS populates our ServiceBusTopicEventSubscriptionDestination_STATUS from the provided source ServiceBusTopicEventSubscriptionDestination_STATUS
func (destination *ServiceBusTopicEventSubscriptionDestination_STATUS) AssignProperties_From_ServiceBusTopicEventSubscriptionDestination_STATUS(source *v20200601s.ServiceBusTopicEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceBusTopicEventSubscriptionDestination_STATUS populates the provided destination ServiceBusTopicEventSubscriptionDestination_STATUS from our ServiceBusTopicEventSubscriptionDestination_STATUS
func (destination *ServiceBusTopicEventSubscriptionDestination_STATUS) AssignProperties_To_ServiceBusTopicEventSubscriptionDestination_STATUS(target *v20200601s.ServiceBusTopicEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceId
	target.ResourceId = genruntime.ClonePointerToString(destination.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StorageBlobDeadLetterDestination
// Deprecated version of StorageBlobDeadLetterDestination. Use v1beta20200601.StorageBlobDeadLetterDestination instead
type StorageBlobDeadLetterDestination struct {
	BlobContainerName *string                       `json:"blobContainerName,omitempty"`
	EndpointType      *string                       `json:"endpointType,omitempty"`
	PropertyBag       genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

// AssignProperties_From_StorageBlobDeadLetterDestination populates our StorageBlobDeadLetterDestination from the provided source StorageBlobDeadLetterDestination
func (destination *StorageBlobDeadLetterDestination) AssignProperties_From_StorageBlobDeadLetterDestination(source *v20200601s.StorageBlobDeadLetterDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BlobContainerName
	destination.BlobContainerName = genruntime.ClonePointerToString(source.BlobContainerName)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageBlobDeadLetterDestination populates the provided destination StorageBlobDeadLetterDestination from our StorageBlobDeadLetterDestination
func (destination *StorageBlobDeadLetterDestination) AssignProperties_To_StorageBlobDeadLetterDestination(target *v20200601s.StorageBlobDeadLetterDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// BlobContainerName
	target.BlobContainerName = genruntime.ClonePointerToString(destination.BlobContainerName)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceReference
	if destination.ResourceReference != nil {
		resourceReference := destination.ResourceReference.Copy()
		target.ResourceReference = &resourceReference
	} else {
		target.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StorageBlobDeadLetterDestination_STATUS
// Deprecated version of StorageBlobDeadLetterDestination_STATUS. Use v1beta20200601.StorageBlobDeadLetterDestination_STATUS instead
type StorageBlobDeadLetterDestination_STATUS struct {
	BlobContainerName *string                `json:"blobContainerName,omitempty"`
	EndpointType      *string                `json:"endpointType,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId        *string                `json:"resourceId,omitempty"`
}

// AssignProperties_From_StorageBlobDeadLetterDestination_STATUS populates our StorageBlobDeadLetterDestination_STATUS from the provided source StorageBlobDeadLetterDestination_STATUS
func (destination *StorageBlobDeadLetterDestination_STATUS) AssignProperties_From_StorageBlobDeadLetterDestination_STATUS(source *v20200601s.StorageBlobDeadLetterDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BlobContainerName
	destination.BlobContainerName = genruntime.ClonePointerToString(source.BlobContainerName)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageBlobDeadLetterDestination_STATUS populates the provided destination StorageBlobDeadLetterDestination_STATUS from our StorageBlobDeadLetterDestination_STATUS
func (destination *StorageBlobDeadLetterDestination_STATUS) AssignProperties_To_StorageBlobDeadLetterDestination_STATUS(target *v20200601s.StorageBlobDeadLetterDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// BlobContainerName
	target.BlobContainerName = genruntime.ClonePointerToString(destination.BlobContainerName)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// ResourceId
	target.ResourceId = genruntime.ClonePointerToString(destination.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StorageQueueEventSubscriptionDestination
// Deprecated version of StorageQueueEventSubscriptionDestination. Use v1beta20200601.StorageQueueEventSubscriptionDestination instead
type StorageQueueEventSubscriptionDestination struct {
	EndpointType      *string                       `json:"endpointType,omitempty"`
	PropertyBag       genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	QueueName         *string                       `json:"queueName,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

// AssignProperties_From_StorageQueueEventSubscriptionDestination populates our StorageQueueEventSubscriptionDestination from the provided source StorageQueueEventSubscriptionDestination
func (destination *StorageQueueEventSubscriptionDestination) AssignProperties_From_StorageQueueEventSubscriptionDestination(source *v20200601s.StorageQueueEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// QueueName
	destination.QueueName = genruntime.ClonePointerToString(source.QueueName)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageQueueEventSubscriptionDestination populates the provided destination StorageQueueEventSubscriptionDestination from our StorageQueueEventSubscriptionDestination
func (destination *StorageQueueEventSubscriptionDestination) AssignProperties_To_StorageQueueEventSubscriptionDestination(target *v20200601s.StorageQueueEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// QueueName
	target.QueueName = genruntime.ClonePointerToString(destination.QueueName)

	// ResourceReference
	if destination.ResourceReference != nil {
		resourceReference := destination.ResourceReference.Copy()
		target.ResourceReference = &resourceReference
	} else {
		target.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StorageQueueEventSubscriptionDestination_STATUS
// Deprecated version of StorageQueueEventSubscriptionDestination_STATUS. Use v1beta20200601.StorageQueueEventSubscriptionDestination_STATUS instead
type StorageQueueEventSubscriptionDestination_STATUS struct {
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	QueueName    *string                `json:"queueName,omitempty"`
	ResourceId   *string                `json:"resourceId,omitempty"`
}

// AssignProperties_From_StorageQueueEventSubscriptionDestination_STATUS populates our StorageQueueEventSubscriptionDestination_STATUS from the provided source StorageQueueEventSubscriptionDestination_STATUS
func (destination *StorageQueueEventSubscriptionDestination_STATUS) AssignProperties_From_StorageQueueEventSubscriptionDestination_STATUS(source *v20200601s.StorageQueueEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// QueueName
	destination.QueueName = genruntime.ClonePointerToString(source.QueueName)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageQueueEventSubscriptionDestination_STATUS populates the provided destination StorageQueueEventSubscriptionDestination_STATUS from our StorageQueueEventSubscriptionDestination_STATUS
func (destination *StorageQueueEventSubscriptionDestination_STATUS) AssignProperties_To_StorageQueueEventSubscriptionDestination_STATUS(target *v20200601s.StorageQueueEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// QueueName
	target.QueueName = genruntime.ClonePointerToString(destination.QueueName)

	// ResourceId
	target.ResourceId = genruntime.ClonePointerToString(destination.ResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.WebHookEventSubscriptionDestination
// Deprecated version of WebHookEventSubscriptionDestination. Use v1beta20200601.WebHookEventSubscriptionDestination instead
type WebHookEventSubscriptionDestination struct {
	AzureActiveDirectoryApplicationIdOrUri *string                     `json:"azureActiveDirectoryApplicationIdOrUri,omitempty"`
	AzureActiveDirectoryTenantId           *string                     `json:"azureActiveDirectoryTenantId,omitempty"`
	EndpointType                           *string                     `json:"endpointType,omitempty"`
	EndpointUrl                            *genruntime.SecretReference `json:"endpointUrl,omitempty"`
	MaxEventsPerBatch                      *int                        `json:"maxEventsPerBatch,omitempty"`
	PreferredBatchSizeInKilobytes          *int                        `json:"preferredBatchSizeInKilobytes,omitempty"`
	PropertyBag                            genruntime.PropertyBag      `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_WebHookEventSubscriptionDestination populates our WebHookEventSubscriptionDestination from the provided source WebHookEventSubscriptionDestination
func (destination *WebHookEventSubscriptionDestination) AssignProperties_From_WebHookEventSubscriptionDestination(source *v20200601s.WebHookEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureActiveDirectoryApplicationIdOrUri
	destination.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(source.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	destination.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(source.AzureActiveDirectoryTenantId)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// EndpointUrl
	if source.EndpointUrl != nil {
		endpointUrl := source.EndpointUrl.Copy()
		destination.EndpointUrl = &endpointUrl
	} else {
		destination.EndpointUrl = nil
	}

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebHookEventSubscriptionDestination populates the provided destination WebHookEventSubscriptionDestination from our WebHookEventSubscriptionDestination
func (destination *WebHookEventSubscriptionDestination) AssignProperties_To_WebHookEventSubscriptionDestination(target *v20200601s.WebHookEventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// AzureActiveDirectoryApplicationIdOrUri
	target.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(destination.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	target.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(destination.AzureActiveDirectoryTenantId)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// EndpointUrl
	if destination.EndpointUrl != nil {
		endpointUrl := destination.EndpointUrl.Copy()
		target.EndpointUrl = &endpointUrl
	} else {
		target.EndpointUrl = nil
	}

	// MaxEventsPerBatch
	target.MaxEventsPerBatch = genruntime.ClonePointerToInt(destination.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	target.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(destination.PreferredBatchSizeInKilobytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.WebHookEventSubscriptionDestination_STATUS
// Deprecated version of WebHookEventSubscriptionDestination_STATUS. Use v1beta20200601.WebHookEventSubscriptionDestination_STATUS instead
type WebHookEventSubscriptionDestination_STATUS struct {
	AzureActiveDirectoryApplicationIdOrUri *string                `json:"azureActiveDirectoryApplicationIdOrUri,omitempty"`
	AzureActiveDirectoryTenantId           *string                `json:"azureActiveDirectoryTenantId,omitempty"`
	EndpointBaseUrl                        *string                `json:"endpointBaseUrl,omitempty"`
	EndpointType                           *string                `json:"endpointType,omitempty"`
	MaxEventsPerBatch                      *int                   `json:"maxEventsPerBatch,omitempty"`
	PreferredBatchSizeInKilobytes          *int                   `json:"preferredBatchSizeInKilobytes,omitempty"`
	PropertyBag                            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_WebHookEventSubscriptionDestination_STATUS populates our WebHookEventSubscriptionDestination_STATUS from the provided source WebHookEventSubscriptionDestination_STATUS
func (destination *WebHookEventSubscriptionDestination_STATUS) AssignProperties_From_WebHookEventSubscriptionDestination_STATUS(source *v20200601s.WebHookEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureActiveDirectoryApplicationIdOrUri
	destination.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(source.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	destination.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(source.AzureActiveDirectoryTenantId)

	// EndpointBaseUrl
	destination.EndpointBaseUrl = genruntime.ClonePointerToString(source.EndpointBaseUrl)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebHookEventSubscriptionDestination_STATUS populates the provided destination WebHookEventSubscriptionDestination_STATUS from our WebHookEventSubscriptionDestination_STATUS
func (destination *WebHookEventSubscriptionDestination_STATUS) AssignProperties_To_WebHookEventSubscriptionDestination_STATUS(target *v20200601s.WebHookEventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// AzureActiveDirectoryApplicationIdOrUri
	target.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(destination.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	target.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(destination.AzureActiveDirectoryTenantId)

	// EndpointBaseUrl
	target.EndpointBaseUrl = genruntime.ClonePointerToString(destination.EndpointBaseUrl)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// MaxEventsPerBatch
	target.MaxEventsPerBatch = genruntime.ClonePointerToInt(destination.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	target.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(destination.PreferredBatchSizeInKilobytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.BoolEqualsAdvancedFilter
// Deprecated version of BoolEqualsAdvancedFilter. Use v1beta20200601.BoolEqualsAdvancedFilter instead
type BoolEqualsAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *bool                  `json:"value,omitempty"`
}

// AssignProperties_From_BoolEqualsAdvancedFilter populates our BoolEqualsAdvancedFilter from the provided source BoolEqualsAdvancedFilter
func (filter *BoolEqualsAdvancedFilter) AssignProperties_From_BoolEqualsAdvancedFilter(source *v20200601s.BoolEqualsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_BoolEqualsAdvancedFilter populates the provided destination BoolEqualsAdvancedFilter from our BoolEqualsAdvancedFilter
func (filter *BoolEqualsAdvancedFilter) AssignProperties_To_BoolEqualsAdvancedFilter(destination *v20200601s.BoolEqualsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.BoolEqualsAdvancedFilter_STATUS
// Deprecated version of BoolEqualsAdvancedFilter_STATUS. Use v1beta20200601.BoolEqualsAdvancedFilter_STATUS instead
type BoolEqualsAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *bool                  `json:"value,omitempty"`
}

// AssignProperties_From_BoolEqualsAdvancedFilter_STATUS populates our BoolEqualsAdvancedFilter_STATUS from the provided source BoolEqualsAdvancedFilter_STATUS
func (filter *BoolEqualsAdvancedFilter_STATUS) AssignProperties_From_BoolEqualsAdvancedFilter_STATUS(source *v20200601s.BoolEqualsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_BoolEqualsAdvancedFilter_STATUS populates the provided destination BoolEqualsAdvancedFilter_STATUS from our BoolEqualsAdvancedFilter_STATUS
func (filter *BoolEqualsAdvancedFilter_STATUS) AssignProperties_To_BoolEqualsAdvancedFilter_STATUS(destination *v20200601s.BoolEqualsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberGreaterThanAdvancedFilter
// Deprecated version of NumberGreaterThanAdvancedFilter. Use v1beta20200601.NumberGreaterThanAdvancedFilter instead
type NumberGreaterThanAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberGreaterThanAdvancedFilter populates our NumberGreaterThanAdvancedFilter from the provided source NumberGreaterThanAdvancedFilter
func (filter *NumberGreaterThanAdvancedFilter) AssignProperties_From_NumberGreaterThanAdvancedFilter(source *v20200601s.NumberGreaterThanAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberGreaterThanAdvancedFilter populates the provided destination NumberGreaterThanAdvancedFilter from our NumberGreaterThanAdvancedFilter
func (filter *NumberGreaterThanAdvancedFilter) AssignProperties_To_NumberGreaterThanAdvancedFilter(destination *v20200601s.NumberGreaterThanAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberGreaterThanAdvancedFilter_STATUS
// Deprecated version of NumberGreaterThanAdvancedFilter_STATUS. Use v1beta20200601.NumberGreaterThanAdvancedFilter_STATUS instead
type NumberGreaterThanAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberGreaterThanAdvancedFilter_STATUS populates our NumberGreaterThanAdvancedFilter_STATUS from the provided source NumberGreaterThanAdvancedFilter_STATUS
func (filter *NumberGreaterThanAdvancedFilter_STATUS) AssignProperties_From_NumberGreaterThanAdvancedFilter_STATUS(source *v20200601s.NumberGreaterThanAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberGreaterThanAdvancedFilter_STATUS populates the provided destination NumberGreaterThanAdvancedFilter_STATUS from our NumberGreaterThanAdvancedFilter_STATUS
func (filter *NumberGreaterThanAdvancedFilter_STATUS) AssignProperties_To_NumberGreaterThanAdvancedFilter_STATUS(destination *v20200601s.NumberGreaterThanAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberGreaterThanOrEqualsAdvancedFilter
// Deprecated version of NumberGreaterThanOrEqualsAdvancedFilter. Use v1beta20200601.NumberGreaterThanOrEqualsAdvancedFilter instead
type NumberGreaterThanOrEqualsAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter populates our NumberGreaterThanOrEqualsAdvancedFilter from the provided source NumberGreaterThanOrEqualsAdvancedFilter
func (filter *NumberGreaterThanOrEqualsAdvancedFilter) AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter(source *v20200601s.NumberGreaterThanOrEqualsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter populates the provided destination NumberGreaterThanOrEqualsAdvancedFilter from our NumberGreaterThanOrEqualsAdvancedFilter
func (filter *NumberGreaterThanOrEqualsAdvancedFilter) AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter(destination *v20200601s.NumberGreaterThanOrEqualsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberGreaterThanOrEqualsAdvancedFilter_STATUS
// Deprecated version of NumberGreaterThanOrEqualsAdvancedFilter_STATUS. Use v1beta20200601.NumberGreaterThanOrEqualsAdvancedFilter_STATUS instead
type NumberGreaterThanOrEqualsAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter_STATUS populates our NumberGreaterThanOrEqualsAdvancedFilter_STATUS from the provided source NumberGreaterThanOrEqualsAdvancedFilter_STATUS
func (filter *NumberGreaterThanOrEqualsAdvancedFilter_STATUS) AssignProperties_From_NumberGreaterThanOrEqualsAdvancedFilter_STATUS(source *v20200601s.NumberGreaterThanOrEqualsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter_STATUS populates the provided destination NumberGreaterThanOrEqualsAdvancedFilter_STATUS from our NumberGreaterThanOrEqualsAdvancedFilter_STATUS
func (filter *NumberGreaterThanOrEqualsAdvancedFilter_STATUS) AssignProperties_To_NumberGreaterThanOrEqualsAdvancedFilter_STATUS(destination *v20200601s.NumberGreaterThanOrEqualsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberInAdvancedFilter
// Deprecated version of NumberInAdvancedFilter. Use v1beta20200601.NumberInAdvancedFilter instead
type NumberInAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []float64              `json:"values,omitempty"`
}

// AssignProperties_From_NumberInAdvancedFilter populates our NumberInAdvancedFilter from the provided source NumberInAdvancedFilter
func (filter *NumberInAdvancedFilter) AssignProperties_From_NumberInAdvancedFilter(source *v20200601s.NumberInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		filter.Values = valueList
	} else {
		filter.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberInAdvancedFilter populates the provided destination NumberInAdvancedFilter from our NumberInAdvancedFilter
func (filter *NumberInAdvancedFilter) AssignProperties_To_NumberInAdvancedFilter(destination *v20200601s.NumberInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	if filter.Values != nil {
		valueList := make([]float64, len(filter.Values))
		for valueIndex, valueItem := range filter.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberInAdvancedFilter_STATUS
// Deprecated version of NumberInAdvancedFilter_STATUS. Use v1beta20200601.NumberInAdvancedFilter_STATUS instead
type NumberInAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []float64              `json:"values,omitempty"`
}

// AssignProperties_From_NumberInAdvancedFilter_STATUS populates our NumberInAdvancedFilter_STATUS from the provided source NumberInAdvancedFilter_STATUS
func (filter *NumberInAdvancedFilter_STATUS) AssignProperties_From_NumberInAdvancedFilter_STATUS(source *v20200601s.NumberInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		filter.Values = valueList
	} else {
		filter.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberInAdvancedFilter_STATUS populates the provided destination NumberInAdvancedFilter_STATUS from our NumberInAdvancedFilter_STATUS
func (filter *NumberInAdvancedFilter_STATUS) AssignProperties_To_NumberInAdvancedFilter_STATUS(destination *v20200601s.NumberInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	if filter.Values != nil {
		valueList := make([]float64, len(filter.Values))
		for valueIndex, valueItem := range filter.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberLessThanAdvancedFilter
// Deprecated version of NumberLessThanAdvancedFilter. Use v1beta20200601.NumberLessThanAdvancedFilter instead
type NumberLessThanAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberLessThanAdvancedFilter populates our NumberLessThanAdvancedFilter from the provided source NumberLessThanAdvancedFilter
func (filter *NumberLessThanAdvancedFilter) AssignProperties_From_NumberLessThanAdvancedFilter(source *v20200601s.NumberLessThanAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberLessThanAdvancedFilter populates the provided destination NumberLessThanAdvancedFilter from our NumberLessThanAdvancedFilter
func (filter *NumberLessThanAdvancedFilter) AssignProperties_To_NumberLessThanAdvancedFilter(destination *v20200601s.NumberLessThanAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberLessThanAdvancedFilter_STATUS
// Deprecated version of NumberLessThanAdvancedFilter_STATUS. Use v1beta20200601.NumberLessThanAdvancedFilter_STATUS instead
type NumberLessThanAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberLessThanAdvancedFilter_STATUS populates our NumberLessThanAdvancedFilter_STATUS from the provided source NumberLessThanAdvancedFilter_STATUS
func (filter *NumberLessThanAdvancedFilter_STATUS) AssignProperties_From_NumberLessThanAdvancedFilter_STATUS(source *v20200601s.NumberLessThanAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberLessThanAdvancedFilter_STATUS populates the provided destination NumberLessThanAdvancedFilter_STATUS from our NumberLessThanAdvancedFilter_STATUS
func (filter *NumberLessThanAdvancedFilter_STATUS) AssignProperties_To_NumberLessThanAdvancedFilter_STATUS(destination *v20200601s.NumberLessThanAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberLessThanOrEqualsAdvancedFilter
// Deprecated version of NumberLessThanOrEqualsAdvancedFilter. Use v1beta20200601.NumberLessThanOrEqualsAdvancedFilter instead
type NumberLessThanOrEqualsAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter populates our NumberLessThanOrEqualsAdvancedFilter from the provided source NumberLessThanOrEqualsAdvancedFilter
func (filter *NumberLessThanOrEqualsAdvancedFilter) AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter(source *v20200601s.NumberLessThanOrEqualsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter populates the provided destination NumberLessThanOrEqualsAdvancedFilter from our NumberLessThanOrEqualsAdvancedFilter
func (filter *NumberLessThanOrEqualsAdvancedFilter) AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter(destination *v20200601s.NumberLessThanOrEqualsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberLessThanOrEqualsAdvancedFilter_STATUS
// Deprecated version of NumberLessThanOrEqualsAdvancedFilter_STATUS. Use v1beta20200601.NumberLessThanOrEqualsAdvancedFilter_STATUS instead
type NumberLessThanOrEqualsAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value        *float64               `json:"value,omitempty"`
}

// AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter_STATUS populates our NumberLessThanOrEqualsAdvancedFilter_STATUS from the provided source NumberLessThanOrEqualsAdvancedFilter_STATUS
func (filter *NumberLessThanOrEqualsAdvancedFilter_STATUS) AssignProperties_From_NumberLessThanOrEqualsAdvancedFilter_STATUS(source *v20200601s.NumberLessThanOrEqualsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter_STATUS populates the provided destination NumberLessThanOrEqualsAdvancedFilter_STATUS from our NumberLessThanOrEqualsAdvancedFilter_STATUS
func (filter *NumberLessThanOrEqualsAdvancedFilter_STATUS) AssignProperties_To_NumberLessThanOrEqualsAdvancedFilter_STATUS(destination *v20200601s.NumberLessThanOrEqualsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberNotInAdvancedFilter
// Deprecated version of NumberNotInAdvancedFilter. Use v1beta20200601.NumberNotInAdvancedFilter instead
type NumberNotInAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []float64              `json:"values,omitempty"`
}

// AssignProperties_From_NumberNotInAdvancedFilter populates our NumberNotInAdvancedFilter from the provided source NumberNotInAdvancedFilter
func (filter *NumberNotInAdvancedFilter) AssignProperties_From_NumberNotInAdvancedFilter(source *v20200601s.NumberNotInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		filter.Values = valueList
	} else {
		filter.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberNotInAdvancedFilter populates the provided destination NumberNotInAdvancedFilter from our NumberNotInAdvancedFilter
func (filter *NumberNotInAdvancedFilter) AssignProperties_To_NumberNotInAdvancedFilter(destination *v20200601s.NumberNotInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	if filter.Values != nil {
		valueList := make([]float64, len(filter.Values))
		for valueIndex, valueItem := range filter.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.NumberNotInAdvancedFilter_STATUS
// Deprecated version of NumberNotInAdvancedFilter_STATUS. Use v1beta20200601.NumberNotInAdvancedFilter_STATUS instead
type NumberNotInAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []float64              `json:"values,omitempty"`
}

// AssignProperties_From_NumberNotInAdvancedFilter_STATUS populates our NumberNotInAdvancedFilter_STATUS from the provided source NumberNotInAdvancedFilter_STATUS
func (filter *NumberNotInAdvancedFilter_STATUS) AssignProperties_From_NumberNotInAdvancedFilter_STATUS(source *v20200601s.NumberNotInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		filter.Values = valueList
	} else {
		filter.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NumberNotInAdvancedFilter_STATUS populates the provided destination NumberNotInAdvancedFilter_STATUS from our NumberNotInAdvancedFilter_STATUS
func (filter *NumberNotInAdvancedFilter_STATUS) AssignProperties_To_NumberNotInAdvancedFilter_STATUS(destination *v20200601s.NumberNotInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	if filter.Values != nil {
		valueList := make([]float64, len(filter.Values))
		for valueIndex, valueItem := range filter.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringBeginsWithAdvancedFilter
// Deprecated version of StringBeginsWithAdvancedFilter. Use v1beta20200601.StringBeginsWithAdvancedFilter instead
type StringBeginsWithAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringBeginsWithAdvancedFilter populates our StringBeginsWithAdvancedFilter from the provided source StringBeginsWithAdvancedFilter
func (filter *StringBeginsWithAdvancedFilter) AssignProperties_From_StringBeginsWithAdvancedFilter(source *v20200601s.StringBeginsWithAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringBeginsWithAdvancedFilter populates the provided destination StringBeginsWithAdvancedFilter from our StringBeginsWithAdvancedFilter
func (filter *StringBeginsWithAdvancedFilter) AssignProperties_To_StringBeginsWithAdvancedFilter(destination *v20200601s.StringBeginsWithAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringBeginsWithAdvancedFilter_STATUS
// Deprecated version of StringBeginsWithAdvancedFilter_STATUS. Use v1beta20200601.StringBeginsWithAdvancedFilter_STATUS instead
type StringBeginsWithAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringBeginsWithAdvancedFilter_STATUS populates our StringBeginsWithAdvancedFilter_STATUS from the provided source StringBeginsWithAdvancedFilter_STATUS
func (filter *StringBeginsWithAdvancedFilter_STATUS) AssignProperties_From_StringBeginsWithAdvancedFilter_STATUS(source *v20200601s.StringBeginsWithAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringBeginsWithAdvancedFilter_STATUS populates the provided destination StringBeginsWithAdvancedFilter_STATUS from our StringBeginsWithAdvancedFilter_STATUS
func (filter *StringBeginsWithAdvancedFilter_STATUS) AssignProperties_To_StringBeginsWithAdvancedFilter_STATUS(destination *v20200601s.StringBeginsWithAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringContainsAdvancedFilter
// Deprecated version of StringContainsAdvancedFilter. Use v1beta20200601.StringContainsAdvancedFilter instead
type StringContainsAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringContainsAdvancedFilter populates our StringContainsAdvancedFilter from the provided source StringContainsAdvancedFilter
func (filter *StringContainsAdvancedFilter) AssignProperties_From_StringContainsAdvancedFilter(source *v20200601s.StringContainsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringContainsAdvancedFilter populates the provided destination StringContainsAdvancedFilter from our StringContainsAdvancedFilter
func (filter *StringContainsAdvancedFilter) AssignProperties_To_StringContainsAdvancedFilter(destination *v20200601s.StringContainsAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringContainsAdvancedFilter_STATUS
// Deprecated version of StringContainsAdvancedFilter_STATUS. Use v1beta20200601.StringContainsAdvancedFilter_STATUS instead
type StringContainsAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringContainsAdvancedFilter_STATUS populates our StringContainsAdvancedFilter_STATUS from the provided source StringContainsAdvancedFilter_STATUS
func (filter *StringContainsAdvancedFilter_STATUS) AssignProperties_From_StringContainsAdvancedFilter_STATUS(source *v20200601s.StringContainsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringContainsAdvancedFilter_STATUS populates the provided destination StringContainsAdvancedFilter_STATUS from our StringContainsAdvancedFilter_STATUS
func (filter *StringContainsAdvancedFilter_STATUS) AssignProperties_To_StringContainsAdvancedFilter_STATUS(destination *v20200601s.StringContainsAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringEndsWithAdvancedFilter
// Deprecated version of StringEndsWithAdvancedFilter. Use v1beta20200601.StringEndsWithAdvancedFilter instead
type StringEndsWithAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringEndsWithAdvancedFilter populates our StringEndsWithAdvancedFilter from the provided source StringEndsWithAdvancedFilter
func (filter *StringEndsWithAdvancedFilter) AssignProperties_From_StringEndsWithAdvancedFilter(source *v20200601s.StringEndsWithAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringEndsWithAdvancedFilter populates the provided destination StringEndsWithAdvancedFilter from our StringEndsWithAdvancedFilter
func (filter *StringEndsWithAdvancedFilter) AssignProperties_To_StringEndsWithAdvancedFilter(destination *v20200601s.StringEndsWithAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringEndsWithAdvancedFilter_STATUS
// Deprecated version of StringEndsWithAdvancedFilter_STATUS. Use v1beta20200601.StringEndsWithAdvancedFilter_STATUS instead
type StringEndsWithAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringEndsWithAdvancedFilter_STATUS populates our StringEndsWithAdvancedFilter_STATUS from the provided source StringEndsWithAdvancedFilter_STATUS
func (filter *StringEndsWithAdvancedFilter_STATUS) AssignProperties_From_StringEndsWithAdvancedFilter_STATUS(source *v20200601s.StringEndsWithAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringEndsWithAdvancedFilter_STATUS populates the provided destination StringEndsWithAdvancedFilter_STATUS from our StringEndsWithAdvancedFilter_STATUS
func (filter *StringEndsWithAdvancedFilter_STATUS) AssignProperties_To_StringEndsWithAdvancedFilter_STATUS(destination *v20200601s.StringEndsWithAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringInAdvancedFilter
// Deprecated version of StringInAdvancedFilter. Use v1beta20200601.StringInAdvancedFilter instead
type StringInAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringInAdvancedFilter populates our StringInAdvancedFilter from the provided source StringInAdvancedFilter
func (filter *StringInAdvancedFilter) AssignProperties_From_StringInAdvancedFilter(source *v20200601s.StringInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringInAdvancedFilter populates the provided destination StringInAdvancedFilter from our StringInAdvancedFilter
func (filter *StringInAdvancedFilter) AssignProperties_To_StringInAdvancedFilter(destination *v20200601s.StringInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringInAdvancedFilter_STATUS
// Deprecated version of StringInAdvancedFilter_STATUS. Use v1beta20200601.StringInAdvancedFilter_STATUS instead
type StringInAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringInAdvancedFilter_STATUS populates our StringInAdvancedFilter_STATUS from the provided source StringInAdvancedFilter_STATUS
func (filter *StringInAdvancedFilter_STATUS) AssignProperties_From_StringInAdvancedFilter_STATUS(source *v20200601s.StringInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringInAdvancedFilter_STATUS populates the provided destination StringInAdvancedFilter_STATUS from our StringInAdvancedFilter_STATUS
func (filter *StringInAdvancedFilter_STATUS) AssignProperties_To_StringInAdvancedFilter_STATUS(destination *v20200601s.StringInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringNotInAdvancedFilter
// Deprecated version of StringNotInAdvancedFilter. Use v1beta20200601.StringNotInAdvancedFilter instead
type StringNotInAdvancedFilter struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringNotInAdvancedFilter populates our StringNotInAdvancedFilter from the provided source StringNotInAdvancedFilter
func (filter *StringNotInAdvancedFilter) AssignProperties_From_StringNotInAdvancedFilter(source *v20200601s.StringNotInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringNotInAdvancedFilter populates the provided destination StringNotInAdvancedFilter from our StringNotInAdvancedFilter
func (filter *StringNotInAdvancedFilter) AssignProperties_To_StringNotInAdvancedFilter(destination *v20200601s.StringNotInAdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.StringNotInAdvancedFilter_STATUS
// Deprecated version of StringNotInAdvancedFilter_STATUS. Use v1beta20200601.StringNotInAdvancedFilter_STATUS instead
type StringNotInAdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Values       []string               `json:"values,omitempty"`
}

// AssignProperties_From_StringNotInAdvancedFilter_STATUS populates our StringNotInAdvancedFilter_STATUS from the provided source StringNotInAdvancedFilter_STATUS
func (filter *StringNotInAdvancedFilter_STATUS) AssignProperties_From_StringNotInAdvancedFilter_STATUS(source *v20200601s.StringNotInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Values
	filter.Values = genruntime.CloneSliceOfString(source.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StringNotInAdvancedFilter_STATUS populates the provided destination StringNotInAdvancedFilter_STATUS from our StringNotInAdvancedFilter_STATUS
func (filter *StringNotInAdvancedFilter_STATUS) AssignProperties_To_StringNotInAdvancedFilter_STATUS(destination *v20200601s.StringNotInAdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Values
	destination.Values = genruntime.CloneSliceOfString(filter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&EventSubscription{}, &EventSubscriptionList{})
}
