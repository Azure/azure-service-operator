// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601storage

import (
	"fmt"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1beta20200601storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20200601.EventSubscription
// Deprecated version of EventSubscription. Use v1beta20200601.EventSubscription instead
type EventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
<<<<<<< HEAD
	Spec              EventSubscription_Spec   `json:"spec,omitempty"`
=======
	Spec              EventSubscriptions_Spec  `json:"spec,omitempty"`
>>>>>>> main
	Status            EventSubscription_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &EventSubscription{}

// GetConditions returns the conditions of the resource
func (subscription *EventSubscription) GetConditions() conditions.Conditions {
	return subscription.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (subscription *EventSubscription) SetConditions(conditions conditions.Conditions) {
	subscription.Status.Conditions = conditions
}

var _ conversion.Convertible = &EventSubscription{}

// ConvertFrom populates our EventSubscription from the provided hub EventSubscription
func (subscription *EventSubscription) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200601s.EventSubscription)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/EventSubscription but received %T instead", hub)
	}

	return subscription.AssignPropertiesFromEventSubscription(source)
}

// ConvertTo populates the provided hub EventSubscription from our EventSubscription
func (subscription *EventSubscription) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200601s.EventSubscription)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/EventSubscription but received %T instead", hub)
	}

	return subscription.AssignPropertiesToEventSubscription(destination)
}

var _ genruntime.KubernetesResource = &EventSubscription{}

// AzureName returns the Azure name of the resource
func (subscription *EventSubscription) AzureName() string {
	return subscription.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (subscription EventSubscription) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (subscription *EventSubscription) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeExtension
}

// GetSpec returns the specification of this resource
func (subscription *EventSubscription) GetSpec() genruntime.ConvertibleSpec {
	return &subscription.Spec
}

// GetStatus returns the status of this resource
func (subscription *EventSubscription) GetStatus() genruntime.ConvertibleStatus {
	return &subscription.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/eventSubscriptions"
func (subscription *EventSubscription) GetType() string {
	return "Microsoft.EventGrid/eventSubscriptions"
}

// NewEmptyStatus returns a new empty (blank) status
func (subscription *EventSubscription) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EventSubscription_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (subscription *EventSubscription) Owner() *genruntime.ResourceReference {
	return &genruntime.ResourceReference{
		Group: subscription.Spec.Owner.Group,
		Kind:  subscription.Spec.Owner.Kind,
		Name:  subscription.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (subscription *EventSubscription) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EventSubscription_STATUS); ok {
		subscription.Status = *st
		return nil
	}

	// Convert status to required version
	var st EventSubscription_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	subscription.Status = st
	return nil
}

// AssignPropertiesFromEventSubscription populates our EventSubscription from the provided source EventSubscription
func (subscription *EventSubscription) AssignPropertiesFromEventSubscription(source *v20200601s.EventSubscription) error {

	// ObjectMeta
	subscription.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec EventSubscription_Spec
	err := spec.AssignPropertiesFromEventSubscription_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEventSubscription_Spec() to populate field Spec")
	}
	subscription.Spec = spec

	// Status
	var status EventSubscription_STATUS
<<<<<<< HEAD
	err = status.AssignPropertiesFromEventSubscription_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEventSubscription_STATUS() to populate field Status")
=======
	err = status.AssignPropertiesFromEventSubscriptionSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionSTATUS() to populate field Status")
>>>>>>> main
	}
	subscription.Status = status

	// No error
	return nil
}

// AssignPropertiesToEventSubscription populates the provided destination EventSubscription from our EventSubscription
func (subscription *EventSubscription) AssignPropertiesToEventSubscription(destination *v20200601s.EventSubscription) error {

	// ObjectMeta
	destination.ObjectMeta = *subscription.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200601s.EventSubscription_Spec
	err := subscription.Spec.AssignPropertiesToEventSubscription_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEventSubscription_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200601s.EventSubscription_STATUS
<<<<<<< HEAD
	err = subscription.Status.AssignPropertiesToEventSubscription_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEventSubscription_STATUS() to populate field Status")
=======
	err = subscription.Status.AssignPropertiesToEventSubscriptionSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionSTATUS() to populate field Status")
>>>>>>> main
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (subscription *EventSubscription) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: subscription.Spec.OriginalVersion,
		Kind:    "EventSubscription",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20200601.EventSubscription
// Deprecated version of EventSubscription. Use v1beta20200601.EventSubscription instead
type EventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventSubscription `json:"items"`
}

// Storage version of v1alpha1api20200601.EventSubscription_STATUS
// Deprecated version of EventSubscription_STATUS. Use v1beta20200601.EventSubscription_STATUS instead
type EventSubscription_STATUS struct {
	Conditions            []conditions.Condition               `json:"conditions,omitempty"`
	DeadLetterDestination *DeadLetterDestination_STATUS        `json:"deadLetterDestination,omitempty"`
	Destination           *EventSubscriptionDestination_STATUS `json:"destination,omitempty"`
	EventDeliverySchema   *string                              `json:"eventDeliverySchema,omitempty"`
	ExpirationTimeUtc     *string                              `json:"expirationTimeUtc,omitempty"`
	Filter                *EventSubscriptionFilter_STATUS      `json:"filter,omitempty"`
	Id                    *string                              `json:"id,omitempty"`
	Labels                []string                             `json:"labels,omitempty"`
	Name                  *string                              `json:"name,omitempty"`
	PropertyBag           genruntime.PropertyBag               `json:"$propertyBag,omitempty"`
	ProvisioningState     *string                              `json:"provisioningState,omitempty"`
	RetryPolicy           *RetryPolicy_STATUS                  `json:"retryPolicy,omitempty"`
	SystemData            *SystemData_STATUS                   `json:"systemData,omitempty"`
	Topic                 *string                              `json:"topic,omitempty"`
	Type                  *string                              `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EventSubscription_STATUS{}

// ConvertStatusFrom populates our EventSubscription_STATUS from the provided source
func (subscription *EventSubscription_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200601s.EventSubscription_STATUS)
	if ok {
		// Populate our instance from source
<<<<<<< HEAD
		return subscription.AssignPropertiesFromEventSubscription_STATUS(src)
=======
		return subscription.AssignPropertiesFromEventSubscriptionSTATUS(src)
>>>>>>> main
	}

	// Convert to an intermediate form
	src = &v20200601s.EventSubscription_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
<<<<<<< HEAD
	err = subscription.AssignPropertiesFromEventSubscription_STATUS(src)
=======
	err = subscription.AssignPropertiesFromEventSubscriptionSTATUS(src)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200601s.EventSubscription_STATUS)
	if ok {
		// Populate destination from our instance
<<<<<<< HEAD
		return subscription.AssignPropertiesToEventSubscription_STATUS(dst)
=======
		return subscription.AssignPropertiesToEventSubscriptionSTATUS(dst)
>>>>>>> main
	}

	// Convert to an intermediate form
	dst = &v20200601s.EventSubscription_STATUS{}
<<<<<<< HEAD
	err := subscription.AssignPropertiesToEventSubscription_STATUS(dst)
=======
	err := subscription.AssignPropertiesToEventSubscriptionSTATUS(dst)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromEventSubscription_STATUS populates our EventSubscription_STATUS from the provided source EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignPropertiesFromEventSubscription_STATUS(source *v20200601s.EventSubscription_STATUS) error {
=======
// AssignPropertiesFromEventSubscriptionSTATUS populates our EventSubscription_STATUS from the provided source EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignPropertiesFromEventSubscriptionSTATUS(source *v20200601s.EventSubscription_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	subscription.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination_STATUS
<<<<<<< HEAD
		err := deadLetterDestination.AssignPropertiesFromDeadLetterDestination_STATUS(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeadLetterDestination_STATUS() to populate field DeadLetterDestination")
=======
		err := deadLetterDestination.AssignPropertiesFromDeadLetterDestinationSTATUS(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeadLetterDestinationSTATUS() to populate field DeadLetterDestination")
>>>>>>> main
		}
		subscription.DeadLetterDestination = &deadLetterDestination
	} else {
		subscription.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination_STATUS
<<<<<<< HEAD
		err := destination.AssignPropertiesFromEventSubscriptionDestination_STATUS(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionDestination_STATUS() to populate field Destination")
=======
		err := destination.AssignPropertiesFromEventSubscriptionDestinationSTATUS(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionDestinationSTATUS() to populate field Destination")
>>>>>>> main
		}
		subscription.Destination = &destination
	} else {
		subscription.Destination = nil
	}

	// EventDeliverySchema
	subscription.EventDeliverySchema = genruntime.ClonePointerToString(source.EventDeliverySchema)

	// ExpirationTimeUtc
	subscription.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter_STATUS
<<<<<<< HEAD
		err := filter.AssignPropertiesFromEventSubscriptionFilter_STATUS(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionFilter_STATUS() to populate field Filter")
=======
		err := filter.AssignPropertiesFromEventSubscriptionFilterSTATUS(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionFilterSTATUS() to populate field Filter")
>>>>>>> main
		}
		subscription.Filter = &filter
	} else {
		subscription.Filter = nil
	}

	// Id
	subscription.Id = genruntime.ClonePointerToString(source.Id)

	// Labels
	subscription.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Name
	subscription.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	subscription.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy_STATUS
<<<<<<< HEAD
		err := retryPolicy.AssignPropertiesFromRetryPolicy_STATUS(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetryPolicy_STATUS() to populate field RetryPolicy")
=======
		err := retryPolicy.AssignPropertiesFromRetryPolicySTATUS(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetryPolicySTATUS() to populate field RetryPolicy")
>>>>>>> main
		}
		subscription.RetryPolicy = &retryPolicy
	} else {
		subscription.RetryPolicy = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
<<<<<<< HEAD
		err := systemDatum.AssignPropertiesFromSystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_STATUS() to populate field SystemData")
=======
		err := systemDatum.AssignPropertiesFromSystemDataSTATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataSTATUS() to populate field SystemData")
>>>>>>> main
		}
		subscription.SystemData = &systemDatum
	} else {
		subscription.SystemData = nil
	}

	// Topic
	subscription.Topic = genruntime.ClonePointerToString(source.Topic)

	// Type
	subscription.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		subscription.PropertyBag = propertyBag
	} else {
		subscription.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToEventSubscription_STATUS populates the provided destination EventSubscription_STATUS from our EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignPropertiesToEventSubscription_STATUS(destination *v20200601s.EventSubscription_STATUS) error {
=======
// AssignPropertiesToEventSubscriptionSTATUS populates the provided destination EventSubscription_STATUS from our EventSubscription_STATUS
func (subscription *EventSubscription_STATUS) AssignPropertiesToEventSubscriptionSTATUS(destination *v20200601s.EventSubscription_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(subscription.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(subscription.Conditions)

	// DeadLetterDestination
	if subscription.DeadLetterDestination != nil {
		var deadLetterDestination v20200601s.DeadLetterDestination_STATUS
<<<<<<< HEAD
		err := subscription.DeadLetterDestination.AssignPropertiesToDeadLetterDestination_STATUS(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeadLetterDestination_STATUS() to populate field DeadLetterDestination")
=======
		err := subscription.DeadLetterDestination.AssignPropertiesToDeadLetterDestinationSTATUS(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeadLetterDestinationSTATUS() to populate field DeadLetterDestination")
>>>>>>> main
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if subscription.Destination != nil {
		var destinationLocal v20200601s.EventSubscriptionDestination_STATUS
<<<<<<< HEAD
		err := subscription.Destination.AssignPropertiesToEventSubscriptionDestination_STATUS(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionDestination_STATUS() to populate field Destination")
=======
		err := subscription.Destination.AssignPropertiesToEventSubscriptionDestinationSTATUS(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionDestinationSTATUS() to populate field Destination")
>>>>>>> main
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	destination.EventDeliverySchema = genruntime.ClonePointerToString(subscription.EventDeliverySchema)

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(subscription.ExpirationTimeUtc)

	// Filter
	if subscription.Filter != nil {
		var filter v20200601s.EventSubscriptionFilter_STATUS
<<<<<<< HEAD
		err := subscription.Filter.AssignPropertiesToEventSubscriptionFilter_STATUS(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionFilter_STATUS() to populate field Filter")
=======
		err := subscription.Filter.AssignPropertiesToEventSubscriptionFilterSTATUS(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionFilterSTATUS() to populate field Filter")
>>>>>>> main
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(subscription.Id)

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(subscription.Labels)

	// Name
	destination.Name = genruntime.ClonePointerToString(subscription.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(subscription.ProvisioningState)

	// RetryPolicy
	if subscription.RetryPolicy != nil {
		var retryPolicy v20200601s.RetryPolicy_STATUS
<<<<<<< HEAD
		err := subscription.RetryPolicy.AssignPropertiesToRetryPolicy_STATUS(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetryPolicy_STATUS() to populate field RetryPolicy")
=======
		err := subscription.RetryPolicy.AssignPropertiesToRetryPolicySTATUS(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetryPolicySTATUS() to populate field RetryPolicy")
>>>>>>> main
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// SystemData
	if subscription.SystemData != nil {
		var systemDatum v20200601s.SystemData_STATUS
<<<<<<< HEAD
		err := subscription.SystemData.AssignPropertiesToSystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_STATUS() to populate field SystemData")
=======
		err := subscription.SystemData.AssignPropertiesToSystemDataSTATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataSTATUS() to populate field SystemData")
>>>>>>> main
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Topic
	destination.Topic = genruntime.ClonePointerToString(subscription.Topic)

	// Type
	destination.Type = genruntime.ClonePointerToString(subscription.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscription_Spec
type EventSubscription_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName             string                        `json:"azureName,omitempty"`
	DeadLetterDestination *DeadLetterDestination        `json:"deadLetterDestination,omitempty"`
	Destination           *EventSubscriptionDestination `json:"destination,omitempty"`
	EventDeliverySchema   *string                       `json:"eventDeliverySchema,omitempty"`
	ExpirationTimeUtc     *string                       `json:"expirationTimeUtc,omitempty"`
	Filter                *EventSubscriptionFilter      `json:"filter,omitempty"`
	Labels                []string                      `json:"labels,omitempty"`
	OriginalVersion       string                        `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. This resource is an
	// extension resource, which means that any other Azure resource can be its owner.
	Owner       *genruntime.ArbitraryOwnerReference `json:"owner,omitempty"`
	PropertyBag genruntime.PropertyBag              `json:"$propertyBag,omitempty"`
	RetryPolicy *RetryPolicy                        `json:"retryPolicy,omitempty"`
}

var _ genruntime.ConvertibleSpec = &EventSubscription_Spec{}

// ConvertSpecFrom populates our EventSubscription_Spec from the provided source
func (subscription *EventSubscription_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200601s.EventSubscription_Spec)
	if ok {
		// Populate our instance from source
		return subscription.AssignPropertiesFromEventSubscription_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.EventSubscription_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = subscription.AssignPropertiesFromEventSubscription_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our EventSubscription_Spec
func (subscription *EventSubscription_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200601s.EventSubscription_Spec)
	if ok {
		// Populate destination from our instance
		return subscription.AssignPropertiesToEventSubscription_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.EventSubscription_Spec{}
	err := subscription.AssignPropertiesToEventSubscription_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromEventSubscription_Spec populates our EventSubscription_Spec from the provided source EventSubscription_Spec
func (subscription *EventSubscription_Spec) AssignPropertiesFromEventSubscription_Spec(source *v20200601s.EventSubscription_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	subscription.AzureName = source.AzureName

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination
		err := deadLetterDestination.AssignPropertiesFromDeadLetterDestination(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeadLetterDestination() to populate field DeadLetterDestination")
		}
		subscription.DeadLetterDestination = &deadLetterDestination
	} else {
		subscription.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination
		err := destination.AssignPropertiesFromEventSubscriptionDestination(source.Destination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionDestination() to populate field Destination")
		}
		subscription.Destination = &destination
	} else {
		subscription.Destination = nil
	}

	// EventDeliverySchema
	subscription.EventDeliverySchema = genruntime.ClonePointerToString(source.EventDeliverySchema)

	// ExpirationTimeUtc
	subscription.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter
		err := filter.AssignPropertiesFromEventSubscriptionFilter(source.Filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventSubscriptionFilter() to populate field Filter")
		}
		subscription.Filter = &filter
	} else {
		subscription.Filter = nil
	}

	// Labels
	subscription.Labels = genruntime.CloneSliceOfString(source.Labels)

	// OriginalVersion
	subscription.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		subscription.Owner = &owner
	} else {
		subscription.Owner = nil
	}

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy
		err := retryPolicy.AssignPropertiesFromRetryPolicy(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetryPolicy() to populate field RetryPolicy")
		}
		subscription.RetryPolicy = &retryPolicy
	} else {
		subscription.RetryPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		subscription.PropertyBag = propertyBag
	} else {
		subscription.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscription_Spec populates the provided destination EventSubscription_Spec from our EventSubscription_Spec
func (subscription *EventSubscription_Spec) AssignPropertiesToEventSubscription_Spec(destination *v20200601s.EventSubscription_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(subscription.PropertyBag)

	// AzureName
	destination.AzureName = subscription.AzureName

	// DeadLetterDestination
	if subscription.DeadLetterDestination != nil {
		var deadLetterDestination v20200601s.DeadLetterDestination
		err := subscription.DeadLetterDestination.AssignPropertiesToDeadLetterDestination(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeadLetterDestination() to populate field DeadLetterDestination")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if subscription.Destination != nil {
		var destinationLocal v20200601s.EventSubscriptionDestination
		err := subscription.Destination.AssignPropertiesToEventSubscriptionDestination(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionDestination() to populate field Destination")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	destination.EventDeliverySchema = genruntime.ClonePointerToString(subscription.EventDeliverySchema)

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(subscription.ExpirationTimeUtc)

	// Filter
	if subscription.Filter != nil {
		var filter v20200601s.EventSubscriptionFilter
		err := subscription.Filter.AssignPropertiesToEventSubscriptionFilter(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventSubscriptionFilter() to populate field Filter")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(subscription.Labels)

	// OriginalVersion
	destination.OriginalVersion = subscription.OriginalVersion

	// Owner
	if subscription.Owner != nil {
		owner := subscription.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RetryPolicy
	if subscription.RetryPolicy != nil {
		var retryPolicy v20200601s.RetryPolicy
		err := subscription.RetryPolicy.AssignPropertiesToRetryPolicy(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetryPolicy() to populate field RetryPolicy")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// Storage version of v1alpha1api20200601.DeadLetterDestination
// Deprecated version of DeadLetterDestination. Use v1beta20200601.DeadLetterDestination instead
type DeadLetterDestination struct {
=======
// Storage version of v1alpha1api20200601.DeadLetterDestination_STATUS
// Deprecated version of DeadLetterDestination_STATUS. Use v1beta20200601.DeadLetterDestination_STATUS instead
type DeadLetterDestination_STATUS struct {
>>>>>>> main
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromDeadLetterDestination populates our DeadLetterDestination from the provided source DeadLetterDestination
func (destination *DeadLetterDestination) AssignPropertiesFromDeadLetterDestination(source *v20200601s.DeadLetterDestination) error {
=======
// AssignPropertiesFromDeadLetterDestinationSTATUS populates our DeadLetterDestination_STATUS from the provided source DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignPropertiesFromDeadLetterDestinationSTATUS(source *v20200601s.DeadLetterDestination_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToDeadLetterDestination populates the provided destination DeadLetterDestination from our DeadLetterDestination
func (destination *DeadLetterDestination) AssignPropertiesToDeadLetterDestination(target *v20200601s.DeadLetterDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.DeadLetterDestination_STATUS
// Deprecated version of DeadLetterDestination_STATUS. Use v1beta20200601.DeadLetterDestination_STATUS instead
type DeadLetterDestination_STATUS struct {
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromDeadLetterDestination_STATUS populates our DeadLetterDestination_STATUS from the provided source DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignPropertiesFromDeadLetterDestination_STATUS(source *v20200601s.DeadLetterDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDeadLetterDestination_STATUS populates the provided destination DeadLetterDestination_STATUS from our DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignPropertiesToDeadLetterDestination_STATUS(target *v20200601s.DeadLetterDestination_STATUS) error {
=======
// AssignPropertiesToDeadLetterDestinationSTATUS populates the provided destination DeadLetterDestination_STATUS from our DeadLetterDestination_STATUS
func (destination *DeadLetterDestination_STATUS) AssignPropertiesToDeadLetterDestinationSTATUS(target *v20200601s.DeadLetterDestination_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionDestination
// Deprecated version of EventSubscriptionDestination. Use v1beta20200601.EventSubscriptionDestination instead
type EventSubscriptionDestination struct {
<<<<<<< HEAD
=======
	AzureFunction    *AzureFunctionEventSubscriptionDestination    `json:"azureFunctionEventSubscriptionDestination,omitempty"`
	EventHub         *EventHubEventSubscriptionDestination         `json:"eventHubEventSubscriptionDestination,omitempty"`
	HybridConnection *HybridConnectionEventSubscriptionDestination `json:"hybridConnectionEventSubscriptionDestination,omitempty"`
	PropertyBag      genruntime.PropertyBag                        `json:"$propertyBag,omitempty"`
	ServiceBusQueue  *ServiceBusQueueEventSubscriptionDestination  `json:"serviceBusQueueEventSubscriptionDestination,omitempty"`
	ServiceBusTopic  *ServiceBusTopicEventSubscriptionDestination  `json:"serviceBusTopicEventSubscriptionDestination,omitempty"`
	StorageQueue     *StorageQueueEventSubscriptionDestination     `json:"storageQueueEventSubscriptionDestination,omitempty"`
	WebHook          *WebHookEventSubscriptionDestination          `json:"webHookEventSubscriptionDestination,omitempty"`
}

// AssignPropertiesFromEventSubscriptionDestination populates our EventSubscriptionDestination from the provided source EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignPropertiesFromEventSubscriptionDestination(source *v20200601s.EventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureFunction
	if source.AzureFunction != nil {
		var azureFunction AzureFunctionEventSubscriptionDestination
		err := azureFunction.AssignPropertiesFromAzureFunctionEventSubscriptionDestination(source.AzureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		destination.AzureFunction = &azureFunction
	} else {
		destination.AzureFunction = nil
	}

	// EventHub
	if source.EventHub != nil {
		var eventHub EventHubEventSubscriptionDestination
		err := eventHub.AssignPropertiesFromEventHubEventSubscriptionDestination(source.EventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEventHubEventSubscriptionDestination() to populate field EventHub")
		}
		destination.EventHub = &eventHub
	} else {
		destination.EventHub = nil
	}

	// HybridConnection
	if source.HybridConnection != nil {
		var hybridConnection HybridConnectionEventSubscriptionDestination
		err := hybridConnection.AssignPropertiesFromHybridConnectionEventSubscriptionDestination(source.HybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		destination.HybridConnection = &hybridConnection
	} else {
		destination.HybridConnection = nil
	}

	// ServiceBusQueue
	if source.ServiceBusQueue != nil {
		var serviceBusQueue ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueue.AssignPropertiesFromServiceBusQueueEventSubscriptionDestination(source.ServiceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		destination.ServiceBusQueue = &serviceBusQueue
	} else {
		destination.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if source.ServiceBusTopic != nil {
		var serviceBusTopic ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopic.AssignPropertiesFromServiceBusTopicEventSubscriptionDestination(source.ServiceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		destination.ServiceBusTopic = &serviceBusTopic
	} else {
		destination.ServiceBusTopic = nil
	}

	// StorageQueue
	if source.StorageQueue != nil {
		var storageQueue StorageQueueEventSubscriptionDestination
		err := storageQueue.AssignPropertiesFromStorageQueueEventSubscriptionDestination(source.StorageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		destination.StorageQueue = &storageQueue
	} else {
		destination.StorageQueue = nil
	}

	// WebHook
	if source.WebHook != nil {
		var webHook WebHookEventSubscriptionDestination
		err := webHook.AssignPropertiesFromWebHookEventSubscriptionDestination(source.WebHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebHookEventSubscriptionDestination() to populate field WebHook")
		}
		destination.WebHook = &webHook
	} else {
		destination.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestination populates the provided destination EventSubscriptionDestination from our EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignPropertiesToEventSubscriptionDestination(target *v20200601s.EventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// AzureFunction
	if destination.AzureFunction != nil {
		var azureFunction v20200601s.AzureFunctionEventSubscriptionDestination
		err := destination.AzureFunction.AssignPropertiesToAzureFunctionEventSubscriptionDestination(&azureFunction)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFunctionEventSubscriptionDestination() to populate field AzureFunction")
		}
		target.AzureFunction = &azureFunction
	} else {
		target.AzureFunction = nil
	}

	// EventHub
	if destination.EventHub != nil {
		var eventHub v20200601s.EventHubEventSubscriptionDestination
		err := destination.EventHub.AssignPropertiesToEventHubEventSubscriptionDestination(&eventHub)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEventHubEventSubscriptionDestination() to populate field EventHub")
		}
		target.EventHub = &eventHub
	} else {
		target.EventHub = nil
	}

	// HybridConnection
	if destination.HybridConnection != nil {
		var hybridConnection v20200601s.HybridConnectionEventSubscriptionDestination
		err := destination.HybridConnection.AssignPropertiesToHybridConnectionEventSubscriptionDestination(&hybridConnection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHybridConnectionEventSubscriptionDestination() to populate field HybridConnection")
		}
		target.HybridConnection = &hybridConnection
	} else {
		target.HybridConnection = nil
	}

	// ServiceBusQueue
	if destination.ServiceBusQueue != nil {
		var serviceBusQueue v20200601s.ServiceBusQueueEventSubscriptionDestination
		err := destination.ServiceBusQueue.AssignPropertiesToServiceBusQueueEventSubscriptionDestination(&serviceBusQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServiceBusQueueEventSubscriptionDestination() to populate field ServiceBusQueue")
		}
		target.ServiceBusQueue = &serviceBusQueue
	} else {
		target.ServiceBusQueue = nil
	}

	// ServiceBusTopic
	if destination.ServiceBusTopic != nil {
		var serviceBusTopic v20200601s.ServiceBusTopicEventSubscriptionDestination
		err := destination.ServiceBusTopic.AssignPropertiesToServiceBusTopicEventSubscriptionDestination(&serviceBusTopic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServiceBusTopicEventSubscriptionDestination() to populate field ServiceBusTopic")
		}
		target.ServiceBusTopic = &serviceBusTopic
	} else {
		target.ServiceBusTopic = nil
	}

	// StorageQueue
	if destination.StorageQueue != nil {
		var storageQueue v20200601s.StorageQueueEventSubscriptionDestination
		err := destination.StorageQueue.AssignPropertiesToStorageQueueEventSubscriptionDestination(&storageQueue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageQueueEventSubscriptionDestination() to populate field StorageQueue")
		}
		target.StorageQueue = &storageQueue
	} else {
		target.StorageQueue = nil
	}

	// WebHook
	if destination.WebHook != nil {
		var webHook v20200601s.WebHookEventSubscriptionDestination
		err := destination.WebHook.AssignPropertiesToWebHookEventSubscriptionDestination(&webHook)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebHookEventSubscriptionDestination() to populate field WebHook")
		}
		target.WebHook = &webHook
	} else {
		target.WebHook = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionDestination_STATUS
// Deprecated version of EventSubscriptionDestination_STATUS. Use v1beta20200601.EventSubscriptionDestination_STATUS instead
type EventSubscriptionDestination_STATUS struct {
>>>>>>> main
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromEventSubscriptionDestination populates our EventSubscriptionDestination from the provided source EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignPropertiesFromEventSubscriptionDestination(source *v20200601s.EventSubscriptionDestination) error {
=======
// AssignPropertiesFromEventSubscriptionDestinationSTATUS populates our EventSubscriptionDestination_STATUS from the provided source EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignPropertiesFromEventSubscriptionDestinationSTATUS(source *v20200601s.EventSubscriptionDestination_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToEventSubscriptionDestination populates the provided destination EventSubscriptionDestination from our EventSubscriptionDestination
func (destination *EventSubscriptionDestination) AssignPropertiesToEventSubscriptionDestination(target *v20200601s.EventSubscriptionDestination) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionDestination_STATUS
// Deprecated version of EventSubscriptionDestination_STATUS. Use v1beta20200601.EventSubscriptionDestination_STATUS instead
type EventSubscriptionDestination_STATUS struct {
	EndpointType *string                `json:"endpointType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromEventSubscriptionDestination_STATUS populates our EventSubscriptionDestination_STATUS from the provided source EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignPropertiesFromEventSubscriptionDestination_STATUS(source *v20200601s.EventSubscriptionDestination_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndpointType
	destination.EndpointType = genruntime.ClonePointerToString(source.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestination_STATUS populates the provided destination EventSubscriptionDestination_STATUS from our EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignPropertiesToEventSubscriptionDestination_STATUS(target *v20200601s.EventSubscriptionDestination_STATUS) error {
=======
// AssignPropertiesToEventSubscriptionDestinationSTATUS populates the provided destination EventSubscriptionDestination_STATUS from our EventSubscriptionDestination_STATUS
func (destination *EventSubscriptionDestination_STATUS) AssignPropertiesToEventSubscriptionDestinationSTATUS(target *v20200601s.EventSubscriptionDestination_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(destination.PropertyBag)

	// EndpointType
	target.EndpointType = genruntime.ClonePointerToString(destination.EndpointType)

	// Update the property bag
	if len(propertyBag) > 0 {
		target.PropertyBag = propertyBag
	} else {
		target.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionFilter
// Deprecated version of EventSubscriptionFilter. Use v1beta20200601.EventSubscriptionFilter instead
type EventSubscriptionFilter struct {
	AdvancedFilters        []AdvancedFilter       `json:"advancedFilters,omitempty"`
	IncludedEventTypes     []string               `json:"includedEventTypes,omitempty"`
	IsSubjectCaseSensitive *bool                  `json:"isSubjectCaseSensitive,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SubjectBeginsWith      *string                `json:"subjectBeginsWith,omitempty"`
	SubjectEndsWith        *string                `json:"subjectEndsWith,omitempty"`
}

// AssignPropertiesFromEventSubscriptionFilter populates our EventSubscriptionFilter from the provided source EventSubscriptionFilter
func (filter *EventSubscriptionFilter) AssignPropertiesFromEventSubscriptionFilter(source *v20200601s.EventSubscriptionFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter
			err := advancedFilter.AssignPropertiesFromAdvancedFilter(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionFilter populates the provided destination EventSubscriptionFilter from our EventSubscriptionFilter
func (filter *EventSubscriptionFilter) AssignPropertiesToEventSubscriptionFilter(destination *v20200601s.EventSubscriptionFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]v20200601s.AdvancedFilter, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v20200601s.AdvancedFilter
			err := advancedFilterItem.AssignPropertiesToAdvancedFilter(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilter() to populate field AdvancedFilters")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.EventSubscriptionFilter_STATUS
// Deprecated version of EventSubscriptionFilter_STATUS. Use v1beta20200601.EventSubscriptionFilter_STATUS instead
type EventSubscriptionFilter_STATUS struct {
	AdvancedFilters        []AdvancedFilter_STATUS `json:"advancedFilters,omitempty"`
	IncludedEventTypes     []string                `json:"includedEventTypes,omitempty"`
	IsSubjectCaseSensitive *bool                   `json:"isSubjectCaseSensitive,omitempty"`
	PropertyBag            genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
	SubjectBeginsWith      *string                 `json:"subjectBeginsWith,omitempty"`
	SubjectEndsWith        *string                 `json:"subjectEndsWith,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromEventSubscriptionFilter_STATUS populates our EventSubscriptionFilter_STATUS from the provided source EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignPropertiesFromEventSubscriptionFilter_STATUS(source *v20200601s.EventSubscriptionFilter_STATUS) error {
=======
// AssignPropertiesFromEventSubscriptionFilterSTATUS populates our EventSubscriptionFilter_STATUS from the provided source EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignPropertiesFromEventSubscriptionFilterSTATUS(source *v20200601s.EventSubscriptionFilter_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter_STATUS, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter_STATUS
<<<<<<< HEAD
			err := advancedFilter.AssignPropertiesFromAdvancedFilter_STATUS(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilter_STATUS() to populate field AdvancedFilters")
=======
			err := advancedFilter.AssignPropertiesFromAdvancedFilterSTATUS(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterSTATUS() to populate field AdvancedFilters")
>>>>>>> main
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		filter.AdvancedFilters = advancedFilterList
	} else {
		filter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	filter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		filter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		filter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	filter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	filter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToEventSubscriptionFilter_STATUS populates the provided destination EventSubscriptionFilter_STATUS from our EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignPropertiesToEventSubscriptionFilter_STATUS(destination *v20200601s.EventSubscriptionFilter_STATUS) error {
=======
// AssignPropertiesToEventSubscriptionFilterSTATUS populates the provided destination EventSubscriptionFilter_STATUS from our EventSubscriptionFilter_STATUS
func (filter *EventSubscriptionFilter_STATUS) AssignPropertiesToEventSubscriptionFilterSTATUS(destination *v20200601s.EventSubscriptionFilter_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// AdvancedFilters
	if filter.AdvancedFilters != nil {
		advancedFilterList := make([]v20200601s.AdvancedFilter_STATUS, len(filter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range filter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v20200601s.AdvancedFilter_STATUS
<<<<<<< HEAD
			err := advancedFilterItem.AssignPropertiesToAdvancedFilter_STATUS(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilter_STATUS() to populate field AdvancedFilters")
=======
			err := advancedFilterItem.AssignPropertiesToAdvancedFilterSTATUS(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterSTATUS() to populate field AdvancedFilters")
>>>>>>> main
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(filter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if filter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *filter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(filter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(filter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.RetryPolicy
// Deprecated version of RetryPolicy. Use v1beta20200601.RetryPolicy instead
type RetryPolicy struct {
	EventTimeToLiveInMinutes *int                   `json:"eventTimeToLiveInMinutes,omitempty"`
	MaxDeliveryAttempts      *int                   `json:"maxDeliveryAttempts,omitempty"`
	PropertyBag              genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromRetryPolicy populates our RetryPolicy from the provided source RetryPolicy
func (policy *RetryPolicy) AssignPropertiesFromRetryPolicy(source *v20200601s.RetryPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRetryPolicy populates the provided destination RetryPolicy from our RetryPolicy
func (policy *RetryPolicy) AssignPropertiesToRetryPolicy(destination *v20200601s.RetryPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.RetryPolicy_STATUS
// Deprecated version of RetryPolicy_STATUS. Use v1beta20200601.RetryPolicy_STATUS instead
type RetryPolicy_STATUS struct {
	EventTimeToLiveInMinutes *int                   `json:"eventTimeToLiveInMinutes,omitempty"`
	MaxDeliveryAttempts      *int                   `json:"maxDeliveryAttempts,omitempty"`
	PropertyBag              genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromRetryPolicy_STATUS populates our RetryPolicy_STATUS from the provided source RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignPropertiesFromRetryPolicy_STATUS(source *v20200601s.RetryPolicy_STATUS) error {
=======
// AssignPropertiesFromRetryPolicySTATUS populates our RetryPolicy_STATUS from the provided source RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignPropertiesFromRetryPolicySTATUS(source *v20200601s.RetryPolicy_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EventTimeToLiveInMinutes
	policy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	policy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToRetryPolicy_STATUS populates the provided destination RetryPolicy_STATUS from our RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignPropertiesToRetryPolicy_STATUS(destination *v20200601s.RetryPolicy_STATUS) error {
=======
// AssignPropertiesToRetryPolicySTATUS populates the provided destination RetryPolicy_STATUS from our RetryPolicy_STATUS
func (policy *RetryPolicy_STATUS) AssignPropertiesToRetryPolicySTATUS(destination *v20200601s.RetryPolicy_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(policy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(policy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.AdvancedFilter
// Deprecated version of AdvancedFilter. Use v1beta20200601.AdvancedFilter instead
type AdvancedFilter struct {
<<<<<<< HEAD
=======
	BoolEquals                *AdvancedFilter_BoolEquals                `json:"boolEqualsAdvancedFilter,omitempty"`
	NumberGreaterThan         *AdvancedFilter_NumberGreaterThan         `json:"numberGreaterThanAdvancedFilter,omitempty"`
	NumberGreaterThanOrEquals *AdvancedFilter_NumberGreaterThanOrEquals `json:"numberGreaterThanOrEqualsAdvancedFilter,omitempty"`
	NumberIn                  *AdvancedFilter_NumberIn                  `json:"numberInAdvancedFilter,omitempty"`
	NumberLessThan            *AdvancedFilter_NumberLessThan            `json:"numberLessThanAdvancedFilter,omitempty"`
	NumberLessThanOrEquals    *AdvancedFilter_NumberLessThanOrEquals    `json:"numberLessThanOrEqualsAdvancedFilter,omitempty"`
	NumberNotIn               *AdvancedFilter_NumberNotIn               `json:"numberNotInAdvancedFilter,omitempty"`
	PropertyBag               genruntime.PropertyBag                    `json:"$propertyBag,omitempty"`
	StringBeginsWith          *AdvancedFilter_StringBeginsWith          `json:"stringBeginsWithAdvancedFilter,omitempty"`
	StringContains            *AdvancedFilter_StringContains            `json:"stringContainsAdvancedFilter,omitempty"`
	StringEndsWith            *AdvancedFilter_StringEndsWith            `json:"stringEndsWithAdvancedFilter,omitempty"`
	StringIn                  *AdvancedFilter_StringIn                  `json:"stringInAdvancedFilter,omitempty"`
	StringNotIn               *AdvancedFilter_StringNotIn               `json:"stringNotInAdvancedFilter,omitempty"`
}

// AssignPropertiesFromAdvancedFilter populates our AdvancedFilter from the provided source AdvancedFilter
func (filter *AdvancedFilter) AssignPropertiesFromAdvancedFilter(source *v20200601s.AdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BoolEquals
	if source.BoolEquals != nil {
		var boolEqual AdvancedFilter_BoolEquals
		err := boolEqual.AssignPropertiesFromAdvancedFilterBoolEquals(source.BoolEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterBoolEquals() to populate field BoolEquals")
		}
		filter.BoolEquals = &boolEqual
	} else {
		filter.BoolEquals = nil
	}

	// NumberGreaterThan
	if source.NumberGreaterThan != nil {
		var numberGreaterThan AdvancedFilter_NumberGreaterThan
		err := numberGreaterThan.AssignPropertiesFromAdvancedFilterNumberGreaterThan(source.NumberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberGreaterThan() to populate field NumberGreaterThan")
		}
		filter.NumberGreaterThan = &numberGreaterThan
	} else {
		filter.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if source.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual AdvancedFilter_NumberGreaterThanOrEquals
		err := numberGreaterThanOrEqual.AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEquals(source.NumberGreaterThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEquals() to populate field NumberGreaterThanOrEquals")
		}
		filter.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		filter.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if source.NumberIn != nil {
		var numberIn AdvancedFilter_NumberIn
		err := numberIn.AssignPropertiesFromAdvancedFilterNumberIn(source.NumberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberIn() to populate field NumberIn")
		}
		filter.NumberIn = &numberIn
	} else {
		filter.NumberIn = nil
	}

	// NumberLessThan
	if source.NumberLessThan != nil {
		var numberLessThan AdvancedFilter_NumberLessThan
		err := numberLessThan.AssignPropertiesFromAdvancedFilterNumberLessThan(source.NumberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberLessThan() to populate field NumberLessThan")
		}
		filter.NumberLessThan = &numberLessThan
	} else {
		filter.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if source.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual AdvancedFilter_NumberLessThanOrEquals
		err := numberLessThanOrEqual.AssignPropertiesFromAdvancedFilterNumberLessThanOrEquals(source.NumberLessThanOrEquals)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberLessThanOrEquals() to populate field NumberLessThanOrEquals")
		}
		filter.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		filter.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if source.NumberNotIn != nil {
		var numberNotIn AdvancedFilter_NumberNotIn
		err := numberNotIn.AssignPropertiesFromAdvancedFilterNumberNotIn(source.NumberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterNumberNotIn() to populate field NumberNotIn")
		}
		filter.NumberNotIn = &numberNotIn
	} else {
		filter.NumberNotIn = nil
	}

	// StringBeginsWith
	if source.StringBeginsWith != nil {
		var stringBeginsWith AdvancedFilter_StringBeginsWith
		err := stringBeginsWith.AssignPropertiesFromAdvancedFilterStringBeginsWith(source.StringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringBeginsWith() to populate field StringBeginsWith")
		}
		filter.StringBeginsWith = &stringBeginsWith
	} else {
		filter.StringBeginsWith = nil
	}

	// StringContains
	if source.StringContains != nil {
		var stringContain AdvancedFilter_StringContains
		err := stringContain.AssignPropertiesFromAdvancedFilterStringContains(source.StringContains)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringContains() to populate field StringContains")
		}
		filter.StringContains = &stringContain
	} else {
		filter.StringContains = nil
	}

	// StringEndsWith
	if source.StringEndsWith != nil {
		var stringEndsWith AdvancedFilter_StringEndsWith
		err := stringEndsWith.AssignPropertiesFromAdvancedFilterStringEndsWith(source.StringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringEndsWith() to populate field StringEndsWith")
		}
		filter.StringEndsWith = &stringEndsWith
	} else {
		filter.StringEndsWith = nil
	}

	// StringIn
	if source.StringIn != nil {
		var stringIn AdvancedFilter_StringIn
		err := stringIn.AssignPropertiesFromAdvancedFilterStringIn(source.StringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringIn() to populate field StringIn")
		}
		filter.StringIn = &stringIn
	} else {
		filter.StringIn = nil
	}

	// StringNotIn
	if source.StringNotIn != nil {
		var stringNotIn AdvancedFilter_StringNotIn
		err := stringNotIn.AssignPropertiesFromAdvancedFilterStringNotIn(source.StringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdvancedFilterStringNotIn() to populate field StringNotIn")
		}
		filter.StringNotIn = &stringNotIn
	} else {
		filter.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilter populates the provided destination AdvancedFilter from our AdvancedFilter
func (filter *AdvancedFilter) AssignPropertiesToAdvancedFilter(destination *v20200601s.AdvancedFilter) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// BoolEquals
	if filter.BoolEquals != nil {
		var boolEqual v20200601s.AdvancedFilter_BoolEquals
		err := filter.BoolEquals.AssignPropertiesToAdvancedFilterBoolEquals(&boolEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterBoolEquals() to populate field BoolEquals")
		}
		destination.BoolEquals = &boolEqual
	} else {
		destination.BoolEquals = nil
	}

	// NumberGreaterThan
	if filter.NumberGreaterThan != nil {
		var numberGreaterThan v20200601s.AdvancedFilter_NumberGreaterThan
		err := filter.NumberGreaterThan.AssignPropertiesToAdvancedFilterNumberGreaterThan(&numberGreaterThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberGreaterThan() to populate field NumberGreaterThan")
		}
		destination.NumberGreaterThan = &numberGreaterThan
	} else {
		destination.NumberGreaterThan = nil
	}

	// NumberGreaterThanOrEquals
	if filter.NumberGreaterThanOrEquals != nil {
		var numberGreaterThanOrEqual v20200601s.AdvancedFilter_NumberGreaterThanOrEquals
		err := filter.NumberGreaterThanOrEquals.AssignPropertiesToAdvancedFilterNumberGreaterThanOrEquals(&numberGreaterThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberGreaterThanOrEquals() to populate field NumberGreaterThanOrEquals")
		}
		destination.NumberGreaterThanOrEquals = &numberGreaterThanOrEqual
	} else {
		destination.NumberGreaterThanOrEquals = nil
	}

	// NumberIn
	if filter.NumberIn != nil {
		var numberIn v20200601s.AdvancedFilter_NumberIn
		err := filter.NumberIn.AssignPropertiesToAdvancedFilterNumberIn(&numberIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberIn() to populate field NumberIn")
		}
		destination.NumberIn = &numberIn
	} else {
		destination.NumberIn = nil
	}

	// NumberLessThan
	if filter.NumberLessThan != nil {
		var numberLessThan v20200601s.AdvancedFilter_NumberLessThan
		err := filter.NumberLessThan.AssignPropertiesToAdvancedFilterNumberLessThan(&numberLessThan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberLessThan() to populate field NumberLessThan")
		}
		destination.NumberLessThan = &numberLessThan
	} else {
		destination.NumberLessThan = nil
	}

	// NumberLessThanOrEquals
	if filter.NumberLessThanOrEquals != nil {
		var numberLessThanOrEqual v20200601s.AdvancedFilter_NumberLessThanOrEquals
		err := filter.NumberLessThanOrEquals.AssignPropertiesToAdvancedFilterNumberLessThanOrEquals(&numberLessThanOrEqual)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberLessThanOrEquals() to populate field NumberLessThanOrEquals")
		}
		destination.NumberLessThanOrEquals = &numberLessThanOrEqual
	} else {
		destination.NumberLessThanOrEquals = nil
	}

	// NumberNotIn
	if filter.NumberNotIn != nil {
		var numberNotIn v20200601s.AdvancedFilter_NumberNotIn
		err := filter.NumberNotIn.AssignPropertiesToAdvancedFilterNumberNotIn(&numberNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterNumberNotIn() to populate field NumberNotIn")
		}
		destination.NumberNotIn = &numberNotIn
	} else {
		destination.NumberNotIn = nil
	}

	// StringBeginsWith
	if filter.StringBeginsWith != nil {
		var stringBeginsWith v20200601s.AdvancedFilter_StringBeginsWith
		err := filter.StringBeginsWith.AssignPropertiesToAdvancedFilterStringBeginsWith(&stringBeginsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringBeginsWith() to populate field StringBeginsWith")
		}
		destination.StringBeginsWith = &stringBeginsWith
	} else {
		destination.StringBeginsWith = nil
	}

	// StringContains
	if filter.StringContains != nil {
		var stringContain v20200601s.AdvancedFilter_StringContains
		err := filter.StringContains.AssignPropertiesToAdvancedFilterStringContains(&stringContain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringContains() to populate field StringContains")
		}
		destination.StringContains = &stringContain
	} else {
		destination.StringContains = nil
	}

	// StringEndsWith
	if filter.StringEndsWith != nil {
		var stringEndsWith v20200601s.AdvancedFilter_StringEndsWith
		err := filter.StringEndsWith.AssignPropertiesToAdvancedFilterStringEndsWith(&stringEndsWith)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringEndsWith() to populate field StringEndsWith")
		}
		destination.StringEndsWith = &stringEndsWith
	} else {
		destination.StringEndsWith = nil
	}

	// StringIn
	if filter.StringIn != nil {
		var stringIn v20200601s.AdvancedFilter_StringIn
		err := filter.StringIn.AssignPropertiesToAdvancedFilterStringIn(&stringIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringIn() to populate field StringIn")
		}
		destination.StringIn = &stringIn
	} else {
		destination.StringIn = nil
	}

	// StringNotIn
	if filter.StringNotIn != nil {
		var stringNotIn v20200601s.AdvancedFilter_StringNotIn
		err := filter.StringNotIn.AssignPropertiesToAdvancedFilterStringNotIn(&stringNotIn)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdvancedFilterStringNotIn() to populate field StringNotIn")
		}
		destination.StringNotIn = &stringNotIn
	} else {
		destination.StringNotIn = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.AdvancedFilter_STATUS
// Deprecated version of AdvancedFilter_STATUS. Use v1beta20200601.AdvancedFilter_STATUS instead
type AdvancedFilter_STATUS struct {
>>>>>>> main
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromAdvancedFilter populates our AdvancedFilter from the provided source AdvancedFilter
func (filter *AdvancedFilter) AssignPropertiesFromAdvancedFilter(source *v20200601s.AdvancedFilter) error {
=======
// AssignPropertiesFromAdvancedFilterSTATUS populates our AdvancedFilter_STATUS from the provided source AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignPropertiesFromAdvancedFilterSTATUS(source *v20200601s.AdvancedFilter_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToAdvancedFilter populates the provided destination AdvancedFilter from our AdvancedFilter
func (filter *AdvancedFilter) AssignPropertiesToAdvancedFilter(destination *v20200601s.AdvancedFilter) error {
=======
// AssignPropertiesToAdvancedFilterSTATUS populates the provided destination AdvancedFilter_STATUS from our AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignPropertiesToAdvancedFilterSTATUS(destination *v20200601s.AdvancedFilter_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.AdvancedFilter_STATUS
// Deprecated version of AdvancedFilter_STATUS. Use v1beta20200601.AdvancedFilter_STATUS instead
type AdvancedFilter_STATUS struct {
	Key          *string                `json:"key,omitempty"`
	OperatorType *string                `json:"operatorType,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromAdvancedFilter_STATUS populates our AdvancedFilter_STATUS from the provided source AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignPropertiesFromAdvancedFilter_STATUS(source *v20200601s.AdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	filter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	filter.OperatorType = genruntime.ClonePointerToString(source.OperatorType)

	// Update the property bag
	if len(propertyBag) > 0 {
		filter.PropertyBag = propertyBag
	} else {
		filter.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilter_STATUS populates the provided destination AdvancedFilter_STATUS from our AdvancedFilter_STATUS
func (filter *AdvancedFilter_STATUS) AssignPropertiesToAdvancedFilter_STATUS(destination *v20200601s.AdvancedFilter_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(filter.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(filter.Key)

	// OperatorType
	destination.OperatorType = genruntime.ClonePointerToString(filter.OperatorType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&EventSubscription{}, &EventSubscriptionList{})
}
