// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601storage

import (
	"fmt"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1beta20200601storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20200601.Domain
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Domain_Spec   `json:"spec,omitempty"`
	Status            Domain_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Domain{}

// GetConditions returns the conditions of the resource
func (domain *Domain) GetConditions() conditions.Conditions {
	return domain.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (domain *Domain) SetConditions(conditions conditions.Conditions) {
	domain.Status.Conditions = conditions
}

var _ conversion.Convertible = &Domain{}

// ConvertFrom populates our Domain from the provided hub Domain
func (domain *Domain) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200601s.Domain)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Domain but received %T instead", hub)
	}

	return domain.AssignProperties_From_Domain(source)
}

// ConvertTo populates the provided hub Domain from our Domain
func (domain *Domain) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200601s.Domain)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Domain but received %T instead", hub)
	}

	return domain.AssignProperties_To_Domain(destination)
}

var _ genruntime.KubernetesResource = &Domain{}

// AzureName returns the Azure name of the resource
func (domain *Domain) AzureName() string {
	return domain.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (domain Domain) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (domain *Domain) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (domain *Domain) GetSpec() genruntime.ConvertibleSpec {
	return &domain.Spec
}

// GetStatus returns the status of this resource
func (domain *Domain) GetStatus() genruntime.ConvertibleStatus {
	return &domain.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/domains"
func (domain *Domain) GetType() string {
	return "Microsoft.EventGrid/domains"
}

// NewEmptyStatus returns a new empty (blank) status
func (domain *Domain) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Domain_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (domain *Domain) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(domain.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  domain.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (domain *Domain) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Domain_STATUS); ok {
		domain.Status = *st
		return nil
	}

	// Convert status to required version
	var st Domain_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	domain.Status = st
	return nil
}

// AssignProperties_From_Domain populates our Domain from the provided source Domain
func (domain *Domain) AssignProperties_From_Domain(source *v20200601s.Domain) error {

	// ObjectMeta
	domain.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Domain_Spec
	err := spec.AssignProperties_From_Domain_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Domain_Spec() to populate field Spec")
	}
	domain.Spec = spec

	// Status
	var status Domain_STATUS
	err = status.AssignProperties_From_Domain_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Domain_STATUS() to populate field Status")
	}
	domain.Status = status

	// Invoke the augmentConversionForDomain interface (if implemented) to customize the conversion
	var domainAsAny any = domain
	if augmentedDomain, ok := domainAsAny.(augmentConversionForDomain); ok {
		err := augmentedDomain.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Domain populates the provided destination Domain from our Domain
func (domain *Domain) AssignProperties_To_Domain(destination *v20200601s.Domain) error {

	// ObjectMeta
	destination.ObjectMeta = *domain.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200601s.Domain_Spec
	err := domain.Spec.AssignProperties_To_Domain_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Domain_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200601s.Domain_STATUS
	err = domain.Status.AssignProperties_To_Domain_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Domain_STATUS() to populate field Status")
	}
	destination.Status = status

	// Invoke the augmentConversionForDomain interface (if implemented) to customize the conversion
	var domainAsAny any = domain
	if augmentedDomain, ok := domainAsAny.(augmentConversionForDomain); ok {
		err := augmentedDomain.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (domain *Domain) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: domain.Spec.OriginalVersion,
		Kind:    "Domain",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20200601.Domain
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Storage version of v1alpha1api20200601.APIVersion
// Deprecated version of APIVersion. Use v1beta20200601.APIVersion instead
// +kubebuilder:validation:Enum={"2020-06-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-06-01")

type augmentConversionForDomain interface {
	AssignPropertiesFrom(src *v20200601s.Domain) error
	AssignPropertiesTo(dst *v20200601s.Domain) error
}

// Storage version of v1alpha1api20200601.Domain_Spec
type Domain_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName          string              `json:"azureName,omitempty"`
	InboundIpRules     []InboundIpRule     `json:"inboundIpRules,omitempty"`
	InputSchema        *string             `json:"inputSchema,omitempty"`
	InputSchemaMapping *InputSchemaMapping `json:"inputSchemaMapping,omitempty"`
	Location           *string             `json:"location,omitempty"`
	OriginalVersion    string              `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag         genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	PublicNetworkAccess *string                            `json:"publicNetworkAccess,omitempty"`
	Tags                map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Domain_Spec{}

// ConvertSpecFrom populates our Domain_Spec from the provided source
func (domain *Domain_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200601s.Domain_Spec)
	if ok {
		// Populate our instance from source
		return domain.AssignProperties_From_Domain_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Domain_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = domain.AssignProperties_From_Domain_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Domain_Spec
func (domain *Domain_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200601s.Domain_Spec)
	if ok {
		// Populate destination from our instance
		return domain.AssignProperties_To_Domain_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Domain_Spec{}
	err := domain.AssignProperties_To_Domain_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Domain_Spec populates our Domain_Spec from the provided source Domain_Spec
func (domain *Domain_Spec) AssignProperties_From_Domain_Spec(source *v20200601s.Domain_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	domain.AzureName = source.AzureName

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule
			err := inboundIpRule.AssignProperties_From_InboundIpRule(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_InboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domain.InboundIpRules = inboundIpRuleList
	} else {
		domain.InboundIpRules = nil
	}

	// InputSchema
	domain.InputSchema = genruntime.ClonePointerToString(source.InputSchema)

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping
		err := inputSchemaMapping.AssignProperties_From_InputSchemaMapping(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_InputSchemaMapping() to populate field InputSchemaMapping")
		}
		domain.InputSchemaMapping = &inputSchemaMapping
	} else {
		domain.InputSchemaMapping = nil
	}

	// Location
	domain.Location = genruntime.ClonePointerToString(source.Location)

	// OriginalVersion
	domain.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		domain.Owner = &owner
	} else {
		domain.Owner = nil
	}

	// PublicNetworkAccess
	domain.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// Tags
	domain.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		domain.PropertyBag = propertyBag
	} else {
		domain.PropertyBag = nil
	}

	// Invoke the augmentConversionForDomain_Spec interface (if implemented) to customize the conversion
	var domainAsAny any = domain
	if augmentedDomain, ok := domainAsAny.(augmentConversionForDomain_Spec); ok {
		err := augmentedDomain.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Domain_Spec populates the provided destination Domain_Spec from our Domain_Spec
func (domain *Domain_Spec) AssignProperties_To_Domain_Spec(destination *v20200601s.Domain_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domain.PropertyBag)

	// AzureName
	destination.AzureName = domain.AzureName

	// InboundIpRules
	if domain.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule, len(domain.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domain.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule
			err := inboundIpRuleItem.AssignProperties_To_InboundIpRule(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_InboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	destination.InputSchema = genruntime.ClonePointerToString(domain.InputSchema)

	// InputSchemaMapping
	if domain.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.InputSchemaMapping
		err := domain.InputSchemaMapping.AssignProperties_To_InputSchemaMapping(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_InputSchemaMapping() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domain.Location)

	// OriginalVersion
	destination.OriginalVersion = domain.OriginalVersion

	// Owner
	if domain.Owner != nil {
		owner := domain.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(domain.PublicNetworkAccess)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domain.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForDomain_Spec interface (if implemented) to customize the conversion
	var domainAsAny any = domain
	if augmentedDomain, ok := domainAsAny.(augmentConversionForDomain_Spec); ok {
		err := augmentedDomain.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.Domain_STATUS
// Deprecated version of Domain_STATUS. Use v1beta20200601.Domain_STATUS instead
type Domain_STATUS struct {
	Conditions                 []conditions.Condition                                        `json:"conditions,omitempty"`
	Endpoint                   *string                                                       `json:"endpoint,omitempty"`
	Id                         *string                                                       `json:"id,omitempty"`
	InboundIpRules             []InboundIpRule_STATUS                                        `json:"inboundIpRules,omitempty"`
	InputSchema                *string                                                       `json:"inputSchema,omitempty"`
	InputSchemaMapping         *InputSchemaMapping_STATUS                                    `json:"inputSchemaMapping,omitempty"`
	Location                   *string                                                       `json:"location,omitempty"`
	MetricResourceId           *string                                                       `json:"metricResourceId,omitempty"`
	Name                       *string                                                       `json:"name,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	PropertyBag                genruntime.PropertyBag                                        `json:"$propertyBag,omitempty"`
	ProvisioningState          *string                                                       `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *string                                                       `json:"publicNetworkAccess,omitempty"`
	SystemData                 *SystemData_STATUS                                            `json:"systemData,omitempty"`
	Tags                       map[string]string                                             `json:"tags,omitempty"`
	Type                       *string                                                       `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Domain_STATUS{}

// ConvertStatusFrom populates our Domain_STATUS from the provided source
func (domain *Domain_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200601s.Domain_STATUS)
	if ok {
		// Populate our instance from source
		return domain.AssignProperties_From_Domain_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Domain_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = domain.AssignProperties_From_Domain_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Domain_STATUS
func (domain *Domain_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200601s.Domain_STATUS)
	if ok {
		// Populate destination from our instance
		return domain.AssignProperties_To_Domain_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Domain_STATUS{}
	err := domain.AssignProperties_To_Domain_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignProperties_From_Domain_STATUS populates our Domain_STATUS from the provided source Domain_STATUS
func (domain *Domain_STATUS) AssignProperties_From_Domain_STATUS(source *v20200601s.Domain_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	domain.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Endpoint
	domain.Endpoint = genruntime.ClonePointerToString(source.Endpoint)

	// Id
	domain.Id = genruntime.ClonePointerToString(source.Id)

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule_STATUS, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule_STATUS
			err := inboundIpRule.AssignProperties_From_InboundIpRule_STATUS(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_InboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domain.InboundIpRules = inboundIpRuleList
	} else {
		domain.InboundIpRules = nil
	}

	// InputSchema
	domain.InputSchema = genruntime.ClonePointerToString(source.InputSchema)

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping_STATUS
		err := inputSchemaMapping.AssignProperties_From_InputSchemaMapping_STATUS(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_InputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		domain.InputSchemaMapping = &inputSchemaMapping
	} else {
		domain.InputSchemaMapping = nil
	}

	// Location
	domain.Location = genruntime.ClonePointerToString(source.Location)

	// MetricResourceId
	domain.MetricResourceId = genruntime.ClonePointerToString(source.MetricResourceId)

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
			err := privateEndpointConnection.AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		domain.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		domain.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	domain.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccess
	domain.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		domain.SystemData = &systemDatum
	} else {
		domain.SystemData = nil
	}

	// Tags
	domain.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	domain.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		domain.PropertyBag = propertyBag
	} else {
		domain.PropertyBag = nil
	}

	// Invoke the augmentConversionForDomain_STATUS interface (if implemented) to customize the conversion
	var domainAsAny any = domain
	if augmentedDomain, ok := domainAsAny.(augmentConversionForDomain_STATUS); ok {
		err := augmentedDomain.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Domain_STATUS populates the provided destination Domain_STATUS from our Domain_STATUS
func (domain *Domain_STATUS) AssignProperties_To_Domain_STATUS(destination *v20200601s.Domain_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domain.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(domain.Conditions)

	// Endpoint
	destination.Endpoint = genruntime.ClonePointerToString(domain.Endpoint)

	// Id
	destination.Id = genruntime.ClonePointerToString(domain.Id)

	// InboundIpRules
	if domain.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule_STATUS, len(domain.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domain.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule_STATUS
			err := inboundIpRuleItem.AssignProperties_To_InboundIpRule_STATUS(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_InboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	destination.InputSchema = genruntime.ClonePointerToString(domain.InputSchema)

	// InputSchemaMapping
	if domain.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.InputSchemaMapping_STATUS
		err := domain.InputSchemaMapping.AssignProperties_To_InputSchemaMapping_STATUS(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_InputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domain.Location)

	// MetricResourceId
	destination.MetricResourceId = genruntime.ClonePointerToString(domain.MetricResourceId)

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// PrivateEndpointConnections
	if domain.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded, len(domain.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range domain.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(domain.ProvisioningState)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(domain.PublicNetworkAccess)

	// SystemData
	if domain.SystemData != nil {
		var systemDatum v20200601s.SystemData_STATUS
		err := domain.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domain.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(domain.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForDomain_STATUS interface (if implemented) to customize the conversion
	var domainAsAny any = domain
	if augmentedDomain, ok := domainAsAny.(augmentConversionForDomain_STATUS); ok {
		err := augmentedDomain.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForDomain_Spec interface {
	AssignPropertiesFrom(src *v20200601s.Domain_Spec) error
	AssignPropertiesTo(dst *v20200601s.Domain_Spec) error
}

type augmentConversionForDomain_STATUS interface {
	AssignPropertiesFrom(src *v20200601s.Domain_STATUS) error
	AssignPropertiesTo(dst *v20200601s.Domain_STATUS) error
}

// Storage version of v1alpha1api20200601.InboundIpRule
// Deprecated version of InboundIpRule. Use v1beta20200601.InboundIpRule instead
type InboundIpRule struct {
	Action      *string                `json:"action,omitempty"`
	IpMask      *string                `json:"ipMask,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_InboundIpRule populates our InboundIpRule from the provided source InboundIpRule
func (rule *InboundIpRule) AssignProperties_From_InboundIpRule(source *v20200601s.InboundIpRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// Invoke the augmentConversionForInboundIpRule interface (if implemented) to customize the conversion
	var ruleAsAny any = rule
	if augmentedRule, ok := ruleAsAny.(augmentConversionForInboundIpRule); ok {
		err := augmentedRule.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_InboundIpRule populates the provided destination InboundIpRule from our InboundIpRule
func (rule *InboundIpRule) AssignProperties_To_InboundIpRule(destination *v20200601s.InboundIpRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForInboundIpRule interface (if implemented) to customize the conversion
	var ruleAsAny any = rule
	if augmentedRule, ok := ruleAsAny.(augmentConversionForInboundIpRule); ok {
		err := augmentedRule.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InboundIpRule_STATUS
// Deprecated version of InboundIpRule_STATUS. Use v1beta20200601.InboundIpRule_STATUS instead
type InboundIpRule_STATUS struct {
	Action      *string                `json:"action,omitempty"`
	IpMask      *string                `json:"ipMask,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_InboundIpRule_STATUS populates our InboundIpRule_STATUS from the provided source InboundIpRule_STATUS
func (rule *InboundIpRule_STATUS) AssignProperties_From_InboundIpRule_STATUS(source *v20200601s.InboundIpRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// Invoke the augmentConversionForInboundIpRule_STATUS interface (if implemented) to customize the conversion
	var ruleAsAny any = rule
	if augmentedRule, ok := ruleAsAny.(augmentConversionForInboundIpRule_STATUS); ok {
		err := augmentedRule.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_InboundIpRule_STATUS populates the provided destination InboundIpRule_STATUS from our InboundIpRule_STATUS
func (rule *InboundIpRule_STATUS) AssignProperties_To_InboundIpRule_STATUS(destination *v20200601s.InboundIpRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForInboundIpRule_STATUS interface (if implemented) to customize the conversion
	var ruleAsAny any = rule
	if augmentedRule, ok := ruleAsAny.(augmentConversionForInboundIpRule_STATUS); ok {
		err := augmentedRule.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InputSchemaMapping
// Deprecated version of InputSchemaMapping. Use v1beta20200601.InputSchemaMapping instead
type InputSchemaMapping struct {
	Json        *JsonInputSchemaMapping `json:"json,omitempty"`
	PropertyBag genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_InputSchemaMapping populates our InputSchemaMapping from the provided source InputSchemaMapping
func (mapping *InputSchemaMapping) AssignProperties_From_InputSchemaMapping(source *v20200601s.InputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Json
	if source.Json != nil {
		var json JsonInputSchemaMapping
		err := json.AssignProperties_From_JsonInputSchemaMapping(source.Json)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonInputSchemaMapping() to populate field Json")
		}
		mapping.Json = &json
	} else {
		mapping.Json = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// Invoke the augmentConversionForInputSchemaMapping interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForInputSchemaMapping); ok {
		err := augmentedMapping.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_InputSchemaMapping populates the provided destination InputSchemaMapping from our InputSchemaMapping
func (mapping *InputSchemaMapping) AssignProperties_To_InputSchemaMapping(destination *v20200601s.InputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// Json
	if mapping.Json != nil {
		var json v20200601s.JsonInputSchemaMapping
		err := mapping.Json.AssignProperties_To_JsonInputSchemaMapping(&json)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonInputSchemaMapping() to populate field Json")
		}
		destination.Json = &json
	} else {
		destination.Json = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForInputSchemaMapping interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForInputSchemaMapping); ok {
		err := augmentedMapping.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InputSchemaMapping_STATUS
// Deprecated version of InputSchemaMapping_STATUS. Use v1beta20200601.InputSchemaMapping_STATUS instead
type InputSchemaMapping_STATUS struct {
	Json        *JsonInputSchemaMapping_STATUS `json:"json,omitempty"`
	PropertyBag genruntime.PropertyBag         `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_InputSchemaMapping_STATUS populates our InputSchemaMapping_STATUS from the provided source InputSchemaMapping_STATUS
func (mapping *InputSchemaMapping_STATUS) AssignProperties_From_InputSchemaMapping_STATUS(source *v20200601s.InputSchemaMapping_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Json
	if source.Json != nil {
		var json JsonInputSchemaMapping_STATUS
		err := json.AssignProperties_From_JsonInputSchemaMapping_STATUS(source.Json)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonInputSchemaMapping_STATUS() to populate field Json")
		}
		mapping.Json = &json
	} else {
		mapping.Json = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// Invoke the augmentConversionForInputSchemaMapping_STATUS interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForInputSchemaMapping_STATUS); ok {
		err := augmentedMapping.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_InputSchemaMapping_STATUS populates the provided destination InputSchemaMapping_STATUS from our InputSchemaMapping_STATUS
func (mapping *InputSchemaMapping_STATUS) AssignProperties_To_InputSchemaMapping_STATUS(destination *v20200601s.InputSchemaMapping_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// Json
	if mapping.Json != nil {
		var json v20200601s.JsonInputSchemaMapping_STATUS
		err := mapping.Json.AssignProperties_To_JsonInputSchemaMapping_STATUS(&json)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonInputSchemaMapping_STATUS() to populate field Json")
		}
		destination.Json = &json
	} else {
		destination.Json = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForInputSchemaMapping_STATUS interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForInputSchemaMapping_STATUS); ok {
		err := augmentedMapping.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
// Deprecated version of PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded. Use v1beta20200601.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded instead
type PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded populates our PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded from the provided source PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) AssignProperties_From_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(source *v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// Invoke the augmentConversionForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded interface (if implemented) to customize the conversion
	var embeddedAsAny any = embedded
	if augmentedEmbedded, ok := embeddedAsAny.(augmentConversionForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded); ok {
		err := augmentedEmbedded.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded populates the provided destination PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded from our PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) AssignProperties_To_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(destination *v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded interface (if implemented) to customize the conversion
	var embeddedAsAny any = embedded
	if augmentedEmbedded, ok := embeddedAsAny.(augmentConversionForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded); ok {
		err := augmentedEmbedded.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.SystemData_STATUS
// Deprecated version of SystemData_STATUS. Use v1beta20200601.SystemData_STATUS instead
type SystemData_STATUS struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *v20200601s.SystemData_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	data.CreatedByType = genruntime.ClonePointerToString(source.CreatedByType)

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	data.LastModifiedByType = genruntime.ClonePointerToString(source.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		data.PropertyBag = propertyBag
	} else {
		data.PropertyBag = nil
	}

	// Invoke the augmentConversionForSystemData_STATUS interface (if implemented) to customize the conversion
	var dataAsAny any = data
	if augmentedData, ok := dataAsAny.(augmentConversionForSystemData_STATUS); ok {
		err := augmentedData.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *v20200601s.SystemData_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(data.PropertyBag)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	destination.CreatedByType = genruntime.ClonePointerToString(data.CreatedByType)

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	destination.LastModifiedByType = genruntime.ClonePointerToString(data.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForSystemData_STATUS interface (if implemented) to customize the conversion
	var dataAsAny any = data
	if augmentedData, ok := dataAsAny.(augmentConversionForSystemData_STATUS); ok {
		err := augmentedData.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForInboundIpRule interface {
	AssignPropertiesFrom(src *v20200601s.InboundIpRule) error
	AssignPropertiesTo(dst *v20200601s.InboundIpRule) error
}

type augmentConversionForInboundIpRule_STATUS interface {
	AssignPropertiesFrom(src *v20200601s.InboundIpRule_STATUS) error
	AssignPropertiesTo(dst *v20200601s.InboundIpRule_STATUS) error
}

type augmentConversionForInputSchemaMapping interface {
	AssignPropertiesFrom(src *v20200601s.InputSchemaMapping) error
	AssignPropertiesTo(dst *v20200601s.InputSchemaMapping) error
}

type augmentConversionForInputSchemaMapping_STATUS interface {
	AssignPropertiesFrom(src *v20200601s.InputSchemaMapping_STATUS) error
	AssignPropertiesTo(dst *v20200601s.InputSchemaMapping_STATUS) error
}

type augmentConversionForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded interface {
	AssignPropertiesFrom(src *v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error
	AssignPropertiesTo(dst *v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error
}

type augmentConversionForSystemData_STATUS interface {
	AssignPropertiesFrom(src *v20200601s.SystemData_STATUS) error
	AssignPropertiesTo(dst *v20200601s.SystemData_STATUS) error
}

// Storage version of v1alpha1api20200601.JsonInputSchemaMapping
// Deprecated version of JsonInputSchemaMapping. Use v1beta20200601.JsonInputSchemaMapping instead
type JsonInputSchemaMapping struct {
	DataVersion            *JsonFieldWithDefault  `json:"dataVersion,omitempty"`
	EventTime              *JsonField             `json:"eventTime,omitempty"`
	EventType              *JsonFieldWithDefault  `json:"eventType,omitempty"`
	Id                     *JsonField             `json:"id,omitempty"`
	InputSchemaMappingType *string                `json:"inputSchemaMappingType,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Subject                *JsonFieldWithDefault  `json:"subject,omitempty"`
	Topic                  *JsonField             `json:"topic,omitempty"`
}

// AssignProperties_From_JsonInputSchemaMapping populates our JsonInputSchemaMapping from the provided source JsonInputSchemaMapping
func (mapping *JsonInputSchemaMapping) AssignProperties_From_JsonInputSchemaMapping(source *v20200601s.JsonInputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DataVersion
	if source.DataVersion != nil {
		var dataVersion JsonFieldWithDefault
		err := dataVersion.AssignProperties_From_JsonFieldWithDefault(source.DataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault() to populate field DataVersion")
		}
		mapping.DataVersion = &dataVersion
	} else {
		mapping.DataVersion = nil
	}

	// EventTime
	if source.EventTime != nil {
		var eventTime JsonField
		err := eventTime.AssignProperties_From_JsonField(source.EventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField() to populate field EventTime")
		}
		mapping.EventTime = &eventTime
	} else {
		mapping.EventTime = nil
	}

	// EventType
	if source.EventType != nil {
		var eventType JsonFieldWithDefault
		err := eventType.AssignProperties_From_JsonFieldWithDefault(source.EventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault() to populate field EventType")
		}
		mapping.EventType = &eventType
	} else {
		mapping.EventType = nil
	}

	// Id
	if source.Id != nil {
		var id JsonField
		err := id.AssignProperties_From_JsonField(source.Id)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField() to populate field Id")
		}
		mapping.Id = &id
	} else {
		mapping.Id = nil
	}

	// InputSchemaMappingType
	mapping.InputSchemaMappingType = genruntime.ClonePointerToString(source.InputSchemaMappingType)

	// Subject
	if source.Subject != nil {
		var subject JsonFieldWithDefault
		err := subject.AssignProperties_From_JsonFieldWithDefault(source.Subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault() to populate field Subject")
		}
		mapping.Subject = &subject
	} else {
		mapping.Subject = nil
	}

	// Topic
	if source.Topic != nil {
		var topic JsonField
		err := topic.AssignProperties_From_JsonField(source.Topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField() to populate field Topic")
		}
		mapping.Topic = &topic
	} else {
		mapping.Topic = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonInputSchemaMapping interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForJsonInputSchemaMapping); ok {
		err := augmentedMapping.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_JsonInputSchemaMapping populates the provided destination JsonInputSchemaMapping from our JsonInputSchemaMapping
func (mapping *JsonInputSchemaMapping) AssignProperties_To_JsonInputSchemaMapping(destination *v20200601s.JsonInputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// DataVersion
	if mapping.DataVersion != nil {
		var dataVersion v20200601s.JsonFieldWithDefault
		err := mapping.DataVersion.AssignProperties_To_JsonFieldWithDefault(&dataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault() to populate field DataVersion")
		}
		destination.DataVersion = &dataVersion
	} else {
		destination.DataVersion = nil
	}

	// EventTime
	if mapping.EventTime != nil {
		var eventTime v20200601s.JsonField
		err := mapping.EventTime.AssignProperties_To_JsonField(&eventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField() to populate field EventTime")
		}
		destination.EventTime = &eventTime
	} else {
		destination.EventTime = nil
	}

	// EventType
	if mapping.EventType != nil {
		var eventType v20200601s.JsonFieldWithDefault
		err := mapping.EventType.AssignProperties_To_JsonFieldWithDefault(&eventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault() to populate field EventType")
		}
		destination.EventType = &eventType
	} else {
		destination.EventType = nil
	}

	// Id
	if mapping.Id != nil {
		var id v20200601s.JsonField
		err := mapping.Id.AssignProperties_To_JsonField(&id)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField() to populate field Id")
		}
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// InputSchemaMappingType
	destination.InputSchemaMappingType = genruntime.ClonePointerToString(mapping.InputSchemaMappingType)

	// Subject
	if mapping.Subject != nil {
		var subject v20200601s.JsonFieldWithDefault
		err := mapping.Subject.AssignProperties_To_JsonFieldWithDefault(&subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault() to populate field Subject")
		}
		destination.Subject = &subject
	} else {
		destination.Subject = nil
	}

	// Topic
	if mapping.Topic != nil {
		var topic v20200601s.JsonField
		err := mapping.Topic.AssignProperties_To_JsonField(&topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField() to populate field Topic")
		}
		destination.Topic = &topic
	} else {
		destination.Topic = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonInputSchemaMapping interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForJsonInputSchemaMapping); ok {
		err := augmentedMapping.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonInputSchemaMapping_STATUS
// Deprecated version of JsonInputSchemaMapping_STATUS. Use v1beta20200601.JsonInputSchemaMapping_STATUS instead
type JsonInputSchemaMapping_STATUS struct {
	DataVersion            *JsonFieldWithDefault_STATUS `json:"dataVersion,omitempty"`
	EventTime              *JsonField_STATUS            `json:"eventTime,omitempty"`
	EventType              *JsonFieldWithDefault_STATUS `json:"eventType,omitempty"`
	Id                     *JsonField_STATUS            `json:"id,omitempty"`
	InputSchemaMappingType *string                      `json:"inputSchemaMappingType,omitempty"`
	PropertyBag            genruntime.PropertyBag       `json:"$propertyBag,omitempty"`
	Subject                *JsonFieldWithDefault_STATUS `json:"subject,omitempty"`
	Topic                  *JsonField_STATUS            `json:"topic,omitempty"`
}

// AssignProperties_From_JsonInputSchemaMapping_STATUS populates our JsonInputSchemaMapping_STATUS from the provided source JsonInputSchemaMapping_STATUS
func (mapping *JsonInputSchemaMapping_STATUS) AssignProperties_From_JsonInputSchemaMapping_STATUS(source *v20200601s.JsonInputSchemaMapping_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DataVersion
	if source.DataVersion != nil {
		var dataVersion JsonFieldWithDefault_STATUS
		err := dataVersion.AssignProperties_From_JsonFieldWithDefault_STATUS(source.DataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault_STATUS() to populate field DataVersion")
		}
		mapping.DataVersion = &dataVersion
	} else {
		mapping.DataVersion = nil
	}

	// EventTime
	if source.EventTime != nil {
		var eventTime JsonField_STATUS
		err := eventTime.AssignProperties_From_JsonField_STATUS(source.EventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField_STATUS() to populate field EventTime")
		}
		mapping.EventTime = &eventTime
	} else {
		mapping.EventTime = nil
	}

	// EventType
	if source.EventType != nil {
		var eventType JsonFieldWithDefault_STATUS
		err := eventType.AssignProperties_From_JsonFieldWithDefault_STATUS(source.EventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault_STATUS() to populate field EventType")
		}
		mapping.EventType = &eventType
	} else {
		mapping.EventType = nil
	}

	// Id
	if source.Id != nil {
		var id JsonField_STATUS
		err := id.AssignProperties_From_JsonField_STATUS(source.Id)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField_STATUS() to populate field Id")
		}
		mapping.Id = &id
	} else {
		mapping.Id = nil
	}

	// InputSchemaMappingType
	mapping.InputSchemaMappingType = genruntime.ClonePointerToString(source.InputSchemaMappingType)

	// Subject
	if source.Subject != nil {
		var subject JsonFieldWithDefault_STATUS
		err := subject.AssignProperties_From_JsonFieldWithDefault_STATUS(source.Subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonFieldWithDefault_STATUS() to populate field Subject")
		}
		mapping.Subject = &subject
	} else {
		mapping.Subject = nil
	}

	// Topic
	if source.Topic != nil {
		var topic JsonField_STATUS
		err := topic.AssignProperties_From_JsonField_STATUS(source.Topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_JsonField_STATUS() to populate field Topic")
		}
		mapping.Topic = &topic
	} else {
		mapping.Topic = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonInputSchemaMapping_STATUS interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForJsonInputSchemaMapping_STATUS); ok {
		err := augmentedMapping.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_JsonInputSchemaMapping_STATUS populates the provided destination JsonInputSchemaMapping_STATUS from our JsonInputSchemaMapping_STATUS
func (mapping *JsonInputSchemaMapping_STATUS) AssignProperties_To_JsonInputSchemaMapping_STATUS(destination *v20200601s.JsonInputSchemaMapping_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// DataVersion
	if mapping.DataVersion != nil {
		var dataVersion v20200601s.JsonFieldWithDefault_STATUS
		err := mapping.DataVersion.AssignProperties_To_JsonFieldWithDefault_STATUS(&dataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault_STATUS() to populate field DataVersion")
		}
		destination.DataVersion = &dataVersion
	} else {
		destination.DataVersion = nil
	}

	// EventTime
	if mapping.EventTime != nil {
		var eventTime v20200601s.JsonField_STATUS
		err := mapping.EventTime.AssignProperties_To_JsonField_STATUS(&eventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField_STATUS() to populate field EventTime")
		}
		destination.EventTime = &eventTime
	} else {
		destination.EventTime = nil
	}

	// EventType
	if mapping.EventType != nil {
		var eventType v20200601s.JsonFieldWithDefault_STATUS
		err := mapping.EventType.AssignProperties_To_JsonFieldWithDefault_STATUS(&eventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault_STATUS() to populate field EventType")
		}
		destination.EventType = &eventType
	} else {
		destination.EventType = nil
	}

	// Id
	if mapping.Id != nil {
		var id v20200601s.JsonField_STATUS
		err := mapping.Id.AssignProperties_To_JsonField_STATUS(&id)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField_STATUS() to populate field Id")
		}
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// InputSchemaMappingType
	destination.InputSchemaMappingType = genruntime.ClonePointerToString(mapping.InputSchemaMappingType)

	// Subject
	if mapping.Subject != nil {
		var subject v20200601s.JsonFieldWithDefault_STATUS
		err := mapping.Subject.AssignProperties_To_JsonFieldWithDefault_STATUS(&subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonFieldWithDefault_STATUS() to populate field Subject")
		}
		destination.Subject = &subject
	} else {
		destination.Subject = nil
	}

	// Topic
	if mapping.Topic != nil {
		var topic v20200601s.JsonField_STATUS
		err := mapping.Topic.AssignProperties_To_JsonField_STATUS(&topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_JsonField_STATUS() to populate field Topic")
		}
		destination.Topic = &topic
	} else {
		destination.Topic = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonInputSchemaMapping_STATUS interface (if implemented) to customize the conversion
	var mappingAsAny any = mapping
	if augmentedMapping, ok := mappingAsAny.(augmentConversionForJsonInputSchemaMapping_STATUS); ok {
		err := augmentedMapping.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForJsonInputSchemaMapping interface {
	AssignPropertiesFrom(src *v20200601s.JsonInputSchemaMapping) error
	AssignPropertiesTo(dst *v20200601s.JsonInputSchemaMapping) error
}

type augmentConversionForJsonInputSchemaMapping_STATUS interface {
	AssignPropertiesFrom(src *v20200601s.JsonInputSchemaMapping_STATUS) error
	AssignPropertiesTo(dst *v20200601s.JsonInputSchemaMapping_STATUS) error
}

// Storage version of v1alpha1api20200601.JsonField
// Deprecated version of JsonField. Use v1beta20200601.JsonField instead
type JsonField struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SourceField *string                `json:"sourceField,omitempty"`
}

// AssignProperties_From_JsonField populates our JsonField from the provided source JsonField
func (field *JsonField) AssignProperties_From_JsonField(source *v20200601s.JsonField) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// SourceField
	field.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		field.PropertyBag = propertyBag
	} else {
		field.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonField interface (if implemented) to customize the conversion
	var fieldAsAny any = field
	if augmentedField, ok := fieldAsAny.(augmentConversionForJsonField); ok {
		err := augmentedField.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_JsonField populates the provided destination JsonField from our JsonField
func (field *JsonField) AssignProperties_To_JsonField(destination *v20200601s.JsonField) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(field.PropertyBag)

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(field.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonField interface (if implemented) to customize the conversion
	var fieldAsAny any = field
	if augmentedField, ok := fieldAsAny.(augmentConversionForJsonField); ok {
		err := augmentedField.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonField_STATUS
// Deprecated version of JsonField_STATUS. Use v1beta20200601.JsonField_STATUS instead
type JsonField_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SourceField *string                `json:"sourceField,omitempty"`
}

// AssignProperties_From_JsonField_STATUS populates our JsonField_STATUS from the provided source JsonField_STATUS
func (field *JsonField_STATUS) AssignProperties_From_JsonField_STATUS(source *v20200601s.JsonField_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// SourceField
	field.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		field.PropertyBag = propertyBag
	} else {
		field.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonField_STATUS interface (if implemented) to customize the conversion
	var fieldAsAny any = field
	if augmentedField, ok := fieldAsAny.(augmentConversionForJsonField_STATUS); ok {
		err := augmentedField.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_JsonField_STATUS populates the provided destination JsonField_STATUS from our JsonField_STATUS
func (field *JsonField_STATUS) AssignProperties_To_JsonField_STATUS(destination *v20200601s.JsonField_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(field.PropertyBag)

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(field.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonField_STATUS interface (if implemented) to customize the conversion
	var fieldAsAny any = field
	if augmentedField, ok := fieldAsAny.(augmentConversionForJsonField_STATUS); ok {
		err := augmentedField.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonFieldWithDefault
// Deprecated version of JsonFieldWithDefault. Use v1beta20200601.JsonFieldWithDefault instead
type JsonFieldWithDefault struct {
	DefaultValue *string                `json:"defaultValue,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SourceField  *string                `json:"sourceField,omitempty"`
}

// AssignProperties_From_JsonFieldWithDefault populates our JsonFieldWithDefault from the provided source JsonFieldWithDefault
func (withDefault *JsonFieldWithDefault) AssignProperties_From_JsonFieldWithDefault(source *v20200601s.JsonFieldWithDefault) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DefaultValue
	withDefault.DefaultValue = genruntime.ClonePointerToString(source.DefaultValue)

	// SourceField
	withDefault.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		withDefault.PropertyBag = propertyBag
	} else {
		withDefault.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonFieldWithDefault interface (if implemented) to customize the conversion
	var withDefaultAsAny any = withDefault
	if augmentedWithDefault, ok := withDefaultAsAny.(augmentConversionForJsonFieldWithDefault); ok {
		err := augmentedWithDefault.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_JsonFieldWithDefault populates the provided destination JsonFieldWithDefault from our JsonFieldWithDefault
func (withDefault *JsonFieldWithDefault) AssignProperties_To_JsonFieldWithDefault(destination *v20200601s.JsonFieldWithDefault) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(withDefault.PropertyBag)

	// DefaultValue
	destination.DefaultValue = genruntime.ClonePointerToString(withDefault.DefaultValue)

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(withDefault.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonFieldWithDefault interface (if implemented) to customize the conversion
	var withDefaultAsAny any = withDefault
	if augmentedWithDefault, ok := withDefaultAsAny.(augmentConversionForJsonFieldWithDefault); ok {
		err := augmentedWithDefault.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonFieldWithDefault_STATUS
// Deprecated version of JsonFieldWithDefault_STATUS. Use v1beta20200601.JsonFieldWithDefault_STATUS instead
type JsonFieldWithDefault_STATUS struct {
	DefaultValue *string                `json:"defaultValue,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SourceField  *string                `json:"sourceField,omitempty"`
}

// AssignProperties_From_JsonFieldWithDefault_STATUS populates our JsonFieldWithDefault_STATUS from the provided source JsonFieldWithDefault_STATUS
func (withDefault *JsonFieldWithDefault_STATUS) AssignProperties_From_JsonFieldWithDefault_STATUS(source *v20200601s.JsonFieldWithDefault_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DefaultValue
	withDefault.DefaultValue = genruntime.ClonePointerToString(source.DefaultValue)

	// SourceField
	withDefault.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		withDefault.PropertyBag = propertyBag
	} else {
		withDefault.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonFieldWithDefault_STATUS interface (if implemented) to customize the conversion
	var withDefaultAsAny any = withDefault
	if augmentedWithDefault, ok := withDefaultAsAny.(augmentConversionForJsonFieldWithDefault_STATUS); ok {
		err := augmentedWithDefault.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_JsonFieldWithDefault_STATUS populates the provided destination JsonFieldWithDefault_STATUS from our JsonFieldWithDefault_STATUS
func (withDefault *JsonFieldWithDefault_STATUS) AssignProperties_To_JsonFieldWithDefault_STATUS(destination *v20200601s.JsonFieldWithDefault_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(withDefault.PropertyBag)

	// DefaultValue
	destination.DefaultValue = genruntime.ClonePointerToString(withDefault.DefaultValue)

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(withDefault.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForJsonFieldWithDefault_STATUS interface (if implemented) to customize the conversion
	var withDefaultAsAny any = withDefault
	if augmentedWithDefault, ok := withDefaultAsAny.(augmentConversionForJsonFieldWithDefault_STATUS); ok {
		err := augmentedWithDefault.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForJsonField interface {
	AssignPropertiesFrom(src *v20200601s.JsonField) error
	AssignPropertiesTo(dst *v20200601s.JsonField) error
}

type augmentConversionForJsonField_STATUS interface {
	AssignPropertiesFrom(src *v20200601s.JsonField_STATUS) error
	AssignPropertiesTo(dst *v20200601s.JsonField_STATUS) error
}

type augmentConversionForJsonFieldWithDefault interface {
	AssignPropertiesFrom(src *v20200601s.JsonFieldWithDefault) error
	AssignPropertiesTo(dst *v20200601s.JsonFieldWithDefault) error
}

type augmentConversionForJsonFieldWithDefault_STATUS interface {
	AssignPropertiesFrom(src *v20200601s.JsonFieldWithDefault_STATUS) error
	AssignPropertiesTo(dst *v20200601s.JsonFieldWithDefault_STATUS) error
}

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
