// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601storage

import (
	"fmt"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1beta20200601storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20200601.Domain
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Domains_Spec  `json:"spec,omitempty"`
	Status            Domain_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Domain{}

// GetConditions returns the conditions of the resource
func (domain *Domain) GetConditions() conditions.Conditions {
	return domain.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (domain *Domain) SetConditions(conditions conditions.Conditions) {
	domain.Status.Conditions = conditions
}

var _ conversion.Convertible = &Domain{}

// ConvertFrom populates our Domain from the provided hub Domain
func (domain *Domain) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200601s.Domain)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Domain but received %T instead", hub)
	}

	return domain.AssignPropertiesFromDomain(source)
}

// ConvertTo populates the provided hub Domain from our Domain
func (domain *Domain) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200601s.Domain)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Domain but received %T instead", hub)
	}

	return domain.AssignPropertiesToDomain(destination)
}

var _ genruntime.KubernetesResource = &Domain{}

// AzureName returns the Azure name of the resource
func (domain *Domain) AzureName() string {
	return domain.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (domain Domain) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceScope returns the scope of the resource
func (domain *Domain) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (domain *Domain) GetSpec() genruntime.ConvertibleSpec {
	return &domain.Spec
}

// GetStatus returns the status of this resource
func (domain *Domain) GetStatus() genruntime.ConvertibleStatus {
	return &domain.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/domains"
func (domain *Domain) GetType() string {
	return "Microsoft.EventGrid/domains"
}

// NewEmptyStatus returns a new empty (blank) status
func (domain *Domain) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Domain_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (domain *Domain) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(domain.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  domain.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (domain *Domain) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Domain_Status); ok {
		domain.Status = *st
		return nil
	}

	// Convert status to required version
	var st Domain_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	domain.Status = st
	return nil
}

// AssignPropertiesFromDomain populates our Domain from the provided source Domain
func (domain *Domain) AssignPropertiesFromDomain(source *v20200601s.Domain) error {

	// ObjectMeta
	domain.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Domains_Spec
	err := spec.AssignPropertiesFromDomainsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDomainsSpec() to populate field Spec")
	}
	domain.Spec = spec

	// Status
	var status Domain_Status
	err = status.AssignPropertiesFromDomainStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDomainStatus() to populate field Status")
	}
	domain.Status = status

	// No error
	return nil
}

// AssignPropertiesToDomain populates the provided destination Domain from our Domain
func (domain *Domain) AssignPropertiesToDomain(destination *v20200601s.Domain) error {

	// ObjectMeta
	destination.ObjectMeta = *domain.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200601s.Domains_Spec
	err := domain.Spec.AssignPropertiesToDomainsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDomainsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200601s.Domain_Status
	err = domain.Status.AssignPropertiesToDomainStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDomainStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (domain *Domain) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: domain.Spec.OriginalVersion,
		Kind:    "Domain",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20200601.Domain
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Storage version of v1alpha1api20200601.APIVersion
// Deprecated version of APIVersion. Use v1beta20200601.APIVersion instead
// +kubebuilder:validation:Enum={"2020-06-01"}
type APIVersion string

const APIVersionValue = APIVersion("2020-06-01")

// Storage version of v1alpha1api20200601.Domain_Status
// Deprecated version of Domain_Status. Use v1beta20200601.Domain_Status instead
type Domain_Status struct {
	Conditions                 []conditions.Condition                                        `json:"conditions,omitempty"`
	Endpoint                   *string                                                       `json:"endpoint,omitempty"`
	Id                         *string                                                       `json:"id,omitempty"`
	InboundIpRules             []InboundIpRule_Status                                        `json:"inboundIpRules,omitempty"`
	InputSchema                *string                                                       `json:"inputSchema,omitempty"`
	InputSchemaMapping         *InputSchemaMapping_Status                                    `json:"inputSchemaMapping,omitempty"`
	Location                   *string                                                       `json:"location,omitempty"`
	MetricResourceId           *string                                                       `json:"metricResourceId,omitempty"`
	Name                       *string                                                       `json:"name,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_Status_Domain_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	PropertyBag                genruntime.PropertyBag                                        `json:"$propertyBag,omitempty"`
	ProvisioningState          *string                                                       `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *string                                                       `json:"publicNetworkAccess,omitempty"`
	SystemData                 *SystemData_Status                                            `json:"systemData,omitempty"`
	Tags                       map[string]string                                             `json:"tags,omitempty"`
	Type                       *string                                                       `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Domain_Status{}

// ConvertStatusFrom populates our Domain_Status from the provided source
func (domain *Domain_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200601s.Domain_Status)
	if ok {
		// Populate our instance from source
		return domain.AssignPropertiesFromDomainStatus(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Domain_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = domain.AssignPropertiesFromDomainStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Domain_Status
func (domain *Domain_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200601s.Domain_Status)
	if ok {
		// Populate destination from our instance
		return domain.AssignPropertiesToDomainStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Domain_Status{}
	err := domain.AssignPropertiesToDomainStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromDomainStatus populates our Domain_Status from the provided source Domain_Status
func (domain *Domain_Status) AssignPropertiesFromDomainStatus(source *v20200601s.Domain_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	domain.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Endpoint
	domain.Endpoint = genruntime.ClonePointerToString(source.Endpoint)

	// Id
	domain.Id = genruntime.ClonePointerToString(source.Id)

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule_Status, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule_Status
			err := inboundIpRule.AssignPropertiesFromInboundIpRuleStatus(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInboundIpRuleStatus() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domain.InboundIpRules = inboundIpRuleList
	} else {
		domain.InboundIpRules = nil
	}

	// InputSchema
	domain.InputSchema = genruntime.ClonePointerToString(source.InputSchema)

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping_Status
		err := inputSchemaMapping.AssignPropertiesFromInputSchemaMappingStatus(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromInputSchemaMappingStatus() to populate field InputSchemaMapping")
		}
		domain.InputSchemaMapping = &inputSchemaMapping
	} else {
		domain.InputSchemaMapping = nil
	}

	// Location
	domain.Location = genruntime.ClonePointerToString(source.Location)

	// MetricResourceId
	domain.MetricResourceId = genruntime.ClonePointerToString(source.MetricResourceId)

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_Domain_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_Domain_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusDomainSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusDomainSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		domain.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		domain.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	domain.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccess
	domain.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		domain.SystemData = &systemDatum
	} else {
		domain.SystemData = nil
	}

	// Tags
	domain.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	domain.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		domain.PropertyBag = propertyBag
	} else {
		domain.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDomainStatus populates the provided destination Domain_Status from our Domain_Status
func (domain *Domain_Status) AssignPropertiesToDomainStatus(destination *v20200601s.Domain_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domain.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(domain.Conditions)

	// Endpoint
	destination.Endpoint = genruntime.ClonePointerToString(domain.Endpoint)

	// Id
	destination.Id = genruntime.ClonePointerToString(domain.Id)

	// InboundIpRules
	if domain.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule_Status, len(domain.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domain.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule_Status
			err := inboundIpRuleItem.AssignPropertiesToInboundIpRuleStatus(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInboundIpRuleStatus() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	destination.InputSchema = genruntime.ClonePointerToString(domain.InputSchema)

	// InputSchemaMapping
	if domain.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.InputSchemaMapping_Status
		err := domain.InputSchemaMapping.AssignPropertiesToInputSchemaMappingStatus(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToInputSchemaMappingStatus() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domain.Location)

	// MetricResourceId
	destination.MetricResourceId = genruntime.ClonePointerToString(domain.MetricResourceId)

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// PrivateEndpointConnections
	if domain.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20200601s.PrivateEndpointConnection_Status_Domain_SubResourceEmbedded, len(domain.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range domain.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20200601s.PrivateEndpointConnection_Status_Domain_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusDomainSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusDomainSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(domain.ProvisioningState)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(domain.PublicNetworkAccess)

	// SystemData
	if domain.SystemData != nil {
		var systemDatum v20200601s.SystemData_Status
		err := domain.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domain.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(domain.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.Domains_Spec
type Domains_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName          string                  `json:"azureName,omitempty"`
	InboundIpRules     []InboundIpRule         `json:"inboundIpRules,omitempty"`
	InputSchema        *string                 `json:"inputSchema,omitempty"`
	InputSchemaMapping *JsonInputSchemaMapping `json:"inputSchemaMapping,omitempty"`
	Location           *string                 `json:"location,omitempty"`
	OriginalVersion    string                  `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag         genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	PublicNetworkAccess *string                            `json:"publicNetworkAccess,omitempty"`
	Tags                map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Domains_Spec{}

// ConvertSpecFrom populates our Domains_Spec from the provided source
func (domains *Domains_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200601s.Domains_Spec)
	if ok {
		// Populate our instance from source
		return domains.AssignPropertiesFromDomainsSpec(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Domains_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = domains.AssignPropertiesFromDomainsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Domains_Spec
func (domains *Domains_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200601s.Domains_Spec)
	if ok {
		// Populate destination from our instance
		return domains.AssignPropertiesToDomainsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Domains_Spec{}
	err := domains.AssignPropertiesToDomainsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDomainsSpec populates our Domains_Spec from the provided source Domains_Spec
func (domains *Domains_Spec) AssignPropertiesFromDomainsSpec(source *v20200601s.Domains_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	domains.AzureName = source.AzureName

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule
			err := inboundIpRule.AssignPropertiesFromInboundIpRule(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domains.InboundIpRules = inboundIpRuleList
	} else {
		domains.InboundIpRules = nil
	}

	// InputSchema
	domains.InputSchema = genruntime.ClonePointerToString(source.InputSchema)

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping JsonInputSchemaMapping
		err := inputSchemaMapping.AssignPropertiesFromJsonInputSchemaMapping(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonInputSchemaMapping() to populate field InputSchemaMapping")
		}
		domains.InputSchemaMapping = &inputSchemaMapping
	} else {
		domains.InputSchemaMapping = nil
	}

	// Location
	domains.Location = genruntime.ClonePointerToString(source.Location)

	// OriginalVersion
	domains.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		domains.Owner = &owner
	} else {
		domains.Owner = nil
	}

	// PublicNetworkAccess
	domains.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// Tags
	domains.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		domains.PropertyBag = propertyBag
	} else {
		domains.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDomainsSpec populates the provided destination Domains_Spec from our Domains_Spec
func (domains *Domains_Spec) AssignPropertiesToDomainsSpec(destination *v20200601s.Domains_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domains.PropertyBag)

	// AzureName
	destination.AzureName = domains.AzureName

	// InboundIpRules
	if domains.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule, len(domains.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domains.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule
			err := inboundIpRuleItem.AssignPropertiesToInboundIpRule(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	destination.InputSchema = genruntime.ClonePointerToString(domains.InputSchema)

	// InputSchemaMapping
	if domains.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.JsonInputSchemaMapping
		err := domains.InputSchemaMapping.AssignPropertiesToJsonInputSchemaMapping(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonInputSchemaMapping() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domains.Location)

	// OriginalVersion
	destination.OriginalVersion = domains.OriginalVersion

	// Owner
	if domains.Owner != nil {
		owner := domains.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(domains.PublicNetworkAccess)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domains.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InboundIpRule
// Deprecated version of InboundIpRule. Use v1beta20200601.InboundIpRule instead
type InboundIpRule struct {
	Action      *string                `json:"action,omitempty"`
	IpMask      *string                `json:"ipMask,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromInboundIpRule populates our InboundIpRule from the provided source InboundIpRule
func (rule *InboundIpRule) AssignPropertiesFromInboundIpRule(source *v20200601s.InboundIpRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToInboundIpRule populates the provided destination InboundIpRule from our InboundIpRule
func (rule *InboundIpRule) AssignPropertiesToInboundIpRule(destination *v20200601s.InboundIpRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InboundIpRule_Status
// Deprecated version of InboundIpRule_Status. Use v1beta20200601.InboundIpRule_Status instead
type InboundIpRule_Status struct {
	Action      *string                `json:"action,omitempty"`
	IpMask      *string                `json:"ipMask,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromInboundIpRuleStatus populates our InboundIpRule_Status from the provided source InboundIpRule_Status
func (rule *InboundIpRule_Status) AssignPropertiesFromInboundIpRuleStatus(source *v20200601s.InboundIpRule_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToInboundIpRuleStatus populates the provided destination InboundIpRule_Status from our InboundIpRule_Status
func (rule *InboundIpRule_Status) AssignPropertiesToInboundIpRuleStatus(destination *v20200601s.InboundIpRule_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InputSchemaMapping_Status
// Deprecated version of InputSchemaMapping_Status. Use v1beta20200601.InputSchemaMapping_Status instead
type InputSchemaMapping_Status struct {
	InputSchemaMappingType *string                `json:"inputSchemaMappingType,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromInputSchemaMappingStatus populates our InputSchemaMapping_Status from the provided source InputSchemaMapping_Status
func (mapping *InputSchemaMapping_Status) AssignPropertiesFromInputSchemaMappingStatus(source *v20200601s.InputSchemaMapping_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// InputSchemaMappingType
	mapping.InputSchemaMappingType = genruntime.ClonePointerToString(source.InputSchemaMappingType)

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToInputSchemaMappingStatus populates the provided destination InputSchemaMapping_Status from our InputSchemaMapping_Status
func (mapping *InputSchemaMapping_Status) AssignPropertiesToInputSchemaMappingStatus(destination *v20200601s.InputSchemaMapping_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// InputSchemaMappingType
	destination.InputSchemaMappingType = genruntime.ClonePointerToString(mapping.InputSchemaMappingType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonInputSchemaMapping
// Deprecated version of JsonInputSchemaMapping. Use v1beta20200601.JsonInputSchemaMapping instead
type JsonInputSchemaMapping struct {
	InputSchemaMappingType *string                           `json:"inputSchemaMappingType,omitempty"`
	Properties             *JsonInputSchemaMappingProperties `json:"properties,omitempty"`
	PropertyBag            genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromJsonInputSchemaMapping populates our JsonInputSchemaMapping from the provided source JsonInputSchemaMapping
func (mapping *JsonInputSchemaMapping) AssignPropertiesFromJsonInputSchemaMapping(source *v20200601s.JsonInputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// InputSchemaMappingType
	mapping.InputSchemaMappingType = genruntime.ClonePointerToString(source.InputSchemaMappingType)

	// Properties
	if source.Properties != nil {
		var property JsonInputSchemaMappingProperties
		err := property.AssignPropertiesFromJsonInputSchemaMappingProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonInputSchemaMappingProperties() to populate field Properties")
		}
		mapping.Properties = &property
	} else {
		mapping.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToJsonInputSchemaMapping populates the provided destination JsonInputSchemaMapping from our JsonInputSchemaMapping
func (mapping *JsonInputSchemaMapping) AssignPropertiesToJsonInputSchemaMapping(destination *v20200601s.JsonInputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// InputSchemaMappingType
	destination.InputSchemaMappingType = genruntime.ClonePointerToString(mapping.InputSchemaMappingType)

	// Properties
	if mapping.Properties != nil {
		var property v20200601s.JsonInputSchemaMappingProperties
		err := mapping.Properties.AssignPropertiesToJsonInputSchemaMappingProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonInputSchemaMappingProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.PrivateEndpointConnection_Status_Domain_SubResourceEmbedded
// Deprecated version of PrivateEndpointConnection_Status_Domain_SubResourceEmbedded. Use v1beta20200601.PrivateEndpointConnection_Status_Domain_SubResourceEmbedded instead
type PrivateEndpointConnection_Status_Domain_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromPrivateEndpointConnectionStatusDomainSubResourceEmbedded populates our PrivateEndpointConnection_Status_Domain_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_Domain_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusDomainSubResourceEmbedded(source *v20200601s.PrivateEndpointConnection_Status_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusDomainSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_Domain_SubResourceEmbedded from our PrivateEndpointConnection_Status_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_Domain_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusDomainSubResourceEmbedded(destination *v20200601s.PrivateEndpointConnection_Status_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.SystemData_Status
// Deprecated version of SystemData_Status. Use v1beta20200601.SystemData_Status instead
type SystemData_Status struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (data *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *v20200601s.SystemData_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	data.CreatedByType = genruntime.ClonePointerToString(source.CreatedByType)

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	data.LastModifiedByType = genruntime.ClonePointerToString(source.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		data.PropertyBag = propertyBag
	} else {
		data.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (data *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *v20200601s.SystemData_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(data.PropertyBag)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	destination.CreatedByType = genruntime.ClonePointerToString(data.CreatedByType)

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	destination.LastModifiedByType = genruntime.ClonePointerToString(data.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonInputSchemaMappingProperties
// Deprecated version of JsonInputSchemaMappingProperties. Use v1beta20200601.JsonInputSchemaMappingProperties instead
type JsonInputSchemaMappingProperties struct {
	DataVersion *JsonFieldWithDefault  `json:"dataVersion,omitempty"`
	EventTime   *JsonField             `json:"eventTime,omitempty"`
	EventType   *JsonFieldWithDefault  `json:"eventType,omitempty"`
	Id          *JsonField             `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Subject     *JsonFieldWithDefault  `json:"subject,omitempty"`
	Topic       *JsonField             `json:"topic,omitempty"`
}

// AssignPropertiesFromJsonInputSchemaMappingProperties populates our JsonInputSchemaMappingProperties from the provided source JsonInputSchemaMappingProperties
func (properties *JsonInputSchemaMappingProperties) AssignPropertiesFromJsonInputSchemaMappingProperties(source *v20200601s.JsonInputSchemaMappingProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DataVersion
	if source.DataVersion != nil {
		var dataVersion JsonFieldWithDefault
		err := dataVersion.AssignPropertiesFromJsonFieldWithDefault(source.DataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonFieldWithDefault() to populate field DataVersion")
		}
		properties.DataVersion = &dataVersion
	} else {
		properties.DataVersion = nil
	}

	// EventTime
	if source.EventTime != nil {
		var eventTime JsonField
		err := eventTime.AssignPropertiesFromJsonField(source.EventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonField() to populate field EventTime")
		}
		properties.EventTime = &eventTime
	} else {
		properties.EventTime = nil
	}

	// EventType
	if source.EventType != nil {
		var eventType JsonFieldWithDefault
		err := eventType.AssignPropertiesFromJsonFieldWithDefault(source.EventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonFieldWithDefault() to populate field EventType")
		}
		properties.EventType = &eventType
	} else {
		properties.EventType = nil
	}

	// Id
	if source.Id != nil {
		var id JsonField
		err := id.AssignPropertiesFromJsonField(source.Id)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonField() to populate field Id")
		}
		properties.Id = &id
	} else {
		properties.Id = nil
	}

	// Subject
	if source.Subject != nil {
		var subject JsonFieldWithDefault
		err := subject.AssignPropertiesFromJsonFieldWithDefault(source.Subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonFieldWithDefault() to populate field Subject")
		}
		properties.Subject = &subject
	} else {
		properties.Subject = nil
	}

	// Topic
	if source.Topic != nil {
		var topic JsonField
		err := topic.AssignPropertiesFromJsonField(source.Topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromJsonField() to populate field Topic")
		}
		properties.Topic = &topic
	} else {
		properties.Topic = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToJsonInputSchemaMappingProperties populates the provided destination JsonInputSchemaMappingProperties from our JsonInputSchemaMappingProperties
func (properties *JsonInputSchemaMappingProperties) AssignPropertiesToJsonInputSchemaMappingProperties(destination *v20200601s.JsonInputSchemaMappingProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// DataVersion
	if properties.DataVersion != nil {
		var dataVersion v20200601s.JsonFieldWithDefault
		err := properties.DataVersion.AssignPropertiesToJsonFieldWithDefault(&dataVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonFieldWithDefault() to populate field DataVersion")
		}
		destination.DataVersion = &dataVersion
	} else {
		destination.DataVersion = nil
	}

	// EventTime
	if properties.EventTime != nil {
		var eventTime v20200601s.JsonField
		err := properties.EventTime.AssignPropertiesToJsonField(&eventTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonField() to populate field EventTime")
		}
		destination.EventTime = &eventTime
	} else {
		destination.EventTime = nil
	}

	// EventType
	if properties.EventType != nil {
		var eventType v20200601s.JsonFieldWithDefault
		err := properties.EventType.AssignPropertiesToJsonFieldWithDefault(&eventType)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonFieldWithDefault() to populate field EventType")
		}
		destination.EventType = &eventType
	} else {
		destination.EventType = nil
	}

	// Id
	if properties.Id != nil {
		var id v20200601s.JsonField
		err := properties.Id.AssignPropertiesToJsonField(&id)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonField() to populate field Id")
		}
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Subject
	if properties.Subject != nil {
		var subject v20200601s.JsonFieldWithDefault
		err := properties.Subject.AssignPropertiesToJsonFieldWithDefault(&subject)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonFieldWithDefault() to populate field Subject")
		}
		destination.Subject = &subject
	} else {
		destination.Subject = nil
	}

	// Topic
	if properties.Topic != nil {
		var topic v20200601s.JsonField
		err := properties.Topic.AssignPropertiesToJsonField(&topic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToJsonField() to populate field Topic")
		}
		destination.Topic = &topic
	} else {
		destination.Topic = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonField
// Deprecated version of JsonField. Use v1beta20200601.JsonField instead
type JsonField struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SourceField *string                `json:"sourceField,omitempty"`
}

// AssignPropertiesFromJsonField populates our JsonField from the provided source JsonField
func (field *JsonField) AssignPropertiesFromJsonField(source *v20200601s.JsonField) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// SourceField
	field.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		field.PropertyBag = propertyBag
	} else {
		field.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToJsonField populates the provided destination JsonField from our JsonField
func (field *JsonField) AssignPropertiesToJsonField(destination *v20200601s.JsonField) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(field.PropertyBag)

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(field.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.JsonFieldWithDefault
// Deprecated version of JsonFieldWithDefault. Use v1beta20200601.JsonFieldWithDefault instead
type JsonFieldWithDefault struct {
	DefaultValue *string                `json:"defaultValue,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SourceField  *string                `json:"sourceField,omitempty"`
}

// AssignPropertiesFromJsonFieldWithDefault populates our JsonFieldWithDefault from the provided source JsonFieldWithDefault
func (withDefault *JsonFieldWithDefault) AssignPropertiesFromJsonFieldWithDefault(source *v20200601s.JsonFieldWithDefault) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DefaultValue
	withDefault.DefaultValue = genruntime.ClonePointerToString(source.DefaultValue)

	// SourceField
	withDefault.SourceField = genruntime.ClonePointerToString(source.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		withDefault.PropertyBag = propertyBag
	} else {
		withDefault.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToJsonFieldWithDefault populates the provided destination JsonFieldWithDefault from our JsonFieldWithDefault
func (withDefault *JsonFieldWithDefault) AssignPropertiesToJsonFieldWithDefault(destination *v20200601s.JsonFieldWithDefault) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(withDefault.PropertyBag)

	// DefaultValue
	destination.DefaultValue = genruntime.ClonePointerToString(withDefault.DefaultValue)

	// SourceField
	destination.SourceField = genruntime.ClonePointerToString(withDefault.SourceField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
