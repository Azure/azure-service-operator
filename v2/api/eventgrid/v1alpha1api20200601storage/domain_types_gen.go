// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601storage

import (
	"fmt"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1beta20200601storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20200601.Domain
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Domain_Spec   `json:"spec,omitempty"`
	Status            Domain_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Domain{}

// GetConditions returns the conditions of the resource
func (domain *Domain) GetConditions() conditions.Conditions {
	return domain.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (domain *Domain) SetConditions(conditions conditions.Conditions) {
	domain.Status.Conditions = conditions
}

var _ conversion.Convertible = &Domain{}

// ConvertFrom populates our Domain from the provided hub Domain
func (domain *Domain) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200601s.Domain)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Domain but received %T instead", hub)
	}

	return domain.AssignPropertiesFromDomain(source)
}

// ConvertTo populates the provided hub Domain from our Domain
func (domain *Domain) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200601s.Domain)
	if !ok {
		return fmt.Errorf("expected eventgrid/v1beta20200601storage/Domain but received %T instead", hub)
	}

	return domain.AssignPropertiesToDomain(destination)
}

var _ genruntime.KubernetesResource = &Domain{}

// AzureName returns the Azure name of the resource
func (domain *Domain) AzureName() string {
	return domain.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (domain Domain) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceKind returns the kind of the resource
func (domain *Domain) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (domain *Domain) GetSpec() genruntime.ConvertibleSpec {
	return &domain.Spec
}

// GetStatus returns the status of this resource
func (domain *Domain) GetStatus() genruntime.ConvertibleStatus {
	return &domain.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (domain *Domain) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (domain *Domain) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Domain_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (domain *Domain) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(domain.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  domain.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (domain *Domain) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Domain_STATUS); ok {
		domain.Status = *st
		return nil
	}

	// Convert status to required version
	var st Domain_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	domain.Status = st
	return nil
}

// AssignPropertiesFromDomain populates our Domain from the provided source Domain
func (domain *Domain) AssignPropertiesFromDomain(source *v20200601s.Domain) error {

	// ObjectMeta
	domain.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Domain_Spec
	err := spec.AssignPropertiesFromDomain_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDomain_Spec() to populate field Spec")
	}
	domain.Spec = spec

	// Status
	var status Domain_STATUS
	err = status.AssignPropertiesFromDomain_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDomain_STATUS() to populate field Status")
	}
	domain.Status = status

	// No error
	return nil
}

// AssignPropertiesToDomain populates the provided destination Domain from our Domain
func (domain *Domain) AssignPropertiesToDomain(destination *v20200601s.Domain) error {

	// ObjectMeta
	destination.ObjectMeta = *domain.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200601s.Domain_Spec
	err := domain.Spec.AssignPropertiesToDomain_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDomain_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200601s.Domain_STATUS
	err = domain.Status.AssignPropertiesToDomain_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDomain_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (domain *Domain) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: domain.Spec.OriginalVersion,
		Kind:    "Domain",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20200601.Domain
// Deprecated version of Domain. Use v1beta20200601.Domain instead
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Storage version of v1alpha1api20200601.APIVersion
// Deprecated version of APIVersion. Use v1beta20200601.APIVersion instead
// +kubebuilder:validation:Enum={"2020-06-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-06-01")

// Storage version of v1alpha1api20200601.Domain_STATUS
// Deprecated version of Domain_STATUS. Use v1beta20200601.Domain_STATUS instead
type Domain_STATUS struct {
	Conditions                 []conditions.Condition                                        `json:"conditions,omitempty"`
	Endpoint                   *string                                                       `json:"endpoint,omitempty"`
	Id                         *string                                                       `json:"id,omitempty"`
	InboundIpRules             []InboundIpRule_STATUS                                        `json:"inboundIpRules,omitempty"`
	InputSchema                *string                                                       `json:"inputSchema,omitempty"`
	InputSchemaMapping         *InputSchemaMapping_STATUS                                    `json:"inputSchemaMapping,omitempty"`
	Location                   *string                                                       `json:"location,omitempty"`
	MetricResourceId           *string                                                       `json:"metricResourceId,omitempty"`
	Name                       *string                                                       `json:"name,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	PropertyBag                genruntime.PropertyBag                                        `json:"$propertyBag,omitempty"`
	ProvisioningState          *string                                                       `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *string                                                       `json:"publicNetworkAccess,omitempty"`
	SystemData                 *SystemData_STATUS                                            `json:"systemData,omitempty"`
	Tags                       map[string]string                                             `json:"tags,omitempty"`
	Type                       *string                                                       `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Domain_STATUS{}

// ConvertStatusFrom populates our Domain_STATUS from the provided source
func (domain *Domain_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200601s.Domain_STATUS)
	if ok {
		// Populate our instance from source
		return domain.AssignPropertiesFromDomain_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Domain_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = domain.AssignPropertiesFromDomain_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Domain_STATUS
func (domain *Domain_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200601s.Domain_STATUS)
	if ok {
		// Populate destination from our instance
		return domain.AssignPropertiesToDomain_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Domain_STATUS{}
	err := domain.AssignPropertiesToDomain_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromDomain_STATUS populates our Domain_STATUS from the provided source Domain_STATUS
func (domain *Domain_STATUS) AssignPropertiesFromDomain_STATUS(source *v20200601s.Domain_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	domain.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Endpoint
	domain.Endpoint = genruntime.ClonePointerToString(source.Endpoint)

	// Id
	domain.Id = genruntime.ClonePointerToString(source.Id)

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule_STATUS, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule_STATUS
			err := inboundIpRule.AssignPropertiesFromInboundIpRule_STATUS(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domain.InboundIpRules = inboundIpRuleList
	} else {
		domain.InboundIpRules = nil
	}

	// InputSchema
	domain.InputSchema = genruntime.ClonePointerToString(source.InputSchema)

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping_STATUS
		err := inputSchemaMapping.AssignPropertiesFromInputSchemaMapping_STATUS(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromInputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		domain.InputSchemaMapping = &inputSchemaMapping
	} else {
		domain.InputSchemaMapping = nil
	}

	// Location
	domain.Location = genruntime.ClonePointerToString(source.Location)

	// MetricResourceId
	domain.MetricResourceId = genruntime.ClonePointerToString(source.MetricResourceId)

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		domain.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		domain.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	domain.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccess
	domain.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignPropertiesFromSystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_STATUS() to populate field SystemData")
		}
		domain.SystemData = &systemDatum
	} else {
		domain.SystemData = nil
	}

	// Tags
	domain.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	domain.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		domain.PropertyBag = propertyBag
	} else {
		domain.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDomain_STATUS populates the provided destination Domain_STATUS from our Domain_STATUS
func (domain *Domain_STATUS) AssignPropertiesToDomain_STATUS(destination *v20200601s.Domain_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domain.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(domain.Conditions)

	// Endpoint
	destination.Endpoint = genruntime.ClonePointerToString(domain.Endpoint)

	// Id
	destination.Id = genruntime.ClonePointerToString(domain.Id)

	// InboundIpRules
	if domain.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule_STATUS, len(domain.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domain.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule_STATUS
			err := inboundIpRuleItem.AssignPropertiesToInboundIpRule_STATUS(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInboundIpRule_STATUS() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	destination.InputSchema = genruntime.ClonePointerToString(domain.InputSchema)

	// InputSchemaMapping
	if domain.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.InputSchemaMapping_STATUS
		err := domain.InputSchemaMapping.AssignPropertiesToInputSchemaMapping_STATUS(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToInputSchemaMapping_STATUS() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domain.Location)

	// MetricResourceId
	destination.MetricResourceId = genruntime.ClonePointerToString(domain.MetricResourceId)

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// PrivateEndpointConnections
	if domain.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded, len(domain.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range domain.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(domain.ProvisioningState)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(domain.PublicNetworkAccess)

	// SystemData
	if domain.SystemData != nil {
		var systemDatum v20200601s.SystemData_STATUS
		err := domain.SystemData.AssignPropertiesToSystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domain.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(domain.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.Domain_Spec
type Domain_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName          string              `json:"azureName,omitempty"`
	Endpoint           *string             `json:"endpoint,omitempty"`
	Id                 *string             `json:"id,omitempty"`
	InboundIpRules     []InboundIpRule     `json:"inboundIpRules,omitempty"`
	InputSchema        *string             `json:"inputSchema,omitempty"`
	InputSchemaMapping *InputSchemaMapping `json:"inputSchemaMapping,omitempty"`
	Location           *string             `json:"location,omitempty"`
	MetricResourceId   *string             `json:"metricResourceId,omitempty"`
	OriginalVersion    string              `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                      *genruntime.KnownResourceReference                     `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PrivateEndpointConnections []PrivateEndpointConnection_Domain_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	PropertyBag                genruntime.PropertyBag                                 `json:"$propertyBag,omitempty"`
	ProvisioningState          *string                                                `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *string                                                `json:"publicNetworkAccess,omitempty"`
	SystemData                 *SystemData                                            `json:"systemData,omitempty"`
	Tags                       map[string]string                                      `json:"tags,omitempty"`
	Type                       *string                                                `json:"type,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Domain_Spec{}

// ConvertSpecFrom populates our Domain_Spec from the provided source
func (domain *Domain_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200601s.Domain_Spec)
	if ok {
		// Populate our instance from source
		return domain.AssignPropertiesFromDomain_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.Domain_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = domain.AssignPropertiesFromDomain_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Domain_Spec
func (domain *Domain_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200601s.Domain_Spec)
	if ok {
		// Populate destination from our instance
		return domain.AssignPropertiesToDomain_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.Domain_Spec{}
	err := domain.AssignPropertiesToDomain_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDomain_Spec populates our Domain_Spec from the provided source Domain_Spec
func (domain *Domain_Spec) AssignPropertiesFromDomain_Spec(source *v20200601s.Domain_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	domain.AzureName = source.AzureName

	// Endpoint
	domain.Endpoint = genruntime.ClonePointerToString(source.Endpoint)

	// Id
	domain.Id = genruntime.ClonePointerToString(source.Id)

	// InboundIpRules
	if source.InboundIpRules != nil {
		inboundIpRuleList := make([]InboundIpRule, len(source.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range source.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule InboundIpRule
			err := inboundIpRule.AssignPropertiesFromInboundIpRule(&inboundIpRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		domain.InboundIpRules = inboundIpRuleList
	} else {
		domain.InboundIpRules = nil
	}

	// InputSchema
	domain.InputSchema = genruntime.ClonePointerToString(source.InputSchema)

	// InputSchemaMapping
	if source.InputSchemaMapping != nil {
		var inputSchemaMapping InputSchemaMapping
		err := inputSchemaMapping.AssignPropertiesFromInputSchemaMapping(source.InputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromInputSchemaMapping() to populate field InputSchemaMapping")
		}
		domain.InputSchemaMapping = &inputSchemaMapping
	} else {
		domain.InputSchemaMapping = nil
	}

	// Location
	domain.Location = genruntime.ClonePointerToString(source.Location)

	// MetricResourceId
	domain.MetricResourceId = genruntime.ClonePointerToString(source.MetricResourceId)

	// OriginalVersion
	domain.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		domain.Owner = &owner
	} else {
		domain.Owner = nil
	}

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Domain_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Domain_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnection_Domain_SubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnection_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		domain.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		domain.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	domain.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccess
	domain.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData
		err := systemDatum.AssignPropertiesFromSystemData(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData() to populate field SystemData")
		}
		domain.SystemData = &systemDatum
	} else {
		domain.SystemData = nil
	}

	// Tags
	domain.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	domain.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		domain.PropertyBag = propertyBag
	} else {
		domain.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDomain_Spec populates the provided destination Domain_Spec from our Domain_Spec
func (domain *Domain_Spec) AssignPropertiesToDomain_Spec(destination *v20200601s.Domain_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domain.PropertyBag)

	// AzureName
	destination.AzureName = domain.AzureName

	// Endpoint
	destination.Endpoint = genruntime.ClonePointerToString(domain.Endpoint)

	// Id
	destination.Id = genruntime.ClonePointerToString(domain.Id)

	// InboundIpRules
	if domain.InboundIpRules != nil {
		inboundIpRuleList := make([]v20200601s.InboundIpRule, len(domain.InboundIpRules))
		for inboundIpRuleIndex, inboundIpRuleItem := range domain.InboundIpRules {
			// Shadow the loop variable to avoid aliasing
			inboundIpRuleItem := inboundIpRuleItem
			var inboundIpRule v20200601s.InboundIpRule
			err := inboundIpRuleItem.AssignPropertiesToInboundIpRule(&inboundIpRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInboundIpRule() to populate field InboundIpRules")
			}
			inboundIpRuleList[inboundIpRuleIndex] = inboundIpRule
		}
		destination.InboundIpRules = inboundIpRuleList
	} else {
		destination.InboundIpRules = nil
	}

	// InputSchema
	destination.InputSchema = genruntime.ClonePointerToString(domain.InputSchema)

	// InputSchemaMapping
	if domain.InputSchemaMapping != nil {
		var inputSchemaMapping v20200601s.InputSchemaMapping
		err := domain.InputSchemaMapping.AssignPropertiesToInputSchemaMapping(&inputSchemaMapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToInputSchemaMapping() to populate field InputSchemaMapping")
		}
		destination.InputSchemaMapping = &inputSchemaMapping
	} else {
		destination.InputSchemaMapping = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(domain.Location)

	// MetricResourceId
	destination.MetricResourceId = genruntime.ClonePointerToString(domain.MetricResourceId)

	// OriginalVersion
	destination.OriginalVersion = domain.OriginalVersion

	// Owner
	if domain.Owner != nil {
		owner := domain.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PrivateEndpointConnections
	if domain.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20200601s.PrivateEndpointConnection_Domain_SubResourceEmbedded, len(domain.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range domain.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20200601s.PrivateEndpointConnection_Domain_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnection_Domain_SubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnection_Domain_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(domain.ProvisioningState)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(domain.PublicNetworkAccess)

	// SystemData
	if domain.SystemData != nil {
		var systemDatum v20200601s.SystemData
		err := domain.SystemData.AssignPropertiesToSystemData(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(domain.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(domain.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InboundIpRule
// Deprecated version of InboundIpRule. Use v1beta20200601.InboundIpRule instead
type InboundIpRule struct {
	Action      *string                `json:"action,omitempty"`
	IpMask      *string                `json:"ipMask,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromInboundIpRule populates our InboundIpRule from the provided source InboundIpRule
func (rule *InboundIpRule) AssignPropertiesFromInboundIpRule(source *v20200601s.InboundIpRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToInboundIpRule populates the provided destination InboundIpRule from our InboundIpRule
func (rule *InboundIpRule) AssignPropertiesToInboundIpRule(destination *v20200601s.InboundIpRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InboundIpRule_STATUS
// Deprecated version of InboundIpRule_STATUS. Use v1beta20200601.InboundIpRule_STATUS instead
type InboundIpRule_STATUS struct {
	Action      *string                `json:"action,omitempty"`
	IpMask      *string                `json:"ipMask,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromInboundIpRule_STATUS populates our InboundIpRule_STATUS from the provided source InboundIpRule_STATUS
func (rule *InboundIpRule_STATUS) AssignPropertiesFromInboundIpRule_STATUS(source *v20200601s.InboundIpRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// IpMask
	rule.IpMask = genruntime.ClonePointerToString(source.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToInboundIpRule_STATUS populates the provided destination InboundIpRule_STATUS from our InboundIpRule_STATUS
func (rule *InboundIpRule_STATUS) AssignPropertiesToInboundIpRule_STATUS(destination *v20200601s.InboundIpRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// IpMask
	destination.IpMask = genruntime.ClonePointerToString(rule.IpMask)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InputSchemaMapping
// Deprecated version of InputSchemaMapping. Use v1beta20200601.InputSchemaMapping instead
type InputSchemaMapping struct {
	InputSchemaMappingType *string                `json:"inputSchemaMappingType,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromInputSchemaMapping populates our InputSchemaMapping from the provided source InputSchemaMapping
func (mapping *InputSchemaMapping) AssignPropertiesFromInputSchemaMapping(source *v20200601s.InputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// InputSchemaMappingType
	mapping.InputSchemaMappingType = genruntime.ClonePointerToString(source.InputSchemaMappingType)

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToInputSchemaMapping populates the provided destination InputSchemaMapping from our InputSchemaMapping
func (mapping *InputSchemaMapping) AssignPropertiesToInputSchemaMapping(destination *v20200601s.InputSchemaMapping) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// InputSchemaMappingType
	destination.InputSchemaMappingType = genruntime.ClonePointerToString(mapping.InputSchemaMappingType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.InputSchemaMapping_STATUS
// Deprecated version of InputSchemaMapping_STATUS. Use v1beta20200601.InputSchemaMapping_STATUS instead
type InputSchemaMapping_STATUS struct {
	InputSchemaMappingType *string                `json:"inputSchemaMappingType,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromInputSchemaMapping_STATUS populates our InputSchemaMapping_STATUS from the provided source InputSchemaMapping_STATUS
func (mapping *InputSchemaMapping_STATUS) AssignPropertiesFromInputSchemaMapping_STATUS(source *v20200601s.InputSchemaMapping_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// InputSchemaMappingType
	mapping.InputSchemaMappingType = genruntime.ClonePointerToString(source.InputSchemaMappingType)

	// Update the property bag
	if len(propertyBag) > 0 {
		mapping.PropertyBag = propertyBag
	} else {
		mapping.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToInputSchemaMapping_STATUS populates the provided destination InputSchemaMapping_STATUS from our InputSchemaMapping_STATUS
func (mapping *InputSchemaMapping_STATUS) AssignPropertiesToInputSchemaMapping_STATUS(destination *v20200601s.InputSchemaMapping_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(mapping.PropertyBag)

	// InputSchemaMappingType
	destination.InputSchemaMappingType = genruntime.ClonePointerToString(mapping.InputSchemaMappingType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.PrivateEndpointConnection_Domain_SubResourceEmbedded
// Deprecated version of PrivateEndpointConnection_Domain_SubResourceEmbedded. Use v1beta20200601.PrivateEndpointConnection_Domain_SubResourceEmbedded instead
type PrivateEndpointConnection_Domain_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromPrivateEndpointConnection_Domain_SubResourceEmbedded populates our PrivateEndpointConnection_Domain_SubResourceEmbedded from the provided source PrivateEndpointConnection_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Domain_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnection_Domain_SubResourceEmbedded(source *v20200601s.PrivateEndpointConnection_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnection_Domain_SubResourceEmbedded populates the provided destination PrivateEndpointConnection_Domain_SubResourceEmbedded from our PrivateEndpointConnection_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Domain_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnection_Domain_SubResourceEmbedded(destination *v20200601s.PrivateEndpointConnection_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
// Deprecated version of PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded. Use v1beta20200601.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded instead
type PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded populates our PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded from the provided source PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(source *v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded populates the provided destination PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded from our PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded(destination *v20200601s.PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.SystemData
// Deprecated version of SystemData. Use v1beta20200601.SystemData instead
type SystemData struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSystemData populates our SystemData from the provided source SystemData
func (data *SystemData) AssignPropertiesFromSystemData(source *v20200601s.SystemData) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	data.CreatedByType = genruntime.ClonePointerToString(source.CreatedByType)

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	data.LastModifiedByType = genruntime.ClonePointerToString(source.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		data.PropertyBag = propertyBag
	} else {
		data.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemData populates the provided destination SystemData from our SystemData
func (data *SystemData) AssignPropertiesToSystemData(destination *v20200601s.SystemData) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(data.PropertyBag)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	destination.CreatedByType = genruntime.ClonePointerToString(data.CreatedByType)

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	destination.LastModifiedByType = genruntime.ClonePointerToString(data.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200601.SystemData_STATUS
// Deprecated version of SystemData_STATUS. Use v1beta20200601.SystemData_STATUS instead
type SystemData_STATUS struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignPropertiesFromSystemData_STATUS(source *v20200601s.SystemData_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	data.CreatedByType = genruntime.ClonePointerToString(source.CreatedByType)

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	data.LastModifiedByType = genruntime.ClonePointerToString(source.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		data.PropertyBag = propertyBag
	} else {
		data.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignPropertiesToSystemData_STATUS(destination *v20200601s.SystemData_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(data.PropertyBag)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	destination.CreatedByType = genruntime.ClonePointerToString(data.CreatedByType)

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	destination.LastModifiedByType = genruntime.ClonePointerToString(data.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
