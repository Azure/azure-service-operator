// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200601

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Topic_Spec_ARM struct {
	// Location: Location of the resource.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Properties of the topic.
	Properties *TopicProperties_ARM `json:"properties,omitempty"`

	// Tags: Tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Topic_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (topic Topic_Spec_ARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (topic *Topic_Spec_ARM) GetName() string {
	return topic.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/topics"
func (topic *Topic_Spec_ARM) GetType() string {
	return "Microsoft.EventGrid/topics"
}

// Properties of the Topic
type TopicProperties_ARM struct {
	// InboundIpRules: This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered
	// only if PublicNetworkAccess is enabled.
	InboundIpRules []InboundIpRule_ARM `json:"inboundIpRules,omitempty"`

	// InputSchema: This determines the format that Event Grid should expect for incoming events published to the topic.
	InputSchema *TopicProperties_InputSchema_ARM `json:"inputSchema,omitempty"`

	// InputSchemaMapping: This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map
	// various properties of a source schema to various required properties of the EventGridEvent schema.
	InputSchemaMapping *InputSchemaMapping_ARM `json:"inputSchemaMapping,omitempty"`

	// PublicNetworkAccess: This determines if traffic is allowed over public network. By default it is enabled.
	// You can further restrict to specific IPs by configuring <seealso
	// cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
	PublicNetworkAccess *TopicProperties_PublicNetworkAccess_ARM `json:"publicNetworkAccess,omitempty"`
}

// +kubebuilder:validation:Enum={"CloudEventSchemaV1_0","CustomEventSchema","EventGridSchema"}
type TopicProperties_InputSchema_ARM string

const (
	TopicProperties_InputSchema_ARM_CloudEventSchemaV1_0 = TopicProperties_InputSchema_ARM("CloudEventSchemaV1_0")
	TopicProperties_InputSchema_ARM_CustomEventSchema    = TopicProperties_InputSchema_ARM("CustomEventSchema")
	TopicProperties_InputSchema_ARM_EventGridSchema      = TopicProperties_InputSchema_ARM("EventGridSchema")
)

// Mapping from string to TopicProperties_InputSchema_ARM
var topicProperties_InputSchema_ARM_Values = map[string]TopicProperties_InputSchema_ARM{
	"cloudeventschemav1_0": TopicProperties_InputSchema_ARM_CloudEventSchemaV1_0,
	"customeventschema":    TopicProperties_InputSchema_ARM_CustomEventSchema,
	"eventgridschema":      TopicProperties_InputSchema_ARM_EventGridSchema,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type TopicProperties_PublicNetworkAccess_ARM string

const (
	TopicProperties_PublicNetworkAccess_ARM_Disabled = TopicProperties_PublicNetworkAccess_ARM("Disabled")
	TopicProperties_PublicNetworkAccess_ARM_Enabled  = TopicProperties_PublicNetworkAccess_ARM("Enabled")
)

// Mapping from string to TopicProperties_PublicNetworkAccess_ARM
var topicProperties_PublicNetworkAccess_ARM_Values = map[string]TopicProperties_PublicNetworkAccess_ARM{
	"disabled": TopicProperties_PublicNetworkAccess_ARM_Disabled,
	"enabled":  TopicProperties_PublicNetworkAccess_ARM_Enabled,
}
