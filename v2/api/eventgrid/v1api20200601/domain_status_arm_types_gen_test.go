// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DomainProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainProperties_STATUS_ARM, DomainProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainProperties_STATUS_ARM runs a test to see if a specific instance of DomainProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainProperties_STATUS_ARM(subject DomainProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DomainProperties_STATUS_ARMGenerator()
var domainProperties_STATUS_ARMGenerator gopter.Gen

// DomainProperties_STATUS_ARMGenerator returns a generator of DomainProperties_STATUS_ARM instances for property testing.
// We first initialize domainProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DomainProperties_STATUS_ARMGenerator() gopter.Gen {
	if domainProperties_STATUS_ARMGenerator != nil {
		return domainProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainProperties_STATUS_ARM(generators)
	domainProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDomainProperties_STATUS_ARM(generators)
	domainProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DomainProperties_STATUS_ARM{}), generators)

	return domainProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
	gens["InputSchema"] = gen.PtrOf(gen.OneConstOf(DomainProperties_InputSchema_STATUS_ARM_CloudEventSchemaV1_0, DomainProperties_InputSchema_STATUS_ARM_CustomEventSchema, DomainProperties_InputSchema_STATUS_ARM_EventGridSchema))
	gens["MetricResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DomainProperties_ProvisioningState_STATUS_ARM_Canceled,
		DomainProperties_ProvisioningState_STATUS_ARM_Creating,
		DomainProperties_ProvisioningState_STATUS_ARM_Deleting,
		DomainProperties_ProvisioningState_STATUS_ARM_Failed,
		DomainProperties_ProvisioningState_STATUS_ARM_Succeeded,
		DomainProperties_ProvisioningState_STATUS_ARM_Updating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(DomainProperties_PublicNetworkAccess_STATUS_ARM_Disabled, DomainProperties_PublicNetworkAccess_STATUS_ARM_Enabled))
}

// AddRelatedPropertyGeneratorsForDomainProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomainProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["InboundIpRules"] = gen.SliceOf(InboundIpRule_STATUS_ARMGenerator())
	gens["InputSchemaMapping"] = gen.PtrOf(InputSchemaMapping_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator())
}

func Test_Domain_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Domain_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomain_STATUS_ARM, Domain_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomain_STATUS_ARM runs a test to see if a specific instance of Domain_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomain_STATUS_ARM(subject Domain_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Domain_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Domain_STATUS_ARM instances for property testing - lazily instantiated by Domain_STATUS_ARMGenerator()
var domain_STATUS_ARMGenerator gopter.Gen

// Domain_STATUS_ARMGenerator returns a generator of Domain_STATUS_ARM instances for property testing.
// We first initialize domain_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Domain_STATUS_ARMGenerator() gopter.Gen {
	if domain_STATUS_ARMGenerator != nil {
		return domain_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomain_STATUS_ARM(generators)
	domain_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Domain_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomain_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDomain_STATUS_ARM(generators)
	domain_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Domain_STATUS_ARM{}), generators)

	return domain_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDomain_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomain_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDomain_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDomain_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DomainProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_InboundIpRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundIpRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundIpRule_STATUS_ARM, InboundIpRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundIpRule_STATUS_ARM runs a test to see if a specific instance of InboundIpRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundIpRule_STATUS_ARM(subject InboundIpRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundIpRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundIpRule_STATUS_ARM instances for property testing - lazily instantiated by
// InboundIpRule_STATUS_ARMGenerator()
var inboundIpRule_STATUS_ARMGenerator gopter.Gen

// InboundIpRule_STATUS_ARMGenerator returns a generator of InboundIpRule_STATUS_ARM instances for property testing.
func InboundIpRule_STATUS_ARMGenerator() gopter.Gen {
	if inboundIpRule_STATUS_ARMGenerator != nil {
		return inboundIpRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundIpRule_STATUS_ARM(generators)
	inboundIpRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InboundIpRule_STATUS_ARM{}), generators)

	return inboundIpRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundIpRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundIpRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(InboundIpRule_Action_STATUS_ARM_Allow))
	gens["IpMask"] = gen.PtrOf(gen.AlphaString())
}

func Test_InputSchemaMapping_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InputSchemaMapping_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInputSchemaMapping_STATUS_ARM, InputSchemaMapping_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInputSchemaMapping_STATUS_ARM runs a test to see if a specific instance of InputSchemaMapping_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInputSchemaMapping_STATUS_ARM(subject InputSchemaMapping_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InputSchemaMapping_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InputSchemaMapping_STATUS_ARM instances for property testing - lazily instantiated by
// InputSchemaMapping_STATUS_ARMGenerator()
var inputSchemaMapping_STATUS_ARMGenerator gopter.Gen

// InputSchemaMapping_STATUS_ARMGenerator returns a generator of InputSchemaMapping_STATUS_ARM instances for property testing.
func InputSchemaMapping_STATUS_ARMGenerator() gopter.Gen {
	if inputSchemaMapping_STATUS_ARMGenerator != nil {
		return inputSchemaMapping_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForInputSchemaMapping_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(InputSchemaMapping_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	inputSchemaMapping_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return inputSchemaMapping_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForInputSchemaMapping_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInputSchemaMapping_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Json"] = JsonInputSchemaMapping_STATUS_ARMGenerator().Map(func(it JsonInputSchemaMapping_STATUS_ARM) *JsonInputSchemaMapping_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_JsonFieldWithDefault_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of JsonFieldWithDefault_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForJsonFieldWithDefault_STATUS_ARM, JsonFieldWithDefault_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForJsonFieldWithDefault_STATUS_ARM runs a test to see if a specific instance of JsonFieldWithDefault_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForJsonFieldWithDefault_STATUS_ARM(subject JsonFieldWithDefault_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual JsonFieldWithDefault_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of JsonFieldWithDefault_STATUS_ARM instances for property testing - lazily instantiated by
// JsonFieldWithDefault_STATUS_ARMGenerator()
var jsonFieldWithDefault_STATUS_ARMGenerator gopter.Gen

// JsonFieldWithDefault_STATUS_ARMGenerator returns a generator of JsonFieldWithDefault_STATUS_ARM instances for property testing.
func JsonFieldWithDefault_STATUS_ARMGenerator() gopter.Gen {
	if jsonFieldWithDefault_STATUS_ARMGenerator != nil {
		return jsonFieldWithDefault_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForJsonFieldWithDefault_STATUS_ARM(generators)
	jsonFieldWithDefault_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(JsonFieldWithDefault_STATUS_ARM{}), generators)

	return jsonFieldWithDefault_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForJsonFieldWithDefault_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForJsonFieldWithDefault_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultValue"] = gen.PtrOf(gen.AlphaString())
	gens["SourceField"] = gen.PtrOf(gen.AlphaString())
}

func Test_JsonField_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of JsonField_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForJsonField_STATUS_ARM, JsonField_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForJsonField_STATUS_ARM runs a test to see if a specific instance of JsonField_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForJsonField_STATUS_ARM(subject JsonField_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual JsonField_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of JsonField_STATUS_ARM instances for property testing - lazily instantiated by
// JsonField_STATUS_ARMGenerator()
var jsonField_STATUS_ARMGenerator gopter.Gen

// JsonField_STATUS_ARMGenerator returns a generator of JsonField_STATUS_ARM instances for property testing.
func JsonField_STATUS_ARMGenerator() gopter.Gen {
	if jsonField_STATUS_ARMGenerator != nil {
		return jsonField_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForJsonField_STATUS_ARM(generators)
	jsonField_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(JsonField_STATUS_ARM{}), generators)

	return jsonField_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForJsonField_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForJsonField_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SourceField"] = gen.PtrOf(gen.AlphaString())
}

func Test_JsonInputSchemaMappingProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of JsonInputSchemaMappingProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForJsonInputSchemaMappingProperties_STATUS_ARM, JsonInputSchemaMappingProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForJsonInputSchemaMappingProperties_STATUS_ARM runs a test to see if a specific instance of JsonInputSchemaMappingProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForJsonInputSchemaMappingProperties_STATUS_ARM(subject JsonInputSchemaMappingProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual JsonInputSchemaMappingProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of JsonInputSchemaMappingProperties_STATUS_ARM instances for property testing - lazily instantiated by
// JsonInputSchemaMappingProperties_STATUS_ARMGenerator()
var jsonInputSchemaMappingProperties_STATUS_ARMGenerator gopter.Gen

// JsonInputSchemaMappingProperties_STATUS_ARMGenerator returns a generator of JsonInputSchemaMappingProperties_STATUS_ARM instances for property testing.
func JsonInputSchemaMappingProperties_STATUS_ARMGenerator() gopter.Gen {
	if jsonInputSchemaMappingProperties_STATUS_ARMGenerator != nil {
		return jsonInputSchemaMappingProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForJsonInputSchemaMappingProperties_STATUS_ARM(generators)
	jsonInputSchemaMappingProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(JsonInputSchemaMappingProperties_STATUS_ARM{}), generators)

	return jsonInputSchemaMappingProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForJsonInputSchemaMappingProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForJsonInputSchemaMappingProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DataVersion"] = gen.PtrOf(JsonFieldWithDefault_STATUS_ARMGenerator())
	gens["EventTime"] = gen.PtrOf(JsonField_STATUS_ARMGenerator())
	gens["EventType"] = gen.PtrOf(JsonFieldWithDefault_STATUS_ARMGenerator())
	gens["Id"] = gen.PtrOf(JsonField_STATUS_ARMGenerator())
	gens["Subject"] = gen.PtrOf(JsonFieldWithDefault_STATUS_ARMGenerator())
	gens["Topic"] = gen.PtrOf(JsonField_STATUS_ARMGenerator())
}

func Test_JsonInputSchemaMapping_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of JsonInputSchemaMapping_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForJsonInputSchemaMapping_STATUS_ARM, JsonInputSchemaMapping_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForJsonInputSchemaMapping_STATUS_ARM runs a test to see if a specific instance of JsonInputSchemaMapping_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForJsonInputSchemaMapping_STATUS_ARM(subject JsonInputSchemaMapping_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual JsonInputSchemaMapping_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of JsonInputSchemaMapping_STATUS_ARM instances for property testing - lazily instantiated by
// JsonInputSchemaMapping_STATUS_ARMGenerator()
var jsonInputSchemaMapping_STATUS_ARMGenerator gopter.Gen

// JsonInputSchemaMapping_STATUS_ARMGenerator returns a generator of JsonInputSchemaMapping_STATUS_ARM instances for property testing.
// We first initialize jsonInputSchemaMapping_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func JsonInputSchemaMapping_STATUS_ARMGenerator() gopter.Gen {
	if jsonInputSchemaMapping_STATUS_ARMGenerator != nil {
		return jsonInputSchemaMapping_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForJsonInputSchemaMapping_STATUS_ARM(generators)
	jsonInputSchemaMapping_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(JsonInputSchemaMapping_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForJsonInputSchemaMapping_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForJsonInputSchemaMapping_STATUS_ARM(generators)
	jsonInputSchemaMapping_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(JsonInputSchemaMapping_STATUS_ARM{}), generators)

	return jsonInputSchemaMapping_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForJsonInputSchemaMapping_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForJsonInputSchemaMapping_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["InputSchemaMappingType"] = gen.OneConstOf(JsonInputSchemaMapping_InputSchemaMappingType_STATUS_ARM_Json)
}

// AddRelatedPropertyGeneratorsForJsonInputSchemaMapping_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForJsonInputSchemaMapping_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(JsonInputSchemaMappingProperties_STATUS_ARMGenerator())
}

func Test_PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM, PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM(subject PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM instances for property testing - lazily
// instantiated by PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator()
var privateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator returns a generator of PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM instances for property testing.
func PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator != nil {
		return privateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM(generators)
	privateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM{}), generators)

	return privateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_Domain_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_ARM_Application,
		SystemData_CreatedByType_STATUS_ARM_Key,
		SystemData_CreatedByType_STATUS_ARM_ManagedIdentity,
		SystemData_CreatedByType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_ARM_Application,
		SystemData_LastModifiedByType_STATUS_ARM_Key,
		SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_ARM_User))
}
