// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200801preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RoleAssignments_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleAssignments_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleAssignments_SPECARM, RoleAssignments_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleAssignments_SPECARM runs a test to see if a specific instance of RoleAssignments_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleAssignments_SPECARM(subject RoleAssignments_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleAssignments_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleAssignments_SPECARM instances for property testing - lazily instantiated by
//RoleAssignments_SPECARMGenerator()
var roleAssignments_specarmGenerator gopter.Gen

// RoleAssignments_SPECARMGenerator returns a generator of RoleAssignments_SPECARM instances for property testing.
// We first initialize roleAssignments_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoleAssignments_SPECARMGenerator() gopter.Gen {
	if roleAssignments_specarmGenerator != nil {
		return roleAssignments_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleAssignments_SPECARM(generators)
	roleAssignments_specarmGenerator = gen.Struct(reflect.TypeOf(RoleAssignments_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleAssignments_SPECARM(generators)
	AddRelatedPropertyGeneratorsForRoleAssignments_SPECARM(generators)
	roleAssignments_specarmGenerator = gen.Struct(reflect.TypeOf(RoleAssignments_SPECARM{}), generators)

	return roleAssignments_specarmGenerator
}

// AddIndependentPropertyGeneratorsForRoleAssignments_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleAssignments_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRoleAssignments_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoleAssignments_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = RoleAssignmentProperties_SpecARMGenerator()
}

func Test_RoleAssignmentProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleAssignmentProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleAssignmentProperties_SpecARM, RoleAssignmentProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleAssignmentProperties_SpecARM runs a test to see if a specific instance of RoleAssignmentProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleAssignmentProperties_SpecARM(subject RoleAssignmentProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleAssignmentProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleAssignmentProperties_SpecARM instances for property testing - lazily instantiated by
//RoleAssignmentProperties_SpecARMGenerator()
var roleAssignmentProperties_specARMGenerator gopter.Gen

// RoleAssignmentProperties_SpecARMGenerator returns a generator of RoleAssignmentProperties_SpecARM instances for property testing.
func RoleAssignmentProperties_SpecARMGenerator() gopter.Gen {
	if roleAssignmentProperties_specARMGenerator != nil {
		return roleAssignmentProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleAssignmentProperties_SpecARM(generators)
	roleAssignmentProperties_specARMGenerator = gen.Struct(reflect.TypeOf(RoleAssignmentProperties_SpecARM{}), generators)

	return roleAssignmentProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRoleAssignmentProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleAssignmentProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Condition"] = gen.PtrOf(gen.AlphaString())
	gens["ConditionVersion"] = gen.PtrOf(gen.AlphaString())
	gens["DelegatedManagedIdentityResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.AlphaString()
	gens["PrincipalType"] = gen.PtrOf(gen.OneConstOf(
		RoleAssignmentProperties_PrincipalType_SpecForeignGroup,
		RoleAssignmentProperties_PrincipalType_SpecGroup,
		RoleAssignmentProperties_PrincipalType_SpecServicePrincipal,
		RoleAssignmentProperties_PrincipalType_SpecUser))
	gens["RoleDefinitionId"] = gen.AlphaString()
}
