// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200801preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RoleAssignment_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleAssignment_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleAssignment_StatusARM, RoleAssignment_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleAssignment_StatusARM runs a test to see if a specific instance of RoleAssignment_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleAssignment_StatusARM(subject RoleAssignment_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleAssignment_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleAssignment_StatusARM instances for property testing - lazily instantiated by
//RoleAssignment_StatusARMGenerator()
var roleAssignment_statusARMGenerator gopter.Gen

// RoleAssignment_StatusARMGenerator returns a generator of RoleAssignment_StatusARM instances for property testing.
func RoleAssignment_StatusARMGenerator() gopter.Gen {
	if roleAssignment_statusARMGenerator != nil {
		return roleAssignment_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRoleAssignment_StatusARM(generators)
	roleAssignment_statusARMGenerator = gen.Struct(reflect.TypeOf(RoleAssignment_StatusARM{}), generators)

	return roleAssignment_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForRoleAssignment_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoleAssignment_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RoleAssignmentProperties_StatusARMGenerator())
}

func Test_RoleAssignmentProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleAssignmentProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleAssignmentProperties_StatusARM, RoleAssignmentProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleAssignmentProperties_StatusARM runs a test to see if a specific instance of RoleAssignmentProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleAssignmentProperties_StatusARM(subject RoleAssignmentProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleAssignmentProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleAssignmentProperties_StatusARM instances for property testing - lazily instantiated by
//RoleAssignmentProperties_StatusARMGenerator()
var roleAssignmentProperties_statusARMGenerator gopter.Gen

// RoleAssignmentProperties_StatusARMGenerator returns a generator of RoleAssignmentProperties_StatusARM instances for property testing.
func RoleAssignmentProperties_StatusARMGenerator() gopter.Gen {
	if roleAssignmentProperties_statusARMGenerator != nil {
		return roleAssignmentProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleAssignmentProperties_StatusARM(generators)
	roleAssignmentProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(RoleAssignmentProperties_StatusARM{}), generators)

	return roleAssignmentProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForRoleAssignmentProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleAssignmentProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Condition"] = gen.PtrOf(gen.AlphaString())
	gens["ConditionVersion"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["DelegatedManagedIdentityResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.AlphaString()
	gens["PrincipalType"] = gen.PtrOf(gen.AlphaString())
	gens["RoleDefinitionId"] = gen.AlphaString()
	gens["Scope"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedOn"] = gen.PtrOf(gen.AlphaString())
}
