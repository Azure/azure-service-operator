// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Permission_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Permission_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPermission_STATUS, Permission_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPermission_STATUS runs a test to see if a specific instance of Permission_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPermission_STATUS(subject Permission_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Permission_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Permission_STATUS instances for property testing - lazily instantiated by Permission_STATUSGenerator()
var permission_STATUSGenerator gopter.Gen

// Permission_STATUSGenerator returns a generator of Permission_STATUS instances for property testing.
func Permission_STATUSGenerator() gopter.Gen {
	if permission_STATUSGenerator != nil {
		return permission_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPermission_STATUS(generators)
	permission_STATUSGenerator = gen.Struct(reflect.TypeOf(Permission_STATUS{}), generators)

	return permission_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPermission_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPermission_STATUS(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
	gens["DataActions"] = gen.SliceOf(gen.AlphaString())
	gens["NotActions"] = gen.SliceOf(gen.AlphaString())
	gens["NotDataActions"] = gen.SliceOf(gen.AlphaString())
}

func Test_RoleDefinitionProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleDefinitionProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleDefinitionProperties_STATUS, RoleDefinitionProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleDefinitionProperties_STATUS runs a test to see if a specific instance of RoleDefinitionProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleDefinitionProperties_STATUS(subject RoleDefinitionProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleDefinitionProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleDefinitionProperties_STATUS instances for property testing - lazily instantiated by
// RoleDefinitionProperties_STATUSGenerator()
var roleDefinitionProperties_STATUSGenerator gopter.Gen

// RoleDefinitionProperties_STATUSGenerator returns a generator of RoleDefinitionProperties_STATUS instances for property testing.
// We first initialize roleDefinitionProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoleDefinitionProperties_STATUSGenerator() gopter.Gen {
	if roleDefinitionProperties_STATUSGenerator != nil {
		return roleDefinitionProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinitionProperties_STATUS(generators)
	roleDefinitionProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(RoleDefinitionProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinitionProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForRoleDefinitionProperties_STATUS(generators)
	roleDefinitionProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(RoleDefinitionProperties_STATUS{}), generators)

	return roleDefinitionProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRoleDefinitionProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleDefinitionProperties_STATUS(gens map[string]gopter.Gen) {
	gens["AssignableScopes"] = gen.SliceOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["RoleName"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedOn"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoleDefinitionProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoleDefinitionProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Permissions"] = gen.SliceOf(Permission_STATUSGenerator())
}

func Test_RoleDefinition_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleDefinition_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleDefinition_STATUS, RoleDefinition_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleDefinition_STATUS runs a test to see if a specific instance of RoleDefinition_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleDefinition_STATUS(subject RoleDefinition_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleDefinition_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleDefinition_STATUS instances for property testing - lazily instantiated by
// RoleDefinition_STATUSGenerator()
var roleDefinition_STATUSGenerator gopter.Gen

// RoleDefinition_STATUSGenerator returns a generator of RoleDefinition_STATUS instances for property testing.
// We first initialize roleDefinition_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoleDefinition_STATUSGenerator() gopter.Gen {
	if roleDefinition_STATUSGenerator != nil {
		return roleDefinition_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinition_STATUS(generators)
	roleDefinition_STATUSGenerator = gen.Struct(reflect.TypeOf(RoleDefinition_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinition_STATUS(generators)
	AddRelatedPropertyGeneratorsForRoleDefinition_STATUS(generators)
	roleDefinition_STATUSGenerator = gen.Struct(reflect.TypeOf(RoleDefinition_STATUS{}), generators)

	return roleDefinition_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRoleDefinition_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleDefinition_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoleDefinition_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoleDefinition_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RoleDefinitionProperties_STATUSGenerator())
}
