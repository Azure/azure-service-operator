// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Permission_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Permission_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPermission_ARM, Permission_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPermission_ARM runs a test to see if a specific instance of Permission_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPermission_ARM(subject Permission_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Permission_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Permission_ARM instances for property testing - lazily instantiated by Permission_ARMGenerator()
var permission_ARMGenerator gopter.Gen

// Permission_ARMGenerator returns a generator of Permission_ARM instances for property testing.
func Permission_ARMGenerator() gopter.Gen {
	if permission_ARMGenerator != nil {
		return permission_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPermission_ARM(generators)
	permission_ARMGenerator = gen.Struct(reflect.TypeOf(Permission_ARM{}), generators)

	return permission_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPermission_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPermission_ARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
	gens["DataActions"] = gen.SliceOf(gen.AlphaString())
	gens["NotActions"] = gen.SliceOf(gen.AlphaString())
	gens["NotDataActions"] = gen.SliceOf(gen.AlphaString())
}

func Test_RoleDefinitionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleDefinitionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleDefinitionProperties_ARM, RoleDefinitionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleDefinitionProperties_ARM runs a test to see if a specific instance of RoleDefinitionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleDefinitionProperties_ARM(subject RoleDefinitionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleDefinitionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleDefinitionProperties_ARM instances for property testing - lazily instantiated by
// RoleDefinitionProperties_ARMGenerator()
var roleDefinitionProperties_ARMGenerator gopter.Gen

// RoleDefinitionProperties_ARMGenerator returns a generator of RoleDefinitionProperties_ARM instances for property testing.
// We first initialize roleDefinitionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoleDefinitionProperties_ARMGenerator() gopter.Gen {
	if roleDefinitionProperties_ARMGenerator != nil {
		return roleDefinitionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinitionProperties_ARM(generators)
	roleDefinitionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(RoleDefinitionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinitionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForRoleDefinitionProperties_ARM(generators)
	roleDefinitionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(RoleDefinitionProperties_ARM{}), generators)

	return roleDefinitionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoleDefinitionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleDefinitionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AssignableScopes"] = gen.SliceOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["RoleName"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoleDefinitionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoleDefinitionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Permissions"] = gen.SliceOf(Permission_ARMGenerator())
}

func Test_RoleDefinition_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleDefinition_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleDefinition_Spec_ARM, RoleDefinition_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleDefinition_Spec_ARM runs a test to see if a specific instance of RoleDefinition_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleDefinition_Spec_ARM(subject RoleDefinition_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleDefinition_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleDefinition_Spec_ARM instances for property testing - lazily instantiated by
// RoleDefinition_Spec_ARMGenerator()
var roleDefinition_Spec_ARMGenerator gopter.Gen

// RoleDefinition_Spec_ARMGenerator returns a generator of RoleDefinition_Spec_ARM instances for property testing.
// We first initialize roleDefinition_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RoleDefinition_Spec_ARMGenerator() gopter.Gen {
	if roleDefinition_Spec_ARMGenerator != nil {
		return roleDefinition_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinition_Spec_ARM(generators)
	roleDefinition_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(RoleDefinition_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleDefinition_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForRoleDefinition_Spec_ARM(generators)
	roleDefinition_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(RoleDefinition_Spec_ARM{}), generators)

	return roleDefinition_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoleDefinition_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleDefinition_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRoleDefinition_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoleDefinition_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RoleDefinitionProperties_ARMGenerator())
}
