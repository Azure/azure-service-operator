// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200801preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RoleAssignmentCreateParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleAssignmentCreateParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleAssignmentCreateParameters_STATUSARM, RoleAssignmentCreateParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleAssignmentCreateParameters_STATUSARM runs a test to see if a specific instance of RoleAssignmentCreateParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleAssignmentCreateParameters_STATUSARM(subject RoleAssignmentCreateParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleAssignmentCreateParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleAssignmentCreateParameters_STATUSARM instances for property testing - lazily instantiated by
// RoleAssignmentCreateParameters_STATUSARMGenerator()
var roleAssignmentCreateParameters_STATUSARMGenerator gopter.Gen

// RoleAssignmentCreateParameters_STATUSARMGenerator returns a generator of RoleAssignmentCreateParameters_STATUSARM instances for property testing.
func RoleAssignmentCreateParameters_STATUSARMGenerator() gopter.Gen {
	if roleAssignmentCreateParameters_STATUSARMGenerator != nil {
		return roleAssignmentCreateParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRoleAssignmentCreateParameters_STATUSARM(generators)
	roleAssignmentCreateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RoleAssignmentCreateParameters_STATUSARM{}), generators)

	return roleAssignmentCreateParameters_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForRoleAssignmentCreateParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoleAssignmentCreateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RoleAssignmentProperties_STATUSARMGenerator())
}

func Test_RoleAssignmentProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoleAssignmentProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoleAssignmentProperties_STATUSARM, RoleAssignmentProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoleAssignmentProperties_STATUSARM runs a test to see if a specific instance of RoleAssignmentProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoleAssignmentProperties_STATUSARM(subject RoleAssignmentProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoleAssignmentProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoleAssignmentProperties_STATUSARM instances for property testing - lazily instantiated by
// RoleAssignmentProperties_STATUSARMGenerator()
var roleAssignmentProperties_STATUSARMGenerator gopter.Gen

// RoleAssignmentProperties_STATUSARMGenerator returns a generator of RoleAssignmentProperties_STATUSARM instances for property testing.
func RoleAssignmentProperties_STATUSARMGenerator() gopter.Gen {
	if roleAssignmentProperties_STATUSARMGenerator != nil {
		return roleAssignmentProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoleAssignmentProperties_STATUSARM(generators)
	roleAssignmentProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RoleAssignmentProperties_STATUSARM{}), generators)

	return roleAssignmentProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRoleAssignmentProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoleAssignmentProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Condition"] = gen.PtrOf(gen.AlphaString())
	gens["ConditionVersion"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["DelegatedManagedIdentityResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalType"] = gen.PtrOf(gen.OneConstOf(
		RoleAssignmentProperties_PrincipalType_STATUSForeignGroup,
		RoleAssignmentProperties_PrincipalType_STATUSGroup,
		RoleAssignmentProperties_PrincipalType_STATUSServicePrincipal,
		RoleAssignmentProperties_PrincipalType_STATUSUser))
	gens["RoleDefinitionId"] = gen.PtrOf(gen.AlphaString())
	gens["Scope"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedOn"] = gen.PtrOf(gen.AlphaString())
}
