// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20250901

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/quota/v1api20250901/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/quota/v1api20250901/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,quota}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /quota/resource-manager/Microsoft.Quota/Quota/stable/2025-09-01/openapi.json
// - ARM URI: /{scope}/providers/Microsoft.Quota/quotas/{resourceName}
type Quota struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Quota_Spec   `json:"spec,omitempty"`
	Status            Quota_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Quota{}

// GetConditions returns the conditions of the resource
func (quota *Quota) GetConditions() conditions.Conditions {
	return quota.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (quota *Quota) SetConditions(conditions conditions.Conditions) {
	quota.Status.Conditions = conditions
}

var _ conversion.Convertible = &Quota{}

// ConvertFrom populates our Quota from the provided hub Quota
func (quota *Quota) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.Quota)
	if !ok {
		return fmt.Errorf("expected quota/v1api20250901/storage/Quota but received %T instead", hub)
	}

	return quota.AssignProperties_From_Quota(source)
}

// ConvertTo populates the provided hub Quota from our Quota
func (quota *Quota) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.Quota)
	if !ok {
		return fmt.Errorf("expected quota/v1api20250901/storage/Quota but received %T instead", hub)
	}

	return quota.AssignProperties_To_Quota(destination)
}

var _ configmaps.Exporter = &Quota{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (quota *Quota) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if quota.Spec.OperatorSpec == nil {
		return nil
	}
	return quota.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &Quota{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (quota *Quota) SecretDestinationExpressions() []*core.DestinationExpression {
	if quota.Spec.OperatorSpec == nil {
		return nil
	}
	return quota.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &Quota{}

// InitializeSpec initializes the spec for this resource from the given status
func (quota *Quota) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*Quota_STATUS); ok {
		return quota.Spec.Initialize_From_Quota_STATUS(s)
	}

	return fmt.Errorf("expected Status of type Quota_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &Quota{}

// AzureName returns the Azure name of the resource
func (quota *Quota) AzureName() string {
	return quota.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2025-09-01"
func (quota Quota) GetAPIVersion() string {
	return "2025-09-01"
}

// GetResourceScope returns the scope of the resource
func (quota *Quota) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeExtension
}

// GetSpec returns the specification of this resource
func (quota *Quota) GetSpec() genruntime.ConvertibleSpec {
	return &quota.Spec
}

// GetStatus returns the status of this resource
func (quota *Quota) GetStatus() genruntime.ConvertibleStatus {
	return &quota.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (quota *Quota) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Quota/quotas"
func (quota *Quota) GetType() string {
	return "Microsoft.Quota/quotas"
}

// NewEmptyStatus returns a new empty (blank) status
func (quota *Quota) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Quota_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (quota *Quota) Owner() *genruntime.ResourceReference {
	if quota.Spec.Owner == nil {
		return nil
	}

	return quota.Spec.Owner.AsResourceReference()
}

// SetStatus sets the status of this resource
func (quota *Quota) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Quota_STATUS); ok {
		quota.Status = *st
		return nil
	}

	// Convert status to required version
	var st Quota_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	quota.Status = st
	return nil
}

// AssignProperties_From_Quota populates our Quota from the provided source Quota
func (quota *Quota) AssignProperties_From_Quota(source *storage.Quota) error {

	// ObjectMeta
	quota.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Quota_Spec
	err := spec.AssignProperties_From_Quota_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_Quota_Spec() to populate field Spec")
	}
	quota.Spec = spec

	// Status
	var status Quota_STATUS
	err = status.AssignProperties_From_Quota_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_Quota_STATUS() to populate field Status")
	}
	quota.Status = status

	// No error
	return nil
}

// AssignProperties_To_Quota populates the provided destination Quota from our Quota
func (quota *Quota) AssignProperties_To_Quota(destination *storage.Quota) error {

	// ObjectMeta
	destination.ObjectMeta = *quota.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.Quota_Spec
	err := quota.Spec.AssignProperties_To_Quota_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_Quota_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.Quota_STATUS
	err = quota.Status.AssignProperties_To_Quota_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_Quota_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (quota *Quota) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: quota.Spec.OriginalVersion(),
		Kind:    "Quota",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /quota/resource-manager/Microsoft.Quota/Quota/stable/2025-09-01/openapi.json
// - ARM URI: /{scope}/providers/Microsoft.Quota/quotas/{resourceName}
type QuotaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Quota `json:"items"`
}

// +kubebuilder:validation:Enum={"2025-09-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2025-09-01")

type Quota_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *QuotaOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. This resource is an
	// extension resource, which means that any other Azure resource can be its owner.
	Owner *genruntime.ArbitraryOwnerReference `json:"owner,omitempty"`

	// Properties: Quota properties for the specified resource, based on the API called, Quotas or Usages.
	Properties *QuotaProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &Quota_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (quota *Quota_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if quota == nil {
		return nil, nil
	}
	result := &arm.Quota_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if quota.Properties != nil {
		properties_ARM, err := quota.Properties.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *properties_ARM.(*arm.QuotaProperties)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (quota *Quota_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Quota_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (quota *Quota_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Quota_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Quota_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	quota.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	quota.Owner = &owner

	// Set property "Properties":
	if typedInput.Properties != nil {
		var properties1 QuotaProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		quota.Properties = &properties
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Quota_Spec{}

// ConvertSpecFrom populates our Quota_Spec from the provided source
func (quota *Quota_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.Quota_Spec)
	if ok {
		// Populate our instance from source
		return quota.AssignProperties_From_Quota_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.Quota_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = quota.AssignProperties_From_Quota_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Quota_Spec
func (quota *Quota_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.Quota_Spec)
	if ok {
		// Populate destination from our instance
		return quota.AssignProperties_To_Quota_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Quota_Spec{}
	err := quota.AssignProperties_To_Quota_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Quota_Spec populates our Quota_Spec from the provided source Quota_Spec
func (quota *Quota_Spec) AssignProperties_From_Quota_Spec(source *storage.Quota_Spec) error {

	// AzureName
	quota.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec QuotaOperatorSpec
		err := operatorSpec.AssignProperties_From_QuotaOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_QuotaOperatorSpec() to populate field OperatorSpec")
		}
		quota.OperatorSpec = &operatorSpec
	} else {
		quota.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		quota.Owner = &owner
	} else {
		quota.Owner = nil
	}

	// Properties
	if source.Properties != nil {
		var property QuotaProperties
		err := property.AssignProperties_From_QuotaProperties(source.Properties)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_QuotaProperties() to populate field Properties")
		}
		quota.Properties = &property
	} else {
		quota.Properties = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Quota_Spec populates the provided destination Quota_Spec from our Quota_Spec
func (quota *Quota_Spec) AssignProperties_To_Quota_Spec(destination *storage.Quota_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = quota.AzureName

	// OperatorSpec
	if quota.OperatorSpec != nil {
		var operatorSpec storage.QuotaOperatorSpec
		err := quota.OperatorSpec.AssignProperties_To_QuotaOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_QuotaOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = quota.OriginalVersion()

	// Owner
	if quota.Owner != nil {
		owner := quota.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Properties
	if quota.Properties != nil {
		var property storage.QuotaProperties
		err := quota.Properties.AssignProperties_To_QuotaProperties(&property)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_QuotaProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Quota_STATUS populates our Quota_Spec from the provided source Quota_STATUS
func (quota *Quota_Spec) Initialize_From_Quota_STATUS(source *Quota_STATUS) error {

	// Properties
	if source.Properties != nil {
		var property QuotaProperties
		err := property.Initialize_From_QuotaProperties_STATUS(source.Properties)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_QuotaProperties_STATUS() to populate field Properties")
		}
		quota.Properties = &property
	} else {
		quota.Properties = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (quota *Quota_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (quota *Quota_Spec) SetAzureName(azureName string) { quota.AzureName = azureName }

type Quota_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: Fully qualified resource ID for the resource. E.g.
	// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Properties: Quota properties for the specified resource, based on the API called, Quotas or Usages.
	Properties *QuotaProperties_STATUS `json:"properties,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Quota_STATUS{}

// ConvertStatusFrom populates our Quota_STATUS from the provided source
func (quota *Quota_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.Quota_STATUS)
	if ok {
		// Populate our instance from source
		return quota.AssignProperties_From_Quota_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.Quota_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = quota.AssignProperties_From_Quota_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Quota_STATUS
func (quota *Quota_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.Quota_STATUS)
	if ok {
		// Populate destination from our instance
		return quota.AssignProperties_To_Quota_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Quota_STATUS{}
	err := quota.AssignProperties_To_Quota_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Quota_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (quota *Quota_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Quota_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (quota *Quota_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Quota_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Quota_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		quota.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		quota.Name = &name
	}

	// Set property "Properties":
	if typedInput.Properties != nil {
		var properties1 QuotaProperties_STATUS
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		quota.Properties = &properties
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		quota.SystemData = &systemData
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		quota.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Quota_STATUS populates our Quota_STATUS from the provided source Quota_STATUS
func (quota *Quota_STATUS) AssignProperties_From_Quota_STATUS(source *storage.Quota_STATUS) error {

	// Conditions
	quota.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	quota.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	quota.Name = genruntime.ClonePointerToString(source.Name)

	// Properties
	if source.Properties != nil {
		var property QuotaProperties_STATUS
		err := property.AssignProperties_From_QuotaProperties_STATUS(source.Properties)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_QuotaProperties_STATUS() to populate field Properties")
		}
		quota.Properties = &property
	} else {
		quota.Properties = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		quota.SystemData = &systemDatum
	} else {
		quota.SystemData = nil
	}

	// Type
	quota.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Quota_STATUS populates the provided destination Quota_STATUS from our Quota_STATUS
func (quota *Quota_STATUS) AssignProperties_To_Quota_STATUS(destination *storage.Quota_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(quota.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(quota.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(quota.Name)

	// Properties
	if quota.Properties != nil {
		var property storage.QuotaProperties_STATUS
		err := quota.Properties.AssignProperties_To_QuotaProperties_STATUS(&property)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_QuotaProperties_STATUS() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// SystemData
	if quota.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := quota.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(quota.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type QuotaOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_QuotaOperatorSpec populates our QuotaOperatorSpec from the provided source QuotaOperatorSpec
func (operator *QuotaOperatorSpec) AssignProperties_From_QuotaOperatorSpec(source *storage.QuotaOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_QuotaOperatorSpec populates the provided destination QuotaOperatorSpec from our QuotaOperatorSpec
func (operator *QuotaOperatorSpec) AssignProperties_To_QuotaOperatorSpec(destination *storage.QuotaOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Quota properties for the specified resource.
type QuotaProperties struct {
	// Limit: Resource quota limit properties.
	Limit *LimitJsonObject `json:"limit,omitempty"`

	// Name: Resource name provided by the resource provider. Use this property name when requesting quota.
	Name *ResourceName `json:"name,omitempty"`

	// Properties: Additional properties for the specific resource provider.
	Properties *v1.JSON `json:"properties,omitempty"`

	// ResourceType: The name of the resource type. Optional field.
	ResourceType *string `json:"resourceType,omitempty"`
}

var _ genruntime.ARMTransformer = &QuotaProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *QuotaProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &arm.QuotaProperties{}

	// Set property "Limit":
	if properties.Limit != nil {
		limit_ARM, err := properties.Limit.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		limit := *limit_ARM.(*arm.LimitJsonObject)
		result.Limit = &limit
	}

	// Set property "Name":
	if properties.Name != nil {
		name_ARM, err := properties.Name.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		name := *name_ARM.(*arm.ResourceName)
		result.Name = &name
	}

	// Set property "Properties":
	if properties.Properties != nil {
		properties1 := *properties.Properties.DeepCopy()
		result.Properties = &properties1
	}

	// Set property "ResourceType":
	if properties.ResourceType != nil {
		resourceType := *properties.ResourceType
		result.ResourceType = &resourceType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *QuotaProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.QuotaProperties{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *QuotaProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.QuotaProperties)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.QuotaProperties, got %T", armInput)
	}

	// Set property "Limit":
	if typedInput.Limit != nil {
		var limit1 LimitJsonObject
		err := limit1.PopulateFromARM(owner, *typedInput.Limit)
		if err != nil {
			return err
		}
		limit := limit1
		properties.Limit = &limit
	}

	// Set property "Name":
	if typedInput.Name != nil {
		var name1 ResourceName
		err := name1.PopulateFromARM(owner, *typedInput.Name)
		if err != nil {
			return err
		}
		name := name1
		properties.Name = &name
	}

	// Set property "Properties":
	if typedInput.Properties != nil {
		properties1 := *typedInput.Properties.DeepCopy()
		properties.Properties = &properties1
	}

	// Set property "ResourceType":
	if typedInput.ResourceType != nil {
		resourceType := *typedInput.ResourceType
		properties.ResourceType = &resourceType
	}

	// No error
	return nil
}

// AssignProperties_From_QuotaProperties populates our QuotaProperties from the provided source QuotaProperties
func (properties *QuotaProperties) AssignProperties_From_QuotaProperties(source *storage.QuotaProperties) error {

	// Limit
	if source.Limit != nil {
		var limit LimitJsonObject
		err := limit.AssignProperties_From_LimitJsonObject(source.Limit)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_LimitJsonObject() to populate field Limit")
		}
		properties.Limit = &limit
	} else {
		properties.Limit = nil
	}

	// Name
	if source.Name != nil {
		var name ResourceName
		err := name.AssignProperties_From_ResourceName(source.Name)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_ResourceName() to populate field Name")
		}
		properties.Name = &name
	} else {
		properties.Name = nil
	}

	// Properties
	if source.Properties != nil {
		property := *source.Properties.DeepCopy()
		properties.Properties = &property
	} else {
		properties.Properties = nil
	}

	// ResourceType
	properties.ResourceType = genruntime.ClonePointerToString(source.ResourceType)

	// No error
	return nil
}

// AssignProperties_To_QuotaProperties populates the provided destination QuotaProperties from our QuotaProperties
func (properties *QuotaProperties) AssignProperties_To_QuotaProperties(destination *storage.QuotaProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Limit
	if properties.Limit != nil {
		var limit storage.LimitJsonObject
		err := properties.Limit.AssignProperties_To_LimitJsonObject(&limit)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_LimitJsonObject() to populate field Limit")
		}
		destination.Limit = &limit
	} else {
		destination.Limit = nil
	}

	// Name
	if properties.Name != nil {
		var name storage.ResourceName
		err := properties.Name.AssignProperties_To_ResourceName(&name)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_ResourceName() to populate field Name")
		}
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Properties
	if properties.Properties != nil {
		property := *properties.Properties.DeepCopy()
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// ResourceType
	destination.ResourceType = genruntime.ClonePointerToString(properties.ResourceType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_QuotaProperties_STATUS populates our QuotaProperties from the provided source QuotaProperties_STATUS
func (properties *QuotaProperties) Initialize_From_QuotaProperties_STATUS(source *QuotaProperties_STATUS) error {

	// Limit
	if source.Limit != nil {
		var limit LimitJsonObject
		err := limit.Initialize_From_LimitJsonObject_STATUS(source.Limit)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_LimitJsonObject_STATUS() to populate field Limit")
		}
		properties.Limit = &limit
	} else {
		properties.Limit = nil
	}

	// Name
	if source.Name != nil {
		var name ResourceName
		err := name.Initialize_From_ResourceName_STATUS(source.Name)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_ResourceName_STATUS() to populate field Name")
		}
		properties.Name = &name
	} else {
		properties.Name = nil
	}

	// Properties
	if source.Properties != nil {
		property := *source.Properties.DeepCopy()
		properties.Properties = &property
	} else {
		properties.Properties = nil
	}

	// ResourceType
	properties.ResourceType = genruntime.ClonePointerToString(source.ResourceType)

	// No error
	return nil
}

// Quota properties for the specified resource.
type QuotaProperties_STATUS struct {
	// IsQuotaApplicable: States if quota can be requested for this resource.
	IsQuotaApplicable *bool `json:"isQuotaApplicable,omitempty"`

	// Limit: Resource quota limit properties.
	Limit *LimitJsonObject_STATUS `json:"limit,omitempty"`

	// Name: Resource name provided by the resource provider. Use this property name when requesting quota.
	Name *ResourceName_STATUS `json:"name,omitempty"`

	// Properties: Additional properties for the specific resource provider.
	Properties *v1.JSON `json:"properties,omitempty"`

	// QuotaPeriod: The time period over which the quota usage values are summarized. For example:
	// *P1D (per one day)
	// *PT1M (per one minute)
	// *PT1S (per one second).
	// This parameter is optional because, for some resources like compute, the period is irrelevant.
	QuotaPeriod *string `json:"quotaPeriod,omitempty"`

	// ResourceType: The name of the resource type. Optional field.
	ResourceType *string `json:"resourceType,omitempty"`

	// Unit: The quota units, such as Count and Bytes. When requesting quota, use the unit value returned in the GET response
	// in the request body of your PUT operation.
	Unit *string `json:"unit,omitempty"`
}

var _ genruntime.FromARMConverter = &QuotaProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *QuotaProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.QuotaProperties_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *QuotaProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.QuotaProperties_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.QuotaProperties_STATUS, got %T", armInput)
	}

	// Set property "IsQuotaApplicable":
	if typedInput.IsQuotaApplicable != nil {
		isQuotaApplicable := *typedInput.IsQuotaApplicable
		properties.IsQuotaApplicable = &isQuotaApplicable
	}

	// Set property "Limit":
	if typedInput.Limit != nil {
		var limit1 LimitJsonObject_STATUS
		err := limit1.PopulateFromARM(owner, *typedInput.Limit)
		if err != nil {
			return err
		}
		limit := limit1
		properties.Limit = &limit
	}

	// Set property "Name":
	if typedInput.Name != nil {
		var name1 ResourceName_STATUS
		err := name1.PopulateFromARM(owner, *typedInput.Name)
		if err != nil {
			return err
		}
		name := name1
		properties.Name = &name
	}

	// Set property "Properties":
	if typedInput.Properties != nil {
		properties1 := *typedInput.Properties.DeepCopy()
		properties.Properties = &properties1
	}

	// Set property "QuotaPeriod":
	if typedInput.QuotaPeriod != nil {
		quotaPeriod := *typedInput.QuotaPeriod
		properties.QuotaPeriod = &quotaPeriod
	}

	// Set property "ResourceType":
	if typedInput.ResourceType != nil {
		resourceType := *typedInput.ResourceType
		properties.ResourceType = &resourceType
	}

	// Set property "Unit":
	if typedInput.Unit != nil {
		unit := *typedInput.Unit
		properties.Unit = &unit
	}

	// No error
	return nil
}

// AssignProperties_From_QuotaProperties_STATUS populates our QuotaProperties_STATUS from the provided source QuotaProperties_STATUS
func (properties *QuotaProperties_STATUS) AssignProperties_From_QuotaProperties_STATUS(source *storage.QuotaProperties_STATUS) error {

	// IsQuotaApplicable
	if source.IsQuotaApplicable != nil {
		isQuotaApplicable := *source.IsQuotaApplicable
		properties.IsQuotaApplicable = &isQuotaApplicable
	} else {
		properties.IsQuotaApplicable = nil
	}

	// Limit
	if source.Limit != nil {
		var limit LimitJsonObject_STATUS
		err := limit.AssignProperties_From_LimitJsonObject_STATUS(source.Limit)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_LimitJsonObject_STATUS() to populate field Limit")
		}
		properties.Limit = &limit
	} else {
		properties.Limit = nil
	}

	// Name
	if source.Name != nil {
		var name ResourceName_STATUS
		err := name.AssignProperties_From_ResourceName_STATUS(source.Name)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_ResourceName_STATUS() to populate field Name")
		}
		properties.Name = &name
	} else {
		properties.Name = nil
	}

	// Properties
	if source.Properties != nil {
		property := *source.Properties.DeepCopy()
		properties.Properties = &property
	} else {
		properties.Properties = nil
	}

	// QuotaPeriod
	properties.QuotaPeriod = genruntime.ClonePointerToString(source.QuotaPeriod)

	// ResourceType
	properties.ResourceType = genruntime.ClonePointerToString(source.ResourceType)

	// Unit
	properties.Unit = genruntime.ClonePointerToString(source.Unit)

	// No error
	return nil
}

// AssignProperties_To_QuotaProperties_STATUS populates the provided destination QuotaProperties_STATUS from our QuotaProperties_STATUS
func (properties *QuotaProperties_STATUS) AssignProperties_To_QuotaProperties_STATUS(destination *storage.QuotaProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IsQuotaApplicable
	if properties.IsQuotaApplicable != nil {
		isQuotaApplicable := *properties.IsQuotaApplicable
		destination.IsQuotaApplicable = &isQuotaApplicable
	} else {
		destination.IsQuotaApplicable = nil
	}

	// Limit
	if properties.Limit != nil {
		var limit storage.LimitJsonObject_STATUS
		err := properties.Limit.AssignProperties_To_LimitJsonObject_STATUS(&limit)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_LimitJsonObject_STATUS() to populate field Limit")
		}
		destination.Limit = &limit
	} else {
		destination.Limit = nil
	}

	// Name
	if properties.Name != nil {
		var name storage.ResourceName_STATUS
		err := properties.Name.AssignProperties_To_ResourceName_STATUS(&name)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_ResourceName_STATUS() to populate field Name")
		}
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Properties
	if properties.Properties != nil {
		property := *properties.Properties.DeepCopy()
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// QuotaPeriod
	destination.QuotaPeriod = genruntime.ClonePointerToString(properties.QuotaPeriod)

	// ResourceType
	destination.ResourceType = genruntime.ClonePointerToString(properties.ResourceType)

	// Unit
	destination.Unit = genruntime.ClonePointerToString(properties.Unit)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemData_CreatedByType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemData_LastModifiedByType_STATUS `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SystemData_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SystemData_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SystemData_STATUS, got %T", armInput)
	}

	// Set property "CreatedAt":
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property "CreatedBy":
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property "CreatedByType":
	if typedInput.CreatedByType != nil {
		var temp string
		temp = string(*typedInput.CreatedByType)
		createdByType := SystemData_CreatedByType_STATUS(temp)
		data.CreatedByType = &createdByType
	}

	// Set property "LastModifiedAt":
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property "LastModifiedBy":
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property "LastModifiedByType":
	if typedInput.LastModifiedByType != nil {
		var temp string
		temp = string(*typedInput.LastModifiedByType)
		lastModifiedByType := SystemData_LastModifiedByType_STATUS(temp)
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *storage.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := *source.CreatedByType
		createdByTypeTemp := genruntime.ToEnum(createdByType, systemData_CreatedByType_STATUS_Values)
		data.CreatedByType = &createdByTypeTemp
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := *source.LastModifiedByType
		lastModifiedByTypeTemp := genruntime.ToEnum(lastModifiedByType, systemData_LastModifiedByType_STATUS_Values)
		data.LastModifiedByType = &lastModifiedByTypeTemp
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *storage.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LimitJsonObject struct {
	// LimitValue: Mutually exclusive with all other properties
	LimitValue *LimitObject `json:"limitValue,omitempty"`
}

var _ genruntime.ARMTransformer = &LimitJsonObject{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (object *LimitJsonObject) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if object == nil {
		return nil, nil
	}
	result := &arm.LimitJsonObject{}

	// Set property "LimitValue":
	if object.LimitValue != nil {
		limitValue_ARM, err := object.LimitValue.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		limitValue := *limitValue_ARM.(*arm.LimitObject)
		result.LimitValue = &limitValue
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (object *LimitJsonObject) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.LimitJsonObject{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (object *LimitJsonObject) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.LimitJsonObject)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.LimitJsonObject, got %T", armInput)
	}

	// Set property "LimitValue":
	if typedInput.LimitValue != nil {
		var limitValue1 LimitObject
		err := limitValue1.PopulateFromARM(owner, *typedInput.LimitValue)
		if err != nil {
			return err
		}
		limitValue := limitValue1
		object.LimitValue = &limitValue
	}

	// No error
	return nil
}

// AssignProperties_From_LimitJsonObject populates our LimitJsonObject from the provided source LimitJsonObject
func (object *LimitJsonObject) AssignProperties_From_LimitJsonObject(source *storage.LimitJsonObject) error {

	// LimitValue
	if source.LimitValue != nil {
		var limitValue LimitObject
		err := limitValue.AssignProperties_From_LimitObject(source.LimitValue)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_LimitObject() to populate field LimitValue")
		}
		object.LimitValue = &limitValue
	} else {
		object.LimitValue = nil
	}

	// No error
	return nil
}

// AssignProperties_To_LimitJsonObject populates the provided destination LimitJsonObject from our LimitJsonObject
func (object *LimitJsonObject) AssignProperties_To_LimitJsonObject(destination *storage.LimitJsonObject) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// LimitValue
	if object.LimitValue != nil {
		var limitValue storage.LimitObject
		err := object.LimitValue.AssignProperties_To_LimitObject(&limitValue)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_LimitObject() to populate field LimitValue")
		}
		destination.LimitValue = &limitValue
	} else {
		destination.LimitValue = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_LimitJsonObject_STATUS populates our LimitJsonObject from the provided source LimitJsonObject_STATUS
func (object *LimitJsonObject) Initialize_From_LimitJsonObject_STATUS(source *LimitJsonObject_STATUS) error {

	// LimitValue
	if source.LimitValue != nil {
		var limitValue LimitObject
		err := limitValue.Initialize_From_LimitObject_STATUS(source.LimitValue)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_LimitObject_STATUS() to populate field LimitValue")
		}
		object.LimitValue = &limitValue
	} else {
		object.LimitValue = nil
	}

	// No error
	return nil
}

type LimitJsonObject_STATUS struct {
	// LimitValue: Mutually exclusive with all other properties
	LimitValue *LimitObject_STATUS `json:"limitValue,omitempty"`
}

var _ genruntime.FromARMConverter = &LimitJsonObject_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (object *LimitJsonObject_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.LimitJsonObject_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (object *LimitJsonObject_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.LimitJsonObject_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.LimitJsonObject_STATUS, got %T", armInput)
	}

	// Set property "LimitValue":
	if typedInput.LimitValue != nil {
		var limitValue1 LimitObject_STATUS
		err := limitValue1.PopulateFromARM(owner, *typedInput.LimitValue)
		if err != nil {
			return err
		}
		limitValue := limitValue1
		object.LimitValue = &limitValue
	}

	// No error
	return nil
}

// AssignProperties_From_LimitJsonObject_STATUS populates our LimitJsonObject_STATUS from the provided source LimitJsonObject_STATUS
func (object *LimitJsonObject_STATUS) AssignProperties_From_LimitJsonObject_STATUS(source *storage.LimitJsonObject_STATUS) error {

	// LimitValue
	if source.LimitValue != nil {
		var limitValue LimitObject_STATUS
		err := limitValue.AssignProperties_From_LimitObject_STATUS(source.LimitValue)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_LimitObject_STATUS() to populate field LimitValue")
		}
		object.LimitValue = &limitValue
	} else {
		object.LimitValue = nil
	}

	// No error
	return nil
}

// AssignProperties_To_LimitJsonObject_STATUS populates the provided destination LimitJsonObject_STATUS from our LimitJsonObject_STATUS
func (object *LimitJsonObject_STATUS) AssignProperties_To_LimitJsonObject_STATUS(destination *storage.LimitJsonObject_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// LimitValue
	if object.LimitValue != nil {
		var limitValue storage.LimitObject_STATUS
		err := object.LimitValue.AssignProperties_To_LimitObject_STATUS(&limitValue)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_LimitObject_STATUS() to populate field LimitValue")
		}
		destination.LimitValue = &limitValue
	} else {
		destination.LimitValue = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Name of the resource provided by the resource Provider. When requesting quota, use this property name.
type ResourceName struct {
	// Value: Resource name.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceName{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (name *ResourceName) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if name == nil {
		return nil, nil
	}
	result := &arm.ResourceName{}

	// Set property "Value":
	if name.Value != nil {
		value := *name.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (name *ResourceName) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ResourceName{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (name *ResourceName) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ResourceName)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ResourceName, got %T", armInput)
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		name.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_ResourceName populates our ResourceName from the provided source ResourceName
func (name *ResourceName) AssignProperties_From_ResourceName(source *storage.ResourceName) error {

	// Value
	name.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_ResourceName populates the provided destination ResourceName from our ResourceName
func (name *ResourceName) AssignProperties_To_ResourceName(destination *storage.ResourceName) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Value
	destination.Value = genruntime.ClonePointerToString(name.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ResourceName_STATUS populates our ResourceName from the provided source ResourceName_STATUS
func (name *ResourceName) Initialize_From_ResourceName_STATUS(source *ResourceName_STATUS) error {

	// Value
	name.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// Name of the resource provided by the resource Provider. When requesting quota, use this property name.
type ResourceName_STATUS struct {
	// LocalizedValue: Resource display name.
	LocalizedValue *string `json:"localizedValue,omitempty"`

	// Value: Resource name.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceName_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (name *ResourceName_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ResourceName_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (name *ResourceName_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ResourceName_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ResourceName_STATUS, got %T", armInput)
	}

	// Set property "LocalizedValue":
	if typedInput.LocalizedValue != nil {
		localizedValue := *typedInput.LocalizedValue
		name.LocalizedValue = &localizedValue
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		name.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_ResourceName_STATUS populates our ResourceName_STATUS from the provided source ResourceName_STATUS
func (name *ResourceName_STATUS) AssignProperties_From_ResourceName_STATUS(source *storage.ResourceName_STATUS) error {

	// LocalizedValue
	name.LocalizedValue = genruntime.ClonePointerToString(source.LocalizedValue)

	// Value
	name.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_ResourceName_STATUS populates the provided destination ResourceName_STATUS from our ResourceName_STATUS
func (name *ResourceName_STATUS) AssignProperties_To_ResourceName_STATUS(destination *storage.ResourceName_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// LocalizedValue
	destination.LocalizedValue = genruntime.ClonePointerToString(name.LocalizedValue)

	// Value
	destination.Value = genruntime.ClonePointerToString(name.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_CreatedByType_STATUS string

const (
	SystemData_CreatedByType_STATUS_Application     = SystemData_CreatedByType_STATUS("Application")
	SystemData_CreatedByType_STATUS_Key             = SystemData_CreatedByType_STATUS("Key")
	SystemData_CreatedByType_STATUS_ManagedIdentity = SystemData_CreatedByType_STATUS("ManagedIdentity")
	SystemData_CreatedByType_STATUS_User            = SystemData_CreatedByType_STATUS("User")
)

// Mapping from string to SystemData_CreatedByType_STATUS
var systemData_CreatedByType_STATUS_Values = map[string]SystemData_CreatedByType_STATUS{
	"application":     SystemData_CreatedByType_STATUS_Application,
	"key":             SystemData_CreatedByType_STATUS_Key,
	"managedidentity": SystemData_CreatedByType_STATUS_ManagedIdentity,
	"user":            SystemData_CreatedByType_STATUS_User,
}

type SystemData_LastModifiedByType_STATUS string

const (
	SystemData_LastModifiedByType_STATUS_Application     = SystemData_LastModifiedByType_STATUS("Application")
	SystemData_LastModifiedByType_STATUS_Key             = SystemData_LastModifiedByType_STATUS("Key")
	SystemData_LastModifiedByType_STATUS_ManagedIdentity = SystemData_LastModifiedByType_STATUS("ManagedIdentity")
	SystemData_LastModifiedByType_STATUS_User            = SystemData_LastModifiedByType_STATUS("User")
)

// Mapping from string to SystemData_LastModifiedByType_STATUS
var systemData_LastModifiedByType_STATUS_Values = map[string]SystemData_LastModifiedByType_STATUS{
	"application":     SystemData_LastModifiedByType_STATUS_Application,
	"key":             SystemData_LastModifiedByType_STATUS_Key,
	"managedidentity": SystemData_LastModifiedByType_STATUS_ManagedIdentity,
	"user":            SystemData_LastModifiedByType_STATUS_User,
}

type LimitObject struct {
	// +kubebuilder:validation:Required
	// LimitObjectType: The limit object type.
	LimitObjectType *LimitType `json:"limitObjectType,omitempty"`

	// LimitType: The quota or usages limit types.
	LimitType *QuotaLimitTypes `json:"limitType,omitempty"`

	// +kubebuilder:validation:Required
	// Value: The quota/limit value
	Value *int `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &LimitObject{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (object *LimitObject) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if object == nil {
		return nil, nil
	}
	result := &arm.LimitObject{}

	// Set property "LimitObjectType":
	if object.LimitObjectType != nil {
		var temp arm.LimitType
		var temp1 string
		temp1 = string(*object.LimitObjectType)
		temp = arm.LimitType(temp1)
		result.LimitObjectType = temp
	}

	// Set property "LimitType":
	if object.LimitType != nil {
		var temp string
		temp = string(*object.LimitType)
		limitType := arm.QuotaLimitTypes(temp)
		result.LimitType = &limitType
	}

	// Set property "Value":
	if object.Value != nil {
		value := *object.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (object *LimitObject) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.LimitObject{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (object *LimitObject) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.LimitObject)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.LimitObject, got %T", armInput)
	}

	// Set property "LimitObjectType":
	var temp LimitType
	var temp1 string
	temp1 = string(typedInput.LimitObjectType)
	temp = LimitType(temp1)
	object.LimitObjectType = &temp

	// Set property "LimitType":
	if typedInput.LimitType != nil {
		var limitTypeTemp string
		limitTypeTemp = string(*typedInput.LimitType)
		limitType := QuotaLimitTypes(limitTypeTemp)
		object.LimitType = &limitType
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		object.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_LimitObject populates our LimitObject from the provided source LimitObject
func (object *LimitObject) AssignProperties_From_LimitObject(source *storage.LimitObject) error {

	// LimitObjectType
	if source.LimitObjectType != nil {
		limitObjectType := *source.LimitObjectType
		limitObjectTypeTemp := genruntime.ToEnum(limitObjectType, limitType_Values)
		object.LimitObjectType = &limitObjectTypeTemp
	} else {
		object.LimitObjectType = nil
	}

	// LimitType
	if source.LimitType != nil {
		limitType := *source.LimitType
		limitTypeTemp := genruntime.ToEnum(limitType, quotaLimitTypes_Values)
		object.LimitType = &limitTypeTemp
	} else {
		object.LimitType = nil
	}

	// Value
	object.Value = genruntime.ClonePointerToInt(source.Value)

	// No error
	return nil
}

// AssignProperties_To_LimitObject populates the provided destination LimitObject from our LimitObject
func (object *LimitObject) AssignProperties_To_LimitObject(destination *storage.LimitObject) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// LimitObjectType
	if object.LimitObjectType != nil {
		limitObjectType := string(*object.LimitObjectType)
		destination.LimitObjectType = &limitObjectType
	} else {
		destination.LimitObjectType = nil
	}

	// LimitType
	if object.LimitType != nil {
		limitType := string(*object.LimitType)
		destination.LimitType = &limitType
	} else {
		destination.LimitType = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToInt(object.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_LimitObject_STATUS populates our LimitObject from the provided source LimitObject_STATUS
func (object *LimitObject) Initialize_From_LimitObject_STATUS(source *LimitObject_STATUS) error {

	// LimitObjectType
	if source.LimitObjectType != nil {
		limitObjectType := genruntime.ToEnum(string(*source.LimitObjectType), limitType_Values)
		object.LimitObjectType = &limitObjectType
	} else {
		object.LimitObjectType = nil
	}

	// LimitType
	if source.LimitType != nil {
		limitType := genruntime.ToEnum(string(*source.LimitType), quotaLimitTypes_Values)
		object.LimitType = &limitType
	} else {
		object.LimitType = nil
	}

	// Value
	object.Value = genruntime.ClonePointerToInt(source.Value)

	// No error
	return nil
}

type LimitObject_STATUS struct {
	// LimitObjectType: The limit object type.
	LimitObjectType *LimitType_STATUS `json:"limitObjectType,omitempty"`

	// LimitType: The quota or usages limit types.
	LimitType *QuotaLimitTypes_STATUS `json:"limitType,omitempty"`

	// Value: The quota/limit value
	Value *int `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &LimitObject_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (object *LimitObject_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.LimitObject_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (object *LimitObject_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.LimitObject_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.LimitObject_STATUS, got %T", armInput)
	}

	// Set property "LimitObjectType":
	var temp LimitType_STATUS
	var temp1 string
	temp1 = string(typedInput.LimitObjectType)
	temp = LimitType_STATUS(temp1)
	object.LimitObjectType = &temp

	// Set property "LimitType":
	if typedInput.LimitType != nil {
		var limitTypeTemp string
		limitTypeTemp = string(*typedInput.LimitType)
		limitType := QuotaLimitTypes_STATUS(limitTypeTemp)
		object.LimitType = &limitType
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		object.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_LimitObject_STATUS populates our LimitObject_STATUS from the provided source LimitObject_STATUS
func (object *LimitObject_STATUS) AssignProperties_From_LimitObject_STATUS(source *storage.LimitObject_STATUS) error {

	// LimitObjectType
	if source.LimitObjectType != nil {
		limitObjectType := *source.LimitObjectType
		limitObjectTypeTemp := genruntime.ToEnum(limitObjectType, limitType_STATUS_Values)
		object.LimitObjectType = &limitObjectTypeTemp
	} else {
		object.LimitObjectType = nil
	}

	// LimitType
	if source.LimitType != nil {
		limitType := *source.LimitType
		limitTypeTemp := genruntime.ToEnum(limitType, quotaLimitTypes_STATUS_Values)
		object.LimitType = &limitTypeTemp
	} else {
		object.LimitType = nil
	}

	// Value
	object.Value = genruntime.ClonePointerToInt(source.Value)

	// No error
	return nil
}

// AssignProperties_To_LimitObject_STATUS populates the provided destination LimitObject_STATUS from our LimitObject_STATUS
func (object *LimitObject_STATUS) AssignProperties_To_LimitObject_STATUS(destination *storage.LimitObject_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// LimitObjectType
	if object.LimitObjectType != nil {
		limitObjectType := string(*object.LimitObjectType)
		destination.LimitObjectType = &limitObjectType
	} else {
		destination.LimitObjectType = nil
	}

	// LimitType
	if object.LimitType != nil {
		limitType := string(*object.LimitType)
		destination.LimitType = &limitType
	} else {
		destination.LimitType = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToInt(object.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The limit object type.
// +kubebuilder:validation:Enum={"LimitValue"}
type LimitType string

const LimitType_LimitValue = LimitType("LimitValue")

// Mapping from string to LimitType
var limitType_Values = map[string]LimitType{
	"limitvalue": LimitType_LimitValue,
}

// The limit object type.
type LimitType_STATUS string

const LimitType_STATUS_LimitValue = LimitType_STATUS("LimitValue")

// Mapping from string to LimitType_STATUS
var limitType_STATUS_Values = map[string]LimitType_STATUS{
	"limitvalue": LimitType_STATUS_LimitValue,
}

// The quota or usages limit types.
// +kubebuilder:validation:Enum={"Independent","Shared"}
type QuotaLimitTypes string

const (
	QuotaLimitTypes_Independent = QuotaLimitTypes("Independent")
	QuotaLimitTypes_Shared      = QuotaLimitTypes("Shared")
)

// Mapping from string to QuotaLimitTypes
var quotaLimitTypes_Values = map[string]QuotaLimitTypes{
	"independent": QuotaLimitTypes_Independent,
	"shared":      QuotaLimitTypes_Shared,
}

// The quota or usages limit types.
type QuotaLimitTypes_STATUS string

const (
	QuotaLimitTypes_STATUS_Independent = QuotaLimitTypes_STATUS("Independent")
	QuotaLimitTypes_STATUS_Shared      = QuotaLimitTypes_STATUS("Shared")
)

// Mapping from string to QuotaLimitTypes_STATUS
var quotaLimitTypes_STATUS_Values = map[string]QuotaLimitTypes_STATUS{
	"independent": QuotaLimitTypes_STATUS_Independent,
	"shared":      QuotaLimitTypes_STATUS_Shared,
}

func init() {
	SchemeBuilder.Register(&Quota{}, &QuotaList{})
}
