// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_LimitJsonObject_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitJsonObject_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitJsonObject_STATUS, LimitJsonObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitJsonObject_STATUS runs a test to see if a specific instance of LimitJsonObject_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitJsonObject_STATUS(subject LimitJsonObject_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitJsonObject_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitJsonObject_STATUS instances for property testing - lazily instantiated by
// LimitJsonObject_STATUSGenerator()
var limitJsonObject_STATUSGenerator gopter.Gen

// LimitJsonObject_STATUSGenerator returns a generator of LimitJsonObject_STATUS instances for property testing.
func LimitJsonObject_STATUSGenerator() gopter.Gen {
	if limitJsonObject_STATUSGenerator != nil {
		return limitJsonObject_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		props := map[string]gopter.Gen{propName: propGen}
		gens = append(gens, gen.Struct(reflect.TypeOf(LimitJsonObject_STATUS{}), props))
	}
	limitJsonObject_STATUSGenerator = gen.OneGenOf(gens...)

	return limitJsonObject_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS(gens map[string]gopter.Gen) {
	gens["LimitValue"] = LimitObject_STATUSGenerator().Map(func(it LimitObject_STATUS) *LimitObject_STATUS {
		return &it
	}) // generate one case for OneOf type
}

func Test_LimitObject_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitObject_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitObject_STATUS, LimitObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitObject_STATUS runs a test to see if a specific instance of LimitObject_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitObject_STATUS(subject LimitObject_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitObject_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitObject_STATUS instances for property testing - lazily instantiated by LimitObject_STATUSGenerator()
var limitObject_STATUSGenerator gopter.Gen

// LimitObject_STATUSGenerator returns a generator of LimitObject_STATUS instances for property testing.
func LimitObject_STATUSGenerator() gopter.Gen {
	if limitObject_STATUSGenerator != nil {
		return limitObject_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLimitObject_STATUS(generators)
	limitObject_STATUSGenerator = gen.Struct(reflect.TypeOf(LimitObject_STATUS{}), generators)

	return limitObject_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLimitObject_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLimitObject_STATUS(gens map[string]gopter.Gen) {
	gens["LimitObjectType"] = gen.OneConstOf(LimitType_STATUS_LimitValue)
	gens["LimitType"] = gen.PtrOf(gen.OneConstOf(QuotaLimitTypes_STATUS_Independent, QuotaLimitTypes_STATUS_Shared))
	gens["Value"] = gen.PtrOf(gen.Int())
}

func Test_QuotaProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QuotaProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuotaProperties_STATUS, QuotaProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuotaProperties_STATUS runs a test to see if a specific instance of QuotaProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForQuotaProperties_STATUS(subject QuotaProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QuotaProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QuotaProperties_STATUS instances for property testing - lazily instantiated by
// QuotaProperties_STATUSGenerator()
var quotaProperties_STATUSGenerator gopter.Gen

// QuotaProperties_STATUSGenerator returns a generator of QuotaProperties_STATUS instances for property testing.
// We first initialize quotaProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QuotaProperties_STATUSGenerator() gopter.Gen {
	if quotaProperties_STATUSGenerator != nil {
		return quotaProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(generators)
	quotaProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(QuotaProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForQuotaProperties_STATUS(generators)
	quotaProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(QuotaProperties_STATUS{}), generators)

	return quotaProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForQuotaProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(gens map[string]gopter.Gen) {
	gens["IsQuotaApplicable"] = gen.PtrOf(gen.Bool())
	gens["QuotaPeriod"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Unit"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuotaProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuotaProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Limit"] = gen.PtrOf(LimitJsonObject_STATUSGenerator())
	gens["Name"] = gen.PtrOf(ResourceName_STATUSGenerator())
}

func Test_Quota_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Quota_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuota_STATUS, Quota_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuota_STATUS runs a test to see if a specific instance of Quota_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForQuota_STATUS(subject Quota_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Quota_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Quota_STATUS instances for property testing - lazily instantiated by Quota_STATUSGenerator()
var quota_STATUSGenerator gopter.Gen

// Quota_STATUSGenerator returns a generator of Quota_STATUS instances for property testing.
// We first initialize quota_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Quota_STATUSGenerator() gopter.Gen {
	if quota_STATUSGenerator != nil {
		return quota_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_STATUS(generators)
	quota_STATUSGenerator = gen.Struct(reflect.TypeOf(Quota_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_STATUS(generators)
	AddRelatedPropertyGeneratorsForQuota_STATUS(generators)
	quota_STATUSGenerator = gen.Struct(reflect.TypeOf(Quota_STATUS{}), generators)

	return quota_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForQuota_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuota_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuota_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuota_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QuotaProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_ResourceName_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceName_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceName_STATUS, ResourceName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceName_STATUS runs a test to see if a specific instance of ResourceName_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceName_STATUS(subject ResourceName_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceName_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceName_STATUS instances for property testing - lazily instantiated by
// ResourceName_STATUSGenerator()
var resourceName_STATUSGenerator gopter.Gen

// ResourceName_STATUSGenerator returns a generator of ResourceName_STATUS instances for property testing.
func ResourceName_STATUSGenerator() gopter.Gen {
	if resourceName_STATUSGenerator != nil {
		return resourceName_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceName_STATUS(generators)
	resourceName_STATUSGenerator = gen.Struct(reflect.TypeOf(ResourceName_STATUS{}), generators)

	return resourceName_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForResourceName_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceName_STATUS(gens map[string]gopter.Gen) {
	gens["LocalizedValue"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}
