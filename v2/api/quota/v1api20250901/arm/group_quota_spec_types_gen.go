// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

type GroupQuota_Spec struct {
	Name string `json:"name,omitempty"`

	// Properties: Quota properties for the specified resource, based on the API called, Quotas or Usages.
	Properties *QuotaProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &GroupQuota_Spec{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2025-09-01"
func (quota GroupQuota_Spec) GetAPIVersion() string {
	return "2025-09-01"
}

// GetName returns the Name of the resource
func (quota *GroupQuota_Spec) GetName() string {
	return quota.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Quota/quotas"
func (quota *GroupQuota_Spec) GetType() string {
	return "Microsoft.Quota/quotas"
}

// Quota properties for the specified resource.
type QuotaProperties struct {
	// Limit: Resource quota limit properties.
	Limit *LimitJsonObject `json:"limit,omitempty"`

	// Name: Resource name provided by the resource provider. Use this property name when requesting quota.
	Name *ResourceName `json:"name,omitempty"`

	// Properties: Additional properties for the specific resource provider.
	Properties *v1.JSON `json:"properties,omitempty"`

	// ResourceType: The name of the resource type. Optional field.
	ResourceType *string `json:"resourceType,omitempty"`
}

type LimitJsonObject struct {
	// LimitValue: Mutually exclusive with all other properties
	LimitValue *LimitObject `json:"limitValue,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because LimitJsonObject represents a discriminated union (JSON OneOf)
func (object LimitJsonObject) MarshalJSON() ([]byte, error) {
	if object.LimitValue != nil {
		return json.Marshal(object.LimitValue)
	}

	return nil, nil
}

// UnmarshalJSON unmarshals the LimitJsonObject
func (object *LimitJsonObject) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["limitObjectType"]
	if discriminator == "LimitValue" {
		object.LimitValue = &LimitObject{}
		return json.Unmarshal(data, object.LimitValue)
	}

	// No error
	return nil
}

// Name of the resource provided by the resource Provider. When requesting quota, use this property name.
type ResourceName struct {
	// Value: Resource name.
	Value *string `json:"value,omitempty"`
}

type LimitObject struct {
	// LimitObjectType: The limit object type.
	LimitObjectType LimitType `json:"limitObjectType,omitempty"`

	// LimitType: The quota or usages limit types.
	LimitType *QuotaLimitTypes `json:"limitType,omitempty"`

	// Value: The quota/limit value
	Value *int `json:"value,omitempty"`
}

// The limit object type.
// +kubebuilder:validation:Enum={"LimitValue"}
type LimitType string

const LimitType_LimitValue = LimitType("LimitValue")

// Mapping from string to LimitType
var limitType_Values = map[string]LimitType{
	"limitvalue": LimitType_LimitValue,
}

// The quota or usages limit types.
// +kubebuilder:validation:Enum={"Independent","Shared"}
type QuotaLimitTypes string

const (
	QuotaLimitTypes_Independent = QuotaLimitTypes("Independent")
	QuotaLimitTypes_Shared      = QuotaLimitTypes("Shared")
)

// Mapping from string to QuotaLimitTypes
var quotaLimitTypes_Values = map[string]QuotaLimitTypes{
	"independent": QuotaLimitTypes_Independent,
	"shared":      QuotaLimitTypes_Shared,
}
