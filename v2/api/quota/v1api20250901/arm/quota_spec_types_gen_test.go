// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_LimitJsonObject_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitJsonObject via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitJsonObject, LimitJsonObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitJsonObject runs a test to see if a specific instance of LimitJsonObject round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitJsonObject(subject LimitJsonObject) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitJsonObject
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitJsonObject instances for property testing - lazily instantiated by LimitJsonObjectGenerator()
var limitJsonObjectGenerator gopter.Gen

// LimitJsonObjectGenerator returns a generator of LimitJsonObject instances for property testing.
func LimitJsonObjectGenerator() gopter.Gen {
	if limitJsonObjectGenerator != nil {
		return limitJsonObjectGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLimitJsonObject(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		props := map[string]gopter.Gen{propName: propGen}
		gens = append(gens, gen.Struct(reflect.TypeOf(LimitJsonObject{}), props))
	}
	limitJsonObjectGenerator = gen.OneGenOf(gens...)

	return limitJsonObjectGenerator
}

// AddRelatedPropertyGeneratorsForLimitJsonObject is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLimitJsonObject(gens map[string]gopter.Gen) {
	gens["LimitValue"] = LimitObjectGenerator().Map(func(it LimitObject) *LimitObject {
		return &it
	}) // generate one case for OneOf type
}

func Test_LimitObject_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitObject via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitObject, LimitObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitObject runs a test to see if a specific instance of LimitObject round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitObject(subject LimitObject) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitObject
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitObject instances for property testing - lazily instantiated by LimitObjectGenerator()
var limitObjectGenerator gopter.Gen

// LimitObjectGenerator returns a generator of LimitObject instances for property testing.
func LimitObjectGenerator() gopter.Gen {
	if limitObjectGenerator != nil {
		return limitObjectGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLimitObject(generators)
	limitObjectGenerator = gen.Struct(reflect.TypeOf(LimitObject{}), generators)

	return limitObjectGenerator
}

// AddIndependentPropertyGeneratorsForLimitObject is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLimitObject(gens map[string]gopter.Gen) {
	gens["LimitObjectType"] = gen.OneConstOf(LimitType_LimitValue)
	gens["LimitType"] = gen.PtrOf(gen.OneConstOf(QuotaLimitTypes_Independent, QuotaLimitTypes_Shared))
	gens["Value"] = gen.PtrOf(gen.Int())
}

func Test_QuotaProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QuotaProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuotaProperties, QuotaPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuotaProperties runs a test to see if a specific instance of QuotaProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForQuotaProperties(subject QuotaProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QuotaProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QuotaProperties instances for property testing - lazily instantiated by QuotaPropertiesGenerator()
var quotaPropertiesGenerator gopter.Gen

// QuotaPropertiesGenerator returns a generator of QuotaProperties instances for property testing.
// We first initialize quotaPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QuotaPropertiesGenerator() gopter.Gen {
	if quotaPropertiesGenerator != nil {
		return quotaPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties(generators)
	quotaPropertiesGenerator = gen.Struct(reflect.TypeOf(QuotaProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties(generators)
	AddRelatedPropertyGeneratorsForQuotaProperties(generators)
	quotaPropertiesGenerator = gen.Struct(reflect.TypeOf(QuotaProperties{}), generators)

	return quotaPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForQuotaProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuotaProperties(gens map[string]gopter.Gen) {
	gens["ResourceType"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuotaProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuotaProperties(gens map[string]gopter.Gen) {
	gens["Limit"] = gen.PtrOf(LimitJsonObjectGenerator())
	gens["Name"] = gen.PtrOf(ResourceNameGenerator())
}

func Test_Quota_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Quota_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuota_Spec, Quota_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuota_Spec runs a test to see if a specific instance of Quota_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForQuota_Spec(subject Quota_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Quota_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Quota_Spec instances for property testing - lazily instantiated by Quota_SpecGenerator()
var quota_SpecGenerator gopter.Gen

// Quota_SpecGenerator returns a generator of Quota_Spec instances for property testing.
// We first initialize quota_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Quota_SpecGenerator() gopter.Gen {
	if quota_SpecGenerator != nil {
		return quota_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_Spec(generators)
	quota_SpecGenerator = gen.Struct(reflect.TypeOf(Quota_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_Spec(generators)
	AddRelatedPropertyGeneratorsForQuota_Spec(generators)
	quota_SpecGenerator = gen.Struct(reflect.TypeOf(Quota_Spec{}), generators)

	return quota_SpecGenerator
}

// AddIndependentPropertyGeneratorsForQuota_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuota_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForQuota_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuota_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QuotaPropertiesGenerator())
}

func Test_ResourceName_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceName via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceName, ResourceNameGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceName runs a test to see if a specific instance of ResourceName round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceName(subject ResourceName) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceName
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceName instances for property testing - lazily instantiated by ResourceNameGenerator()
var resourceNameGenerator gopter.Gen

// ResourceNameGenerator returns a generator of ResourceName instances for property testing.
func ResourceNameGenerator() gopter.Gen {
	if resourceNameGenerator != nil {
		return resourceNameGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceName(generators)
	resourceNameGenerator = gen.Struct(reflect.TypeOf(ResourceName{}), generators)

	return resourceNameGenerator
}

// AddIndependentPropertyGeneratorsForResourceName is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceName(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
