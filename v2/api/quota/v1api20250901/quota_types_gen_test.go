// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20250901

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/quota/v1api20250901/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_LimitJsonObject_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from LimitJsonObject to LimitJsonObject via AssignProperties_To_LimitJsonObject & AssignProperties_From_LimitJsonObject returns original",
		prop.ForAll(RunPropertyAssignmentTestForLimitJsonObject, LimitJsonObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLimitJsonObject tests if a specific instance of LimitJsonObject can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForLimitJsonObject(subject LimitJsonObject) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.LimitJsonObject
	err := copied.AssignProperties_To_LimitJsonObject(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual LimitJsonObject
	err = actual.AssignProperties_From_LimitJsonObject(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_LimitJsonObject_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitJsonObject via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitJsonObject, LimitJsonObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitJsonObject runs a test to see if a specific instance of LimitJsonObject round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitJsonObject(subject LimitJsonObject) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitJsonObject
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitJsonObject instances for property testing - lazily instantiated by LimitJsonObjectGenerator()
var limitJsonObjectGenerator gopter.Gen

// LimitJsonObjectGenerator returns a generator of LimitJsonObject instances for property testing.
func LimitJsonObjectGenerator() gopter.Gen {
	if limitJsonObjectGenerator != nil {
		return limitJsonObjectGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLimitJsonObject(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		props := map[string]gopter.Gen{propName: propGen}
		gens = append(gens, gen.Struct(reflect.TypeOf(LimitJsonObject{}), props))
	}
	limitJsonObjectGenerator = gen.OneGenOf(gens...)

	return limitJsonObjectGenerator
}

// AddRelatedPropertyGeneratorsForLimitJsonObject is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLimitJsonObject(gens map[string]gopter.Gen) {
	gens["LimitValue"] = LimitObjectGenerator().Map(func(it LimitObject) *LimitObject {
		return &it
	}) // generate one case for OneOf type
}

func Test_LimitJsonObject_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from LimitJsonObject_STATUS to LimitJsonObject_STATUS via AssignProperties_To_LimitJsonObject_STATUS & AssignProperties_From_LimitJsonObject_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForLimitJsonObject_STATUS, LimitJsonObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLimitJsonObject_STATUS tests if a specific instance of LimitJsonObject_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForLimitJsonObject_STATUS(subject LimitJsonObject_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.LimitJsonObject_STATUS
	err := copied.AssignProperties_To_LimitJsonObject_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual LimitJsonObject_STATUS
	err = actual.AssignProperties_From_LimitJsonObject_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_LimitJsonObject_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitJsonObject_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitJsonObject_STATUS, LimitJsonObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitJsonObject_STATUS runs a test to see if a specific instance of LimitJsonObject_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitJsonObject_STATUS(subject LimitJsonObject_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitJsonObject_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitJsonObject_STATUS instances for property testing - lazily instantiated by
// LimitJsonObject_STATUSGenerator()
var limitJsonObject_STATUSGenerator gopter.Gen

// LimitJsonObject_STATUSGenerator returns a generator of LimitJsonObject_STATUS instances for property testing.
func LimitJsonObject_STATUSGenerator() gopter.Gen {
	if limitJsonObject_STATUSGenerator != nil {
		return limitJsonObject_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		props := map[string]gopter.Gen{propName: propGen}
		gens = append(gens, gen.Struct(reflect.TypeOf(LimitJsonObject_STATUS{}), props))
	}
	limitJsonObject_STATUSGenerator = gen.OneGenOf(gens...)

	return limitJsonObject_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS(gens map[string]gopter.Gen) {
	gens["LimitValue"] = LimitObject_STATUSGenerator().Map(func(it LimitObject_STATUS) *LimitObject_STATUS {
		return &it
	}) // generate one case for OneOf type
}

func Test_LimitObject_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from LimitObject to LimitObject via AssignProperties_To_LimitObject & AssignProperties_From_LimitObject returns original",
		prop.ForAll(RunPropertyAssignmentTestForLimitObject, LimitObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLimitObject tests if a specific instance of LimitObject can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForLimitObject(subject LimitObject) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.LimitObject
	err := copied.AssignProperties_To_LimitObject(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual LimitObject
	err = actual.AssignProperties_From_LimitObject(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_LimitObject_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitObject via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitObject, LimitObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitObject runs a test to see if a specific instance of LimitObject round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitObject(subject LimitObject) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitObject
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitObject instances for property testing - lazily instantiated by LimitObjectGenerator()
var limitObjectGenerator gopter.Gen

// LimitObjectGenerator returns a generator of LimitObject instances for property testing.
func LimitObjectGenerator() gopter.Gen {
	if limitObjectGenerator != nil {
		return limitObjectGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLimitObject(generators)
	limitObjectGenerator = gen.Struct(reflect.TypeOf(LimitObject{}), generators)

	return limitObjectGenerator
}

// AddIndependentPropertyGeneratorsForLimitObject is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLimitObject(gens map[string]gopter.Gen) {
	gens["LimitObjectType"] = gen.PtrOf(gen.OneConstOf(LimitType_LimitValue))
	gens["LimitType"] = gen.PtrOf(gen.OneConstOf(QuotaLimitTypes_Independent, QuotaLimitTypes_Shared))
	gens["Value"] = gen.PtrOf(gen.Int())
}

func Test_LimitObject_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from LimitObject_STATUS to LimitObject_STATUS via AssignProperties_To_LimitObject_STATUS & AssignProperties_From_LimitObject_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForLimitObject_STATUS, LimitObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLimitObject_STATUS tests if a specific instance of LimitObject_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForLimitObject_STATUS(subject LimitObject_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.LimitObject_STATUS
	err := copied.AssignProperties_To_LimitObject_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual LimitObject_STATUS
	err = actual.AssignProperties_From_LimitObject_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_LimitObject_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitObject_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitObject_STATUS, LimitObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitObject_STATUS runs a test to see if a specific instance of LimitObject_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitObject_STATUS(subject LimitObject_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitObject_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitObject_STATUS instances for property testing - lazily instantiated by LimitObject_STATUSGenerator()
var limitObject_STATUSGenerator gopter.Gen

// LimitObject_STATUSGenerator returns a generator of LimitObject_STATUS instances for property testing.
func LimitObject_STATUSGenerator() gopter.Gen {
	if limitObject_STATUSGenerator != nil {
		return limitObject_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLimitObject_STATUS(generators)
	limitObject_STATUSGenerator = gen.Struct(reflect.TypeOf(LimitObject_STATUS{}), generators)

	return limitObject_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLimitObject_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLimitObject_STATUS(gens map[string]gopter.Gen) {
	gens["LimitObjectType"] = gen.PtrOf(gen.OneConstOf(LimitType_STATUS_LimitValue))
	gens["LimitType"] = gen.PtrOf(gen.OneConstOf(QuotaLimitTypes_STATUS_Independent, QuotaLimitTypes_STATUS_Shared))
	gens["Value"] = gen.PtrOf(gen.Int())
}

func Test_Quota_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Quota to hub returns original",
		prop.ForAll(RunResourceConversionTestForQuota, QuotaGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForQuota tests if a specific instance of Quota round trips to the hub storage version and back losslessly
func RunResourceConversionTestForQuota(subject Quota) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.Quota
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual Quota
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Quota_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Quota to Quota via AssignProperties_To_Quota & AssignProperties_From_Quota returns original",
		prop.ForAll(RunPropertyAssignmentTestForQuota, QuotaGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForQuota tests if a specific instance of Quota can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForQuota(subject Quota) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Quota
	err := copied.AssignProperties_To_Quota(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Quota
	err = actual.AssignProperties_From_Quota(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Quota_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Quota via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuota, QuotaGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuota runs a test to see if a specific instance of Quota round trips to JSON and back losslessly
func RunJSONSerializationTestForQuota(subject Quota) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Quota
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Quota instances for property testing - lazily instantiated by QuotaGenerator()
var quotaGenerator gopter.Gen

// QuotaGenerator returns a generator of Quota instances for property testing.
func QuotaGenerator() gopter.Gen {
	if quotaGenerator != nil {
		return quotaGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForQuota(generators)
	quotaGenerator = gen.Struct(reflect.TypeOf(Quota{}), generators)

	return quotaGenerator
}

// AddRelatedPropertyGeneratorsForQuota is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuota(gens map[string]gopter.Gen) {
	gens["Spec"] = Quota_SpecGenerator()
	gens["Status"] = Quota_STATUSGenerator()
}

func Test_QuotaOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from QuotaOperatorSpec to QuotaOperatorSpec via AssignProperties_To_QuotaOperatorSpec & AssignProperties_From_QuotaOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForQuotaOperatorSpec, QuotaOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForQuotaOperatorSpec tests if a specific instance of QuotaOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForQuotaOperatorSpec(subject QuotaOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.QuotaOperatorSpec
	err := copied.AssignProperties_To_QuotaOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual QuotaOperatorSpec
	err = actual.AssignProperties_From_QuotaOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_QuotaOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QuotaOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuotaOperatorSpec, QuotaOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuotaOperatorSpec runs a test to see if a specific instance of QuotaOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForQuotaOperatorSpec(subject QuotaOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QuotaOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QuotaOperatorSpec instances for property testing - lazily instantiated by QuotaOperatorSpecGenerator()
var quotaOperatorSpecGenerator gopter.Gen

// QuotaOperatorSpecGenerator returns a generator of QuotaOperatorSpec instances for property testing.
func QuotaOperatorSpecGenerator() gopter.Gen {
	if quotaOperatorSpecGenerator != nil {
		return quotaOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	quotaOperatorSpecGenerator = gen.Struct(reflect.TypeOf(QuotaOperatorSpec{}), generators)

	return quotaOperatorSpecGenerator
}

func Test_QuotaProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from QuotaProperties to QuotaProperties via AssignProperties_To_QuotaProperties & AssignProperties_From_QuotaProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForQuotaProperties, QuotaPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForQuotaProperties tests if a specific instance of QuotaProperties can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForQuotaProperties(subject QuotaProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.QuotaProperties
	err := copied.AssignProperties_To_QuotaProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual QuotaProperties
	err = actual.AssignProperties_From_QuotaProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_QuotaProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QuotaProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuotaProperties, QuotaPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuotaProperties runs a test to see if a specific instance of QuotaProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForQuotaProperties(subject QuotaProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QuotaProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QuotaProperties instances for property testing - lazily instantiated by QuotaPropertiesGenerator()
var quotaPropertiesGenerator gopter.Gen

// QuotaPropertiesGenerator returns a generator of QuotaProperties instances for property testing.
// We first initialize quotaPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QuotaPropertiesGenerator() gopter.Gen {
	if quotaPropertiesGenerator != nil {
		return quotaPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties(generators)
	quotaPropertiesGenerator = gen.Struct(reflect.TypeOf(QuotaProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties(generators)
	AddRelatedPropertyGeneratorsForQuotaProperties(generators)
	quotaPropertiesGenerator = gen.Struct(reflect.TypeOf(QuotaProperties{}), generators)

	return quotaPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForQuotaProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuotaProperties(gens map[string]gopter.Gen) {
	gens["ResourceType"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuotaProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuotaProperties(gens map[string]gopter.Gen) {
	gens["Limit"] = gen.PtrOf(LimitJsonObjectGenerator())
	gens["Name"] = gen.PtrOf(ResourceNameGenerator())
}

func Test_QuotaProperties_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from QuotaProperties_STATUS to QuotaProperties_STATUS via AssignProperties_To_QuotaProperties_STATUS & AssignProperties_From_QuotaProperties_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForQuotaProperties_STATUS, QuotaProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForQuotaProperties_STATUS tests if a specific instance of QuotaProperties_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForQuotaProperties_STATUS(subject QuotaProperties_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.QuotaProperties_STATUS
	err := copied.AssignProperties_To_QuotaProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual QuotaProperties_STATUS
	err = actual.AssignProperties_From_QuotaProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_QuotaProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QuotaProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuotaProperties_STATUS, QuotaProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuotaProperties_STATUS runs a test to see if a specific instance of QuotaProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForQuotaProperties_STATUS(subject QuotaProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QuotaProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QuotaProperties_STATUS instances for property testing - lazily instantiated by
// QuotaProperties_STATUSGenerator()
var quotaProperties_STATUSGenerator gopter.Gen

// QuotaProperties_STATUSGenerator returns a generator of QuotaProperties_STATUS instances for property testing.
// We first initialize quotaProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QuotaProperties_STATUSGenerator() gopter.Gen {
	if quotaProperties_STATUSGenerator != nil {
		return quotaProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(generators)
	quotaProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(QuotaProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForQuotaProperties_STATUS(generators)
	quotaProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(QuotaProperties_STATUS{}), generators)

	return quotaProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForQuotaProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(gens map[string]gopter.Gen) {
	gens["IsQuotaApplicable"] = gen.PtrOf(gen.Bool())
	gens["QuotaPeriod"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Unit"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuotaProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuotaProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Limit"] = gen.PtrOf(LimitJsonObject_STATUSGenerator())
	gens["Name"] = gen.PtrOf(ResourceName_STATUSGenerator())
}

func Test_Quota_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Quota_STATUS to Quota_STATUS via AssignProperties_To_Quota_STATUS & AssignProperties_From_Quota_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForQuota_STATUS, Quota_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForQuota_STATUS tests if a specific instance of Quota_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForQuota_STATUS(subject Quota_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Quota_STATUS
	err := copied.AssignProperties_To_Quota_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Quota_STATUS
	err = actual.AssignProperties_From_Quota_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Quota_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Quota_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuota_STATUS, Quota_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuota_STATUS runs a test to see if a specific instance of Quota_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForQuota_STATUS(subject Quota_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Quota_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Quota_STATUS instances for property testing - lazily instantiated by Quota_STATUSGenerator()
var quota_STATUSGenerator gopter.Gen

// Quota_STATUSGenerator returns a generator of Quota_STATUS instances for property testing.
// We first initialize quota_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Quota_STATUSGenerator() gopter.Gen {
	if quota_STATUSGenerator != nil {
		return quota_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_STATUS(generators)
	quota_STATUSGenerator = gen.Struct(reflect.TypeOf(Quota_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_STATUS(generators)
	AddRelatedPropertyGeneratorsForQuota_STATUS(generators)
	quota_STATUSGenerator = gen.Struct(reflect.TypeOf(Quota_STATUS{}), generators)

	return quota_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForQuota_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuota_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuota_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuota_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QuotaProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_Quota_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Quota_Spec to Quota_Spec via AssignProperties_To_Quota_Spec & AssignProperties_From_Quota_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForQuota_Spec, Quota_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForQuota_Spec tests if a specific instance of Quota_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForQuota_Spec(subject Quota_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Quota_Spec
	err := copied.AssignProperties_To_Quota_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Quota_Spec
	err = actual.AssignProperties_From_Quota_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Quota_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Quota_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuota_Spec, Quota_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuota_Spec runs a test to see if a specific instance of Quota_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForQuota_Spec(subject Quota_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Quota_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Quota_Spec instances for property testing - lazily instantiated by Quota_SpecGenerator()
var quota_SpecGenerator gopter.Gen

// Quota_SpecGenerator returns a generator of Quota_Spec instances for property testing.
// We first initialize quota_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Quota_SpecGenerator() gopter.Gen {
	if quota_SpecGenerator != nil {
		return quota_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_Spec(generators)
	quota_SpecGenerator = gen.Struct(reflect.TypeOf(Quota_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuota_Spec(generators)
	AddRelatedPropertyGeneratorsForQuota_Spec(generators)
	quota_SpecGenerator = gen.Struct(reflect.TypeOf(Quota_Spec{}), generators)

	return quota_SpecGenerator
}

// AddIndependentPropertyGeneratorsForQuota_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuota_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForQuota_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuota_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(QuotaOperatorSpecGenerator())
	gens["Properties"] = gen.PtrOf(QuotaPropertiesGenerator())
}

func Test_ResourceName_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ResourceName to ResourceName via AssignProperties_To_ResourceName & AssignProperties_From_ResourceName returns original",
		prop.ForAll(RunPropertyAssignmentTestForResourceName, ResourceNameGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForResourceName tests if a specific instance of ResourceName can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForResourceName(subject ResourceName) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ResourceName
	err := copied.AssignProperties_To_ResourceName(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ResourceName
	err = actual.AssignProperties_From_ResourceName(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ResourceName_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceName via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceName, ResourceNameGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceName runs a test to see if a specific instance of ResourceName round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceName(subject ResourceName) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceName
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceName instances for property testing - lazily instantiated by ResourceNameGenerator()
var resourceNameGenerator gopter.Gen

// ResourceNameGenerator returns a generator of ResourceName instances for property testing.
func ResourceNameGenerator() gopter.Gen {
	if resourceNameGenerator != nil {
		return resourceNameGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceName(generators)
	resourceNameGenerator = gen.Struct(reflect.TypeOf(ResourceName{}), generators)

	return resourceNameGenerator
}

// AddIndependentPropertyGeneratorsForResourceName is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceName(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceName_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ResourceName_STATUS to ResourceName_STATUS via AssignProperties_To_ResourceName_STATUS & AssignProperties_From_ResourceName_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForResourceName_STATUS, ResourceName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForResourceName_STATUS tests if a specific instance of ResourceName_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForResourceName_STATUS(subject ResourceName_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ResourceName_STATUS
	err := copied.AssignProperties_To_ResourceName_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ResourceName_STATUS
	err = actual.AssignProperties_From_ResourceName_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ResourceName_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceName_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceName_STATUS, ResourceName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceName_STATUS runs a test to see if a specific instance of ResourceName_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceName_STATUS(subject ResourceName_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceName_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceName_STATUS instances for property testing - lazily instantiated by
// ResourceName_STATUSGenerator()
var resourceName_STATUSGenerator gopter.Gen

// ResourceName_STATUSGenerator returns a generator of ResourceName_STATUS instances for property testing.
func ResourceName_STATUSGenerator() gopter.Gen {
	if resourceName_STATUSGenerator != nil {
		return resourceName_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceName_STATUS(generators)
	resourceName_STATUSGenerator = gen.Struct(reflect.TypeOf(ResourceName_STATUS{}), generators)

	return resourceName_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForResourceName_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceName_STATUS(gens map[string]gopter.Gen) {
	gens["LocalizedValue"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SystemData_STATUS to SystemData_STATUS via AssignProperties_To_SystemData_STATUS & AssignProperties_From_SystemData_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSystemData_STATUS tests if a specific instance of SystemData_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.SystemData_STATUS
	err := copied.AssignProperties_To_SystemData_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SystemData_STATUS
	err = actual.AssignProperties_From_SystemData_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}
