// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=quota.azure.com,resources=groupquotas,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=quota.azure.com,resources={groupquotas/status,groupquotas/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,quota}
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20250901.GroupQuota
// Generator information:
// - Generated from: /quota/resource-manager/Microsoft.Quota/Quota/stable/2025-09-01/openapi.json
// - ARM URI: /{scope}/providers/Microsoft.Quota/quotas/{resourceName}
type GroupQuota struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupQuota_Spec   `json:"spec,omitempty"`
	Status            GroupQuota_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &GroupQuota{}

// GetConditions returns the conditions of the resource
func (quota *GroupQuota) GetConditions() conditions.Conditions {
	return quota.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (quota *GroupQuota) SetConditions(conditions conditions.Conditions) {
	quota.Status.Conditions = conditions
}

var _ configmaps.Exporter = &GroupQuota{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (quota *GroupQuota) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if quota.Spec.OperatorSpec == nil {
		return nil
	}
	return quota.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &GroupQuota{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (quota *GroupQuota) SecretDestinationExpressions() []*core.DestinationExpression {
	if quota.Spec.OperatorSpec == nil {
		return nil
	}
	return quota.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &GroupQuota{}

// AzureName returns the Azure name of the resource
func (quota *GroupQuota) AzureName() string {
	return quota.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2025-09-01"
func (quota GroupQuota) GetAPIVersion() string {
	return "2025-09-01"
}

// GetResourceScope returns the scope of the resource
func (quota *GroupQuota) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeExtension
}

// GetSpec returns the specification of this resource
func (quota *GroupQuota) GetSpec() genruntime.ConvertibleSpec {
	return &quota.Spec
}

// GetStatus returns the status of this resource
func (quota *GroupQuota) GetStatus() genruntime.ConvertibleStatus {
	return &quota.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (quota *GroupQuota) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Quota/quotas"
func (quota *GroupQuota) GetType() string {
	return "Microsoft.Quota/quotas"
}

// NewEmptyStatus returns a new empty (blank) status
func (quota *GroupQuota) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &GroupQuota_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (quota *GroupQuota) Owner() *genruntime.ResourceReference {
	if quota.Spec.Owner == nil {
		return nil
	}

	return quota.Spec.Owner.AsResourceReference()
}

// SetStatus sets the status of this resource
func (quota *GroupQuota) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*GroupQuota_STATUS); ok {
		quota.Status = *st
		return nil
	}

	// Convert status to required version
	var st GroupQuota_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	quota.Status = st
	return nil
}

// Hub marks that this GroupQuota is the hub type for conversion
func (quota *GroupQuota) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (quota *GroupQuota) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: quota.Spec.OriginalVersion,
		Kind:    "GroupQuota",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20250901.GroupQuota
// Generator information:
// - Generated from: /quota/resource-manager/Microsoft.Quota/Quota/stable/2025-09-01/openapi.json
// - ARM URI: /{scope}/providers/Microsoft.Quota/quotas/{resourceName}
type GroupQuotaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupQuota `json:"items"`
}

// Storage version of v1api20250901.APIVersion
// +kubebuilder:validation:Enum={"2025-09-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2025-09-01")

// Storage version of v1api20250901.GroupQuota_Spec
type GroupQuota_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string                  `json:"azureName,omitempty"`
	OperatorSpec    *GroupQuotaOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion string                  `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. This resource is an
	// extension resource, which means that any other Azure resource can be its owner.
	Owner       *genruntime.ArbitraryOwnerReference `json:"owner,omitempty"`
	Properties  *QuotaProperties                    `json:"properties,omitempty"`
	PropertyBag genruntime.PropertyBag              `json:"$propertyBag,omitempty"`
}

var _ genruntime.ConvertibleSpec = &GroupQuota_Spec{}

// ConvertSpecFrom populates our GroupQuota_Spec from the provided source
func (quota *GroupQuota_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == quota {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(quota)
}

// ConvertSpecTo populates the provided destination from our GroupQuota_Spec
func (quota *GroupQuota_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == quota {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(quota)
}

// Storage version of v1api20250901.GroupQuota_STATUS
type GroupQuota_STATUS struct {
	Conditions  []conditions.Condition  `json:"conditions,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Properties  *QuotaProperties_STATUS `json:"properties,omitempty"`
	PropertyBag genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
	SystemData  *SystemData_STATUS      `json:"systemData,omitempty"`
	Type        *string                 `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &GroupQuota_STATUS{}

// ConvertStatusFrom populates our GroupQuota_STATUS from the provided source
func (quota *GroupQuota_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == quota {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(quota)
}

// ConvertStatusTo populates the provided destination from our GroupQuota_STATUS
func (quota *GroupQuota_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == quota {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(quota)
}

// Storage version of v1api20250901.GroupQuotaOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type GroupQuotaOperatorSpec struct {
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SecretExpressions    []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// Storage version of v1api20250901.QuotaProperties
// Quota properties for the specified resource.
type QuotaProperties struct {
	Limit        *LimitJsonObject       `json:"limit,omitempty"`
	Name         *ResourceName          `json:"name,omitempty"`
	Properties   *v1.JSON               `json:"properties,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceType *string                `json:"resourceType,omitempty"`
}

// Storage version of v1api20250901.QuotaProperties_STATUS
// Quota properties for the specified resource.
type QuotaProperties_STATUS struct {
	IsQuotaApplicable *bool                   `json:"isQuotaApplicable,omitempty"`
	Limit             *LimitJsonObject_STATUS `json:"limit,omitempty"`
	Name              *ResourceName_STATUS    `json:"name,omitempty"`
	Properties        *v1.JSON                `json:"properties,omitempty"`
	PropertyBag       genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
	QuotaPeriod       *string                 `json:"quotaPeriod,omitempty"`
	ResourceType      *string                 `json:"resourceType,omitempty"`
	Unit              *string                 `json:"unit,omitempty"`
}

// Storage version of v1api20250901.SystemData_STATUS
// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	CreatedAt          *string                `json:"createdAt,omitempty"`
	CreatedBy          *string                `json:"createdBy,omitempty"`
	CreatedByType      *string                `json:"createdByType,omitempty"`
	LastModifiedAt     *string                `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *string                `json:"lastModifiedByType,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20250901.LimitJsonObject
type LimitJsonObject struct {
	LimitValue  *LimitObject           `json:"limitValue,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20250901.LimitJsonObject_STATUS
type LimitJsonObject_STATUS struct {
	LimitValue  *LimitObject_STATUS    `json:"limitValue,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20250901.ResourceName
// Name of the resource provided by the resource Provider. When requesting quota, use this property name.
type ResourceName struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// Storage version of v1api20250901.ResourceName_STATUS
// Name of the resource provided by the resource Provider. When requesting quota, use this property name.
type ResourceName_STATUS struct {
	LocalizedValue *string                `json:"localizedValue,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value          *string                `json:"value,omitempty"`
}

// Storage version of v1api20250901.LimitObject
type LimitObject struct {
	LimitObjectType *string                `json:"limitObjectType,omitempty"`
	LimitType       *string                `json:"limitType,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value           *int                   `json:"value,omitempty"`
}

// Storage version of v1api20250901.LimitObject_STATUS
type LimitObject_STATUS struct {
	LimitObjectType *string                `json:"limitObjectType,omitempty"`
	LimitType       *string                `json:"limitType,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value           *int                   `json:"value,omitempty"`
}

func init() {
	SchemeBuilder.Register(&GroupQuota{}, &GroupQuotaList{})
}
