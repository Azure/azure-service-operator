// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_GroupQuota_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupQuota via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupQuota, GroupQuotaGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupQuota runs a test to see if a specific instance of GroupQuota round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupQuota(subject GroupQuota) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupQuota
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupQuota instances for property testing - lazily instantiated by GroupQuotaGenerator()
var groupQuotaGenerator gopter.Gen

// GroupQuotaGenerator returns a generator of GroupQuota instances for property testing.
func GroupQuotaGenerator() gopter.Gen {
	if groupQuotaGenerator != nil {
		return groupQuotaGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForGroupQuota(generators)
	groupQuotaGenerator = gen.Struct(reflect.TypeOf(GroupQuota{}), generators)

	return groupQuotaGenerator
}

// AddRelatedPropertyGeneratorsForGroupQuota is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForGroupQuota(gens map[string]gopter.Gen) {
	gens["Spec"] = GroupQuota_SpecGenerator()
	gens["Status"] = GroupQuota_STATUSGenerator()
}

func Test_GroupQuotaOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupQuotaOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupQuotaOperatorSpec, GroupQuotaOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupQuotaOperatorSpec runs a test to see if a specific instance of GroupQuotaOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupQuotaOperatorSpec(subject GroupQuotaOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupQuotaOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupQuotaOperatorSpec instances for property testing - lazily instantiated by
// GroupQuotaOperatorSpecGenerator()
var groupQuotaOperatorSpecGenerator gopter.Gen

// GroupQuotaOperatorSpecGenerator returns a generator of GroupQuotaOperatorSpec instances for property testing.
func GroupQuotaOperatorSpecGenerator() gopter.Gen {
	if groupQuotaOperatorSpecGenerator != nil {
		return groupQuotaOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	groupQuotaOperatorSpecGenerator = gen.Struct(reflect.TypeOf(GroupQuotaOperatorSpec{}), generators)

	return groupQuotaOperatorSpecGenerator
}

func Test_GroupQuota_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupQuota_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupQuota_STATUS, GroupQuota_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupQuota_STATUS runs a test to see if a specific instance of GroupQuota_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupQuota_STATUS(subject GroupQuota_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupQuota_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupQuota_STATUS instances for property testing - lazily instantiated by GroupQuota_STATUSGenerator()
var groupQuota_STATUSGenerator gopter.Gen

// GroupQuota_STATUSGenerator returns a generator of GroupQuota_STATUS instances for property testing.
// We first initialize groupQuota_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func GroupQuota_STATUSGenerator() gopter.Gen {
	if groupQuota_STATUSGenerator != nil {
		return groupQuota_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupQuota_STATUS(generators)
	groupQuota_STATUSGenerator = gen.Struct(reflect.TypeOf(GroupQuota_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupQuota_STATUS(generators)
	AddRelatedPropertyGeneratorsForGroupQuota_STATUS(generators)
	groupQuota_STATUSGenerator = gen.Struct(reflect.TypeOf(GroupQuota_STATUS{}), generators)

	return groupQuota_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForGroupQuota_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGroupQuota_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForGroupQuota_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForGroupQuota_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QuotaProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_GroupQuota_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupQuota_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupQuota_Spec, GroupQuota_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupQuota_Spec runs a test to see if a specific instance of GroupQuota_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupQuota_Spec(subject GroupQuota_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupQuota_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupQuota_Spec instances for property testing - lazily instantiated by GroupQuota_SpecGenerator()
var groupQuota_SpecGenerator gopter.Gen

// GroupQuota_SpecGenerator returns a generator of GroupQuota_Spec instances for property testing.
// We first initialize groupQuota_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func GroupQuota_SpecGenerator() gopter.Gen {
	if groupQuota_SpecGenerator != nil {
		return groupQuota_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupQuota_Spec(generators)
	groupQuota_SpecGenerator = gen.Struct(reflect.TypeOf(GroupQuota_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupQuota_Spec(generators)
	AddRelatedPropertyGeneratorsForGroupQuota_Spec(generators)
	groupQuota_SpecGenerator = gen.Struct(reflect.TypeOf(GroupQuota_Spec{}), generators)

	return groupQuota_SpecGenerator
}

// AddIndependentPropertyGeneratorsForGroupQuota_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGroupQuota_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["OriginalVersion"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForGroupQuota_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForGroupQuota_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(GroupQuotaOperatorSpecGenerator())
	gens["Properties"] = gen.PtrOf(QuotaPropertiesGenerator())
}

func Test_LimitJsonObject_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitJsonObject via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitJsonObject, LimitJsonObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitJsonObject runs a test to see if a specific instance of LimitJsonObject round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitJsonObject(subject LimitJsonObject) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitJsonObject
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitJsonObject instances for property testing - lazily instantiated by LimitJsonObjectGenerator()
var limitJsonObjectGenerator gopter.Gen

// LimitJsonObjectGenerator returns a generator of LimitJsonObject instances for property testing.
func LimitJsonObjectGenerator() gopter.Gen {
	if limitJsonObjectGenerator != nil {
		return limitJsonObjectGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLimitJsonObject(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		props := map[string]gopter.Gen{propName: propGen}
		gens = append(gens, gen.Struct(reflect.TypeOf(LimitJsonObject{}), props))
	}
	limitJsonObjectGenerator = gen.OneGenOf(gens...)

	return limitJsonObjectGenerator
}

// AddRelatedPropertyGeneratorsForLimitJsonObject is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLimitJsonObject(gens map[string]gopter.Gen) {
	gens["LimitValue"] = LimitObjectGenerator().Map(func(it LimitObject) *LimitObject {
		return &it
	}) // generate one case for OneOf type
}

func Test_LimitJsonObject_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitJsonObject_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitJsonObject_STATUS, LimitJsonObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitJsonObject_STATUS runs a test to see if a specific instance of LimitJsonObject_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitJsonObject_STATUS(subject LimitJsonObject_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitJsonObject_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitJsonObject_STATUS instances for property testing - lazily instantiated by
// LimitJsonObject_STATUSGenerator()
var limitJsonObject_STATUSGenerator gopter.Gen

// LimitJsonObject_STATUSGenerator returns a generator of LimitJsonObject_STATUS instances for property testing.
func LimitJsonObject_STATUSGenerator() gopter.Gen {
	if limitJsonObject_STATUSGenerator != nil {
		return limitJsonObject_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		props := map[string]gopter.Gen{propName: propGen}
		gens = append(gens, gen.Struct(reflect.TypeOf(LimitJsonObject_STATUS{}), props))
	}
	limitJsonObject_STATUSGenerator = gen.OneGenOf(gens...)

	return limitJsonObject_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLimitJsonObject_STATUS(gens map[string]gopter.Gen) {
	gens["LimitValue"] = LimitObject_STATUSGenerator().Map(func(it LimitObject_STATUS) *LimitObject_STATUS {
		return &it
	}) // generate one case for OneOf type
}

func Test_LimitObject_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitObject via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitObject, LimitObjectGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitObject runs a test to see if a specific instance of LimitObject round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitObject(subject LimitObject) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitObject
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitObject instances for property testing - lazily instantiated by LimitObjectGenerator()
var limitObjectGenerator gopter.Gen

// LimitObjectGenerator returns a generator of LimitObject instances for property testing.
func LimitObjectGenerator() gopter.Gen {
	if limitObjectGenerator != nil {
		return limitObjectGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLimitObject(generators)
	limitObjectGenerator = gen.Struct(reflect.TypeOf(LimitObject{}), generators)

	return limitObjectGenerator
}

// AddIndependentPropertyGeneratorsForLimitObject is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLimitObject(gens map[string]gopter.Gen) {
	gens["LimitObjectType"] = gen.PtrOf(gen.AlphaString())
	gens["LimitType"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.Int())
}

func Test_LimitObject_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LimitObject_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLimitObject_STATUS, LimitObject_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLimitObject_STATUS runs a test to see if a specific instance of LimitObject_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLimitObject_STATUS(subject LimitObject_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LimitObject_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LimitObject_STATUS instances for property testing - lazily instantiated by LimitObject_STATUSGenerator()
var limitObject_STATUSGenerator gopter.Gen

// LimitObject_STATUSGenerator returns a generator of LimitObject_STATUS instances for property testing.
func LimitObject_STATUSGenerator() gopter.Gen {
	if limitObject_STATUSGenerator != nil {
		return limitObject_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLimitObject_STATUS(generators)
	limitObject_STATUSGenerator = gen.Struct(reflect.TypeOf(LimitObject_STATUS{}), generators)

	return limitObject_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLimitObject_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLimitObject_STATUS(gens map[string]gopter.Gen) {
	gens["LimitObjectType"] = gen.PtrOf(gen.AlphaString())
	gens["LimitType"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.Int())
}

func Test_QuotaProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QuotaProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuotaProperties, QuotaPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuotaProperties runs a test to see if a specific instance of QuotaProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForQuotaProperties(subject QuotaProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QuotaProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QuotaProperties instances for property testing - lazily instantiated by QuotaPropertiesGenerator()
var quotaPropertiesGenerator gopter.Gen

// QuotaPropertiesGenerator returns a generator of QuotaProperties instances for property testing.
// We first initialize quotaPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QuotaPropertiesGenerator() gopter.Gen {
	if quotaPropertiesGenerator != nil {
		return quotaPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties(generators)
	quotaPropertiesGenerator = gen.Struct(reflect.TypeOf(QuotaProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties(generators)
	AddRelatedPropertyGeneratorsForQuotaProperties(generators)
	quotaPropertiesGenerator = gen.Struct(reflect.TypeOf(QuotaProperties{}), generators)

	return quotaPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForQuotaProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuotaProperties(gens map[string]gopter.Gen) {
	gens["ResourceType"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuotaProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuotaProperties(gens map[string]gopter.Gen) {
	gens["Limit"] = gen.PtrOf(LimitJsonObjectGenerator())
	gens["Name"] = gen.PtrOf(ResourceNameGenerator())
}

func Test_QuotaProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QuotaProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQuotaProperties_STATUS, QuotaProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQuotaProperties_STATUS runs a test to see if a specific instance of QuotaProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForQuotaProperties_STATUS(subject QuotaProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QuotaProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QuotaProperties_STATUS instances for property testing - lazily instantiated by
// QuotaProperties_STATUSGenerator()
var quotaProperties_STATUSGenerator gopter.Gen

// QuotaProperties_STATUSGenerator returns a generator of QuotaProperties_STATUS instances for property testing.
// We first initialize quotaProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QuotaProperties_STATUSGenerator() gopter.Gen {
	if quotaProperties_STATUSGenerator != nil {
		return quotaProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(generators)
	quotaProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(QuotaProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForQuotaProperties_STATUS(generators)
	quotaProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(QuotaProperties_STATUS{}), generators)

	return quotaProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForQuotaProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQuotaProperties_STATUS(gens map[string]gopter.Gen) {
	gens["IsQuotaApplicable"] = gen.PtrOf(gen.Bool())
	gens["QuotaPeriod"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Unit"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQuotaProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQuotaProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Limit"] = gen.PtrOf(LimitJsonObject_STATUSGenerator())
	gens["Name"] = gen.PtrOf(ResourceName_STATUSGenerator())
}

func Test_ResourceName_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceName via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceName, ResourceNameGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceName runs a test to see if a specific instance of ResourceName round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceName(subject ResourceName) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceName
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceName instances for property testing - lazily instantiated by ResourceNameGenerator()
var resourceNameGenerator gopter.Gen

// ResourceNameGenerator returns a generator of ResourceName instances for property testing.
func ResourceNameGenerator() gopter.Gen {
	if resourceNameGenerator != nil {
		return resourceNameGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceName(generators)
	resourceNameGenerator = gen.Struct(reflect.TypeOf(ResourceName{}), generators)

	return resourceNameGenerator
}

// AddIndependentPropertyGeneratorsForResourceName is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceName(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceName_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceName_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceName_STATUS, ResourceName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceName_STATUS runs a test to see if a specific instance of ResourceName_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceName_STATUS(subject ResourceName_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceName_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceName_STATUS instances for property testing - lazily instantiated by
// ResourceName_STATUSGenerator()
var resourceName_STATUSGenerator gopter.Gen

// ResourceName_STATUSGenerator returns a generator of ResourceName_STATUS instances for property testing.
func ResourceName_STATUSGenerator() gopter.Gen {
	if resourceName_STATUSGenerator != nil {
		return resourceName_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceName_STATUS(generators)
	resourceName_STATUSGenerator = gen.Struct(reflect.TypeOf(ResourceName_STATUS{}), generators)

	return resourceName_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForResourceName_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceName_STATUS(gens map[string]gopter.Gen) {
	gens["LocalizedValue"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.AlphaString())
}
