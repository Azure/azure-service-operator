// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210101preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SBQueue_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBQueue_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBQueueSTATUSARM, SBQueueSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBQueueSTATUSARM runs a test to see if a specific instance of SBQueue_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBQueueSTATUSARM(subject SBQueue_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBQueue_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBQueue_STATUSARM instances for property testing - lazily instantiated by SBQueueSTATUSARMGenerator()
var sbQueueSTATUSARMGenerator gopter.Gen

// SBQueueSTATUSARMGenerator returns a generator of SBQueue_STATUSARM instances for property testing.
// We first initialize sbQueueSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SBQueueSTATUSARMGenerator() gopter.Gen {
	if sbQueueSTATUSARMGenerator != nil {
		return sbQueueSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueueSTATUSARM(generators)
	sbQueueSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SBQueue_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueueSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForSBQueueSTATUSARM(generators)
	sbQueueSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SBQueue_STATUSARM{}), generators)

	return sbQueueSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSBQueueSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBQueueSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSBQueueSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSBQueueSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SBQueuePropertiesSTATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_SBQueueProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBQueueProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBQueuePropertiesSTATUSARM, SBQueuePropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBQueuePropertiesSTATUSARM runs a test to see if a specific instance of SBQueueProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBQueuePropertiesSTATUSARM(subject SBQueueProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBQueueProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBQueueProperties_STATUSARM instances for property testing - lazily instantiated by
// SBQueuePropertiesSTATUSARMGenerator()
var sbQueuePropertiesSTATUSARMGenerator gopter.Gen

// SBQueuePropertiesSTATUSARMGenerator returns a generator of SBQueueProperties_STATUSARM instances for property testing.
// We first initialize sbQueuePropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SBQueuePropertiesSTATUSARMGenerator() gopter.Gen {
	if sbQueuePropertiesSTATUSARMGenerator != nil {
		return sbQueuePropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueuePropertiesSTATUSARM(generators)
	sbQueuePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SBQueueProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueuePropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForSBQueuePropertiesSTATUSARM(generators)
	sbQueuePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SBQueueProperties_STATUSARM{}), generators)

	return sbQueuePropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSBQueuePropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBQueuePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AccessedAt"] = gen.PtrOf(gen.AlphaString())
	gens["AutoDeleteOnIdle"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["DeadLetteringOnMessageExpiration"] = gen.PtrOf(gen.Bool())
	gens["DefaultMessageTimeToLive"] = gen.PtrOf(gen.AlphaString())
	gens["DuplicateDetectionHistoryTimeWindow"] = gen.PtrOf(gen.AlphaString())
	gens["EnableBatchedOperations"] = gen.PtrOf(gen.Bool())
	gens["EnableExpress"] = gen.PtrOf(gen.Bool())
	gens["EnablePartitioning"] = gen.PtrOf(gen.Bool())
	gens["ForwardDeadLetteredMessagesTo"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardTo"] = gen.PtrOf(gen.AlphaString())
	gens["LockDuration"] = gen.PtrOf(gen.AlphaString())
	gens["MaxDeliveryCount"] = gen.PtrOf(gen.Int())
	gens["MaxSizeInMegabytes"] = gen.PtrOf(gen.Int())
	gens["MessageCount"] = gen.PtrOf(gen.Int())
	gens["RequiresDuplicateDetection"] = gen.PtrOf(gen.Bool())
	gens["RequiresSession"] = gen.PtrOf(gen.Bool())
	gens["SizeInBytes"] = gen.PtrOf(gen.Int())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		EntityStatus_STATUS_Active,
		EntityStatus_STATUS_Creating,
		EntityStatus_STATUS_Deleting,
		EntityStatus_STATUS_Disabled,
		EntityStatus_STATUS_ReceiveDisabled,
		EntityStatus_STATUS_Renaming,
		EntityStatus_STATUS_Restoring,
		EntityStatus_STATUS_SendDisabled,
		EntityStatus_STATUS_Unknown))
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSBQueuePropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSBQueuePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["CountDetails"] = gen.PtrOf(MessageCountDetailsSTATUSARMGenerator())
}

func Test_MessageCountDetails_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MessageCountDetails_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMessageCountDetailsSTATUSARM, MessageCountDetailsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMessageCountDetailsSTATUSARM runs a test to see if a specific instance of MessageCountDetails_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMessageCountDetailsSTATUSARM(subject MessageCountDetails_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MessageCountDetails_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MessageCountDetails_STATUSARM instances for property testing - lazily instantiated by
// MessageCountDetailsSTATUSARMGenerator()
var messageCountDetailsSTATUSARMGenerator gopter.Gen

// MessageCountDetailsSTATUSARMGenerator returns a generator of MessageCountDetails_STATUSARM instances for property testing.
func MessageCountDetailsSTATUSARMGenerator() gopter.Gen {
	if messageCountDetailsSTATUSARMGenerator != nil {
		return messageCountDetailsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMessageCountDetailsSTATUSARM(generators)
	messageCountDetailsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(MessageCountDetails_STATUSARM{}), generators)

	return messageCountDetailsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMessageCountDetailsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMessageCountDetailsSTATUSARM(gens map[string]gopter.Gen) {
	gens["ActiveMessageCount"] = gen.PtrOf(gen.Int())
	gens["DeadLetterMessageCount"] = gen.PtrOf(gen.Int())
	gens["ScheduledMessageCount"] = gen.PtrOf(gen.Int())
	gens["TransferDeadLetterMessageCount"] = gen.PtrOf(gen.Int())
	gens["TransferMessageCount"] = gen.PtrOf(gen.Int())
}
