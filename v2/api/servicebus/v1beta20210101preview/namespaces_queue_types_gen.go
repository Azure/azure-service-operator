// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210101preview

import (
	"fmt"
	v20210101ps "github.com/Azure/azure-service-operator/v2/api/servicebus/v1beta20210101previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /servicebus/resource-manager/Microsoft.ServiceBus/preview/2021-01-01-preview/Queue.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}
type NamespacesQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
<<<<<<< HEAD
	Spec              NamespacesQueue_Spec   `json:"spec,omitempty"`
	Status            NamespacesQueue_STATUS `json:"status,omitempty"`
=======
	Spec              Namespaces_Queues_Spec `json:"spec,omitempty"`
	Status            SBQueue_STATUS         `json:"status,omitempty"`
>>>>>>> main
}

var _ conditions.Conditioner = &NamespacesQueue{}

// GetConditions returns the conditions of the resource
func (queue *NamespacesQueue) GetConditions() conditions.Conditions {
	return queue.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (queue *NamespacesQueue) SetConditions(conditions conditions.Conditions) {
	queue.Status.Conditions = conditions
}

var _ conversion.Convertible = &NamespacesQueue{}

// ConvertFrom populates our NamespacesQueue from the provided hub NamespacesQueue
func (queue *NamespacesQueue) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210101ps.NamespacesQueue)
	if !ok {
		return fmt.Errorf("expected servicebus/v1beta20210101previewstorage/NamespacesQueue but received %T instead", hub)
	}

	return queue.AssignProperties_From_NamespacesQueue(source)
}

// ConvertTo populates the provided hub NamespacesQueue from our NamespacesQueue
func (queue *NamespacesQueue) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210101ps.NamespacesQueue)
	if !ok {
		return fmt.Errorf("expected servicebus/v1beta20210101previewstorage/NamespacesQueue but received %T instead", hub)
	}

	return queue.AssignProperties_To_NamespacesQueue(destination)
}

// +kubebuilder:webhook:path=/mutate-servicebus-azure-com-v1beta20210101preview-namespacesqueue,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=servicebus.azure.com,resources=namespacesqueues,verbs=create;update,versions=v1beta20210101preview,name=default.v1beta20210101preview.namespacesqueues.servicebus.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &NamespacesQueue{}

// Default applies defaults to the NamespacesQueue resource
func (queue *NamespacesQueue) Default() {
	queue.defaultImpl()
	var temp interface{} = queue
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (queue *NamespacesQueue) defaultAzureName() {
	if queue.Spec.AzureName == "" {
		queue.Spec.AzureName = queue.Name
	}
}

// defaultImpl applies the code generated defaults to the NamespacesQueue resource
func (queue *NamespacesQueue) defaultImpl() { queue.defaultAzureName() }

var _ genruntime.KubernetesResource = &NamespacesQueue{}

// AzureName returns the Azure name of the resource
func (queue *NamespacesQueue) AzureName() string {
	return queue.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-01-01-preview"
func (queue NamespacesQueue) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (queue *NamespacesQueue) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (queue *NamespacesQueue) GetSpec() genruntime.ConvertibleSpec {
	return &queue.Spec
}

// GetStatus returns the status of this resource
func (queue *NamespacesQueue) GetStatus() genruntime.ConvertibleStatus {
	return &queue.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ServiceBus/namespaces/queues"
func (queue *NamespacesQueue) GetType() string {
	return "Microsoft.ServiceBus/namespaces/queues"
}

// NewEmptyStatus returns a new empty (blank) status
func (queue *NamespacesQueue) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &NamespacesQueue_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (queue *NamespacesQueue) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(queue.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  queue.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (queue *NamespacesQueue) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*NamespacesQueue_STATUS); ok {
		queue.Status = *st
		return nil
	}

	// Convert status to required version
	var st NamespacesQueue_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	queue.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-servicebus-azure-com-v1beta20210101preview-namespacesqueue,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=servicebus.azure.com,resources=namespacesqueues,verbs=create;update,versions=v1beta20210101preview,name=validate.v1beta20210101preview.namespacesqueues.servicebus.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &NamespacesQueue{}

// ValidateCreate validates the creation of the resource
func (queue *NamespacesQueue) ValidateCreate() error {
	validations := queue.createValidations()
	var temp interface{} = queue
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (queue *NamespacesQueue) ValidateDelete() error {
	validations := queue.deleteValidations()
	var temp interface{} = queue
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (queue *NamespacesQueue) ValidateUpdate(old runtime.Object) error {
	validations := queue.updateValidations()
	var temp interface{} = queue
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (queue *NamespacesQueue) createValidations() []func() error {
	return []func() error{queue.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (queue *NamespacesQueue) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (queue *NamespacesQueue) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return queue.validateResourceReferences()
		},
		queue.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (queue *NamespacesQueue) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&queue.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (queue *NamespacesQueue) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*NamespacesQueue)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, queue)
}

// AssignProperties_From_NamespacesQueue populates our NamespacesQueue from the provided source NamespacesQueue
func (queue *NamespacesQueue) AssignProperties_From_NamespacesQueue(source *v20210101ps.NamespacesQueue) error {

	// ObjectMeta
	queue.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
<<<<<<< HEAD
	var spec NamespacesQueue_Spec
	err := spec.AssignPropertiesFromNamespacesQueue_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespacesQueue_Spec() to populate field Spec")
=======
	var spec Namespaces_Queues_Spec
	err := spec.AssignProperties_From_Namespaces_Queues_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Namespaces_Queues_Spec() to populate field Spec")
>>>>>>> main
	}
	queue.Spec = spec

	// Status
<<<<<<< HEAD
	var status NamespacesQueue_STATUS
	err = status.AssignPropertiesFromNamespacesQueue_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespacesQueue_STATUS() to populate field Status")
=======
	var status SBQueue_STATUS
	err = status.AssignProperties_From_SBQueue_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_SBQueue_STATUS() to populate field Status")
>>>>>>> main
	}
	queue.Status = status

	// No error
	return nil
}

// AssignProperties_To_NamespacesQueue populates the provided destination NamespacesQueue from our NamespacesQueue
func (queue *NamespacesQueue) AssignProperties_To_NamespacesQueue(destination *v20210101ps.NamespacesQueue) error {

	// ObjectMeta
	destination.ObjectMeta = *queue.ObjectMeta.DeepCopy()

	// Spec
<<<<<<< HEAD
	var spec v20210101ps.NamespacesQueue_Spec
	err := queue.Spec.AssignPropertiesToNamespacesQueue_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespacesQueue_Spec() to populate field Spec")
=======
	var spec v20210101ps.Namespaces_Queues_Spec
	err := queue.Spec.AssignProperties_To_Namespaces_Queues_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Namespaces_Queues_Spec() to populate field Spec")
>>>>>>> main
	}
	destination.Spec = spec

	// Status
<<<<<<< HEAD
	var status v20210101ps.NamespacesQueue_STATUS
	err = queue.Status.AssignPropertiesToNamespacesQueue_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespacesQueue_STATUS() to populate field Status")
=======
	var status v20210101ps.SBQueue_STATUS
	err = queue.Status.AssignProperties_To_SBQueue_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_SBQueue_STATUS() to populate field Status")
>>>>>>> main
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (queue *NamespacesQueue) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: queue.Spec.OriginalVersion(),
		Kind:    "NamespacesQueue",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /servicebus/resource-manager/Microsoft.ServiceBus/preview/2021-01-01-preview/Queue.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}
type NamespacesQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesQueue `json:"items"`
}

<<<<<<< HEAD
type NamespacesQueue_Spec struct {
=======
type Namespaces_Queues_Spec struct {
>>>>>>> main
	// AutoDeleteOnIdle: ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration
	// is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// DeadLetteringOnMessageExpiration: A value that indicates whether this queue has dead letter support when a message
	// expires.
	DeadLetteringOnMessageExpiration *bool `json:"deadLetteringOnMessageExpiration,omitempty"`

	// DefaultMessageTimeToLive: ISO 8601 default message timespan to live value. This is the duration after which the message
	// expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not
	// set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	// DuplicateDetectionHistoryTimeWindow: ISO 8601 timeSpan structure that defines the duration of the duplicate detection
	// history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	// EnableBatchedOperations: Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	// EnableExpress: A value that indicates whether Express Entities are enabled. An express queue holds a message in memory
	// temporarily before writing it to persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	// EnablePartitioning: A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	// ForwardDeadLetteredMessagesTo: Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo *string `json:"forwardDeadLetteredMessagesTo,omitempty"`

	// ForwardTo: Queue/Topic name to forward the messages
	ForwardTo *string `json:"forwardTo,omitempty"`

	// LockDuration: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for
	// other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `json:"lockDuration,omitempty"`

	// MaxDeliveryCount: The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
	// default value is 10.
	MaxDeliveryCount *int `json:"maxDeliveryCount,omitempty"`

	// MaxSizeInMegabytes: The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
	// Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a servicebus.azure.com/Namespace resource
	Owner *genruntime.KnownResourceReference `group:"servicebus.azure.com" json:"owner,omitempty" kind:"Namespace"`

	// RequiresDuplicateDetection: A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	// RequiresSession: A value that indicates whether the queue supports the concept of sessions.
	RequiresSession *bool `json:"requiresSession,omitempty"`
}

<<<<<<< HEAD
var _ genruntime.ARMTransformer = &NamespacesQueue_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (queue *NamespacesQueue_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if queue == nil {
		return nil, nil
	}
	result := &NamespacesQueue_SpecARM{}
=======
var _ genruntime.ARMTransformer = &Namespaces_Queues_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (queues *Namespaces_Queues_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if queues == nil {
		return nil, nil
	}
	result := &Namespaces_Queues_SpecARM{}
>>>>>>> main

	// Set property ‘AzureName’:
	result.AzureName = queue.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if queue.AutoDeleteOnIdle != nil ||
		queue.DeadLetteringOnMessageExpiration != nil ||
		queue.DefaultMessageTimeToLive != nil ||
		queue.DuplicateDetectionHistoryTimeWindow != nil ||
		queue.EnableBatchedOperations != nil ||
		queue.EnableExpress != nil ||
		queue.EnablePartitioning != nil ||
		queue.ForwardDeadLetteredMessagesTo != nil ||
		queue.ForwardTo != nil ||
		queue.LockDuration != nil ||
		queue.MaxDeliveryCount != nil ||
		queue.MaxSizeInMegabytes != nil ||
		queue.RequiresDuplicateDetection != nil ||
		queue.RequiresSession != nil {
		result.Properties = &SBQueuePropertiesARM{}
	}
	if queue.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *queue.AutoDeleteOnIdle
		result.Properties.AutoDeleteOnIdle = &autoDeleteOnIdle
	}
	if queue.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *queue.DeadLetteringOnMessageExpiration
		result.Properties.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	}
	if queue.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *queue.DefaultMessageTimeToLive
		result.Properties.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	}
	if queue.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *queue.DuplicateDetectionHistoryTimeWindow
		result.Properties.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	}
	if queue.EnableBatchedOperations != nil {
		enableBatchedOperations := *queue.EnableBatchedOperations
		result.Properties.EnableBatchedOperations = &enableBatchedOperations
	}
	if queue.EnableExpress != nil {
		enableExpress := *queue.EnableExpress
		result.Properties.EnableExpress = &enableExpress
	}
	if queue.EnablePartitioning != nil {
		enablePartitioning := *queue.EnablePartitioning
		result.Properties.EnablePartitioning = &enablePartitioning
	}
	if queue.ForwardDeadLetteredMessagesTo != nil {
		forwardDeadLetteredMessagesTo := *queue.ForwardDeadLetteredMessagesTo
		result.Properties.ForwardDeadLetteredMessagesTo = &forwardDeadLetteredMessagesTo
	}
	if queue.ForwardTo != nil {
		forwardTo := *queue.ForwardTo
		result.Properties.ForwardTo = &forwardTo
	}
	if queue.LockDuration != nil {
		lockDuration := *queue.LockDuration
		result.Properties.LockDuration = &lockDuration
	}
	if queue.MaxDeliveryCount != nil {
		maxDeliveryCount := *queue.MaxDeliveryCount
		result.Properties.MaxDeliveryCount = &maxDeliveryCount
	}
	if queue.MaxSizeInMegabytes != nil {
		maxSizeInMegabytes := *queue.MaxSizeInMegabytes
		result.Properties.MaxSizeInMegabytes = &maxSizeInMegabytes
	}
	if queue.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *queue.RequiresDuplicateDetection
		result.Properties.RequiresDuplicateDetection = &requiresDuplicateDetection
	}
	if queue.RequiresSession != nil {
		requiresSession := *queue.RequiresSession
		result.Properties.RequiresSession = &requiresSession
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
<<<<<<< HEAD
func (queue *NamespacesQueue_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesQueue_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (queue *NamespacesQueue_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesQueue_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesQueue_SpecARM, got %T", armInput)
=======
func (queues *Namespaces_Queues_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Namespaces_Queues_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (queues *Namespaces_Queues_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Namespaces_Queues_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Namespaces_Queues_SpecARM, got %T", armInput)
>>>>>>> main
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoDeleteOnIdle != nil {
			autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
			queue.AutoDeleteOnIdle = &autoDeleteOnIdle
		}
	}

	// Set property ‘AzureName’:
	queue.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DeadLetteringOnMessageExpiration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetteringOnMessageExpiration != nil {
			deadLetteringOnMessageExpiration := *typedInput.Properties.DeadLetteringOnMessageExpiration
			queue.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
		}
	}

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultMessageTimeToLive != nil {
			defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
			queue.DefaultMessageTimeToLive = &defaultMessageTimeToLive
		}
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
			duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
			queue.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
		}
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBatchedOperations != nil {
			enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
			queue.EnableBatchedOperations = &enableBatchedOperations
		}
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableExpress != nil {
			enableExpress := *typedInput.Properties.EnableExpress
			queue.EnableExpress = &enableExpress
		}
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePartitioning != nil {
			enablePartitioning := *typedInput.Properties.EnablePartitioning
			queue.EnablePartitioning = &enablePartitioning
		}
	}

	// Set property ‘ForwardDeadLetteredMessagesTo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardDeadLetteredMessagesTo != nil {
			forwardDeadLetteredMessagesTo := *typedInput.Properties.ForwardDeadLetteredMessagesTo
			queue.ForwardDeadLetteredMessagesTo = &forwardDeadLetteredMessagesTo
		}
	}

	// Set property ‘ForwardTo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardTo != nil {
			forwardTo := *typedInput.Properties.ForwardTo
			queue.ForwardTo = &forwardTo
		}
	}

	// Set property ‘LockDuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LockDuration != nil {
			lockDuration := *typedInput.Properties.LockDuration
			queue.LockDuration = &lockDuration
		}
	}

	// Set property ‘MaxDeliveryCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxDeliveryCount != nil {
			maxDeliveryCount := *typedInput.Properties.MaxDeliveryCount
			queue.MaxDeliveryCount = &maxDeliveryCount
		}
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeInMegabytes != nil {
			maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
			queue.MaxSizeInMegabytes = &maxSizeInMegabytes
		}
	}

	// Set property ‘Owner’:
	queue.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresDuplicateDetection != nil {
			requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
			queue.RequiresDuplicateDetection = &requiresDuplicateDetection
		}
	}

	// Set property ‘RequiresSession’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresSession != nil {
			requiresSession := *typedInput.Properties.RequiresSession
			queue.RequiresSession = &requiresSession
		}
	}

	// No error
	return nil
}

<<<<<<< HEAD
var _ genruntime.ConvertibleSpec = &NamespacesQueue_Spec{}

// ConvertSpecFrom populates our NamespacesQueue_Spec from the provided source
func (queue *NamespacesQueue_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210101ps.NamespacesQueue_Spec)
	if ok {
		// Populate our instance from source
		return queue.AssignPropertiesFromNamespacesQueue_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210101ps.NamespacesQueue_Spec{}
=======
var _ genruntime.ConvertibleSpec = &Namespaces_Queues_Spec{}

// ConvertSpecFrom populates our Namespaces_Queues_Spec from the provided source
func (queues *Namespaces_Queues_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210101ps.Namespaces_Queues_Spec)
	if ok {
		// Populate our instance from source
		return queues.AssignProperties_From_Namespaces_Queues_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210101ps.Namespaces_Queues_Spec{}
>>>>>>> main
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
<<<<<<< HEAD
	err = queue.AssignPropertiesFromNamespacesQueue_Spec(src)
=======
	err = queues.AssignProperties_From_Namespaces_Queues_Spec(src)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

<<<<<<< HEAD
// ConvertSpecTo populates the provided destination from our NamespacesQueue_Spec
func (queue *NamespacesQueue_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210101ps.NamespacesQueue_Spec)
	if ok {
		// Populate destination from our instance
		return queue.AssignPropertiesToNamespacesQueue_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210101ps.NamespacesQueue_Spec{}
	err := queue.AssignPropertiesToNamespacesQueue_Spec(dst)
=======
// ConvertSpecTo populates the provided destination from our Namespaces_Queues_Spec
func (queues *Namespaces_Queues_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210101ps.Namespaces_Queues_Spec)
	if ok {
		// Populate destination from our instance
		return queues.AssignProperties_To_Namespaces_Queues_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210101ps.Namespaces_Queues_Spec{}
	err := queues.AssignProperties_To_Namespaces_Queues_Spec(dst)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromNamespacesQueue_Spec populates our NamespacesQueue_Spec from the provided source NamespacesQueue_Spec
func (queue *NamespacesQueue_Spec) AssignPropertiesFromNamespacesQueue_Spec(source *v20210101ps.NamespacesQueue_Spec) error {
=======
// AssignProperties_From_Namespaces_Queues_Spec populates our Namespaces_Queues_Spec from the provided source Namespaces_Queues_Spec
func (queues *Namespaces_Queues_Spec) AssignProperties_From_Namespaces_Queues_Spec(source *v20210101ps.Namespaces_Queues_Spec) error {
>>>>>>> main

	// AutoDeleteOnIdle
	if source.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *source.AutoDeleteOnIdle
		queue.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		queue.AutoDeleteOnIdle = nil
	}

	// AzureName
	queue.AzureName = source.AzureName

	// DeadLetteringOnMessageExpiration
	if source.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *source.DeadLetteringOnMessageExpiration
		queue.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		queue.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	if source.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *source.DefaultMessageTimeToLive
		queue.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		queue.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if source.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *source.DuplicateDetectionHistoryTimeWindow
		queue.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		queue.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		queue.EnableBatchedOperations = &enableBatchedOperation
	} else {
		queue.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		queue.EnableExpress = &enableExpress
	} else {
		queue.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		queue.EnablePartitioning = &enablePartitioning
	} else {
		queue.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	queue.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(source.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	queue.ForwardTo = genruntime.ClonePointerToString(source.ForwardTo)

	// LockDuration
	if source.LockDuration != nil {
		lockDuration := *source.LockDuration
		queue.LockDuration = &lockDuration
	} else {
		queue.LockDuration = nil
	}

	// MaxDeliveryCount
	queue.MaxDeliveryCount = genruntime.ClonePointerToInt(source.MaxDeliveryCount)

	// MaxSizeInMegabytes
	queue.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		queue.Owner = &owner
	} else {
		queue.Owner = nil
	}

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		queue.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		queue.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if source.RequiresSession != nil {
		requiresSession := *source.RequiresSession
		queue.RequiresSession = &requiresSession
	} else {
		queue.RequiresSession = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToNamespacesQueue_Spec populates the provided destination NamespacesQueue_Spec from our NamespacesQueue_Spec
func (queue *NamespacesQueue_Spec) AssignPropertiesToNamespacesQueue_Spec(destination *v20210101ps.NamespacesQueue_Spec) error {
=======
// AssignProperties_To_Namespaces_Queues_Spec populates the provided destination Namespaces_Queues_Spec from our Namespaces_Queues_Spec
func (queues *Namespaces_Queues_Spec) AssignProperties_To_Namespaces_Queues_Spec(destination *v20210101ps.Namespaces_Queues_Spec) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoDeleteOnIdle
	if queue.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *queue.AutoDeleteOnIdle
		destination.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		destination.AutoDeleteOnIdle = nil
	}

	// AzureName
	destination.AzureName = queue.AzureName

	// DeadLetteringOnMessageExpiration
	if queue.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *queue.DeadLetteringOnMessageExpiration
		destination.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		destination.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	if queue.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *queue.DefaultMessageTimeToLive
		destination.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		destination.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if queue.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *queue.DuplicateDetectionHistoryTimeWindow
		destination.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		destination.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if queue.EnableBatchedOperations != nil {
		enableBatchedOperation := *queue.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if queue.EnableExpress != nil {
		enableExpress := *queue.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if queue.EnablePartitioning != nil {
		enablePartitioning := *queue.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	destination.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(queue.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	destination.ForwardTo = genruntime.ClonePointerToString(queue.ForwardTo)

	// LockDuration
	if queue.LockDuration != nil {
		lockDuration := *queue.LockDuration
		destination.LockDuration = &lockDuration
	} else {
		destination.LockDuration = nil
	}

	// MaxDeliveryCount
	destination.MaxDeliveryCount = genruntime.ClonePointerToInt(queue.MaxDeliveryCount)

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(queue.MaxSizeInMegabytes)

	// OriginalVersion
	destination.OriginalVersion = queue.OriginalVersion()

	// Owner
	if queue.Owner != nil {
		owner := queue.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RequiresDuplicateDetection
	if queue.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *queue.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if queue.RequiresSession != nil {
		requiresSession := *queue.RequiresSession
		destination.RequiresSession = &requiresSession
	} else {
		destination.RequiresSession = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
<<<<<<< HEAD
func (queue *NamespacesQueue_Spec) OriginalVersion() string {
=======
func (queues *Namespaces_Queues_Spec) OriginalVersion() string {
>>>>>>> main
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
<<<<<<< HEAD
func (queue *NamespacesQueue_Spec) SetAzureName(azureName string) { queue.AzureName = azureName }
=======
func (queues *Namespaces_Queues_Spec) SetAzureName(azureName string) { queues.AzureName = azureName }
>>>>>>> main

type NamespacesQueue_STATUS struct {
	// AccessedAt: Last time a message was sent, or the last time there was a receive request to this queue.
	AccessedAt *string `json:"accessedAt,omitempty"`

	// AutoDeleteOnIdle: ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration
	// is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CountDetails: Message Count Details.
	CountDetails *MessageCountDetails_STATUS `json:"countDetails,omitempty"`

	// CreatedAt: The exact time the message was created.
	CreatedAt *string `json:"createdAt,omitempty"`

	// DeadLetteringOnMessageExpiration: A value that indicates whether this queue has dead letter support when a message
	// expires.
	DeadLetteringOnMessageExpiration *bool `json:"deadLetteringOnMessageExpiration,omitempty"`

	// DefaultMessageTimeToLive: ISO 8601 default message timespan to live value. This is the duration after which the message
	// expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not
	// set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	// DuplicateDetectionHistoryTimeWindow: ISO 8601 timeSpan structure that defines the duration of the duplicate detection
	// history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	// EnableBatchedOperations: Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	// EnableExpress: A value that indicates whether Express Entities are enabled. An express queue holds a message in memory
	// temporarily before writing it to persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	// EnablePartitioning: A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	// ForwardDeadLetteredMessagesTo: Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo *string `json:"forwardDeadLetteredMessagesTo,omitempty"`

	// ForwardTo: Queue/Topic name to forward the messages
	ForwardTo *string `json:"forwardTo,omitempty"`

	// Id: Resource Id
	Id *string `json:"id,omitempty"`

	// LockDuration: ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for
	// other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `json:"lockDuration,omitempty"`

	// MaxDeliveryCount: The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
	// default value is 10.
	MaxDeliveryCount *int `json:"maxDeliveryCount,omitempty"`

	// MaxSizeInMegabytes: The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
	// Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	// MessageCount: The number of messages in the queue.
	MessageCount *int `json:"messageCount,omitempty"`

	// Name: Resource name
	Name *string `json:"name,omitempty"`

	// RequiresDuplicateDetection: A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	// RequiresSession: A value that indicates whether the queue supports the concept of sessions.
	RequiresSession *bool `json:"requiresSession,omitempty"`

	// SizeInBytes: The size of the queue, in bytes.
	SizeInBytes *int `json:"sizeInBytes,omitempty"`

	// Status: Enumerates the possible values for the status of a messaging entity.
	Status *EntityStatus_STATUS `json:"status,omitempty"`

	// SystemData: The system meta data relating to this resource.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: Resource type
	Type *string `json:"type,omitempty"`

	// UpdatedAt: The exact time the message was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

var _ genruntime.ConvertibleStatus = &NamespacesQueue_STATUS{}

// ConvertStatusFrom populates our NamespacesQueue_STATUS from the provided source
func (queue *NamespacesQueue_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210101ps.NamespacesQueue_STATUS)
	if ok {
		// Populate our instance from source
<<<<<<< HEAD
		return queue.AssignPropertiesFromNamespacesQueue_STATUS(src)
=======
		return queue.AssignProperties_From_SBQueue_STATUS(src)
>>>>>>> main
	}

	// Convert to an intermediate form
	src = &v20210101ps.NamespacesQueue_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
<<<<<<< HEAD
	err = queue.AssignPropertiesFromNamespacesQueue_STATUS(src)
=======
	err = queue.AssignProperties_From_SBQueue_STATUS(src)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our NamespacesQueue_STATUS
func (queue *NamespacesQueue_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210101ps.NamespacesQueue_STATUS)
	if ok {
		// Populate destination from our instance
<<<<<<< HEAD
		return queue.AssignPropertiesToNamespacesQueue_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210101ps.NamespacesQueue_STATUS{}
	err := queue.AssignPropertiesToNamespacesQueue_STATUS(dst)
=======
		return queue.AssignProperties_To_SBQueue_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210101ps.SBQueue_STATUS{}
	err := queue.AssignProperties_To_SBQueue_STATUS(dst)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &NamespacesQueue_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (queue *NamespacesQueue_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesQueue_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (queue *NamespacesQueue_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesQueue_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesQueue_STATUSARM, got %T", armInput)
	}

	// Set property ‘AccessedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessedAt != nil {
			accessedAt := *typedInput.Properties.AccessedAt
			queue.AccessedAt = &accessedAt
		}
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoDeleteOnIdle != nil {
			autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
			queue.AutoDeleteOnIdle = &autoDeleteOnIdle
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CountDetails’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CountDetails != nil {
			var countDetails1 MessageCountDetails_STATUS
			err := countDetails1.PopulateFromARM(owner, *typedInput.Properties.CountDetails)
			if err != nil {
				return err
			}
			countDetails := countDetails1
			queue.CountDetails = &countDetails
		}
	}

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			queue.CreatedAt = &createdAt
		}
	}

	// Set property ‘DeadLetteringOnMessageExpiration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetteringOnMessageExpiration != nil {
			deadLetteringOnMessageExpiration := *typedInput.Properties.DeadLetteringOnMessageExpiration
			queue.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
		}
	}

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultMessageTimeToLive != nil {
			defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
			queue.DefaultMessageTimeToLive = &defaultMessageTimeToLive
		}
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
			duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
			queue.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
		}
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBatchedOperations != nil {
			enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
			queue.EnableBatchedOperations = &enableBatchedOperations
		}
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableExpress != nil {
			enableExpress := *typedInput.Properties.EnableExpress
			queue.EnableExpress = &enableExpress
		}
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePartitioning != nil {
			enablePartitioning := *typedInput.Properties.EnablePartitioning
			queue.EnablePartitioning = &enablePartitioning
		}
	}

	// Set property ‘ForwardDeadLetteredMessagesTo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardDeadLetteredMessagesTo != nil {
			forwardDeadLetteredMessagesTo := *typedInput.Properties.ForwardDeadLetteredMessagesTo
			queue.ForwardDeadLetteredMessagesTo = &forwardDeadLetteredMessagesTo
		}
	}

	// Set property ‘ForwardTo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardTo != nil {
			forwardTo := *typedInput.Properties.ForwardTo
			queue.ForwardTo = &forwardTo
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		queue.Id = &id
	}

	// Set property ‘LockDuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LockDuration != nil {
			lockDuration := *typedInput.Properties.LockDuration
			queue.LockDuration = &lockDuration
		}
	}

	// Set property ‘MaxDeliveryCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxDeliveryCount != nil {
			maxDeliveryCount := *typedInput.Properties.MaxDeliveryCount
			queue.MaxDeliveryCount = &maxDeliveryCount
		}
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeInMegabytes != nil {
			maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
			queue.MaxSizeInMegabytes = &maxSizeInMegabytes
		}
	}

	// Set property ‘MessageCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MessageCount != nil {
			messageCount := *typedInput.Properties.MessageCount
			queue.MessageCount = &messageCount
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		queue.Name = &name
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresDuplicateDetection != nil {
			requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
			queue.RequiresDuplicateDetection = &requiresDuplicateDetection
		}
	}

	// Set property ‘RequiresSession’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresSession != nil {
			requiresSession := *typedInput.Properties.RequiresSession
			queue.RequiresSession = &requiresSession
		}
	}

	// Set property ‘SizeInBytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SizeInBytes != nil {
			sizeInBytes := *typedInput.Properties.SizeInBytes
			queue.SizeInBytes = &sizeInBytes
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			queue.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		queue.SystemData = &systemData
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		queue.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			queue.UpdatedAt = &updatedAt
		}
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromNamespacesQueue_STATUS populates our NamespacesQueue_STATUS from the provided source NamespacesQueue_STATUS
func (queue *NamespacesQueue_STATUS) AssignPropertiesFromNamespacesQueue_STATUS(source *v20210101ps.NamespacesQueue_STATUS) error {
=======
// AssignProperties_From_SBQueue_STATUS populates our SBQueue_STATUS from the provided source SBQueue_STATUS
func (queue *SBQueue_STATUS) AssignProperties_From_SBQueue_STATUS(source *v20210101ps.SBQueue_STATUS) error {
>>>>>>> main

	// AccessedAt
	queue.AccessedAt = genruntime.ClonePointerToString(source.AccessedAt)

	// AutoDeleteOnIdle
	queue.AutoDeleteOnIdle = genruntime.ClonePointerToString(source.AutoDeleteOnIdle)

	// Conditions
	queue.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CountDetails
	if source.CountDetails != nil {
		var countDetail MessageCountDetails_STATUS
<<<<<<< HEAD
		err := countDetail.AssignPropertiesFromMessageCountDetails_STATUS(source.CountDetails)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMessageCountDetails_STATUS() to populate field CountDetails")
=======
		err := countDetail.AssignProperties_From_MessageCountDetails_STATUS(source.CountDetails)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_MessageCountDetails_STATUS() to populate field CountDetails")
>>>>>>> main
		}
		queue.CountDetails = &countDetail
	} else {
		queue.CountDetails = nil
	}

	// CreatedAt
	queue.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// DeadLetteringOnMessageExpiration
	if source.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *source.DeadLetteringOnMessageExpiration
		queue.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		queue.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	queue.DefaultMessageTimeToLive = genruntime.ClonePointerToString(source.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	queue.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(source.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		queue.EnableBatchedOperations = &enableBatchedOperation
	} else {
		queue.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		queue.EnableExpress = &enableExpress
	} else {
		queue.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		queue.EnablePartitioning = &enablePartitioning
	} else {
		queue.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	queue.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(source.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	queue.ForwardTo = genruntime.ClonePointerToString(source.ForwardTo)

	// Id
	queue.Id = genruntime.ClonePointerToString(source.Id)

	// LockDuration
	queue.LockDuration = genruntime.ClonePointerToString(source.LockDuration)

	// MaxDeliveryCount
	queue.MaxDeliveryCount = genruntime.ClonePointerToInt(source.MaxDeliveryCount)

	// MaxSizeInMegabytes
	queue.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// MessageCount
	queue.MessageCount = genruntime.ClonePointerToInt(source.MessageCount)

	// Name
	queue.Name = genruntime.ClonePointerToString(source.Name)

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		queue.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		queue.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if source.RequiresSession != nil {
		requiresSession := *source.RequiresSession
		queue.RequiresSession = &requiresSession
	} else {
		queue.RequiresSession = nil
	}

	// SizeInBytes
	queue.SizeInBytes = genruntime.ClonePointerToInt(source.SizeInBytes)

	// Status
	if source.Status != nil {
		status := EntityStatus_STATUS(*source.Status)
		queue.Status = &status
	} else {
		queue.Status = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
<<<<<<< HEAD
		err := systemDatum.AssignPropertiesFromSystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_STATUS() to populate field SystemData")
=======
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
>>>>>>> main
		}
		queue.SystemData = &systemDatum
	} else {
		queue.SystemData = nil
	}

	// Type
	queue.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	queue.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToNamespacesQueue_STATUS populates the provided destination NamespacesQueue_STATUS from our NamespacesQueue_STATUS
func (queue *NamespacesQueue_STATUS) AssignPropertiesToNamespacesQueue_STATUS(destination *v20210101ps.NamespacesQueue_STATUS) error {
=======
// AssignProperties_To_SBQueue_STATUS populates the provided destination SBQueue_STATUS from our SBQueue_STATUS
func (queue *SBQueue_STATUS) AssignProperties_To_SBQueue_STATUS(destination *v20210101ps.SBQueue_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessedAt
	destination.AccessedAt = genruntime.ClonePointerToString(queue.AccessedAt)

	// AutoDeleteOnIdle
	destination.AutoDeleteOnIdle = genruntime.ClonePointerToString(queue.AutoDeleteOnIdle)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(queue.Conditions)

	// CountDetails
	if queue.CountDetails != nil {
		var countDetail v20210101ps.MessageCountDetails_STATUS
<<<<<<< HEAD
		err := queue.CountDetails.AssignPropertiesToMessageCountDetails_STATUS(&countDetail)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMessageCountDetails_STATUS() to populate field CountDetails")
=======
		err := queue.CountDetails.AssignProperties_To_MessageCountDetails_STATUS(&countDetail)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_MessageCountDetails_STATUS() to populate field CountDetails")
>>>>>>> main
		}
		destination.CountDetails = &countDetail
	} else {
		destination.CountDetails = nil
	}

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(queue.CreatedAt)

	// DeadLetteringOnMessageExpiration
	if queue.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *queue.DeadLetteringOnMessageExpiration
		destination.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		destination.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	destination.DefaultMessageTimeToLive = genruntime.ClonePointerToString(queue.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	destination.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(queue.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if queue.EnableBatchedOperations != nil {
		enableBatchedOperation := *queue.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if queue.EnableExpress != nil {
		enableExpress := *queue.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if queue.EnablePartitioning != nil {
		enablePartitioning := *queue.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	destination.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(queue.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	destination.ForwardTo = genruntime.ClonePointerToString(queue.ForwardTo)

	// Id
	destination.Id = genruntime.ClonePointerToString(queue.Id)

	// LockDuration
	destination.LockDuration = genruntime.ClonePointerToString(queue.LockDuration)

	// MaxDeliveryCount
	destination.MaxDeliveryCount = genruntime.ClonePointerToInt(queue.MaxDeliveryCount)

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(queue.MaxSizeInMegabytes)

	// MessageCount
	destination.MessageCount = genruntime.ClonePointerToInt(queue.MessageCount)

	// Name
	destination.Name = genruntime.ClonePointerToString(queue.Name)

	// RequiresDuplicateDetection
	if queue.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *queue.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if queue.RequiresSession != nil {
		requiresSession := *queue.RequiresSession
		destination.RequiresSession = &requiresSession
	} else {
		destination.RequiresSession = nil
	}

	// SizeInBytes
	destination.SizeInBytes = genruntime.ClonePointerToInt(queue.SizeInBytes)

	// Status
	if queue.Status != nil {
		status := string(*queue.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SystemData
	if queue.SystemData != nil {
		var systemDatum v20210101ps.SystemData_STATUS
<<<<<<< HEAD
		err := queue.SystemData.AssignPropertiesToSystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_STATUS() to populate field SystemData")
=======
		err := queue.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
>>>>>>> main
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(queue.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(queue.UpdatedAt)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EntityStatus_STATUS string

const (
	EntityStatus_Active_STATUS          = EntityStatus_STATUS("Active")
	EntityStatus_Creating_STATUS        = EntityStatus_STATUS("Creating")
	EntityStatus_Deleting_STATUS        = EntityStatus_STATUS("Deleting")
	EntityStatus_Disabled_STATUS        = EntityStatus_STATUS("Disabled")
	EntityStatus_ReceiveDisabled_STATUS = EntityStatus_STATUS("ReceiveDisabled")
	EntityStatus_Renaming_STATUS        = EntityStatus_STATUS("Renaming")
	EntityStatus_Restoring_STATUS       = EntityStatus_STATUS("Restoring")
	EntityStatus_SendDisabled_STATUS    = EntityStatus_STATUS("SendDisabled")
	EntityStatus_Unknown_STATUS         = EntityStatus_STATUS("Unknown")
)

type MessageCountDetails_STATUS struct {
	// ActiveMessageCount: Number of active messages in the queue, topic, or subscription.
	ActiveMessageCount *int `json:"activeMessageCount,omitempty"`

	// DeadLetterMessageCount: Number of messages that are dead lettered.
	DeadLetterMessageCount *int `json:"deadLetterMessageCount,omitempty"`

	// ScheduledMessageCount: Number of scheduled messages.
	ScheduledMessageCount *int `json:"scheduledMessageCount,omitempty"`

	// TransferDeadLetterMessageCount: Number of messages transferred into dead letters.
	TransferDeadLetterMessageCount *int `json:"transferDeadLetterMessageCount,omitempty"`

	// TransferMessageCount: Number of messages transferred to another queue, topic, or subscription.
	TransferMessageCount *int `json:"transferMessageCount,omitempty"`
}

var _ genruntime.FromARMConverter = &MessageCountDetails_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (details *MessageCountDetails_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MessageCountDetails_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (details *MessageCountDetails_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MessageCountDetails_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MessageCountDetails_STATUSARM, got %T", armInput)
	}

	// Set property ‘ActiveMessageCount’:
	if typedInput.ActiveMessageCount != nil {
		activeMessageCount := *typedInput.ActiveMessageCount
		details.ActiveMessageCount = &activeMessageCount
	}

	// Set property ‘DeadLetterMessageCount’:
	if typedInput.DeadLetterMessageCount != nil {
		deadLetterMessageCount := *typedInput.DeadLetterMessageCount
		details.DeadLetterMessageCount = &deadLetterMessageCount
	}

	// Set property ‘ScheduledMessageCount’:
	if typedInput.ScheduledMessageCount != nil {
		scheduledMessageCount := *typedInput.ScheduledMessageCount
		details.ScheduledMessageCount = &scheduledMessageCount
	}

	// Set property ‘TransferDeadLetterMessageCount’:
	if typedInput.TransferDeadLetterMessageCount != nil {
		transferDeadLetterMessageCount := *typedInput.TransferDeadLetterMessageCount
		details.TransferDeadLetterMessageCount = &transferDeadLetterMessageCount
	}

	// Set property ‘TransferMessageCount’:
	if typedInput.TransferMessageCount != nil {
		transferMessageCount := *typedInput.TransferMessageCount
		details.TransferMessageCount = &transferMessageCount
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromMessageCountDetails_STATUS populates our MessageCountDetails_STATUS from the provided source MessageCountDetails_STATUS
func (details *MessageCountDetails_STATUS) AssignPropertiesFromMessageCountDetails_STATUS(source *v20210101ps.MessageCountDetails_STATUS) error {
=======
// AssignProperties_From_MessageCountDetails_STATUS populates our MessageCountDetails_STATUS from the provided source MessageCountDetails_STATUS
func (details *MessageCountDetails_STATUS) AssignProperties_From_MessageCountDetails_STATUS(source *v20210101ps.MessageCountDetails_STATUS) error {
>>>>>>> main

	// ActiveMessageCount
	details.ActiveMessageCount = genruntime.ClonePointerToInt(source.ActiveMessageCount)

	// DeadLetterMessageCount
	details.DeadLetterMessageCount = genruntime.ClonePointerToInt(source.DeadLetterMessageCount)

	// ScheduledMessageCount
	details.ScheduledMessageCount = genruntime.ClonePointerToInt(source.ScheduledMessageCount)

	// TransferDeadLetterMessageCount
	details.TransferDeadLetterMessageCount = genruntime.ClonePointerToInt(source.TransferDeadLetterMessageCount)

	// TransferMessageCount
	details.TransferMessageCount = genruntime.ClonePointerToInt(source.TransferMessageCount)

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToMessageCountDetails_STATUS populates the provided destination MessageCountDetails_STATUS from our MessageCountDetails_STATUS
func (details *MessageCountDetails_STATUS) AssignPropertiesToMessageCountDetails_STATUS(destination *v20210101ps.MessageCountDetails_STATUS) error {
=======
// AssignProperties_To_MessageCountDetails_STATUS populates the provided destination MessageCountDetails_STATUS from our MessageCountDetails_STATUS
func (details *MessageCountDetails_STATUS) AssignProperties_To_MessageCountDetails_STATUS(destination *v20210101ps.MessageCountDetails_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveMessageCount
	destination.ActiveMessageCount = genruntime.ClonePointerToInt(details.ActiveMessageCount)

	// DeadLetterMessageCount
	destination.DeadLetterMessageCount = genruntime.ClonePointerToInt(details.DeadLetterMessageCount)

	// ScheduledMessageCount
	destination.ScheduledMessageCount = genruntime.ClonePointerToInt(details.ScheduledMessageCount)

	// TransferDeadLetterMessageCount
	destination.TransferDeadLetterMessageCount = genruntime.ClonePointerToInt(details.TransferDeadLetterMessageCount)

	// TransferMessageCount
	destination.TransferMessageCount = genruntime.ClonePointerToInt(details.TransferMessageCount)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NamespacesQueue{}, &NamespacesQueueList{})
}
