// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Namespaces_Topics_Subscription_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Namespaces_Topics_Subscription_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespaces_Topics_Subscription_STATUS_ARM, Namespaces_Topics_Subscription_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespaces_Topics_Subscription_STATUS_ARM runs a test to see if a specific instance of Namespaces_Topics_Subscription_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespaces_Topics_Subscription_STATUS_ARM(subject Namespaces_Topics_Subscription_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Namespaces_Topics_Subscription_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Namespaces_Topics_Subscription_STATUS_ARM instances for property testing - lazily instantiated by
// Namespaces_Topics_Subscription_STATUS_ARMGenerator()
var namespaces_Topics_Subscription_STATUS_ARMGenerator gopter.Gen

// Namespaces_Topics_Subscription_STATUS_ARMGenerator returns a generator of Namespaces_Topics_Subscription_STATUS_ARM instances for property testing.
// We first initialize namespaces_Topics_Subscription_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Namespaces_Topics_Subscription_STATUS_ARMGenerator() gopter.Gen {
	if namespaces_Topics_Subscription_STATUS_ARMGenerator != nil {
		return namespaces_Topics_Subscription_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespaces_Topics_Subscription_STATUS_ARM(generators)
	namespaces_Topics_Subscription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Namespaces_Topics_Subscription_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespaces_Topics_Subscription_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNamespaces_Topics_Subscription_STATUS_ARM(generators)
	namespaces_Topics_Subscription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Namespaces_Topics_Subscription_STATUS_ARM{}), generators)

	return namespaces_Topics_Subscription_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespaces_Topics_Subscription_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespaces_Topics_Subscription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNamespaces_Topics_Subscription_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespaces_Topics_Subscription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SBSubscriptionProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_SBClientAffineProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBClientAffineProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBClientAffineProperties_STATUS_ARM, SBClientAffineProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBClientAffineProperties_STATUS_ARM runs a test to see if a specific instance of SBClientAffineProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBClientAffineProperties_STATUS_ARM(subject SBClientAffineProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBClientAffineProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBClientAffineProperties_STATUS_ARM instances for property testing - lazily instantiated by
// SBClientAffineProperties_STATUS_ARMGenerator()
var sbClientAffineProperties_STATUS_ARMGenerator gopter.Gen

// SBClientAffineProperties_STATUS_ARMGenerator returns a generator of SBClientAffineProperties_STATUS_ARM instances for property testing.
func SBClientAffineProperties_STATUS_ARMGenerator() gopter.Gen {
	if sbClientAffineProperties_STATUS_ARMGenerator != nil {
		return sbClientAffineProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBClientAffineProperties_STATUS_ARM(generators)
	sbClientAffineProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SBClientAffineProperties_STATUS_ARM{}), generators)

	return sbClientAffineProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSBClientAffineProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBClientAffineProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["IsDurable"] = gen.PtrOf(gen.Bool())
	gens["IsShared"] = gen.PtrOf(gen.Bool())
}

func Test_SBSubscriptionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBSubscriptionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBSubscriptionProperties_STATUS_ARM, SBSubscriptionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBSubscriptionProperties_STATUS_ARM runs a test to see if a specific instance of SBSubscriptionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBSubscriptionProperties_STATUS_ARM(subject SBSubscriptionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBSubscriptionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBSubscriptionProperties_STATUS_ARM instances for property testing - lazily instantiated by
// SBSubscriptionProperties_STATUS_ARMGenerator()
var sbSubscriptionProperties_STATUS_ARMGenerator gopter.Gen

// SBSubscriptionProperties_STATUS_ARMGenerator returns a generator of SBSubscriptionProperties_STATUS_ARM instances for property testing.
// We first initialize sbSubscriptionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SBSubscriptionProperties_STATUS_ARMGenerator() gopter.Gen {
	if sbSubscriptionProperties_STATUS_ARMGenerator != nil {
		return sbSubscriptionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBSubscriptionProperties_STATUS_ARM(generators)
	sbSubscriptionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SBSubscriptionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBSubscriptionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSBSubscriptionProperties_STATUS_ARM(generators)
	sbSubscriptionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SBSubscriptionProperties_STATUS_ARM{}), generators)

	return sbSubscriptionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSBSubscriptionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBSubscriptionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AccessedAt"] = gen.PtrOf(gen.AlphaString())
	gens["AutoDeleteOnIdle"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["DeadLetteringOnFilterEvaluationExceptions"] = gen.PtrOf(gen.Bool())
	gens["DeadLetteringOnMessageExpiration"] = gen.PtrOf(gen.Bool())
	gens["DefaultMessageTimeToLive"] = gen.PtrOf(gen.AlphaString())
	gens["DuplicateDetectionHistoryTimeWindow"] = gen.PtrOf(gen.AlphaString())
	gens["EnableBatchedOperations"] = gen.PtrOf(gen.Bool())
	gens["ForwardDeadLetteredMessagesTo"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardTo"] = gen.PtrOf(gen.AlphaString())
	gens["IsClientAffine"] = gen.PtrOf(gen.Bool())
	gens["LockDuration"] = gen.PtrOf(gen.AlphaString())
	gens["MaxDeliveryCount"] = gen.PtrOf(gen.Int())
	gens["MessageCount"] = gen.PtrOf(gen.Int())
	gens["RequiresSession"] = gen.PtrOf(gen.Bool())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		EntityStatus_STATUS_ARM_Active,
		EntityStatus_STATUS_ARM_Creating,
		EntityStatus_STATUS_ARM_Deleting,
		EntityStatus_STATUS_ARM_Disabled,
		EntityStatus_STATUS_ARM_ReceiveDisabled,
		EntityStatus_STATUS_ARM_Renaming,
		EntityStatus_STATUS_ARM_Restoring,
		EntityStatus_STATUS_ARM_SendDisabled,
		EntityStatus_STATUS_ARM_Unknown))
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSBSubscriptionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSBSubscriptionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientAffineProperties"] = gen.PtrOf(SBClientAffineProperties_STATUS_ARMGenerator())
	gens["CountDetails"] = gen.PtrOf(MessageCountDetails_STATUS_ARMGenerator())
}
