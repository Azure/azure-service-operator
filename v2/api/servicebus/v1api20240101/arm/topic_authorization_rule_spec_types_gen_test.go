// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Namespaces_Topics_AuthorizationRule_Properties_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Namespaces_Topics_AuthorizationRule_Properties_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespaces_Topics_AuthorizationRule_Properties_Spec, Namespaces_Topics_AuthorizationRule_Properties_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespaces_Topics_AuthorizationRule_Properties_Spec runs a test to see if a specific instance of Namespaces_Topics_AuthorizationRule_Properties_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespaces_Topics_AuthorizationRule_Properties_Spec(subject Namespaces_Topics_AuthorizationRule_Properties_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Namespaces_Topics_AuthorizationRule_Properties_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Namespaces_Topics_AuthorizationRule_Properties_Spec instances for property testing - lazily instantiated
// by Namespaces_Topics_AuthorizationRule_Properties_SpecGenerator()
var namespaces_Topics_AuthorizationRule_Properties_SpecGenerator gopter.Gen

// Namespaces_Topics_AuthorizationRule_Properties_SpecGenerator returns a generator of Namespaces_Topics_AuthorizationRule_Properties_Spec instances for property testing.
func Namespaces_Topics_AuthorizationRule_Properties_SpecGenerator() gopter.Gen {
	if namespaces_Topics_AuthorizationRule_Properties_SpecGenerator != nil {
		return namespaces_Topics_AuthorizationRule_Properties_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespaces_Topics_AuthorizationRule_Properties_Spec(generators)
	namespaces_Topics_AuthorizationRule_Properties_SpecGenerator = gen.Struct(reflect.TypeOf(Namespaces_Topics_AuthorizationRule_Properties_Spec{}), generators)

	return namespaces_Topics_AuthorizationRule_Properties_SpecGenerator
}

// AddIndependentPropertyGeneratorsForNamespaces_Topics_AuthorizationRule_Properties_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespaces_Topics_AuthorizationRule_Properties_Spec(gens map[string]gopter.Gen) {
	gens["Rights"] = gen.SliceOf(gen.OneConstOf(TopicAuthorizationRuleRights_Spec_Listen, TopicAuthorizationRuleRights_Spec_Manage, TopicAuthorizationRuleRights_Spec_Send))
}

func Test_TopicAuthorizationRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TopicAuthorizationRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTopicAuthorizationRule_Spec, TopicAuthorizationRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTopicAuthorizationRule_Spec runs a test to see if a specific instance of TopicAuthorizationRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForTopicAuthorizationRule_Spec(subject TopicAuthorizationRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TopicAuthorizationRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TopicAuthorizationRule_Spec instances for property testing - lazily instantiated by
// TopicAuthorizationRule_SpecGenerator()
var topicAuthorizationRule_SpecGenerator gopter.Gen

// TopicAuthorizationRule_SpecGenerator returns a generator of TopicAuthorizationRule_Spec instances for property testing.
// We first initialize topicAuthorizationRule_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TopicAuthorizationRule_SpecGenerator() gopter.Gen {
	if topicAuthorizationRule_SpecGenerator != nil {
		return topicAuthorizationRule_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicAuthorizationRule_Spec(generators)
	topicAuthorizationRule_SpecGenerator = gen.Struct(reflect.TypeOf(TopicAuthorizationRule_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTopicAuthorizationRule_Spec(generators)
	AddRelatedPropertyGeneratorsForTopicAuthorizationRule_Spec(generators)
	topicAuthorizationRule_SpecGenerator = gen.Struct(reflect.TypeOf(TopicAuthorizationRule_Spec{}), generators)

	return topicAuthorizationRule_SpecGenerator
}

// AddIndependentPropertyGeneratorsForTopicAuthorizationRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTopicAuthorizationRule_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForTopicAuthorizationRule_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTopicAuthorizationRule_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Namespaces_Topics_AuthorizationRule_Properties_SpecGenerator())
}
