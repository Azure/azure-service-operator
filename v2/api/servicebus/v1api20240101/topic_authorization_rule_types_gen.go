// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240101

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20240101/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/servicebus/v1api20240101/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,servicebus}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /servicebus/resource-manager/Microsoft.ServiceBus/stable/2024-01-01/AuthorizationRules.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}
type TopicAuthorizationRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TopicAuthorizationRule_Spec   `json:"spec,omitempty"`
	Status            TopicAuthorizationRule_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &TopicAuthorizationRule{}

// GetConditions returns the conditions of the resource
func (rule *TopicAuthorizationRule) GetConditions() conditions.Conditions {
	return rule.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (rule *TopicAuthorizationRule) SetConditions(conditions conditions.Conditions) {
	rule.Status.Conditions = conditions
}

var _ conversion.Convertible = &TopicAuthorizationRule{}

// ConvertFrom populates our TopicAuthorizationRule from the provided hub TopicAuthorizationRule
func (rule *TopicAuthorizationRule) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.TopicAuthorizationRule)
	if !ok {
		return fmt.Errorf("expected servicebus/v1api20240101/storage/TopicAuthorizationRule but received %T instead", hub)
	}

	return rule.AssignProperties_From_TopicAuthorizationRule(source)
}

// ConvertTo populates the provided hub TopicAuthorizationRule from our TopicAuthorizationRule
func (rule *TopicAuthorizationRule) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.TopicAuthorizationRule)
	if !ok {
		return fmt.Errorf("expected servicebus/v1api20240101/storage/TopicAuthorizationRule but received %T instead", hub)
	}

	return rule.AssignProperties_To_TopicAuthorizationRule(destination)
}

var _ configmaps.Exporter = &TopicAuthorizationRule{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (rule *TopicAuthorizationRule) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if rule.Spec.OperatorSpec == nil {
		return nil
	}
	return rule.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &TopicAuthorizationRule{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (rule *TopicAuthorizationRule) SecretDestinationExpressions() []*core.DestinationExpression {
	if rule.Spec.OperatorSpec == nil {
		return nil
	}
	return rule.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &TopicAuthorizationRule{}

// InitializeSpec initializes the spec for this resource from the given status
func (rule *TopicAuthorizationRule) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*TopicAuthorizationRule_STATUS); ok {
		return rule.Spec.Initialize_From_TopicAuthorizationRule_STATUS(s)
	}

	return fmt.Errorf("expected Status of type TopicAuthorizationRule_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &TopicAuthorizationRule{}

// AzureName returns the Azure name of the resource
func (rule *TopicAuthorizationRule) AzureName() string {
	return rule.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-01-01"
func (rule TopicAuthorizationRule) GetAPIVersion() string {
	return "2024-01-01"
}

// GetResourceScope returns the scope of the resource
func (rule *TopicAuthorizationRule) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (rule *TopicAuthorizationRule) GetSpec() genruntime.ConvertibleSpec {
	return &rule.Spec
}

// GetStatus returns the status of this resource
func (rule *TopicAuthorizationRule) GetStatus() genruntime.ConvertibleStatus {
	return &rule.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (rule *TopicAuthorizationRule) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ServiceBus/namespaces/topics/authorizationRules"
func (rule *TopicAuthorizationRule) GetType() string {
	return "Microsoft.ServiceBus/namespaces/topics/authorizationRules"
}

// NewEmptyStatus returns a new empty (blank) status
func (rule *TopicAuthorizationRule) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &TopicAuthorizationRule_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (rule *TopicAuthorizationRule) Owner() *genruntime.ResourceReference {
	if rule.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(rule.Spec)
	return rule.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (rule *TopicAuthorizationRule) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*TopicAuthorizationRule_STATUS); ok {
		rule.Status = *st
		return nil
	}

	// Convert status to required version
	var st TopicAuthorizationRule_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	rule.Status = st
	return nil
}

// AssignProperties_From_TopicAuthorizationRule populates our TopicAuthorizationRule from the provided source TopicAuthorizationRule
func (rule *TopicAuthorizationRule) AssignProperties_From_TopicAuthorizationRule(source *storage.TopicAuthorizationRule) error {

	// ObjectMeta
	rule.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec TopicAuthorizationRule_Spec
	err := spec.AssignProperties_From_TopicAuthorizationRule_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_TopicAuthorizationRule_Spec() to populate field Spec")
	}
	rule.Spec = spec

	// Status
	var status TopicAuthorizationRule_STATUS
	err = status.AssignProperties_From_TopicAuthorizationRule_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_TopicAuthorizationRule_STATUS() to populate field Status")
	}
	rule.Status = status

	// No error
	return nil
}

// AssignProperties_To_TopicAuthorizationRule populates the provided destination TopicAuthorizationRule from our TopicAuthorizationRule
func (rule *TopicAuthorizationRule) AssignProperties_To_TopicAuthorizationRule(destination *storage.TopicAuthorizationRule) error {

	// ObjectMeta
	destination.ObjectMeta = *rule.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.TopicAuthorizationRule_Spec
	err := rule.Spec.AssignProperties_To_TopicAuthorizationRule_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_TopicAuthorizationRule_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.TopicAuthorizationRule_STATUS
	err = rule.Status.AssignProperties_To_TopicAuthorizationRule_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_TopicAuthorizationRule_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (rule *TopicAuthorizationRule) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: rule.Spec.OriginalVersion(),
		Kind:    "TopicAuthorizationRule",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /servicebus/resource-manager/Microsoft.ServiceBus/stable/2024-01-01/AuthorizationRules.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}
type TopicAuthorizationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TopicAuthorizationRule `json:"items"`
}

type TopicAuthorizationRule_Spec struct {
	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=1
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *TopicAuthorizationRuleOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a servicebus.azure.com/NamespacesTopic resource
	Owner *genruntime.KnownResourceReference `group:"servicebus.azure.com" json:"owner,omitempty" kind:"NamespacesTopic"`

	// +kubebuilder:validation:Required
	// Rights: The rights associated with the rule.
	Rights []TopicAuthorizationRuleRights_Spec `json:"rights,omitempty"`
}

var _ genruntime.ARMTransformer = &TopicAuthorizationRule_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *TopicAuthorizationRule_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &arm.TopicAuthorizationRule_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if rule.Rights != nil {
		result.Properties = &arm.Namespaces_Topics_AuthorizationRule_Properties_Spec{}
	}
	for _, item := range rule.Rights {
		var temp string
		temp = string(item)
		result.Properties.Rights = append(result.Properties.Rights, arm.TopicAuthorizationRuleRights_Spec(temp))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *TopicAuthorizationRule_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.TopicAuthorizationRule_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *TopicAuthorizationRule_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.TopicAuthorizationRule_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.TopicAuthorizationRule_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	rule.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	rule.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Rights":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Rights {
			var temp string
			temp = string(item)
			rule.Rights = append(rule.Rights, TopicAuthorizationRuleRights_Spec(temp))
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &TopicAuthorizationRule_Spec{}

// ConvertSpecFrom populates our TopicAuthorizationRule_Spec from the provided source
func (rule *TopicAuthorizationRule_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.TopicAuthorizationRule_Spec)
	if ok {
		// Populate our instance from source
		return rule.AssignProperties_From_TopicAuthorizationRule_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.TopicAuthorizationRule_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = rule.AssignProperties_From_TopicAuthorizationRule_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our TopicAuthorizationRule_Spec
func (rule *TopicAuthorizationRule_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.TopicAuthorizationRule_Spec)
	if ok {
		// Populate destination from our instance
		return rule.AssignProperties_To_TopicAuthorizationRule_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.TopicAuthorizationRule_Spec{}
	err := rule.AssignProperties_To_TopicAuthorizationRule_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_TopicAuthorizationRule_Spec populates our TopicAuthorizationRule_Spec from the provided source TopicAuthorizationRule_Spec
func (rule *TopicAuthorizationRule_Spec) AssignProperties_From_TopicAuthorizationRule_Spec(source *storage.TopicAuthorizationRule_Spec) error {

	// AzureName
	rule.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec TopicAuthorizationRuleOperatorSpec
		err := operatorSpec.AssignProperties_From_TopicAuthorizationRuleOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_TopicAuthorizationRuleOperatorSpec() to populate field OperatorSpec")
		}
		rule.OperatorSpec = &operatorSpec
	} else {
		rule.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		rule.Owner = &owner
	} else {
		rule.Owner = nil
	}

	// Rights
	if source.Rights != nil {
		rightList := make([]TopicAuthorizationRuleRights_Spec, len(source.Rights))
		for rightIndex, rightItem := range source.Rights {
			// Shadow the loop variable to avoid aliasing
			rightItem := rightItem
			rightList[rightIndex] = genruntime.ToEnum(rightItem, topicAuthorizationRuleRights_Spec_Values)
		}
		rule.Rights = rightList
	} else {
		rule.Rights = nil
	}

	// No error
	return nil
}

// AssignProperties_To_TopicAuthorizationRule_Spec populates the provided destination TopicAuthorizationRule_Spec from our TopicAuthorizationRule_Spec
func (rule *TopicAuthorizationRule_Spec) AssignProperties_To_TopicAuthorizationRule_Spec(destination *storage.TopicAuthorizationRule_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = rule.AzureName

	// OperatorSpec
	if rule.OperatorSpec != nil {
		var operatorSpec storage.TopicAuthorizationRuleOperatorSpec
		err := rule.OperatorSpec.AssignProperties_To_TopicAuthorizationRuleOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_TopicAuthorizationRuleOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = rule.OriginalVersion()

	// Owner
	if rule.Owner != nil {
		owner := rule.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Rights
	if rule.Rights != nil {
		rightList := make([]string, len(rule.Rights))
		for rightIndex, rightItem := range rule.Rights {
			// Shadow the loop variable to avoid aliasing
			rightItem := rightItem
			rightList[rightIndex] = string(rightItem)
		}
		destination.Rights = rightList
	} else {
		destination.Rights = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_TopicAuthorizationRule_STATUS populates our TopicAuthorizationRule_Spec from the provided source TopicAuthorizationRule_STATUS
func (rule *TopicAuthorizationRule_Spec) Initialize_From_TopicAuthorizationRule_STATUS(source *TopicAuthorizationRule_STATUS) error {

	// Rights
	if source.Rights != nil {
		rightList := make([]TopicAuthorizationRuleRights_Spec, len(source.Rights))
		for rightIndex, rightItem := range source.Rights {
			// Shadow the loop variable to avoid aliasing
			rightItem := rightItem
			right := genruntime.ToEnum(string(rightItem), topicAuthorizationRuleRights_Spec_Values)
			rightList[rightIndex] = right
		}
		rule.Rights = rightList
	} else {
		rule.Rights = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (rule *TopicAuthorizationRule_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (rule *TopicAuthorizationRule_Spec) SetAzureName(azureName string) { rule.AzureName = azureName }

type TopicAuthorizationRule_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Rights: The rights associated with the rule.
	Rights []TopicAuthorizationRuleRights_STATUS `json:"rights,omitempty"`

	// SystemData: The system meta data relating to this resource.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &TopicAuthorizationRule_STATUS{}

// ConvertStatusFrom populates our TopicAuthorizationRule_STATUS from the provided source
func (rule *TopicAuthorizationRule_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.TopicAuthorizationRule_STATUS)
	if ok {
		// Populate our instance from source
		return rule.AssignProperties_From_TopicAuthorizationRule_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.TopicAuthorizationRule_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = rule.AssignProperties_From_TopicAuthorizationRule_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our TopicAuthorizationRule_STATUS
func (rule *TopicAuthorizationRule_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.TopicAuthorizationRule_STATUS)
	if ok {
		// Populate destination from our instance
		return rule.AssignProperties_To_TopicAuthorizationRule_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.TopicAuthorizationRule_STATUS{}
	err := rule.AssignProperties_To_TopicAuthorizationRule_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &TopicAuthorizationRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *TopicAuthorizationRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.TopicAuthorizationRule_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *TopicAuthorizationRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.TopicAuthorizationRule_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.TopicAuthorizationRule_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		rule.Id = &id
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		rule.Location = &location
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property "Rights":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Rights {
			var temp string
			temp = string(item)
			rule.Rights = append(rule.Rights, TopicAuthorizationRuleRights_STATUS(temp))
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		rule.SystemData = &systemData
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		rule.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_TopicAuthorizationRule_STATUS populates our TopicAuthorizationRule_STATUS from the provided source TopicAuthorizationRule_STATUS
func (rule *TopicAuthorizationRule_STATUS) AssignProperties_From_TopicAuthorizationRule_STATUS(source *storage.TopicAuthorizationRule_STATUS) error {

	// Conditions
	rule.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	rule.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	rule.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Rights
	if source.Rights != nil {
		rightList := make([]TopicAuthorizationRuleRights_STATUS, len(source.Rights))
		for rightIndex, rightItem := range source.Rights {
			// Shadow the loop variable to avoid aliasing
			rightItem := rightItem
			rightList[rightIndex] = genruntime.ToEnum(rightItem, topicAuthorizationRuleRights_STATUS_Values)
		}
		rule.Rights = rightList
	} else {
		rule.Rights = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		rule.SystemData = &systemDatum
	} else {
		rule.SystemData = nil
	}

	// Type
	rule.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_TopicAuthorizationRule_STATUS populates the provided destination TopicAuthorizationRule_STATUS from our TopicAuthorizationRule_STATUS
func (rule *TopicAuthorizationRule_STATUS) AssignProperties_To_TopicAuthorizationRule_STATUS(destination *storage.TopicAuthorizationRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(rule.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(rule.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(rule.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Rights
	if rule.Rights != nil {
		rightList := make([]string, len(rule.Rights))
		for rightIndex, rightItem := range rule.Rights {
			// Shadow the loop variable to avoid aliasing
			rightItem := rightItem
			rightList[rightIndex] = string(rightItem)
		}
		destination.Rights = rightList
	} else {
		destination.Rights = nil
	}

	// SystemData
	if rule.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := rule.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(rule.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type TopicAuthorizationRuleOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_TopicAuthorizationRuleOperatorSpec populates our TopicAuthorizationRuleOperatorSpec from the provided source TopicAuthorizationRuleOperatorSpec
func (operator *TopicAuthorizationRuleOperatorSpec) AssignProperties_From_TopicAuthorizationRuleOperatorSpec(source *storage.TopicAuthorizationRuleOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_TopicAuthorizationRuleOperatorSpec populates the provided destination TopicAuthorizationRuleOperatorSpec from our TopicAuthorizationRuleOperatorSpec
func (operator *TopicAuthorizationRuleOperatorSpec) AssignProperties_To_TopicAuthorizationRuleOperatorSpec(destination *storage.TopicAuthorizationRuleOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Listen","Manage","Send"}
type TopicAuthorizationRuleRights_Spec string

const (
	TopicAuthorizationRuleRights_Spec_Listen = TopicAuthorizationRuleRights_Spec("Listen")
	TopicAuthorizationRuleRights_Spec_Manage = TopicAuthorizationRuleRights_Spec("Manage")
	TopicAuthorizationRuleRights_Spec_Send   = TopicAuthorizationRuleRights_Spec("Send")
)

// Mapping from string to TopicAuthorizationRuleRights_Spec
var topicAuthorizationRuleRights_Spec_Values = map[string]TopicAuthorizationRuleRights_Spec{
	"listen": TopicAuthorizationRuleRights_Spec_Listen,
	"manage": TopicAuthorizationRuleRights_Spec_Manage,
	"send":   TopicAuthorizationRuleRights_Spec_Send,
}

type TopicAuthorizationRuleRights_STATUS string

const (
	TopicAuthorizationRuleRights_STATUS_Listen = TopicAuthorizationRuleRights_STATUS("Listen")
	TopicAuthorizationRuleRights_STATUS_Manage = TopicAuthorizationRuleRights_STATUS("Manage")
	TopicAuthorizationRuleRights_STATUS_Send   = TopicAuthorizationRuleRights_STATUS("Send")
)

// Mapping from string to TopicAuthorizationRuleRights_STATUS
var topicAuthorizationRuleRights_STATUS_Values = map[string]TopicAuthorizationRuleRights_STATUS{
	"listen": TopicAuthorizationRuleRights_STATUS_Listen,
	"manage": TopicAuthorizationRuleRights_STATUS_Manage,
	"send":   TopicAuthorizationRuleRights_STATUS_Send,
}

func init() {
	SchemeBuilder.Register(&TopicAuthorizationRule{}, &TopicAuthorizationRuleList{})
}
