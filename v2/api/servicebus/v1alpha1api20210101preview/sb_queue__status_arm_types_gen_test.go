// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SBQueue_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBQueue_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBQueue_StatusARM, SBQueue_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBQueue_StatusARM runs a test to see if a specific instance of SBQueue_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBQueue_StatusARM(subject SBQueue_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBQueue_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBQueue_StatusARM instances for property testing - lazily instantiated by SBQueue_StatusARMGenerator()
var sbQueue_statusARMGenerator gopter.Gen

// SBQueue_StatusARMGenerator returns a generator of SBQueue_StatusARM instances for property testing.
// We first initialize sbQueue_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SBQueue_StatusARMGenerator() gopter.Gen {
	if sbQueue_statusARMGenerator != nil {
		return sbQueue_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueue_StatusARM(generators)
	sbQueue_statusARMGenerator = gen.Struct(reflect.TypeOf(SBQueue_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueue_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSBQueue_StatusARM(generators)
	sbQueue_statusARMGenerator = gen.Struct(reflect.TypeOf(SBQueue_StatusARM{}), generators)

	return sbQueue_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSBQueue_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBQueue_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSBQueue_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSBQueue_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SBQueueProperties_StatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_SBQueueProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBQueueProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBQueueProperties_StatusARM, SBQueueProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBQueueProperties_StatusARM runs a test to see if a specific instance of SBQueueProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBQueueProperties_StatusARM(subject SBQueueProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBQueueProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBQueueProperties_StatusARM instances for property testing - lazily instantiated by
//SBQueueProperties_StatusARMGenerator()
var sbQueueProperties_statusARMGenerator gopter.Gen

// SBQueueProperties_StatusARMGenerator returns a generator of SBQueueProperties_StatusARM instances for property testing.
// We first initialize sbQueueProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SBQueueProperties_StatusARMGenerator() gopter.Gen {
	if sbQueueProperties_statusARMGenerator != nil {
		return sbQueueProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueueProperties_StatusARM(generators)
	sbQueueProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SBQueueProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueueProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSBQueueProperties_StatusARM(generators)
	sbQueueProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SBQueueProperties_StatusARM{}), generators)

	return sbQueueProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSBQueueProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBQueueProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["AccessedAt"] = gen.PtrOf(gen.AlphaString())
	gens["AutoDeleteOnIdle"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["DeadLetteringOnMessageExpiration"] = gen.PtrOf(gen.Bool())
	gens["DefaultMessageTimeToLive"] = gen.PtrOf(gen.AlphaString())
	gens["DuplicateDetectionHistoryTimeWindow"] = gen.PtrOf(gen.AlphaString())
	gens["EnableBatchedOperations"] = gen.PtrOf(gen.Bool())
	gens["EnableExpress"] = gen.PtrOf(gen.Bool())
	gens["EnablePartitioning"] = gen.PtrOf(gen.Bool())
	gens["ForwardDeadLetteredMessagesTo"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardTo"] = gen.PtrOf(gen.AlphaString())
	gens["LockDuration"] = gen.PtrOf(gen.AlphaString())
	gens["MaxDeliveryCount"] = gen.PtrOf(gen.Int())
	gens["MaxSizeInMegabytes"] = gen.PtrOf(gen.Int())
	gens["MessageCount"] = gen.PtrOf(gen.Int())
	gens["RequiresDuplicateDetection"] = gen.PtrOf(gen.Bool())
	gens["RequiresSession"] = gen.PtrOf(gen.Bool())
	gens["SizeInBytes"] = gen.PtrOf(gen.Int())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSBQueueProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSBQueueProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["CountDetails"] = gen.PtrOf(MessageCountDetails_StatusARMGenerator())
}

func Test_MessageCountDetails_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MessageCountDetails_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMessageCountDetails_StatusARM, MessageCountDetails_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMessageCountDetails_StatusARM runs a test to see if a specific instance of MessageCountDetails_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMessageCountDetails_StatusARM(subject MessageCountDetails_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MessageCountDetails_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MessageCountDetails_StatusARM instances for property testing - lazily instantiated by
//MessageCountDetails_StatusARMGenerator()
var messageCountDetails_statusARMGenerator gopter.Gen

// MessageCountDetails_StatusARMGenerator returns a generator of MessageCountDetails_StatusARM instances for property testing.
func MessageCountDetails_StatusARMGenerator() gopter.Gen {
	if messageCountDetails_statusARMGenerator != nil {
		return messageCountDetails_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMessageCountDetails_StatusARM(generators)
	messageCountDetails_statusARMGenerator = gen.Struct(reflect.TypeOf(MessageCountDetails_StatusARM{}), generators)

	return messageCountDetails_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMessageCountDetails_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMessageCountDetails_StatusARM(gens map[string]gopter.Gen) {
	gens["ActiveMessageCount"] = gen.PtrOf(gen.Int())
	gens["DeadLetterMessageCount"] = gen.PtrOf(gen.Int())
	gens["ScheduledMessageCount"] = gen.PtrOf(gen.Int())
	gens["TransferDeadLetterMessageCount"] = gen.PtrOf(gen.Int())
	gens["TransferMessageCount"] = gen.PtrOf(gen.Int())
}
