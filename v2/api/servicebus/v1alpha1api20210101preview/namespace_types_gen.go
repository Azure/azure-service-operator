// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/servicebus/v1alpha1api20210101previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
type Namespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Namespaces_SPEC    `json:"spec,omitempty"`
	Status            SBNamespace_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Namespace{}

// GetConditions returns the conditions of the resource
func (namespace *Namespace) GetConditions() conditions.Conditions {
	return namespace.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespace *Namespace) SetConditions(conditions conditions.Conditions) {
	namespace.Status.Conditions = conditions
}

var _ conversion.Convertible = &Namespace{}

// ConvertFrom populates our Namespace from the provided hub Namespace
func (namespace *Namespace) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210101previewstorage.Namespace)
	if !ok {
		return fmt.Errorf("expected storage:servicebus/v1alpha1api20210101previewstorage/Namespace but received %T instead", hub)
	}

	return namespace.AssignPropertiesFromNamespace(source)
}

// ConvertTo populates the provided hub Namespace from our Namespace
func (namespace *Namespace) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210101previewstorage.Namespace)
	if !ok {
		return fmt.Errorf("expected storage:servicebus/v1alpha1api20210101previewstorage/Namespace but received %T instead", hub)
	}

	return namespace.AssignPropertiesToNamespace(destination)
}

// +kubebuilder:webhook:path=/mutate-servicebus-azure-com-v1alpha1api20210101preview-namespace,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=servicebus.azure.com,resources=namespaces,verbs=create;update,versions=v1alpha1api20210101preview,name=default.v1alpha1api20210101preview.namespaces.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Namespace{}

// Default applies defaults to the Namespace resource
func (namespace *Namespace) Default() {
	namespace.defaultImpl()
	var temp interface{} = namespace
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (namespace *Namespace) defaultAzureName() {
	if namespace.Spec.AzureName == "" {
		namespace.Spec.AzureName = namespace.Name
	}
}

// defaultImpl applies the code generated defaults to the Namespace resource
func (namespace *Namespace) defaultImpl() { namespace.defaultAzureName() }

var _ genruntime.KubernetesResource = &Namespace{}

// AzureName returns the Azure name of the resource
func (namespace *Namespace) AzureName() string {
	return namespace.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-01-01"
func (namespace Namespace) GetAPIVersion() string {
	return "2021-01-01"
}

// GetResourceKind returns the kind of the resource
func (namespace *Namespace) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (namespace *Namespace) GetSpec() genruntime.ConvertibleSpec {
	return &namespace.Spec
}

// GetStatus returns the status of this resource
func (namespace *Namespace) GetStatus() genruntime.ConvertibleStatus {
	return &namespace.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (namespace *Namespace) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (namespace *Namespace) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SBNamespace_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespace *Namespace) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespace.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  namespace.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespace *Namespace) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SBNamespace_Status); ok {
		namespace.Status = *st
		return nil
	}

	// Convert status to required version
	var st SBNamespace_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespace.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-servicebus-azure-com-v1alpha1api20210101preview-namespace,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=servicebus.azure.com,resources=namespaces,verbs=create;update,versions=v1alpha1api20210101preview,name=validate.v1alpha1api20210101preview.namespaces.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Namespace{}

// ValidateCreate validates the creation of the resource
func (namespace *Namespace) ValidateCreate() error {
	validations := namespace.createValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (namespace *Namespace) ValidateDelete() error {
	validations := namespace.deleteValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (namespace *Namespace) ValidateUpdate(old runtime.Object) error {
	validations := namespace.updateValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (namespace *Namespace) createValidations() []func() error {
	return []func() error{namespace.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (namespace *Namespace) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (namespace *Namespace) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return namespace.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (namespace *Namespace) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&namespace.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNamespace populates our Namespace from the provided source Namespace
func (namespace *Namespace) AssignPropertiesFromNamespace(source *v1alpha1api20210101previewstorage.Namespace) error {

	// ObjectMeta
	namespace.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Namespaces_SPEC
	err := spec.AssignPropertiesFromNamespacesSPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespacesSPEC() to populate field Spec")
	}
	namespace.Spec = spec

	// Status
	var status SBNamespace_Status
	err = status.AssignPropertiesFromSBNamespaceStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSBNamespaceStatus() to populate field Status")
	}
	namespace.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespace populates the provided destination Namespace from our Namespace
func (namespace *Namespace) AssignPropertiesToNamespace(destination *v1alpha1api20210101previewstorage.Namespace) error {

	// ObjectMeta
	destination.ObjectMeta = *namespace.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210101previewstorage.Namespaces_SPEC
	err := namespace.Spec.AssignPropertiesToNamespacesSPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespacesSPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210101previewstorage.SBNamespace_Status
	err = namespace.Status.AssignPropertiesToSBNamespaceStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSBNamespaceStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespace *Namespace) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespace.Spec.OriginalVersion(),
		Kind:    "Namespace",
	}
}

// +kubebuilder:object:root=true
type NamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Namespace `json:"items"`
}

type Namespaces_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Encryption: Properties of BYOK Encryption description
	Encryption *Encryption_Spec `json:"encryption,omitempty"`

	//Identity: Properties of BYOK Identity description
	Identity *Identity_Spec `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	//Location: The Geo-location where the resource lives
	Location string `json:"location"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PrivateEndpointConnections: List of private endpoint connections.
	PrivateEndpointConnections []PrivateEndpointConnection_Spec `json:"privateEndpointConnections,omitempty"`

	//Sku: Properties of SKU
	Sku *SBSku_Spec `json:"sku,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//ZoneRedundant: Enabling this property creates a Premium Service Bus Namespace in
	//regions supported availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ARMTransformer = &Namespaces_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *Namespaces_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result Namespaces_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Identity’:
	if spec.Identity != nil {
		identityARM, err := (*spec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(Identity_SpecARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	result.Location = spec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.Encryption != nil ||
		spec.PrivateEndpointConnections != nil ||
		spec.ZoneRedundant != nil {
		result.Properties = &SBNamespaceProperties_SpecARM{}
	}
	if spec.Encryption != nil {
		encryptionARM, err := (*spec.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(Encryption_SpecARM)
		result.Properties.Encryption = &encryption
	}
	for _, item := range spec.PrivateEndpointConnections {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PrivateEndpointConnections = append(result.Properties.PrivateEndpointConnections, itemARM.(PrivateEndpointConnection_SpecARM))
	}
	if spec.ZoneRedundant != nil {
		zoneRedundant := *spec.ZoneRedundant
		result.Properties.ZoneRedundant = &zoneRedundant
	}

	// Set property ‘Sku’:
	if spec.Sku != nil {
		skuARM, err := (*spec.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(SBSku_SpecARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *Namespaces_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Namespaces_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *Namespaces_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Namespaces_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Namespaces_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Spec
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			spec.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Spec
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		spec.Identity = &identity
	}

	// Set property ‘Location’:
	spec.Location = typedInput.Location

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Spec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			spec.PrivateEndpointConnections = append(spec.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 SBSku_Spec
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		spec.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			spec.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Namespaces_SPEC{}

// ConvertSpecFrom populates our Namespaces_SPEC from the provided source
func (spec *Namespaces_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.Namespaces_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromNamespacesSPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.Namespaces_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromNamespacesSPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Namespaces_SPEC
func (spec *Namespaces_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.Namespaces_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToNamespacesSPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.Namespaces_SPEC{}
	err := spec.AssignPropertiesToNamespacesSPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesSPEC populates our Namespaces_SPEC from the provided source Namespaces_SPEC
func (spec *Namespaces_SPEC) AssignPropertiesFromNamespacesSPEC(source *v1alpha1api20210101previewstorage.Namespaces_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Spec
		err := encryption.AssignPropertiesFromEncryptionSpec(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSpec() to populate field Encryption")
		}
		spec.Encryption = &encryption
	} else {
		spec.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity_Spec
		err := identity.AssignPropertiesFromIdentitySpec(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentitySpec() to populate field Identity")
		}
		spec.Identity = &identity
	} else {
		spec.Identity = nil
	}

	// Location
	spec.Location = genruntime.GetOptionalStringValue(source.Location)

	// Owner
	spec.Owner = source.Owner.Copy()

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Spec, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Spec
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionSpec(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionSpec() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		spec.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		spec.PrivateEndpointConnections = nil
	}

	// Sku
	if source.Sku != nil {
		var sku SBSku_Spec
		err := sku.AssignPropertiesFromSBSkuSpec(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSBSkuSpec() to populate field Sku")
		}
		spec.Sku = &sku
	} else {
		spec.Sku = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		spec.ZoneRedundant = &zoneRedundant
	} else {
		spec.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesSPEC populates the provided destination Namespaces_SPEC from our Namespaces_SPEC
func (spec *Namespaces_SPEC) AssignPropertiesToNamespacesSPEC(destination *v1alpha1api20210101previewstorage.Namespaces_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// Encryption
	if spec.Encryption != nil {
		var encryption v1alpha1api20210101previewstorage.Encryption_Spec
		err := spec.Encryption.AssignPropertiesToEncryptionSpec(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSpec() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if spec.Identity != nil {
		var identity v1alpha1api20210101previewstorage.Identity_Spec
		err := spec.Identity.AssignPropertiesToIdentitySpec(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentitySpec() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	location := spec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// PrivateEndpointConnections
	if spec.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20210101previewstorage.PrivateEndpointConnection_Spec, len(spec.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range spec.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20210101previewstorage.PrivateEndpointConnection_Spec
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionSpec(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionSpec() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// Sku
	if spec.Sku != nil {
		var sku v1alpha1api20210101previewstorage.SBSku_Spec
		err := spec.Sku.AssignPropertiesToSBSkuSpec(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSBSkuSpec() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// ZoneRedundant
	if spec.ZoneRedundant != nil {
		zoneRedundant := *spec.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *Namespaces_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *Namespaces_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type SBNamespace_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreatedAt: The time the namespace was created
	CreatedAt *string `json:"createdAt,omitempty"`

	//Encryption: Properties of BYOK Encryption description
	Encryption *Encryption_Status `json:"encryption,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Identity: Properties of BYOK Identity description
	Identity *Identity_Status `json:"identity,omitempty"`

	//Location: The Geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MetricId: Identifier for Azure Insights metrics
	MetricId *string `json:"metricId,omitempty"`

	//Name: Resource name
	Name *string `json:"name,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections.
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Provisioning state of the namespace.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ServiceBusEndpoint: Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint *string `json:"serviceBusEndpoint,omitempty"`

	//Sku: Properties of SKU
	Sku *SBSku_Status `json:"sku,omitempty"`

	//Status: Status of the namespace.
	Status *string `json:"status,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//UpdatedAt: The time the namespace was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`

	//ZoneRedundant: Enabling this property creates a Premium Service Bus Namespace in
	//regions supported availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SBNamespace_Status{}

// ConvertStatusFrom populates our SBNamespace_Status from the provided source
func (namespace *SBNamespace_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.SBNamespace_Status)
	if ok {
		// Populate our instance from source
		return namespace.AssignPropertiesFromSBNamespaceStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.SBNamespace_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = namespace.AssignPropertiesFromSBNamespaceStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SBNamespace_Status
func (namespace *SBNamespace_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.SBNamespace_Status)
	if ok {
		// Populate destination from our instance
		return namespace.AssignPropertiesToSBNamespaceStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.SBNamespace_Status{}
	err := namespace.AssignPropertiesToSBNamespaceStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SBNamespace_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespace *SBNamespace_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SBNamespace_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespace *SBNamespace_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SBNamespace_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SBNamespace_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			namespace.CreatedAt = &createdAt
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			namespace.Encryption = &encryption
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		namespace.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		namespace.Identity = &identity
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespace.Location = &location
	}

	// Set property ‘MetricId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MetricId != nil {
			metricId := *typedInput.Properties.MetricId
			namespace.MetricId = &metricId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		namespace.Name = &name
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			namespace.PrivateEndpointConnections = append(namespace.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			namespace.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ServiceBusEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceBusEndpoint != nil {
			serviceBusEndpoint := *typedInput.Properties.ServiceBusEndpoint
			namespace.ServiceBusEndpoint = &serviceBusEndpoint
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 SBSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		namespace.Sku = &sku
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			namespace.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		namespace.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespace.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			namespace.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		namespace.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			namespace.UpdatedAt = &updatedAt
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			namespace.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromSBNamespaceStatus populates our SBNamespace_Status from the provided source SBNamespace_Status
func (namespace *SBNamespace_Status) AssignPropertiesFromSBNamespaceStatus(source *v1alpha1api20210101previewstorage.SBNamespace_Status) error {

	// Conditions
	namespace.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedAt
	namespace.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryptionStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionStatus() to populate field Encryption")
		}
		namespace.Encryption = &encryption
	} else {
		namespace.Encryption = nil
	}

	// Id
	namespace.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity Identity_Status
		err := identity.AssignPropertiesFromIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentityStatus() to populate field Identity")
		}
		namespace.Identity = &identity
	} else {
		namespace.Identity = nil
	}

	// Location
	namespace.Location = genruntime.ClonePointerToString(source.Location)

	// MetricId
	namespace.MetricId = genruntime.ClonePointerToString(source.MetricId)

	// Name
	namespace.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		namespace.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		namespace.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	namespace.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ServiceBusEndpoint
	namespace.ServiceBusEndpoint = genruntime.ClonePointerToString(source.ServiceBusEndpoint)

	// Sku
	if source.Sku != nil {
		var sku SBSku_Status
		err := sku.AssignPropertiesFromSBSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSBSkuStatus() to populate field Sku")
		}
		namespace.Sku = &sku
	} else {
		namespace.Sku = nil
	}

	// Status
	namespace.Status = genruntime.ClonePointerToString(source.Status)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		namespace.SystemData = &systemDatum
	} else {
		namespace.SystemData = nil
	}

	// Tags
	namespace.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	namespace.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	namespace.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		namespace.ZoneRedundant = &zoneRedundant
	} else {
		namespace.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSBNamespaceStatus populates the provided destination SBNamespace_Status from our SBNamespace_Status
func (namespace *SBNamespace_Status) AssignPropertiesToSBNamespaceStatus(destination *v1alpha1api20210101previewstorage.SBNamespace_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(namespace.Conditions)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(namespace.CreatedAt)

	// Encryption
	if namespace.Encryption != nil {
		var encryption v1alpha1api20210101previewstorage.Encryption_Status
		err := namespace.Encryption.AssignPropertiesToEncryptionStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(namespace.Id)

	// Identity
	if namespace.Identity != nil {
		var identity v1alpha1api20210101previewstorage.Identity_Status
		err := namespace.Identity.AssignPropertiesToIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespace.Location)

	// MetricId
	destination.MetricId = genruntime.ClonePointerToString(namespace.MetricId)

	// Name
	destination.Name = genruntime.ClonePointerToString(namespace.Name)

	// PrivateEndpointConnections
	if namespace.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20210101previewstorage.PrivateEndpointConnection_Status_SubResourceEmbedded, len(namespace.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range namespace.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20210101previewstorage.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(namespace.ProvisioningState)

	// ServiceBusEndpoint
	destination.ServiceBusEndpoint = genruntime.ClonePointerToString(namespace.ServiceBusEndpoint)

	// Sku
	if namespace.Sku != nil {
		var sku v1alpha1api20210101previewstorage.SBSku_Status
		err := namespace.Sku.AssignPropertiesToSBSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSBSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Status
	destination.Status = genruntime.ClonePointerToString(namespace.Status)

	// SystemData
	if namespace.SystemData != nil {
		var systemDatum v1alpha1api20210101previewstorage.SystemData_Status
		err := namespace.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespace.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(namespace.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(namespace.UpdatedAt)

	// ZoneRedundant
	if namespace.ZoneRedundant != nil {
		zoneRedundant := *namespace.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2021-01-01"}
type TheVersion string

const TheVersionFixedApiVersion = TheVersion("2021-01-01")

type Encryption_Spec struct {
	//KeySource: Enumerates the possible value of keySource for Encryption
	KeySource *EncryptionSpecKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Properties of KeyVault
	KeyVaultProperties []KeyVaultProperties_Spec `json:"keyVaultProperties,omitempty"`

	//RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double
	//Encryption)
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	var result Encryption_SpecARM

	// Set property ‘KeySource’:
	if encryption.KeySource != nil {
		keySource := *encryption.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range encryption.KeyVaultProperties {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.KeyVaultProperties = append(result.KeyVaultProperties, itemARM.(KeyVaultProperties_SpecARM))
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		result.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_SpecARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range typedInput.KeyVaultProperties {
		var item1 KeyVaultProperties_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		encryption.KeyVaultProperties = append(encryption.KeyVaultProperties, item1)
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSpec populates our Encryption_Spec from the provided source Encryption_Spec
func (encryption *Encryption_Spec) AssignPropertiesFromEncryptionSpec(source *v1alpha1api20210101previewstorage.Encryption_Spec) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionSpecKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]KeyVaultProperties_Spec, len(source.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range source.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty KeyVaultProperties_Spec
			err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesSpec(&keyVaultPropertyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesSpec() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		encryption.KeyVaultProperties = keyVaultPropertyList
	} else {
		encryption.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionSpec populates the provided destination Encryption_Spec from our Encryption_Spec
func (encryption *Encryption_Spec) AssignPropertiesToEncryptionSpec(destination *v1alpha1api20210101previewstorage.Encryption_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if encryption.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]v1alpha1api20210101previewstorage.KeyVaultProperties_Spec, len(encryption.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range encryption.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty v1alpha1api20210101previewstorage.KeyVaultProperties_Spec
			err := keyVaultPropertyItem.AssignPropertiesToKeyVaultPropertiesSpec(&keyVaultProperty)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesSpec() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		destination.KeyVaultProperties = keyVaultPropertyList
	} else {
		destination.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Encryption_Status struct {
	//KeySource: Enumerates the possible value of keySource for Encryption
	KeySource *EncryptionStatusKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Properties of KeyVault
	KeyVaultProperties []KeyVaultProperties_Status `json:"keyVaultProperties,omitempty"`

	//RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double
	//Encryption)
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range typedInput.KeyVaultProperties {
		var item1 KeyVaultProperties_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		encryption.KeyVaultProperties = append(encryption.KeyVaultProperties, item1)
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionStatus populates our Encryption_Status from the provided source Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesFromEncryptionStatus(source *v1alpha1api20210101previewstorage.Encryption_Status) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionStatusKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]KeyVaultProperties_Status, len(source.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range source.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty KeyVaultProperties_Status
			err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesStatus(&keyVaultPropertyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		encryption.KeyVaultProperties = keyVaultPropertyList
	} else {
		encryption.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionStatus populates the provided destination Encryption_Status from our Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesToEncryptionStatus(destination *v1alpha1api20210101previewstorage.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if encryption.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]v1alpha1api20210101previewstorage.KeyVaultProperties_Status, len(encryption.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range encryption.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty v1alpha1api20210101previewstorage.KeyVaultProperties_Status
			err := keyVaultPropertyItem.AssignPropertiesToKeyVaultPropertiesStatus(&keyVaultProperty)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		destination.KeyVaultProperties = keyVaultPropertyList
	} else {
		destination.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Identity_Spec struct {
	//Type: Type of managed service identity.
	Type *IdentitySpecType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Identity_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result Identity_SpecARM

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_SpecARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentitySpec populates our Identity_Spec from the provided source Identity_Spec
func (identity *Identity_Spec) AssignPropertiesFromIdentitySpec(source *v1alpha1api20210101previewstorage.Identity_Spec) error {

	// Type
	if source.Type != nil {
		typeVar := IdentitySpecType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentitySpec populates the provided destination Identity_Spec from our Identity_Spec
func (identity *Identity_Spec) AssignPropertiesToIdentitySpec(destination *v1alpha1api20210101previewstorage.Identity_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Identity_Status struct {
	//PrincipalId: ObjectId from the KeyVault
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: TenantId from the KeyVault
	TenantId *string `json:"tenantId,omitempty"`

	//Type: Type of managed service identity.
	Type *IdentityStatusType `json:"type,omitempty"`

	//UserAssignedIdentities: Properties for User Assigned Identities
	UserAssignedIdentities map[string]DictionaryValue_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]DictionaryValue_Status)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 DictionaryValue_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentityStatus populates our Identity_Status from the provided source Identity_Status
func (identity *Identity_Status) AssignPropertiesFromIdentityStatus(source *v1alpha1api20210101previewstorage.Identity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentityStatusType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]DictionaryValue_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity DictionaryValue_Status
			err := userAssignedIdentity.AssignPropertiesFromDictionaryValueStatus(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDictionaryValueStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentityStatus populates the provided destination Identity_Status from our Identity_Status
func (identity *Identity_Status) AssignPropertiesToIdentityStatus(destination *v1alpha1api20210101previewstorage.Identity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20210101previewstorage.DictionaryValue_Status, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20210101previewstorage.DictionaryValue_Status
			err := userAssignedIdentityValue.AssignPropertiesToDictionaryValueStatus(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDictionaryValueStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Spec struct {
	//PrivateEndpoint: The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpoint_Spec `json:"privateEndpoint,omitempty"`

	//PrivateLinkServiceConnectionState: Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionState_Spec `json:"privateLinkServiceConnectionState,omitempty"`

	//ProvisioningState: Provisioning state of the Private Endpoint Connection.
	ProvisioningState *PrivateEndpointConnectionPropertiesSpecProvisioningState `json:"provisioningState,omitempty"`
}

var _ genruntime.ARMTransformer = &PrivateEndpointConnection_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (connection *PrivateEndpointConnection_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if connection == nil {
		return nil, nil
	}
	var result PrivateEndpointConnection_SpecARM

	// Set property ‘Properties’:
	if connection.PrivateEndpoint != nil ||
		connection.PrivateLinkServiceConnectionState != nil ||
		connection.ProvisioningState != nil {
		result.Properties = &PrivateEndpointConnectionProperties_SpecARM{}
	}
	if connection.PrivateEndpoint != nil {
		privateEndpointARM, err := (*connection.PrivateEndpoint).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		privateEndpoint := privateEndpointARM.(PrivateEndpoint_SpecARM)
		result.Properties.PrivateEndpoint = &privateEndpoint
	}
	if connection.PrivateLinkServiceConnectionState != nil {
		privateLinkServiceConnectionStateARM, err := (*connection.PrivateLinkServiceConnectionState).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		privateLinkServiceConnectionState := privateLinkServiceConnectionStateARM.(ConnectionState_SpecARM)
		result.Properties.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	}
	if connection.ProvisioningState != nil {
		provisioningState := *connection.ProvisioningState
		result.Properties.ProvisioningState = &provisioningState
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (connection *PrivateEndpointConnection_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (connection *PrivateEndpointConnection_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_SpecARM, got %T", armInput)
	}

	// Set property ‘PrivateEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpoint != nil {
			var privateEndpoint1 PrivateEndpoint_Spec
			err := privateEndpoint1.PopulateFromARM(owner, *typedInput.Properties.PrivateEndpoint)
			if err != nil {
				return err
			}
			privateEndpoint := privateEndpoint1
			connection.PrivateEndpoint = &privateEndpoint
		}
	}

	// Set property ‘PrivateLinkServiceConnectionState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceConnectionState != nil {
			var privateLinkServiceConnectionState1 ConnectionState_Spec
			err := privateLinkServiceConnectionState1.PopulateFromARM(owner, *typedInput.Properties.PrivateLinkServiceConnectionState)
			if err != nil {
				return err
			}
			privateLinkServiceConnectionState := privateLinkServiceConnectionState1
			connection.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			connection.ProvisioningState = &provisioningState
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionSpec populates our PrivateEndpointConnection_Spec from the provided source PrivateEndpointConnection_Spec
func (connection *PrivateEndpointConnection_Spec) AssignPropertiesFromPrivateEndpointConnectionSpec(source *v1alpha1api20210101previewstorage.PrivateEndpointConnection_Spec) error {

	// PrivateEndpoint
	if source.PrivateEndpoint != nil {
		var privateEndpoint PrivateEndpoint_Spec
		err := privateEndpoint.AssignPropertiesFromPrivateEndpointSpec(source.PrivateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointSpec() to populate field PrivateEndpoint")
		}
		connection.PrivateEndpoint = &privateEndpoint
	} else {
		connection.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if source.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState ConnectionState_Spec
		err := privateLinkServiceConnectionState.AssignPropertiesFromConnectionStateSpec(source.PrivateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromConnectionStateSpec() to populate field PrivateLinkServiceConnectionState")
		}
		connection.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		connection.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := PrivateEndpointConnectionPropertiesSpecProvisioningState(*source.ProvisioningState)
		connection.ProvisioningState = &provisioningState
	} else {
		connection.ProvisioningState = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionSpec populates the provided destination PrivateEndpointConnection_Spec from our PrivateEndpointConnection_Spec
func (connection *PrivateEndpointConnection_Spec) AssignPropertiesToPrivateEndpointConnectionSpec(destination *v1alpha1api20210101previewstorage.PrivateEndpointConnection_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrivateEndpoint
	if connection.PrivateEndpoint != nil {
		var privateEndpoint v1alpha1api20210101previewstorage.PrivateEndpoint_Spec
		err := connection.PrivateEndpoint.AssignPropertiesToPrivateEndpointSpec(&privateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointSpec() to populate field PrivateEndpoint")
		}
		destination.PrivateEndpoint = &privateEndpoint
	} else {
		destination.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if connection.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState v1alpha1api20210101previewstorage.ConnectionState_Spec
		err := connection.PrivateLinkServiceConnectionState.AssignPropertiesToConnectionStateSpec(&privateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToConnectionStateSpec() to populate field PrivateLinkServiceConnectionState")
		}
		destination.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		destination.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if connection.ProvisioningState != nil {
		provisioningState := string(*connection.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		embedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *v1alpha1api20210101previewstorage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		embedded.SystemData = &systemDatum
	} else {
		embedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *v1alpha1api20210101previewstorage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// SystemData
	if embedded.SystemData != nil {
		var systemDatum v1alpha1api20210101previewstorage.SystemData_Status
		err := embedded.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SBSku_Spec struct {
	//Capacity: The specified messaging units for the tier. For Premium tier, capacity
	//are 1,2 and 4.
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of this SKU.
	Name SBSkuSpecName `json:"name"`

	//Tier: The billing tier of this particular SKU.
	Tier *SBSkuSpecTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &SBSku_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sbSku *SBSku_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sbSku == nil {
		return nil, nil
	}
	var result SBSku_SpecARM

	// Set property ‘Capacity’:
	if sbSku.Capacity != nil {
		capacity := *sbSku.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Name’:
	result.Name = sbSku.Name

	// Set property ‘Tier’:
	if sbSku.Tier != nil {
		tier := *sbSku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sbSku *SBSku_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SBSku_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sbSku *SBSku_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SBSku_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SBSku_SpecARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sbSku.Capacity = &capacity
	}

	// Set property ‘Name’:
	sbSku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sbSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSBSkuSpec populates our SBSku_Spec from the provided source SBSku_Spec
func (sbSku *SBSku_Spec) AssignPropertiesFromSBSkuSpec(source *v1alpha1api20210101previewstorage.SBSku_Spec) error {

	// Capacity
	sbSku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		sbSku.Name = SBSkuSpecName(*source.Name)
	} else {
		sbSku.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := SBSkuSpecTier(*source.Tier)
		sbSku.Tier = &tier
	} else {
		sbSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSBSkuSpec populates the provided destination SBSku_Spec from our SBSku_Spec
func (sbSku *SBSku_Spec) AssignPropertiesToSBSkuSpec(destination *v1alpha1api20210101previewstorage.SBSku_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sbSku.Capacity)

	// Name
	name := string(sbSku.Name)
	destination.Name = &name

	// Tier
	if sbSku.Tier != nil {
		tier := string(*sbSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SBSku_Status struct {
	//Capacity: The specified messaging units for the tier. For Premium tier, capacity
	//are 1,2 and 4.
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of this SKU.
	Name SBSkuStatusName `json:"name"`

	//Tier: The billing tier of this particular SKU.
	Tier *SBSkuStatusTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &SBSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sbSku *SBSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SBSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sbSku *SBSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SBSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SBSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sbSku.Capacity = &capacity
	}

	// Set property ‘Name’:
	sbSku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sbSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSBSkuStatus populates our SBSku_Status from the provided source SBSku_Status
func (sbSku *SBSku_Status) AssignPropertiesFromSBSkuStatus(source *v1alpha1api20210101previewstorage.SBSku_Status) error {

	// Capacity
	sbSku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		sbSku.Name = SBSkuStatusName(*source.Name)
	} else {
		sbSku.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := SBSkuStatusTier(*source.Tier)
		sbSku.Tier = &tier
	} else {
		sbSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSBSkuStatus populates the provided destination SBSku_Status from our SBSku_Status
func (sbSku *SBSku_Status) AssignPropertiesToSBSkuStatus(destination *v1alpha1api20210101previewstorage.SBSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sbSku.Capacity)

	// Name
	name := string(sbSku.Name)
	destination.Name = &name

	// Tier
	if sbSku.Tier != nil {
		tier := string(*sbSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	//CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	//CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemDataStatusCreatedByType `json:"createdByType,omitempty"`

	//LastModifiedAt: The type of identity that last modified the resource.
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	//LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemDataStatusLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (data *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *v1alpha1api20210101previewstorage.SystemData_Status) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataStatusCreatedByType(*source.CreatedByType)
		data.CreatedByType = &createdByType
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataStatusLastModifiedByType(*source.LastModifiedByType)
		data.LastModifiedByType = &lastModifiedByType
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (data *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *v1alpha1api20210101previewstorage.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ConnectionState_Spec struct {
	//Description: Description of the connection state.
	Description *string `json:"description,omitempty"`

	//Status: Status of the connection.
	Status *ConnectionStateSpecStatus `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &ConnectionState_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (state *ConnectionState_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if state == nil {
		return nil, nil
	}
	var result ConnectionState_SpecARM

	// Set property ‘Description’:
	if state.Description != nil {
		description := *state.Description
		result.Description = &description
	}

	// Set property ‘Status’:
	if state.Status != nil {
		status := *state.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (state *ConnectionState_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConnectionState_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (state *ConnectionState_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConnectionState_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConnectionState_SpecARM, got %T", armInput)
	}

	// Set property ‘Description’:
	if typedInput.Description != nil {
		description := *typedInput.Description
		state.Description = &description
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		state.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromConnectionStateSpec populates our ConnectionState_Spec from the provided source ConnectionState_Spec
func (state *ConnectionState_Spec) AssignPropertiesFromConnectionStateSpec(source *v1alpha1api20210101previewstorage.ConnectionState_Spec) error {

	// Description
	state.Description = genruntime.ClonePointerToString(source.Description)

	// Status
	if source.Status != nil {
		status := ConnectionStateSpecStatus(*source.Status)
		state.Status = &status
	} else {
		state.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConnectionStateSpec populates the provided destination ConnectionState_Spec from our ConnectionState_Spec
func (state *ConnectionState_Spec) AssignPropertiesToConnectionStateSpec(destination *v1alpha1api20210101previewstorage.ConnectionState_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Description
	destination.Description = genruntime.ClonePointerToString(state.Description)

	// Status
	if state.Status != nil {
		status := string(*state.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DictionaryValue_Status struct {
	//ClientId: Client Id of user assigned identity
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: Principal Id of user assigned identity
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &DictionaryValue_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (value *DictionaryValue_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DictionaryValue_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (value *DictionaryValue_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DictionaryValue_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DictionaryValue_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		value.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		value.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromDictionaryValueStatus populates our DictionaryValue_Status from the provided source DictionaryValue_Status
func (value *DictionaryValue_Status) AssignPropertiesFromDictionaryValueStatus(source *v1alpha1api20210101previewstorage.DictionaryValue_Status) error {

	// ClientId
	value.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	value.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToDictionaryValueStatus populates the provided destination DictionaryValue_Status from our DictionaryValue_Status
func (value *DictionaryValue_Status) AssignPropertiesToDictionaryValueStatus(destination *v1alpha1api20210101previewstorage.DictionaryValue_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(value.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(value.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.KeyVault"}
type EncryptionSpecKeySource string

const EncryptionSpecKeySourceMicrosoftKeyVault = EncryptionSpecKeySource("Microsoft.KeyVault")

type EncryptionStatusKeySource string

const EncryptionStatusKeySourceMicrosoftKeyVault = EncryptionStatusKeySource("Microsoft.KeyVault")

type KeyVaultProperties_Spec struct {
	Identity *UserAssignedIdentityProperties_Spec `json:"identity,omitempty"`

	//KeyName: Name of the Key from KeyVault
	KeyName *string `json:"keyName,omitempty"`

	//KeyVaultUri: Uri of KeyVault
	KeyVaultUri *string `json:"keyVaultUri,omitempty"`

	//KeyVersion: Version of KeyVault
	KeyVersion *string `json:"keyVersion,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result KeyVaultProperties_SpecARM

	// Set property ‘Identity’:
	if properties.Identity != nil {
		identityARM, err := (*properties.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(UserAssignedIdentityProperties_SpecARM)
		result.Identity = &identity
	}

	// Set property ‘KeyName’:
	if properties.KeyName != nil {
		keyName := *properties.KeyName
		result.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if properties.KeyVaultUri != nil {
		keyVaultUri := *properties.KeyVaultUri
		result.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if properties.KeyVersion != nil {
		keyVersion := *properties.KeyVersion
		result.KeyVersion = &keyVersion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_SpecARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 UserAssignedIdentityProperties_Spec
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		properties.Identity = &identity
	}

	// Set property ‘KeyName’:
	if typedInput.KeyName != nil {
		keyName := *typedInput.KeyName
		properties.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if typedInput.KeyVaultUri != nil {
		keyVaultUri := *typedInput.KeyVaultUri
		properties.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if typedInput.KeyVersion != nil {
		keyVersion := *typedInput.KeyVersion
		properties.KeyVersion = &keyVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesSpec populates our KeyVaultProperties_Spec from the provided source KeyVaultProperties_Spec
func (properties *KeyVaultProperties_Spec) AssignPropertiesFromKeyVaultPropertiesSpec(source *v1alpha1api20210101previewstorage.KeyVaultProperties_Spec) error {

	// Identity
	if source.Identity != nil {
		var identity UserAssignedIdentityProperties_Spec
		err := identity.AssignPropertiesFromUserAssignedIdentityPropertiesSpec(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityPropertiesSpec() to populate field Identity")
		}
		properties.Identity = &identity
	} else {
		properties.Identity = nil
	}

	// KeyName
	properties.KeyName = genruntime.ClonePointerToString(source.KeyName)

	// KeyVaultUri
	properties.KeyVaultUri = genruntime.ClonePointerToString(source.KeyVaultUri)

	// KeyVersion
	properties.KeyVersion = genruntime.ClonePointerToString(source.KeyVersion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesSpec populates the provided destination KeyVaultProperties_Spec from our KeyVaultProperties_Spec
func (properties *KeyVaultProperties_Spec) AssignPropertiesToKeyVaultPropertiesSpec(destination *v1alpha1api20210101previewstorage.KeyVaultProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if properties.Identity != nil {
		var identity v1alpha1api20210101previewstorage.UserAssignedIdentityProperties_Spec
		err := properties.Identity.AssignPropertiesToUserAssignedIdentityPropertiesSpec(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityPropertiesSpec() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyName
	destination.KeyName = genruntime.ClonePointerToString(properties.KeyName)

	// KeyVaultUri
	destination.KeyVaultUri = genruntime.ClonePointerToString(properties.KeyVaultUri)

	// KeyVersion
	destination.KeyVersion = genruntime.ClonePointerToString(properties.KeyVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_Status struct {
	Identity *UserAssignedIdentityProperties_Status `json:"identity,omitempty"`

	//KeyName: Name of the Key from KeyVault
	KeyName *string `json:"keyName,omitempty"`

	//KeyVaultUri: Uri of KeyVault
	KeyVaultUri *string `json:"keyVaultUri,omitempty"`

	//KeyVersion: Version of KeyVault
	KeyVersion *string `json:"keyVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 UserAssignedIdentityProperties_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		properties.Identity = &identity
	}

	// Set property ‘KeyName’:
	if typedInput.KeyName != nil {
		keyName := *typedInput.KeyName
		properties.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if typedInput.KeyVaultUri != nil {
		keyVaultUri := *typedInput.KeyVaultUri
		properties.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if typedInput.KeyVersion != nil {
		keyVersion := *typedInput.KeyVersion
		properties.KeyVersion = &keyVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *v1alpha1api20210101previewstorage.KeyVaultProperties_Status) error {

	// Identity
	if source.Identity != nil {
		var identity UserAssignedIdentityProperties_Status
		err := identity.AssignPropertiesFromUserAssignedIdentityPropertiesStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityPropertiesStatus() to populate field Identity")
		}
		properties.Identity = &identity
	} else {
		properties.Identity = nil
	}

	// KeyName
	properties.KeyName = genruntime.ClonePointerToString(source.KeyName)

	// KeyVaultUri
	properties.KeyVaultUri = genruntime.ClonePointerToString(source.KeyVaultUri)

	// KeyVersion
	properties.KeyVersion = genruntime.ClonePointerToString(source.KeyVersion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *v1alpha1api20210101previewstorage.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if properties.Identity != nil {
		var identity v1alpha1api20210101previewstorage.UserAssignedIdentityProperties_Status
		err := properties.Identity.AssignPropertiesToUserAssignedIdentityPropertiesStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityPropertiesStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyName
	destination.KeyName = genruntime.ClonePointerToString(properties.KeyName)

	// KeyVaultUri
	destination.KeyVaultUri = genruntime.ClonePointerToString(properties.KeyVaultUri)

	// KeyVersion
	destination.KeyVersion = genruntime.ClonePointerToString(properties.KeyVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Canceled","Creating","Deleting","Failed","Succeeded","Updating"}
type PrivateEndpointConnectionPropertiesSpecProvisioningState string

const (
	PrivateEndpointConnectionPropertiesSpecProvisioningStateCanceled  = PrivateEndpointConnectionPropertiesSpecProvisioningState("Canceled")
	PrivateEndpointConnectionPropertiesSpecProvisioningStateCreating  = PrivateEndpointConnectionPropertiesSpecProvisioningState("Creating")
	PrivateEndpointConnectionPropertiesSpecProvisioningStateDeleting  = PrivateEndpointConnectionPropertiesSpecProvisioningState("Deleting")
	PrivateEndpointConnectionPropertiesSpecProvisioningStateFailed    = PrivateEndpointConnectionPropertiesSpecProvisioningState("Failed")
	PrivateEndpointConnectionPropertiesSpecProvisioningStateSucceeded = PrivateEndpointConnectionPropertiesSpecProvisioningState("Succeeded")
	PrivateEndpointConnectionPropertiesSpecProvisioningStateUpdating  = PrivateEndpointConnectionPropertiesSpecProvisioningState("Updating")
)

type PrivateEndpoint_Spec struct {
	//Reference: The ARM identifier for Private Endpoint.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &PrivateEndpoint_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (endpoint *PrivateEndpoint_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if endpoint == nil {
		return nil, nil
	}
	var result PrivateEndpoint_SpecARM

	// Set property ‘Id’:
	if endpoint.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*endpoint.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoint *PrivateEndpoint_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpoint_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoint *PrivateEndpoint_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(PrivateEndpoint_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpoint_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointSpec populates our PrivateEndpoint_Spec from the provided source PrivateEndpoint_Spec
func (endpoint *PrivateEndpoint_Spec) AssignPropertiesFromPrivateEndpointSpec(source *v1alpha1api20210101previewstorage.PrivateEndpoint_Spec) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		endpoint.Reference = &reference
	} else {
		endpoint.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointSpec populates the provided destination PrivateEndpoint_Spec from our PrivateEndpoint_Spec
func (endpoint *PrivateEndpoint_Spec) AssignPropertiesToPrivateEndpointSpec(destination *v1alpha1api20210101previewstorage.PrivateEndpoint_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if endpoint.Reference != nil {
		reference := endpoint.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Approved","Disconnected","Pending","Rejected"}
type ConnectionStateSpecStatus string

const (
	ConnectionStateSpecStatusApproved     = ConnectionStateSpecStatus("Approved")
	ConnectionStateSpecStatusDisconnected = ConnectionStateSpecStatus("Disconnected")
	ConnectionStateSpecStatusPending      = ConnectionStateSpecStatus("Pending")
	ConnectionStateSpecStatusRejected     = ConnectionStateSpecStatus("Rejected")
)

type UserAssignedIdentityProperties_Spec struct {
	//UserAssignedIdentityReference: ARM ID of user Identity selected for encryption
	UserAssignedIdentityReference *genruntime.ResourceReference `armReference:"UserAssignedIdentity" json:"userAssignedIdentityReference,omitempty"`
}

var _ genruntime.ARMTransformer = &UserAssignedIdentityProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *UserAssignedIdentityProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result UserAssignedIdentityProperties_SpecARM

	// Set property ‘UserAssignedIdentity’:
	if properties.UserAssignedIdentityReference != nil {
		userAssignedIdentityReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.UserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		userAssignedIdentityReference := userAssignedIdentityReferenceARMID
		result.UserAssignedIdentity = &userAssignedIdentityReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserAssignedIdentityProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserAssignedIdentityProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(UserAssignedIdentityProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityProperties_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘UserAssignedIdentityReference’

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityPropertiesSpec populates our UserAssignedIdentityProperties_Spec from the provided source UserAssignedIdentityProperties_Spec
func (properties *UserAssignedIdentityProperties_Spec) AssignPropertiesFromUserAssignedIdentityPropertiesSpec(source *v1alpha1api20210101previewstorage.UserAssignedIdentityProperties_Spec) error {

	// UserAssignedIdentityReference
	if source.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := source.UserAssignedIdentityReference.Copy()
		properties.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		properties.UserAssignedIdentityReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityPropertiesSpec populates the provided destination UserAssignedIdentityProperties_Spec from our UserAssignedIdentityProperties_Spec
func (properties *UserAssignedIdentityProperties_Spec) AssignPropertiesToUserAssignedIdentityPropertiesSpec(destination *v1alpha1api20210101previewstorage.UserAssignedIdentityProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentityReference
	if properties.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := properties.UserAssignedIdentityReference.Copy()
		destination.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		destination.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UserAssignedIdentityProperties_Status struct {
	//UserAssignedIdentity: ARM ID of user Identity selected for encryption
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentityProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserAssignedIdentityProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserAssignedIdentityProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentityProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		properties.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityPropertiesStatus populates our UserAssignedIdentityProperties_Status from the provided source UserAssignedIdentityProperties_Status
func (properties *UserAssignedIdentityProperties_Status) AssignPropertiesFromUserAssignedIdentityPropertiesStatus(source *v1alpha1api20210101previewstorage.UserAssignedIdentityProperties_Status) error {

	// UserAssignedIdentity
	properties.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityPropertiesStatus populates the provided destination UserAssignedIdentityProperties_Status from our UserAssignedIdentityProperties_Status
func (properties *UserAssignedIdentityProperties_Status) AssignPropertiesToUserAssignedIdentityPropertiesStatus(destination *v1alpha1api20210101previewstorage.UserAssignedIdentityProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(properties.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Namespace{}, &NamespaceList{})
}
