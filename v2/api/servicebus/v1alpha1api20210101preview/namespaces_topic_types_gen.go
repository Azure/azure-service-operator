// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/servicebus/v1alpha1api20210101previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /servicebus/resource-manager/Microsoft.ServiceBus/preview/2021-01-01-preview/topics.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}
type NamespacesTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespacesTopics_SPEC `json:"spec,omitempty"`
	Status            SBTopic_Status        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NamespacesTopic{}

// GetConditions returns the conditions of the resource
func (topic *NamespacesTopic) GetConditions() conditions.Conditions {
	return topic.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (topic *NamespacesTopic) SetConditions(conditions conditions.Conditions) {
	topic.Status.Conditions = conditions
}

var _ conversion.Convertible = &NamespacesTopic{}

// ConvertFrom populates our NamespacesTopic from the provided hub NamespacesTopic
func (topic *NamespacesTopic) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210101previewstorage.NamespacesTopic)
	if !ok {
		return fmt.Errorf("expected storage:servicebus/v1alpha1api20210101previewstorage/NamespacesTopic but received %T instead", hub)
	}

	return topic.AssignPropertiesFromNamespacesTopic(source)
}

// ConvertTo populates the provided hub NamespacesTopic from our NamespacesTopic
func (topic *NamespacesTopic) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210101previewstorage.NamespacesTopic)
	if !ok {
		return fmt.Errorf("expected storage:servicebus/v1alpha1api20210101previewstorage/NamespacesTopic but received %T instead", hub)
	}

	return topic.AssignPropertiesToNamespacesTopic(destination)
}

// +kubebuilder:webhook:path=/mutate-servicebus-azure-com-v1alpha1api20210101preview-namespacestopic,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=servicebus.azure.com,resources=namespacestopics,verbs=create;update,versions=v1alpha1api20210101preview,name=default.v1alpha1api20210101preview.namespacestopics.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &NamespacesTopic{}

// Default applies defaults to the NamespacesTopic resource
func (topic *NamespacesTopic) Default() {
	topic.defaultImpl()
	var temp interface{} = topic
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (topic *NamespacesTopic) defaultAzureName() {
	if topic.Spec.AzureName == "" {
		topic.Spec.AzureName = topic.Name
	}
}

// defaultImpl applies the code generated defaults to the NamespacesTopic resource
func (topic *NamespacesTopic) defaultImpl() { topic.defaultAzureName() }

var _ genruntime.KubernetesResource = &NamespacesTopic{}

// AzureName returns the Azure name of the resource
func (topic *NamespacesTopic) AzureName() string {
	return topic.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-01-01"
func (topic NamespacesTopic) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (topic *NamespacesTopic) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (topic *NamespacesTopic) GetSpec() genruntime.ConvertibleSpec {
	return &topic.Spec
}

// GetStatus returns the status of this resource
func (topic *NamespacesTopic) GetStatus() genruntime.ConvertibleStatus {
	return &topic.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (topic *NamespacesTopic) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (topic *NamespacesTopic) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SBTopic_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (topic *NamespacesTopic) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(topic.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  topic.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (topic *NamespacesTopic) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SBTopic_Status); ok {
		topic.Status = *st
		return nil
	}

	// Convert status to required version
	var st SBTopic_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	topic.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-servicebus-azure-com-v1alpha1api20210101preview-namespacestopic,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=servicebus.azure.com,resources=namespacestopics,verbs=create;update,versions=v1alpha1api20210101preview,name=validate.v1alpha1api20210101preview.namespacestopics.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &NamespacesTopic{}

// ValidateCreate validates the creation of the resource
func (topic *NamespacesTopic) ValidateCreate() error {
	validations := topic.createValidations()
	var temp interface{} = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (topic *NamespacesTopic) ValidateDelete() error {
	validations := topic.deleteValidations()
	var temp interface{} = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (topic *NamespacesTopic) ValidateUpdate(old runtime.Object) error {
	validations := topic.updateValidations()
	var temp interface{} = topic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (topic *NamespacesTopic) createValidations() []func() error {
	return []func() error{topic.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (topic *NamespacesTopic) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (topic *NamespacesTopic) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return topic.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (topic *NamespacesTopic) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&topic.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNamespacesTopic populates our NamespacesTopic from the provided source NamespacesTopic
func (topic *NamespacesTopic) AssignPropertiesFromNamespacesTopic(source *v1alpha1api20210101previewstorage.NamespacesTopic) error {

	// ObjectMeta
	topic.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec NamespacesTopics_SPEC
	err := spec.AssignPropertiesFromNamespacesTopics_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespacesTopics_SPEC() to populate field Spec")
	}
	topic.Spec = spec

	// Status
	var status SBTopic_Status
	err = status.AssignPropertiesFromSBTopic_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSBTopic_Status() to populate field Status")
	}
	topic.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespacesTopic populates the provided destination NamespacesTopic from our NamespacesTopic
func (topic *NamespacesTopic) AssignPropertiesToNamespacesTopic(destination *v1alpha1api20210101previewstorage.NamespacesTopic) error {

	// ObjectMeta
	destination.ObjectMeta = *topic.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210101previewstorage.NamespacesTopics_SPEC
	err := topic.Spec.AssignPropertiesToNamespacesTopics_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespacesTopics_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210101previewstorage.SBTopic_Status
	err = topic.Status.AssignPropertiesToSBTopic_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSBTopic_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (topic *NamespacesTopic) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: topic.Spec.OriginalVersion(),
		Kind:    "NamespacesTopic",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /servicebus/resource-manager/Microsoft.ServiceBus/preview/2021-01-01-preview/topics.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}
type NamespacesTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesTopic `json:"items"`
}

type NamespacesTopics_SPEC struct {
	//AutoDeleteOnIdle: ISO 8601 timespan idle interval after which the topic is
	//automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DefaultMessageTimeToLive: ISO 8601 Default message timespan to live value. This
	//is the duration after which the message expires, starting from when the message
	//is sent to Service Bus. This is the default value used when TimeToLive is not
	//set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	//DuplicateDetectionHistoryTimeWindow: ISO8601 timespan structure that defines the
	//duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	//EnableBatchedOperations: Value that indicates whether server-side batched
	//operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	//EnableExpress: Value that indicates whether Express Entities are enabled. An
	//express topic holds a message in memory temporarily before writing it to
	//persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	//EnablePartitioning: Value that indicates whether the topic to be partitioned
	//across multiple message brokers is enabled.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	//MaxSizeInMegabytes: Maximum size of the topic in megabytes, which is the size of
	//the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//RequiresDuplicateDetection: Value indicating if this topic requires duplicate
	//detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	//Status: Enumerates the possible values for the status of a messaging entity.
	Status *EntityStatus_Spec `json:"status,omitempty"`

	//SupportOrdering: Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `json:"supportOrdering,omitempty"`
}

var _ genruntime.ARMTransformer = &NamespacesTopics_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *NamespacesTopics_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result NamespacesTopics_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.AutoDeleteOnIdle != nil ||
		spec.DefaultMessageTimeToLive != nil ||
		spec.DuplicateDetectionHistoryTimeWindow != nil ||
		spec.EnableBatchedOperations != nil ||
		spec.EnableExpress != nil ||
		spec.EnablePartitioning != nil ||
		spec.MaxSizeInMegabytes != nil ||
		spec.RequiresDuplicateDetection != nil ||
		spec.Status != nil ||
		spec.SupportOrdering != nil {
		result.Properties = &SBTopicProperties_SpecARM{}
	}
	if spec.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *spec.AutoDeleteOnIdle
		result.Properties.AutoDeleteOnIdle = &autoDeleteOnIdle
	}
	if spec.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *spec.DefaultMessageTimeToLive
		result.Properties.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	}
	if spec.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *spec.DuplicateDetectionHistoryTimeWindow
		result.Properties.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	}
	if spec.EnableBatchedOperations != nil {
		enableBatchedOperations := *spec.EnableBatchedOperations
		result.Properties.EnableBatchedOperations = &enableBatchedOperations
	}
	if spec.EnableExpress != nil {
		enableExpress := *spec.EnableExpress
		result.Properties.EnableExpress = &enableExpress
	}
	if spec.EnablePartitioning != nil {
		enablePartitioning := *spec.EnablePartitioning
		result.Properties.EnablePartitioning = &enablePartitioning
	}
	if spec.MaxSizeInMegabytes != nil {
		maxSizeInMegabytes := *spec.MaxSizeInMegabytes
		result.Properties.MaxSizeInMegabytes = &maxSizeInMegabytes
	}
	if spec.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *spec.RequiresDuplicateDetection
		result.Properties.RequiresDuplicateDetection = &requiresDuplicateDetection
	}
	if spec.Status != nil {
		status := *spec.Status
		result.Properties.Status = &status
	}
	if spec.SupportOrdering != nil {
		supportOrdering := *spec.SupportOrdering
		result.Properties.SupportOrdering = &supportOrdering
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *NamespacesTopics_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesTopics_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *NamespacesTopics_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesTopics_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesTopics_SPECARM, got %T", armInput)
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoDeleteOnIdle != nil {
			autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
			spec.AutoDeleteOnIdle = &autoDeleteOnIdle
		}
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultMessageTimeToLive != nil {
			defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
			spec.DefaultMessageTimeToLive = &defaultMessageTimeToLive
		}
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
			duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
			spec.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
		}
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBatchedOperations != nil {
			enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
			spec.EnableBatchedOperations = &enableBatchedOperations
		}
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableExpress != nil {
			enableExpress := *typedInput.Properties.EnableExpress
			spec.EnableExpress = &enableExpress
		}
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePartitioning != nil {
			enablePartitioning := *typedInput.Properties.EnablePartitioning
			spec.EnablePartitioning = &enablePartitioning
		}
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeInMegabytes != nil {
			maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
			spec.MaxSizeInMegabytes = &maxSizeInMegabytes
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresDuplicateDetection != nil {
			requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
			spec.RequiresDuplicateDetection = &requiresDuplicateDetection
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			spec.Status = &status
		}
	}

	// Set property ‘SupportOrdering’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportOrdering != nil {
			supportOrdering := *typedInput.Properties.SupportOrdering
			spec.SupportOrdering = &supportOrdering
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NamespacesTopics_SPEC{}

// ConvertSpecFrom populates our NamespacesTopics_SPEC from the provided source
func (spec *NamespacesTopics_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.NamespacesTopics_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromNamespacesTopics_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.NamespacesTopics_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromNamespacesTopics_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NamespacesTopics_SPEC
func (spec *NamespacesTopics_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.NamespacesTopics_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToNamespacesTopics_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.NamespacesTopics_SPEC{}
	err := spec.AssignPropertiesToNamespacesTopics_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesTopics_SPEC populates our NamespacesTopics_SPEC from the provided source NamespacesTopics_SPEC
func (spec *NamespacesTopics_SPEC) AssignPropertiesFromNamespacesTopics_SPEC(source *v1alpha1api20210101previewstorage.NamespacesTopics_SPEC) error {

	// AutoDeleteOnIdle
	if source.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *source.AutoDeleteOnIdle
		spec.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		spec.AutoDeleteOnIdle = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// DefaultMessageTimeToLive
	if source.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *source.DefaultMessageTimeToLive
		spec.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		spec.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if source.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *source.DuplicateDetectionHistoryTimeWindow
		spec.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		spec.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		spec.EnableBatchedOperations = &enableBatchedOperation
	} else {
		spec.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		spec.EnableExpress = &enableExpress
	} else {
		spec.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		spec.EnablePartitioning = &enablePartitioning
	} else {
		spec.EnablePartitioning = nil
	}

	// MaxSizeInMegabytes
	spec.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// Owner
	spec.Owner = source.Owner.Copy()

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		spec.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		spec.RequiresDuplicateDetection = nil
	}

	// Status
	if source.Status != nil {
		status := EntityStatus_Spec(*source.Status)
		spec.Status = &status
	} else {
		spec.Status = nil
	}

	// SupportOrdering
	if source.SupportOrdering != nil {
		supportOrdering := *source.SupportOrdering
		spec.SupportOrdering = &supportOrdering
	} else {
		spec.SupportOrdering = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesTopics_SPEC populates the provided destination NamespacesTopics_SPEC from our NamespacesTopics_SPEC
func (spec *NamespacesTopics_SPEC) AssignPropertiesToNamespacesTopics_SPEC(destination *v1alpha1api20210101previewstorage.NamespacesTopics_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoDeleteOnIdle
	if spec.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *spec.AutoDeleteOnIdle
		destination.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		destination.AutoDeleteOnIdle = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// DefaultMessageTimeToLive
	if spec.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *spec.DefaultMessageTimeToLive
		destination.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		destination.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if spec.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *spec.DuplicateDetectionHistoryTimeWindow
		destination.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		destination.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if spec.EnableBatchedOperations != nil {
		enableBatchedOperation := *spec.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if spec.EnableExpress != nil {
		enableExpress := *spec.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if spec.EnablePartitioning != nil {
		enablePartitioning := *spec.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(spec.MaxSizeInMegabytes)

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// RequiresDuplicateDetection
	if spec.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *spec.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// Status
	if spec.Status != nil {
		status := string(*spec.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SupportOrdering
	if spec.SupportOrdering != nil {
		supportOrdering := *spec.SupportOrdering
		destination.SupportOrdering = &supportOrdering
	} else {
		destination.SupportOrdering = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *NamespacesTopics_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *NamespacesTopics_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type SBTopic_Status struct {
	//AccessedAt: Last time the message was sent, or a request was received, for this
	//topic.
	AccessedAt *string `json:"accessedAt,omitempty"`

	//AutoDeleteOnIdle: ISO 8601 timespan idle interval after which the topic is
	//automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CountDetails: Message count details
	CountDetails *MessageCountDetails_Status `json:"countDetails,omitempty"`

	//CreatedAt: Exact time the message was created.
	CreatedAt *string `json:"createdAt,omitempty"`

	//DefaultMessageTimeToLive: ISO 8601 Default message timespan to live value. This
	//is the duration after which the message expires, starting from when the message
	//is sent to Service Bus. This is the default value used when TimeToLive is not
	//set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	//DuplicateDetectionHistoryTimeWindow: ISO8601 timespan structure that defines the
	//duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	//EnableBatchedOperations: Value that indicates whether server-side batched
	//operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	//EnableExpress: Value that indicates whether Express Entities are enabled. An
	//express topic holds a message in memory temporarily before writing it to
	//persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	//EnablePartitioning: Value that indicates whether the topic to be partitioned
	//across multiple message brokers is enabled.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//MaxSizeInMegabytes: Maximum size of the topic in megabytes, which is the size of
	//the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	//Name: Resource name
	Name *string `json:"name,omitempty"`

	//RequiresDuplicateDetection: Value indicating if this topic requires duplicate
	//detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	//SizeInBytes: Size of the topic, in bytes.
	SizeInBytes *int `json:"sizeInBytes,omitempty"`

	//Status: Enumerates the possible values for the status of a messaging entity.
	Status *EntityStatus_Status `json:"status,omitempty"`

	//SubscriptionCount: Number of subscriptions.
	SubscriptionCount *int `json:"subscriptionCount,omitempty"`

	//SupportOrdering: Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `json:"supportOrdering,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//UpdatedAt: The exact time the message was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SBTopic_Status{}

// ConvertStatusFrom populates our SBTopic_Status from the provided source
func (topic *SBTopic_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.SBTopic_Status)
	if ok {
		// Populate our instance from source
		return topic.AssignPropertiesFromSBTopic_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.SBTopic_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = topic.AssignPropertiesFromSBTopic_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SBTopic_Status
func (topic *SBTopic_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.SBTopic_Status)
	if ok {
		// Populate destination from our instance
		return topic.AssignPropertiesToSBTopic_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.SBTopic_Status{}
	err := topic.AssignPropertiesToSBTopic_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SBTopic_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (topic *SBTopic_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SBTopic_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (topic *SBTopic_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SBTopic_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SBTopic_StatusARM, got %T", armInput)
	}

	// Set property ‘AccessedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessedAt != nil {
			accessedAt := *typedInput.Properties.AccessedAt
			topic.AccessedAt = &accessedAt
		}
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoDeleteOnIdle != nil {
			autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
			topic.AutoDeleteOnIdle = &autoDeleteOnIdle
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CountDetails’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CountDetails != nil {
			var countDetails1 MessageCountDetails_Status
			err := countDetails1.PopulateFromARM(owner, *typedInput.Properties.CountDetails)
			if err != nil {
				return err
			}
			countDetails := countDetails1
			topic.CountDetails = &countDetails
		}
	}

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			topic.CreatedAt = &createdAt
		}
	}

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultMessageTimeToLive != nil {
			defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
			topic.DefaultMessageTimeToLive = &defaultMessageTimeToLive
		}
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
			duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
			topic.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
		}
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBatchedOperations != nil {
			enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
			topic.EnableBatchedOperations = &enableBatchedOperations
		}
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableExpress != nil {
			enableExpress := *typedInput.Properties.EnableExpress
			topic.EnableExpress = &enableExpress
		}
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePartitioning != nil {
			enablePartitioning := *typedInput.Properties.EnablePartitioning
			topic.EnablePartitioning = &enablePartitioning
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		topic.Id = &id
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeInMegabytes != nil {
			maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
			topic.MaxSizeInMegabytes = &maxSizeInMegabytes
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		topic.Name = &name
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresDuplicateDetection != nil {
			requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
			topic.RequiresDuplicateDetection = &requiresDuplicateDetection
		}
	}

	// Set property ‘SizeInBytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SizeInBytes != nil {
			sizeInBytes := *typedInput.Properties.SizeInBytes
			topic.SizeInBytes = &sizeInBytes
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			topic.Status = &status
		}
	}

	// Set property ‘SubscriptionCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubscriptionCount != nil {
			subscriptionCount := *typedInput.Properties.SubscriptionCount
			topic.SubscriptionCount = &subscriptionCount
		}
	}

	// Set property ‘SupportOrdering’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportOrdering != nil {
			supportOrdering := *typedInput.Properties.SupportOrdering
			topic.SupportOrdering = &supportOrdering
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		topic.SystemData = &systemData
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		topic.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			topic.UpdatedAt = &updatedAt
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromSBTopic_Status populates our SBTopic_Status from the provided source SBTopic_Status
func (topic *SBTopic_Status) AssignPropertiesFromSBTopic_Status(source *v1alpha1api20210101previewstorage.SBTopic_Status) error {

	// AccessedAt
	topic.AccessedAt = genruntime.ClonePointerToString(source.AccessedAt)

	// AutoDeleteOnIdle
	topic.AutoDeleteOnIdle = genruntime.ClonePointerToString(source.AutoDeleteOnIdle)

	// Conditions
	topic.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CountDetails
	if source.CountDetails != nil {
		var countDetail MessageCountDetails_Status
		err := countDetail.AssignPropertiesFromMessageCountDetails_Status(source.CountDetails)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMessageCountDetails_Status() to populate field CountDetails")
		}
		topic.CountDetails = &countDetail
	} else {
		topic.CountDetails = nil
	}

	// CreatedAt
	topic.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// DefaultMessageTimeToLive
	topic.DefaultMessageTimeToLive = genruntime.ClonePointerToString(source.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	topic.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(source.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		topic.EnableBatchedOperations = &enableBatchedOperation
	} else {
		topic.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		topic.EnableExpress = &enableExpress
	} else {
		topic.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		topic.EnablePartitioning = &enablePartitioning
	} else {
		topic.EnablePartitioning = nil
	}

	// Id
	topic.Id = genruntime.ClonePointerToString(source.Id)

	// MaxSizeInMegabytes
	topic.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// Name
	topic.Name = genruntime.ClonePointerToString(source.Name)

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		topic.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		topic.RequiresDuplicateDetection = nil
	}

	// SizeInBytes
	topic.SizeInBytes = genruntime.ClonePointerToInt(source.SizeInBytes)

	// Status
	if source.Status != nil {
		status := EntityStatus_Status(*source.Status)
		topic.Status = &status
	} else {
		topic.Status = nil
	}

	// SubscriptionCount
	topic.SubscriptionCount = genruntime.ClonePointerToInt(source.SubscriptionCount)

	// SupportOrdering
	if source.SupportOrdering != nil {
		supportOrdering := *source.SupportOrdering
		topic.SupportOrdering = &supportOrdering
	} else {
		topic.SupportOrdering = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemData_Status(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_Status() to populate field SystemData")
		}
		topic.SystemData = &systemDatum
	} else {
		topic.SystemData = nil
	}

	// Type
	topic.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	topic.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// No error
	return nil
}

// AssignPropertiesToSBTopic_Status populates the provided destination SBTopic_Status from our SBTopic_Status
func (topic *SBTopic_Status) AssignPropertiesToSBTopic_Status(destination *v1alpha1api20210101previewstorage.SBTopic_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessedAt
	destination.AccessedAt = genruntime.ClonePointerToString(topic.AccessedAt)

	// AutoDeleteOnIdle
	destination.AutoDeleteOnIdle = genruntime.ClonePointerToString(topic.AutoDeleteOnIdle)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(topic.Conditions)

	// CountDetails
	if topic.CountDetails != nil {
		var countDetail v1alpha1api20210101previewstorage.MessageCountDetails_Status
		err := topic.CountDetails.AssignPropertiesToMessageCountDetails_Status(&countDetail)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMessageCountDetails_Status() to populate field CountDetails")
		}
		destination.CountDetails = &countDetail
	} else {
		destination.CountDetails = nil
	}

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(topic.CreatedAt)

	// DefaultMessageTimeToLive
	destination.DefaultMessageTimeToLive = genruntime.ClonePointerToString(topic.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	destination.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(topic.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if topic.EnableBatchedOperations != nil {
		enableBatchedOperation := *topic.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if topic.EnableExpress != nil {
		enableExpress := *topic.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if topic.EnablePartitioning != nil {
		enablePartitioning := *topic.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(topic.Id)

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(topic.MaxSizeInMegabytes)

	// Name
	destination.Name = genruntime.ClonePointerToString(topic.Name)

	// RequiresDuplicateDetection
	if topic.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *topic.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// SizeInBytes
	destination.SizeInBytes = genruntime.ClonePointerToInt(topic.SizeInBytes)

	// Status
	if topic.Status != nil {
		status := string(*topic.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SubscriptionCount
	destination.SubscriptionCount = genruntime.ClonePointerToInt(topic.SubscriptionCount)

	// SupportOrdering
	if topic.SupportOrdering != nil {
		supportOrdering := *topic.SupportOrdering
		destination.SupportOrdering = &supportOrdering
	} else {
		destination.SupportOrdering = nil
	}

	// SystemData
	if topic.SystemData != nil {
		var systemDatum v1alpha1api20210101previewstorage.SystemData_Status
		err := topic.SystemData.AssignPropertiesToSystemData_Status(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_Status() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(topic.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(topic.UpdatedAt)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NamespacesTopic{}, &NamespacesTopicList{})
}
