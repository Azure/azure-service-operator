// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Namespace_SpecARM struct {
	AzureName string `json:"azureName"`

	//Identity: Properties of BYOK Identity description
	Identity *IdentityARM `json:"identity,omitempty"`

	//Location: The Geo-location where the resource lives
	Location string `json:"location"`
	Name     string `json:"name"`

	//Properties: Properties of the namespace.
	Properties *SBNamespacePropertiesARM `json:"properties,omitempty"`

	//Sku: Properties of SKU
	Sku *SBSkuARM `json:"sku,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Namespace_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-01-01-preview"
func (namespace Namespace_SpecARM) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetName returns the Name of the resource
func (namespace Namespace_SpecARM) GetName() string {
	return namespace.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ServiceBus/namespaces"
func (namespace Namespace_SpecARM) GetType() string {
	return "Microsoft.ServiceBus/namespaces"
}

type IdentityARM struct {
	//Type: Type of managed service identity.
	Type *IdentityType `json:"type,omitempty"`
}

type SBNamespacePropertiesARM struct {
	//Encryption: Properties of BYOK Encryption description
	Encryption *EncryptionARM `json:"encryption,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections.
	PrivateEndpointConnections []PrivateEndpointConnectionARM `json:"privateEndpointConnections,omitempty"`

	//ZoneRedundant: Enabling this property creates a Premium Service Bus Namespace in
	//regions supported availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

type SBSkuARM struct {
	//Capacity: The specified messaging units for the tier. For Premium tier, capacity
	//are 1,2 and 4.
	Capacity *int `json:"capacity,omitempty"`

	//Name: Name of this SKU.
	Name SBSkuName `json:"name"`

	//Tier: The billing tier of this particular SKU.
	Tier *SBSkuTier `json:"tier,omitempty"`
}

type EncryptionARM struct {
	//KeySource: Enumerates the possible value of keySource for Encryption
	KeySource *EncryptionKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Properties of KeyVault
	KeyVaultProperties []KeyVaultPropertiesARM `json:"keyVaultProperties,omitempty"`

	//RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double
	//Encryption)
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned, UserAssigned","UserAssigned"}
type IdentityType string

const (
	IdentityTypeNone                       = IdentityType("None")
	IdentityTypeSystemAssigned             = IdentityType("SystemAssigned")
	IdentityTypeSystemAssignedUserAssigned = IdentityType("SystemAssigned, UserAssigned")
	IdentityTypeUserAssigned               = IdentityType("UserAssigned")
)

type PrivateEndpointConnectionARM struct {
	//Properties: Properties of the PrivateEndpointConnection.
	Properties *PrivateEndpointConnectionPropertiesARM `json:"properties,omitempty"`
}

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type SBSkuName string

const (
	SBSkuNameBasic    = SBSkuName("Basic")
	SBSkuNamePremium  = SBSkuName("Premium")
	SBSkuNameStandard = SBSkuName("Standard")
)

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type SBSkuTier string

const (
	SBSkuTierBasic    = SBSkuTier("Basic")
	SBSkuTierPremium  = SBSkuTier("Premium")
	SBSkuTierStandard = SBSkuTier("Standard")
)

type KeyVaultPropertiesARM struct {
	Identity *UserAssignedIdentityPropertiesARM `json:"identity,omitempty"`

	//KeyName: Name of the Key from KeyVault
	KeyName *string `json:"keyName,omitempty"`

	//KeyVaultUri: Uri of KeyVault
	KeyVaultUri *string `json:"keyVaultUri,omitempty"`

	//KeyVersion: Version of KeyVault
	KeyVersion *string `json:"keyVersion,omitempty"`
}

type PrivateEndpointConnectionPropertiesARM struct {
	//PrivateEndpoint: The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpointARM `json:"privateEndpoint,omitempty"`

	//PrivateLinkServiceConnectionState: Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionStateARM `json:"privateLinkServiceConnectionState,omitempty"`

	//ProvisioningState: Provisioning state of the Private Endpoint Connection.
	ProvisioningState *PrivateEndpointConnectionPropertiesProvisioningState `json:"provisioningState,omitempty"`
}

type ConnectionStateARM struct {
	//Description: Description of the connection state.
	Description *string `json:"description,omitempty"`

	//Status: Status of the connection.
	Status *ConnectionStateStatus `json:"status,omitempty"`
}

type PrivateEndpointARM struct {
	Id *string `json:"id,omitempty"`
}

type UserAssignedIdentityPropertiesARM struct {
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}
