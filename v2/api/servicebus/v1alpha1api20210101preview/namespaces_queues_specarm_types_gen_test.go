// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesQueues_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesQueues_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesQueuesSPECARM, NamespacesQueuesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesQueuesSPECARM runs a test to see if a specific instance of NamespacesQueues_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesQueuesSPECARM(subject NamespacesQueues_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesQueues_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesQueues_SPECARM instances for property testing - lazily instantiated by
//NamespacesQueuesSPECARMGenerator()
var namespacesQueuesSPECARMGenerator gopter.Gen

// NamespacesQueuesSPECARMGenerator returns a generator of NamespacesQueues_SPECARM instances for property testing.
// We first initialize namespacesQueuesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesQueuesSPECARMGenerator() gopter.Gen {
	if namespacesQueuesSPECARMGenerator != nil {
		return namespacesQueuesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesQueuesSPECARM(generators)
	namespacesQueuesSPECARMGenerator = gen.Struct(reflect.TypeOf(NamespacesQueues_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesQueuesSPECARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesQueuesSPECARM(generators)
	namespacesQueuesSPECARMGenerator = gen.Struct(reflect.TypeOf(NamespacesQueues_SPECARM{}), generators)

	return namespacesQueuesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesQueuesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesQueuesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesQueuesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesQueuesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SBQueuePropertiesSpecARMGenerator())
}

func Test_SBQueueProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBQueueProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBQueuePropertiesSpecARM, SBQueuePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBQueuePropertiesSpecARM runs a test to see if a specific instance of SBQueueProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBQueuePropertiesSpecARM(subject SBQueueProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBQueueProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBQueueProperties_SpecARM instances for property testing - lazily instantiated by
//SBQueuePropertiesSpecARMGenerator()
var sbQueuePropertiesSpecARMGenerator gopter.Gen

// SBQueuePropertiesSpecARMGenerator returns a generator of SBQueueProperties_SpecARM instances for property testing.
func SBQueuePropertiesSpecARMGenerator() gopter.Gen {
	if sbQueuePropertiesSpecARMGenerator != nil {
		return sbQueuePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBQueuePropertiesSpecARM(generators)
	sbQueuePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(SBQueueProperties_SpecARM{}), generators)

	return sbQueuePropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSBQueuePropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBQueuePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["AutoDeleteOnIdle"] = gen.PtrOf(gen.AlphaString())
	gens["DeadLetteringOnMessageExpiration"] = gen.PtrOf(gen.Bool())
	gens["DefaultMessageTimeToLive"] = gen.PtrOf(gen.AlphaString())
	gens["DuplicateDetectionHistoryTimeWindow"] = gen.PtrOf(gen.AlphaString())
	gens["EnableBatchedOperations"] = gen.PtrOf(gen.Bool())
	gens["EnableExpress"] = gen.PtrOf(gen.Bool())
	gens["EnablePartitioning"] = gen.PtrOf(gen.Bool())
	gens["ForwardDeadLetteredMessagesTo"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardTo"] = gen.PtrOf(gen.AlphaString())
	gens["LockDuration"] = gen.PtrOf(gen.AlphaString())
	gens["MaxDeliveryCount"] = gen.PtrOf(gen.Int())
	gens["MaxSizeInMegabytes"] = gen.PtrOf(gen.Int())
	gens["RequiresDuplicateDetection"] = gen.PtrOf(gen.Bool())
	gens["RequiresSession"] = gen.PtrOf(gen.Bool())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		EntityStatus_SpecActive,
		EntityStatus_SpecCreating,
		EntityStatus_SpecDeleting,
		EntityStatus_SpecDisabled,
		EntityStatus_SpecReceiveDisabled,
		EntityStatus_SpecRenaming,
		EntityStatus_SpecRestoring,
		EntityStatus_SpecSendDisabled,
		EntityStatus_SpecUnknown))
}
