// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesTopic_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesTopic_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesTopic_SpecARM, NamespacesTopic_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesTopic_SpecARM runs a test to see if a specific instance of NamespacesTopic_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesTopic_SpecARM(subject NamespacesTopic_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesTopic_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesTopic_SpecARM instances for property testing - lazily instantiated by
// NamespacesTopic_SpecARMGenerator()
var namespacesTopic_SpecARMGenerator gopter.Gen

// NamespacesTopic_SpecARMGenerator returns a generator of NamespacesTopic_SpecARM instances for property testing.
// We first initialize namespacesTopic_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesTopic_SpecARMGenerator() gopter.Gen {
	if namespacesTopic_SpecARMGenerator != nil {
		return namespacesTopic_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesTopic_SpecARM(generators)
	namespacesTopic_SpecARMGenerator = gen.Struct(reflect.TypeOf(NamespacesTopic_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesTopic_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesTopic_SpecARM(generators)
	namespacesTopic_SpecARMGenerator = gen.Struct(reflect.TypeOf(NamespacesTopic_SpecARM{}), generators)

	return namespacesTopic_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesTopic_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesTopic_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNamespacesTopic_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesTopic_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SBTopicPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataARMGenerator())
}

func Test_SBTopicPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SBTopicPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSBTopicPropertiesARM, SBTopicPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSBTopicPropertiesARM runs a test to see if a specific instance of SBTopicPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSBTopicPropertiesARM(subject SBTopicPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SBTopicPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SBTopicPropertiesARM instances for property testing - lazily instantiated by
// SBTopicPropertiesARMGenerator()
var sbTopicPropertiesARMGenerator gopter.Gen

// SBTopicPropertiesARMGenerator returns a generator of SBTopicPropertiesARM instances for property testing.
// We first initialize sbTopicPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SBTopicPropertiesARMGenerator() gopter.Gen {
	if sbTopicPropertiesARMGenerator != nil {
		return sbTopicPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBTopicPropertiesARM(generators)
	sbTopicPropertiesARMGenerator = gen.Struct(reflect.TypeOf(SBTopicPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSBTopicPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForSBTopicPropertiesARM(generators)
	sbTopicPropertiesARMGenerator = gen.Struct(reflect.TypeOf(SBTopicPropertiesARM{}), generators)

	return sbTopicPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForSBTopicPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSBTopicPropertiesARM(gens map[string]gopter.Gen) {
	gens["AccessedAt"] = gen.PtrOf(gen.AlphaString())
	gens["AutoDeleteOnIdle"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["DefaultMessageTimeToLive"] = gen.PtrOf(gen.AlphaString())
	gens["DuplicateDetectionHistoryTimeWindow"] = gen.PtrOf(gen.AlphaString())
	gens["EnableBatchedOperations"] = gen.PtrOf(gen.Bool())
	gens["EnableExpress"] = gen.PtrOf(gen.Bool())
	gens["EnablePartitioning"] = gen.PtrOf(gen.Bool())
	gens["MaxSizeInMegabytes"] = gen.PtrOf(gen.Int())
	gens["RequiresDuplicateDetection"] = gen.PtrOf(gen.Bool())
	gens["SizeInBytes"] = gen.PtrOf(gen.Int())
	gens["SubscriptionCount"] = gen.PtrOf(gen.Int())
	gens["SupportOrdering"] = gen.PtrOf(gen.Bool())
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSBTopicPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSBTopicPropertiesARM(gens map[string]gopter.Gen) {
	gens["CountDetails"] = gen.PtrOf(MessageCountDetailsARMGenerator())
}
