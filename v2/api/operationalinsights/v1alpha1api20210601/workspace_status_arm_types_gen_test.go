// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Workspace_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspace_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceSTATUSARM, WorkspaceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceSTATUSARM runs a test to see if a specific instance of Workspace_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceSTATUSARM(subject Workspace_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspace_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspace_STATUSARM instances for property testing - lazily instantiated by WorkspaceSTATUSARMGenerator()
var workspaceSTATUSARMGenerator gopter.Gen

// WorkspaceSTATUSARMGenerator returns a generator of Workspace_STATUSARM instances for property testing.
// We first initialize workspaceSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspaceSTATUSARMGenerator() gopter.Gen {
	if workspaceSTATUSARMGenerator != nil {
		return workspaceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM(generators)
	workspaceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Workspace_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaceSTATUSARM(generators)
	workspaceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Workspace_STATUSARM{}), generators)

	return workspaceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaceSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WorkspacePropertiesSTATUSARMGenerator())
}

func Test_WorkspaceProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacePropertiesSTATUSARM, WorkspacePropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacePropertiesSTATUSARM runs a test to see if a specific instance of WorkspaceProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacePropertiesSTATUSARM(subject WorkspaceProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceProperties_STATUSARM instances for property testing - lazily instantiated by
// WorkspacePropertiesSTATUSARMGenerator()
var workspacePropertiesSTATUSARMGenerator gopter.Gen

// WorkspacePropertiesSTATUSARMGenerator returns a generator of WorkspaceProperties_STATUSARM instances for property testing.
// We first initialize workspacePropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacePropertiesSTATUSARMGenerator() gopter.Gen {
	if workspacePropertiesSTATUSARMGenerator != nil {
		return workspacePropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM(generators)
	workspacePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForWorkspacePropertiesSTATUSARM(generators)
	workspacePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_STATUSARM{}), generators)

	return workspacePropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["CreatedDate"] = gen.PtrOf(gen.AlphaString())
	gens["CustomerId"] = gen.PtrOf(gen.AlphaString())
	gens["ForceCmkForQuery"] = gen.PtrOf(gen.Bool())
	gens["ModifiedDate"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		WorkspacePropertiesSTATUSProvisioningState_Canceled,
		WorkspacePropertiesSTATUSProvisioningState_Creating,
		WorkspacePropertiesSTATUSProvisioningState_Deleting,
		WorkspacePropertiesSTATUSProvisioningState_Failed,
		WorkspacePropertiesSTATUSProvisioningState_ProvisioningAccount,
		WorkspacePropertiesSTATUSProvisioningState_Succeeded,
		WorkspacePropertiesSTATUSProvisioningState_Updating))
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_STATUS_Disabled, PublicNetworkAccessType_STATUS_Enabled))
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_STATUS_Disabled, PublicNetworkAccessType_STATUS_Enabled))
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWorkspacePropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Features"] = gen.PtrOf(WorkspaceFeaturesSTATUSARMGenerator())
	gens["PrivateLinkScopedResources"] = gen.SliceOf(PrivateLinkScopedResourceSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(WorkspaceSkuSTATUSARMGenerator())
	gens["WorkspaceCapping"] = gen.PtrOf(WorkspaceCappingSTATUSARMGenerator())
}

func Test_PrivateLinkScopedResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkScopedResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkScopedResourceSTATUSARM, PrivateLinkScopedResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkScopedResourceSTATUSARM runs a test to see if a specific instance of PrivateLinkScopedResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkScopedResourceSTATUSARM(subject PrivateLinkScopedResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkScopedResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkScopedResource_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkScopedResourceSTATUSARMGenerator()
var privateLinkScopedResourceSTATUSARMGenerator gopter.Gen

// PrivateLinkScopedResourceSTATUSARMGenerator returns a generator of PrivateLinkScopedResource_STATUSARM instances for property testing.
func PrivateLinkScopedResourceSTATUSARMGenerator() gopter.Gen {
	if privateLinkScopedResourceSTATUSARMGenerator != nil {
		return privateLinkScopedResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceSTATUSARM(generators)
	privateLinkScopedResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkScopedResource_STATUSARM{}), generators)

	return privateLinkScopedResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ScopeId"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceCapping_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceCapping_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceCappingSTATUSARM, WorkspaceCappingSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceCappingSTATUSARM runs a test to see if a specific instance of WorkspaceCapping_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceCappingSTATUSARM(subject WorkspaceCapping_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceCapping_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceCapping_STATUSARM instances for property testing - lazily instantiated by
// WorkspaceCappingSTATUSARMGenerator()
var workspaceCappingSTATUSARMGenerator gopter.Gen

// WorkspaceCappingSTATUSARMGenerator returns a generator of WorkspaceCapping_STATUSARM instances for property testing.
func WorkspaceCappingSTATUSARMGenerator() gopter.Gen {
	if workspaceCappingSTATUSARMGenerator != nil {
		return workspaceCappingSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceCappingSTATUSARM(generators)
	workspaceCappingSTATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceCapping_STATUSARM{}), generators)

	return workspaceCappingSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceCappingSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceCappingSTATUSARM(gens map[string]gopter.Gen) {
	gens["DailyQuotaGb"] = gen.PtrOf(gen.Float64())
	gens["DataIngestionStatus"] = gen.PtrOf(gen.OneConstOf(
		WorkspaceCappingSTATUSDataIngestionStatus_ApproachingQuota,
		WorkspaceCappingSTATUSDataIngestionStatus_ForceOff,
		WorkspaceCappingSTATUSDataIngestionStatus_ForceOn,
		WorkspaceCappingSTATUSDataIngestionStatus_OverQuota,
		WorkspaceCappingSTATUSDataIngestionStatus_RespectQuota,
		WorkspaceCappingSTATUSDataIngestionStatus_SubscriptionSuspended))
	gens["QuotaNextResetTime"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceFeatures_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceFeatures_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceFeaturesSTATUSARM, WorkspaceFeaturesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceFeaturesSTATUSARM runs a test to see if a specific instance of WorkspaceFeatures_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceFeaturesSTATUSARM(subject WorkspaceFeatures_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceFeatures_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceFeatures_STATUSARM instances for property testing - lazily instantiated by
// WorkspaceFeaturesSTATUSARMGenerator()
var workspaceFeaturesSTATUSARMGenerator gopter.Gen

// WorkspaceFeaturesSTATUSARMGenerator returns a generator of WorkspaceFeatures_STATUSARM instances for property testing.
func WorkspaceFeaturesSTATUSARMGenerator() gopter.Gen {
	if workspaceFeaturesSTATUSARMGenerator != nil {
		return workspaceFeaturesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceFeaturesSTATUSARM(generators)
	workspaceFeaturesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceFeatures_STATUSARM{}), generators)

	return workspaceFeaturesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceFeaturesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceFeaturesSTATUSARM(gens map[string]gopter.Gen) {
	gens["ClusterResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["EnableDataExport"] = gen.PtrOf(gen.Bool())
	gens["EnableLogAccessUsingOnlyResourcePermissions"] = gen.PtrOf(gen.Bool())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
}

func Test_WorkspaceSku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceSku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceSkuSTATUSARM, WorkspaceSkuSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceSkuSTATUSARM runs a test to see if a specific instance of WorkspaceSku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceSkuSTATUSARM(subject WorkspaceSku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceSku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceSku_STATUSARM instances for property testing - lazily instantiated by
// WorkspaceSkuSTATUSARMGenerator()
var workspaceSkuSTATUSARMGenerator gopter.Gen

// WorkspaceSkuSTATUSARMGenerator returns a generator of WorkspaceSku_STATUSARM instances for property testing.
func WorkspaceSkuSTATUSARMGenerator() gopter.Gen {
	if workspaceSkuSTATUSARMGenerator != nil {
		return workspaceSkuSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSkuSTATUSARM(generators)
	workspaceSkuSTATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceSku_STATUSARM{}), generators)

	return workspaceSkuSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceSkuSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceSkuSTATUSARM(gens map[string]gopter.Gen) {
	gens["CapacityReservationLevel"] = gen.PtrOf(gen.OneConstOf(
		WorkspaceSkuSTATUSCapacityReservationLevel_100,
		WorkspaceSkuSTATUSCapacityReservationLevel_1000,
		WorkspaceSkuSTATUSCapacityReservationLevel_200,
		WorkspaceSkuSTATUSCapacityReservationLevel_2000,
		WorkspaceSkuSTATUSCapacityReservationLevel_300,
		WorkspaceSkuSTATUSCapacityReservationLevel_400,
		WorkspaceSkuSTATUSCapacityReservationLevel_500,
		WorkspaceSkuSTATUSCapacityReservationLevel_5000))
	gens["LastSkuUpdate"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		WorkspaceSkuSTATUSName_CapacityReservation,
		WorkspaceSkuSTATUSName_Free,
		WorkspaceSkuSTATUSName_LACluster,
		WorkspaceSkuSTATUSName_PerGB2018,
		WorkspaceSkuSTATUSName_PerNode,
		WorkspaceSkuSTATUSName_Premium,
		WorkspaceSkuSTATUSName_Standalone,
		WorkspaceSkuSTATUSName_Standard))
}
