// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Workspace_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspace_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspace_StatusARM, Workspace_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspace_StatusARM runs a test to see if a specific instance of Workspace_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspace_StatusARM(subject Workspace_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspace_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspace_StatusARM instances for property testing - lazily instantiated by
//Workspace_StatusARMGenerator()
var workspace_statusARMGenerator gopter.Gen

// Workspace_StatusARMGenerator returns a generator of Workspace_StatusARM instances for property testing.
// We first initialize workspace_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Workspace_StatusARMGenerator() gopter.Gen {
	if workspace_statusARMGenerator != nil {
		return workspace_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspace_StatusARM(generators)
	workspace_statusARMGenerator = gen.Struct(reflect.TypeOf(Workspace_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspace_StatusARM(generators)
	AddRelatedPropertyGeneratorsForWorkspace_StatusARM(generators)
	workspace_statusARMGenerator = gen.Struct(reflect.TypeOf(Workspace_StatusARM{}), generators)

	return workspace_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspace_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspace_StatusARM(gens map[string]gopter.Gen) {
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspace_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspace_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WorkspaceProperties_StatusARMGenerator())
}

func Test_WorkspaceProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceProperties_StatusARM, WorkspaceProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceProperties_StatusARM runs a test to see if a specific instance of WorkspaceProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceProperties_StatusARM(subject WorkspaceProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceProperties_StatusARM instances for property testing - lazily instantiated by
//WorkspaceProperties_StatusARMGenerator()
var workspaceProperties_statusARMGenerator gopter.Gen

// WorkspaceProperties_StatusARMGenerator returns a generator of WorkspaceProperties_StatusARM instances for property testing.
// We first initialize workspaceProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspaceProperties_StatusARMGenerator() gopter.Gen {
	if workspaceProperties_statusARMGenerator != nil {
		return workspaceProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceProperties_StatusARM(generators)
	workspaceProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaceProperties_StatusARM(generators)
	workspaceProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_StatusARM{}), generators)

	return workspaceProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["CreatedDate"] = gen.PtrOf(gen.AlphaString())
	gens["CustomerId"] = gen.PtrOf(gen.AlphaString())
	gens["ForceCmkForQuery"] = gen.PtrOf(gen.Bool())
	gens["ModifiedDate"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.AlphaString())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWorkspaceProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaceProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Features"] = gen.PtrOf(WorkspaceFeatures_StatusARMGenerator())
	gens["PrivateLinkScopedResources"] = gen.SliceOf(PrivateLinkScopedResource_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(WorkspaceSku_StatusARMGenerator())
	gens["WorkspaceCapping"] = gen.PtrOf(WorkspaceCapping_StatusARMGenerator())
}

func Test_PrivateLinkScopedResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkScopedResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkScopedResource_StatusARM, PrivateLinkScopedResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkScopedResource_StatusARM runs a test to see if a specific instance of PrivateLinkScopedResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkScopedResource_StatusARM(subject PrivateLinkScopedResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkScopedResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkScopedResource_StatusARM instances for property testing - lazily instantiated by
//PrivateLinkScopedResource_StatusARMGenerator()
var privateLinkScopedResource_statusARMGenerator gopter.Gen

// PrivateLinkScopedResource_StatusARMGenerator returns a generator of PrivateLinkScopedResource_StatusARM instances for property testing.
func PrivateLinkScopedResource_StatusARMGenerator() gopter.Gen {
	if privateLinkScopedResource_statusARMGenerator != nil {
		return privateLinkScopedResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_StatusARM(generators)
	privateLinkScopedResource_statusARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkScopedResource_StatusARM{}), generators)

	return privateLinkScopedResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_StatusARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ScopeId"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceCapping_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceCapping_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceCapping_StatusARM, WorkspaceCapping_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceCapping_StatusARM runs a test to see if a specific instance of WorkspaceCapping_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceCapping_StatusARM(subject WorkspaceCapping_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceCapping_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceCapping_StatusARM instances for property testing - lazily instantiated by
//WorkspaceCapping_StatusARMGenerator()
var workspaceCapping_statusARMGenerator gopter.Gen

// WorkspaceCapping_StatusARMGenerator returns a generator of WorkspaceCapping_StatusARM instances for property testing.
func WorkspaceCapping_StatusARMGenerator() gopter.Gen {
	if workspaceCapping_statusARMGenerator != nil {
		return workspaceCapping_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceCapping_StatusARM(generators)
	workspaceCapping_statusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceCapping_StatusARM{}), generators)

	return workspaceCapping_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceCapping_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceCapping_StatusARM(gens map[string]gopter.Gen) {
	gens["DailyQuotaGb"] = gen.PtrOf(gen.Float64())
	gens["DataIngestionStatus"] = gen.PtrOf(gen.AlphaString())
	gens["QuotaNextResetTime"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceFeatures_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceFeatures_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceFeatures_StatusARM, WorkspaceFeatures_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceFeatures_StatusARM runs a test to see if a specific instance of WorkspaceFeatures_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceFeatures_StatusARM(subject WorkspaceFeatures_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceFeatures_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceFeatures_StatusARM instances for property testing - lazily instantiated by
//WorkspaceFeatures_StatusARMGenerator()
var workspaceFeatures_statusARMGenerator gopter.Gen

// WorkspaceFeatures_StatusARMGenerator returns a generator of WorkspaceFeatures_StatusARM instances for property testing.
func WorkspaceFeatures_StatusARMGenerator() gopter.Gen {
	if workspaceFeatures_statusARMGenerator != nil {
		return workspaceFeatures_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceFeatures_StatusARM(generators)
	workspaceFeatures_statusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceFeatures_StatusARM{}), generators)

	return workspaceFeatures_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceFeatures_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceFeatures_StatusARM(gens map[string]gopter.Gen) {
	gens["ClusterResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["EnableDataExport"] = gen.PtrOf(gen.Bool())
	gens["EnableLogAccessUsingOnlyResourcePermissions"] = gen.PtrOf(gen.Bool())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
}

func Test_WorkspaceSku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceSku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceSku_StatusARM, WorkspaceSku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceSku_StatusARM runs a test to see if a specific instance of WorkspaceSku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceSku_StatusARM(subject WorkspaceSku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceSku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceSku_StatusARM instances for property testing - lazily instantiated by
//WorkspaceSku_StatusARMGenerator()
var workspaceSku_statusARMGenerator gopter.Gen

// WorkspaceSku_StatusARMGenerator returns a generator of WorkspaceSku_StatusARM instances for property testing.
func WorkspaceSku_StatusARMGenerator() gopter.Gen {
	if workspaceSku_statusARMGenerator != nil {
		return workspaceSku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSku_StatusARM(generators)
	workspaceSku_statusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceSku_StatusARM{}), generators)

	return workspaceSku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceSku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceSku_StatusARM(gens map[string]gopter.Gen) {
	gens["CapacityReservationLevel"] = gen.PtrOf(gen.Int())
	gens["LastSkuUpdate"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}
