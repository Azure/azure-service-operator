// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1alpha1api20210601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/Workspaces.json
//- ARM URI: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
type Workspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Workspace_Spec   `json:"spec,omitempty"`
	Status            Workspace_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Workspace{}

// GetConditions returns the conditions of the resource
func (workspace *Workspace) GetConditions() conditions.Conditions {
	return workspace.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (workspace *Workspace) SetConditions(conditions conditions.Conditions) {
	workspace.Status.Conditions = conditions
}

var _ conversion.Convertible = &Workspace{}

// ConvertFrom populates our Workspace from the provided hub Workspace
func (workspace *Workspace) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210601storage.Workspace)
	if !ok {
		return fmt.Errorf("expected storage:operationalinsights/v1alpha1api20210601storage/Workspace but received %T instead", hub)
	}

	return workspace.AssignPropertiesFromWorkspace(source)
}

// ConvertTo populates the provided hub Workspace from our Workspace
func (workspace *Workspace) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210601storage.Workspace)
	if !ok {
		return fmt.Errorf("expected storage:operationalinsights/v1alpha1api20210601storage/Workspace but received %T instead", hub)
	}

	return workspace.AssignPropertiesToWorkspace(destination)
}

// +kubebuilder:webhook:path=/mutate-operationalinsights-azure-com-v1alpha1api20210601-workspace,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=operationalinsights.azure.com,resources=workspaces,verbs=create;update,versions=v1alpha1api20210601,name=default.v1alpha1api20210601.workspaces.operationalinsights.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Workspace{}

// Default applies defaults to the Workspace resource
func (workspace *Workspace) Default() {
	workspace.defaultImpl()
	var temp interface{} = workspace
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (workspace *Workspace) defaultAzureName() {
	if workspace.Spec.AzureName == "" {
		workspace.Spec.AzureName = workspace.Name
	}
}

// defaultImpl applies the code generated defaults to the Workspace resource
func (workspace *Workspace) defaultImpl() { workspace.defaultAzureName() }

var _ genruntime.KubernetesResource = &Workspace{}

// AzureName returns the Azure name of the resource
func (workspace *Workspace) AzureName() string {
	return workspace.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (workspace Workspace) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (workspace *Workspace) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (workspace *Workspace) GetSpec() genruntime.ConvertibleSpec {
	return &workspace.Spec
}

// GetStatus returns the status of this resource
func (workspace *Workspace) GetStatus() genruntime.ConvertibleStatus {
	return &workspace.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.OperationalInsights/workspaces"
func (workspace *Workspace) GetType() string {
	return "Microsoft.OperationalInsights/workspaces"
}

// NewEmptyStatus returns a new empty (blank) status
func (workspace *Workspace) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Workspace_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (workspace *Workspace) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(workspace.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  workspace.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (workspace *Workspace) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Workspace_Status); ok {
		workspace.Status = *st
		return nil
	}

	// Convert status to required version
	var st Workspace_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	workspace.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-operationalinsights-azure-com-v1alpha1api20210601-workspace,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=operationalinsights.azure.com,resources=workspaces,verbs=create;update,versions=v1alpha1api20210601,name=validate.v1alpha1api20210601.workspaces.operationalinsights.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Workspace{}

// ValidateCreate validates the creation of the resource
func (workspace *Workspace) ValidateCreate() error {
	validations := workspace.createValidations()
	var temp interface{} = workspace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (workspace *Workspace) ValidateDelete() error {
	validations := workspace.deleteValidations()
	var temp interface{} = workspace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (workspace *Workspace) ValidateUpdate(old runtime.Object) error {
	validations := workspace.updateValidations()
	var temp interface{} = workspace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (workspace *Workspace) createValidations() []func() error {
	return []func() error{workspace.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (workspace *Workspace) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (workspace *Workspace) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return workspace.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (workspace *Workspace) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&workspace.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromWorkspace populates our Workspace from the provided source Workspace
func (workspace *Workspace) AssignPropertiesFromWorkspace(source *v1alpha1api20210601storage.Workspace) error {

	// ObjectMeta
	workspace.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Workspace_Spec
	err := spec.AssignPropertiesFromWorkspace_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWorkspace_Spec() to populate field Spec")
	}
	workspace.Spec = spec

	// Status
	var status Workspace_Status
	err = status.AssignPropertiesFromWorkspace_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWorkspace_Status() to populate field Status")
	}
	workspace.Status = status

	// No error
	return nil
}

// AssignPropertiesToWorkspace populates the provided destination Workspace from our Workspace
func (workspace *Workspace) AssignPropertiesToWorkspace(destination *v1alpha1api20210601storage.Workspace) error {

	// ObjectMeta
	destination.ObjectMeta = *workspace.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210601storage.Workspace_Spec
	err := workspace.Spec.AssignPropertiesToWorkspace_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWorkspace_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210601storage.Workspace_Status
	err = workspace.Status.AssignPropertiesToWorkspace_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWorkspace_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (workspace *Workspace) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: workspace.Spec.OriginalVersion(),
		Kind:    "Workspace",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/Workspaces.json
//- ARM URI: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
type WorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workspace `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-06-01"}
type APIVersion string

const APIVersionValue = APIVersion("2021-06-01")

type Workspace_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//ETag: The ETag of the workspace.
	ETag *string `json:"eTag,omitempty"`

	//Features: Workspace features.
	Features *WorkspaceFeatures `json:"features,omitempty"`

	//ForceCmkForQuery: Indicates whether customer managed storage is mandatory for
	//query management.
	ForceCmkForQuery *bool `json:"forceCmkForQuery,omitempty"`

	// +kubebuilder:validation:Required
	//Location: The geo-location where the resource lives
	Location string `json:"location"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//ProvisioningState: The provisioning state of the workspace.
	ProvisioningState *WorkspacePropertiesProvisioningState `json:"provisioningState,omitempty"`

	//PublicNetworkAccessForIngestion: The network access type for accessing Log
	//Analytics ingestion.
	PublicNetworkAccessForIngestion *PublicNetworkAccessType `json:"publicNetworkAccessForIngestion,omitempty"`

	//PublicNetworkAccessForQuery: The network access type for accessing Log Analytics
	//query.
	PublicNetworkAccessForQuery *PublicNetworkAccessType `json:"publicNetworkAccessForQuery,omitempty"`

	//RetentionInDays: The workspace data retention in days. Allowed values are per
	//pricing plan. See pricing tiers documentation for details.
	RetentionInDays *int `json:"retentionInDays,omitempty"`

	//Sku: The SKU of the workspace.
	Sku *WorkspaceSku `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//WorkspaceCapping: The daily volume cap for ingestion.
	WorkspaceCapping *WorkspaceCapping `json:"workspaceCapping,omitempty"`
}

var _ genruntime.ARMTransformer = &Workspace_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (workspace *Workspace_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if workspace == nil {
		return nil, nil
	}
	var result Workspace_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = workspace.AzureName

	// Set property ‘ETag’:
	if workspace.ETag != nil {
		eTag := *workspace.ETag
		result.ETag = &eTag
	}

	// Set property ‘Location’:
	result.Location = workspace.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if workspace.Features != nil ||
		workspace.ForceCmkForQuery != nil ||
		workspace.ProvisioningState != nil ||
		workspace.PublicNetworkAccessForIngestion != nil ||
		workspace.PublicNetworkAccessForQuery != nil ||
		workspace.RetentionInDays != nil ||
		workspace.Sku != nil ||
		workspace.WorkspaceCapping != nil {
		result.Properties = &WorkspacePropertiesARM{}
	}
	if workspace.Features != nil {
		featuresARM, err := (*workspace.Features).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		features := featuresARM.(WorkspaceFeaturesARM)
		result.Properties.Features = &features
	}
	if workspace.ForceCmkForQuery != nil {
		forceCmkForQuery := *workspace.ForceCmkForQuery
		result.Properties.ForceCmkForQuery = &forceCmkForQuery
	}
	if workspace.ProvisioningState != nil {
		provisioningState := *workspace.ProvisioningState
		result.Properties.ProvisioningState = &provisioningState
	}
	if workspace.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := *workspace.PublicNetworkAccessForIngestion
		result.Properties.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	}
	if workspace.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := *workspace.PublicNetworkAccessForQuery
		result.Properties.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	}
	if workspace.RetentionInDays != nil {
		retentionInDays := *workspace.RetentionInDays
		result.Properties.RetentionInDays = &retentionInDays
	}
	if workspace.Sku != nil {
		skuARM, err := (*workspace.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(WorkspaceSkuARM)
		result.Properties.Sku = &sku
	}
	if workspace.WorkspaceCapping != nil {
		workspaceCappingARM, err := (*workspace.WorkspaceCapping).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		workspaceCapping := workspaceCappingARM.(WorkspaceCappingARM)
		result.Properties.WorkspaceCapping = &workspaceCapping
	}

	// Set property ‘Tags’:
	if workspace.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range workspace.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspace *Workspace_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Workspace_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspace *Workspace_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Workspace_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Workspace_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	workspace.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ETag’:
	if typedInput.ETag != nil {
		eTag := *typedInput.ETag
		workspace.ETag = &eTag
	}

	// Set property ‘Features’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Features != nil {
			var features1 WorkspaceFeatures
			err := features1.PopulateFromARM(owner, *typedInput.Properties.Features)
			if err != nil {
				return err
			}
			features := features1
			workspace.Features = &features
		}
	}

	// Set property ‘ForceCmkForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForceCmkForQuery != nil {
			forceCmkForQuery := *typedInput.Properties.ForceCmkForQuery
			workspace.ForceCmkForQuery = &forceCmkForQuery
		}
	}

	// Set property ‘Location’:
	workspace.Location = typedInput.Location

	// Set property ‘Owner’:
	workspace.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			workspace.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccessForIngestion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForIngestion != nil {
			publicNetworkAccessForIngestion := *typedInput.Properties.PublicNetworkAccessForIngestion
			workspace.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
		}
	}

	// Set property ‘PublicNetworkAccessForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForQuery != nil {
			publicNetworkAccessForQuery := *typedInput.Properties.PublicNetworkAccessForQuery
			workspace.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
		}
	}

	// Set property ‘RetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionInDays != nil {
			retentionInDays := *typedInput.Properties.RetentionInDays
			workspace.RetentionInDays = &retentionInDays
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 WorkspaceSku
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			workspace.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		workspace.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			workspace.Tags[key] = value
		}
	}

	// Set property ‘WorkspaceCapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WorkspaceCapping != nil {
			var workspaceCapping1 WorkspaceCapping
			err := workspaceCapping1.PopulateFromARM(owner, *typedInput.Properties.WorkspaceCapping)
			if err != nil {
				return err
			}
			workspaceCapping := workspaceCapping1
			workspace.WorkspaceCapping = &workspaceCapping
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Workspace_Spec{}

// ConvertSpecFrom populates our Workspace_Spec from the provided source
func (workspace *Workspace_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210601storage.Workspace_Spec)
	if ok {
		// Populate our instance from source
		return workspace.AssignPropertiesFromWorkspace_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210601storage.Workspace_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = workspace.AssignPropertiesFromWorkspace_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Workspace_Spec
func (workspace *Workspace_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210601storage.Workspace_Spec)
	if ok {
		// Populate destination from our instance
		return workspace.AssignPropertiesToWorkspace_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210601storage.Workspace_Spec{}
	err := workspace.AssignPropertiesToWorkspace_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromWorkspace_Spec populates our Workspace_Spec from the provided source Workspace_Spec
func (workspace *Workspace_Spec) AssignPropertiesFromWorkspace_Spec(source *v1alpha1api20210601storage.Workspace_Spec) error {

	// AzureName
	workspace.AzureName = source.AzureName

	// ETag
	workspace.ETag = genruntime.ClonePointerToString(source.ETag)

	// Features
	if source.Features != nil {
		var feature WorkspaceFeatures
		err := feature.AssignPropertiesFromWorkspaceFeatures(source.Features)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceFeatures() to populate field Features")
		}
		workspace.Features = &feature
	} else {
		workspace.Features = nil
	}

	// ForceCmkForQuery
	if source.ForceCmkForQuery != nil {
		forceCmkForQuery := *source.ForceCmkForQuery
		workspace.ForceCmkForQuery = &forceCmkForQuery
	} else {
		workspace.ForceCmkForQuery = nil
	}

	// Location
	workspace.Location = genruntime.GetOptionalStringValue(source.Location)

	// Owner
	workspace.Owner = source.Owner.Copy()

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := WorkspacePropertiesProvisioningState(*source.ProvisioningState)
		workspace.ProvisioningState = &provisioningState
	} else {
		workspace.ProvisioningState = nil
	}

	// PublicNetworkAccessForIngestion
	if source.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := PublicNetworkAccessType(*source.PublicNetworkAccessForIngestion)
		workspace.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		workspace.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if source.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := PublicNetworkAccessType(*source.PublicNetworkAccessForQuery)
		workspace.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		workspace.PublicNetworkAccessForQuery = nil
	}

	// RetentionInDays
	workspace.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// Sku
	if source.Sku != nil {
		var sku WorkspaceSku
		err := sku.AssignPropertiesFromWorkspaceSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceSku() to populate field Sku")
		}
		workspace.Sku = &sku
	} else {
		workspace.Sku = nil
	}

	// Tags
	workspace.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// WorkspaceCapping
	if source.WorkspaceCapping != nil {
		var workspaceCapping WorkspaceCapping
		err := workspaceCapping.AssignPropertiesFromWorkspaceCapping(source.WorkspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceCapping() to populate field WorkspaceCapping")
		}
		workspace.WorkspaceCapping = &workspaceCapping
	} else {
		workspace.WorkspaceCapping = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspace_Spec populates the provided destination Workspace_Spec from our Workspace_Spec
func (workspace *Workspace_Spec) AssignPropertiesToWorkspace_Spec(destination *v1alpha1api20210601storage.Workspace_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = workspace.AzureName

	// ETag
	destination.ETag = genruntime.ClonePointerToString(workspace.ETag)

	// Features
	if workspace.Features != nil {
		var feature v1alpha1api20210601storage.WorkspaceFeatures
		err := workspace.Features.AssignPropertiesToWorkspaceFeatures(&feature)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceFeatures() to populate field Features")
		}
		destination.Features = &feature
	} else {
		destination.Features = nil
	}

	// ForceCmkForQuery
	if workspace.ForceCmkForQuery != nil {
		forceCmkForQuery := *workspace.ForceCmkForQuery
		destination.ForceCmkForQuery = &forceCmkForQuery
	} else {
		destination.ForceCmkForQuery = nil
	}

	// Location
	location := workspace.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = workspace.OriginalVersion()

	// Owner
	destination.Owner = workspace.Owner.Copy()

	// ProvisioningState
	if workspace.ProvisioningState != nil {
		provisioningState := string(*workspace.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccessForIngestion
	if workspace.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := string(*workspace.PublicNetworkAccessForIngestion)
		destination.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		destination.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if workspace.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := string(*workspace.PublicNetworkAccessForQuery)
		destination.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		destination.PublicNetworkAccessForQuery = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(workspace.RetentionInDays)

	// Sku
	if workspace.Sku != nil {
		var sku v1alpha1api20210601storage.WorkspaceSku
		err := workspace.Sku.AssignPropertiesToWorkspaceSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(workspace.Tags)

	// WorkspaceCapping
	if workspace.WorkspaceCapping != nil {
		var workspaceCapping v1alpha1api20210601storage.WorkspaceCapping
		err := workspace.WorkspaceCapping.AssignPropertiesToWorkspaceCapping(&workspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceCapping() to populate field WorkspaceCapping")
		}
		destination.WorkspaceCapping = &workspaceCapping
	} else {
		destination.WorkspaceCapping = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (workspace *Workspace_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (workspace *Workspace_Spec) SetAzureName(azureName string) { workspace.AzureName = azureName }

type Workspace_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreatedDate: Workspace creation date.
	CreatedDate *string `json:"createdDate,omitempty"`

	//CustomerId: This is a read-only property. Represents the ID associated with the
	//workspace.
	CustomerId *string `json:"customerId,omitempty"`

	//ETag: The ETag of the workspace.
	ETag *string `json:"eTag,omitempty"`

	//Features: Workspace features.
	Features *WorkspaceFeatures_Status `json:"features,omitempty"`

	//ForceCmkForQuery: Indicates whether customer managed storage is mandatory for
	//query management.
	ForceCmkForQuery *bool `json:"forceCmkForQuery,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//ModifiedDate: Workspace modification date.
	ModifiedDate *string `json:"modifiedDate,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//PrivateLinkScopedResources: List of linked private link scope resources.
	PrivateLinkScopedResources []PrivateLinkScopedResource_Status `json:"privateLinkScopedResources,omitempty"`

	//ProvisioningState: The provisioning state of the workspace.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//PublicNetworkAccessForIngestion: The network access type for accessing Log
	//Analytics ingestion.
	PublicNetworkAccessForIngestion *string `json:"publicNetworkAccessForIngestion,omitempty"`

	//PublicNetworkAccessForQuery: The network access type for accessing Log Analytics
	//query.
	PublicNetworkAccessForQuery *string `json:"publicNetworkAccessForQuery,omitempty"`

	//RetentionInDays: The workspace data retention in days. Allowed values are per
	//pricing plan. See pricing tiers documentation for details.
	RetentionInDays *int `json:"retentionInDays,omitempty"`

	//Sku: The SKU of the workspace.
	Sku *WorkspaceSku_Status `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	//WorkspaceCapping: The daily volume cap for ingestion.
	WorkspaceCapping *WorkspaceCapping_Status `json:"workspaceCapping,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Workspace_Status{}

// ConvertStatusFrom populates our Workspace_Status from the provided source
func (workspace *Workspace_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210601storage.Workspace_Status)
	if ok {
		// Populate our instance from source
		return workspace.AssignPropertiesFromWorkspace_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210601storage.Workspace_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = workspace.AssignPropertiesFromWorkspace_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Workspace_Status
func (workspace *Workspace_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210601storage.Workspace_Status)
	if ok {
		// Populate destination from our instance
		return workspace.AssignPropertiesToWorkspace_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210601storage.Workspace_Status{}
	err := workspace.AssignPropertiesToWorkspace_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Workspace_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspace *Workspace_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Workspace_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspace *Workspace_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Workspace_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Workspace_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedDate != nil {
			createdDate := *typedInput.Properties.CreatedDate
			workspace.CreatedDate = &createdDate
		}
	}

	// Set property ‘CustomerId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomerId != nil {
			customerId := *typedInput.Properties.CustomerId
			workspace.CustomerId = &customerId
		}
	}

	// Set property ‘ETag’:
	if typedInput.ETag != nil {
		eTag := *typedInput.ETag
		workspace.ETag = &eTag
	}

	// Set property ‘Features’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Features != nil {
			var features1 WorkspaceFeatures_Status
			err := features1.PopulateFromARM(owner, *typedInput.Properties.Features)
			if err != nil {
				return err
			}
			features := features1
			workspace.Features = &features
		}
	}

	// Set property ‘ForceCmkForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForceCmkForQuery != nil {
			forceCmkForQuery := *typedInput.Properties.ForceCmkForQuery
			workspace.ForceCmkForQuery = &forceCmkForQuery
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		workspace.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		workspace.Location = &location
	}

	// Set property ‘ModifiedDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ModifiedDate != nil {
			modifiedDate := *typedInput.Properties.ModifiedDate
			workspace.ModifiedDate = &modifiedDate
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		workspace.Name = &name
	}

	// Set property ‘PrivateLinkScopedResources’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateLinkScopedResources {
			var item1 PrivateLinkScopedResource_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			workspace.PrivateLinkScopedResources = append(workspace.PrivateLinkScopedResources, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			workspace.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccessForIngestion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForIngestion != nil {
			publicNetworkAccessForIngestion := *typedInput.Properties.PublicNetworkAccessForIngestion
			workspace.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
		}
	}

	// Set property ‘PublicNetworkAccessForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForQuery != nil {
			publicNetworkAccessForQuery := *typedInput.Properties.PublicNetworkAccessForQuery
			workspace.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
		}
	}

	// Set property ‘RetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionInDays != nil {
			retentionInDays := *typedInput.Properties.RetentionInDays
			workspace.RetentionInDays = &retentionInDays
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 WorkspaceSku_Status
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			workspace.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		workspace.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			workspace.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		workspace.Type = &typeVar
	}

	// Set property ‘WorkspaceCapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WorkspaceCapping != nil {
			var workspaceCapping1 WorkspaceCapping_Status
			err := workspaceCapping1.PopulateFromARM(owner, *typedInput.Properties.WorkspaceCapping)
			if err != nil {
				return err
			}
			workspaceCapping := workspaceCapping1
			workspace.WorkspaceCapping = &workspaceCapping
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspace_Status populates our Workspace_Status from the provided source Workspace_Status
func (workspace *Workspace_Status) AssignPropertiesFromWorkspace_Status(source *v1alpha1api20210601storage.Workspace_Status) error {

	// Conditions
	workspace.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedDate
	workspace.CreatedDate = genruntime.ClonePointerToString(source.CreatedDate)

	// CustomerId
	workspace.CustomerId = genruntime.ClonePointerToString(source.CustomerId)

	// ETag
	workspace.ETag = genruntime.ClonePointerToString(source.ETag)

	// Features
	if source.Features != nil {
		var feature WorkspaceFeatures_Status
		err := feature.AssignPropertiesFromWorkspaceFeatures_Status(source.Features)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceFeatures_Status() to populate field Features")
		}
		workspace.Features = &feature
	} else {
		workspace.Features = nil
	}

	// ForceCmkForQuery
	if source.ForceCmkForQuery != nil {
		forceCmkForQuery := *source.ForceCmkForQuery
		workspace.ForceCmkForQuery = &forceCmkForQuery
	} else {
		workspace.ForceCmkForQuery = nil
	}

	// Id
	workspace.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	workspace.Location = genruntime.ClonePointerToString(source.Location)

	// ModifiedDate
	workspace.ModifiedDate = genruntime.ClonePointerToString(source.ModifiedDate)

	// Name
	workspace.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateLinkScopedResources
	if source.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]PrivateLinkScopedResource_Status, len(source.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range source.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource PrivateLinkScopedResource_Status
			err := privateLinkScopedResource.AssignPropertiesFromPrivateLinkScopedResource_Status(&privateLinkScopedResourceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateLinkScopedResource_Status() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		workspace.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		workspace.PrivateLinkScopedResources = nil
	}

	// ProvisioningState
	workspace.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccessForIngestion
	workspace.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(source.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	workspace.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(source.PublicNetworkAccessForQuery)

	// RetentionInDays
	workspace.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// Sku
	if source.Sku != nil {
		var sku WorkspaceSku_Status
		err := sku.AssignPropertiesFromWorkspaceSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceSku_Status() to populate field Sku")
		}
		workspace.Sku = &sku
	} else {
		workspace.Sku = nil
	}

	// Tags
	workspace.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	workspace.Type = genruntime.ClonePointerToString(source.Type)

	// WorkspaceCapping
	if source.WorkspaceCapping != nil {
		var workspaceCapping WorkspaceCapping_Status
		err := workspaceCapping.AssignPropertiesFromWorkspaceCapping_Status(source.WorkspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceCapping_Status() to populate field WorkspaceCapping")
		}
		workspace.WorkspaceCapping = &workspaceCapping
	} else {
		workspace.WorkspaceCapping = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspace_Status populates the provided destination Workspace_Status from our Workspace_Status
func (workspace *Workspace_Status) AssignPropertiesToWorkspace_Status(destination *v1alpha1api20210601storage.Workspace_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(workspace.Conditions)

	// CreatedDate
	destination.CreatedDate = genruntime.ClonePointerToString(workspace.CreatedDate)

	// CustomerId
	destination.CustomerId = genruntime.ClonePointerToString(workspace.CustomerId)

	// ETag
	destination.ETag = genruntime.ClonePointerToString(workspace.ETag)

	// Features
	if workspace.Features != nil {
		var feature v1alpha1api20210601storage.WorkspaceFeatures_Status
		err := workspace.Features.AssignPropertiesToWorkspaceFeatures_Status(&feature)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceFeatures_Status() to populate field Features")
		}
		destination.Features = &feature
	} else {
		destination.Features = nil
	}

	// ForceCmkForQuery
	if workspace.ForceCmkForQuery != nil {
		forceCmkForQuery := *workspace.ForceCmkForQuery
		destination.ForceCmkForQuery = &forceCmkForQuery
	} else {
		destination.ForceCmkForQuery = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(workspace.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(workspace.Location)

	// ModifiedDate
	destination.ModifiedDate = genruntime.ClonePointerToString(workspace.ModifiedDate)

	// Name
	destination.Name = genruntime.ClonePointerToString(workspace.Name)

	// PrivateLinkScopedResources
	if workspace.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]v1alpha1api20210601storage.PrivateLinkScopedResource_Status, len(workspace.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range workspace.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource v1alpha1api20210601storage.PrivateLinkScopedResource_Status
			err := privateLinkScopedResourceItem.AssignPropertiesToPrivateLinkScopedResource_Status(&privateLinkScopedResource)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateLinkScopedResource_Status() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		destination.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		destination.PrivateLinkScopedResources = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(workspace.ProvisioningState)

	// PublicNetworkAccessForIngestion
	destination.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(workspace.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	destination.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(workspace.PublicNetworkAccessForQuery)

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(workspace.RetentionInDays)

	// Sku
	if workspace.Sku != nil {
		var sku v1alpha1api20210601storage.WorkspaceSku_Status
		err := workspace.Sku.AssignPropertiesToWorkspaceSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(workspace.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(workspace.Type)

	// WorkspaceCapping
	if workspace.WorkspaceCapping != nil {
		var workspaceCapping v1alpha1api20210601storage.WorkspaceCapping_Status
		err := workspace.WorkspaceCapping.AssignPropertiesToWorkspaceCapping_Status(&workspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceCapping_Status() to populate field WorkspaceCapping")
		}
		destination.WorkspaceCapping = &workspaceCapping
	} else {
		destination.WorkspaceCapping = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateLinkScopedResource_Status struct {
	//ResourceId: The full resource Id of the private link scope resource.
	ResourceId *string `json:"resourceId,omitempty"`

	//ScopeId: The private link scope unique Identifier.
	ScopeId *string `json:"scopeId,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateLinkScopedResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *PrivateLinkScopedResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateLinkScopedResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *PrivateLinkScopedResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateLinkScopedResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateLinkScopedResource_StatusARM, got %T", armInput)
	}

	// Set property ‘ResourceId’:
	if typedInput.ResourceId != nil {
		resourceId := *typedInput.ResourceId
		resource.ResourceId = &resourceId
	}

	// Set property ‘ScopeId’:
	if typedInput.ScopeId != nil {
		scopeId := *typedInput.ScopeId
		resource.ScopeId = &scopeId
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateLinkScopedResource_Status populates our PrivateLinkScopedResource_Status from the provided source PrivateLinkScopedResource_Status
func (resource *PrivateLinkScopedResource_Status) AssignPropertiesFromPrivateLinkScopedResource_Status(source *v1alpha1api20210601storage.PrivateLinkScopedResource_Status) error {

	// ResourceId
	resource.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// ScopeId
	resource.ScopeId = genruntime.ClonePointerToString(source.ScopeId)

	// No error
	return nil
}

// AssignPropertiesToPrivateLinkScopedResource_Status populates the provided destination PrivateLinkScopedResource_Status from our PrivateLinkScopedResource_Status
func (resource *PrivateLinkScopedResource_Status) AssignPropertiesToPrivateLinkScopedResource_Status(destination *v1alpha1api20210601storage.PrivateLinkScopedResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(resource.ResourceId)

	// ScopeId
	destination.ScopeId = genruntime.ClonePointerToString(resource.ScopeId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type PublicNetworkAccessType string

const (
	PublicNetworkAccessTypeDisabled = PublicNetworkAccessType("Disabled")
	PublicNetworkAccessTypeEnabled  = PublicNetworkAccessType("Enabled")
)

type WorkspaceCapping struct {
	//DailyQuotaGb: The workspace daily quota for ingestion.
	DailyQuotaGb *float64 `json:"dailyQuotaGb,omitempty"`
}

var _ genruntime.ARMTransformer = &WorkspaceCapping{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (capping *WorkspaceCapping) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if capping == nil {
		return nil, nil
	}
	var result WorkspaceCappingARM

	// Set property ‘DailyQuotaGb’:
	if capping.DailyQuotaGb != nil {
		dailyQuotaGb := *capping.DailyQuotaGb
		result.DailyQuotaGb = &dailyQuotaGb
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capping *WorkspaceCapping) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceCappingARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capping *WorkspaceCapping) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceCappingARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceCappingARM, got %T", armInput)
	}

	// Set property ‘DailyQuotaGb’:
	if typedInput.DailyQuotaGb != nil {
		dailyQuotaGb := *typedInput.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceCapping populates our WorkspaceCapping from the provided source WorkspaceCapping
func (capping *WorkspaceCapping) AssignPropertiesFromWorkspaceCapping(source *v1alpha1api20210601storage.WorkspaceCapping) error {

	// DailyQuotaGb
	if source.DailyQuotaGb != nil {
		dailyQuotaGb := *source.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	} else {
		capping.DailyQuotaGb = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceCapping populates the provided destination WorkspaceCapping from our WorkspaceCapping
func (capping *WorkspaceCapping) AssignPropertiesToWorkspaceCapping(destination *v1alpha1api20210601storage.WorkspaceCapping) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DailyQuotaGb
	if capping.DailyQuotaGb != nil {
		dailyQuotaGb := *capping.DailyQuotaGb
		destination.DailyQuotaGb = &dailyQuotaGb
	} else {
		destination.DailyQuotaGb = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceCapping_Status struct {
	//DailyQuotaGb: The workspace daily quota for ingestion.
	DailyQuotaGb *float64 `json:"dailyQuotaGb,omitempty"`

	//DataIngestionStatus: The status of data ingestion for this workspace.
	DataIngestionStatus *string `json:"dataIngestionStatus,omitempty"`

	//QuotaNextResetTime: The time when the quota will be rest.
	QuotaNextResetTime *string `json:"quotaNextResetTime,omitempty"`
}

var _ genruntime.FromARMConverter = &WorkspaceCapping_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capping *WorkspaceCapping_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceCapping_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capping *WorkspaceCapping_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceCapping_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceCapping_StatusARM, got %T", armInput)
	}

	// Set property ‘DailyQuotaGb’:
	if typedInput.DailyQuotaGb != nil {
		dailyQuotaGb := *typedInput.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	}

	// Set property ‘DataIngestionStatus’:
	if typedInput.DataIngestionStatus != nil {
		dataIngestionStatus := *typedInput.DataIngestionStatus
		capping.DataIngestionStatus = &dataIngestionStatus
	}

	// Set property ‘QuotaNextResetTime’:
	if typedInput.QuotaNextResetTime != nil {
		quotaNextResetTime := *typedInput.QuotaNextResetTime
		capping.QuotaNextResetTime = &quotaNextResetTime
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceCapping_Status populates our WorkspaceCapping_Status from the provided source WorkspaceCapping_Status
func (capping *WorkspaceCapping_Status) AssignPropertiesFromWorkspaceCapping_Status(source *v1alpha1api20210601storage.WorkspaceCapping_Status) error {

	// DailyQuotaGb
	if source.DailyQuotaGb != nil {
		dailyQuotaGb := *source.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	} else {
		capping.DailyQuotaGb = nil
	}

	// DataIngestionStatus
	capping.DataIngestionStatus = genruntime.ClonePointerToString(source.DataIngestionStatus)

	// QuotaNextResetTime
	capping.QuotaNextResetTime = genruntime.ClonePointerToString(source.QuotaNextResetTime)

	// No error
	return nil
}

// AssignPropertiesToWorkspaceCapping_Status populates the provided destination WorkspaceCapping_Status from our WorkspaceCapping_Status
func (capping *WorkspaceCapping_Status) AssignPropertiesToWorkspaceCapping_Status(destination *v1alpha1api20210601storage.WorkspaceCapping_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DailyQuotaGb
	if capping.DailyQuotaGb != nil {
		dailyQuotaGb := *capping.DailyQuotaGb
		destination.DailyQuotaGb = &dailyQuotaGb
	} else {
		destination.DailyQuotaGb = nil
	}

	// DataIngestionStatus
	destination.DataIngestionStatus = genruntime.ClonePointerToString(capping.DataIngestionStatus)

	// QuotaNextResetTime
	destination.QuotaNextResetTime = genruntime.ClonePointerToString(capping.QuotaNextResetTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceFeatures struct {
	//ClusterResourceId: Dedicated LA cluster resourceId that is linked to the
	//workspaces.
	ClusterResourceId *string `json:"clusterResourceId,omitempty"`

	//DisableLocalAuth: Disable Non-AAD based Auth.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//EnableDataExport: Flag that indicate if data should be exported.
	EnableDataExport *bool `json:"enableDataExport,omitempty"`

	//EnableLogAccessUsingOnlyResourcePermissions: Flag that indicate which permission
	//to use - resource or workspace or both.
	EnableLogAccessUsingOnlyResourcePermissions *bool `json:"enableLogAccessUsingOnlyResourcePermissions,omitempty"`

	//ImmediatePurgeDataOn30Days: Flag that describes if we want to remove the data
	//after 30 days.
	ImmediatePurgeDataOn30Days *bool `json:"immediatePurgeDataOn30Days,omitempty"`
}

var _ genruntime.ARMTransformer = &WorkspaceFeatures{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (features *WorkspaceFeatures) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if features == nil {
		return nil, nil
	}
	var result WorkspaceFeaturesARM

	// Set property ‘ClusterResourceId’:
	if features.ClusterResourceId != nil {
		clusterResourceId := *features.ClusterResourceId
		result.ClusterResourceId = &clusterResourceId
	}

	// Set property ‘DisableLocalAuth’:
	if features.DisableLocalAuth != nil {
		disableLocalAuth := *features.DisableLocalAuth
		result.DisableLocalAuth = &disableLocalAuth
	}

	// Set property ‘EnableDataExport’:
	if features.EnableDataExport != nil {
		enableDataExport := *features.EnableDataExport
		result.EnableDataExport = &enableDataExport
	}

	// Set property ‘EnableLogAccessUsingOnlyResourcePermissions’:
	if features.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermissions := *features.EnableLogAccessUsingOnlyResourcePermissions
		result.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermissions
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	if features.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Days := *features.ImmediatePurgeDataOn30Days
		result.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (features *WorkspaceFeatures) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceFeaturesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (features *WorkspaceFeatures) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceFeaturesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceFeaturesARM, got %T", armInput)
	}

	// Set property ‘ClusterResourceId’:
	if typedInput.ClusterResourceId != nil {
		clusterResourceId := *typedInput.ClusterResourceId
		features.ClusterResourceId = &clusterResourceId
	}

	// Set property ‘DisableLocalAuth’:
	if typedInput.DisableLocalAuth != nil {
		disableLocalAuth := *typedInput.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	}

	// Set property ‘EnableDataExport’:
	if typedInput.EnableDataExport != nil {
		enableDataExport := *typedInput.EnableDataExport
		features.EnableDataExport = &enableDataExport
	}

	// Set property ‘EnableLogAccessUsingOnlyResourcePermissions’:
	if typedInput.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermissions := *typedInput.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermissions
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	if typedInput.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Days := *typedInput.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceFeatures populates our WorkspaceFeatures from the provided source WorkspaceFeatures
func (features *WorkspaceFeatures) AssignPropertiesFromWorkspaceFeatures(source *v1alpha1api20210601storage.WorkspaceFeatures) error {

	// ClusterResourceId
	features.ClusterResourceId = genruntime.ClonePointerToString(source.ClusterResourceId)

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	} else {
		features.DisableLocalAuth = nil
	}

	// EnableDataExport
	if source.EnableDataExport != nil {
		enableDataExport := *source.EnableDataExport
		features.EnableDataExport = &enableDataExport
	} else {
		features.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if source.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *source.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		features.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		features.ImmediatePurgeDataOn30Days = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceFeatures populates the provided destination WorkspaceFeatures from our WorkspaceFeatures
func (features *WorkspaceFeatures) AssignPropertiesToWorkspaceFeatures(destination *v1alpha1api20210601storage.WorkspaceFeatures) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClusterResourceId
	destination.ClusterResourceId = genruntime.ClonePointerToString(features.ClusterResourceId)

	// DisableLocalAuth
	if features.DisableLocalAuth != nil {
		disableLocalAuth := *features.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// EnableDataExport
	if features.EnableDataExport != nil {
		enableDataExport := *features.EnableDataExport
		destination.EnableDataExport = &enableDataExport
	} else {
		destination.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if features.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *features.EnableLogAccessUsingOnlyResourcePermissions
		destination.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		destination.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if features.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *features.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceFeatures_Status struct {
	//ClusterResourceId: Dedicated LA cluster resourceId that is linked to the
	//workspaces.
	ClusterResourceId *string `json:"clusterResourceId,omitempty"`

	//DisableLocalAuth: Disable Non-AAD based Auth.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//EnableDataExport: Flag that indicate if data should be exported.
	EnableDataExport *bool `json:"enableDataExport,omitempty"`

	//EnableLogAccessUsingOnlyResourcePermissions: Flag that indicate which permission
	//to use - resource or workspace or both.
	EnableLogAccessUsingOnlyResourcePermissions *bool `json:"enableLogAccessUsingOnlyResourcePermissions,omitempty"`

	//ImmediatePurgeDataOn30Days: Flag that describes if we want to remove the data
	//after 30 days.
	ImmediatePurgeDataOn30Days *bool `json:"immediatePurgeDataOn30Days,omitempty"`
}

var _ genruntime.FromARMConverter = &WorkspaceFeatures_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (features *WorkspaceFeatures_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceFeatures_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (features *WorkspaceFeatures_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceFeatures_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceFeatures_StatusARM, got %T", armInput)
	}

	// Set property ‘ClusterResourceId’:
	if typedInput.ClusterResourceId != nil {
		clusterResourceId := *typedInput.ClusterResourceId
		features.ClusterResourceId = &clusterResourceId
	}

	// Set property ‘DisableLocalAuth’:
	if typedInput.DisableLocalAuth != nil {
		disableLocalAuth := *typedInput.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	}

	// Set property ‘EnableDataExport’:
	if typedInput.EnableDataExport != nil {
		enableDataExport := *typedInput.EnableDataExport
		features.EnableDataExport = &enableDataExport
	}

	// Set property ‘EnableLogAccessUsingOnlyResourcePermissions’:
	if typedInput.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermissions := *typedInput.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermissions
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	if typedInput.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Days := *typedInput.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceFeatures_Status populates our WorkspaceFeatures_Status from the provided source WorkspaceFeatures_Status
func (features *WorkspaceFeatures_Status) AssignPropertiesFromWorkspaceFeatures_Status(source *v1alpha1api20210601storage.WorkspaceFeatures_Status) error {

	// ClusterResourceId
	features.ClusterResourceId = genruntime.ClonePointerToString(source.ClusterResourceId)

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	} else {
		features.DisableLocalAuth = nil
	}

	// EnableDataExport
	if source.EnableDataExport != nil {
		enableDataExport := *source.EnableDataExport
		features.EnableDataExport = &enableDataExport
	} else {
		features.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if source.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *source.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		features.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		features.ImmediatePurgeDataOn30Days = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceFeatures_Status populates the provided destination WorkspaceFeatures_Status from our WorkspaceFeatures_Status
func (features *WorkspaceFeatures_Status) AssignPropertiesToWorkspaceFeatures_Status(destination *v1alpha1api20210601storage.WorkspaceFeatures_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClusterResourceId
	destination.ClusterResourceId = genruntime.ClonePointerToString(features.ClusterResourceId)

	// DisableLocalAuth
	if features.DisableLocalAuth != nil {
		disableLocalAuth := *features.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// EnableDataExport
	if features.EnableDataExport != nil {
		enableDataExport := *features.EnableDataExport
		destination.EnableDataExport = &enableDataExport
	} else {
		destination.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if features.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *features.EnableLogAccessUsingOnlyResourcePermissions
		destination.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		destination.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if features.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *features.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Canceled","Creating","Deleting","Failed","ProvisioningAccount","Succeeded","Updating"}
type WorkspacePropertiesProvisioningState string

const (
	WorkspacePropertiesProvisioningStateCanceled            = WorkspacePropertiesProvisioningState("Canceled")
	WorkspacePropertiesProvisioningStateCreating            = WorkspacePropertiesProvisioningState("Creating")
	WorkspacePropertiesProvisioningStateDeleting            = WorkspacePropertiesProvisioningState("Deleting")
	WorkspacePropertiesProvisioningStateFailed              = WorkspacePropertiesProvisioningState("Failed")
	WorkspacePropertiesProvisioningStateProvisioningAccount = WorkspacePropertiesProvisioningState("ProvisioningAccount")
	WorkspacePropertiesProvisioningStateSucceeded           = WorkspacePropertiesProvisioningState("Succeeded")
	WorkspacePropertiesProvisioningStateUpdating            = WorkspacePropertiesProvisioningState("Updating")
)

type WorkspaceSku struct {
	//CapacityReservationLevel: The capacity reservation level in GB for this
	//workspace, when CapacityReservation sku is selected.
	CapacityReservationLevel *WorkspaceSkuCapacityReservationLevel `json:"capacityReservationLevel,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The name of the SKU.
	Name WorkspaceSkuName `json:"name"`
}

var _ genruntime.ARMTransformer = &WorkspaceSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (workspaceSku *WorkspaceSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if workspaceSku == nil {
		return nil, nil
	}
	var result WorkspaceSkuARM

	// Set property ‘CapacityReservationLevel’:
	if workspaceSku.CapacityReservationLevel != nil {
		capacityReservationLevel := *workspaceSku.CapacityReservationLevel
		result.CapacityReservationLevel = &capacityReservationLevel
	}

	// Set property ‘Name’:
	result.Name = workspaceSku.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspaceSku *WorkspaceSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspaceSku *WorkspaceSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceSkuARM, got %T", armInput)
	}

	// Set property ‘CapacityReservationLevel’:
	if typedInput.CapacityReservationLevel != nil {
		capacityReservationLevel := *typedInput.CapacityReservationLevel
		workspaceSku.CapacityReservationLevel = &capacityReservationLevel
	}

	// Set property ‘Name’:
	workspaceSku.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceSku populates our WorkspaceSku from the provided source WorkspaceSku
func (workspaceSku *WorkspaceSku) AssignPropertiesFromWorkspaceSku(source *v1alpha1api20210601storage.WorkspaceSku) error {

	// CapacityReservationLevel
	if source.CapacityReservationLevel != nil {
		capacityReservationLevel := WorkspaceSkuCapacityReservationLevel(*source.CapacityReservationLevel)
		workspaceSku.CapacityReservationLevel = &capacityReservationLevel
	} else {
		workspaceSku.CapacityReservationLevel = nil
	}

	// Name
	if source.Name != nil {
		workspaceSku.Name = WorkspaceSkuName(*source.Name)
	} else {
		workspaceSku.Name = ""
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceSku populates the provided destination WorkspaceSku from our WorkspaceSku
func (workspaceSku *WorkspaceSku) AssignPropertiesToWorkspaceSku(destination *v1alpha1api20210601storage.WorkspaceSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CapacityReservationLevel
	if workspaceSku.CapacityReservationLevel != nil {
		capacityReservationLevel := int(*workspaceSku.CapacityReservationLevel)
		destination.CapacityReservationLevel = &capacityReservationLevel
	} else {
		destination.CapacityReservationLevel = nil
	}

	// Name
	name := string(workspaceSku.Name)
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceSku_Status struct {
	//CapacityReservationLevel: The capacity reservation level in GB for this
	//workspace, when CapacityReservation sku is selected.
	CapacityReservationLevel *int `json:"capacityReservationLevel,omitempty"`

	//LastSkuUpdate: The last time when the sku was updated.
	LastSkuUpdate *string `json:"lastSkuUpdate,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The name of the SKU.
	Name string `json:"name"`
}

var _ genruntime.FromARMConverter = &WorkspaceSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspaceSku *WorkspaceSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspaceSku *WorkspaceSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceSku_StatusARM, got %T", armInput)
	}

	// Set property ‘CapacityReservationLevel’:
	if typedInput.CapacityReservationLevel != nil {
		capacityReservationLevel := *typedInput.CapacityReservationLevel
		workspaceSku.CapacityReservationLevel = &capacityReservationLevel
	}

	// Set property ‘LastSkuUpdate’:
	if typedInput.LastSkuUpdate != nil {
		lastSkuUpdate := *typedInput.LastSkuUpdate
		workspaceSku.LastSkuUpdate = &lastSkuUpdate
	}

	// Set property ‘Name’:
	workspaceSku.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceSku_Status populates our WorkspaceSku_Status from the provided source WorkspaceSku_Status
func (workspaceSku *WorkspaceSku_Status) AssignPropertiesFromWorkspaceSku_Status(source *v1alpha1api20210601storage.WorkspaceSku_Status) error {

	// CapacityReservationLevel
	workspaceSku.CapacityReservationLevel = genruntime.ClonePointerToInt(source.CapacityReservationLevel)

	// LastSkuUpdate
	workspaceSku.LastSkuUpdate = genruntime.ClonePointerToString(source.LastSkuUpdate)

	// Name
	workspaceSku.Name = genruntime.GetOptionalStringValue(source.Name)

	// No error
	return nil
}

// AssignPropertiesToWorkspaceSku_Status populates the provided destination WorkspaceSku_Status from our WorkspaceSku_Status
func (workspaceSku *WorkspaceSku_Status) AssignPropertiesToWorkspaceSku_Status(destination *v1alpha1api20210601storage.WorkspaceSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CapacityReservationLevel
	destination.CapacityReservationLevel = genruntime.ClonePointerToInt(workspaceSku.CapacityReservationLevel)

	// LastSkuUpdate
	destination.LastSkuUpdate = genruntime.ClonePointerToString(workspaceSku.LastSkuUpdate)

	// Name
	name := workspaceSku.Name
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={100,1000,200,2000,300,400,500,5000}
type WorkspaceSkuCapacityReservationLevel int

const (
	WorkspaceSkuCapacityReservationLevel100  = WorkspaceSkuCapacityReservationLevel(100)
	WorkspaceSkuCapacityReservationLevel1000 = WorkspaceSkuCapacityReservationLevel(1000)
	WorkspaceSkuCapacityReservationLevel200  = WorkspaceSkuCapacityReservationLevel(200)
	WorkspaceSkuCapacityReservationLevel2000 = WorkspaceSkuCapacityReservationLevel(2000)
	WorkspaceSkuCapacityReservationLevel300  = WorkspaceSkuCapacityReservationLevel(300)
	WorkspaceSkuCapacityReservationLevel400  = WorkspaceSkuCapacityReservationLevel(400)
	WorkspaceSkuCapacityReservationLevel500  = WorkspaceSkuCapacityReservationLevel(500)
	WorkspaceSkuCapacityReservationLevel5000 = WorkspaceSkuCapacityReservationLevel(5000)
)

// +kubebuilder:validation:Enum={"CapacityReservation","Free","LACluster","PerGB2018","PerNode","Premium","Standalone","Standard"}
type WorkspaceSkuName string

const (
	WorkspaceSkuNameCapacityReservation = WorkspaceSkuName("CapacityReservation")
	WorkspaceSkuNameFree                = WorkspaceSkuName("Free")
	WorkspaceSkuNameLACluster           = WorkspaceSkuName("LACluster")
	WorkspaceSkuNamePerGB2018           = WorkspaceSkuName("PerGB2018")
	WorkspaceSkuNamePerNode             = WorkspaceSkuName("PerNode")
	WorkspaceSkuNamePremium             = WorkspaceSkuName("Premium")
	WorkspaceSkuNameStandalone          = WorkspaceSkuName("Standalone")
	WorkspaceSkuNameStandard            = WorkspaceSkuName("Standard")
)

func init() {
	SchemeBuilder.Register(&Workspace{}, &WorkspaceList{})
}
