// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Workspaces_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspaces_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacesSPECARM, WorkspacesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacesSPECARM runs a test to see if a specific instance of Workspaces_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacesSPECARM(subject Workspaces_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspaces_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspaces_SPECARM instances for property testing - lazily instantiated by WorkspacesSPECARMGenerator()
var workspacesSPECARMGenerator gopter.Gen

// WorkspacesSPECARMGenerator returns a generator of Workspaces_SPECARM instances for property testing.
// We first initialize workspacesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacesSPECARMGenerator() gopter.Gen {
	if workspacesSPECARMGenerator != nil {
		return workspacesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesSPECARM(generators)
	workspacesSPECARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesSPECARM(generators)
	AddRelatedPropertyGeneratorsForWorkspacesSPECARM(generators)
	workspacesSPECARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_SPECARM{}), generators)

	return workspacesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspacesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WorkspacePropertiesSpecARMGenerator())
}

func Test_WorkspaceProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacePropertiesSpecARM, WorkspacePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacePropertiesSpecARM runs a test to see if a specific instance of WorkspaceProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacePropertiesSpecARM(subject WorkspaceProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceProperties_SpecARM instances for property testing - lazily instantiated by
//WorkspacePropertiesSpecARMGenerator()
var workspacePropertiesSpecARMGenerator gopter.Gen

// WorkspacePropertiesSpecARMGenerator returns a generator of WorkspaceProperties_SpecARM instances for property testing.
// We first initialize workspacePropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacePropertiesSpecARMGenerator() gopter.Gen {
	if workspacePropertiesSpecARMGenerator != nil {
		return workspacePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacePropertiesSpecARM(generators)
	workspacePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacePropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForWorkspacePropertiesSpecARM(generators)
	workspacePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_SpecARM{}), generators)

	return workspacePropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacePropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["ForceCmkForQuery"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		WorkspacePropertiesSpecProvisioningStateCanceled,
		WorkspacePropertiesSpecProvisioningStateCreating,
		WorkspacePropertiesSpecProvisioningStateDeleting,
		WorkspacePropertiesSpecProvisioningStateFailed,
		WorkspacePropertiesSpecProvisioningStateProvisioningAccount,
		WorkspacePropertiesSpecProvisioningStateSucceeded,
		WorkspacePropertiesSpecProvisioningStateUpdating))
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_SpecDisabled, PublicNetworkAccessType_SpecEnabled))
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_SpecDisabled, PublicNetworkAccessType_SpecEnabled))
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWorkspacePropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["Features"] = gen.PtrOf(WorkspaceFeaturesSpecARMGenerator())
	gens["Sku"] = gen.PtrOf(WorkspaceSkuSpecARMGenerator())
	gens["WorkspaceCapping"] = gen.PtrOf(WorkspaceCappingSpecARMGenerator())
}

func Test_WorkspaceCapping_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceCapping_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceCappingSpecARM, WorkspaceCappingSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceCappingSpecARM runs a test to see if a specific instance of WorkspaceCapping_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceCappingSpecARM(subject WorkspaceCapping_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceCapping_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceCapping_SpecARM instances for property testing - lazily instantiated by
//WorkspaceCappingSpecARMGenerator()
var workspaceCappingSpecARMGenerator gopter.Gen

// WorkspaceCappingSpecARMGenerator returns a generator of WorkspaceCapping_SpecARM instances for property testing.
func WorkspaceCappingSpecARMGenerator() gopter.Gen {
	if workspaceCappingSpecARMGenerator != nil {
		return workspaceCappingSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceCappingSpecARM(generators)
	workspaceCappingSpecARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceCapping_SpecARM{}), generators)

	return workspaceCappingSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceCappingSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceCappingSpecARM(gens map[string]gopter.Gen) {
	gens["DailyQuotaGb"] = gen.PtrOf(gen.Float64())
}

func Test_WorkspaceFeatures_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceFeatures_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceFeaturesSpecARM, WorkspaceFeaturesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceFeaturesSpecARM runs a test to see if a specific instance of WorkspaceFeatures_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceFeaturesSpecARM(subject WorkspaceFeatures_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceFeatures_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceFeatures_SpecARM instances for property testing - lazily instantiated by
//WorkspaceFeaturesSpecARMGenerator()
var workspaceFeaturesSpecARMGenerator gopter.Gen

// WorkspaceFeaturesSpecARMGenerator returns a generator of WorkspaceFeatures_SpecARM instances for property testing.
func WorkspaceFeaturesSpecARMGenerator() gopter.Gen {
	if workspaceFeaturesSpecARMGenerator != nil {
		return workspaceFeaturesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceFeaturesSpecARM(generators)
	workspaceFeaturesSpecARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceFeatures_SpecARM{}), generators)

	return workspaceFeaturesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceFeaturesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceFeaturesSpecARM(gens map[string]gopter.Gen) {
	gens["ClusterResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["EnableDataExport"] = gen.PtrOf(gen.Bool())
	gens["EnableLogAccessUsingOnlyResourcePermissions"] = gen.PtrOf(gen.Bool())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
}

func Test_WorkspaceSku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceSku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceSkuSpecARM, WorkspaceSkuSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceSkuSpecARM runs a test to see if a specific instance of WorkspaceSku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceSkuSpecARM(subject WorkspaceSku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceSku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceSku_SpecARM instances for property testing - lazily instantiated by
//WorkspaceSkuSpecARMGenerator()
var workspaceSkuSpecARMGenerator gopter.Gen

// WorkspaceSkuSpecARMGenerator returns a generator of WorkspaceSku_SpecARM instances for property testing.
func WorkspaceSkuSpecARMGenerator() gopter.Gen {
	if workspaceSkuSpecARMGenerator != nil {
		return workspaceSkuSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSkuSpecARM(generators)
	workspaceSkuSpecARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceSku_SpecARM{}), generators)

	return workspaceSkuSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceSkuSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceSkuSpecARM(gens map[string]gopter.Gen) {
	gens["CapacityReservationLevel"] = gen.PtrOf(gen.OneConstOf(
		WorkspaceSkuSpecCapacityReservationLevel100,
		WorkspaceSkuSpecCapacityReservationLevel1000,
		WorkspaceSkuSpecCapacityReservationLevel200,
		WorkspaceSkuSpecCapacityReservationLevel2000,
		WorkspaceSkuSpecCapacityReservationLevel300,
		WorkspaceSkuSpecCapacityReservationLevel400,
		WorkspaceSkuSpecCapacityReservationLevel500,
		WorkspaceSkuSpecCapacityReservationLevel5000))
	gens["Name"] = gen.OneConstOf(
		WorkspaceSkuSpecNameCapacityReservation,
		WorkspaceSkuSpecNameFree,
		WorkspaceSkuSpecNameLACluster,
		WorkspaceSkuSpecNamePerGB2018,
		WorkspaceSkuSpecNamePerNode,
		WorkspaceSkuSpecNamePremium,
		WorkspaceSkuSpecNameStandalone,
		WorkspaceSkuSpecNameStandard)
}
