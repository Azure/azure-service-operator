// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"fmt"
	v20210601s "github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1beta20210601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.OperationalInsights.json#/resourceDefinitions/workspaces
type Workspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Workspaces_Spec  `json:"spec,omitempty"`
	Status            Workspace_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Workspace{}

// GetConditions returns the conditions of the resource
func (workspace *Workspace) GetConditions() conditions.Conditions {
	return workspace.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (workspace *Workspace) SetConditions(conditions conditions.Conditions) {
	workspace.Status.Conditions = conditions
}

var _ conversion.Convertible = &Workspace{}

// ConvertFrom populates our Workspace from the provided hub Workspace
func (workspace *Workspace) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210601s.Workspace)
	if !ok {
		return fmt.Errorf("expected operationalinsights/v1beta20210601storage/Workspace but received %T instead", hub)
	}

	return workspace.AssignPropertiesFromWorkspace(source)
}

// ConvertTo populates the provided hub Workspace from our Workspace
func (workspace *Workspace) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210601s.Workspace)
	if !ok {
		return fmt.Errorf("expected operationalinsights/v1beta20210601storage/Workspace but received %T instead", hub)
	}

	return workspace.AssignPropertiesToWorkspace(destination)
}

// +kubebuilder:webhook:path=/mutate-operationalinsights-azure-com-v1beta20210601-workspace,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=operationalinsights.azure.com,resources=workspaces,verbs=create;update,versions=v1beta20210601,name=default.v1beta20210601.workspaces.operationalinsights.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Workspace{}

// Default applies defaults to the Workspace resource
func (workspace *Workspace) Default() {
	workspace.defaultImpl()
	var temp interface{} = workspace
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (workspace *Workspace) defaultAzureName() {
	if workspace.Spec.AzureName == "" {
		workspace.Spec.AzureName = workspace.Name
	}
}

// defaultImpl applies the code generated defaults to the Workspace resource
func (workspace *Workspace) defaultImpl() { workspace.defaultAzureName() }

var _ genruntime.KubernetesResource = &Workspace{}

// AzureName returns the Azure name of the resource
func (workspace *Workspace) AzureName() string {
	return workspace.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (workspace Workspace) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (workspace *Workspace) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (workspace *Workspace) GetSpec() genruntime.ConvertibleSpec {
	return &workspace.Spec
}

// GetStatus returns the status of this resource
func (workspace *Workspace) GetStatus() genruntime.ConvertibleStatus {
	return &workspace.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.OperationalInsights/workspaces"
func (workspace *Workspace) GetType() string {
	return "Microsoft.OperationalInsights/workspaces"
}

// NewEmptyStatus returns a new empty (blank) status
func (workspace *Workspace) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Workspace_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (workspace *Workspace) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(workspace.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  workspace.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (workspace *Workspace) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Workspace_STATUS); ok {
		workspace.Status = *st
		return nil
	}

	// Convert status to required version
	var st Workspace_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	workspace.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-operationalinsights-azure-com-v1beta20210601-workspace,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=operationalinsights.azure.com,resources=workspaces,verbs=create;update,versions=v1beta20210601,name=validate.v1beta20210601.workspaces.operationalinsights.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Workspace{}

// ValidateCreate validates the creation of the resource
func (workspace *Workspace) ValidateCreate() error {
	validations := workspace.createValidations()
	var temp interface{} = workspace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (workspace *Workspace) ValidateDelete() error {
	validations := workspace.deleteValidations()
	var temp interface{} = workspace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (workspace *Workspace) ValidateUpdate(old runtime.Object) error {
	validations := workspace.updateValidations()
	var temp interface{} = workspace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (workspace *Workspace) createValidations() []func() error {
	return []func() error{workspace.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (workspace *Workspace) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (workspace *Workspace) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return workspace.validateResourceReferences()
		},
		workspace.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (workspace *Workspace) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&workspace.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (workspace *Workspace) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Workspace)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, workspace)
}

// AssignPropertiesFromWorkspace populates our Workspace from the provided source Workspace
func (workspace *Workspace) AssignPropertiesFromWorkspace(source *v20210601s.Workspace) error {

	// ObjectMeta
	workspace.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Workspaces_Spec
	err := spec.AssignPropertiesFromWorkspacesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWorkspacesSpec() to populate field Spec")
	}
	workspace.Spec = spec

	// Status
	var status Workspace_STATUS
	err = status.AssignPropertiesFromWorkspaceSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceSTATUS() to populate field Status")
	}
	workspace.Status = status

	// No error
	return nil
}

// AssignPropertiesToWorkspace populates the provided destination Workspace from our Workspace
func (workspace *Workspace) AssignPropertiesToWorkspace(destination *v20210601s.Workspace) error {

	// ObjectMeta
	destination.ObjectMeta = *workspace.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210601s.Workspaces_Spec
	err := workspace.Spec.AssignPropertiesToWorkspacesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWorkspacesSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210601s.Workspace_STATUS
	err = workspace.Status.AssignPropertiesToWorkspaceSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWorkspaceSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (workspace *Workspace) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: workspace.Spec.OriginalVersion(),
		Kind:    "Workspace",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.OperationalInsights.json#/resourceDefinitions/workspaces
type WorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workspace `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-06-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2021-06-01")

type Workspace_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CreatedDate: Workspace creation date.
	CreatedDate *string `json:"createdDate,omitempty"`

	// CustomerId: This is a read-only property. Represents the ID associated with the workspace.
	CustomerId *string `json:"customerId,omitempty"`

	// Etag: The etag of the workspace.
	Etag *string `json:"etag,omitempty"`

	// Features: Workspace features.
	Features *WorkspaceFeatures_STATUS `json:"features,omitempty"`

	// ForceCmkForQuery: Indicates whether customer managed storage is mandatory for query management.
	ForceCmkForQuery *bool `json:"forceCmkForQuery,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// ModifiedDate: Workspace modification date.
	ModifiedDate *string `json:"modifiedDate,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// PrivateLinkScopedResources: List of linked private link scope resources.
	PrivateLinkScopedResources []PrivateLinkScopedResource_STATUS `json:"privateLinkScopedResources,omitempty"`

	// ProvisioningState: The provisioning state of the workspace.
	ProvisioningState *WorkspacePropertiesSTATUSProvisioningState `json:"provisioningState,omitempty"`

	// PublicNetworkAccessForIngestion: The network access type for accessing Log Analytics ingestion.
	PublicNetworkAccessForIngestion *PublicNetworkAccessType_STATUS `json:"publicNetworkAccessForIngestion,omitempty"`

	// PublicNetworkAccessForQuery: The network access type for accessing Log Analytics query.
	PublicNetworkAccessForQuery *PublicNetworkAccessType_STATUS `json:"publicNetworkAccessForQuery,omitempty"`

	// RetentionInDays: The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers
	// documentation for details.
	RetentionInDays *int `json:"retentionInDays,omitempty"`

	// Sku: The SKU of the workspace.
	Sku *WorkspaceSku_STATUS `json:"sku,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	// WorkspaceCapping: The daily volume cap for ingestion.
	WorkspaceCapping *WorkspaceCapping_STATUS `json:"workspaceCapping,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Workspace_STATUS{}

// ConvertStatusFrom populates our Workspace_STATUS from the provided source
func (workspace *Workspace_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210601s.Workspace_STATUS)
	if ok {
		// Populate our instance from source
		return workspace.AssignPropertiesFromWorkspaceSTATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210601s.Workspace_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = workspace.AssignPropertiesFromWorkspaceSTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Workspace_STATUS
func (workspace *Workspace_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210601s.Workspace_STATUS)
	if ok {
		// Populate destination from our instance
		return workspace.AssignPropertiesToWorkspaceSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210601s.Workspace_STATUS{}
	err := workspace.AssignPropertiesToWorkspaceSTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Workspace_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspace *Workspace_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Workspace_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspace *Workspace_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Workspace_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Workspace_STATUSARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedDate != nil {
			createdDate := *typedInput.Properties.CreatedDate
			workspace.CreatedDate = &createdDate
		}
	}

	// Set property ‘CustomerId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomerId != nil {
			customerId := *typedInput.Properties.CustomerId
			workspace.CustomerId = &customerId
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		workspace.Etag = &etag
	}

	// Set property ‘Features’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Features != nil {
			var features1 WorkspaceFeatures_STATUS
			err := features1.PopulateFromARM(owner, *typedInput.Properties.Features)
			if err != nil {
				return err
			}
			features := features1
			workspace.Features = &features
		}
	}

	// Set property ‘ForceCmkForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForceCmkForQuery != nil {
			forceCmkForQuery := *typedInput.Properties.ForceCmkForQuery
			workspace.ForceCmkForQuery = &forceCmkForQuery
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		workspace.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		workspace.Location = &location
	}

	// Set property ‘ModifiedDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ModifiedDate != nil {
			modifiedDate := *typedInput.Properties.ModifiedDate
			workspace.ModifiedDate = &modifiedDate
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		workspace.Name = &name
	}

	// Set property ‘PrivateLinkScopedResources’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateLinkScopedResources {
			var item1 PrivateLinkScopedResource_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			workspace.PrivateLinkScopedResources = append(workspace.PrivateLinkScopedResources, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			workspace.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccessForIngestion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForIngestion != nil {
			publicNetworkAccessForIngestion := *typedInput.Properties.PublicNetworkAccessForIngestion
			workspace.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
		}
	}

	// Set property ‘PublicNetworkAccessForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForQuery != nil {
			publicNetworkAccessForQuery := *typedInput.Properties.PublicNetworkAccessForQuery
			workspace.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
		}
	}

	// Set property ‘RetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionInDays != nil {
			retentionInDays := *typedInput.Properties.RetentionInDays
			workspace.RetentionInDays = &retentionInDays
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 WorkspaceSku_STATUS
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			workspace.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		workspace.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			workspace.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		workspace.Type = &typeVar
	}

	// Set property ‘WorkspaceCapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WorkspaceCapping != nil {
			var workspaceCapping1 WorkspaceCapping_STATUS
			err := workspaceCapping1.PopulateFromARM(owner, *typedInput.Properties.WorkspaceCapping)
			if err != nil {
				return err
			}
			workspaceCapping := workspaceCapping1
			workspace.WorkspaceCapping = &workspaceCapping
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceSTATUS populates our Workspace_STATUS from the provided source Workspace_STATUS
func (workspace *Workspace_STATUS) AssignPropertiesFromWorkspaceSTATUS(source *v20210601s.Workspace_STATUS) error {

	// Conditions
	workspace.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedDate
	workspace.CreatedDate = genruntime.ClonePointerToString(source.CreatedDate)

	// CustomerId
	workspace.CustomerId = genruntime.ClonePointerToString(source.CustomerId)

	// Etag
	workspace.Etag = genruntime.ClonePointerToString(source.Etag)

	// Features
	if source.Features != nil {
		var feature WorkspaceFeatures_STATUS
		err := feature.AssignPropertiesFromWorkspaceFeaturesSTATUS(source.Features)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceFeaturesSTATUS() to populate field Features")
		}
		workspace.Features = &feature
	} else {
		workspace.Features = nil
	}

	// ForceCmkForQuery
	if source.ForceCmkForQuery != nil {
		forceCmkForQuery := *source.ForceCmkForQuery
		workspace.ForceCmkForQuery = &forceCmkForQuery
	} else {
		workspace.ForceCmkForQuery = nil
	}

	// Id
	workspace.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	workspace.Location = genruntime.ClonePointerToString(source.Location)

	// ModifiedDate
	workspace.ModifiedDate = genruntime.ClonePointerToString(source.ModifiedDate)

	// Name
	workspace.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateLinkScopedResources
	if source.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]PrivateLinkScopedResource_STATUS, len(source.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range source.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource PrivateLinkScopedResource_STATUS
			err := privateLinkScopedResource.AssignPropertiesFromPrivateLinkScopedResourceSTATUS(&privateLinkScopedResourceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateLinkScopedResourceSTATUS() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		workspace.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		workspace.PrivateLinkScopedResources = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := WorkspacePropertiesSTATUSProvisioningState(*source.ProvisioningState)
		workspace.ProvisioningState = &provisioningState
	} else {
		workspace.ProvisioningState = nil
	}

	// PublicNetworkAccessForIngestion
	if source.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := PublicNetworkAccessType_STATUS(*source.PublicNetworkAccessForIngestion)
		workspace.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		workspace.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if source.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := PublicNetworkAccessType_STATUS(*source.PublicNetworkAccessForQuery)
		workspace.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		workspace.PublicNetworkAccessForQuery = nil
	}

	// RetentionInDays
	workspace.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// Sku
	if source.Sku != nil {
		var sku WorkspaceSku_STATUS
		err := sku.AssignPropertiesFromWorkspaceSkuSTATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceSkuSTATUS() to populate field Sku")
		}
		workspace.Sku = &sku
	} else {
		workspace.Sku = nil
	}

	// Tags
	workspace.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	workspace.Type = genruntime.ClonePointerToString(source.Type)

	// WorkspaceCapping
	if source.WorkspaceCapping != nil {
		var workspaceCapping WorkspaceCapping_STATUS
		err := workspaceCapping.AssignPropertiesFromWorkspaceCappingSTATUS(source.WorkspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceCappingSTATUS() to populate field WorkspaceCapping")
		}
		workspace.WorkspaceCapping = &workspaceCapping
	} else {
		workspace.WorkspaceCapping = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceSTATUS populates the provided destination Workspace_STATUS from our Workspace_STATUS
func (workspace *Workspace_STATUS) AssignPropertiesToWorkspaceSTATUS(destination *v20210601s.Workspace_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(workspace.Conditions)

	// CreatedDate
	destination.CreatedDate = genruntime.ClonePointerToString(workspace.CreatedDate)

	// CustomerId
	destination.CustomerId = genruntime.ClonePointerToString(workspace.CustomerId)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(workspace.Etag)

	// Features
	if workspace.Features != nil {
		var feature v20210601s.WorkspaceFeatures_STATUS
		err := workspace.Features.AssignPropertiesToWorkspaceFeaturesSTATUS(&feature)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceFeaturesSTATUS() to populate field Features")
		}
		destination.Features = &feature
	} else {
		destination.Features = nil
	}

	// ForceCmkForQuery
	if workspace.ForceCmkForQuery != nil {
		forceCmkForQuery := *workspace.ForceCmkForQuery
		destination.ForceCmkForQuery = &forceCmkForQuery
	} else {
		destination.ForceCmkForQuery = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(workspace.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(workspace.Location)

	// ModifiedDate
	destination.ModifiedDate = genruntime.ClonePointerToString(workspace.ModifiedDate)

	// Name
	destination.Name = genruntime.ClonePointerToString(workspace.Name)

	// PrivateLinkScopedResources
	if workspace.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]v20210601s.PrivateLinkScopedResource_STATUS, len(workspace.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range workspace.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource v20210601s.PrivateLinkScopedResource_STATUS
			err := privateLinkScopedResourceItem.AssignPropertiesToPrivateLinkScopedResourceSTATUS(&privateLinkScopedResource)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateLinkScopedResourceSTATUS() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		destination.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		destination.PrivateLinkScopedResources = nil
	}

	// ProvisioningState
	if workspace.ProvisioningState != nil {
		provisioningState := string(*workspace.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccessForIngestion
	if workspace.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := string(*workspace.PublicNetworkAccessForIngestion)
		destination.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		destination.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if workspace.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := string(*workspace.PublicNetworkAccessForQuery)
		destination.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		destination.PublicNetworkAccessForQuery = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(workspace.RetentionInDays)

	// Sku
	if workspace.Sku != nil {
		var sku v20210601s.WorkspaceSku_STATUS
		err := workspace.Sku.AssignPropertiesToWorkspaceSkuSTATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceSkuSTATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(workspace.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(workspace.Type)

	// WorkspaceCapping
	if workspace.WorkspaceCapping != nil {
		var workspaceCapping v20210601s.WorkspaceCapping_STATUS
		err := workspace.WorkspaceCapping.AssignPropertiesToWorkspaceCappingSTATUS(&workspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceCappingSTATUS() to populate field WorkspaceCapping")
		}
		destination.WorkspaceCapping = &workspaceCapping
	} else {
		destination.WorkspaceCapping = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Workspaces_Spec struct {
	// +kubebuilder:validation:MaxLength=63
	// +kubebuilder:validation:MinLength=4
	// +kubebuilder:validation:Pattern="^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Etag: The etag of the workspace.
	Etag *string `json:"etag,omitempty"`

	// Features: Workspace features.
	Features *WorkspaceFeatures `json:"features,omitempty"`

	// ForceCmkForQuery: Indicates whether customer managed storage is mandatory for query management.
	ForceCmkForQuery *bool `json:"forceCmkForQuery,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// ProvisioningState: The provisioning state of the workspace.
	ProvisioningState *WorkspacePropertiesProvisioningState `json:"provisioningState,omitempty"`

	// PublicNetworkAccessForIngestion: The network access type for accessing Log Analytics ingestion.
	PublicNetworkAccessForIngestion *WorkspacePropertiesPublicNetworkAccessForIngestion `json:"publicNetworkAccessForIngestion,omitempty"`

	// PublicNetworkAccessForQuery: The network access type for accessing Log Analytics query.
	PublicNetworkAccessForQuery *WorkspacePropertiesPublicNetworkAccessForQuery `json:"publicNetworkAccessForQuery,omitempty"`

	// RetentionInDays: The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers
	// documentation for details.
	RetentionInDays *int `json:"retentionInDays,omitempty"`

	// Sku: The SKU (tier) of a workspace.
	Sku *WorkspaceSku `json:"sku,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// WorkspaceCapping: The daily volume cap for ingestion.
	WorkspaceCapping *WorkspaceCapping `json:"workspaceCapping,omitempty"`
}

var _ genruntime.ARMTransformer = &Workspaces_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (workspaces *Workspaces_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if workspaces == nil {
		return nil, nil
	}
	result := &Workspaces_SpecARM{}

	// Set property ‘Etag’:
	if workspaces.Etag != nil {
		etag := *workspaces.Etag
		result.Etag = &etag
	}

	// Set property ‘Location’:
	if workspaces.Location != nil {
		location := *workspaces.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if workspaces.Features != nil ||
		workspaces.ForceCmkForQuery != nil ||
		workspaces.ProvisioningState != nil ||
		workspaces.PublicNetworkAccessForIngestion != nil ||
		workspaces.PublicNetworkAccessForQuery != nil ||
		workspaces.RetentionInDays != nil ||
		workspaces.Sku != nil ||
		workspaces.WorkspaceCapping != nil {
		result.Properties = &WorkspacePropertiesARM{}
	}
	if workspaces.Features != nil {
		featuresARM, err := (*workspaces.Features).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		features := *featuresARM.(*WorkspaceFeaturesARM)
		result.Properties.Features = &features
	}
	if workspaces.ForceCmkForQuery != nil {
		forceCmkForQuery := *workspaces.ForceCmkForQuery
		result.Properties.ForceCmkForQuery = &forceCmkForQuery
	}
	if workspaces.ProvisioningState != nil {
		provisioningState := *workspaces.ProvisioningState
		result.Properties.ProvisioningState = &provisioningState
	}
	if workspaces.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := *workspaces.PublicNetworkAccessForIngestion
		result.Properties.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	}
	if workspaces.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := *workspaces.PublicNetworkAccessForQuery
		result.Properties.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	}
	if workspaces.RetentionInDays != nil {
		retentionInDays := *workspaces.RetentionInDays
		result.Properties.RetentionInDays = &retentionInDays
	}
	if workspaces.Sku != nil {
		skuARM, err := (*workspaces.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*WorkspaceSkuARM)
		result.Properties.Sku = &sku
	}
	if workspaces.WorkspaceCapping != nil {
		workspaceCappingARM, err := (*workspaces.WorkspaceCapping).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		workspaceCapping := *workspaceCappingARM.(*WorkspaceCappingARM)
		result.Properties.WorkspaceCapping = &workspaceCapping
	}

	// Set property ‘Tags’:
	if workspaces.Tags != nil {
		result.Tags = make(map[string]string, len(workspaces.Tags))
		for key, value := range workspaces.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspaces *Workspaces_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Workspaces_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspaces *Workspaces_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Workspaces_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Workspaces_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	workspaces.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		workspaces.Etag = &etag
	}

	// Set property ‘Features’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Features != nil {
			var features1 WorkspaceFeatures
			err := features1.PopulateFromARM(owner, *typedInput.Properties.Features)
			if err != nil {
				return err
			}
			features := features1
			workspaces.Features = &features
		}
	}

	// Set property ‘ForceCmkForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForceCmkForQuery != nil {
			forceCmkForQuery := *typedInput.Properties.ForceCmkForQuery
			workspaces.ForceCmkForQuery = &forceCmkForQuery
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		workspaces.Location = &location
	}

	// Set property ‘Owner’:
	workspaces.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			workspaces.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccessForIngestion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForIngestion != nil {
			publicNetworkAccessForIngestion := *typedInput.Properties.PublicNetworkAccessForIngestion
			workspaces.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
		}
	}

	// Set property ‘PublicNetworkAccessForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForQuery != nil {
			publicNetworkAccessForQuery := *typedInput.Properties.PublicNetworkAccessForQuery
			workspaces.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
		}
	}

	// Set property ‘RetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionInDays != nil {
			retentionInDays := *typedInput.Properties.RetentionInDays
			workspaces.RetentionInDays = &retentionInDays
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 WorkspaceSku
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			workspaces.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		workspaces.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			workspaces.Tags[key] = value
		}
	}

	// Set property ‘WorkspaceCapping’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WorkspaceCapping != nil {
			var workspaceCapping1 WorkspaceCapping
			err := workspaceCapping1.PopulateFromARM(owner, *typedInput.Properties.WorkspaceCapping)
			if err != nil {
				return err
			}
			workspaceCapping := workspaceCapping1
			workspaces.WorkspaceCapping = &workspaceCapping
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Workspaces_Spec{}

// ConvertSpecFrom populates our Workspaces_Spec from the provided source
func (workspaces *Workspaces_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210601s.Workspaces_Spec)
	if ok {
		// Populate our instance from source
		return workspaces.AssignPropertiesFromWorkspacesSpec(src)
	}

	// Convert to an intermediate form
	src = &v20210601s.Workspaces_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = workspaces.AssignPropertiesFromWorkspacesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Workspaces_Spec
func (workspaces *Workspaces_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210601s.Workspaces_Spec)
	if ok {
		// Populate destination from our instance
		return workspaces.AssignPropertiesToWorkspacesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210601s.Workspaces_Spec{}
	err := workspaces.AssignPropertiesToWorkspacesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromWorkspacesSpec populates our Workspaces_Spec from the provided source Workspaces_Spec
func (workspaces *Workspaces_Spec) AssignPropertiesFromWorkspacesSpec(source *v20210601s.Workspaces_Spec) error {

	// AzureName
	workspaces.AzureName = source.AzureName

	// Etag
	workspaces.Etag = genruntime.ClonePointerToString(source.Etag)

	// Features
	if source.Features != nil {
		var feature WorkspaceFeatures
		err := feature.AssignPropertiesFromWorkspaceFeatures(source.Features)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceFeatures() to populate field Features")
		}
		workspaces.Features = &feature
	} else {
		workspaces.Features = nil
	}

	// ForceCmkForQuery
	if source.ForceCmkForQuery != nil {
		forceCmkForQuery := *source.ForceCmkForQuery
		workspaces.ForceCmkForQuery = &forceCmkForQuery
	} else {
		workspaces.ForceCmkForQuery = nil
	}

	// Location
	workspaces.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		workspaces.Owner = &owner
	} else {
		workspaces.Owner = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := WorkspacePropertiesProvisioningState(*source.ProvisioningState)
		workspaces.ProvisioningState = &provisioningState
	} else {
		workspaces.ProvisioningState = nil
	}

	// PublicNetworkAccessForIngestion
	if source.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := WorkspacePropertiesPublicNetworkAccessForIngestion(*source.PublicNetworkAccessForIngestion)
		workspaces.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		workspaces.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if source.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := WorkspacePropertiesPublicNetworkAccessForQuery(*source.PublicNetworkAccessForQuery)
		workspaces.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		workspaces.PublicNetworkAccessForQuery = nil
	}

	// RetentionInDays
	workspaces.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// Sku
	if source.Sku != nil {
		var sku WorkspaceSku
		err := sku.AssignPropertiesFromWorkspaceSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceSku() to populate field Sku")
		}
		workspaces.Sku = &sku
	} else {
		workspaces.Sku = nil
	}

	// Tags
	workspaces.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// WorkspaceCapping
	if source.WorkspaceCapping != nil {
		var workspaceCapping WorkspaceCapping
		err := workspaceCapping.AssignPropertiesFromWorkspaceCapping(source.WorkspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWorkspaceCapping() to populate field WorkspaceCapping")
		}
		workspaces.WorkspaceCapping = &workspaceCapping
	} else {
		workspaces.WorkspaceCapping = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspacesSpec populates the provided destination Workspaces_Spec from our Workspaces_Spec
func (workspaces *Workspaces_Spec) AssignPropertiesToWorkspacesSpec(destination *v20210601s.Workspaces_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = workspaces.AzureName

	// Etag
	destination.Etag = genruntime.ClonePointerToString(workspaces.Etag)

	// Features
	if workspaces.Features != nil {
		var feature v20210601s.WorkspaceFeatures
		err := workspaces.Features.AssignPropertiesToWorkspaceFeatures(&feature)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceFeatures() to populate field Features")
		}
		destination.Features = &feature
	} else {
		destination.Features = nil
	}

	// ForceCmkForQuery
	if workspaces.ForceCmkForQuery != nil {
		forceCmkForQuery := *workspaces.ForceCmkForQuery
		destination.ForceCmkForQuery = &forceCmkForQuery
	} else {
		destination.ForceCmkForQuery = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(workspaces.Location)

	// OriginalVersion
	destination.OriginalVersion = workspaces.OriginalVersion()

	// Owner
	if workspaces.Owner != nil {
		owner := workspaces.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// ProvisioningState
	if workspaces.ProvisioningState != nil {
		provisioningState := string(*workspaces.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccessForIngestion
	if workspaces.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := string(*workspaces.PublicNetworkAccessForIngestion)
		destination.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		destination.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if workspaces.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := string(*workspaces.PublicNetworkAccessForQuery)
		destination.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		destination.PublicNetworkAccessForQuery = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(workspaces.RetentionInDays)

	// Sku
	if workspaces.Sku != nil {
		var sku v20210601s.WorkspaceSku
		err := workspaces.Sku.AssignPropertiesToWorkspaceSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(workspaces.Tags)

	// WorkspaceCapping
	if workspaces.WorkspaceCapping != nil {
		var workspaceCapping v20210601s.WorkspaceCapping
		err := workspaces.WorkspaceCapping.AssignPropertiesToWorkspaceCapping(&workspaceCapping)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWorkspaceCapping() to populate field WorkspaceCapping")
		}
		destination.WorkspaceCapping = &workspaceCapping
	} else {
		destination.WorkspaceCapping = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (workspaces *Workspaces_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (workspaces *Workspaces_Spec) SetAzureName(azureName string) { workspaces.AzureName = azureName }

type PrivateLinkScopedResource_STATUS struct {
	// ResourceId: The full resource Id of the private link scope resource.
	ResourceId *string `json:"resourceId,omitempty"`

	// ScopeId: The private link scope unique Identifier.
	ScopeId *string `json:"scopeId,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateLinkScopedResource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *PrivateLinkScopedResource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateLinkScopedResource_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *PrivateLinkScopedResource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateLinkScopedResource_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateLinkScopedResource_STATUSARM, got %T", armInput)
	}

	// Set property ‘ResourceId’:
	if typedInput.ResourceId != nil {
		resourceId := *typedInput.ResourceId
		resource.ResourceId = &resourceId
	}

	// Set property ‘ScopeId’:
	if typedInput.ScopeId != nil {
		scopeId := *typedInput.ScopeId
		resource.ScopeId = &scopeId
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateLinkScopedResourceSTATUS populates our PrivateLinkScopedResource_STATUS from the provided source PrivateLinkScopedResource_STATUS
func (resource *PrivateLinkScopedResource_STATUS) AssignPropertiesFromPrivateLinkScopedResourceSTATUS(source *v20210601s.PrivateLinkScopedResource_STATUS) error {

	// ResourceId
	resource.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// ScopeId
	resource.ScopeId = genruntime.ClonePointerToString(source.ScopeId)

	// No error
	return nil
}

// AssignPropertiesToPrivateLinkScopedResourceSTATUS populates the provided destination PrivateLinkScopedResource_STATUS from our PrivateLinkScopedResource_STATUS
func (resource *PrivateLinkScopedResource_STATUS) AssignPropertiesToPrivateLinkScopedResourceSTATUS(destination *v20210601s.PrivateLinkScopedResource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(resource.ResourceId)

	// ScopeId
	destination.ScopeId = genruntime.ClonePointerToString(resource.ScopeId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PublicNetworkAccessType_STATUS string

const (
	PublicNetworkAccessType_STATUS_Disabled = PublicNetworkAccessType_STATUS("Disabled")
	PublicNetworkAccessType_STATUS_Enabled  = PublicNetworkAccessType_STATUS("Enabled")
)

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.OperationalInsights.json#/definitions/WorkspaceCapping
type WorkspaceCapping struct {
	// DailyQuotaGb: The workspace daily quota for ingestion.
	DailyQuotaGb *float64 `json:"dailyQuotaGb,omitempty"`
}

var _ genruntime.ARMTransformer = &WorkspaceCapping{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (capping *WorkspaceCapping) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if capping == nil {
		return nil, nil
	}
	result := &WorkspaceCappingARM{}

	// Set property ‘DailyQuotaGb’:
	if capping.DailyQuotaGb != nil {
		dailyQuotaGb := *capping.DailyQuotaGb
		result.DailyQuotaGb = &dailyQuotaGb
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capping *WorkspaceCapping) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceCappingARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capping *WorkspaceCapping) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceCappingARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceCappingARM, got %T", armInput)
	}

	// Set property ‘DailyQuotaGb’:
	if typedInput.DailyQuotaGb != nil {
		dailyQuotaGb := *typedInput.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceCapping populates our WorkspaceCapping from the provided source WorkspaceCapping
func (capping *WorkspaceCapping) AssignPropertiesFromWorkspaceCapping(source *v20210601s.WorkspaceCapping) error {

	// DailyQuotaGb
	if source.DailyQuotaGb != nil {
		dailyQuotaGb := *source.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	} else {
		capping.DailyQuotaGb = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceCapping populates the provided destination WorkspaceCapping from our WorkspaceCapping
func (capping *WorkspaceCapping) AssignPropertiesToWorkspaceCapping(destination *v20210601s.WorkspaceCapping) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DailyQuotaGb
	if capping.DailyQuotaGb != nil {
		dailyQuotaGb := *capping.DailyQuotaGb
		destination.DailyQuotaGb = &dailyQuotaGb
	} else {
		destination.DailyQuotaGb = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceCapping_STATUS struct {
	// DailyQuotaGb: The workspace daily quota for ingestion.
	DailyQuotaGb *float64 `json:"dailyQuotaGb,omitempty"`

	// DataIngestionStatus: The status of data ingestion for this workspace.
	DataIngestionStatus *WorkspaceCappingSTATUSDataIngestionStatus `json:"dataIngestionStatus,omitempty"`

	// QuotaNextResetTime: The time when the quota will be rest.
	QuotaNextResetTime *string `json:"quotaNextResetTime,omitempty"`
}

var _ genruntime.FromARMConverter = &WorkspaceCapping_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capping *WorkspaceCapping_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceCapping_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capping *WorkspaceCapping_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceCapping_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceCapping_STATUSARM, got %T", armInput)
	}

	// Set property ‘DailyQuotaGb’:
	if typedInput.DailyQuotaGb != nil {
		dailyQuotaGb := *typedInput.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	}

	// Set property ‘DataIngestionStatus’:
	if typedInput.DataIngestionStatus != nil {
		dataIngestionStatus := *typedInput.DataIngestionStatus
		capping.DataIngestionStatus = &dataIngestionStatus
	}

	// Set property ‘QuotaNextResetTime’:
	if typedInput.QuotaNextResetTime != nil {
		quotaNextResetTime := *typedInput.QuotaNextResetTime
		capping.QuotaNextResetTime = &quotaNextResetTime
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceCappingSTATUS populates our WorkspaceCapping_STATUS from the provided source WorkspaceCapping_STATUS
func (capping *WorkspaceCapping_STATUS) AssignPropertiesFromWorkspaceCappingSTATUS(source *v20210601s.WorkspaceCapping_STATUS) error {

	// DailyQuotaGb
	if source.DailyQuotaGb != nil {
		dailyQuotaGb := *source.DailyQuotaGb
		capping.DailyQuotaGb = &dailyQuotaGb
	} else {
		capping.DailyQuotaGb = nil
	}

	// DataIngestionStatus
	if source.DataIngestionStatus != nil {
		dataIngestionStatus := WorkspaceCappingSTATUSDataIngestionStatus(*source.DataIngestionStatus)
		capping.DataIngestionStatus = &dataIngestionStatus
	} else {
		capping.DataIngestionStatus = nil
	}

	// QuotaNextResetTime
	capping.QuotaNextResetTime = genruntime.ClonePointerToString(source.QuotaNextResetTime)

	// No error
	return nil
}

// AssignPropertiesToWorkspaceCappingSTATUS populates the provided destination WorkspaceCapping_STATUS from our WorkspaceCapping_STATUS
func (capping *WorkspaceCapping_STATUS) AssignPropertiesToWorkspaceCappingSTATUS(destination *v20210601s.WorkspaceCapping_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DailyQuotaGb
	if capping.DailyQuotaGb != nil {
		dailyQuotaGb := *capping.DailyQuotaGb
		destination.DailyQuotaGb = &dailyQuotaGb
	} else {
		destination.DailyQuotaGb = nil
	}

	// DataIngestionStatus
	if capping.DataIngestionStatus != nil {
		dataIngestionStatus := string(*capping.DataIngestionStatus)
		destination.DataIngestionStatus = &dataIngestionStatus
	} else {
		destination.DataIngestionStatus = nil
	}

	// QuotaNextResetTime
	destination.QuotaNextResetTime = genruntime.ClonePointerToString(capping.QuotaNextResetTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.OperationalInsights.json#/definitions/WorkspaceFeatures
type WorkspaceFeatures struct {
	// AdditionalProperties: Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]v1.JSON `json:"additionalProperties,omitempty"`

	// ClusterResourceReference: Dedicated LA cluster resourceId that is linked to the workspaces.
	ClusterResourceReference *genruntime.ResourceReference `armReference:"ClusterResourceId" json:"clusterResourceReference,omitempty"`

	// DisableLocalAuth: Disable Non-AAD based Auth.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// EnableDataExport: Flag that indicate if data should be exported.
	EnableDataExport *bool `json:"enableDataExport,omitempty"`

	// EnableLogAccessUsingOnlyResourcePermissions: Flag that indicate which permission to use - resource or workspace or both.
	EnableLogAccessUsingOnlyResourcePermissions *bool `json:"enableLogAccessUsingOnlyResourcePermissions,omitempty"`

	// ImmediatePurgeDataOn30Days: Flag that describes if we want to remove the data after 30 days.
	ImmediatePurgeDataOn30Days *bool `json:"immediatePurgeDataOn30Days,omitempty"`
}

var _ genruntime.ARMTransformer = &WorkspaceFeatures{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (features *WorkspaceFeatures) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if features == nil {
		return nil, nil
	}
	result := &WorkspaceFeaturesARM{}

	// Set property ‘AdditionalProperties’:
	if features.AdditionalProperties != nil {
		result.AdditionalProperties = make(map[string]v1.JSON, len(features.AdditionalProperties))
		for key, value := range features.AdditionalProperties {
			result.AdditionalProperties[key] = *value.DeepCopy()
		}
	}

	// Set property ‘ClusterResourceId’:
	if features.ClusterResourceReference != nil {
		clusterResourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*features.ClusterResourceReference)
		if err != nil {
			return nil, err
		}
		clusterResourceReference := clusterResourceReferenceARMID
		result.ClusterResourceId = &clusterResourceReference
	}

	// Set property ‘DisableLocalAuth’:
	if features.DisableLocalAuth != nil {
		disableLocalAuth := *features.DisableLocalAuth
		result.DisableLocalAuth = &disableLocalAuth
	}

	// Set property ‘EnableDataExport’:
	if features.EnableDataExport != nil {
		enableDataExport := *features.EnableDataExport
		result.EnableDataExport = &enableDataExport
	}

	// Set property ‘EnableLogAccessUsingOnlyResourcePermissions’:
	if features.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermissions := *features.EnableLogAccessUsingOnlyResourcePermissions
		result.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermissions
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	if features.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Days := *features.ImmediatePurgeDataOn30Days
		result.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (features *WorkspaceFeatures) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceFeaturesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (features *WorkspaceFeatures) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceFeaturesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceFeaturesARM, got %T", armInput)
	}

	// Set property ‘AdditionalProperties’:
	if typedInput.AdditionalProperties != nil {
		features.AdditionalProperties = make(map[string]v1.JSON, len(typedInput.AdditionalProperties))
		for key, value := range typedInput.AdditionalProperties {
			features.AdditionalProperties[key] = *value.DeepCopy()
		}
	}

	// no assignment for property ‘ClusterResourceReference’

	// Set property ‘DisableLocalAuth’:
	if typedInput.DisableLocalAuth != nil {
		disableLocalAuth := *typedInput.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	}

	// Set property ‘EnableDataExport’:
	if typedInput.EnableDataExport != nil {
		enableDataExport := *typedInput.EnableDataExport
		features.EnableDataExport = &enableDataExport
	}

	// Set property ‘EnableLogAccessUsingOnlyResourcePermissions’:
	if typedInput.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermissions := *typedInput.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermissions
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	if typedInput.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Days := *typedInput.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceFeatures populates our WorkspaceFeatures from the provided source WorkspaceFeatures
func (features *WorkspaceFeatures) AssignPropertiesFromWorkspaceFeatures(source *v20210601s.WorkspaceFeatures) error {

	// AdditionalProperties
	if source.AdditionalProperties != nil {
		additionalPropertyMap := make(map[string]v1.JSON, len(source.AdditionalProperties))
		for additionalPropertyKey, additionalPropertyValue := range source.AdditionalProperties {
			// Shadow the loop variable to avoid aliasing
			additionalPropertyValue := additionalPropertyValue
			additionalPropertyMap[additionalPropertyKey] = *additionalPropertyValue.DeepCopy()
		}
		features.AdditionalProperties = additionalPropertyMap
	} else {
		features.AdditionalProperties = nil
	}

	// ClusterResourceReference
	if source.ClusterResourceReference != nil {
		clusterResourceReference := source.ClusterResourceReference.Copy()
		features.ClusterResourceReference = &clusterResourceReference
	} else {
		features.ClusterResourceReference = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	} else {
		features.DisableLocalAuth = nil
	}

	// EnableDataExport
	if source.EnableDataExport != nil {
		enableDataExport := *source.EnableDataExport
		features.EnableDataExport = &enableDataExport
	} else {
		features.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if source.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *source.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		features.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		features.ImmediatePurgeDataOn30Days = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceFeatures populates the provided destination WorkspaceFeatures from our WorkspaceFeatures
func (features *WorkspaceFeatures) AssignPropertiesToWorkspaceFeatures(destination *v20210601s.WorkspaceFeatures) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalProperties
	if features.AdditionalProperties != nil {
		additionalPropertyMap := make(map[string]v1.JSON, len(features.AdditionalProperties))
		for additionalPropertyKey, additionalPropertyValue := range features.AdditionalProperties {
			// Shadow the loop variable to avoid aliasing
			additionalPropertyValue := additionalPropertyValue
			additionalPropertyMap[additionalPropertyKey] = *additionalPropertyValue.DeepCopy()
		}
		destination.AdditionalProperties = additionalPropertyMap
	} else {
		destination.AdditionalProperties = nil
	}

	// ClusterResourceReference
	if features.ClusterResourceReference != nil {
		clusterResourceReference := features.ClusterResourceReference.Copy()
		destination.ClusterResourceReference = &clusterResourceReference
	} else {
		destination.ClusterResourceReference = nil
	}

	// DisableLocalAuth
	if features.DisableLocalAuth != nil {
		disableLocalAuth := *features.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// EnableDataExport
	if features.EnableDataExport != nil {
		enableDataExport := *features.EnableDataExport
		destination.EnableDataExport = &enableDataExport
	} else {
		destination.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if features.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *features.EnableLogAccessUsingOnlyResourcePermissions
		destination.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		destination.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if features.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *features.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceFeatures_STATUS struct {
	// ClusterResourceId: Dedicated LA cluster resourceId that is linked to the workspaces.
	ClusterResourceId *string `json:"clusterResourceId,omitempty"`

	// DisableLocalAuth: Disable Non-AAD based Auth.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// EnableDataExport: Flag that indicate if data should be exported.
	EnableDataExport *bool `json:"enableDataExport,omitempty"`

	// EnableLogAccessUsingOnlyResourcePermissions: Flag that indicate which permission to use - resource or workspace or both.
	EnableLogAccessUsingOnlyResourcePermissions *bool `json:"enableLogAccessUsingOnlyResourcePermissions,omitempty"`

	// ImmediatePurgeDataOn30Days: Flag that describes if we want to remove the data after 30 days.
	ImmediatePurgeDataOn30Days *bool `json:"immediatePurgeDataOn30Days,omitempty"`
}

var _ genruntime.FromARMConverter = &WorkspaceFeatures_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (features *WorkspaceFeatures_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceFeatures_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (features *WorkspaceFeatures_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceFeatures_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceFeatures_STATUSARM, got %T", armInput)
	}

	// Set property ‘ClusterResourceId’:
	if typedInput.ClusterResourceId != nil {
		clusterResourceId := *typedInput.ClusterResourceId
		features.ClusterResourceId = &clusterResourceId
	}

	// Set property ‘DisableLocalAuth’:
	if typedInput.DisableLocalAuth != nil {
		disableLocalAuth := *typedInput.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	}

	// Set property ‘EnableDataExport’:
	if typedInput.EnableDataExport != nil {
		enableDataExport := *typedInput.EnableDataExport
		features.EnableDataExport = &enableDataExport
	}

	// Set property ‘EnableLogAccessUsingOnlyResourcePermissions’:
	if typedInput.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermissions := *typedInput.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermissions
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	if typedInput.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Days := *typedInput.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceFeaturesSTATUS populates our WorkspaceFeatures_STATUS from the provided source WorkspaceFeatures_STATUS
func (features *WorkspaceFeatures_STATUS) AssignPropertiesFromWorkspaceFeaturesSTATUS(source *v20210601s.WorkspaceFeatures_STATUS) error {

	// ClusterResourceId
	features.ClusterResourceId = genruntime.ClonePointerToString(source.ClusterResourceId)

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		features.DisableLocalAuth = &disableLocalAuth
	} else {
		features.DisableLocalAuth = nil
	}

	// EnableDataExport
	if source.EnableDataExport != nil {
		enableDataExport := *source.EnableDataExport
		features.EnableDataExport = &enableDataExport
	} else {
		features.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if source.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *source.EnableLogAccessUsingOnlyResourcePermissions
		features.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		features.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		features.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		features.ImmediatePurgeDataOn30Days = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceFeaturesSTATUS populates the provided destination WorkspaceFeatures_STATUS from our WorkspaceFeatures_STATUS
func (features *WorkspaceFeatures_STATUS) AssignPropertiesToWorkspaceFeaturesSTATUS(destination *v20210601s.WorkspaceFeatures_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClusterResourceId
	destination.ClusterResourceId = genruntime.ClonePointerToString(features.ClusterResourceId)

	// DisableLocalAuth
	if features.DisableLocalAuth != nil {
		disableLocalAuth := *features.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// EnableDataExport
	if features.EnableDataExport != nil {
		enableDataExport := *features.EnableDataExport
		destination.EnableDataExport = &enableDataExport
	} else {
		destination.EnableDataExport = nil
	}

	// EnableLogAccessUsingOnlyResourcePermissions
	if features.EnableLogAccessUsingOnlyResourcePermissions != nil {
		enableLogAccessUsingOnlyResourcePermission := *features.EnableLogAccessUsingOnlyResourcePermissions
		destination.EnableLogAccessUsingOnlyResourcePermissions = &enableLogAccessUsingOnlyResourcePermission
	} else {
		destination.EnableLogAccessUsingOnlyResourcePermissions = nil
	}

	// ImmediatePurgeDataOn30Days
	if features.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *features.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Canceled","Creating","Deleting","Failed","ProvisioningAccount","Succeeded","Updating"}
type WorkspacePropertiesProvisioningState string

const (
	WorkspacePropertiesProvisioningState_Canceled            = WorkspacePropertiesProvisioningState("Canceled")
	WorkspacePropertiesProvisioningState_Creating            = WorkspacePropertiesProvisioningState("Creating")
	WorkspacePropertiesProvisioningState_Deleting            = WorkspacePropertiesProvisioningState("Deleting")
	WorkspacePropertiesProvisioningState_Failed              = WorkspacePropertiesProvisioningState("Failed")
	WorkspacePropertiesProvisioningState_ProvisioningAccount = WorkspacePropertiesProvisioningState("ProvisioningAccount")
	WorkspacePropertiesProvisioningState_Succeeded           = WorkspacePropertiesProvisioningState("Succeeded")
	WorkspacePropertiesProvisioningState_Updating            = WorkspacePropertiesProvisioningState("Updating")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type WorkspacePropertiesPublicNetworkAccessForIngestion string

const (
	WorkspacePropertiesPublicNetworkAccessForIngestion_Disabled = WorkspacePropertiesPublicNetworkAccessForIngestion("Disabled")
	WorkspacePropertiesPublicNetworkAccessForIngestion_Enabled  = WorkspacePropertiesPublicNetworkAccessForIngestion("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type WorkspacePropertiesPublicNetworkAccessForQuery string

const (
	WorkspacePropertiesPublicNetworkAccessForQuery_Disabled = WorkspacePropertiesPublicNetworkAccessForQuery("Disabled")
	WorkspacePropertiesPublicNetworkAccessForQuery_Enabled  = WorkspacePropertiesPublicNetworkAccessForQuery("Enabled")
)

type WorkspacePropertiesSTATUSProvisioningState string

const (
	WorkspacePropertiesSTATUSProvisioningState_Canceled            = WorkspacePropertiesSTATUSProvisioningState("Canceled")
	WorkspacePropertiesSTATUSProvisioningState_Creating            = WorkspacePropertiesSTATUSProvisioningState("Creating")
	WorkspacePropertiesSTATUSProvisioningState_Deleting            = WorkspacePropertiesSTATUSProvisioningState("Deleting")
	WorkspacePropertiesSTATUSProvisioningState_Failed              = WorkspacePropertiesSTATUSProvisioningState("Failed")
	WorkspacePropertiesSTATUSProvisioningState_ProvisioningAccount = WorkspacePropertiesSTATUSProvisioningState("ProvisioningAccount")
	WorkspacePropertiesSTATUSProvisioningState_Succeeded           = WorkspacePropertiesSTATUSProvisioningState("Succeeded")
	WorkspacePropertiesSTATUSProvisioningState_Updating            = WorkspacePropertiesSTATUSProvisioningState("Updating")
)

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.OperationalInsights.json#/definitions/WorkspaceSku
type WorkspaceSku struct {
	// CapacityReservationLevel: The capacity reservation level in GB for this workspace, when CapacityReservation sku is
	// selected.
	CapacityReservationLevel *int `json:"capacityReservationLevel,omitempty"`

	// +kubebuilder:validation:Required
	// Name: The name of the SKU.
	Name *WorkspaceSkuName `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &WorkspaceSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (workspaceSku *WorkspaceSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if workspaceSku == nil {
		return nil, nil
	}
	result := &WorkspaceSkuARM{}

	// Set property ‘CapacityReservationLevel’:
	if workspaceSku.CapacityReservationLevel != nil {
		capacityReservationLevel := *workspaceSku.CapacityReservationLevel
		result.CapacityReservationLevel = &capacityReservationLevel
	}

	// Set property ‘Name’:
	if workspaceSku.Name != nil {
		name := *workspaceSku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspaceSku *WorkspaceSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspaceSku *WorkspaceSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceSkuARM, got %T", armInput)
	}

	// Set property ‘CapacityReservationLevel’:
	if typedInput.CapacityReservationLevel != nil {
		capacityReservationLevel := *typedInput.CapacityReservationLevel
		workspaceSku.CapacityReservationLevel = &capacityReservationLevel
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		workspaceSku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceSku populates our WorkspaceSku from the provided source WorkspaceSku
func (workspaceSku *WorkspaceSku) AssignPropertiesFromWorkspaceSku(source *v20210601s.WorkspaceSku) error {

	// CapacityReservationLevel
	workspaceSku.CapacityReservationLevel = genruntime.ClonePointerToInt(source.CapacityReservationLevel)

	// Name
	if source.Name != nil {
		name := WorkspaceSkuName(*source.Name)
		workspaceSku.Name = &name
	} else {
		workspaceSku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceSku populates the provided destination WorkspaceSku from our WorkspaceSku
func (workspaceSku *WorkspaceSku) AssignPropertiesToWorkspaceSku(destination *v20210601s.WorkspaceSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CapacityReservationLevel
	destination.CapacityReservationLevel = genruntime.ClonePointerToInt(workspaceSku.CapacityReservationLevel)

	// Name
	if workspaceSku.Name != nil {
		name := string(*workspaceSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceSku_STATUS struct {
	// CapacityReservationLevel: The capacity reservation level in GB for this workspace, when CapacityReservation sku is
	// selected.
	CapacityReservationLevel *WorkspaceSkuSTATUSCapacityReservationLevel `json:"capacityReservationLevel,omitempty"`

	// LastSkuUpdate: The last time when the sku was updated.
	LastSkuUpdate *string `json:"lastSkuUpdate,omitempty"`

	// Name: The name of the SKU.
	Name *WorkspaceSkuSTATUSName `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &WorkspaceSku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (workspaceSku *WorkspaceSku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WorkspaceSku_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (workspaceSku *WorkspaceSku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WorkspaceSku_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WorkspaceSku_STATUSARM, got %T", armInput)
	}

	// Set property ‘CapacityReservationLevel’:
	if typedInput.CapacityReservationLevel != nil {
		capacityReservationLevel := *typedInput.CapacityReservationLevel
		workspaceSku.CapacityReservationLevel = &capacityReservationLevel
	}

	// Set property ‘LastSkuUpdate’:
	if typedInput.LastSkuUpdate != nil {
		lastSkuUpdate := *typedInput.LastSkuUpdate
		workspaceSku.LastSkuUpdate = &lastSkuUpdate
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		workspaceSku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromWorkspaceSkuSTATUS populates our WorkspaceSku_STATUS from the provided source WorkspaceSku_STATUS
func (workspaceSku *WorkspaceSku_STATUS) AssignPropertiesFromWorkspaceSkuSTATUS(source *v20210601s.WorkspaceSku_STATUS) error {

	// CapacityReservationLevel
	if source.CapacityReservationLevel != nil {
		capacityReservationLevel := WorkspaceSkuSTATUSCapacityReservationLevel(*source.CapacityReservationLevel)
		workspaceSku.CapacityReservationLevel = &capacityReservationLevel
	} else {
		workspaceSku.CapacityReservationLevel = nil
	}

	// LastSkuUpdate
	workspaceSku.LastSkuUpdate = genruntime.ClonePointerToString(source.LastSkuUpdate)

	// Name
	if source.Name != nil {
		name := WorkspaceSkuSTATUSName(*source.Name)
		workspaceSku.Name = &name
	} else {
		workspaceSku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWorkspaceSkuSTATUS populates the provided destination WorkspaceSku_STATUS from our WorkspaceSku_STATUS
func (workspaceSku *WorkspaceSku_STATUS) AssignPropertiesToWorkspaceSkuSTATUS(destination *v20210601s.WorkspaceSku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CapacityReservationLevel
	if workspaceSku.CapacityReservationLevel != nil {
		capacityReservationLevel := int(*workspaceSku.CapacityReservationLevel)
		destination.CapacityReservationLevel = &capacityReservationLevel
	} else {
		destination.CapacityReservationLevel = nil
	}

	// LastSkuUpdate
	destination.LastSkuUpdate = genruntime.ClonePointerToString(workspaceSku.LastSkuUpdate)

	// Name
	if workspaceSku.Name != nil {
		name := string(*workspaceSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WorkspaceCappingSTATUSDataIngestionStatus string

const (
	WorkspaceCappingSTATUSDataIngestionStatus_ApproachingQuota      = WorkspaceCappingSTATUSDataIngestionStatus("ApproachingQuota")
	WorkspaceCappingSTATUSDataIngestionStatus_ForceOff              = WorkspaceCappingSTATUSDataIngestionStatus("ForceOff")
	WorkspaceCappingSTATUSDataIngestionStatus_ForceOn               = WorkspaceCappingSTATUSDataIngestionStatus("ForceOn")
	WorkspaceCappingSTATUSDataIngestionStatus_OverQuota             = WorkspaceCappingSTATUSDataIngestionStatus("OverQuota")
	WorkspaceCappingSTATUSDataIngestionStatus_RespectQuota          = WorkspaceCappingSTATUSDataIngestionStatus("RespectQuota")
	WorkspaceCappingSTATUSDataIngestionStatus_SubscriptionSuspended = WorkspaceCappingSTATUSDataIngestionStatus("SubscriptionSuspended")
)

// +kubebuilder:validation:Enum={"CapacityReservation","Free","LACluster","PerGB2018","PerNode","Premium","Standalone","Standard"}
type WorkspaceSkuName string

const (
	WorkspaceSkuName_CapacityReservation = WorkspaceSkuName("CapacityReservation")
	WorkspaceSkuName_Free                = WorkspaceSkuName("Free")
	WorkspaceSkuName_LACluster           = WorkspaceSkuName("LACluster")
	WorkspaceSkuName_PerGB2018           = WorkspaceSkuName("PerGB2018")
	WorkspaceSkuName_PerNode             = WorkspaceSkuName("PerNode")
	WorkspaceSkuName_Premium             = WorkspaceSkuName("Premium")
	WorkspaceSkuName_Standalone          = WorkspaceSkuName("Standalone")
	WorkspaceSkuName_Standard            = WorkspaceSkuName("Standard")
)

type WorkspaceSkuSTATUSCapacityReservationLevel int

const (
	WorkspaceSkuSTATUSCapacityReservationLevel_100  = WorkspaceSkuSTATUSCapacityReservationLevel(100)
	WorkspaceSkuSTATUSCapacityReservationLevel_1000 = WorkspaceSkuSTATUSCapacityReservationLevel(1000)
	WorkspaceSkuSTATUSCapacityReservationLevel_200  = WorkspaceSkuSTATUSCapacityReservationLevel(200)
	WorkspaceSkuSTATUSCapacityReservationLevel_2000 = WorkspaceSkuSTATUSCapacityReservationLevel(2000)
	WorkspaceSkuSTATUSCapacityReservationLevel_300  = WorkspaceSkuSTATUSCapacityReservationLevel(300)
	WorkspaceSkuSTATUSCapacityReservationLevel_400  = WorkspaceSkuSTATUSCapacityReservationLevel(400)
	WorkspaceSkuSTATUSCapacityReservationLevel_500  = WorkspaceSkuSTATUSCapacityReservationLevel(500)
	WorkspaceSkuSTATUSCapacityReservationLevel_5000 = WorkspaceSkuSTATUSCapacityReservationLevel(5000)
)

type WorkspaceSkuSTATUSName string

const (
	WorkspaceSkuSTATUSName_CapacityReservation = WorkspaceSkuSTATUSName("CapacityReservation")
	WorkspaceSkuSTATUSName_Free                = WorkspaceSkuSTATUSName("Free")
	WorkspaceSkuSTATUSName_LACluster           = WorkspaceSkuSTATUSName("LACluster")
	WorkspaceSkuSTATUSName_PerGB2018           = WorkspaceSkuSTATUSName("PerGB2018")
	WorkspaceSkuSTATUSName_PerNode             = WorkspaceSkuSTATUSName("PerNode")
	WorkspaceSkuSTATUSName_Premium             = WorkspaceSkuSTATUSName("Premium")
	WorkspaceSkuSTATUSName_Standalone          = WorkspaceSkuSTATUSName("Standalone")
	WorkspaceSkuSTATUSName_Standard            = WorkspaceSkuSTATUSName("Standard")
)

func init() {
	SchemeBuilder.Register(&Workspace{}, &WorkspaceList{})
}
