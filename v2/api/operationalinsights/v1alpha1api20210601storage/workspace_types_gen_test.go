// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Workspace_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspace via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspace, WorkspaceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspace runs a test to see if a specific instance of Workspace round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspace(subject Workspace) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspace
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspace instances for property testing - lazily instantiated by WorkspaceGenerator()
var workspaceGenerator gopter.Gen

// WorkspaceGenerator returns a generator of Workspace instances for property testing.
func WorkspaceGenerator() gopter.Gen {
	if workspaceGenerator != nil {
		return workspaceGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForWorkspace(generators)
	workspaceGenerator = gen.Struct(reflect.TypeOf(Workspace{}), generators)

	return workspaceGenerator
}

// AddRelatedPropertyGeneratorsForWorkspace is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspace(gens map[string]gopter.Gen) {
	gens["Spec"] = Workspaces_SPECGenerator()
	gens["Status"] = Workspace_StatusGenerator()
}

func Test_Workspace_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspace_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspace_Status, Workspace_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspace_Status runs a test to see if a specific instance of Workspace_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspace_Status(subject Workspace_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspace_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspace_Status instances for property testing - lazily instantiated by Workspace_StatusGenerator()
var workspace_statusGenerator gopter.Gen

// Workspace_StatusGenerator returns a generator of Workspace_Status instances for property testing.
// We first initialize workspace_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Workspace_StatusGenerator() gopter.Gen {
	if workspace_statusGenerator != nil {
		return workspace_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspace_Status(generators)
	workspace_statusGenerator = gen.Struct(reflect.TypeOf(Workspace_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspace_Status(generators)
	AddRelatedPropertyGeneratorsForWorkspace_Status(generators)
	workspace_statusGenerator = gen.Struct(reflect.TypeOf(Workspace_Status{}), generators)

	return workspace_statusGenerator
}

// AddIndependentPropertyGeneratorsForWorkspace_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspace_Status(gens map[string]gopter.Gen) {
	gens["CreatedDate"] = gen.PtrOf(gen.AlphaString())
	gens["CustomerId"] = gen.PtrOf(gen.AlphaString())
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["ForceCmkForQuery"] = gen.PtrOf(gen.Bool())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ModifiedDate"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.AlphaString())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspace_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspace_Status(gens map[string]gopter.Gen) {
	gens["Features"] = gen.PtrOf(WorkspaceFeatures_StatusGenerator())
	gens["PrivateLinkScopedResources"] = gen.SliceOf(PrivateLinkScopedResource_StatusGenerator())
	gens["Sku"] = gen.PtrOf(WorkspaceSku_StatusGenerator())
	gens["WorkspaceCapping"] = gen.PtrOf(WorkspaceCapping_StatusGenerator())
}

func Test_Workspaces_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspaces_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaces_SPEC, Workspaces_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaces_SPEC runs a test to see if a specific instance of Workspaces_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaces_SPEC(subject Workspaces_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspaces_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspaces_SPEC instances for property testing - lazily instantiated by Workspaces_SPECGenerator()
var workspaces_specGenerator gopter.Gen

// Workspaces_SPECGenerator returns a generator of Workspaces_SPEC instances for property testing.
// We first initialize workspaces_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Workspaces_SPECGenerator() gopter.Gen {
	if workspaces_specGenerator != nil {
		return workspaces_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_SPEC(generators)
	workspaces_specGenerator = gen.Struct(reflect.TypeOf(Workspaces_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_SPEC(generators)
	AddRelatedPropertyGeneratorsForWorkspaces_SPEC(generators)
	workspaces_specGenerator = gen.Struct(reflect.TypeOf(Workspaces_SPEC{}), generators)

	return workspaces_specGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaces_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaces_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["ForceCmkForQuery"] = gen.PtrOf(gen.Bool())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.AlphaString())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaces_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaces_SPEC(gens map[string]gopter.Gen) {
	gens["Features"] = gen.PtrOf(WorkspaceFeatures_SpecGenerator())
	gens["Sku"] = gen.PtrOf(WorkspaceSku_SpecGenerator())
	gens["WorkspaceCapping"] = gen.PtrOf(WorkspaceCapping_SpecGenerator())
}

func Test_PrivateLinkScopedResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkScopedResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkScopedResource_Status, PrivateLinkScopedResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkScopedResource_Status runs a test to see if a specific instance of PrivateLinkScopedResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkScopedResource_Status(subject PrivateLinkScopedResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkScopedResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkScopedResource_Status instances for property testing - lazily instantiated by
//PrivateLinkScopedResource_StatusGenerator()
var privateLinkScopedResource_statusGenerator gopter.Gen

// PrivateLinkScopedResource_StatusGenerator returns a generator of PrivateLinkScopedResource_Status instances for property testing.
func PrivateLinkScopedResource_StatusGenerator() gopter.Gen {
	if privateLinkScopedResource_statusGenerator != nil {
		return privateLinkScopedResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_Status(generators)
	privateLinkScopedResource_statusGenerator = gen.Struct(reflect.TypeOf(PrivateLinkScopedResource_Status{}), generators)

	return privateLinkScopedResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_Status(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ScopeId"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceCapping_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceCapping_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceCapping_Spec, WorkspaceCapping_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceCapping_Spec runs a test to see if a specific instance of WorkspaceCapping_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceCapping_Spec(subject WorkspaceCapping_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceCapping_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceCapping_Spec instances for property testing - lazily instantiated by
//WorkspaceCapping_SpecGenerator()
var workspaceCapping_specGenerator gopter.Gen

// WorkspaceCapping_SpecGenerator returns a generator of WorkspaceCapping_Spec instances for property testing.
func WorkspaceCapping_SpecGenerator() gopter.Gen {
	if workspaceCapping_specGenerator != nil {
		return workspaceCapping_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceCapping_Spec(generators)
	workspaceCapping_specGenerator = gen.Struct(reflect.TypeOf(WorkspaceCapping_Spec{}), generators)

	return workspaceCapping_specGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceCapping_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceCapping_Spec(gens map[string]gopter.Gen) {
	gens["DailyQuotaGb"] = gen.PtrOf(gen.Float64())
}

func Test_WorkspaceCapping_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceCapping_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceCapping_Status, WorkspaceCapping_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceCapping_Status runs a test to see if a specific instance of WorkspaceCapping_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceCapping_Status(subject WorkspaceCapping_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceCapping_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceCapping_Status instances for property testing - lazily instantiated by
//WorkspaceCapping_StatusGenerator()
var workspaceCapping_statusGenerator gopter.Gen

// WorkspaceCapping_StatusGenerator returns a generator of WorkspaceCapping_Status instances for property testing.
func WorkspaceCapping_StatusGenerator() gopter.Gen {
	if workspaceCapping_statusGenerator != nil {
		return workspaceCapping_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceCapping_Status(generators)
	workspaceCapping_statusGenerator = gen.Struct(reflect.TypeOf(WorkspaceCapping_Status{}), generators)

	return workspaceCapping_statusGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceCapping_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceCapping_Status(gens map[string]gopter.Gen) {
	gens["DailyQuotaGb"] = gen.PtrOf(gen.Float64())
	gens["DataIngestionStatus"] = gen.PtrOf(gen.AlphaString())
	gens["QuotaNextResetTime"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceFeatures_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceFeatures_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceFeatures_Spec, WorkspaceFeatures_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceFeatures_Spec runs a test to see if a specific instance of WorkspaceFeatures_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceFeatures_Spec(subject WorkspaceFeatures_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceFeatures_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceFeatures_Spec instances for property testing - lazily instantiated by
//WorkspaceFeatures_SpecGenerator()
var workspaceFeatures_specGenerator gopter.Gen

// WorkspaceFeatures_SpecGenerator returns a generator of WorkspaceFeatures_Spec instances for property testing.
func WorkspaceFeatures_SpecGenerator() gopter.Gen {
	if workspaceFeatures_specGenerator != nil {
		return workspaceFeatures_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceFeatures_Spec(generators)
	workspaceFeatures_specGenerator = gen.Struct(reflect.TypeOf(WorkspaceFeatures_Spec{}), generators)

	return workspaceFeatures_specGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceFeatures_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceFeatures_Spec(gens map[string]gopter.Gen) {
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["EnableDataExport"] = gen.PtrOf(gen.Bool())
	gens["EnableLogAccessUsingOnlyResourcePermissions"] = gen.PtrOf(gen.Bool())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
}

func Test_WorkspaceFeatures_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceFeatures_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceFeatures_Status, WorkspaceFeatures_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceFeatures_Status runs a test to see if a specific instance of WorkspaceFeatures_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceFeatures_Status(subject WorkspaceFeatures_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceFeatures_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceFeatures_Status instances for property testing - lazily instantiated by
//WorkspaceFeatures_StatusGenerator()
var workspaceFeatures_statusGenerator gopter.Gen

// WorkspaceFeatures_StatusGenerator returns a generator of WorkspaceFeatures_Status instances for property testing.
func WorkspaceFeatures_StatusGenerator() gopter.Gen {
	if workspaceFeatures_statusGenerator != nil {
		return workspaceFeatures_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceFeatures_Status(generators)
	workspaceFeatures_statusGenerator = gen.Struct(reflect.TypeOf(WorkspaceFeatures_Status{}), generators)

	return workspaceFeatures_statusGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceFeatures_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceFeatures_Status(gens map[string]gopter.Gen) {
	gens["ClusterResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["EnableDataExport"] = gen.PtrOf(gen.Bool())
	gens["EnableLogAccessUsingOnlyResourcePermissions"] = gen.PtrOf(gen.Bool())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
}

func Test_WorkspaceSku_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceSku_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceSku_Spec, WorkspaceSku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceSku_Spec runs a test to see if a specific instance of WorkspaceSku_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceSku_Spec(subject WorkspaceSku_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceSku_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceSku_Spec instances for property testing - lazily instantiated by WorkspaceSku_SpecGenerator()
var workspaceSku_specGenerator gopter.Gen

// WorkspaceSku_SpecGenerator returns a generator of WorkspaceSku_Spec instances for property testing.
func WorkspaceSku_SpecGenerator() gopter.Gen {
	if workspaceSku_specGenerator != nil {
		return workspaceSku_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSku_Spec(generators)
	workspaceSku_specGenerator = gen.Struct(reflect.TypeOf(WorkspaceSku_Spec{}), generators)

	return workspaceSku_specGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceSku_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceSku_Spec(gens map[string]gopter.Gen) {
	gens["CapacityReservationLevel"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceSku_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceSku_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceSku_Status, WorkspaceSku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceSku_Status runs a test to see if a specific instance of WorkspaceSku_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceSku_Status(subject WorkspaceSku_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceSku_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceSku_Status instances for property testing - lazily instantiated by
//WorkspaceSku_StatusGenerator()
var workspaceSku_statusGenerator gopter.Gen

// WorkspaceSku_StatusGenerator returns a generator of WorkspaceSku_Status instances for property testing.
func WorkspaceSku_StatusGenerator() gopter.Gen {
	if workspaceSku_statusGenerator != nil {
		return workspaceSku_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSku_Status(generators)
	workspaceSku_statusGenerator = gen.Struct(reflect.TypeOf(WorkspaceSku_Status{}), generators)

	return workspaceSku_statusGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceSku_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceSku_Status(gens map[string]gopter.Gen) {
	gens["CapacityReservationLevel"] = gen.PtrOf(gen.Int())
	gens["LastSkuUpdate"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}
