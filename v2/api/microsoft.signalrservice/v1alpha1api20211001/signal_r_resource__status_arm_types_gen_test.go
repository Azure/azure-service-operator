// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SignalRResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRResourceStatusARM, SignalRResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRResourceStatusARM runs a test to see if a specific instance of SignalRResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRResourceStatusARM(subject SignalRResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRResource_StatusARM instances for property testing - lazily instantiated by
//SignalRResourceStatusARMGenerator()
var signalRResourceStatusARMGenerator gopter.Gen

// SignalRResourceStatusARMGenerator returns a generator of SignalRResource_StatusARM instances for property testing.
// We first initialize signalRResourceStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRResourceStatusARMGenerator() gopter.Gen {
	if signalRResourceStatusARMGenerator != nil {
		return signalRResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResourceStatusARM(generators)
	signalRResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResourceStatusARM(generators)
	AddRelatedPropertyGeneratorsForSignalRResourceStatusARM(generators)
	signalRResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_StatusARM{}), generators)

	return signalRResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(ServiceKind_StatusRawWebSockets, ServiceKind_StatusSignalR))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRResourceStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentityStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(SignalRPropertiesStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(ResourceSkuStatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataStatusARMGenerator())
}

func Test_ManagedIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentityStatusARM, ManagedIdentityStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentityStatusARM runs a test to see if a specific instance of ManagedIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentityStatusARM(subject ManagedIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentity_StatusARM instances for property testing - lazily instantiated by
//ManagedIdentityStatusARMGenerator()
var managedIdentityStatusARMGenerator gopter.Gen

// ManagedIdentityStatusARMGenerator returns a generator of ManagedIdentity_StatusARM instances for property testing.
// We first initialize managedIdentityStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedIdentityStatusARMGenerator() gopter.Gen {
	if managedIdentityStatusARMGenerator != nil {
		return managedIdentityStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentityStatusARM(generators)
	managedIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentityStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedIdentityStatusARM(generators)
	managedIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_StatusARM{}), generators)

	return managedIdentityStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentityStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedIdentityType_StatusNone, ManagedIdentityType_StatusSystemAssigned, ManagedIdentityType_StatusUserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedIdentityStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentityPropertyStatusARMGenerator())
}

func Test_ResourceSku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSkuStatusARM, ResourceSkuStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSkuStatusARM runs a test to see if a specific instance of ResourceSku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSkuStatusARM(subject ResourceSku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSku_StatusARM instances for property testing - lazily instantiated by
//ResourceSkuStatusARMGenerator()
var resourceSkuStatusARMGenerator gopter.Gen

// ResourceSkuStatusARMGenerator returns a generator of ResourceSku_StatusARM instances for property testing.
func ResourceSkuStatusARMGenerator() gopter.Gen {
	if resourceSkuStatusARMGenerator != nil {
		return resourceSkuStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSkuStatusARM(generators)
	resourceSkuStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceSku_StatusARM{}), generators)

	return resourceSkuStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSkuStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSkuStatusARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		SignalRSkuTier_StatusBasic,
		SignalRSkuTier_StatusFree,
		SignalRSkuTier_StatusPremium,
		SignalRSkuTier_StatusStandard))
}

func Test_SignalRProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRPropertiesStatusARM, SignalRPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRPropertiesStatusARM runs a test to see if a specific instance of SignalRProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRPropertiesStatusARM(subject SignalRProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRProperties_StatusARM instances for property testing - lazily instantiated by
//SignalRPropertiesStatusARMGenerator()
var signalRPropertiesStatusARMGenerator gopter.Gen

// SignalRPropertiesStatusARMGenerator returns a generator of SignalRProperties_StatusARM instances for property testing.
// We first initialize signalRPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRPropertiesStatusARMGenerator() gopter.Gen {
	if signalRPropertiesStatusARMGenerator != nil {
		return signalRPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRPropertiesStatusARM(generators)
	signalRPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForSignalRPropertiesStatusARM(generators)
	signalRPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_StatusARM{}), generators)

	return signalRPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["DisableAadAuth"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["ExternalIP"] = gen.PtrOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HostNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusCanceled,
		ProvisioningState_StatusCreating,
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusMoving,
		ProvisioningState_StatusRunning,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUnknown,
		ProvisioningState_StatusUpdating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
	gens["PublicPort"] = gen.PtrOf(gen.Int())
	gens["ServerPort"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(SignalRCorsSettingsStatusARMGenerator())
	gens["Features"] = gen.SliceOf(SignalRFeatureStatusARMGenerator())
	gens["NetworkACLs"] = gen.PtrOf(SignalRNetworkACLsStatusARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator())
	gens["ResourceLogConfiguration"] = gen.PtrOf(ResourceLogConfigurationStatusARMGenerator())
	gens["SharedPrivateLinkResources"] = gen.SliceOf(SharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator())
	gens["Tls"] = gen.PtrOf(SignalRTlsSettingsStatusARMGenerator())
	gens["Upstream"] = gen.PtrOf(ServerlessUpstreamSettingsStatusARMGenerator())
}

func Test_SystemData_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemDataStatusARM, SystemDataStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemDataStatusARM runs a test to see if a specific instance of SystemData_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemDataStatusARM(subject SystemData_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_StatusARM instances for property testing - lazily instantiated by
//SystemDataStatusARMGenerator()
var systemDataStatusARMGenerator gopter.Gen

// SystemDataStatusARMGenerator returns a generator of SystemData_StatusARM instances for property testing.
func SystemDataStatusARMGenerator() gopter.Gen {
	if systemDataStatusARMGenerator != nil {
		return systemDataStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemDataStatusARM(generators)
	systemDataStatusARMGenerator = gen.Struct(reflect.TypeOf(SystemData_StatusARM{}), generators)

	return systemDataStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemDataStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemDataStatusARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemDataStatusCreatedByTypeApplication,
		SystemDataStatusCreatedByTypeKey,
		SystemDataStatusCreatedByTypeManagedIdentity,
		SystemDataStatusCreatedByTypeUser))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemDataStatusLastModifiedByTypeApplication,
		SystemDataStatusLastModifiedByTypeKey,
		SystemDataStatusLastModifiedByTypeManagedIdentity,
		SystemDataStatusLastModifiedByTypeUser))
}

func Test_PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM, PrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM(subject PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by PrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator()
var privateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM(generators)
	privateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM(generators)
	privateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnectionStatusSignalRSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionStatusSignalRSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemDataStatusARMGenerator())
}

func Test_ResourceLogConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogConfigurationStatusARM, ResourceLogConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogConfigurationStatusARM runs a test to see if a specific instance of ResourceLogConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogConfigurationStatusARM(subject ResourceLogConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogConfiguration_StatusARM instances for property testing - lazily instantiated by
//ResourceLogConfigurationStatusARMGenerator()
var resourceLogConfigurationStatusARMGenerator gopter.Gen

// ResourceLogConfigurationStatusARMGenerator returns a generator of ResourceLogConfiguration_StatusARM instances for property testing.
func ResourceLogConfigurationStatusARMGenerator() gopter.Gen {
	if resourceLogConfigurationStatusARMGenerator != nil {
		return resourceLogConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceLogConfigurationStatusARM(generators)
	resourceLogConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogConfiguration_StatusARM{}), generators)

	return resourceLogConfigurationStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceLogConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLogConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Categories"] = gen.SliceOf(ResourceLogCategoryStatusARMGenerator())
}

func Test_ServerlessUpstreamSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerlessUpstreamSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerlessUpstreamSettingsStatusARM, ServerlessUpstreamSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerlessUpstreamSettingsStatusARM runs a test to see if a specific instance of ServerlessUpstreamSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerlessUpstreamSettingsStatusARM(subject ServerlessUpstreamSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerlessUpstreamSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerlessUpstreamSettings_StatusARM instances for property testing - lazily instantiated by
//ServerlessUpstreamSettingsStatusARMGenerator()
var serverlessUpstreamSettingsStatusARMGenerator gopter.Gen

// ServerlessUpstreamSettingsStatusARMGenerator returns a generator of ServerlessUpstreamSettings_StatusARM instances for property testing.
func ServerlessUpstreamSettingsStatusARMGenerator() gopter.Gen {
	if serverlessUpstreamSettingsStatusARMGenerator != nil {
		return serverlessUpstreamSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServerlessUpstreamSettingsStatusARM(generators)
	serverlessUpstreamSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(ServerlessUpstreamSettings_StatusARM{}), generators)

	return serverlessUpstreamSettingsStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForServerlessUpstreamSettingsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerlessUpstreamSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["Templates"] = gen.SliceOf(UpstreamTemplateStatusARMGenerator())
}

func Test_SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM, SharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM runs a test to see if a specific instance of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM(subject SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator()
var sharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator gopter.Gen

// SharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator returns a generator of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM instances for property testing.
// We first initialize sharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator() gopter.Gen {
	if sharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator != nil {
		return sharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM(generators)
	sharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM(generators)
	sharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	return sharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceStatusSignalRSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemDataStatusARMGenerator())
}

func Test_SignalRCorsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRCorsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRCorsSettingsStatusARM, SignalRCorsSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRCorsSettingsStatusARM runs a test to see if a specific instance of SignalRCorsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRCorsSettingsStatusARM(subject SignalRCorsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRCorsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRCorsSettings_StatusARM instances for property testing - lazily instantiated by
//SignalRCorsSettingsStatusARMGenerator()
var signalRCorsSettingsStatusARMGenerator gopter.Gen

// SignalRCorsSettingsStatusARMGenerator returns a generator of SignalRCorsSettings_StatusARM instances for property testing.
func SignalRCorsSettingsStatusARMGenerator() gopter.Gen {
	if signalRCorsSettingsStatusARMGenerator != nil {
		return signalRCorsSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRCorsSettingsStatusARM(generators)
	signalRCorsSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRCorsSettings_StatusARM{}), generators)

	return signalRCorsSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRCorsSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRCorsSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
}

func Test_SignalRFeature_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRFeature_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRFeatureStatusARM, SignalRFeatureStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRFeatureStatusARM runs a test to see if a specific instance of SignalRFeature_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRFeatureStatusARM(subject SignalRFeature_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRFeature_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRFeature_StatusARM instances for property testing - lazily instantiated by
//SignalRFeatureStatusARMGenerator()
var signalRFeatureStatusARMGenerator gopter.Gen

// SignalRFeatureStatusARMGenerator returns a generator of SignalRFeature_StatusARM instances for property testing.
func SignalRFeatureStatusARMGenerator() gopter.Gen {
	if signalRFeatureStatusARMGenerator != nil {
		return signalRFeatureStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRFeatureStatusARM(generators)
	signalRFeatureStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRFeature_StatusARM{}), generators)

	return signalRFeatureStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRFeatureStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRFeatureStatusARM(gens map[string]gopter.Gen) {
	gens["Flag"] = gen.OneConstOf(
		FeatureFlags_StatusEnableConnectivityLogs,
		FeatureFlags_StatusEnableLiveTrace,
		FeatureFlags_StatusEnableMessagingLogs,
		FeatureFlags_StatusServiceMode)
	gens["Properties"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Value"] = gen.AlphaString()
}

func Test_SignalRNetworkACLs_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRNetworkACLs_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRNetworkACLsStatusARM, SignalRNetworkACLsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRNetworkACLsStatusARM runs a test to see if a specific instance of SignalRNetworkACLs_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRNetworkACLsStatusARM(subject SignalRNetworkACLs_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRNetworkACLs_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRNetworkACLs_StatusARM instances for property testing - lazily instantiated by
//SignalRNetworkACLsStatusARMGenerator()
var signalRNetworkACLsStatusARMGenerator gopter.Gen

// SignalRNetworkACLsStatusARMGenerator returns a generator of SignalRNetworkACLs_StatusARM instances for property testing.
// We first initialize signalRNetworkACLsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRNetworkACLsStatusARMGenerator() gopter.Gen {
	if signalRNetworkACLsStatusARMGenerator != nil {
		return signalRNetworkACLsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLsStatusARM(generators)
	signalRNetworkACLsStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLsStatusARM(generators)
	AddRelatedPropertyGeneratorsForSignalRNetworkACLsStatusARM(generators)
	signalRNetworkACLsStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_StatusARM{}), generators)

	return signalRNetworkACLsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRNetworkACLsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRNetworkACLsStatusARM(gens map[string]gopter.Gen) {
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(ACLAction_StatusAllow, ACLAction_StatusDeny))
}

// AddRelatedPropertyGeneratorsForSignalRNetworkACLsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRNetworkACLsStatusARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpointACLStatusARMGenerator())
	gens["PublicNetwork"] = gen.PtrOf(NetworkACLStatusARMGenerator())
}

func Test_SignalRTlsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRTlsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRTlsSettingsStatusARM, SignalRTlsSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRTlsSettingsStatusARM runs a test to see if a specific instance of SignalRTlsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRTlsSettingsStatusARM(subject SignalRTlsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRTlsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRTlsSettings_StatusARM instances for property testing - lazily instantiated by
//SignalRTlsSettingsStatusARMGenerator()
var signalRTlsSettingsStatusARMGenerator gopter.Gen

// SignalRTlsSettingsStatusARMGenerator returns a generator of SignalRTlsSettings_StatusARM instances for property testing.
func SignalRTlsSettingsStatusARMGenerator() gopter.Gen {
	if signalRTlsSettingsStatusARMGenerator != nil {
		return signalRTlsSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRTlsSettingsStatusARM(generators)
	signalRTlsSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(SignalRTlsSettings_StatusARM{}), generators)

	return signalRTlsSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRTlsSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRTlsSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["ClientCertEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_UserAssignedIdentityProperty_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityProperty_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityPropertyStatusARM, UserAssignedIdentityPropertyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityPropertyStatusARM runs a test to see if a specific instance of UserAssignedIdentityProperty_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityPropertyStatusARM(subject UserAssignedIdentityProperty_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityProperty_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityProperty_StatusARM instances for property testing - lazily instantiated by
//UserAssignedIdentityPropertyStatusARMGenerator()
var userAssignedIdentityPropertyStatusARMGenerator gopter.Gen

// UserAssignedIdentityPropertyStatusARMGenerator returns a generator of UserAssignedIdentityProperty_StatusARM instances for property testing.
func UserAssignedIdentityPropertyStatusARMGenerator() gopter.Gen {
	if userAssignedIdentityPropertyStatusARMGenerator != nil {
		return userAssignedIdentityPropertyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentityPropertyStatusARM(generators)
	userAssignedIdentityPropertyStatusARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityProperty_StatusARM{}), generators)

	return userAssignedIdentityPropertyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentityPropertyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentityPropertyStatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkACL_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkACL_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkACLStatusARM, NetworkACLStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkACLStatusARM runs a test to see if a specific instance of NetworkACL_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkACLStatusARM(subject NetworkACL_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkACL_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkACL_StatusARM instances for property testing - lazily instantiated by
//NetworkACLStatusARMGenerator()
var networkACLStatusARMGenerator gopter.Gen

// NetworkACLStatusARMGenerator returns a generator of NetworkACL_StatusARM instances for property testing.
func NetworkACLStatusARMGenerator() gopter.Gen {
	if networkACLStatusARMGenerator != nil {
		return networkACLStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkACLStatusARM(generators)
	networkACLStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkACL_StatusARM{}), generators)

	return networkACLStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkACLStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkACLStatusARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_StatusClientConnection,
		SignalRRequestType_StatusRESTAPI,
		SignalRRequestType_StatusServerConnection,
		SignalRRequestType_StatusTrace))
	gens["Deny"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_StatusClientConnection,
		SignalRRequestType_StatusRESTAPI,
		SignalRRequestType_StatusServerConnection,
		SignalRRequestType_StatusTrace))
}

func Test_PrivateEndpointACL_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointACL_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointACLStatusARM, PrivateEndpointACLStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointACLStatusARM runs a test to see if a specific instance of PrivateEndpointACL_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointACLStatusARM(subject PrivateEndpointACL_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointACL_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointACL_StatusARM instances for property testing - lazily instantiated by
//PrivateEndpointACLStatusARMGenerator()
var privateEndpointACLStatusARMGenerator gopter.Gen

// PrivateEndpointACLStatusARMGenerator returns a generator of PrivateEndpointACL_StatusARM instances for property testing.
func PrivateEndpointACLStatusARMGenerator() gopter.Gen {
	if privateEndpointACLStatusARMGenerator != nil {
		return privateEndpointACLStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointACLStatusARM(generators)
	privateEndpointACLStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointACL_StatusARM{}), generators)

	return privateEndpointACLStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointACLStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointACLStatusARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_StatusClientConnection,
		SignalRRequestType_StatusRESTAPI,
		SignalRRequestType_StatusServerConnection,
		SignalRRequestType_StatusTrace))
	gens["Deny"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_StatusClientConnection,
		SignalRRequestType_StatusRESTAPI,
		SignalRRequestType_StatusServerConnection,
		SignalRRequestType_StatusTrace))
	gens["Name"] = gen.AlphaString()
}

func Test_ResourceLogCategory_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogCategory_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogCategoryStatusARM, ResourceLogCategoryStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogCategoryStatusARM runs a test to see if a specific instance of ResourceLogCategory_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogCategoryStatusARM(subject ResourceLogCategory_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogCategory_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogCategory_StatusARM instances for property testing - lazily instantiated by
//ResourceLogCategoryStatusARMGenerator()
var resourceLogCategoryStatusARMGenerator gopter.Gen

// ResourceLogCategoryStatusARMGenerator returns a generator of ResourceLogCategory_StatusARM instances for property testing.
func ResourceLogCategoryStatusARMGenerator() gopter.Gen {
	if resourceLogCategoryStatusARMGenerator != nil {
		return resourceLogCategoryStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLogCategoryStatusARM(generators)
	resourceLogCategoryStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogCategory_StatusARM{}), generators)

	return resourceLogCategoryStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLogCategoryStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLogCategoryStatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpstreamTemplate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamTemplate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamTemplateStatusARM, UpstreamTemplateStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamTemplateStatusARM runs a test to see if a specific instance of UpstreamTemplate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamTemplateStatusARM(subject UpstreamTemplate_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamTemplate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamTemplate_StatusARM instances for property testing - lazily instantiated by
//UpstreamTemplateStatusARMGenerator()
var upstreamTemplateStatusARMGenerator gopter.Gen

// UpstreamTemplateStatusARMGenerator returns a generator of UpstreamTemplate_StatusARM instances for property testing.
// We first initialize upstreamTemplateStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamTemplateStatusARMGenerator() gopter.Gen {
	if upstreamTemplateStatusARMGenerator != nil {
		return upstreamTemplateStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplateStatusARM(generators)
	upstreamTemplateStatusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplateStatusARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamTemplateStatusARM(generators)
	upstreamTemplateStatusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_StatusARM{}), generators)

	return upstreamTemplateStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamTemplateStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamTemplateStatusARM(gens map[string]gopter.Gen) {
	gens["CategoryPattern"] = gen.PtrOf(gen.AlphaString())
	gens["EventPattern"] = gen.PtrOf(gen.AlphaString())
	gens["HubPattern"] = gen.PtrOf(gen.AlphaString())
	gens["UrlTemplate"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForUpstreamTemplateStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamTemplateStatusARM(gens map[string]gopter.Gen) {
	gens["Auth"] = gen.PtrOf(UpstreamAuthSettingsStatusARMGenerator())
}

func Test_UpstreamAuthSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamAuthSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamAuthSettingsStatusARM, UpstreamAuthSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamAuthSettingsStatusARM runs a test to see if a specific instance of UpstreamAuthSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamAuthSettingsStatusARM(subject UpstreamAuthSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamAuthSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamAuthSettings_StatusARM instances for property testing - lazily instantiated by
//UpstreamAuthSettingsStatusARMGenerator()
var upstreamAuthSettingsStatusARMGenerator gopter.Gen

// UpstreamAuthSettingsStatusARMGenerator returns a generator of UpstreamAuthSettings_StatusARM instances for property testing.
// We first initialize upstreamAuthSettingsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamAuthSettingsStatusARMGenerator() gopter.Gen {
	if upstreamAuthSettingsStatusARMGenerator != nil {
		return upstreamAuthSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettingsStatusARM(generators)
	upstreamAuthSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettingsStatusARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamAuthSettingsStatusARM(generators)
	upstreamAuthSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_StatusARM{}), generators)

	return upstreamAuthSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamAuthSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamAuthSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(UpstreamAuthType_StatusManagedIdentity, UpstreamAuthType_StatusNone))
}

// AddRelatedPropertyGeneratorsForUpstreamAuthSettingsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamAuthSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["ManagedIdentity"] = gen.PtrOf(ManagedIdentitySettingsStatusARMGenerator())
}

func Test_ManagedIdentitySettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentitySettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentitySettingsStatusARM, ManagedIdentitySettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentitySettingsStatusARM runs a test to see if a specific instance of ManagedIdentitySettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentitySettingsStatusARM(subject ManagedIdentitySettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentitySettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentitySettings_StatusARM instances for property testing - lazily instantiated by
//ManagedIdentitySettingsStatusARMGenerator()
var managedIdentitySettingsStatusARMGenerator gopter.Gen

// ManagedIdentitySettingsStatusARMGenerator returns a generator of ManagedIdentitySettings_StatusARM instances for property testing.
func ManagedIdentitySettingsStatusARMGenerator() gopter.Gen {
	if managedIdentitySettingsStatusARMGenerator != nil {
		return managedIdentitySettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentitySettingsStatusARM(generators)
	managedIdentitySettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentitySettings_StatusARM{}), generators)

	return managedIdentitySettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentitySettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentitySettingsStatusARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(gen.AlphaString())
}
