// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220131preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_UserAssignedIdentities_FederatedIdentityCredentials_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentities_FederatedIdentityCredentials_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM, UserAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM runs a test to see if a specific instance of UserAssignedIdentities_FederatedIdentityCredentials_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM(subject UserAssignedIdentities_FederatedIdentityCredentials_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentities_FederatedIdentityCredentials_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentities_FederatedIdentityCredentials_SpecARM instances for property testing - lazily
// instantiated by UserAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator()
var userAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator gopter.Gen

// UserAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator returns a generator of UserAssignedIdentities_FederatedIdentityCredentials_SpecARM instances for property testing.
// We first initialize userAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UserAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator() gopter.Gen {
	if userAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator != nil {
		return userAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM(generators)
	userAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentities_FederatedIdentityCredentials_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM(generators)
	AddRelatedPropertyGeneratorsForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM(generators)
	userAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentities_FederatedIdentityCredentials_SpecARM{}), generators)

	return userAssignedIdentities_FederatedIdentityCredentials_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUserAssignedIdentities_FederatedIdentityCredentials_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FederatedIdentityCredentialPropertiesARMGenerator())
}

func Test_FederatedIdentityCredentialPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FederatedIdentityCredentialPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFederatedIdentityCredentialPropertiesARM, FederatedIdentityCredentialPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFederatedIdentityCredentialPropertiesARM runs a test to see if a specific instance of FederatedIdentityCredentialPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFederatedIdentityCredentialPropertiesARM(subject FederatedIdentityCredentialPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FederatedIdentityCredentialPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FederatedIdentityCredentialPropertiesARM instances for property testing - lazily instantiated by
// FederatedIdentityCredentialPropertiesARMGenerator()
var federatedIdentityCredentialPropertiesARMGenerator gopter.Gen

// FederatedIdentityCredentialPropertiesARMGenerator returns a generator of FederatedIdentityCredentialPropertiesARM instances for property testing.
func FederatedIdentityCredentialPropertiesARMGenerator() gopter.Gen {
	if federatedIdentityCredentialPropertiesARMGenerator != nil {
		return federatedIdentityCredentialPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFederatedIdentityCredentialPropertiesARM(generators)
	federatedIdentityCredentialPropertiesARMGenerator = gen.Struct(reflect.TypeOf(FederatedIdentityCredentialPropertiesARM{}), generators)

	return federatedIdentityCredentialPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForFederatedIdentityCredentialPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFederatedIdentityCredentialPropertiesARM(gens map[string]gopter.Gen) {
	gens["Audiences"] = gen.SliceOf(gen.AlphaString())
	gens["Issuer"] = gen.PtrOf(gen.AlphaString())
	gens["Subject"] = gen.PtrOf(gen.AlphaString())
}
