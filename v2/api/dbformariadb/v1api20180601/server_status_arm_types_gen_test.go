// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20180601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrivateEndpointProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointProperty_STATUS_ARM, PrivateEndpointProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointProperty_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointProperty_STATUS_ARM(subject PrivateEndpointProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointProperty_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointProperty_STATUS_ARMGenerator()
var privateEndpointProperty_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointProperty_STATUS_ARMGenerator returns a generator of PrivateEndpointProperty_STATUS_ARM instances for property testing.
func PrivateEndpointProperty_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointProperty_STATUS_ARMGenerator != nil {
		return privateEndpointProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointProperty_STATUS_ARM(generators)
	privateEndpointProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperty_STATUS_ARM{}), generators)

	return privateEndpointProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServerPrivateEndpointConnectionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPrivateEndpointConnectionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPrivateEndpointConnectionProperties_STATUS_ARM, ServerPrivateEndpointConnectionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPrivateEndpointConnectionProperties_STATUS_ARM runs a test to see if a specific instance of ServerPrivateEndpointConnectionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPrivateEndpointConnectionProperties_STATUS_ARM(subject ServerPrivateEndpointConnectionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPrivateEndpointConnectionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPrivateEndpointConnectionProperties_STATUS_ARM instances for property testing - lazily
// instantiated by ServerPrivateEndpointConnectionProperties_STATUS_ARMGenerator()
var serverPrivateEndpointConnectionProperties_STATUS_ARMGenerator gopter.Gen

// ServerPrivateEndpointConnectionProperties_STATUS_ARMGenerator returns a generator of ServerPrivateEndpointConnectionProperties_STATUS_ARM instances for property testing.
// We first initialize serverPrivateEndpointConnectionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPrivateEndpointConnectionProperties_STATUS_ARMGenerator() gopter.Gen {
	if serverPrivateEndpointConnectionProperties_STATUS_ARMGenerator != nil {
		return serverPrivateEndpointConnectionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	serverPrivateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	serverPrivateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	return serverPrivateEndpointConnectionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ServerPrivateEndpointConnectionProperties_ProvisioningState_STATUS_ARM_Approving,
		ServerPrivateEndpointConnectionProperties_ProvisioningState_STATUS_ARM_Dropping,
		ServerPrivateEndpointConnectionProperties_ProvisioningState_STATUS_ARM_Failed,
		ServerPrivateEndpointConnectionProperties_ProvisioningState_STATUS_ARM_Ready,
		ServerPrivateEndpointConnectionProperties_ProvisioningState_STATUS_ARM_Rejecting))
}

// AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointProperty_STATUS_ARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator())
}

func Test_ServerPrivateEndpointConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPrivateEndpointConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPrivateEndpointConnection_STATUS_ARM, ServerPrivateEndpointConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPrivateEndpointConnection_STATUS_ARM runs a test to see if a specific instance of ServerPrivateEndpointConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPrivateEndpointConnection_STATUS_ARM(subject ServerPrivateEndpointConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPrivateEndpointConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPrivateEndpointConnection_STATUS_ARM instances for property testing - lazily instantiated by
// ServerPrivateEndpointConnection_STATUS_ARMGenerator()
var serverPrivateEndpointConnection_STATUS_ARMGenerator gopter.Gen

// ServerPrivateEndpointConnection_STATUS_ARMGenerator returns a generator of ServerPrivateEndpointConnection_STATUS_ARM instances for property testing.
// We first initialize serverPrivateEndpointConnection_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPrivateEndpointConnection_STATUS_ARMGenerator() gopter.Gen {
	if serverPrivateEndpointConnection_STATUS_ARMGenerator != nil {
		return serverPrivateEndpointConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnection_STATUS_ARM(generators)
	serverPrivateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnection_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnection_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServerPrivateEndpointConnection_STATUS_ARM(generators)
	serverPrivateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnection_STATUS_ARM{}), generators)

	return serverPrivateEndpointConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerPrivateEndpointConnectionProperties_STATUS_ARMGenerator())
}

func Test_ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM, ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM runs a test to see if a specific instance of ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM(subject ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM instances for property testing - lazily
// instantiated by ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator()
var serverPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator gopter.Gen

// ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator returns a generator of ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM instances for property testing.
func ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator() gopter.Gen {
	if serverPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator != nil {
		return serverPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM(generators)
	serverPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM{}), generators)

	return serverPrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPrivateLinkServiceConnectionStateProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.OneConstOf(ServerPrivateLinkServiceConnectionStateProperty_ActionsRequired_STATUS_ARM_None))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		ServerPrivateLinkServiceConnectionStateProperty_Status_STATUS_ARM_Approved,
		ServerPrivateLinkServiceConnectionStateProperty_Status_STATUS_ARM_Disconnected,
		ServerPrivateLinkServiceConnectionStateProperty_Status_STATUS_ARM_Pending,
		ServerPrivateLinkServiceConnectionStateProperty_Status_STATUS_ARM_Rejected))
}

func Test_ServerProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerProperties_STATUS_ARM, ServerProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerProperties_STATUS_ARM runs a test to see if a specific instance of ServerProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerProperties_STATUS_ARM(subject ServerProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ServerProperties_STATUS_ARMGenerator()
var serverProperties_STATUS_ARMGenerator gopter.Gen

// ServerProperties_STATUS_ARMGenerator returns a generator of ServerProperties_STATUS_ARM instances for property testing.
// We first initialize serverProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerProperties_STATUS_ARMGenerator() gopter.Gen {
	if serverProperties_STATUS_ARMGenerator != nil {
		return serverProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerProperties_STATUS_ARM(generators)
	serverProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServerProperties_STATUS_ARM(generators)
	serverProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_STATUS_ARM{}), generators)

	return serverProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["EarliestRestoreDate"] = gen.PtrOf(gen.AlphaString())
	gens["FullyQualifiedDomainName"] = gen.PtrOf(gen.AlphaString())
	gens["MasterServerId"] = gen.PtrOf(gen.AlphaString())
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.OneConstOf(
		MinimalTlsVersion_STATUS_ARM_TLS1_0,
		MinimalTlsVersion_STATUS_ARM_TLS1_1,
		MinimalTlsVersion_STATUS_ARM_TLS1_2,
		MinimalTlsVersion_STATUS_ARM_TLSEnforcementDisabled))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccess_STATUS_ARM_Disabled, PublicNetworkAccess_STATUS_ARM_Enabled))
	gens["ReplicaCapacity"] = gen.PtrOf(gen.Int())
	gens["ReplicationRole"] = gen.PtrOf(gen.AlphaString())
	gens["SslEnforcement"] = gen.PtrOf(gen.OneConstOf(SslEnforcement_STATUS_ARM_Disabled, SslEnforcement_STATUS_ARM_Enabled))
	gens["UserVisibleState"] = gen.PtrOf(gen.OneConstOf(ServerProperties_UserVisibleState_STATUS_ARM_Disabled, ServerProperties_UserVisibleState_STATUS_ARM_Dropping, ServerProperties_UserVisibleState_STATUS_ARM_Ready))
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerVersion_STATUS_ARM_102, ServerVersion_STATUS_ARM_103))
}

// AddRelatedPropertyGeneratorsForServerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpointConnections"] = gen.SliceOf(ServerPrivateEndpointConnection_STATUS_ARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(StorageProfile_STATUS_ARMGenerator())
}

func Test_Server_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Server_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServer_STATUS_ARM, Server_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServer_STATUS_ARM runs a test to see if a specific instance of Server_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServer_STATUS_ARM(subject Server_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Server_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Server_STATUS_ARM instances for property testing - lazily instantiated by Server_STATUS_ARMGenerator()
var server_STATUS_ARMGenerator gopter.Gen

// Server_STATUS_ARMGenerator returns a generator of Server_STATUS_ARM instances for property testing.
// We first initialize server_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Server_STATUS_ARMGenerator() gopter.Gen {
	if server_STATUS_ARMGenerator != nil {
		return server_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_STATUS_ARM(generators)
	server_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Server_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServer_STATUS_ARM(generators)
	server_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Server_STATUS_ARM{}), generators)

	return server_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServer_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServer_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServer_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServer_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(Sku_Tier_STATUS_ARM_Basic, Sku_Tier_STATUS_ARM_GeneralPurpose, Sku_Tier_STATUS_ARM_MemoryOptimized))
}

func Test_StorageProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageProfile_STATUS_ARM, StorageProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageProfile_STATUS_ARM runs a test to see if a specific instance of StorageProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageProfile_STATUS_ARM(subject StorageProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageProfile_STATUS_ARM instances for property testing - lazily instantiated by
// StorageProfile_STATUS_ARMGenerator()
var storageProfile_STATUS_ARMGenerator gopter.Gen

// StorageProfile_STATUS_ARMGenerator returns a generator of StorageProfile_STATUS_ARM instances for property testing.
func StorageProfile_STATUS_ARMGenerator() gopter.Gen {
	if storageProfile_STATUS_ARMGenerator != nil {
		return storageProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageProfile_STATUS_ARM(generators)
	storageProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageProfile_STATUS_ARM{}), generators)

	return storageProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.OneConstOf(StorageProfile_GeoRedundantBackup_STATUS_ARM_Disabled, StorageProfile_GeoRedundantBackup_STATUS_ARM_Enabled))
	gens["StorageAutogrow"] = gen.PtrOf(gen.OneConstOf(StorageProfile_StorageAutogrow_STATUS_ARM_Disabled, StorageProfile_StorageAutogrow_STATUS_ARM_Enabled))
	gens["StorageMB"] = gen.PtrOf(gen.Int())
}
