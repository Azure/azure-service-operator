// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Server_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Server_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerSTATUSARM, ServerSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerSTATUSARM runs a test to see if a specific instance of Server_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerSTATUSARM(subject Server_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Server_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Server_STATUSARM instances for property testing - lazily instantiated by ServerSTATUSARMGenerator()
var serverSTATUSARMGenerator gopter.Gen

// ServerSTATUSARMGenerator returns a generator of Server_STATUSARM instances for property testing.
// We first initialize serverSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerSTATUSARMGenerator() gopter.Gen {
	if serverSTATUSARMGenerator != nil {
		return serverSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerSTATUSARM(generators)
	serverSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Server_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForServerSTATUSARM(generators)
	serverSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Server_STATUSARM{}), generators)

	return serverSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServerSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerPropertiesSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuSTATUSARMGenerator())
}

func Test_ServerProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPropertiesSTATUSARM, ServerPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPropertiesSTATUSARM runs a test to see if a specific instance of ServerProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPropertiesSTATUSARM(subject ServerProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerProperties_STATUSARM instances for property testing - lazily instantiated by
// ServerPropertiesSTATUSARMGenerator()
var serverPropertiesSTATUSARMGenerator gopter.Gen

// ServerPropertiesSTATUSARMGenerator returns a generator of ServerProperties_STATUSARM instances for property testing.
// We first initialize serverPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPropertiesSTATUSARMGenerator() gopter.Gen {
	if serverPropertiesSTATUSARMGenerator != nil {
		return serverPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesSTATUSARM(generators)
	serverPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForServerPropertiesSTATUSARM(generators)
	serverPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_STATUSARM{}), generators)

	return serverPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["EarliestRestoreDate"] = gen.PtrOf(gen.AlphaString())
	gens["FullyQualifiedDomainName"] = gen.PtrOf(gen.AlphaString())
	gens["MasterServerId"] = gen.PtrOf(gen.AlphaString())
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.OneConstOf(
		MinimalTlsVersion_STATUS_TLS10,
		MinimalTlsVersion_STATUS_TLS11,
		MinimalTlsVersion_STATUS_TLS12,
		MinimalTlsVersion_STATUS_TLSEnforcementDisabled))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccess_STATUS_Disabled, PublicNetworkAccess_STATUS_Enabled))
	gens["ReplicaCapacity"] = gen.PtrOf(gen.Int())
	gens["ReplicationRole"] = gen.PtrOf(gen.AlphaString())
	gens["SslEnforcement"] = gen.PtrOf(gen.OneConstOf(SslEnforcement_STATUS_Disabled, SslEnforcement_STATUS_Enabled))
	gens["UserVisibleState"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesSTATUSUserVisibleState_Disabled, ServerPropertiesSTATUSUserVisibleState_Dropping, ServerPropertiesSTATUSUserVisibleState_Ready))
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerVersion_STATUS_102, ServerVersion_STATUS_103))
}

// AddRelatedPropertyGeneratorsForServerPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpointConnections"] = gen.SliceOf(ServerPrivateEndpointConnectionSTATUSARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(StorageProfileSTATUSARMGenerator())
}

func Test_Sku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuSTATUSARM, SkuSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuSTATUSARM runs a test to see if a specific instance of Sku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuSTATUSARM(subject Sku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUSARM instances for property testing - lazily instantiated by SkuSTATUSARMGenerator()
var skuSTATUSARMGenerator gopter.Gen

// SkuSTATUSARMGenerator returns a generator of Sku_STATUSARM instances for property testing.
func SkuSTATUSARMGenerator() gopter.Gen {
	if skuSTATUSARMGenerator != nil {
		return skuSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuSTATUSARM(generators)
	skuSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUSARM{}), generators)

	return skuSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuSTATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(SkuSTATUSTier_Basic, SkuSTATUSTier_GeneralPurpose, SkuSTATUSTier_MemoryOptimized))
}

func Test_ServerPrivateEndpointConnection_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPrivateEndpointConnection_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPrivateEndpointConnectionSTATUSARM, ServerPrivateEndpointConnectionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPrivateEndpointConnectionSTATUSARM runs a test to see if a specific instance of ServerPrivateEndpointConnection_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPrivateEndpointConnectionSTATUSARM(subject ServerPrivateEndpointConnection_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPrivateEndpointConnection_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPrivateEndpointConnection_STATUSARM instances for property testing - lazily instantiated by
// ServerPrivateEndpointConnectionSTATUSARMGenerator()
var serverPrivateEndpointConnectionSTATUSARMGenerator gopter.Gen

// ServerPrivateEndpointConnectionSTATUSARMGenerator returns a generator of ServerPrivateEndpointConnection_STATUSARM instances for property testing.
// We first initialize serverPrivateEndpointConnectionSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPrivateEndpointConnectionSTATUSARMGenerator() gopter.Gen {
	if serverPrivateEndpointConnectionSTATUSARMGenerator != nil {
		return serverPrivateEndpointConnectionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionSTATUSARM(generators)
	serverPrivateEndpointConnectionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnection_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionSTATUSARM(generators)
	serverPrivateEndpointConnectionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnection_STATUSARM{}), generators)

	return serverPrivateEndpointConnectionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerPrivateEndpointConnectionPropertiesSTATUSARMGenerator())
}

func Test_StorageProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageProfileSTATUSARM, StorageProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageProfileSTATUSARM runs a test to see if a specific instance of StorageProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageProfileSTATUSARM(subject StorageProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageProfile_STATUSARM instances for property testing - lazily instantiated by
// StorageProfileSTATUSARMGenerator()
var storageProfileSTATUSARMGenerator gopter.Gen

// StorageProfileSTATUSARMGenerator returns a generator of StorageProfile_STATUSARM instances for property testing.
func StorageProfileSTATUSARMGenerator() gopter.Gen {
	if storageProfileSTATUSARMGenerator != nil {
		return storageProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageProfileSTATUSARM(generators)
	storageProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(StorageProfile_STATUSARM{}), generators)

	return storageProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.OneConstOf(StorageProfileSTATUSGeoRedundantBackup_Disabled, StorageProfileSTATUSGeoRedundantBackup_Enabled))
	gens["StorageAutogrow"] = gen.PtrOf(gen.OneConstOf(StorageProfileSTATUSStorageAutogrow_Disabled, StorageProfileSTATUSStorageAutogrow_Enabled))
	gens["StorageMB"] = gen.PtrOf(gen.Int())
}

func Test_ServerPrivateEndpointConnectionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPrivateEndpointConnectionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPrivateEndpointConnectionPropertiesSTATUSARM, ServerPrivateEndpointConnectionPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPrivateEndpointConnectionPropertiesSTATUSARM runs a test to see if a specific instance of ServerPrivateEndpointConnectionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPrivateEndpointConnectionPropertiesSTATUSARM(subject ServerPrivateEndpointConnectionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPrivateEndpointConnectionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPrivateEndpointConnectionProperties_STATUSARM instances for property testing - lazily instantiated
// by ServerPrivateEndpointConnectionPropertiesSTATUSARMGenerator()
var serverPrivateEndpointConnectionPropertiesSTATUSARMGenerator gopter.Gen

// ServerPrivateEndpointConnectionPropertiesSTATUSARMGenerator returns a generator of ServerPrivateEndpointConnectionProperties_STATUSARM instances for property testing.
// We first initialize serverPrivateEndpointConnectionPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPrivateEndpointConnectionPropertiesSTATUSARMGenerator() gopter.Gen {
	if serverPrivateEndpointConnectionPropertiesSTATUSARMGenerator != nil {
		return serverPrivateEndpointConnectionPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionPropertiesSTATUSARM(generators)
	serverPrivateEndpointConnectionPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnectionProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionPropertiesSTATUSARM(generators)
	serverPrivateEndpointConnectionPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateEndpointConnectionProperties_STATUSARM{}), generators)

	return serverPrivateEndpointConnectionPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPrivateEndpointConnectionPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ServerPrivateEndpointConnectionPropertiesSTATUSProvisioningState_Approving,
		ServerPrivateEndpointConnectionPropertiesSTATUSProvisioningState_Dropping,
		ServerPrivateEndpointConnectionPropertiesSTATUSProvisioningState_Failed,
		ServerPrivateEndpointConnectionPropertiesSTATUSProvisioningState_Ready,
		ServerPrivateEndpointConnectionPropertiesSTATUSProvisioningState_Rejecting))
}

// AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPrivateEndpointConnectionPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointPropertySTATUSARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(ServerPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator())
}

func Test_PrivateEndpointProperty_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointProperty_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointPropertySTATUSARM, PrivateEndpointPropertySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointPropertySTATUSARM runs a test to see if a specific instance of PrivateEndpointProperty_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointPropertySTATUSARM(subject PrivateEndpointProperty_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointProperty_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointProperty_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpointPropertySTATUSARMGenerator()
var privateEndpointPropertySTATUSARMGenerator gopter.Gen

// PrivateEndpointPropertySTATUSARMGenerator returns a generator of PrivateEndpointProperty_STATUSARM instances for property testing.
func PrivateEndpointPropertySTATUSARMGenerator() gopter.Gen {
	if privateEndpointPropertySTATUSARMGenerator != nil {
		return privateEndpointPropertySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointPropertySTATUSARM(generators)
	privateEndpointPropertySTATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperty_STATUSARM{}), generators)

	return privateEndpointPropertySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointPropertySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointPropertySTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServerPrivateLinkServiceConnectionStateProperty_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPrivateLinkServiceConnectionStateProperty_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPrivateLinkServiceConnectionStatePropertySTATUSARM, ServerPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPrivateLinkServiceConnectionStatePropertySTATUSARM runs a test to see if a specific instance of ServerPrivateLinkServiceConnectionStateProperty_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPrivateLinkServiceConnectionStatePropertySTATUSARM(subject ServerPrivateLinkServiceConnectionStateProperty_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPrivateLinkServiceConnectionStateProperty_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPrivateLinkServiceConnectionStateProperty_STATUSARM instances for property testing - lazily
// instantiated by ServerPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator()
var serverPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator gopter.Gen

// ServerPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator returns a generator of ServerPrivateLinkServiceConnectionStateProperty_STATUSARM instances for property testing.
func ServerPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator() gopter.Gen {
	if serverPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator != nil {
		return serverPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPrivateLinkServiceConnectionStatePropertySTATUSARM(generators)
	serverPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerPrivateLinkServiceConnectionStateProperty_STATUSARM{}), generators)

	return serverPrivateLinkServiceConnectionStatePropertySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPrivateLinkServiceConnectionStatePropertySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPrivateLinkServiceConnectionStatePropertySTATUSARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.OneConstOf(ServerPrivateLinkServiceConnectionStatePropertySTATUSActionsRequired_None))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		ServerPrivateLinkServiceConnectionStatePropertySTATUSStatus_Approved,
		ServerPrivateLinkServiceConnectionStatePropertySTATUSStatus_Disconnected,
		ServerPrivateLinkServiceConnectionStatePropertySTATUSStatus_Pending,
		ServerPrivateLinkServiceConnectionStatePropertySTATUSStatus_Rejected))
}
