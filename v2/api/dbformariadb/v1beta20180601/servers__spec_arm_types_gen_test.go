// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersSpecARM, ServersSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersSpecARM runs a test to see if a specific instance of Servers_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServersSpecARM(subject Servers_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_SpecARM instances for property testing - lazily instantiated by ServersSpecARMGenerator()
var serversSpecARMGenerator gopter.Gen

// ServersSpecARMGenerator returns a generator of Servers_SpecARM instances for property testing.
// We first initialize serversSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersSpecARMGenerator() gopter.Gen {
	if serversSpecARMGenerator != nil {
		return serversSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersSpecARM(generators)
	serversSpecARMGenerator = gen.Struct(reflect.TypeOf(Servers_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersSpecARM(generators)
	AddRelatedPropertyGeneratorsForServersSpecARM(generators)
	serversSpecARMGenerator = gen.Struct(reflect.TypeOf(Servers_SpecARM{}), generators)

	return serversSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServersSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersSpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerPropertiesForCreateARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuARMGenerator())
}

func Test_ServerPropertiesForCreateARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPropertiesForCreateARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPropertiesForCreateARM, ServerPropertiesForCreateARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPropertiesForCreateARM runs a test to see if a specific instance of ServerPropertiesForCreateARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPropertiesForCreateARM(subject ServerPropertiesForCreateARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPropertiesForCreateARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPropertiesForCreateARM instances for property testing - lazily instantiated by
// ServerPropertiesForCreateARMGenerator()
var serverPropertiesForCreateARMGenerator gopter.Gen

// ServerPropertiesForCreateARMGenerator returns a generator of ServerPropertiesForCreateARM instances for property testing.
func ServerPropertiesForCreateARMGenerator() gopter.Gen {
	if serverPropertiesForCreateARMGenerator != nil {
		return serverPropertiesForCreateARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServerPropertiesForCreateARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(ServerPropertiesForCreateARM{}), map[string]gopter.Gen{
			propName: propGen,
		}))
	}
	serverPropertiesForCreateARMGenerator = gen.OneGenOf(gens...)

	return serverPropertiesForCreateARMGenerator
}

// AddRelatedPropertyGeneratorsForServerPropertiesForCreateARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPropertiesForCreateARM(gens map[string]gopter.Gen) {
	gens["ServerPropertiesForDefaultCreate"] = ServerPropertiesForDefaultCreateARMGenerator().Map(func(it ServerPropertiesForDefaultCreateARM) *ServerPropertiesForDefaultCreateARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServerPropertiesForGeoRestore"] = ServerPropertiesForGeoRestoreARMGenerator().Map(func(it ServerPropertiesForGeoRestoreARM) *ServerPropertiesForGeoRestoreARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServerPropertiesForReplica"] = ServerPropertiesForReplicaARMGenerator().Map(func(it ServerPropertiesForReplicaARM) *ServerPropertiesForReplicaARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServerPropertiesForRestore"] = ServerPropertiesForRestoreARMGenerator().Map(func(it ServerPropertiesForRestoreARM) *ServerPropertiesForRestoreARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_SkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuARM, SkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuARM runs a test to see if a specific instance of SkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuARM(subject SkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuARM instances for property testing - lazily instantiated by SkuARMGenerator()
var skuARMGenerator gopter.Gen

// SkuARMGenerator returns a generator of SkuARM instances for property testing.
func SkuARMGenerator() gopter.Gen {
	if skuARMGenerator != nil {
		return skuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuARM(generators)
	skuARMGenerator = gen.Struct(reflect.TypeOf(SkuARM{}), generators)

	return skuARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(SkuTier_Basic, SkuTier_GeneralPurpose, SkuTier_MemoryOptimized))
}

func Test_ServerPropertiesForDefaultCreateARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPropertiesForDefaultCreateARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPropertiesForDefaultCreateARM, ServerPropertiesForDefaultCreateARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPropertiesForDefaultCreateARM runs a test to see if a specific instance of ServerPropertiesForDefaultCreateARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPropertiesForDefaultCreateARM(subject ServerPropertiesForDefaultCreateARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPropertiesForDefaultCreateARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPropertiesForDefaultCreateARM instances for property testing - lazily instantiated by
// ServerPropertiesForDefaultCreateARMGenerator()
var serverPropertiesForDefaultCreateARMGenerator gopter.Gen

// ServerPropertiesForDefaultCreateARMGenerator returns a generator of ServerPropertiesForDefaultCreateARM instances for property testing.
// We first initialize serverPropertiesForDefaultCreateARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPropertiesForDefaultCreateARMGenerator() gopter.Gen {
	if serverPropertiesForDefaultCreateARMGenerator != nil {
		return serverPropertiesForDefaultCreateARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForDefaultCreateARM(generators)
	serverPropertiesForDefaultCreateARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForDefaultCreateARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForDefaultCreateARM(generators)
	AddRelatedPropertyGeneratorsForServerPropertiesForDefaultCreateARM(generators)
	serverPropertiesForDefaultCreateARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForDefaultCreateARM{}), generators)

	return serverPropertiesForDefaultCreateARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPropertiesForDefaultCreateARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPropertiesForDefaultCreateARM(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["AdministratorLoginPassword"] = gen.AlphaString()
	gens["CreateMode"] = gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForDefaultCreateCreateMode_Default)
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.OneConstOf(
		ServerPropertiesForCreateServerPropertiesForDefaultCreateMinimalTlsVersion_TLS10,
		ServerPropertiesForCreateServerPropertiesForDefaultCreateMinimalTlsVersion_TLS11,
		ServerPropertiesForCreateServerPropertiesForDefaultCreateMinimalTlsVersion_TLS12,
		ServerPropertiesForCreateServerPropertiesForDefaultCreateMinimalTlsVersion_TLSEnforcementDisabled))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForDefaultCreatePublicNetworkAccess_Disabled, ServerPropertiesForCreateServerPropertiesForDefaultCreatePublicNetworkAccess_Enabled))
	gens["SslEnforcement"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForDefaultCreateSslEnforcement_Disabled, ServerPropertiesForCreateServerPropertiesForDefaultCreateSslEnforcement_Enabled))
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForDefaultCreateVersion_102, ServerPropertiesForCreateServerPropertiesForDefaultCreateVersion_103))
}

// AddRelatedPropertyGeneratorsForServerPropertiesForDefaultCreateARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPropertiesForDefaultCreateARM(gens map[string]gopter.Gen) {
	gens["StorageProfile"] = gen.PtrOf(StorageProfileARMGenerator())
}

func Test_ServerPropertiesForGeoRestoreARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPropertiesForGeoRestoreARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPropertiesForGeoRestoreARM, ServerPropertiesForGeoRestoreARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPropertiesForGeoRestoreARM runs a test to see if a specific instance of ServerPropertiesForGeoRestoreARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPropertiesForGeoRestoreARM(subject ServerPropertiesForGeoRestoreARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPropertiesForGeoRestoreARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPropertiesForGeoRestoreARM instances for property testing - lazily instantiated by
// ServerPropertiesForGeoRestoreARMGenerator()
var serverPropertiesForGeoRestoreARMGenerator gopter.Gen

// ServerPropertiesForGeoRestoreARMGenerator returns a generator of ServerPropertiesForGeoRestoreARM instances for property testing.
// We first initialize serverPropertiesForGeoRestoreARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPropertiesForGeoRestoreARMGenerator() gopter.Gen {
	if serverPropertiesForGeoRestoreARMGenerator != nil {
		return serverPropertiesForGeoRestoreARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForGeoRestoreARM(generators)
	serverPropertiesForGeoRestoreARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForGeoRestoreARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForGeoRestoreARM(generators)
	AddRelatedPropertyGeneratorsForServerPropertiesForGeoRestoreARM(generators)
	serverPropertiesForGeoRestoreARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForGeoRestoreARM{}), generators)

	return serverPropertiesForGeoRestoreARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPropertiesForGeoRestoreARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPropertiesForGeoRestoreARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForGeoRestoreCreateMode_GeoRestore)
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.OneConstOf(
		ServerPropertiesForCreateServerPropertiesForGeoRestoreMinimalTlsVersion_TLS10,
		ServerPropertiesForCreateServerPropertiesForGeoRestoreMinimalTlsVersion_TLS11,
		ServerPropertiesForCreateServerPropertiesForGeoRestoreMinimalTlsVersion_TLS12,
		ServerPropertiesForCreateServerPropertiesForGeoRestoreMinimalTlsVersion_TLSEnforcementDisabled))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForGeoRestorePublicNetworkAccess_Disabled, ServerPropertiesForCreateServerPropertiesForGeoRestorePublicNetworkAccess_Enabled))
	gens["SourceServerId"] = gen.PtrOf(gen.AlphaString())
	gens["SslEnforcement"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForGeoRestoreSslEnforcement_Disabled, ServerPropertiesForCreateServerPropertiesForGeoRestoreSslEnforcement_Enabled))
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForGeoRestoreVersion_102, ServerPropertiesForCreateServerPropertiesForGeoRestoreVersion_103))
}

// AddRelatedPropertyGeneratorsForServerPropertiesForGeoRestoreARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPropertiesForGeoRestoreARM(gens map[string]gopter.Gen) {
	gens["StorageProfile"] = gen.PtrOf(StorageProfileARMGenerator())
}

func Test_ServerPropertiesForReplicaARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPropertiesForReplicaARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPropertiesForReplicaARM, ServerPropertiesForReplicaARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPropertiesForReplicaARM runs a test to see if a specific instance of ServerPropertiesForReplicaARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPropertiesForReplicaARM(subject ServerPropertiesForReplicaARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPropertiesForReplicaARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPropertiesForReplicaARM instances for property testing - lazily instantiated by
// ServerPropertiesForReplicaARMGenerator()
var serverPropertiesForReplicaARMGenerator gopter.Gen

// ServerPropertiesForReplicaARMGenerator returns a generator of ServerPropertiesForReplicaARM instances for property testing.
// We first initialize serverPropertiesForReplicaARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPropertiesForReplicaARMGenerator() gopter.Gen {
	if serverPropertiesForReplicaARMGenerator != nil {
		return serverPropertiesForReplicaARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForReplicaARM(generators)
	serverPropertiesForReplicaARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForReplicaARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForReplicaARM(generators)
	AddRelatedPropertyGeneratorsForServerPropertiesForReplicaARM(generators)
	serverPropertiesForReplicaARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForReplicaARM{}), generators)

	return serverPropertiesForReplicaARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPropertiesForReplicaARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPropertiesForReplicaARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForReplicaCreateMode_Replica)
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.OneConstOf(
		ServerPropertiesForCreateServerPropertiesForReplicaMinimalTlsVersion_TLS10,
		ServerPropertiesForCreateServerPropertiesForReplicaMinimalTlsVersion_TLS11,
		ServerPropertiesForCreateServerPropertiesForReplicaMinimalTlsVersion_TLS12,
		ServerPropertiesForCreateServerPropertiesForReplicaMinimalTlsVersion_TLSEnforcementDisabled))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForReplicaPublicNetworkAccess_Disabled, ServerPropertiesForCreateServerPropertiesForReplicaPublicNetworkAccess_Enabled))
	gens["SourceServerId"] = gen.PtrOf(gen.AlphaString())
	gens["SslEnforcement"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForReplicaSslEnforcement_Disabled, ServerPropertiesForCreateServerPropertiesForReplicaSslEnforcement_Enabled))
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForReplicaVersion_102, ServerPropertiesForCreateServerPropertiesForReplicaVersion_103))
}

// AddRelatedPropertyGeneratorsForServerPropertiesForReplicaARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPropertiesForReplicaARM(gens map[string]gopter.Gen) {
	gens["StorageProfile"] = gen.PtrOf(StorageProfileARMGenerator())
}

func Test_ServerPropertiesForRestoreARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPropertiesForRestoreARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPropertiesForRestoreARM, ServerPropertiesForRestoreARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPropertiesForRestoreARM runs a test to see if a specific instance of ServerPropertiesForRestoreARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPropertiesForRestoreARM(subject ServerPropertiesForRestoreARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPropertiesForRestoreARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPropertiesForRestoreARM instances for property testing - lazily instantiated by
// ServerPropertiesForRestoreARMGenerator()
var serverPropertiesForRestoreARMGenerator gopter.Gen

// ServerPropertiesForRestoreARMGenerator returns a generator of ServerPropertiesForRestoreARM instances for property testing.
// We first initialize serverPropertiesForRestoreARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPropertiesForRestoreARMGenerator() gopter.Gen {
	if serverPropertiesForRestoreARMGenerator != nil {
		return serverPropertiesForRestoreARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForRestoreARM(generators)
	serverPropertiesForRestoreARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForRestoreARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForRestoreARM(generators)
	AddRelatedPropertyGeneratorsForServerPropertiesForRestoreARM(generators)
	serverPropertiesForRestoreARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForRestoreARM{}), generators)

	return serverPropertiesForRestoreARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPropertiesForRestoreARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPropertiesForRestoreARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForRestoreCreateMode_PointInTimeRestore)
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.OneConstOf(
		ServerPropertiesForCreateServerPropertiesForRestoreMinimalTlsVersion_TLS10,
		ServerPropertiesForCreateServerPropertiesForRestoreMinimalTlsVersion_TLS11,
		ServerPropertiesForCreateServerPropertiesForRestoreMinimalTlsVersion_TLS12,
		ServerPropertiesForCreateServerPropertiesForRestoreMinimalTlsVersion_TLSEnforcementDisabled))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForRestorePublicNetworkAccess_Disabled, ServerPropertiesForCreateServerPropertiesForRestorePublicNetworkAccess_Enabled))
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["SourceServerId"] = gen.PtrOf(gen.AlphaString())
	gens["SslEnforcement"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForRestoreSslEnforcement_Disabled, ServerPropertiesForCreateServerPropertiesForRestoreSslEnforcement_Enabled))
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerPropertiesForCreateServerPropertiesForRestoreVersion_102, ServerPropertiesForCreateServerPropertiesForRestoreVersion_103))
}

// AddRelatedPropertyGeneratorsForServerPropertiesForRestoreARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPropertiesForRestoreARM(gens map[string]gopter.Gen) {
	gens["StorageProfile"] = gen.PtrOf(StorageProfileARMGenerator())
}

func Test_StorageProfileARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageProfileARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageProfileARM, StorageProfileARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageProfileARM runs a test to see if a specific instance of StorageProfileARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageProfileARM(subject StorageProfileARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageProfileARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageProfileARM instances for property testing - lazily instantiated by StorageProfileARMGenerator()
var storageProfileARMGenerator gopter.Gen

// StorageProfileARMGenerator returns a generator of StorageProfileARM instances for property testing.
func StorageProfileARMGenerator() gopter.Gen {
	if storageProfileARMGenerator != nil {
		return storageProfileARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageProfileARM(generators)
	storageProfileARMGenerator = gen.Struct(reflect.TypeOf(StorageProfileARM{}), generators)

	return storageProfileARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageProfileARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageProfileARM(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.OneConstOf(StorageProfileGeoRedundantBackup_Disabled, StorageProfileGeoRedundantBackup_Enabled))
	gens["StorageAutogrow"] = gen.PtrOf(gen.OneConstOf(StorageProfileStorageAutogrow_Disabled, StorageProfileStorageAutogrow_Enabled))
	gens["StorageMB"] = gen.PtrOf(gen.Int())
}
