// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Server_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Server_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServer_SpecARM, Server_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServer_SpecARM runs a test to see if a specific instance of Server_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServer_SpecARM(subject Server_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Server_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Server_SpecARM instances for property testing - lazily instantiated by Server_SpecARMGenerator()
var server_SpecARMGenerator gopter.Gen

// Server_SpecARMGenerator returns a generator of Server_SpecARM instances for property testing.
// We first initialize server_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Server_SpecARMGenerator() gopter.Gen {
	if server_SpecARMGenerator != nil {
		return server_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_SpecARM(generators)
	server_SpecARMGenerator = gen.Struct(reflect.TypeOf(Server_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_SpecARM(generators)
	AddRelatedPropertyGeneratorsForServer_SpecARM(generators)
	server_SpecARMGenerator = gen.Struct(reflect.TypeOf(Server_SpecARM{}), generators)

	return server_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServer_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServer_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServer_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServer_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerPropertiesForCreateARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuARMGenerator())
}

func Test_ServerPropertiesForCreateARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPropertiesForCreateARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPropertiesForCreateARM, ServerPropertiesForCreateARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPropertiesForCreateARM runs a test to see if a specific instance of ServerPropertiesForCreateARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPropertiesForCreateARM(subject ServerPropertiesForCreateARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPropertiesForCreateARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPropertiesForCreateARM instances for property testing - lazily instantiated by
// ServerPropertiesForCreateARMGenerator()
var serverPropertiesForCreateARMGenerator gopter.Gen

// ServerPropertiesForCreateARMGenerator returns a generator of ServerPropertiesForCreateARM instances for property testing.
// We first initialize serverPropertiesForCreateARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerPropertiesForCreateARMGenerator() gopter.Gen {
	if serverPropertiesForCreateARMGenerator != nil {
		return serverPropertiesForCreateARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForCreateARM(generators)
	serverPropertiesForCreateARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForCreateARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPropertiesForCreateARM(generators)
	AddRelatedPropertyGeneratorsForServerPropertiesForCreateARM(generators)
	serverPropertiesForCreateARMGenerator = gen.Struct(reflect.TypeOf(ServerPropertiesForCreateARM{}), generators)

	return serverPropertiesForCreateARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPropertiesForCreateARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPropertiesForCreateARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		ServerPropertiesForCreate_CreateModeDefault,
		ServerPropertiesForCreate_CreateModeGeoRestore,
		ServerPropertiesForCreate_CreateModePointInTimeRestore,
		ServerPropertiesForCreate_CreateModeReplica))
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.OneConstOf(
		MinimalTlsVersionTLS1_0,
		MinimalTlsVersionTLS1_1,
		MinimalTlsVersionTLS1_2,
		MinimalTlsVersionTLSEnforcementDisabled))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessDisabled, PublicNetworkAccessEnabled))
	gens["SslEnforcement"] = gen.PtrOf(gen.OneConstOf(SslEnforcementDisabled, SslEnforcementEnabled))
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerVersion102, ServerVersion103))
}

// AddRelatedPropertyGeneratorsForServerPropertiesForCreateARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerPropertiesForCreateARM(gens map[string]gopter.Gen) {
	gens["StorageProfile"] = gen.PtrOf(StorageProfileARMGenerator())
}

func Test_SkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuARM, SkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuARM runs a test to see if a specific instance of SkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuARM(subject SkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuARM instances for property testing - lazily instantiated by SkuARMGenerator()
var skuARMGenerator gopter.Gen

// SkuARMGenerator returns a generator of SkuARM instances for property testing.
func SkuARMGenerator() gopter.Gen {
	if skuARMGenerator != nil {
		return skuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuARM(generators)
	skuARMGenerator = gen.Struct(reflect.TypeOf(SkuARM{}), generators)

	return skuARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(Sku_TierBasic, Sku_TierGeneralPurpose, Sku_TierMemoryOptimized))
}

func Test_StorageProfileARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageProfileARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageProfileARM, StorageProfileARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageProfileARM runs a test to see if a specific instance of StorageProfileARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageProfileARM(subject StorageProfileARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageProfileARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageProfileARM instances for property testing - lazily instantiated by StorageProfileARMGenerator()
var storageProfileARMGenerator gopter.Gen

// StorageProfileARMGenerator returns a generator of StorageProfileARM instances for property testing.
func StorageProfileARMGenerator() gopter.Gen {
	if storageProfileARMGenerator != nil {
		return storageProfileARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageProfileARM(generators)
	storageProfileARMGenerator = gen.Struct(reflect.TypeOf(StorageProfileARM{}), generators)

	return storageProfileARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageProfileARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageProfileARM(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.OneConstOf(StorageProfile_GeoRedundantBackupDisabled, StorageProfile_GeoRedundantBackupEnabled))
	gens["StorageAutogrow"] = gen.PtrOf(gen.OneConstOf(StorageProfile_StorageAutogrowDisabled, StorageProfile_StorageAutogrowEnabled))
	gens["StorageMB"] = gen.PtrOf(gen.Int())
}
