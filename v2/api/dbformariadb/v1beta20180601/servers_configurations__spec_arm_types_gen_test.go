// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersConfigurations_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersConfigurations_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersConfigurationsSpecARM, ServersConfigurationsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersConfigurationsSpecARM runs a test to see if a specific instance of ServersConfigurations_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServersConfigurationsSpecARM(subject ServersConfigurations_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersConfigurations_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersConfigurations_SpecARM instances for property testing - lazily instantiated by
// ServersConfigurationsSpecARMGenerator()
var serversConfigurationsSpecARMGenerator gopter.Gen

// ServersConfigurationsSpecARMGenerator returns a generator of ServersConfigurations_SpecARM instances for property testing.
// We first initialize serversConfigurationsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersConfigurationsSpecARMGenerator() gopter.Gen {
	if serversConfigurationsSpecARMGenerator != nil {
		return serversConfigurationsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersConfigurationsSpecARM(generators)
	serversConfigurationsSpecARMGenerator = gen.Struct(reflect.TypeOf(ServersConfigurations_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersConfigurationsSpecARM(generators)
	AddRelatedPropertyGeneratorsForServersConfigurationsSpecARM(generators)
	serversConfigurationsSpecARMGenerator = gen.Struct(reflect.TypeOf(ServersConfigurations_SpecARM{}), generators)

	return serversConfigurationsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServersConfigurationsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersConfigurationsSpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersConfigurationsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersConfigurationsSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ConfigurationPropertiesARMGenerator())
}

func Test_ConfigurationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConfigurationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConfigurationPropertiesARM, ConfigurationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConfigurationPropertiesARM runs a test to see if a specific instance of ConfigurationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConfigurationPropertiesARM(subject ConfigurationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConfigurationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConfigurationPropertiesARM instances for property testing - lazily instantiated by
// ConfigurationPropertiesARMGenerator()
var configurationPropertiesARMGenerator gopter.Gen

// ConfigurationPropertiesARMGenerator returns a generator of ConfigurationPropertiesARM instances for property testing.
func ConfigurationPropertiesARMGenerator() gopter.Gen {
	if configurationPropertiesARMGenerator != nil {
		return configurationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConfigurationPropertiesARM(generators)
	configurationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ConfigurationPropertiesARM{}), generators)

	return configurationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForConfigurationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConfigurationPropertiesARM(gens map[string]gopter.Gen) {
	gens["Source"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
