// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180601storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=dbformariadb.azure.com,resources=configurations,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=dbformariadb.azure.com,resources={configurations/status,configurations/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1beta20180601.Configuration
// Generated from: https://schema.management.azure.com/schemas/2018-06-01/Microsoft.DBforMariaDB.json#/resourceDefinitions/servers_configurations
type Configuration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServersConfigurations_Spec `json:"spec,omitempty"`
	Status            Configuration_Status       `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Configuration{}

// GetConditions returns the conditions of the resource
func (configuration *Configuration) GetConditions() conditions.Conditions {
	return configuration.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (configuration *Configuration) SetConditions(conditions conditions.Conditions) {
	configuration.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &Configuration{}

// AzureName returns the Azure name of the resource
func (configuration *Configuration) AzureName() string {
	return configuration.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-06-01"
func (configuration Configuration) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceScope returns the scope of the resource
func (configuration *Configuration) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (configuration *Configuration) GetSpec() genruntime.ConvertibleSpec {
	return &configuration.Spec
}

// GetStatus returns the status of this resource
func (configuration *Configuration) GetStatus() genruntime.ConvertibleStatus {
	return &configuration.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DBforMariaDB/servers/configurations"
func (configuration *Configuration) GetType() string {
	return "Microsoft.DBforMariaDB/servers/configurations"
}

// NewEmptyStatus returns a new empty (blank) status
func (configuration *Configuration) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Configuration_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (configuration *Configuration) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(configuration.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  configuration.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (configuration *Configuration) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Configuration_Status); ok {
		configuration.Status = *st
		return nil
	}

	// Convert status to required version
	var st Configuration_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	configuration.Status = st
	return nil
}

// Hub marks that this Configuration is the hub type for conversion
func (configuration *Configuration) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (configuration *Configuration) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: configuration.Spec.OriginalVersion,
		Kind:    "Configuration",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1beta20180601.Configuration
// Generated from: https://schema.management.azure.com/schemas/2018-06-01/Microsoft.DBforMariaDB.json#/resourceDefinitions/servers_configurations
type ConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Configuration `json:"items"`
}

// Storage version of v1beta20180601.APIVersion
// +kubebuilder:validation:Enum={"2018-06-01"}
type APIVersion string

const APIVersionValue = APIVersion("2018-06-01")

// Storage version of v1beta20180601.Configuration_Status
type Configuration_Status struct {
	AllowedValues *string                `json:"allowedValues,omitempty"`
	Conditions    []conditions.Condition `json:"conditions,omitempty"`
	DataType      *string                `json:"dataType,omitempty"`
	DefaultValue  *string                `json:"defaultValue,omitempty"`
	Description   *string                `json:"description,omitempty"`
	Id            *string                `json:"id,omitempty"`
	Name          *string                `json:"name,omitempty"`
	PropertyBag   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Source        *string                `json:"source,omitempty"`
	Type          *string                `json:"type,omitempty"`
	Value         *string                `json:"value,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Configuration_Status{}

// ConvertStatusFrom populates our Configuration_Status from the provided source
func (configuration *Configuration_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == configuration {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(configuration)
}

// ConvertStatusTo populates the provided destination from our Configuration_Status
func (configuration *Configuration_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == configuration {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(configuration)
}

// Storage version of v1beta20180601.ServersConfigurations_Spec
type ServersConfigurations_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string  `json:"azureName,omitempty"`
	Location        *string `json:"location,omitempty"`
	OriginalVersion string  `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a dbformariadb.azure.com/Server resource
	Owner       *genruntime.KnownResourceReference `group:"dbformariadb.azure.com" json:"owner,omitempty" kind:"Server"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Source      *string                            `json:"source,omitempty"`
	Tags        map[string]string                  `json:"tags,omitempty"`
	Value       *string                            `json:"value,omitempty"`
}

var _ genruntime.ConvertibleSpec = &ServersConfigurations_Spec{}

// ConvertSpecFrom populates our ServersConfigurations_Spec from the provided source
func (configurations *ServersConfigurations_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == configurations {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(configurations)
}

// ConvertSpecTo populates the provided destination from our ServersConfigurations_Spec
func (configurations *ServersConfigurations_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == configurations {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(configurations)
}

func init() {
	SchemeBuilder.Register(&Configuration{}, &ConfigurationList{})
}
