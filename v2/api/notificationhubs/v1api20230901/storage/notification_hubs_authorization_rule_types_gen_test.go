// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NotificationHubsAuthorizationRule_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotificationHubsAuthorizationRule via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotificationHubsAuthorizationRule, NotificationHubsAuthorizationRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotificationHubsAuthorizationRule runs a test to see if a specific instance of NotificationHubsAuthorizationRule round trips to JSON and back losslessly
func RunJSONSerializationTestForNotificationHubsAuthorizationRule(subject NotificationHubsAuthorizationRule) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotificationHubsAuthorizationRule
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotificationHubsAuthorizationRule instances for property testing - lazily instantiated by
// NotificationHubsAuthorizationRuleGenerator()
var notificationHubsAuthorizationRuleGenerator gopter.Gen

// NotificationHubsAuthorizationRuleGenerator returns a generator of NotificationHubsAuthorizationRule instances for property testing.
func NotificationHubsAuthorizationRuleGenerator() gopter.Gen {
	if notificationHubsAuthorizationRuleGenerator != nil {
		return notificationHubsAuthorizationRuleGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule(generators)
	notificationHubsAuthorizationRuleGenerator = gen.Struct(reflect.TypeOf(NotificationHubsAuthorizationRule{}), generators)

	return notificationHubsAuthorizationRuleGenerator
}

// AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule(gens map[string]gopter.Gen) {
	gens["Spec"] = NotificationHubsAuthorizationRule_SpecGenerator()
	gens["Status"] = NotificationHubsAuthorizationRule_STATUSGenerator()
}

func Test_NotificationHubsAuthorizationRuleOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotificationHubsAuthorizationRuleOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotificationHubsAuthorizationRuleOperatorSpec, NotificationHubsAuthorizationRuleOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotificationHubsAuthorizationRuleOperatorSpec runs a test to see if a specific instance of NotificationHubsAuthorizationRuleOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForNotificationHubsAuthorizationRuleOperatorSpec(subject NotificationHubsAuthorizationRuleOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotificationHubsAuthorizationRuleOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotificationHubsAuthorizationRuleOperatorSpec instances for property testing - lazily instantiated by
// NotificationHubsAuthorizationRuleOperatorSpecGenerator()
var notificationHubsAuthorizationRuleOperatorSpecGenerator gopter.Gen

// NotificationHubsAuthorizationRuleOperatorSpecGenerator returns a generator of NotificationHubsAuthorizationRuleOperatorSpec instances for property testing.
func NotificationHubsAuthorizationRuleOperatorSpecGenerator() gopter.Gen {
	if notificationHubsAuthorizationRuleOperatorSpecGenerator != nil {
		return notificationHubsAuthorizationRuleOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	notificationHubsAuthorizationRuleOperatorSpecGenerator = gen.Struct(reflect.TypeOf(NotificationHubsAuthorizationRuleOperatorSpec{}), generators)

	return notificationHubsAuthorizationRuleOperatorSpecGenerator
}

func Test_NotificationHubsAuthorizationRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotificationHubsAuthorizationRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotificationHubsAuthorizationRule_STATUS, NotificationHubsAuthorizationRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotificationHubsAuthorizationRule_STATUS runs a test to see if a specific instance of NotificationHubsAuthorizationRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNotificationHubsAuthorizationRule_STATUS(subject NotificationHubsAuthorizationRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotificationHubsAuthorizationRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotificationHubsAuthorizationRule_STATUS instances for property testing - lazily instantiated by
// NotificationHubsAuthorizationRule_STATUSGenerator()
var notificationHubsAuthorizationRule_STATUSGenerator gopter.Gen

// NotificationHubsAuthorizationRule_STATUSGenerator returns a generator of NotificationHubsAuthorizationRule_STATUS instances for property testing.
// We first initialize notificationHubsAuthorizationRule_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NotificationHubsAuthorizationRule_STATUSGenerator() gopter.Gen {
	if notificationHubsAuthorizationRule_STATUSGenerator != nil {
		return notificationHubsAuthorizationRule_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_STATUS(generators)
	notificationHubsAuthorizationRule_STATUSGenerator = gen.Struct(reflect.TypeOf(NotificationHubsAuthorizationRule_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_STATUS(generators)
	AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule_STATUS(generators)
	notificationHubsAuthorizationRule_STATUSGenerator = gen.Struct(reflect.TypeOf(NotificationHubsAuthorizationRule_STATUS{}), generators)

	return notificationHubsAuthorizationRule_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SharedAccessAuthorizationRuleProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_NotificationHubsAuthorizationRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotificationHubsAuthorizationRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotificationHubsAuthorizationRule_Spec, NotificationHubsAuthorizationRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotificationHubsAuthorizationRule_Spec runs a test to see if a specific instance of NotificationHubsAuthorizationRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForNotificationHubsAuthorizationRule_Spec(subject NotificationHubsAuthorizationRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotificationHubsAuthorizationRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotificationHubsAuthorizationRule_Spec instances for property testing - lazily instantiated by
// NotificationHubsAuthorizationRule_SpecGenerator()
var notificationHubsAuthorizationRule_SpecGenerator gopter.Gen

// NotificationHubsAuthorizationRule_SpecGenerator returns a generator of NotificationHubsAuthorizationRule_Spec instances for property testing.
// We first initialize notificationHubsAuthorizationRule_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NotificationHubsAuthorizationRule_SpecGenerator() gopter.Gen {
	if notificationHubsAuthorizationRule_SpecGenerator != nil {
		return notificationHubsAuthorizationRule_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_Spec(generators)
	notificationHubsAuthorizationRule_SpecGenerator = gen.Struct(reflect.TypeOf(NotificationHubsAuthorizationRule_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_Spec(generators)
	AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule_Spec(generators)
	notificationHubsAuthorizationRule_SpecGenerator = gen.Struct(reflect.TypeOf(NotificationHubsAuthorizationRule_Spec{}), generators)

	return notificationHubsAuthorizationRule_SpecGenerator
}

// AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNotificationHubsAuthorizationRule_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNotificationHubsAuthorizationRule_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(NotificationHubsAuthorizationRuleOperatorSpecGenerator())
	gens["Properties"] = gen.PtrOf(SharedAccessAuthorizationRulePropertiesGenerator())
}
