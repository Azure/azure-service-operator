// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Eventhub_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhub_STATUSARM, Eventhub_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhub_STATUSARM runs a test to see if a specific instance of Eventhub_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhub_STATUSARM(subject Eventhub_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_STATUSARM instances for property testing - lazily instantiated by Eventhub_STATUSARMGenerator()
var eventhub_STATUSARMGenerator gopter.Gen

// Eventhub_STATUSARMGenerator returns a generator of Eventhub_STATUSARM instances for property testing.
// We first initialize eventhub_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Eventhub_STATUSARMGenerator() gopter.Gen {
	if eventhub_STATUSARMGenerator != nil {
		return eventhub_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_STATUSARM(generators)
	eventhub_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventhub_STATUSARM(generators)
	eventhub_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUSARM{}), generators)

	return eventhub_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhub_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhub_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhub_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhub_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Eventhub_Properties_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_Eventhub_Properties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_Properties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhub_Properties_STATUSARM, Eventhub_Properties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhub_Properties_STATUSARM runs a test to see if a specific instance of Eventhub_Properties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhub_Properties_STATUSARM(subject Eventhub_Properties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_Properties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_Properties_STATUSARM instances for property testing - lazily instantiated by
// Eventhub_Properties_STATUSARMGenerator()
var eventhub_Properties_STATUSARMGenerator gopter.Gen

// Eventhub_Properties_STATUSARMGenerator returns a generator of Eventhub_Properties_STATUSARM instances for property testing.
// We first initialize eventhub_Properties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Eventhub_Properties_STATUSARMGenerator() gopter.Gen {
	if eventhub_Properties_STATUSARMGenerator != nil {
		return eventhub_Properties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_Properties_STATUSARM(generators)
	eventhub_Properties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_Properties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_Properties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventhub_Properties_STATUSARM(generators)
	eventhub_Properties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_Properties_STATUSARM{}), generators)

	return eventhub_Properties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhub_Properties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhub_Properties_STATUSARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["PartitionIds"] = gen.SliceOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		Eventhub_Properties_Status_STATUSActive,
		Eventhub_Properties_Status_STATUSCreating,
		Eventhub_Properties_Status_STATUSDeleting,
		Eventhub_Properties_Status_STATUSDisabled,
		Eventhub_Properties_Status_STATUSReceiveDisabled,
		Eventhub_Properties_Status_STATUSRenaming,
		Eventhub_Properties_Status_STATUSRestoring,
		Eventhub_Properties_Status_STATUSSendDisabled,
		Eventhub_Properties_Status_STATUSUnknown))
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhub_Properties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhub_Properties_STATUSARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescription_STATUSARMGenerator())
}

func Test_CaptureDescription_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescription_STATUSARM, CaptureDescription_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescription_STATUSARM runs a test to see if a specific instance of CaptureDescription_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescription_STATUSARM(subject CaptureDescription_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_STATUSARM instances for property testing - lazily instantiated by
// CaptureDescription_STATUSARMGenerator()
var captureDescription_STATUSARMGenerator gopter.Gen

// CaptureDescription_STATUSARMGenerator returns a generator of CaptureDescription_STATUSARM instances for property testing.
// We first initialize captureDescription_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescription_STATUSARMGenerator() gopter.Gen {
	if captureDescription_STATUSARMGenerator != nil {
		return captureDescription_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_STATUSARM(generators)
	captureDescription_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescription_STATUSARM(generators)
	captureDescription_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_STATUSARM{}), generators)

	return captureDescription_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescription_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescription_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescription_Encoding_STATUSAvro, CaptureDescription_Encoding_STATUSAvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescription_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescription_STATUSARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(Destination_STATUSARMGenerator())
}

func Test_Destination_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_STATUSARM, Destination_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_STATUSARM runs a test to see if a specific instance of Destination_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_STATUSARM(subject Destination_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_STATUSARM instances for property testing - lazily instantiated by
// Destination_STATUSARMGenerator()
var destination_STATUSARMGenerator gopter.Gen

// Destination_STATUSARMGenerator returns a generator of Destination_STATUSARM instances for property testing.
// We first initialize destination_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Destination_STATUSARMGenerator() gopter.Gen {
	if destination_STATUSARMGenerator != nil {
		return destination_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_STATUSARM(generators)
	destination_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Destination_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDestination_STATUSARM(generators)
	destination_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Destination_STATUSARM{}), generators)

	return destination_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestination_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestination_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Destination_Properties_STATUSARMGenerator())
}

func Test_Destination_Properties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_Properties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_Properties_STATUSARM, Destination_Properties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_Properties_STATUSARM runs a test to see if a specific instance of Destination_Properties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_Properties_STATUSARM(subject Destination_Properties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_Properties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_Properties_STATUSARM instances for property testing - lazily instantiated by
// Destination_Properties_STATUSARMGenerator()
var destination_Properties_STATUSARMGenerator gopter.Gen

// Destination_Properties_STATUSARMGenerator returns a generator of Destination_Properties_STATUSARM instances for property testing.
func Destination_Properties_STATUSARMGenerator() gopter.Gen {
	if destination_Properties_STATUSARMGenerator != nil {
		return destination_Properties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_Properties_STATUSARM(generators)
	destination_Properties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Destination_Properties_STATUSARM{}), generators)

	return destination_Properties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_Properties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_Properties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
