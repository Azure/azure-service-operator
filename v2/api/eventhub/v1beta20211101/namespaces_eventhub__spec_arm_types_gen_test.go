// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhub_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhub_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhub_SpecARM, NamespacesEventhub_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhub_SpecARM runs a test to see if a specific instance of NamespacesEventhub_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhub_SpecARM(subject NamespacesEventhub_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhub_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhub_SpecARM instances for property testing - lazily instantiated by
// NamespacesEventhub_SpecARMGenerator()
var namespacesEventhub_SpecARMGenerator gopter.Gen

// NamespacesEventhub_SpecARMGenerator returns a generator of NamespacesEventhub_SpecARM instances for property testing.
// We first initialize namespacesEventhub_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhub_SpecARMGenerator() gopter.Gen {
	if namespacesEventhub_SpecARMGenerator != nil {
		return namespacesEventhub_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM(generators)
	namespacesEventhub_SpecARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecARM(generators)
	namespacesEventhub_SpecARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_SpecARM{}), generators)

	return namespacesEventhub_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamespacesEventhub_Spec_PropertiesARMGenerator())
}

func Test_NamespacesEventhub_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhub_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhub_Spec_PropertiesARM, NamespacesEventhub_Spec_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhub_Spec_PropertiesARM runs a test to see if a specific instance of NamespacesEventhub_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhub_Spec_PropertiesARM(subject NamespacesEventhub_Spec_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhub_Spec_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhub_Spec_PropertiesARM instances for property testing - lazily instantiated by
// NamespacesEventhub_Spec_PropertiesARMGenerator()
var namespacesEventhub_Spec_PropertiesARMGenerator gopter.Gen

// NamespacesEventhub_Spec_PropertiesARMGenerator returns a generator of NamespacesEventhub_Spec_PropertiesARM instances for property testing.
// We first initialize namespacesEventhub_Spec_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhub_Spec_PropertiesARMGenerator() gopter.Gen {
	if namespacesEventhub_Spec_PropertiesARMGenerator != nil {
		return namespacesEventhub_Spec_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_Spec_PropertiesARM(generators)
	namespacesEventhub_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_Spec_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_Spec_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhub_Spec_PropertiesARM(generators)
	namespacesEventhub_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_Spec_PropertiesARM{}), generators)

	return namespacesEventhub_Spec_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhub_Spec_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhub_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		NamespacesEventhub_Spec_Properties_Status_Active,
		NamespacesEventhub_Spec_Properties_Status_Creating,
		NamespacesEventhub_Spec_Properties_Status_Deleting,
		NamespacesEventhub_Spec_Properties_Status_Disabled,
		NamespacesEventhub_Spec_Properties_Status_ReceiveDisabled,
		NamespacesEventhub_Spec_Properties_Status_Renaming,
		NamespacesEventhub_Spec_Properties_Status_Restoring,
		NamespacesEventhub_Spec_Properties_Status_SendDisabled,
		NamespacesEventhub_Spec_Properties_Status_Unknown))
}

// AddRelatedPropertyGeneratorsForNamespacesEventhub_Spec_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhub_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescriptionARMGenerator())
}

func Test_CaptureDescriptionARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescriptionARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescriptionARM, CaptureDescriptionARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescriptionARM runs a test to see if a specific instance of CaptureDescriptionARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescriptionARM(subject CaptureDescriptionARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescriptionARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescriptionARM instances for property testing - lazily instantiated by
// CaptureDescriptionARMGenerator()
var captureDescriptionARMGenerator gopter.Gen

// CaptureDescriptionARMGenerator returns a generator of CaptureDescriptionARM instances for property testing.
// We first initialize captureDescriptionARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescriptionARMGenerator() gopter.Gen {
	if captureDescriptionARMGenerator != nil {
		return captureDescriptionARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionARM(generators)
	captureDescriptionARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescriptionARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescriptionARM(generators)
	captureDescriptionARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescriptionARM{}), generators)

	return captureDescriptionARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescriptionARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescriptionARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescription_Encoding_Avro, CaptureDescription_Encoding_AvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescriptionARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescriptionARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(DestinationARMGenerator())
}

func Test_DestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestinationARM, DestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestinationARM runs a test to see if a specific instance of DestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestinationARM(subject DestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DestinationARM instances for property testing - lazily instantiated by DestinationARMGenerator()
var destinationARMGenerator gopter.Gen

// DestinationARMGenerator returns a generator of DestinationARM instances for property testing.
// We first initialize destinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DestinationARMGenerator() gopter.Gen {
	if destinationARMGenerator != nil {
		return destinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationARM(generators)
	destinationARMGenerator = gen.Struct(reflect.TypeOf(DestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationARM(generators)
	AddRelatedPropertyGeneratorsForDestinationARM(generators)
	destinationARMGenerator = gen.Struct(reflect.TypeOf(DestinationARM{}), generators)

	return destinationARMGenerator
}

// AddIndependentPropertyGeneratorsForDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestinationARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Destination_PropertiesARMGenerator())
}

func Test_Destination_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_PropertiesARM, Destination_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_PropertiesARM runs a test to see if a specific instance of Destination_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_PropertiesARM(subject Destination_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_PropertiesARM instances for property testing - lazily instantiated by
// Destination_PropertiesARMGenerator()
var destination_PropertiesARMGenerator gopter.Gen

// Destination_PropertiesARMGenerator returns a generator of Destination_PropertiesARM instances for property testing.
func Destination_PropertiesARMGenerator() gopter.Gen {
	if destination_PropertiesARMGenerator != nil {
		return destination_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_PropertiesARM(generators)
	destination_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(Destination_PropertiesARM{}), generators)

	return destination_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_PropertiesARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
