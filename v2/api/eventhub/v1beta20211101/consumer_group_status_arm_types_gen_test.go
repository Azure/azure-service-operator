// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ConsumerGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsumerGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsumerGroupSTATUSARM, ConsumerGroupSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsumerGroupSTATUSARM runs a test to see if a specific instance of ConsumerGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsumerGroupSTATUSARM(subject ConsumerGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsumerGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsumerGroup_STATUSARM instances for property testing - lazily instantiated by
// ConsumerGroupSTATUSARMGenerator()
var consumerGroupSTATUSARMGenerator gopter.Gen

// ConsumerGroupSTATUSARMGenerator returns a generator of ConsumerGroup_STATUSARM instances for property testing.
// We first initialize consumerGroupSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ConsumerGroupSTATUSARMGenerator() gopter.Gen {
	if consumerGroupSTATUSARMGenerator != nil {
		return consumerGroupSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsumerGroupSTATUSARM(generators)
	consumerGroupSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ConsumerGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsumerGroupSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForConsumerGroupSTATUSARM(generators)
	consumerGroupSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ConsumerGroup_STATUSARM{}), generators)

	return consumerGroupSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForConsumerGroupSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsumerGroupSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForConsumerGroupSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForConsumerGroupSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ConsumerGroupSTATUSPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_ConsumerGroup_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsumerGroup_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsumerGroupSTATUSPropertiesARM, ConsumerGroupSTATUSPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsumerGroupSTATUSPropertiesARM runs a test to see if a specific instance of ConsumerGroup_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsumerGroupSTATUSPropertiesARM(subject ConsumerGroup_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsumerGroup_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsumerGroup_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// ConsumerGroupSTATUSPropertiesARMGenerator()
var consumerGroupSTATUSPropertiesARMGenerator gopter.Gen

// ConsumerGroupSTATUSPropertiesARMGenerator returns a generator of ConsumerGroup_STATUS_PropertiesARM instances for property testing.
func ConsumerGroupSTATUSPropertiesARMGenerator() gopter.Gen {
	if consumerGroupSTATUSPropertiesARMGenerator != nil {
		return consumerGroupSTATUSPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsumerGroupSTATUSPropertiesARM(generators)
	consumerGroupSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ConsumerGroup_STATUS_PropertiesARM{}), generators)

	return consumerGroupSTATUSPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForConsumerGroupSTATUSPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsumerGroupSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["UserMetadata"] = gen.PtrOf(gen.AlphaString())
}
