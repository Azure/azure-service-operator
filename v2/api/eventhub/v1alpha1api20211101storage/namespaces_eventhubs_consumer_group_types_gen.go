// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101storage

import (
	"fmt"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/eventhub/v1beta20211101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20211101.NamespacesEventhubsConsumerGroup
// Deprecated version of NamespacesEventhubsConsumerGroup. Use v1beta20211101.NamespacesEventhubsConsumerGroup instead
type NamespacesEventhubsConsumerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
<<<<<<< HEAD
	Spec              NamespacesEventhubsConsumergroup_Spec   `json:"spec,omitempty"`
	Status            NamespacesEventhubsConsumergroup_STATUS `json:"status,omitempty"`
=======
	Spec              NamespacesEventhubsConsumergroups_Spec `json:"spec,omitempty"`
	Status            ConsumerGroup_STATUS                   `json:"status,omitempty"`
>>>>>>> main
}

var _ conditions.Conditioner = &NamespacesEventhubsConsumerGroup{}

// GetConditions returns the conditions of the resource
func (group *NamespacesEventhubsConsumerGroup) GetConditions() conditions.Conditions {
	return group.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (group *NamespacesEventhubsConsumerGroup) SetConditions(conditions conditions.Conditions) {
	group.Status.Conditions = conditions
}

var _ conversion.Convertible = &NamespacesEventhubsConsumerGroup{}

// ConvertFrom populates our NamespacesEventhubsConsumerGroup from the provided hub NamespacesEventhubsConsumerGroup
func (group *NamespacesEventhubsConsumerGroup) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20211101s.NamespacesEventhubsConsumerGroup)
	if !ok {
		return fmt.Errorf("expected eventhub/v1beta20211101storage/NamespacesEventhubsConsumerGroup but received %T instead", hub)
	}

	return group.AssignPropertiesFromNamespacesEventhubsConsumerGroup(source)
}

// ConvertTo populates the provided hub NamespacesEventhubsConsumerGroup from our NamespacesEventhubsConsumerGroup
func (group *NamespacesEventhubsConsumerGroup) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20211101s.NamespacesEventhubsConsumerGroup)
	if !ok {
		return fmt.Errorf("expected eventhub/v1beta20211101storage/NamespacesEventhubsConsumerGroup but received %T instead", hub)
	}

	return group.AssignPropertiesToNamespacesEventhubsConsumerGroup(destination)
}

var _ genruntime.KubernetesResource = &NamespacesEventhubsConsumerGroup{}

// AzureName returns the Azure name of the resource
func (group *NamespacesEventhubsConsumerGroup) AzureName() string {
	return group.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (group NamespacesEventhubsConsumerGroup) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (group *NamespacesEventhubsConsumerGroup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (group *NamespacesEventhubsConsumerGroup) GetSpec() genruntime.ConvertibleSpec {
	return &group.Spec
}

// GetStatus returns the status of this resource
func (group *NamespacesEventhubsConsumerGroup) GetStatus() genruntime.ConvertibleStatus {
	return &group.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventHub/namespaces/eventhubs/consumergroups"
func (group *NamespacesEventhubsConsumerGroup) GetType() string {
	return "Microsoft.EventHub/namespaces/eventhubs/consumergroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (group *NamespacesEventhubsConsumerGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
<<<<<<< HEAD
	return &NamespacesEventhubsConsumergroup_STATUS{}
=======
	return &ConsumerGroup_STATUS{}
>>>>>>> main
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (group *NamespacesEventhubsConsumerGroup) Owner() *genruntime.ResourceReference {
	ownerGroup, ownerKind := genruntime.LookupOwnerGroupKind(group.Spec)
	return &genruntime.ResourceReference{
		Group: ownerGroup,
		Kind:  ownerKind,
		Name:  group.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (group *NamespacesEventhubsConsumerGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
<<<<<<< HEAD
	if st, ok := status.(*NamespacesEventhubsConsumergroup_STATUS); ok {
=======
	if st, ok := status.(*ConsumerGroup_STATUS); ok {
>>>>>>> main
		group.Status = *st
		return nil
	}

	// Convert status to required version
<<<<<<< HEAD
	var st NamespacesEventhubsConsumergroup_STATUS
=======
	var st ConsumerGroup_STATUS
>>>>>>> main
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	group.Status = st
	return nil
}

// AssignPropertiesFromNamespacesEventhubsConsumerGroup populates our NamespacesEventhubsConsumerGroup from the provided source NamespacesEventhubsConsumerGroup
func (group *NamespacesEventhubsConsumerGroup) AssignPropertiesFromNamespacesEventhubsConsumerGroup(source *v20211101s.NamespacesEventhubsConsumerGroup) error {

	// ObjectMeta
	group.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec NamespacesEventhubsConsumergroup_Spec
	err := spec.AssignPropertiesFromNamespacesEventhubsConsumergroup_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespacesEventhubsConsumergroup_Spec() to populate field Spec")
	}
	group.Spec = spec

	// Status
<<<<<<< HEAD
	var status NamespacesEventhubsConsumergroup_STATUS
	err = status.AssignPropertiesFromNamespacesEventhubsConsumergroup_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespacesEventhubsConsumergroup_STATUS() to populate field Status")
=======
	var status ConsumerGroup_STATUS
	err = status.AssignPropertiesFromConsumerGroupSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromConsumerGroupSTATUS() to populate field Status")
>>>>>>> main
	}
	group.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhubsConsumerGroup populates the provided destination NamespacesEventhubsConsumerGroup from our NamespacesEventhubsConsumerGroup
func (group *NamespacesEventhubsConsumerGroup) AssignPropertiesToNamespacesEventhubsConsumerGroup(destination *v20211101s.NamespacesEventhubsConsumerGroup) error {

	// ObjectMeta
	destination.ObjectMeta = *group.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211101s.NamespacesEventhubsConsumergroup_Spec
	err := group.Spec.AssignPropertiesToNamespacesEventhubsConsumergroup_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespacesEventhubsConsumergroup_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
<<<<<<< HEAD
	var status v20211101s.NamespacesEventhubsConsumergroup_STATUS
	err = group.Status.AssignPropertiesToNamespacesEventhubsConsumergroup_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespacesEventhubsConsumergroup_STATUS() to populate field Status")
=======
	var status v20211101s.ConsumerGroup_STATUS
	err = group.Status.AssignPropertiesToConsumerGroupSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToConsumerGroupSTATUS() to populate field Status")
>>>>>>> main
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (group *NamespacesEventhubsConsumerGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: group.Spec.OriginalVersion,
		Kind:    "NamespacesEventhubsConsumerGroup",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20211101.NamespacesEventhubsConsumerGroup
// Deprecated version of NamespacesEventhubsConsumerGroup. Use v1beta20211101.NamespacesEventhubsConsumerGroup instead
type NamespacesEventhubsConsumerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesEventhubsConsumerGroup `json:"items"`
}

<<<<<<< HEAD
// Storage version of v1alpha1api20211101.NamespacesEventhubsConsumergroup_STATUS
// Deprecated version of NamespacesEventhubsConsumergroup_STATUS. Use v1beta20211101.NamespacesEventhubsConsumergroup_STATUS instead
type NamespacesEventhubsConsumergroup_STATUS struct {
=======
// Storage version of v1alpha1api20211101.ConsumerGroup_STATUS
// Deprecated version of ConsumerGroup_STATUS. Use v1beta20211101.ConsumerGroup_STATUS instead
type ConsumerGroup_STATUS struct {
>>>>>>> main
	Conditions   []conditions.Condition `json:"conditions,omitempty"`
	CreatedAt    *string                `json:"createdAt,omitempty"`
	Id           *string                `json:"id,omitempty"`
	Location     *string                `json:"location,omitempty"`
	Name         *string                `json:"name,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SystemData   *SystemData_STATUS     `json:"systemData,omitempty"`
	Type         *string                `json:"type,omitempty"`
	UpdatedAt    *string                `json:"updatedAt,omitempty"`
	UserMetadata *string                `json:"userMetadata,omitempty"`
}

<<<<<<< HEAD
var _ genruntime.ConvertibleStatus = &NamespacesEventhubsConsumergroup_STATUS{}

// ConvertStatusFrom populates our NamespacesEventhubsConsumergroup_STATUS from the provided source
func (consumergroup *NamespacesEventhubsConsumergroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20211101s.NamespacesEventhubsConsumergroup_STATUS)
	if ok {
		// Populate our instance from source
		return consumergroup.AssignPropertiesFromNamespacesEventhubsConsumergroup_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.NamespacesEventhubsConsumergroup_STATUS{}
=======
var _ genruntime.ConvertibleStatus = &ConsumerGroup_STATUS{}

// ConvertStatusFrom populates our ConsumerGroup_STATUS from the provided source
func (group *ConsumerGroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20211101s.ConsumerGroup_STATUS)
	if ok {
		// Populate our instance from source
		return group.AssignPropertiesFromConsumerGroupSTATUS(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.ConsumerGroup_STATUS{}
>>>>>>> main
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
<<<<<<< HEAD
	err = consumergroup.AssignPropertiesFromNamespacesEventhubsConsumergroup_STATUS(src)
=======
	err = group.AssignPropertiesFromConsumerGroupSTATUS(src)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

<<<<<<< HEAD
// ConvertStatusTo populates the provided destination from our NamespacesEventhubsConsumergroup_STATUS
func (consumergroup *NamespacesEventhubsConsumergroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20211101s.NamespacesEventhubsConsumergroup_STATUS)
	if ok {
		// Populate destination from our instance
		return consumergroup.AssignPropertiesToNamespacesEventhubsConsumergroup_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.NamespacesEventhubsConsumergroup_STATUS{}
	err := consumergroup.AssignPropertiesToNamespacesEventhubsConsumergroup_STATUS(dst)
=======
// ConvertStatusTo populates the provided destination from our ConsumerGroup_STATUS
func (group *ConsumerGroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20211101s.ConsumerGroup_STATUS)
	if ok {
		// Populate destination from our instance
		return group.AssignPropertiesToConsumerGroupSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.ConsumerGroup_STATUS{}
	err := group.AssignPropertiesToConsumerGroupSTATUS(dst)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromNamespacesEventhubsConsumergroup_STATUS populates our NamespacesEventhubsConsumergroup_STATUS from the provided source NamespacesEventhubsConsumergroup_STATUS
func (consumergroup *NamespacesEventhubsConsumergroup_STATUS) AssignPropertiesFromNamespacesEventhubsConsumergroup_STATUS(source *v20211101s.NamespacesEventhubsConsumergroup_STATUS) error {
=======
// AssignPropertiesFromConsumerGroupSTATUS populates our ConsumerGroup_STATUS from the provided source ConsumerGroup_STATUS
func (group *ConsumerGroup_STATUS) AssignPropertiesFromConsumerGroupSTATUS(source *v20211101s.ConsumerGroup_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	consumergroup.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedAt
	consumergroup.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// Id
	consumergroup.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	consumergroup.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	consumergroup.Name = genruntime.ClonePointerToString(source.Name)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
<<<<<<< HEAD
		err := systemDatum.AssignPropertiesFromSystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_STATUS() to populate field SystemData")
=======
		err := systemDatum.AssignPropertiesFromSystemDataSTATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataSTATUS() to populate field SystemData")
>>>>>>> main
		}
		consumergroup.SystemData = &systemDatum
	} else {
		consumergroup.SystemData = nil
	}

	// Type
	consumergroup.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	consumergroup.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// UserMetadata
	consumergroup.UserMetadata = genruntime.ClonePointerToString(source.UserMetadata)

	// Update the property bag
	if len(propertyBag) > 0 {
		consumergroup.PropertyBag = propertyBag
	} else {
		consumergroup.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToNamespacesEventhubsConsumergroup_STATUS populates the provided destination NamespacesEventhubsConsumergroup_STATUS from our NamespacesEventhubsConsumergroup_STATUS
func (consumergroup *NamespacesEventhubsConsumergroup_STATUS) AssignPropertiesToNamespacesEventhubsConsumergroup_STATUS(destination *v20211101s.NamespacesEventhubsConsumergroup_STATUS) error {
=======
// AssignPropertiesToConsumerGroupSTATUS populates the provided destination ConsumerGroup_STATUS from our ConsumerGroup_STATUS
func (group *ConsumerGroup_STATUS) AssignPropertiesToConsumerGroupSTATUS(destination *v20211101s.ConsumerGroup_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(consumergroup.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(consumergroup.Conditions)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(consumergroup.CreatedAt)

	// Id
	destination.Id = genruntime.ClonePointerToString(consumergroup.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(consumergroup.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(consumergroup.Name)

	// SystemData
<<<<<<< HEAD
	if consumergroup.SystemData != nil {
		var systemDatum v20211101s.SystemData_STATUS
		err := consumergroup.SystemData.AssignPropertiesToSystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_STATUS() to populate field SystemData")
=======
	if group.SystemData != nil {
		var systemDatum v20211101s.SystemData_STATUS
		err := group.SystemData.AssignPropertiesToSystemDataSTATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataSTATUS() to populate field SystemData")
>>>>>>> main
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(consumergroup.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(consumergroup.UpdatedAt)

	// UserMetadata
	destination.UserMetadata = genruntime.ClonePointerToString(consumergroup.UserMetadata)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20211101.NamespacesEventhubsConsumergroup_Spec
type NamespacesEventhubsConsumergroup_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string `json:"azureName,omitempty"`
	OriginalVersion string `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a eventhub.azure.com/NamespacesEventhub resource
	Owner        *genruntime.KnownResourceReference `group:"eventhub.azure.com" json:"owner,omitempty" kind:"NamespacesEventhub"`
	PropertyBag  genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	UserMetadata *string                            `json:"userMetadata,omitempty"`
}

var _ genruntime.ConvertibleSpec = &NamespacesEventhubsConsumergroup_Spec{}

// ConvertSpecFrom populates our NamespacesEventhubsConsumergroup_Spec from the provided source
func (consumergroup *NamespacesEventhubsConsumergroup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20211101s.NamespacesEventhubsConsumergroup_Spec)
	if ok {
		// Populate our instance from source
		return consumergroup.AssignPropertiesFromNamespacesEventhubsConsumergroup_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.NamespacesEventhubsConsumergroup_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = consumergroup.AssignPropertiesFromNamespacesEventhubsConsumergroup_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NamespacesEventhubsConsumergroup_Spec
func (consumergroup *NamespacesEventhubsConsumergroup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20211101s.NamespacesEventhubsConsumergroup_Spec)
	if ok {
		// Populate destination from our instance
		return consumergroup.AssignPropertiesToNamespacesEventhubsConsumergroup_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.NamespacesEventhubsConsumergroup_Spec{}
	err := consumergroup.AssignPropertiesToNamespacesEventhubsConsumergroup_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesEventhubsConsumergroup_Spec populates our NamespacesEventhubsConsumergroup_Spec from the provided source NamespacesEventhubsConsumergroup_Spec
func (consumergroup *NamespacesEventhubsConsumergroup_Spec) AssignPropertiesFromNamespacesEventhubsConsumergroup_Spec(source *v20211101s.NamespacesEventhubsConsumergroup_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	consumergroup.AzureName = source.AzureName

	// OriginalVersion
	consumergroup.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		consumergroup.Owner = &owner
	} else {
		consumergroup.Owner = nil
	}

	// UserMetadata
	consumergroup.UserMetadata = genruntime.ClonePointerToString(source.UserMetadata)

	// Update the property bag
	if len(propertyBag) > 0 {
		consumergroup.PropertyBag = propertyBag
	} else {
		consumergroup.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhubsConsumergroup_Spec populates the provided destination NamespacesEventhubsConsumergroup_Spec from our NamespacesEventhubsConsumergroup_Spec
func (consumergroup *NamespacesEventhubsConsumergroup_Spec) AssignPropertiesToNamespacesEventhubsConsumergroup_Spec(destination *v20211101s.NamespacesEventhubsConsumergroup_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(consumergroup.PropertyBag)

	// AzureName
	destination.AzureName = consumergroup.AzureName

	// OriginalVersion
	destination.OriginalVersion = consumergroup.OriginalVersion

	// Owner
	if consumergroup.Owner != nil {
		owner := consumergroup.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// UserMetadata
	destination.UserMetadata = genruntime.ClonePointerToString(consumergroup.UserMetadata)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NamespacesEventhubsConsumerGroup{}, &NamespacesEventhubsConsumerGroupList{})
}
