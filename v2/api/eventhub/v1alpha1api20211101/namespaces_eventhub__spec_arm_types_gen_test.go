// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhub_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhub_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhub_SpecARM, NamespacesEventhub_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhub_SpecARM runs a test to see if a specific instance of NamespacesEventhub_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhub_SpecARM(subject NamespacesEventhub_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhub_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhub_SpecARM instances for property testing - lazily instantiated by
//NamespacesEventhub_SpecARMGenerator()
var namespacesEventhub_specARMGenerator gopter.Gen

// NamespacesEventhub_SpecARMGenerator returns a generator of NamespacesEventhub_SpecARM instances for property testing.
// We first initialize namespacesEventhub_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhub_SpecARMGenerator() gopter.Gen {
	if namespacesEventhub_specARMGenerator != nil {
		return namespacesEventhub_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM(generators)
	namespacesEventhub_specARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecARM(generators)
	namespacesEventhub_specARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_SpecARM{}), generators)

	return namespacesEventhub_specARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamespacesEventhub_SpecPropertiesARMGenerator())
}

func Test_NamespacesEventhub_SpecPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhub_SpecPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhub_SpecPropertiesARM, NamespacesEventhub_SpecPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhub_SpecPropertiesARM runs a test to see if a specific instance of NamespacesEventhub_SpecPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhub_SpecPropertiesARM(subject NamespacesEventhub_SpecPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhub_SpecPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhub_SpecPropertiesARM instances for property testing - lazily instantiated by
//NamespacesEventhub_SpecPropertiesARMGenerator()
var namespacesEventhub_specPropertiesARMGenerator gopter.Gen

// NamespacesEventhub_SpecPropertiesARMGenerator returns a generator of NamespacesEventhub_SpecPropertiesARM instances for property testing.
// We first initialize namespacesEventhub_specPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhub_SpecPropertiesARMGenerator() gopter.Gen {
	if namespacesEventhub_specPropertiesARMGenerator != nil {
		return namespacesEventhub_specPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecPropertiesARM(generators)
	namespacesEventhub_specPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_SpecPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecPropertiesARM(generators)
	namespacesEventhub_specPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub_SpecPropertiesARM{}), generators)

	return namespacesEventhub_specPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhub_SpecPropertiesARM(gens map[string]gopter.Gen) {
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		NamespacesEventhub_SpecPropertiesStatusActive,
		NamespacesEventhub_SpecPropertiesStatusCreating,
		NamespacesEventhub_SpecPropertiesStatusDeleting,
		NamespacesEventhub_SpecPropertiesStatusDisabled,
		NamespacesEventhub_SpecPropertiesStatusReceiveDisabled,
		NamespacesEventhub_SpecPropertiesStatusRenaming,
		NamespacesEventhub_SpecPropertiesStatusRestoring,
		NamespacesEventhub_SpecPropertiesStatusSendDisabled,
		NamespacesEventhub_SpecPropertiesStatusUnknown))
}

// AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhub_SpecPropertiesARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescriptionARMGenerator())
}

func Test_CaptureDescriptionARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescriptionARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescriptionARM, CaptureDescriptionARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescriptionARM runs a test to see if a specific instance of CaptureDescriptionARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescriptionARM(subject CaptureDescriptionARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescriptionARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescriptionARM instances for property testing - lazily instantiated by
//CaptureDescriptionARMGenerator()
var captureDescriptionARMGenerator gopter.Gen

// CaptureDescriptionARMGenerator returns a generator of CaptureDescriptionARM instances for property testing.
// We first initialize captureDescriptionARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescriptionARMGenerator() gopter.Gen {
	if captureDescriptionARMGenerator != nil {
		return captureDescriptionARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionARM(generators)
	captureDescriptionARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescriptionARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescriptionARM(generators)
	captureDescriptionARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescriptionARM{}), generators)

	return captureDescriptionARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescriptionARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescriptionARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescriptionEncodingAvro, CaptureDescriptionEncodingAvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescriptionARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescriptionARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(DestinationARMGenerator())
}

func Test_DestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestinationARM, DestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestinationARM runs a test to see if a specific instance of DestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestinationARM(subject DestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DestinationARM instances for property testing - lazily instantiated by DestinationARMGenerator()
var destinationARMGenerator gopter.Gen

// DestinationARMGenerator returns a generator of DestinationARM instances for property testing.
// We first initialize destinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DestinationARMGenerator() gopter.Gen {
	if destinationARMGenerator != nil {
		return destinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationARM(generators)
	destinationARMGenerator = gen.Struct(reflect.TypeOf(DestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationARM(generators)
	AddRelatedPropertyGeneratorsForDestinationARM(generators)
	destinationARMGenerator = gen.Struct(reflect.TypeOf(DestinationARM{}), generators)

	return destinationARMGenerator
}

// AddIndependentPropertyGeneratorsForDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestinationARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DestinationPropertiesARMGenerator())
}

func Test_DestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestinationPropertiesARM, DestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestinationPropertiesARM runs a test to see if a specific instance of DestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestinationPropertiesARM(subject DestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DestinationPropertiesARM instances for property testing - lazily instantiated by
//DestinationPropertiesARMGenerator()
var destinationPropertiesARMGenerator gopter.Gen

// DestinationPropertiesARMGenerator returns a generator of DestinationPropertiesARM instances for property testing.
func DestinationPropertiesARMGenerator() gopter.Gen {
	if destinationPropertiesARMGenerator != nil {
		return destinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationPropertiesARM(generators)
	destinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(DestinationPropertiesARM{}), generators)

	return destinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
