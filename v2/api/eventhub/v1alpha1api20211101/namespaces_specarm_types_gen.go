// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Namespaces_SPECARM struct {
	AzureName string `json:"azureName"`

	//Identity: Properties of BYOK Identity description
	Identity *Identity_SpecARM `json:"identity,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name"`

	//Properties: Namespace properties supplied for create namespace operation.
	Properties *Namespaces_SPEC_PropertiesARM `json:"properties,omitempty"`

	//Sku: Properties of sku resource
	Sku *Sku_SpecARM `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Namespaces_SPECARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (specarm Namespaces_SPECARM) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetName returns the Name of the resource
func (specarm Namespaces_SPECARM) GetName() string {
	return specarm.Name
}

// GetType returns the ARM Type of the resource. This is always ""
func (specarm Namespaces_SPECARM) GetType() string {
	return ""
}

type Identity_SpecARM struct {
	//Type: Type of managed service identity.
	Type *IdentitySpecType `json:"type,omitempty"`
}

type Namespaces_SPEC_PropertiesARM struct {
	//AlternateName: Alternate name specified when alias and namespace names are same.
	AlternateName *string `json:"alternateName,omitempty"`
	ClusterArmId  *string `json:"clusterArmId,omitempty"`

	//DisableLocalAuth: This property disables SAS authentication for the Event Hubs
	//namespace.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//Encryption: Properties of BYOK Encryption description
	Encryption *Encryption_SpecARM `json:"encryption,omitempty"`

	//IsAutoInflateEnabled: Value that indicates whether AutoInflate is enabled for
	//eventhub namespace.
	IsAutoInflateEnabled *bool `json:"isAutoInflateEnabled,omitempty"`

	//KafkaEnabled: Value that indicates whether Kafka is enabled for eventhub
	//namespace.
	KafkaEnabled *bool `json:"kafkaEnabled,omitempty"`

	//MaximumThroughputUnits: Upper limit of throughput units when AutoInflate is
	//enabled, value should be within 0 to 20 throughput units. ( '0' if
	//AutoInflateEnabled = true)
	MaximumThroughputUnits *int `json:"maximumThroughputUnits,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections.
	PrivateEndpointConnections []PrivateEndpointConnection_SpecARM `json:"privateEndpointConnections,omitempty"`

	//ZoneRedundant: Enabling this property creates a Standard Event Hubs Namespace in
	//regions supported availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

type Sku_SpecARM struct {
	//Capacity: The Event Hubs throughput units for Basic or Standard tiers, where
	//value should be 0 to 20 throughput units. The Event Hubs premium units for
	//Premium tier, where value should be 0 to 10 premium units.
	Capacity *int `json:"capacity,omitempty"`

	//Name: Name of this SKU.
	Name SkuSpecName `json:"name"`

	//Tier: The billing tier of this particular SKU.
	Tier *SkuSpecTier `json:"tier,omitempty"`
}

type Encryption_SpecARM struct {
	//KeySource: Enumerates the possible value of keySource for Encryption
	KeySource *EncryptionSpecKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Properties of KeyVault
	KeyVaultProperties []KeyVaultProperties_SpecARM `json:"keyVaultProperties,omitempty"`

	//RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double
	//Encryption)
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned, UserAssigned","UserAssigned"}
type IdentitySpecType string

const (
	IdentitySpecTypeNone                       = IdentitySpecType("None")
	IdentitySpecTypeSystemAssigned             = IdentitySpecType("SystemAssigned")
	IdentitySpecTypeSystemAssignedUserAssigned = IdentitySpecType("SystemAssigned, UserAssigned")
	IdentitySpecTypeUserAssigned               = IdentitySpecType("UserAssigned")
)

type PrivateEndpointConnection_SpecARM struct {
	//Properties: Properties of the PrivateEndpointConnection.
	Properties *PrivateEndpointConnectionProperties_SpecARM `json:"properties,omitempty"`
}

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type SkuSpecName string

const (
	SkuSpecNameBasic    = SkuSpecName("Basic")
	SkuSpecNamePremium  = SkuSpecName("Premium")
	SkuSpecNameStandard = SkuSpecName("Standard")
)

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type SkuSpecTier string

const (
	SkuSpecTierBasic    = SkuSpecTier("Basic")
	SkuSpecTierPremium  = SkuSpecTier("Premium")
	SkuSpecTierStandard = SkuSpecTier("Standard")
)

type KeyVaultProperties_SpecARM struct {
	Identity *UserAssignedIdentityProperties_SpecARM `json:"identity,omitempty"`

	//KeyName: Name of the Key from KeyVault
	KeyName *string `json:"keyName,omitempty"`

	//KeyVaultUri: Uri of KeyVault
	KeyVaultUri *string `json:"keyVaultUri,omitempty"`

	//KeyVersion: Key Version
	KeyVersion *string `json:"keyVersion,omitempty"`
}

type PrivateEndpointConnectionProperties_SpecARM struct {
	//PrivateEndpoint: The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpoint_SpecARM `json:"privateEndpoint,omitempty"`

	//PrivateLinkServiceConnectionState: Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionState_SpecARM `json:"privateLinkServiceConnectionState,omitempty"`

	//ProvisioningState: Provisioning state of the Private Endpoint Connection.
	ProvisioningState *PrivateEndpointConnectionPropertiesSpecProvisioningState `json:"provisioningState,omitempty"`
}

type ConnectionState_SpecARM struct {
	//Description: Description of the connection state.
	Description *string `json:"description,omitempty"`

	//Status: Status of the connection.
	Status *ConnectionStateSpecStatus `json:"status,omitempty"`
}

type PrivateEndpoint_SpecARM struct {
	Id *string `json:"id,omitempty"`
}

type UserAssignedIdentityProperties_SpecARM struct {
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}
