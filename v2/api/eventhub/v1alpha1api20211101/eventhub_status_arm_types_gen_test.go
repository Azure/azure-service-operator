// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Eventhub_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhubSTATUSARM, EventhubSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhubSTATUSARM runs a test to see if a specific instance of Eventhub_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhubSTATUSARM(subject Eventhub_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_STATUSARM instances for property testing - lazily instantiated by EventhubSTATUSARMGenerator()
var eventhubSTATUSARMGenerator gopter.Gen

// EventhubSTATUSARMGenerator returns a generator of Eventhub_STATUSARM instances for property testing.
// We first initialize eventhubSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventhubSTATUSARMGenerator() gopter.Gen {
	if eventhubSTATUSARMGenerator != nil {
		return eventhubSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhubSTATUSARM(generators)
	eventhubSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhubSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForEventhubSTATUSARM(generators)
	eventhubSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUSARM{}), generators)

	return eventhubSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhubSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhubSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhubSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhubSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventhubSTATUSPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_Eventhub_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhubSTATUSPropertiesARM, EventhubSTATUSPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhubSTATUSPropertiesARM runs a test to see if a specific instance of Eventhub_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhubSTATUSPropertiesARM(subject Eventhub_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// EventhubSTATUSPropertiesARMGenerator()
var eventhubSTATUSPropertiesARMGenerator gopter.Gen

// EventhubSTATUSPropertiesARMGenerator returns a generator of Eventhub_STATUS_PropertiesARM instances for property testing.
// We first initialize eventhubSTATUSPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventhubSTATUSPropertiesARMGenerator() gopter.Gen {
	if eventhubSTATUSPropertiesARMGenerator != nil {
		return eventhubSTATUSPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhubSTATUSPropertiesARM(generators)
	eventhubSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUS_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhubSTATUSPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForEventhubSTATUSPropertiesARM(generators)
	eventhubSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUS_PropertiesARM{}), generators)

	return eventhubSTATUSPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhubSTATUSPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhubSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["PartitionIds"] = gen.SliceOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		EventhubSTATUSPropertiesStatus_Active,
		EventhubSTATUSPropertiesStatus_Creating,
		EventhubSTATUSPropertiesStatus_Deleting,
		EventhubSTATUSPropertiesStatus_Disabled,
		EventhubSTATUSPropertiesStatus_ReceiveDisabled,
		EventhubSTATUSPropertiesStatus_Renaming,
		EventhubSTATUSPropertiesStatus_Restoring,
		EventhubSTATUSPropertiesStatus_SendDisabled,
		EventhubSTATUSPropertiesStatus_Unknown))
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhubSTATUSPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhubSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescriptionSTATUSARMGenerator())
}

func Test_CaptureDescription_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescriptionSTATUSARM, CaptureDescriptionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescriptionSTATUSARM runs a test to see if a specific instance of CaptureDescription_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescriptionSTATUSARM(subject CaptureDescription_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_STATUSARM instances for property testing - lazily instantiated by
// CaptureDescriptionSTATUSARMGenerator()
var captureDescriptionSTATUSARMGenerator gopter.Gen

// CaptureDescriptionSTATUSARMGenerator returns a generator of CaptureDescription_STATUSARM instances for property testing.
// We first initialize captureDescriptionSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescriptionSTATUSARMGenerator() gopter.Gen {
	if captureDescriptionSTATUSARMGenerator != nil {
		return captureDescriptionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionSTATUSARM(generators)
	captureDescriptionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescriptionSTATUSARM(generators)
	captureDescriptionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_STATUSARM{}), generators)

	return captureDescriptionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescriptionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescriptionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescriptionSTATUSEncoding_Avro, CaptureDescriptionSTATUSEncoding_AvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescriptionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescriptionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(DestinationSTATUSARMGenerator())
}

func Test_Destination_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestinationSTATUSARM, DestinationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestinationSTATUSARM runs a test to see if a specific instance of Destination_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestinationSTATUSARM(subject Destination_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_STATUSARM instances for property testing - lazily instantiated by
// DestinationSTATUSARMGenerator()
var destinationSTATUSARMGenerator gopter.Gen

// DestinationSTATUSARMGenerator returns a generator of Destination_STATUSARM instances for property testing.
// We first initialize destinationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DestinationSTATUSARMGenerator() gopter.Gen {
	if destinationSTATUSARMGenerator != nil {
		return destinationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationSTATUSARM(generators)
	destinationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Destination_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDestinationSTATUSARM(generators)
	destinationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Destination_STATUSARM{}), generators)

	return destinationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDestinationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestinationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestinationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestinationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DestinationSTATUSPropertiesARMGenerator())
}

func Test_Destination_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestinationSTATUSPropertiesARM, DestinationSTATUSPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestinationSTATUSPropertiesARM runs a test to see if a specific instance of Destination_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestinationSTATUSPropertiesARM(subject Destination_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// DestinationSTATUSPropertiesARMGenerator()
var destinationSTATUSPropertiesARMGenerator gopter.Gen

// DestinationSTATUSPropertiesARMGenerator returns a generator of Destination_STATUS_PropertiesARM instances for property testing.
func DestinationSTATUSPropertiesARMGenerator() gopter.Gen {
	if destinationSTATUSPropertiesARMGenerator != nil {
		return destinationSTATUSPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationSTATUSPropertiesARM(generators)
	destinationSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(Destination_STATUS_PropertiesARM{}), generators)

	return destinationSTATUSPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForDestinationSTATUSPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestinationSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
