// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Eventhub_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhub_STATUS_ARM, Eventhub_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhub_STATUS_ARM runs a test to see if a specific instance of Eventhub_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhub_STATUS_ARM(subject Eventhub_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_STATUS_ARM instances for property testing - lazily instantiated by
// Eventhub_STATUS_ARMGenerator()
var eventhub_STATUS_ARMGenerator gopter.Gen

// Eventhub_STATUS_ARMGenerator returns a generator of Eventhub_STATUS_ARM instances for property testing.
// We first initialize eventhub_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Eventhub_STATUS_ARMGenerator() gopter.Gen {
	if eventhub_STATUS_ARMGenerator != nil {
		return eventhub_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_STATUS_ARM(generators)
	eventhub_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEventhub_STATUS_ARM(generators)
	eventhub_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_STATUS_ARM{}), generators)

	return eventhub_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhub_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhub_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhub_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhub_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Eventhub_Properties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_Eventhub_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhub_Properties_STATUS_ARM, Eventhub_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhub_Properties_STATUS_ARM runs a test to see if a specific instance of Eventhub_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhub_Properties_STATUS_ARM(subject Eventhub_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// Eventhub_Properties_STATUS_ARMGenerator()
var eventhub_Properties_STATUS_ARMGenerator gopter.Gen

// Eventhub_Properties_STATUS_ARMGenerator returns a generator of Eventhub_Properties_STATUS_ARM instances for property testing.
// We first initialize eventhub_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Eventhub_Properties_STATUS_ARMGenerator() gopter.Gen {
	if eventhub_Properties_STATUS_ARMGenerator != nil {
		return eventhub_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_Properties_STATUS_ARM(generators)
	eventhub_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEventhub_Properties_STATUS_ARM(generators)
	eventhub_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_Properties_STATUS_ARM{}), generators)

	return eventhub_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhub_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhub_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["PartitionIds"] = gen.SliceOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		Eventhub_Properties_Status_STATUS_Active,
		Eventhub_Properties_Status_STATUS_Creating,
		Eventhub_Properties_Status_STATUS_Deleting,
		Eventhub_Properties_Status_STATUS_Disabled,
		Eventhub_Properties_Status_STATUS_ReceiveDisabled,
		Eventhub_Properties_Status_STATUS_Renaming,
		Eventhub_Properties_Status_STATUS_Restoring,
		Eventhub_Properties_Status_STATUS_SendDisabled,
		Eventhub_Properties_Status_STATUS_Unknown))
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhub_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhub_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescription_STATUS_ARMGenerator())
}

func Test_CaptureDescription_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescription_STATUS_ARM, CaptureDescription_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescription_STATUS_ARM runs a test to see if a specific instance of CaptureDescription_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescription_STATUS_ARM(subject CaptureDescription_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_STATUS_ARM instances for property testing - lazily instantiated by
// CaptureDescription_STATUS_ARMGenerator()
var captureDescription_STATUS_ARMGenerator gopter.Gen

// CaptureDescription_STATUS_ARMGenerator returns a generator of CaptureDescription_STATUS_ARM instances for property testing.
// We first initialize captureDescription_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescription_STATUS_ARMGenerator() gopter.Gen {
	if captureDescription_STATUS_ARMGenerator != nil {
		return captureDescription_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_STATUS_ARM(generators)
	captureDescription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescription_STATUS_ARM(generators)
	captureDescription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_STATUS_ARM{}), generators)

	return captureDescription_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescription_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescription_Encoding_STATUS_Avro, CaptureDescription_Encoding_STATUS_AvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescription_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(Destination_STATUS_ARMGenerator())
}

func Test_Destination_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_STATUS_ARM, Destination_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_STATUS_ARM runs a test to see if a specific instance of Destination_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_STATUS_ARM(subject Destination_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_STATUS_ARM instances for property testing - lazily instantiated by
// Destination_STATUS_ARMGenerator()
var destination_STATUS_ARMGenerator gopter.Gen

// Destination_STATUS_ARMGenerator returns a generator of Destination_STATUS_ARM instances for property testing.
// We first initialize destination_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Destination_STATUS_ARMGenerator() gopter.Gen {
	if destination_STATUS_ARMGenerator != nil {
		return destination_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_STATUS_ARM(generators)
	destination_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Destination_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDestination_STATUS_ARM(generators)
	destination_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Destination_STATUS_ARM{}), generators)

	return destination_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestination_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestination_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Destination_Properties_STATUS_ARMGenerator())
}

func Test_Destination_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_Properties_STATUS_ARM, Destination_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_Properties_STATUS_ARM runs a test to see if a specific instance of Destination_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_Properties_STATUS_ARM(subject Destination_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// Destination_Properties_STATUS_ARMGenerator()
var destination_Properties_STATUS_ARMGenerator gopter.Gen

// Destination_Properties_STATUS_ARMGenerator returns a generator of Destination_Properties_STATUS_ARM instances for property testing.
func Destination_Properties_STATUS_ARMGenerator() gopter.Gen {
	if destination_Properties_STATUS_ARMGenerator != nil {
		return destination_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_Properties_STATUS_ARM(generators)
	destination_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Destination_Properties_STATUS_ARM{}), generators)

	return destination_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
