// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesAuthorizationRule_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesAuthorizationRule_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesAuthorizationRule_SpecARM, NamespacesAuthorizationRule_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesAuthorizationRule_SpecARM runs a test to see if a specific instance of NamespacesAuthorizationRule_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesAuthorizationRule_SpecARM(subject NamespacesAuthorizationRule_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesAuthorizationRule_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesAuthorizationRule_SpecARM instances for property testing - lazily instantiated by
//NamespacesAuthorizationRule_SpecARMGenerator()
var namespacesAuthorizationRule_specARMGenerator gopter.Gen

// NamespacesAuthorizationRule_SpecARMGenerator returns a generator of NamespacesAuthorizationRule_SpecARM instances for property testing.
// We first initialize namespacesAuthorizationRule_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesAuthorizationRule_SpecARMGenerator() gopter.Gen {
	if namespacesAuthorizationRule_specARMGenerator != nil {
		return namespacesAuthorizationRule_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesAuthorizationRule_SpecARM(generators)
	namespacesAuthorizationRule_specARMGenerator = gen.Struct(reflect.TypeOf(NamespacesAuthorizationRule_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesAuthorizationRule_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesAuthorizationRule_SpecARM(generators)
	namespacesAuthorizationRule_specARMGenerator = gen.Struct(reflect.TypeOf(NamespacesAuthorizationRule_SpecARM{}), generators)

	return namespacesAuthorizationRule_specARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesAuthorizationRule_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesAuthorizationRule_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesAuthorizationRule_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesAuthorizationRule_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamespacesAuthorizationRule_SpecPropertiesARMGenerator())
}

func Test_NamespacesAuthorizationRule_SpecPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesAuthorizationRule_SpecPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesAuthorizationRule_SpecPropertiesARM, NamespacesAuthorizationRule_SpecPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesAuthorizationRule_SpecPropertiesARM runs a test to see if a specific instance of NamespacesAuthorizationRule_SpecPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesAuthorizationRule_SpecPropertiesARM(subject NamespacesAuthorizationRule_SpecPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesAuthorizationRule_SpecPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesAuthorizationRule_SpecPropertiesARM instances for property testing - lazily instantiated by
//NamespacesAuthorizationRule_SpecPropertiesARMGenerator()
var namespacesAuthorizationRule_specPropertiesARMGenerator gopter.Gen

// NamespacesAuthorizationRule_SpecPropertiesARMGenerator returns a generator of NamespacesAuthorizationRule_SpecPropertiesARM instances for property testing.
func NamespacesAuthorizationRule_SpecPropertiesARMGenerator() gopter.Gen {
	if namespacesAuthorizationRule_specPropertiesARMGenerator != nil {
		return namespacesAuthorizationRule_specPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesAuthorizationRule_SpecPropertiesARM(generators)
	namespacesAuthorizationRule_specPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesAuthorizationRule_SpecPropertiesARM{}), generators)

	return namespacesAuthorizationRule_specPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesAuthorizationRule_SpecPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesAuthorizationRule_SpecPropertiesARM(gens map[string]gopter.Gen) {
	gens["Rights"] = gen.SliceOf(gen.OneConstOf(NamespacesAuthorizationRule_SpecPropertiesRightsListen, NamespacesAuthorizationRule_SpecPropertiesRightsManage, NamespacesAuthorizationRule_SpecPropertiesRightsSend))
}
