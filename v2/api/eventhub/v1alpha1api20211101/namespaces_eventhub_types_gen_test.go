// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhub_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NamespacesEventhub to hub returns original",
		prop.ForAll(RunResourceConversionTestForNamespacesEventhub, NamespacesEventhubGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForNamespacesEventhub tests if a specific instance of NamespacesEventhub round trips to the hub storage version and back losslessly
func RunResourceConversionTestForNamespacesEventhub(subject NamespacesEventhub) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20211101storage.NamespacesEventhub
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual NamespacesEventhub
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NamespacesEventhub_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NamespacesEventhub to NamespacesEventhub via AssignPropertiesToNamespacesEventhub & AssignPropertiesFromNamespacesEventhub returns original",
		prop.ForAll(RunPropertyAssignmentTestForNamespacesEventhub, NamespacesEventhubGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNamespacesEventhub tests if a specific instance of NamespacesEventhub can be assigned to v1alpha1api20211101storage and back losslessly
func RunPropertyAssignmentTestForNamespacesEventhub(subject NamespacesEventhub) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20211101storage.NamespacesEventhub
	err := copied.AssignPropertiesToNamespacesEventhub(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NamespacesEventhub
	err = actual.AssignPropertiesFromNamespacesEventhub(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NamespacesEventhub_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhub via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhub, NamespacesEventhubGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhub runs a test to see if a specific instance of NamespacesEventhub round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhub(subject NamespacesEventhub) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhub
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhub instances for property testing - lazily instantiated by NamespacesEventhubGenerator()
var namespacesEventhubGenerator gopter.Gen

// NamespacesEventhubGenerator returns a generator of NamespacesEventhub instances for property testing.
func NamespacesEventhubGenerator() gopter.Gen {
	if namespacesEventhubGenerator != nil {
		return namespacesEventhubGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNamespacesEventhub(generators)
	namespacesEventhubGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhub{}), generators)

	return namespacesEventhubGenerator
}

// AddRelatedPropertyGeneratorsForNamespacesEventhub is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhub(gens map[string]gopter.Gen) {
	gens["Spec"] = NamespacesEventhubs_SPECGenerator()
	gens["Status"] = Eventhub_StatusGenerator()
}

func Test_Eventhub_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Eventhub_Status to Eventhub_Status via AssignPropertiesToEventhub_Status & AssignPropertiesFromEventhub_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForEventhub_Status, Eventhub_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForEventhub_Status tests if a specific instance of Eventhub_Status can be assigned to v1alpha1api20211101storage and back losslessly
func RunPropertyAssignmentTestForEventhub_Status(subject Eventhub_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20211101storage.Eventhub_Status
	err := copied.AssignPropertiesToEventhub_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Eventhub_Status
	err = actual.AssignPropertiesFromEventhub_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Eventhub_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhub_Status, Eventhub_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhub_Status runs a test to see if a specific instance of Eventhub_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhub_Status(subject Eventhub_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_Status instances for property testing - lazily instantiated by Eventhub_StatusGenerator()
var eventhub_statusGenerator gopter.Gen

// Eventhub_StatusGenerator returns a generator of Eventhub_Status instances for property testing.
// We first initialize eventhub_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Eventhub_StatusGenerator() gopter.Gen {
	if eventhub_statusGenerator != nil {
		return eventhub_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_Status(generators)
	eventhub_statusGenerator = gen.Struct(reflect.TypeOf(Eventhub_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_Status(generators)
	AddRelatedPropertyGeneratorsForEventhub_Status(generators)
	eventhub_statusGenerator = gen.Struct(reflect.TypeOf(Eventhub_Status{}), generators)

	return eventhub_statusGenerator
}

// AddIndependentPropertyGeneratorsForEventhub_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhub_Status(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["PartitionIds"] = gen.SliceOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		Eventhub_Properties_Status_StatusActive,
		Eventhub_Properties_Status_StatusCreating,
		Eventhub_Properties_Status_StatusDeleting,
		Eventhub_Properties_Status_StatusDisabled,
		Eventhub_Properties_Status_StatusReceiveDisabled,
		Eventhub_Properties_Status_StatusRenaming,
		Eventhub_Properties_Status_StatusRestoring,
		Eventhub_Properties_Status_StatusSendDisabled,
		Eventhub_Properties_Status_StatusUnknown))
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhub_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhub_Status(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescription_StatusGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusGenerator())
}

func Test_NamespacesEventhubs_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NamespacesEventhubs_SPEC to NamespacesEventhubs_SPEC via AssignPropertiesToNamespacesEventhubs_SPEC & AssignPropertiesFromNamespacesEventhubs_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForNamespacesEventhubs_SPEC, NamespacesEventhubs_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNamespacesEventhubs_SPEC tests if a specific instance of NamespacesEventhubs_SPEC can be assigned to v1alpha1api20211101storage and back losslessly
func RunPropertyAssignmentTestForNamespacesEventhubs_SPEC(subject NamespacesEventhubs_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20211101storage.NamespacesEventhubs_SPEC
	err := copied.AssignPropertiesToNamespacesEventhubs_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NamespacesEventhubs_SPEC
	err = actual.AssignPropertiesFromNamespacesEventhubs_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NamespacesEventhubs_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubs_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubs_SPEC, NamespacesEventhubs_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubs_SPEC runs a test to see if a specific instance of NamespacesEventhubs_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubs_SPEC(subject NamespacesEventhubs_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubs_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubs_SPEC instances for property testing - lazily instantiated by
//NamespacesEventhubs_SPECGenerator()
var namespacesEventhubs_specGenerator gopter.Gen

// NamespacesEventhubs_SPECGenerator returns a generator of NamespacesEventhubs_SPEC instances for property testing.
// We first initialize namespacesEventhubs_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubs_SPECGenerator() gopter.Gen {
	if namespacesEventhubs_specGenerator != nil {
		return namespacesEventhubs_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPEC(generators)
	namespacesEventhubs_specGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPEC(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubs_SPEC(generators)
	namespacesEventhubs_specGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPEC{}), generators)

	return namespacesEventhubs_specGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		NamespacesEventhubs_Properties_Status_SPECActive,
		NamespacesEventhubs_Properties_Status_SPECCreating,
		NamespacesEventhubs_Properties_Status_SPECDeleting,
		NamespacesEventhubs_Properties_Status_SPECDisabled,
		NamespacesEventhubs_Properties_Status_SPECReceiveDisabled,
		NamespacesEventhubs_Properties_Status_SPECRenaming,
		NamespacesEventhubs_Properties_Status_SPECRestoring,
		NamespacesEventhubs_Properties_Status_SPECSendDisabled,
		NamespacesEventhubs_Properties_Status_SPECUnknown))
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubs_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubs_SPEC(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescription_SpecGenerator())
}

func Test_CaptureDescription_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CaptureDescription_Spec to CaptureDescription_Spec via AssignPropertiesToCaptureDescription_Spec & AssignPropertiesFromCaptureDescription_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForCaptureDescription_Spec, CaptureDescription_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCaptureDescription_Spec tests if a specific instance of CaptureDescription_Spec can be assigned to v1alpha1api20211101storage and back losslessly
func RunPropertyAssignmentTestForCaptureDescription_Spec(subject CaptureDescription_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20211101storage.CaptureDescription_Spec
	err := copied.AssignPropertiesToCaptureDescription_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CaptureDescription_Spec
	err = actual.AssignPropertiesFromCaptureDescription_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CaptureDescription_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescription_Spec, CaptureDescription_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescription_Spec runs a test to see if a specific instance of CaptureDescription_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescription_Spec(subject CaptureDescription_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_Spec instances for property testing - lazily instantiated by
//CaptureDescription_SpecGenerator()
var captureDescription_specGenerator gopter.Gen

// CaptureDescription_SpecGenerator returns a generator of CaptureDescription_Spec instances for property testing.
// We first initialize captureDescription_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescription_SpecGenerator() gopter.Gen {
	if captureDescription_specGenerator != nil {
		return captureDescription_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_Spec(generators)
	captureDescription_specGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_Spec(generators)
	AddRelatedPropertyGeneratorsForCaptureDescription_Spec(generators)
	captureDescription_specGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_Spec{}), generators)

	return captureDescription_specGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescription_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescription_Spec(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescription_Encoding_SpecAvro, CaptureDescription_Encoding_SpecAvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescription_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescription_Spec(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(Destination_SpecGenerator())
}

func Test_CaptureDescription_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CaptureDescription_Status to CaptureDescription_Status via AssignPropertiesToCaptureDescription_Status & AssignPropertiesFromCaptureDescription_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForCaptureDescription_Status, CaptureDescription_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCaptureDescription_Status tests if a specific instance of CaptureDescription_Status can be assigned to v1alpha1api20211101storage and back losslessly
func RunPropertyAssignmentTestForCaptureDescription_Status(subject CaptureDescription_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20211101storage.CaptureDescription_Status
	err := copied.AssignPropertiesToCaptureDescription_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CaptureDescription_Status
	err = actual.AssignPropertiesFromCaptureDescription_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CaptureDescription_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescription_Status, CaptureDescription_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescription_Status runs a test to see if a specific instance of CaptureDescription_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescription_Status(subject CaptureDescription_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_Status instances for property testing - lazily instantiated by
//CaptureDescription_StatusGenerator()
var captureDescription_statusGenerator gopter.Gen

// CaptureDescription_StatusGenerator returns a generator of CaptureDescription_Status instances for property testing.
// We first initialize captureDescription_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescription_StatusGenerator() gopter.Gen {
	if captureDescription_statusGenerator != nil {
		return captureDescription_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_Status(generators)
	captureDescription_statusGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_Status(generators)
	AddRelatedPropertyGeneratorsForCaptureDescription_Status(generators)
	captureDescription_statusGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_Status{}), generators)

	return captureDescription_statusGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescription_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescription_Status(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescription_Encoding_StatusAvro, CaptureDescription_Encoding_StatusAvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescription_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescription_Status(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(Destination_StatusGenerator())
}

func Test_Destination_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Destination_Spec to Destination_Spec via AssignPropertiesToDestination_Spec & AssignPropertiesFromDestination_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForDestination_Spec, Destination_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDestination_Spec tests if a specific instance of Destination_Spec can be assigned to v1alpha1api20211101storage and back losslessly
func RunPropertyAssignmentTestForDestination_Spec(subject Destination_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20211101storage.Destination_Spec
	err := copied.AssignPropertiesToDestination_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Destination_Spec
	err = actual.AssignPropertiesFromDestination_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Destination_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_Spec, Destination_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_Spec runs a test to see if a specific instance of Destination_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_Spec(subject Destination_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_Spec instances for property testing - lazily instantiated by Destination_SpecGenerator()
var destination_specGenerator gopter.Gen

// Destination_SpecGenerator returns a generator of Destination_Spec instances for property testing.
func Destination_SpecGenerator() gopter.Gen {
	if destination_specGenerator != nil {
		return destination_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_Spec(generators)
	destination_specGenerator = gen.Struct(reflect.TypeOf(Destination_Spec{}), generators)

	return destination_specGenerator
}

// AddIndependentPropertyGeneratorsForDestination_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_Spec(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_Destination_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Destination_Status to Destination_Status via AssignPropertiesToDestination_Status & AssignPropertiesFromDestination_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForDestination_Status, Destination_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDestination_Status tests if a specific instance of Destination_Status can be assigned to v1alpha1api20211101storage and back losslessly
func RunPropertyAssignmentTestForDestination_Status(subject Destination_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20211101storage.Destination_Status
	err := copied.AssignPropertiesToDestination_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Destination_Status
	err = actual.AssignPropertiesFromDestination_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Destination_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_Status, Destination_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_Status runs a test to see if a specific instance of Destination_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_Status(subject Destination_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_Status instances for property testing - lazily instantiated by Destination_StatusGenerator()
var destination_statusGenerator gopter.Gen

// Destination_StatusGenerator returns a generator of Destination_Status instances for property testing.
func Destination_StatusGenerator() gopter.Gen {
	if destination_statusGenerator != nil {
		return destination_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_Status(generators)
	destination_statusGenerator = gen.Struct(reflect.TypeOf(Destination_Status{}), generators)

	return destination_statusGenerator
}

// AddIndependentPropertyGeneratorsForDestination_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_Status(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
