// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ConsumerGroup_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsumerGroup_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsumerGroup_StatusARM, ConsumerGroup_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsumerGroup_StatusARM runs a test to see if a specific instance of ConsumerGroup_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsumerGroup_StatusARM(subject ConsumerGroup_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsumerGroup_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsumerGroup_StatusARM instances for property testing - lazily instantiated by
//ConsumerGroup_StatusARMGenerator()
var consumerGroup_statusARMGenerator gopter.Gen

// ConsumerGroup_StatusARMGenerator returns a generator of ConsumerGroup_StatusARM instances for property testing.
// We first initialize consumerGroup_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ConsumerGroup_StatusARMGenerator() gopter.Gen {
	if consumerGroup_statusARMGenerator != nil {
		return consumerGroup_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsumerGroup_StatusARM(generators)
	consumerGroup_statusARMGenerator = gen.Struct(reflect.TypeOf(ConsumerGroup_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsumerGroup_StatusARM(generators)
	AddRelatedPropertyGeneratorsForConsumerGroup_StatusARM(generators)
	consumerGroup_statusARMGenerator = gen.Struct(reflect.TypeOf(ConsumerGroup_StatusARM{}), generators)

	return consumerGroup_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForConsumerGroup_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsumerGroup_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForConsumerGroup_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForConsumerGroup_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ConsumerGroup_StatusPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_ConsumerGroup_StatusPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsumerGroup_StatusPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsumerGroup_StatusPropertiesARM, ConsumerGroup_StatusPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsumerGroup_StatusPropertiesARM runs a test to see if a specific instance of ConsumerGroup_StatusPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsumerGroup_StatusPropertiesARM(subject ConsumerGroup_StatusPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsumerGroup_StatusPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsumerGroup_StatusPropertiesARM instances for property testing - lazily instantiated by
//ConsumerGroup_StatusPropertiesARMGenerator()
var consumerGroup_statusPropertiesARMGenerator gopter.Gen

// ConsumerGroup_StatusPropertiesARMGenerator returns a generator of ConsumerGroup_StatusPropertiesARM instances for property testing.
func ConsumerGroup_StatusPropertiesARMGenerator() gopter.Gen {
	if consumerGroup_statusPropertiesARMGenerator != nil {
		return consumerGroup_statusPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsumerGroup_StatusPropertiesARM(generators)
	consumerGroup_statusPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ConsumerGroup_StatusPropertiesARM{}), generators)

	return consumerGroup_statusPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForConsumerGroup_StatusPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsumerGroup_StatusPropertiesARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["UserMetadata"] = gen.PtrOf(gen.AlphaString())
}
