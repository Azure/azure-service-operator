// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhubsConsumergroup_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubsConsumergroup_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubsConsumergroup_SpecARM, NamespacesEventhubsConsumergroup_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubsConsumergroup_SpecARM runs a test to see if a specific instance of NamespacesEventhubsConsumergroup_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubsConsumergroup_SpecARM(subject NamespacesEventhubsConsumergroup_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubsConsumergroup_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubsConsumergroup_SpecARM instances for property testing - lazily instantiated by
//NamespacesEventhubsConsumergroup_SpecARMGenerator()
var namespacesEventhubsConsumergroup_specARMGenerator gopter.Gen

// NamespacesEventhubsConsumergroup_SpecARMGenerator returns a generator of NamespacesEventhubsConsumergroup_SpecARM instances for property testing.
// We first initialize namespacesEventhubsConsumergroup_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubsConsumergroup_SpecARMGenerator() gopter.Gen {
	if namespacesEventhubsConsumergroup_specARMGenerator != nil {
		return namespacesEventhubsConsumergroup_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecARM(generators)
	namespacesEventhubsConsumergroup_specARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroup_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecARM(generators)
	namespacesEventhubsConsumergroup_specARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroup_SpecARM{}), generators)

	return namespacesEventhubsConsumergroup_specARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamespacesEventhubsConsumergroup_SpecPropertiesARMGenerator())
}

func Test_NamespacesEventhubsConsumergroup_SpecPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubsConsumergroup_SpecPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubsConsumergroup_SpecPropertiesARM, NamespacesEventhubsConsumergroup_SpecPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubsConsumergroup_SpecPropertiesARM runs a test to see if a specific instance of NamespacesEventhubsConsumergroup_SpecPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubsConsumergroup_SpecPropertiesARM(subject NamespacesEventhubsConsumergroup_SpecPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubsConsumergroup_SpecPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubsConsumergroup_SpecPropertiesARM instances for property testing - lazily instantiated
//by NamespacesEventhubsConsumergroup_SpecPropertiesARMGenerator()
var namespacesEventhubsConsumergroup_specPropertiesARMGenerator gopter.Gen

// NamespacesEventhubsConsumergroup_SpecPropertiesARMGenerator returns a generator of NamespacesEventhubsConsumergroup_SpecPropertiesARM instances for property testing.
func NamespacesEventhubsConsumergroup_SpecPropertiesARMGenerator() gopter.Gen {
	if namespacesEventhubsConsumergroup_specPropertiesARMGenerator != nil {
		return namespacesEventhubsConsumergroup_specPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecPropertiesARM(generators)
	namespacesEventhubsConsumergroup_specPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroup_SpecPropertiesARM{}), generators)

	return namespacesEventhubsConsumergroup_specPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroup_SpecPropertiesARM(gens map[string]gopter.Gen) {
	gens["UserMetadata"] = gen.PtrOf(gen.AlphaString())
}
