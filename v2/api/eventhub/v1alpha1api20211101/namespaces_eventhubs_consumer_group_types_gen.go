// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=eventhub.azure.com,resources=namespaceseventhubsconsumergroups,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=eventhub.azure.com,resources={namespaceseventhubsconsumergroups/status,namespaceseventhubsconsumergroups/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-11-01/Microsoft.EventHub.json#/resourceDefinitions/namespaces_eventhubs_consumergroups
type NamespacesEventhubsConsumerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespacesEventhubsConsumergroups_Spec `json:"spec,omitempty"`
	Status            ConsumerGroup_Status                   `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NamespacesEventhubsConsumerGroup{}

// GetConditions returns the conditions of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) GetConditions() conditions.Conditions {
	return namespacesEventhubsConsumerGroup.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) SetConditions(conditions conditions.Conditions) {
	namespacesEventhubsConsumerGroup.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-eventhub-azure-com-v1alpha1api20211101-namespaceseventhubsconsumergroup,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventhub.azure.com,resources=namespaceseventhubsconsumergroups,verbs=create;update,versions=v1alpha1api20211101,name=default.v1alpha1api20211101.namespaceseventhubsconsumergroups.eventhub.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &NamespacesEventhubsConsumerGroup{}

// Default applies defaults to the NamespacesEventhubsConsumerGroup resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) Default() {
	namespacesEventhubsConsumerGroup.defaultImpl()
	var temp interface{} = namespacesEventhubsConsumerGroup
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) defaultAzureName() {
	if namespacesEventhubsConsumerGroup.Spec.AzureName == "" {
		namespacesEventhubsConsumerGroup.Spec.AzureName = namespacesEventhubsConsumerGroup.Name
	}
}

// defaultImpl applies the code generated defaults to the NamespacesEventhubsConsumerGroup resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) defaultImpl() {
	namespacesEventhubsConsumerGroup.defaultAzureName()
}

var _ genruntime.KubernetesResource = &NamespacesEventhubsConsumerGroup{}

// AzureName returns the Azure name of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) AzureName() string {
	return namespacesEventhubsConsumerGroup.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (namespacesEventhubsConsumerGroup NamespacesEventhubsConsumerGroup) GetAPIVersion() string {
	return "2021-11-01"
}

// GetResourceKind returns the kind of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) GetSpec() genruntime.ConvertibleSpec {
	return &namespacesEventhubsConsumerGroup.Spec
}

// GetStatus returns the status of this resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) GetStatus() genruntime.ConvertibleStatus {
	return &namespacesEventhubsConsumerGroup.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventHub/namespaces/eventhubs/consumergroups"
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) GetType() string {
	return "Microsoft.EventHub/namespaces/eventhubs/consumergroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ConsumerGroup_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespacesEventhubsConsumerGroup.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: namespacesEventhubsConsumerGroup.Namespace,
		Name:      namespacesEventhubsConsumerGroup.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ConsumerGroup_Status); ok {
		namespacesEventhubsConsumerGroup.Status = *st
		return nil
	}

	// Convert status to required version
	var st ConsumerGroup_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespacesEventhubsConsumerGroup.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventhub-azure-com-v1alpha1api20211101-namespaceseventhubsconsumergroup,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventhub.azure.com,resources=namespaceseventhubsconsumergroups,verbs=create;update,versions=v1alpha1api20211101,name=validate.v1alpha1api20211101.namespaceseventhubsconsumergroups.eventhub.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &NamespacesEventhubsConsumerGroup{}

// ValidateCreate validates the creation of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) ValidateCreate() error {
	validations := namespacesEventhubsConsumerGroup.createValidations()
	var temp interface{} = namespacesEventhubsConsumerGroup
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) ValidateDelete() error {
	validations := namespacesEventhubsConsumerGroup.deleteValidations()
	var temp interface{} = namespacesEventhubsConsumerGroup
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) ValidateUpdate(old runtime.Object) error {
	validations := namespacesEventhubsConsumerGroup.updateValidations()
	var temp interface{} = namespacesEventhubsConsumerGroup
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) createValidations() []func() error {
	return []func() error{namespacesEventhubsConsumerGroup.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return namespacesEventhubsConsumerGroup.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&namespacesEventhubsConsumerGroup.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNamespacesEventhubsConsumerGroup populates our NamespacesEventhubsConsumerGroup from the provided source NamespacesEventhubsConsumerGroup
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) AssignPropertiesFromNamespacesEventhubsConsumerGroup(source *v1alpha1api20211101storage.NamespacesEventhubsConsumerGroup) error {

	// ObjectMeta
	namespacesEventhubsConsumerGroup.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec NamespacesEventhubsConsumergroups_Spec
	err := spec.AssignPropertiesFromNamespacesEventhubsConsumergroupsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromNamespacesEventhubsConsumergroupsSpec()")
	}
	namespacesEventhubsConsumerGroup.Spec = spec

	// Status
	var status ConsumerGroup_Status
	err = status.AssignPropertiesFromConsumerGroupStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromConsumerGroupStatus()")
	}
	namespacesEventhubsConsumerGroup.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhubsConsumerGroup populates the provided destination NamespacesEventhubsConsumerGroup from our NamespacesEventhubsConsumerGroup
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) AssignPropertiesToNamespacesEventhubsConsumerGroup(destination *v1alpha1api20211101storage.NamespacesEventhubsConsumerGroup) error {

	// ObjectMeta
	destination.ObjectMeta = *namespacesEventhubsConsumerGroup.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20211101storage.NamespacesEventhubsConsumergroups_Spec
	err := namespacesEventhubsConsumerGroup.Spec.AssignPropertiesToNamespacesEventhubsConsumergroupsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToNamespacesEventhubsConsumergroupsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20211101storage.ConsumerGroup_Status
	err = namespacesEventhubsConsumerGroup.Status.AssignPropertiesToConsumerGroupStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToConsumerGroupStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespacesEventhubsConsumerGroup *NamespacesEventhubsConsumerGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespacesEventhubsConsumerGroup.Spec.OriginalVersion(),
		Kind:    "NamespacesEventhubsConsumerGroup",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-11-01/Microsoft.EventHub.json#/resourceDefinitions/namespaces_eventhubs_consumergroups
type NamespacesEventhubsConsumerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesEventhubsConsumerGroup `json:"items"`
}

type ConsumerGroup_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreatedAt: Exact time the message was created.
	CreatedAt *string `json:"createdAt,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or
	//"Microsoft.EventHub/Namespaces/EventHubs"
	Type *string `json:"type,omitempty"`

	//UpdatedAt: The exact time the message was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`

	//UserMetadata: User Metadata is a placeholder to store user-defined string data
	//with maximum length 1024. e.g. it can be used to store descriptive data, such as
	//list of teams and their contact information also user-defined configuration
	//settings can be stored.
	UserMetadata *string `json:"userMetadata,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ConsumerGroup_Status{}

// ConvertStatusFrom populates our ConsumerGroup_Status from the provided source
func (consumerGroupStatus *ConsumerGroup_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20211101storage.ConsumerGroup_Status)
	if ok {
		// Populate our instance from source
		return consumerGroupStatus.AssignPropertiesFromConsumerGroupStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211101storage.ConsumerGroup_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = consumerGroupStatus.AssignPropertiesFromConsumerGroupStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ConsumerGroup_Status
func (consumerGroupStatus *ConsumerGroup_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20211101storage.ConsumerGroup_Status)
	if ok {
		// Populate destination from our instance
		return consumerGroupStatus.AssignPropertiesToConsumerGroupStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211101storage.ConsumerGroup_Status{}
	err := consumerGroupStatus.AssignPropertiesToConsumerGroupStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ConsumerGroup_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (consumerGroupStatus *ConsumerGroup_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConsumerGroup_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (consumerGroupStatus *ConsumerGroup_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConsumerGroup_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConsumerGroup_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			consumerGroupStatus.CreatedAt = &createdAt
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		consumerGroupStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		consumerGroupStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		consumerGroupStatus.Name = &name
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		consumerGroupStatus.SystemData = &systemData
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		consumerGroupStatus.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			consumerGroupStatus.UpdatedAt = &updatedAt
		}
	}

	// Set property ‘UserMetadata’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UserMetadata != nil {
			userMetadata := *typedInput.Properties.UserMetadata
			consumerGroupStatus.UserMetadata = &userMetadata
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromConsumerGroupStatus populates our ConsumerGroup_Status from the provided source ConsumerGroup_Status
func (consumerGroupStatus *ConsumerGroup_Status) AssignPropertiesFromConsumerGroupStatus(source *v1alpha1api20211101storage.ConsumerGroup_Status) error {

	// Conditions
	consumerGroupStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedAt
	consumerGroupStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// Id
	consumerGroupStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	consumerGroupStatus.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	consumerGroupStatus.Name = genruntime.ClonePointerToString(source.Name)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		consumerGroupStatus.SystemData = &systemDatum
	} else {
		consumerGroupStatus.SystemData = nil
	}

	// Type
	consumerGroupStatus.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	consumerGroupStatus.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// UserMetadata
	consumerGroupStatus.UserMetadata = genruntime.ClonePointerToString(source.UserMetadata)

	// No error
	return nil
}

// AssignPropertiesToConsumerGroupStatus populates the provided destination ConsumerGroup_Status from our ConsumerGroup_Status
func (consumerGroupStatus *ConsumerGroup_Status) AssignPropertiesToConsumerGroupStatus(destination *v1alpha1api20211101storage.ConsumerGroup_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(consumerGroupStatus.Conditions)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(consumerGroupStatus.CreatedAt)

	// Id
	destination.Id = genruntime.ClonePointerToString(consumerGroupStatus.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(consumerGroupStatus.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(consumerGroupStatus.Name)

	// SystemData
	if consumerGroupStatus.SystemData != nil {
		var systemDatum v1alpha1api20211101storage.SystemData_Status
		err := (*consumerGroupStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(consumerGroupStatus.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(consumerGroupStatus.UpdatedAt)

	// UserMetadata
	destination.UserMetadata = genruntime.ClonePointerToString(consumerGroupStatus.UserMetadata)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2021-11-01"}
type NamespacesEventhubsConsumergroupsSpecAPIVersion string

const NamespacesEventhubsConsumergroupsSpecAPIVersion20211101 = NamespacesEventhubsConsumergroupsSpecAPIVersion("2021-11-01")

type NamespacesEventhubsConsumergroups_Spec struct {
	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=1
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"eventhub.azure.com" json:"owner" kind:"NamespacesEventhub"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//UserMetadata: User Metadata is a placeholder to store user-defined string data
	//with maximum length 1024. e.g. it can be used to store descriptive data, such as
	//list of teams and their contact information also user-defined configuration
	//settings can be stored.
	UserMetadata *string `json:"userMetadata,omitempty"`
}

var _ genruntime.ARMTransformer = &NamespacesEventhubsConsumergroups_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespacesEventhubsConsumergroupsSpec == nil {
		return nil, nil
	}
	var result NamespacesEventhubsConsumergroups_SpecARM

	// Set property ‘Location’:
	if namespacesEventhubsConsumergroupsSpec.Location != nil {
		location := *namespacesEventhubsConsumergroupsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if namespacesEventhubsConsumergroupsSpec.UserMetadata != nil {
		userMetadata := *namespacesEventhubsConsumergroupsSpec.UserMetadata
		result.Properties.UserMetadata = &userMetadata
	}

	// Set property ‘Tags’:
	if namespacesEventhubsConsumergroupsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range namespacesEventhubsConsumergroupsSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesEventhubsConsumergroups_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesEventhubsConsumergroups_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesEventhubsConsumergroups_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	namespacesEventhubsConsumergroupsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespacesEventhubsConsumergroupsSpec.Location = &location
	}

	// Set property ‘Owner’:
	namespacesEventhubsConsumergroupsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespacesEventhubsConsumergroupsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			namespacesEventhubsConsumergroupsSpec.Tags[key] = value
		}
	}

	// Set property ‘UserMetadata’:
	// copying flattened property:
	if typedInput.Properties.UserMetadata != nil {
		userMetadata := *typedInput.Properties.UserMetadata
		namespacesEventhubsConsumergroupsSpec.UserMetadata = &userMetadata
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NamespacesEventhubsConsumergroups_Spec{}

// ConvertSpecFrom populates our NamespacesEventhubsConsumergroups_Spec from the provided source
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20211101storage.NamespacesEventhubsConsumergroups_Spec)
	if ok {
		// Populate our instance from source
		return namespacesEventhubsConsumergroupsSpec.AssignPropertiesFromNamespacesEventhubsConsumergroupsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211101storage.NamespacesEventhubsConsumergroups_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = namespacesEventhubsConsumergroupsSpec.AssignPropertiesFromNamespacesEventhubsConsumergroupsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NamespacesEventhubsConsumergroups_Spec
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20211101storage.NamespacesEventhubsConsumergroups_Spec)
	if ok {
		// Populate destination from our instance
		return namespacesEventhubsConsumergroupsSpec.AssignPropertiesToNamespacesEventhubsConsumergroupsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211101storage.NamespacesEventhubsConsumergroups_Spec{}
	err := namespacesEventhubsConsumergroupsSpec.AssignPropertiesToNamespacesEventhubsConsumergroupsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesEventhubsConsumergroupsSpec populates our NamespacesEventhubsConsumergroups_Spec from the provided source NamespacesEventhubsConsumergroups_Spec
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) AssignPropertiesFromNamespacesEventhubsConsumergroupsSpec(source *v1alpha1api20211101storage.NamespacesEventhubsConsumergroups_Spec) error {

	// AzureName
	namespacesEventhubsConsumergroupsSpec.AzureName = source.AzureName

	// Location
	namespacesEventhubsConsumergroupsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	namespacesEventhubsConsumergroupsSpec.Owner = source.Owner.Copy()

	// Tags
	namespacesEventhubsConsumergroupsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// UserMetadata
	namespacesEventhubsConsumergroupsSpec.UserMetadata = genruntime.ClonePointerToString(source.UserMetadata)

	// No error
	return nil
}

// AssignPropertiesToNamespacesEventhubsConsumergroupsSpec populates the provided destination NamespacesEventhubsConsumergroups_Spec from our NamespacesEventhubsConsumergroups_Spec
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) AssignPropertiesToNamespacesEventhubsConsumergroupsSpec(destination *v1alpha1api20211101storage.NamespacesEventhubsConsumergroups_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = namespacesEventhubsConsumergroupsSpec.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(namespacesEventhubsConsumergroupsSpec.Location)

	// OriginalVersion
	destination.OriginalVersion = namespacesEventhubsConsumergroupsSpec.OriginalVersion()

	// Owner
	destination.Owner = namespacesEventhubsConsumergroupsSpec.Owner.Copy()

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespacesEventhubsConsumergroupsSpec.Tags)

	// UserMetadata
	destination.UserMetadata = genruntime.ClonePointerToString(namespacesEventhubsConsumergroupsSpec.UserMetadata)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (namespacesEventhubsConsumergroupsSpec *NamespacesEventhubsConsumergroups_Spec) SetAzureName(azureName string) {
	namespacesEventhubsConsumergroupsSpec.AzureName = azureName
}

func init() {
	SchemeBuilder.Register(&NamespacesEventhubsConsumerGroup{}, &NamespacesEventhubsConsumerGroupList{})
}
