// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Eventhub_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhub_StatusARM, Eventhub_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhub_StatusARM runs a test to see if a specific instance of Eventhub_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhub_StatusARM(subject Eventhub_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_StatusARM instances for property testing - lazily instantiated by Eventhub_StatusARMGenerator()
var eventhub_statusARMGenerator gopter.Gen

// Eventhub_StatusARMGenerator returns a generator of Eventhub_StatusARM instances for property testing.
// We first initialize eventhub_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Eventhub_StatusARMGenerator() gopter.Gen {
	if eventhub_statusARMGenerator != nil {
		return eventhub_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_StatusARM(generators)
	eventhub_statusARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_StatusARM(generators)
	AddRelatedPropertyGeneratorsForEventhub_StatusARM(generators)
	eventhub_statusARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_StatusARM{}), generators)

	return eventhub_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhub_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhub_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhub_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhub_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Eventhub_StatusPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_Eventhub_StatusPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Eventhub_StatusPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventhub_StatusPropertiesARM, Eventhub_StatusPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventhub_StatusPropertiesARM runs a test to see if a specific instance of Eventhub_StatusPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventhub_StatusPropertiesARM(subject Eventhub_StatusPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Eventhub_StatusPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Eventhub_StatusPropertiesARM instances for property testing - lazily instantiated by
//Eventhub_StatusPropertiesARMGenerator()
var eventhub_statusPropertiesARMGenerator gopter.Gen

// Eventhub_StatusPropertiesARMGenerator returns a generator of Eventhub_StatusPropertiesARM instances for property testing.
// We first initialize eventhub_statusPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Eventhub_StatusPropertiesARMGenerator() gopter.Gen {
	if eventhub_statusPropertiesARMGenerator != nil {
		return eventhub_statusPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_StatusPropertiesARM(generators)
	eventhub_statusPropertiesARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_StatusPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventhub_StatusPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForEventhub_StatusPropertiesARM(generators)
	eventhub_statusPropertiesARMGenerator = gen.Struct(reflect.TypeOf(Eventhub_StatusPropertiesARM{}), generators)

	return eventhub_statusPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForEventhub_StatusPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventhub_StatusPropertiesARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["PartitionIds"] = gen.SliceOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
	gens["UpdatedAt"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventhub_StatusPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventhub_StatusPropertiesARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescription_StatusARMGenerator())
}

func Test_CaptureDescription_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescription_StatusARM, CaptureDescription_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescription_StatusARM runs a test to see if a specific instance of CaptureDescription_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescription_StatusARM(subject CaptureDescription_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_StatusARM instances for property testing - lazily instantiated by
//CaptureDescription_StatusARMGenerator()
var captureDescription_statusARMGenerator gopter.Gen

// CaptureDescription_StatusARMGenerator returns a generator of CaptureDescription_StatusARM instances for property testing.
// We first initialize captureDescription_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescription_StatusARMGenerator() gopter.Gen {
	if captureDescription_statusARMGenerator != nil {
		return captureDescription_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_StatusARM(generators)
	captureDescription_statusARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_StatusARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescription_StatusARM(generators)
	captureDescription_statusARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_StatusARM{}), generators)

	return captureDescription_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescription_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescription_StatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.AlphaString())
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescription_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescription_StatusARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(Destination_StatusARMGenerator())
}

func Test_Destination_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_StatusARM, Destination_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_StatusARM runs a test to see if a specific instance of Destination_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_StatusARM(subject Destination_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_StatusARM instances for property testing - lazily instantiated by
//Destination_StatusARMGenerator()
var destination_statusARMGenerator gopter.Gen

// Destination_StatusARMGenerator returns a generator of Destination_StatusARM instances for property testing.
// We first initialize destination_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Destination_StatusARMGenerator() gopter.Gen {
	if destination_statusARMGenerator != nil {
		return destination_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_StatusARM(generators)
	destination_statusARMGenerator = gen.Struct(reflect.TypeOf(Destination_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_StatusARM(generators)
	AddRelatedPropertyGeneratorsForDestination_StatusARM(generators)
	destination_statusARMGenerator = gen.Struct(reflect.TypeOf(Destination_StatusARM{}), generators)

	return destination_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestination_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestination_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Destination_StatusPropertiesARMGenerator())
}

func Test_Destination_StatusPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_StatusPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_StatusPropertiesARM, Destination_StatusPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_StatusPropertiesARM runs a test to see if a specific instance of Destination_StatusPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_StatusPropertiesARM(subject Destination_StatusPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_StatusPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_StatusPropertiesARM instances for property testing - lazily instantiated by
//Destination_StatusPropertiesARMGenerator()
var destination_statusPropertiesARMGenerator gopter.Gen

// Destination_StatusPropertiesARMGenerator returns a generator of Destination_StatusPropertiesARM instances for property testing.
func Destination_StatusPropertiesARMGenerator() gopter.Gen {
	if destination_statusPropertiesARMGenerator != nil {
		return destination_statusPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_StatusPropertiesARM(generators)
	destination_statusPropertiesARMGenerator = gen.Struct(reflect.TypeOf(Destination_StatusPropertiesARM{}), generators)

	return destination_statusPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_StatusPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_StatusPropertiesARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
