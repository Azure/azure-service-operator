// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhubs_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubs_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubs_SPECARM, NamespacesEventhubs_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubs_SPECARM runs a test to see if a specific instance of NamespacesEventhubs_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubs_SPECARM(subject NamespacesEventhubs_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubs_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubs_SPECARM instances for property testing - lazily instantiated by
//NamespacesEventhubs_SPECARMGenerator()
var namespacesEventhubs_specarmGenerator gopter.Gen

// NamespacesEventhubs_SPECARMGenerator returns a generator of NamespacesEventhubs_SPECARM instances for property testing.
// We first initialize namespacesEventhubs_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubs_SPECARMGenerator() gopter.Gen {
	if namespacesEventhubs_specarmGenerator != nil {
		return namespacesEventhubs_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPECARM(generators)
	namespacesEventhubs_specarmGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPECARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubs_SPECARM(generators)
	namespacesEventhubs_specarmGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPECARM{}), generators)

	return namespacesEventhubs_specarmGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubs_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubs_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubs_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamespacesEventhubs_Properties_SPECARMGenerator())
}

func Test_NamespacesEventhubs_Properties_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubs_Properties_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubs_Properties_SPECARM, NamespacesEventhubs_Properties_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubs_Properties_SPECARM runs a test to see if a specific instance of NamespacesEventhubs_Properties_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubs_Properties_SPECARM(subject NamespacesEventhubs_Properties_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubs_Properties_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubs_Properties_SPECARM instances for property testing - lazily instantiated by
//NamespacesEventhubs_Properties_SPECARMGenerator()
var namespacesEventhubs_properties_specarmGenerator gopter.Gen

// NamespacesEventhubs_Properties_SPECARMGenerator returns a generator of NamespacesEventhubs_Properties_SPECARM instances for property testing.
// We first initialize namespacesEventhubs_properties_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubs_Properties_SPECARMGenerator() gopter.Gen {
	if namespacesEventhubs_properties_specarmGenerator != nil {
		return namespacesEventhubs_properties_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubs_Properties_SPECARM(generators)
	namespacesEventhubs_properties_specarmGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_Properties_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubs_Properties_SPECARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubs_Properties_SPECARM(generators)
	namespacesEventhubs_properties_specarmGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_Properties_SPECARM{}), generators)

	return namespacesEventhubs_properties_specarmGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubs_Properties_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubs_Properties_SPECARM(gens map[string]gopter.Gen) {
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		NamespacesEventhubs_Properties_Status_SPECActive,
		NamespacesEventhubs_Properties_Status_SPECCreating,
		NamespacesEventhubs_Properties_Status_SPECDeleting,
		NamespacesEventhubs_Properties_Status_SPECDisabled,
		NamespacesEventhubs_Properties_Status_SPECReceiveDisabled,
		NamespacesEventhubs_Properties_Status_SPECRenaming,
		NamespacesEventhubs_Properties_Status_SPECRestoring,
		NamespacesEventhubs_Properties_Status_SPECSendDisabled,
		NamespacesEventhubs_Properties_Status_SPECUnknown))
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubs_Properties_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubs_Properties_SPECARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescription_SpecARMGenerator())
}

func Test_CaptureDescription_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescription_SpecARM, CaptureDescription_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescription_SpecARM runs a test to see if a specific instance of CaptureDescription_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescription_SpecARM(subject CaptureDescription_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_SpecARM instances for property testing - lazily instantiated by
//CaptureDescription_SpecARMGenerator()
var captureDescription_specARMGenerator gopter.Gen

// CaptureDescription_SpecARMGenerator returns a generator of CaptureDescription_SpecARM instances for property testing.
// We first initialize captureDescription_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescription_SpecARMGenerator() gopter.Gen {
	if captureDescription_specARMGenerator != nil {
		return captureDescription_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_SpecARM(generators)
	captureDescription_specARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescription_SpecARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescription_SpecARM(generators)
	captureDescription_specARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_SpecARM{}), generators)

	return captureDescription_specARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescription_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescription_SpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescription_Encoding_SpecAvro, CaptureDescription_Encoding_SpecAvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescription_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescription_SpecARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(Destination_SpecARMGenerator())
}

func Test_Destination_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_SpecARM, Destination_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_SpecARM runs a test to see if a specific instance of Destination_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_SpecARM(subject Destination_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_SpecARM instances for property testing - lazily instantiated by
//Destination_SpecARMGenerator()
var destination_specARMGenerator gopter.Gen

// Destination_SpecARMGenerator returns a generator of Destination_SpecARM instances for property testing.
// We first initialize destination_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Destination_SpecARMGenerator() gopter.Gen {
	if destination_specARMGenerator != nil {
		return destination_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_SpecARM(generators)
	destination_specARMGenerator = gen.Struct(reflect.TypeOf(Destination_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDestination_SpecARM(generators)
	destination_specARMGenerator = gen.Struct(reflect.TypeOf(Destination_SpecARM{}), generators)

	return destination_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestination_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestination_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(Destination_Properties_SpecARMGenerator())
}

func Test_Destination_Properties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_Properties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestination_Properties_SpecARM, Destination_Properties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestination_Properties_SpecARM runs a test to see if a specific instance of Destination_Properties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestination_Properties_SpecARM(subject Destination_Properties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_Properties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_Properties_SpecARM instances for property testing - lazily instantiated by
//Destination_Properties_SpecARMGenerator()
var destination_properties_specARMGenerator gopter.Gen

// Destination_Properties_SpecARMGenerator returns a generator of Destination_Properties_SpecARM instances for property testing.
func Destination_Properties_SpecARMGenerator() gopter.Gen {
	if destination_properties_specARMGenerator != nil {
		return destination_properties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestination_Properties_SpecARM(generators)
	destination_properties_specARMGenerator = gen.Struct(reflect.TypeOf(Destination_Properties_SpecARM{}), generators)

	return destination_properties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDestination_Properties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestination_Properties_SpecARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
