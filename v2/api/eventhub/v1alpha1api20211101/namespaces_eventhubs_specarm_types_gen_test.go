// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhubs_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubs_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubsSPECARM, NamespacesEventhubsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubsSPECARM runs a test to see if a specific instance of NamespacesEventhubs_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubsSPECARM(subject NamespacesEventhubs_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubs_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubs_SPECARM instances for property testing - lazily instantiated by
//NamespacesEventhubsSPECARMGenerator()
var namespacesEventhubsSPECARMGenerator gopter.Gen

// NamespacesEventhubsSPECARMGenerator returns a generator of NamespacesEventhubs_SPECARM instances for property testing.
// We first initialize namespacesEventhubsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubsSPECARMGenerator() gopter.Gen {
	if namespacesEventhubsSPECARMGenerator != nil {
		return namespacesEventhubsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECARM(generators)
	namespacesEventhubsSPECARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubsSPECARM(generators)
	namespacesEventhubsSPECARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPECARM{}), generators)

	return namespacesEventhubsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamespacesEventhubsSPECPropertiesARMGenerator())
}

func Test_NamespacesEventhubs_SPEC_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubs_SPEC_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubsSPECPropertiesARM, NamespacesEventhubsSPECPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubsSPECPropertiesARM runs a test to see if a specific instance of NamespacesEventhubs_SPEC_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubsSPECPropertiesARM(subject NamespacesEventhubs_SPEC_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubs_SPEC_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubs_SPEC_PropertiesARM instances for property testing - lazily instantiated by
//NamespacesEventhubsSPECPropertiesARMGenerator()
var namespacesEventhubsSPECPropertiesARMGenerator gopter.Gen

// NamespacesEventhubsSPECPropertiesARMGenerator returns a generator of NamespacesEventhubs_SPEC_PropertiesARM instances for property testing.
// We first initialize namespacesEventhubsSPECPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubsSPECPropertiesARMGenerator() gopter.Gen {
	if namespacesEventhubsSPECPropertiesARMGenerator != nil {
		return namespacesEventhubsSPECPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECPropertiesARM(generators)
	namespacesEventhubsSPECPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPEC_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubsSPECPropertiesARM(generators)
	namespacesEventhubsSPECPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubs_SPEC_PropertiesARM{}), generators)

	return namespacesEventhubsSPECPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubsSPECPropertiesARM(gens map[string]gopter.Gen) {
	gens["MessageRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["PartitionCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubsSPECPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubsSPECPropertiesARM(gens map[string]gopter.Gen) {
	gens["CaptureDescription"] = gen.PtrOf(CaptureDescriptionSpecARMGenerator())
}

func Test_CaptureDescription_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaptureDescription_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaptureDescriptionSpecARM, CaptureDescriptionSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaptureDescriptionSpecARM runs a test to see if a specific instance of CaptureDescription_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaptureDescriptionSpecARM(subject CaptureDescription_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaptureDescription_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaptureDescription_SpecARM instances for property testing - lazily instantiated by
//CaptureDescriptionSpecARMGenerator()
var captureDescriptionSpecARMGenerator gopter.Gen

// CaptureDescriptionSpecARMGenerator returns a generator of CaptureDescription_SpecARM instances for property testing.
// We first initialize captureDescriptionSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CaptureDescriptionSpecARMGenerator() gopter.Gen {
	if captureDescriptionSpecARMGenerator != nil {
		return captureDescriptionSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionSpecARM(generators)
	captureDescriptionSpecARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaptureDescriptionSpecARM(generators)
	AddRelatedPropertyGeneratorsForCaptureDescriptionSpecARM(generators)
	captureDescriptionSpecARMGenerator = gen.Struct(reflect.TypeOf(CaptureDescription_SpecARM{}), generators)

	return captureDescriptionSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForCaptureDescriptionSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaptureDescriptionSpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Encoding"] = gen.PtrOf(gen.OneConstOf(CaptureDescriptionSpecEncodingAvro, CaptureDescriptionSpecEncodingAvroDeflate))
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SizeLimitInBytes"] = gen.PtrOf(gen.Int())
	gens["SkipEmptyArchives"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForCaptureDescriptionSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCaptureDescriptionSpecARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(DestinationSpecARMGenerator())
}

func Test_Destination_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestinationSpecARM, DestinationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestinationSpecARM runs a test to see if a specific instance of Destination_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestinationSpecARM(subject Destination_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_SpecARM instances for property testing - lazily instantiated by DestinationSpecARMGenerator()
var destinationSpecARMGenerator gopter.Gen

// DestinationSpecARMGenerator returns a generator of Destination_SpecARM instances for property testing.
// We first initialize destinationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DestinationSpecARMGenerator() gopter.Gen {
	if destinationSpecARMGenerator != nil {
		return destinationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationSpecARM(generators)
	destinationSpecARMGenerator = gen.Struct(reflect.TypeOf(Destination_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationSpecARM(generators)
	AddRelatedPropertyGeneratorsForDestinationSpecARM(generators)
	destinationSpecARMGenerator = gen.Struct(reflect.TypeOf(Destination_SpecARM{}), generators)

	return destinationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDestinationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestinationSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDestinationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDestinationSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DestinationSpecPropertiesARMGenerator())
}

func Test_Destination_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Destination_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDestinationSpecPropertiesARM, DestinationSpecPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDestinationSpecPropertiesARM runs a test to see if a specific instance of Destination_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDestinationSpecPropertiesARM(subject Destination_Spec_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Destination_Spec_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Destination_Spec_PropertiesARM instances for property testing - lazily instantiated by
//DestinationSpecPropertiesARMGenerator()
var destinationSpecPropertiesARMGenerator gopter.Gen

// DestinationSpecPropertiesARMGenerator returns a generator of Destination_Spec_PropertiesARM instances for property testing.
func DestinationSpecPropertiesARMGenerator() gopter.Gen {
	if destinationSpecPropertiesARMGenerator != nil {
		return destinationSpecPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDestinationSpecPropertiesARM(generators)
	destinationSpecPropertiesARMGenerator = gen.Struct(reflect.TypeOf(Destination_Spec_PropertiesARM{}), generators)

	return destinationSpecPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForDestinationSpecPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDestinationSpecPropertiesARM(gens map[string]gopter.Gen) {
	gens["ArchiveNameFormat"] = gen.PtrOf(gen.AlphaString())
	gens["BlobContainer"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeFolderPath"] = gen.PtrOf(gen.AlphaString())
	gens["DataLakeSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountResourceId"] = gen.PtrOf(gen.AlphaString())
}
