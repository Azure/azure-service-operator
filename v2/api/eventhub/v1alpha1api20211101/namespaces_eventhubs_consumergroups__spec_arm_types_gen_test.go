// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhubsConsumergroups_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubsConsumergroups_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSpecARM, NamespacesEventhubsConsumergroupsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSpecARM runs a test to see if a specific instance of NamespacesEventhubsConsumergroups_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSpecARM(subject NamespacesEventhubsConsumergroups_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubsConsumergroups_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubsConsumergroups_SpecARM instances for property testing - lazily instantiated by
// NamespacesEventhubsConsumergroupsSpecARMGenerator()
var namespacesEventhubsConsumergroupsSpecARMGenerator gopter.Gen

// NamespacesEventhubsConsumergroupsSpecARMGenerator returns a generator of NamespacesEventhubsConsumergroups_SpecARM instances for property testing.
// We first initialize namespacesEventhubsConsumergroupsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubsConsumergroupsSpecARMGenerator() gopter.Gen {
	if namespacesEventhubsConsumergroupsSpecARMGenerator != nil {
		return namespacesEventhubsConsumergroupsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSpecARM(generators)
	namespacesEventhubsConsumergroupsSpecARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroups_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSpecARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroupsSpecARM(generators)
	namespacesEventhubsConsumergroupsSpecARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroups_SpecARM{}), generators)

	return namespacesEventhubsConsumergroupsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroupsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroupsSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ConsumerGroupPropertiesARMGenerator())
}

func Test_ConsumerGroupPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsumerGroupPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsumerGroupPropertiesARM, ConsumerGroupPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsumerGroupPropertiesARM runs a test to see if a specific instance of ConsumerGroupPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsumerGroupPropertiesARM(subject ConsumerGroupPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsumerGroupPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsumerGroupPropertiesARM instances for property testing - lazily instantiated by
// ConsumerGroupPropertiesARMGenerator()
var consumerGroupPropertiesARMGenerator gopter.Gen

// ConsumerGroupPropertiesARMGenerator returns a generator of ConsumerGroupPropertiesARM instances for property testing.
func ConsumerGroupPropertiesARMGenerator() gopter.Gen {
	if consumerGroupPropertiesARMGenerator != nil {
		return consumerGroupPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsumerGroupPropertiesARM(generators)
	consumerGroupPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ConsumerGroupPropertiesARM{}), generators)

	return consumerGroupPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForConsumerGroupPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsumerGroupPropertiesARM(gens map[string]gopter.Gen) {
	gens["UserMetadata"] = gen.PtrOf(gen.AlphaString())
}
