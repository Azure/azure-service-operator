// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NamespacesEventhubsConsumergroups_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubsConsumergroups_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSPECARM, NamespacesEventhubsConsumergroupsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSPECARM runs a test to see if a specific instance of NamespacesEventhubsConsumergroups_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSPECARM(subject NamespacesEventhubsConsumergroups_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubsConsumergroups_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubsConsumergroups_SPECARM instances for property testing - lazily instantiated by
//NamespacesEventhubsConsumergroupsSPECARMGenerator()
var namespacesEventhubsConsumergroupsSPECARMGenerator gopter.Gen

// NamespacesEventhubsConsumergroupsSPECARMGenerator returns a generator of NamespacesEventhubsConsumergroups_SPECARM instances for property testing.
// We first initialize namespacesEventhubsConsumergroupsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamespacesEventhubsConsumergroupsSPECARMGenerator() gopter.Gen {
	if namespacesEventhubsConsumergroupsSPECARMGenerator != nil {
		return namespacesEventhubsConsumergroupsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECARM(generators)
	namespacesEventhubsConsumergroupsSPECARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroups_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECARM(generators)
	AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECARM(generators)
	namespacesEventhubsConsumergroupsSPECARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroups_SPECARM{}), generators)

	return namespacesEventhubsConsumergroupsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamespacesEventhubsConsumergroupsSPECPropertiesARMGenerator())
}

func Test_NamespacesEventhubsConsumergroups_SPEC_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamespacesEventhubsConsumergroups_SPEC_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSPECPropertiesARM, NamespacesEventhubsConsumergroupsSPECPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSPECPropertiesARM runs a test to see if a specific instance of NamespacesEventhubsConsumergroups_SPEC_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNamespacesEventhubsConsumergroupsSPECPropertiesARM(subject NamespacesEventhubsConsumergroups_SPEC_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamespacesEventhubsConsumergroups_SPEC_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamespacesEventhubsConsumergroups_SPEC_PropertiesARM instances for property testing - lazily
//instantiated by NamespacesEventhubsConsumergroupsSPECPropertiesARMGenerator()
var namespacesEventhubsConsumergroupsSPECPropertiesARMGenerator gopter.Gen

// NamespacesEventhubsConsumergroupsSPECPropertiesARMGenerator returns a generator of NamespacesEventhubsConsumergroups_SPEC_PropertiesARM instances for property testing.
func NamespacesEventhubsConsumergroupsSPECPropertiesARMGenerator() gopter.Gen {
	if namespacesEventhubsConsumergroupsSPECPropertiesARMGenerator != nil {
		return namespacesEventhubsConsumergroupsSPECPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECPropertiesARM(generators)
	namespacesEventhubsConsumergroupsSPECPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NamespacesEventhubsConsumergroups_SPEC_PropertiesARM{}), generators)

	return namespacesEventhubsConsumergroupsSPECPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamespacesEventhubsConsumergroupsSPECPropertiesARM(gens map[string]gopter.Gen) {
	gens["UserMetadata"] = gen.PtrOf(gen.AlphaString())
}
