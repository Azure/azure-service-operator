// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/namespaces-preview.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}
type Namespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Namespace_Spec     `json:"spec,omitempty"`
	Status            EHNamespace_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Namespace{}

// GetConditions returns the conditions of the resource
func (namespace *Namespace) GetConditions() conditions.Conditions {
	return namespace.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespace *Namespace) SetConditions(conditions conditions.Conditions) {
	namespace.Status.Conditions = conditions
}

var _ conversion.Convertible = &Namespace{}

// ConvertFrom populates our Namespace from the provided hub Namespace
func (namespace *Namespace) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20211101storage.Namespace)
	if !ok {
		return fmt.Errorf("expected storage:eventhub/v1alpha1api20211101storage/Namespace but received %T instead", hub)
	}

	return namespace.AssignPropertiesFromNamespace(source)
}

// ConvertTo populates the provided hub Namespace from our Namespace
func (namespace *Namespace) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20211101storage.Namespace)
	if !ok {
		return fmt.Errorf("expected storage:eventhub/v1alpha1api20211101storage/Namespace but received %T instead", hub)
	}

	return namespace.AssignPropertiesToNamespace(destination)
}

// +kubebuilder:webhook:path=/mutate-eventhub-azure-com-v1alpha1api20211101-namespace,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventhub.azure.com,resources=namespaces,verbs=create;update,versions=v1alpha1api20211101,name=default.v1alpha1api20211101.namespaces.eventhub.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Namespace{}

// Default applies defaults to the Namespace resource
func (namespace *Namespace) Default() {
	namespace.defaultImpl()
	var temp interface{} = namespace
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (namespace *Namespace) defaultAzureName() {
	if namespace.Spec.AzureName == "" {
		namespace.Spec.AzureName = namespace.Name
	}
}

// defaultImpl applies the code generated defaults to the Namespace resource
func (namespace *Namespace) defaultImpl() { namespace.defaultAzureName() }

var _ genruntime.KubernetesResource = &Namespace{}

// AzureName returns the Azure name of the resource
func (namespace *Namespace) AzureName() string {
	return namespace.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (namespace Namespace) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (namespace *Namespace) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (namespace *Namespace) GetSpec() genruntime.ConvertibleSpec {
	return &namespace.Spec
}

// GetStatus returns the status of this resource
func (namespace *Namespace) GetStatus() genruntime.ConvertibleStatus {
	return &namespace.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventHub/namespaces"
func (namespace *Namespace) GetType() string {
	return "Microsoft.EventHub/namespaces"
}

// NewEmptyStatus returns a new empty (blank) status
func (namespace *Namespace) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EHNamespace_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespace *Namespace) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespace.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  namespace.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespace *Namespace) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EHNamespace_Status); ok {
		namespace.Status = *st
		return nil
	}

	// Convert status to required version
	var st EHNamespace_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespace.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventhub-azure-com-v1alpha1api20211101-namespace,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventhub.azure.com,resources=namespaces,verbs=create;update,versions=v1alpha1api20211101,name=validate.v1alpha1api20211101.namespaces.eventhub.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Namespace{}

// ValidateCreate validates the creation of the resource
func (namespace *Namespace) ValidateCreate() error {
	validations := namespace.createValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (namespace *Namespace) ValidateDelete() error {
	validations := namespace.deleteValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (namespace *Namespace) ValidateUpdate(old runtime.Object) error {
	validations := namespace.updateValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (namespace *Namespace) createValidations() []func() error {
	return []func() error{namespace.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (namespace *Namespace) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (namespace *Namespace) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return namespace.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (namespace *Namespace) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&namespace.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNamespace populates our Namespace from the provided source Namespace
func (namespace *Namespace) AssignPropertiesFromNamespace(source *v1alpha1api20211101storage.Namespace) error {

	// ObjectMeta
	namespace.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Namespace_Spec
	err := spec.AssignPropertiesFromNamespace_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespace_Spec() to populate field Spec")
	}
	namespace.Spec = spec

	// Status
	var status EHNamespace_Status
	err = status.AssignPropertiesFromEHNamespace_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEHNamespace_Status() to populate field Status")
	}
	namespace.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespace populates the provided destination Namespace from our Namespace
func (namespace *Namespace) AssignPropertiesToNamespace(destination *v1alpha1api20211101storage.Namespace) error {

	// ObjectMeta
	destination.ObjectMeta = *namespace.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20211101storage.Namespace_Spec
	err := namespace.Spec.AssignPropertiesToNamespace_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespace_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20211101storage.EHNamespace_Status
	err = namespace.Status.AssignPropertiesToEHNamespace_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEHNamespace_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespace *Namespace) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespace.Spec.OriginalVersion(),
		Kind:    "Namespace",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/namespaces-preview.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}
type NamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Namespace `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-11-01"}
type APIVersion string

const APIVersionValue = APIVersion("2021-11-01")

type EHNamespace_Status struct {
	//AlternateName: Alternate name specified when alias and namespace names are same.
	AlternateName *string `json:"alternateName,omitempty"`

	//ClusterArmId: Cluster ARM ID of the Namespace.
	ClusterArmId *string `json:"clusterArmId,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreatedAt: The time the Namespace was created.
	CreatedAt *string `json:"createdAt,omitempty"`

	//DisableLocalAuth: This property disables SAS authentication for the Event Hubs
	//namespace.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//Encryption: Properties of BYOK Encryption description
	Encryption *Encryption_Status `json:"encryption,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Identity: Properties of BYOK Identity description
	Identity *Identity_Status `json:"identity,omitempty"`

	//IsAutoInflateEnabled: Value that indicates whether AutoInflate is enabled for
	//eventhub namespace.
	IsAutoInflateEnabled *bool `json:"isAutoInflateEnabled,omitempty"`

	//KafkaEnabled: Value that indicates whether Kafka is enabled for eventhub
	//namespace.
	KafkaEnabled *bool `json:"kafkaEnabled,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//MaximumThroughputUnits: Upper limit of throughput units when AutoInflate is
	//enabled, value should be within 0 to 20 throughput units. ( '0' if
	//AutoInflateEnabled = true)
	MaximumThroughputUnits *int `json:"maximumThroughputUnits,omitempty"`

	//MetricId: Identifier for Azure Insights metrics.
	MetricId *string `json:"metricId,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections.
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Provisioning state of the Namespace.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ServiceBusEndpoint: Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint *string `json:"serviceBusEndpoint,omitempty"`

	//Sku: Properties of sku resource
	Sku *Sku_Status `json:"sku,omitempty"`

	//Status: Status of the Namespace.
	Status *string `json:"status,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	//UpdatedAt: The time the Namespace was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`

	//ZoneRedundant: Enabling this property creates a Standard Event Hubs Namespace in
	//regions supported availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EHNamespace_Status{}

// ConvertStatusFrom populates our EHNamespace_Status from the provided source
func (namespace *EHNamespace_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20211101storage.EHNamespace_Status)
	if ok {
		// Populate our instance from source
		return namespace.AssignPropertiesFromEHNamespace_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211101storage.EHNamespace_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = namespace.AssignPropertiesFromEHNamespace_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EHNamespace_Status
func (namespace *EHNamespace_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20211101storage.EHNamespace_Status)
	if ok {
		// Populate destination from our instance
		return namespace.AssignPropertiesToEHNamespace_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211101storage.EHNamespace_Status{}
	err := namespace.AssignPropertiesToEHNamespace_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &EHNamespace_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespace *EHNamespace_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EHNamespace_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespace *EHNamespace_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EHNamespace_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EHNamespace_StatusARM, got %T", armInput)
	}

	// Set property ‘AlternateName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AlternateName != nil {
			alternateName := *typedInput.Properties.AlternateName
			namespace.AlternateName = &alternateName
		}
	}

	// Set property ‘ClusterArmId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusterArmId != nil {
			clusterArmId := *typedInput.Properties.ClusterArmId
			namespace.ClusterArmId = &clusterArmId
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			namespace.CreatedAt = &createdAt
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			namespace.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			namespace.Encryption = &encryption
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		namespace.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		namespace.Identity = &identity
	}

	// Set property ‘IsAutoInflateEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsAutoInflateEnabled != nil {
			isAutoInflateEnabled := *typedInput.Properties.IsAutoInflateEnabled
			namespace.IsAutoInflateEnabled = &isAutoInflateEnabled
		}
	}

	// Set property ‘KafkaEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KafkaEnabled != nil {
			kafkaEnabled := *typedInput.Properties.KafkaEnabled
			namespace.KafkaEnabled = &kafkaEnabled
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespace.Location = &location
	}

	// Set property ‘MaximumThroughputUnits’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaximumThroughputUnits != nil {
			maximumThroughputUnits := *typedInput.Properties.MaximumThroughputUnits
			namespace.MaximumThroughputUnits = &maximumThroughputUnits
		}
	}

	// Set property ‘MetricId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MetricId != nil {
			metricId := *typedInput.Properties.MetricId
			namespace.MetricId = &metricId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		namespace.Name = &name
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			namespace.PrivateEndpointConnections = append(namespace.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			namespace.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ServiceBusEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceBusEndpoint != nil {
			serviceBusEndpoint := *typedInput.Properties.ServiceBusEndpoint
			namespace.ServiceBusEndpoint = &serviceBusEndpoint
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		namespace.Sku = &sku
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			namespace.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		namespace.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespace.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			namespace.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		namespace.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			namespace.UpdatedAt = &updatedAt
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			namespace.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromEHNamespace_Status populates our EHNamespace_Status from the provided source EHNamespace_Status
func (namespace *EHNamespace_Status) AssignPropertiesFromEHNamespace_Status(source *v1alpha1api20211101storage.EHNamespace_Status) error {

	// AlternateName
	namespace.AlternateName = genruntime.ClonePointerToString(source.AlternateName)

	// ClusterArmId
	namespace.ClusterArmId = genruntime.ClonePointerToString(source.ClusterArmId)

	// Conditions
	namespace.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedAt
	namespace.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		namespace.DisableLocalAuth = &disableLocalAuth
	} else {
		namespace.DisableLocalAuth = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryption_Status(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption_Status() to populate field Encryption")
		}
		namespace.Encryption = &encryption
	} else {
		namespace.Encryption = nil
	}

	// Id
	namespace.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity Identity_Status
		err := identity.AssignPropertiesFromIdentity_Status(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity_Status() to populate field Identity")
		}
		namespace.Identity = &identity
	} else {
		namespace.Identity = nil
	}

	// IsAutoInflateEnabled
	if source.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *source.IsAutoInflateEnabled
		namespace.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		namespace.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if source.KafkaEnabled != nil {
		kafkaEnabled := *source.KafkaEnabled
		namespace.KafkaEnabled = &kafkaEnabled
	} else {
		namespace.KafkaEnabled = nil
	}

	// Location
	namespace.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumThroughputUnits
	namespace.MaximumThroughputUnits = genruntime.ClonePointerToInt(source.MaximumThroughputUnits)

	// MetricId
	namespace.MetricId = genruntime.ClonePointerToString(source.MetricId)

	// Name
	namespace.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnection_Status_SubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnection_Status_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		namespace.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		namespace.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	namespace.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ServiceBusEndpoint
	namespace.ServiceBusEndpoint = genruntime.ClonePointerToString(source.ServiceBusEndpoint)

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_Status() to populate field Sku")
		}
		namespace.Sku = &sku
	} else {
		namespace.Sku = nil
	}

	// Status
	namespace.Status = genruntime.ClonePointerToString(source.Status)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemData_Status(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_Status() to populate field SystemData")
		}
		namespace.SystemData = &systemDatum
	} else {
		namespace.SystemData = nil
	}

	// Tags
	namespace.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	namespace.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	namespace.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		namespace.ZoneRedundant = &zoneRedundant
	} else {
		namespace.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEHNamespace_Status populates the provided destination EHNamespace_Status from our EHNamespace_Status
func (namespace *EHNamespace_Status) AssignPropertiesToEHNamespace_Status(destination *v1alpha1api20211101storage.EHNamespace_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AlternateName
	destination.AlternateName = genruntime.ClonePointerToString(namespace.AlternateName)

	// ClusterArmId
	destination.ClusterArmId = genruntime.ClonePointerToString(namespace.ClusterArmId)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(namespace.Conditions)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(namespace.CreatedAt)

	// DisableLocalAuth
	if namespace.DisableLocalAuth != nil {
		disableLocalAuth := *namespace.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Encryption
	if namespace.Encryption != nil {
		var encryption v1alpha1api20211101storage.Encryption_Status
		err := namespace.Encryption.AssignPropertiesToEncryption_Status(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption_Status() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(namespace.Id)

	// Identity
	if namespace.Identity != nil {
		var identity v1alpha1api20211101storage.Identity_Status
		err := namespace.Identity.AssignPropertiesToIdentity_Status(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity_Status() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsAutoInflateEnabled
	if namespace.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *namespace.IsAutoInflateEnabled
		destination.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		destination.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if namespace.KafkaEnabled != nil {
		kafkaEnabled := *namespace.KafkaEnabled
		destination.KafkaEnabled = &kafkaEnabled
	} else {
		destination.KafkaEnabled = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespace.Location)

	// MaximumThroughputUnits
	destination.MaximumThroughputUnits = genruntime.ClonePointerToInt(namespace.MaximumThroughputUnits)

	// MetricId
	destination.MetricId = genruntime.ClonePointerToString(namespace.MetricId)

	// Name
	destination.Name = genruntime.ClonePointerToString(namespace.Name)

	// PrivateEndpointConnections
	if namespace.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20211101storage.PrivateEndpointConnection_Status_SubResourceEmbedded, len(namespace.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range namespace.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20211101storage.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnection_Status_SubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnection_Status_SubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(namespace.ProvisioningState)

	// ServiceBusEndpoint
	destination.ServiceBusEndpoint = genruntime.ClonePointerToString(namespace.ServiceBusEndpoint)

	// Sku
	if namespace.Sku != nil {
		var sku v1alpha1api20211101storage.Sku_Status
		err := namespace.Sku.AssignPropertiesToSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Status
	destination.Status = genruntime.ClonePointerToString(namespace.Status)

	// SystemData
	if namespace.SystemData != nil {
		var systemDatum v1alpha1api20211101storage.SystemData_Status
		err := namespace.SystemData.AssignPropertiesToSystemData_Status(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_Status() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespace.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(namespace.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(namespace.UpdatedAt)

	// ZoneRedundant
	if namespace.ZoneRedundant != nil {
		zoneRedundant := *namespace.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Namespace_Spec struct {
	//AlternateName: Alternate name specified when alias and namespace names are same.
	AlternateName *string `json:"alternateName,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//ClusterArmId: Cluster ARM ID of the Namespace.
	ClusterArmId *string `json:"clusterArmId,omitempty"`

	//DisableLocalAuth: This property disables SAS authentication for the Event Hubs
	//namespace.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//Encryption: Properties of BYOK Encryption description
	Encryption *Encryption `json:"encryption,omitempty"`

	//Identity: Properties of BYOK Identity description
	Identity *Identity `json:"identity,omitempty"`

	//IsAutoInflateEnabled: Value that indicates whether AutoInflate is enabled for
	//eventhub namespace.
	IsAutoInflateEnabled *bool `json:"isAutoInflateEnabled,omitempty"`

	//KafkaEnabled: Value that indicates whether Kafka is enabled for eventhub
	//namespace.
	KafkaEnabled *bool `json:"kafkaEnabled,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//MaximumThroughputUnits: Upper limit of throughput units when AutoInflate is
	//enabled, value should be within 0 to 20 throughput units. ( '0' if
	//AutoInflateEnabled = true)
	MaximumThroughputUnits *int `json:"maximumThroughputUnits,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PrivateEndpointConnections: List of private endpoint connections.
	PrivateEndpointConnections []PrivateEndpointConnection `json:"privateEndpointConnections,omitempty"`

	//Sku: Properties of sku resource
	Sku *Sku `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//ZoneRedundant: Enabling this property creates a Standard Event Hubs Namespace in
	//regions supported availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ARMTransformer = &Namespace_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespace *Namespace_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespace == nil {
		return nil, nil
	}
	var result Namespace_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = namespace.AzureName

	// Set property ‘Identity’:
	if namespace.Identity != nil {
		identityARM, err := (*namespace.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(IdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	if namespace.Location != nil {
		location := *namespace.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if namespace.AlternateName != nil ||
		namespace.ClusterArmId != nil ||
		namespace.DisableLocalAuth != nil ||
		namespace.Encryption != nil ||
		namespace.IsAutoInflateEnabled != nil ||
		namespace.KafkaEnabled != nil ||
		namespace.MaximumThroughputUnits != nil ||
		namespace.PrivateEndpointConnections != nil ||
		namespace.ZoneRedundant != nil {
		result.Properties = &Namespace_SpecPropertiesARM{}
	}
	if namespace.AlternateName != nil {
		alternateName := *namespace.AlternateName
		result.Properties.AlternateName = &alternateName
	}
	if namespace.ClusterArmId != nil {
		clusterArmId := *namespace.ClusterArmId
		result.Properties.ClusterArmId = &clusterArmId
	}
	if namespace.DisableLocalAuth != nil {
		disableLocalAuth := *namespace.DisableLocalAuth
		result.Properties.DisableLocalAuth = &disableLocalAuth
	}
	if namespace.Encryption != nil {
		encryptionARM, err := (*namespace.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionARM)
		result.Properties.Encryption = &encryption
	}
	if namespace.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *namespace.IsAutoInflateEnabled
		result.Properties.IsAutoInflateEnabled = &isAutoInflateEnabled
	}
	if namespace.KafkaEnabled != nil {
		kafkaEnabled := *namespace.KafkaEnabled
		result.Properties.KafkaEnabled = &kafkaEnabled
	}
	if namespace.MaximumThroughputUnits != nil {
		maximumThroughputUnits := *namespace.MaximumThroughputUnits
		result.Properties.MaximumThroughputUnits = &maximumThroughputUnits
	}
	for _, item := range namespace.PrivateEndpointConnections {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PrivateEndpointConnections = append(result.Properties.PrivateEndpointConnections, itemARM.(PrivateEndpointConnectionARM))
	}
	if namespace.ZoneRedundant != nil {
		zoneRedundant := *namespace.ZoneRedundant
		result.Properties.ZoneRedundant = &zoneRedundant
	}

	// Set property ‘Sku’:
	if namespace.Sku != nil {
		skuARM, err := (*namespace.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(SkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if namespace.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range namespace.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespace *Namespace_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Namespace_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespace *Namespace_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Namespace_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Namespace_SpecARM, got %T", armInput)
	}

	// Set property ‘AlternateName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AlternateName != nil {
			alternateName := *typedInput.Properties.AlternateName
			namespace.AlternateName = &alternateName
		}
	}

	// Set property ‘AzureName’:
	namespace.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ClusterArmId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusterArmId != nil {
			clusterArmId := *typedInput.Properties.ClusterArmId
			namespace.ClusterArmId = &clusterArmId
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			namespace.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			namespace.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		namespace.Identity = &identity
	}

	// Set property ‘IsAutoInflateEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsAutoInflateEnabled != nil {
			isAutoInflateEnabled := *typedInput.Properties.IsAutoInflateEnabled
			namespace.IsAutoInflateEnabled = &isAutoInflateEnabled
		}
	}

	// Set property ‘KafkaEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KafkaEnabled != nil {
			kafkaEnabled := *typedInput.Properties.KafkaEnabled
			namespace.KafkaEnabled = &kafkaEnabled
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespace.Location = &location
	}

	// Set property ‘MaximumThroughputUnits’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaximumThroughputUnits != nil {
			maximumThroughputUnits := *typedInput.Properties.MaximumThroughputUnits
			namespace.MaximumThroughputUnits = &maximumThroughputUnits
		}
	}

	// Set property ‘Owner’:
	namespace.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			namespace.PrivateEndpointConnections = append(namespace.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		namespace.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespace.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			namespace.Tags[key] = value
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			namespace.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Namespace_Spec{}

// ConvertSpecFrom populates our Namespace_Spec from the provided source
func (namespace *Namespace_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20211101storage.Namespace_Spec)
	if ok {
		// Populate our instance from source
		return namespace.AssignPropertiesFromNamespace_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211101storage.Namespace_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = namespace.AssignPropertiesFromNamespace_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Namespace_Spec
func (namespace *Namespace_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20211101storage.Namespace_Spec)
	if ok {
		// Populate destination from our instance
		return namespace.AssignPropertiesToNamespace_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211101storage.Namespace_Spec{}
	err := namespace.AssignPropertiesToNamespace_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespace_Spec populates our Namespace_Spec from the provided source Namespace_Spec
func (namespace *Namespace_Spec) AssignPropertiesFromNamespace_Spec(source *v1alpha1api20211101storage.Namespace_Spec) error {

	// AlternateName
	namespace.AlternateName = genruntime.ClonePointerToString(source.AlternateName)

	// AzureName
	namespace.AzureName = source.AzureName

	// ClusterArmId
	namespace.ClusterArmId = genruntime.ClonePointerToString(source.ClusterArmId)

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		namespace.DisableLocalAuth = &disableLocalAuth
	} else {
		namespace.DisableLocalAuth = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption() to populate field Encryption")
		}
		namespace.Encryption = &encryption
	} else {
		namespace.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity
		err := identity.AssignPropertiesFromIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity() to populate field Identity")
		}
		namespace.Identity = &identity
	} else {
		namespace.Identity = nil
	}

	// IsAutoInflateEnabled
	if source.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *source.IsAutoInflateEnabled
		namespace.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		namespace.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if source.KafkaEnabled != nil {
		kafkaEnabled := *source.KafkaEnabled
		namespace.KafkaEnabled = &kafkaEnabled
	} else {
		namespace.KafkaEnabled = nil
	}

	// Location
	namespace.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumThroughputUnits
	namespace.MaximumThroughputUnits = genruntime.ClonePointerToInt(source.MaximumThroughputUnits)

	// Owner
	namespace.Owner = source.Owner.Copy()

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnection(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnection() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		namespace.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		namespace.PrivateEndpointConnections = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		namespace.Sku = &sku
	} else {
		namespace.Sku = nil
	}

	// Tags
	namespace.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		namespace.ZoneRedundant = &zoneRedundant
	} else {
		namespace.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespace_Spec populates the provided destination Namespace_Spec from our Namespace_Spec
func (namespace *Namespace_Spec) AssignPropertiesToNamespace_Spec(destination *v1alpha1api20211101storage.Namespace_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AlternateName
	destination.AlternateName = genruntime.ClonePointerToString(namespace.AlternateName)

	// AzureName
	destination.AzureName = namespace.AzureName

	// ClusterArmId
	destination.ClusterArmId = genruntime.ClonePointerToString(namespace.ClusterArmId)

	// DisableLocalAuth
	if namespace.DisableLocalAuth != nil {
		disableLocalAuth := *namespace.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Encryption
	if namespace.Encryption != nil {
		var encryption v1alpha1api20211101storage.Encryption
		err := namespace.Encryption.AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if namespace.Identity != nil {
		var identity v1alpha1api20211101storage.Identity
		err := namespace.Identity.AssignPropertiesToIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsAutoInflateEnabled
	if namespace.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *namespace.IsAutoInflateEnabled
		destination.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		destination.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if namespace.KafkaEnabled != nil {
		kafkaEnabled := *namespace.KafkaEnabled
		destination.KafkaEnabled = &kafkaEnabled
	} else {
		destination.KafkaEnabled = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespace.Location)

	// MaximumThroughputUnits
	destination.MaximumThroughputUnits = genruntime.ClonePointerToInt(namespace.MaximumThroughputUnits)

	// OriginalVersion
	destination.OriginalVersion = namespace.OriginalVersion()

	// Owner
	destination.Owner = namespace.Owner.Copy()

	// PrivateEndpointConnections
	if namespace.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20211101storage.PrivateEndpointConnection, len(namespace.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range namespace.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20211101storage.PrivateEndpointConnection
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnection(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnection() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// Sku
	if namespace.Sku != nil {
		var sku v1alpha1api20211101storage.Sku
		err := namespace.Sku.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespace.Tags)

	// ZoneRedundant
	if namespace.ZoneRedundant != nil {
		zoneRedundant := *namespace.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (namespace *Namespace_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (namespace *Namespace_Spec) SetAzureName(azureName string) { namespace.AzureName = azureName }

type Encryption struct {
	//KeySource: Enumerates the possible value of keySource for Encryption
	KeySource *EncryptionKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Properties of KeyVault
	KeyVaultProperties []KeyVaultProperties `json:"keyVaultProperties,omitempty"`

	//RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double
	//Encryption)
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	var result EncryptionARM

	// Set property ‘KeySource’:
	if encryption.KeySource != nil {
		keySource := *encryption.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range encryption.KeyVaultProperties {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.KeyVaultProperties = append(result.KeyVaultProperties, itemARM.(KeyVaultPropertiesARM))
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		result.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range typedInput.KeyVaultProperties {
		var item1 KeyVaultProperties
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		encryption.KeyVaultProperties = append(encryption.KeyVaultProperties, item1)
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption populates our Encryption from the provided source Encryption
func (encryption *Encryption) AssignPropertiesFromEncryption(source *v1alpha1api20211101storage.Encryption) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]KeyVaultProperties, len(source.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range source.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty KeyVaultProperties
			err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties(&keyVaultPropertyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		encryption.KeyVaultProperties = keyVaultPropertyList
	} else {
		encryption.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption populates the provided destination Encryption from our Encryption
func (encryption *Encryption) AssignPropertiesToEncryption(destination *v1alpha1api20211101storage.Encryption) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if encryption.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]v1alpha1api20211101storage.KeyVaultProperties, len(encryption.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range encryption.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty v1alpha1api20211101storage.KeyVaultProperties
			err := keyVaultPropertyItem.AssignPropertiesToKeyVaultProperties(&keyVaultProperty)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		destination.KeyVaultProperties = keyVaultPropertyList
	} else {
		destination.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Encryption_Status struct {
	//KeySource: Enumerates the possible value of keySource for Encryption
	KeySource *string `json:"keySource,omitempty"`

	//KeyVaultProperties: Properties of KeyVault
	KeyVaultProperties []KeyVaultProperties_Status `json:"keyVaultProperties,omitempty"`

	//RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double
	//Encryption)
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range typedInput.KeyVaultProperties {
		var item1 KeyVaultProperties_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		encryption.KeyVaultProperties = append(encryption.KeyVaultProperties, item1)
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption_Status populates our Encryption_Status from the provided source Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesFromEncryption_Status(source *v1alpha1api20211101storage.Encryption_Status) error {

	// KeySource
	encryption.KeySource = genruntime.ClonePointerToString(source.KeySource)

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]KeyVaultProperties_Status, len(source.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range source.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty KeyVaultProperties_Status
			err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties_Status(&keyVaultPropertyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties_Status() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		encryption.KeyVaultProperties = keyVaultPropertyList
	} else {
		encryption.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption_Status populates the provided destination Encryption_Status from our Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesToEncryption_Status(destination *v1alpha1api20211101storage.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	destination.KeySource = genruntime.ClonePointerToString(encryption.KeySource)

	// KeyVaultProperties
	if encryption.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]v1alpha1api20211101storage.KeyVaultProperties_Status, len(encryption.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range encryption.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty v1alpha1api20211101storage.KeyVaultProperties_Status
			err := keyVaultPropertyItem.AssignPropertiesToKeyVaultProperties_Status(&keyVaultProperty)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties_Status() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		destination.KeyVaultProperties = keyVaultPropertyList
	} else {
		destination.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Identity struct {
	//Type: Type of managed service identity.
	Type *IdentityType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Identity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result IdentityARM

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentity populates our Identity from the provided source Identity
func (identity *Identity) AssignPropertiesFromIdentity(source *v1alpha1api20211101storage.Identity) error {

	// Type
	if source.Type != nil {
		typeVar := IdentityType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity populates the provided destination Identity from our Identity
func (identity *Identity) AssignPropertiesToIdentity(destination *v1alpha1api20211101storage.Identity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Identity_Status struct {
	//PrincipalId: ObjectId from the KeyVault
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: TenantId from the KeyVault
	TenantId *string `json:"tenantId,omitempty"`

	//Type: Type of managed service identity.
	Type *string `json:"type,omitempty"`

	//UserAssignedIdentities: Properties for User Assigned Identities
	UserAssignedIdentities map[string]UserAssignedIdentity_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]UserAssignedIdentity_Status)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentity_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentity_Status populates our Identity_Status from the provided source Identity_Status
func (identity *Identity_Status) AssignPropertiesFromIdentity_Status(source *v1alpha1api20211101storage.Identity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	identity.Type = genruntime.ClonePointerToString(source.Type)

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentity_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentity_Status
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentity_Status(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentity_Status() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity_Status populates the provided destination Identity_Status from our Identity_Status
func (identity *Identity_Status) AssignPropertiesToIdentity_Status(destination *v1alpha1api20211101storage.Identity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	destination.Type = genruntime.ClonePointerToString(identity.Type)

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20211101storage.UserAssignedIdentity_Status, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20211101storage.UserAssignedIdentity_Status
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentity_Status(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentity_Status() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection struct {
	//PrivateEndpoint: The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`

	//PrivateLinkServiceConnectionState: Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	//ProvisioningState: Provisioning state of the Private Endpoint Connection.
	ProvisioningState *PrivateEndpointConnectionPropertiesProvisioningState `json:"provisioningState,omitempty"`
}

var _ genruntime.ARMTransformer = &PrivateEndpointConnection{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (connection *PrivateEndpointConnection) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if connection == nil {
		return nil, nil
	}
	var result PrivateEndpointConnectionARM

	// Set property ‘Properties’:
	if connection.PrivateEndpoint != nil ||
		connection.PrivateLinkServiceConnectionState != nil ||
		connection.ProvisioningState != nil {
		result.Properties = &PrivateEndpointConnectionPropertiesARM{}
	}
	if connection.PrivateEndpoint != nil {
		privateEndpointARM, err := (*connection.PrivateEndpoint).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		privateEndpoint := privateEndpointARM.(PrivateEndpointARM)
		result.Properties.PrivateEndpoint = &privateEndpoint
	}
	if connection.PrivateLinkServiceConnectionState != nil {
		privateLinkServiceConnectionStateARM, err := (*connection.PrivateLinkServiceConnectionState).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		privateLinkServiceConnectionState := privateLinkServiceConnectionStateARM.(ConnectionStateARM)
		result.Properties.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	}
	if connection.ProvisioningState != nil {
		provisioningState := *connection.ProvisioningState
		result.Properties.ProvisioningState = &provisioningState
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (connection *PrivateEndpointConnection) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnectionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (connection *PrivateEndpointConnection) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnectionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnectionARM, got %T", armInput)
	}

	// Set property ‘PrivateEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpoint != nil {
			var privateEndpoint1 PrivateEndpoint
			err := privateEndpoint1.PopulateFromARM(owner, *typedInput.Properties.PrivateEndpoint)
			if err != nil {
				return err
			}
			privateEndpoint := privateEndpoint1
			connection.PrivateEndpoint = &privateEndpoint
		}
	}

	// Set property ‘PrivateLinkServiceConnectionState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceConnectionState != nil {
			var privateLinkServiceConnectionState1 ConnectionState
			err := privateLinkServiceConnectionState1.PopulateFromARM(owner, *typedInput.Properties.PrivateLinkServiceConnectionState)
			if err != nil {
				return err
			}
			privateLinkServiceConnectionState := privateLinkServiceConnectionState1
			connection.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			connection.ProvisioningState = &provisioningState
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnection populates our PrivateEndpointConnection from the provided source PrivateEndpointConnection
func (connection *PrivateEndpointConnection) AssignPropertiesFromPrivateEndpointConnection(source *v1alpha1api20211101storage.PrivateEndpointConnection) error {

	// PrivateEndpoint
	if source.PrivateEndpoint != nil {
		var privateEndpoint PrivateEndpoint
		err := privateEndpoint.AssignPropertiesFromPrivateEndpoint(source.PrivateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpoint() to populate field PrivateEndpoint")
		}
		connection.PrivateEndpoint = &privateEndpoint
	} else {
		connection.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if source.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState ConnectionState
		err := privateLinkServiceConnectionState.AssignPropertiesFromConnectionState(source.PrivateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromConnectionState() to populate field PrivateLinkServiceConnectionState")
		}
		connection.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		connection.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := PrivateEndpointConnectionPropertiesProvisioningState(*source.ProvisioningState)
		connection.ProvisioningState = &provisioningState
	} else {
		connection.ProvisioningState = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnection populates the provided destination PrivateEndpointConnection from our PrivateEndpointConnection
func (connection *PrivateEndpointConnection) AssignPropertiesToPrivateEndpointConnection(destination *v1alpha1api20211101storage.PrivateEndpointConnection) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrivateEndpoint
	if connection.PrivateEndpoint != nil {
		var privateEndpoint v1alpha1api20211101storage.PrivateEndpoint
		err := connection.PrivateEndpoint.AssignPropertiesToPrivateEndpoint(&privateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpoint() to populate field PrivateEndpoint")
		}
		destination.PrivateEndpoint = &privateEndpoint
	} else {
		destination.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if connection.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState v1alpha1api20211101storage.ConnectionState
		err := connection.PrivateLinkServiceConnectionState.AssignPropertiesToConnectionState(&privateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToConnectionState() to populate field PrivateLinkServiceConnectionState")
		}
		destination.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		destination.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if connection.ProvisioningState != nil {
		provisioningState := string(*connection.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		embedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnection_Status_SubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnection_Status_SubResourceEmbedded(source *v1alpha1api20211101storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemData_Status(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_Status() to populate field SystemData")
		}
		embedded.SystemData = &systemDatum
	} else {
		embedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnection_Status_SubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnection_Status_SubResourceEmbedded(destination *v1alpha1api20211101storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// SystemData
	if embedded.SystemData != nil {
		var systemDatum v1alpha1api20211101storage.SystemData_Status
		err := embedded.SystemData.AssignPropertiesToSystemData_Status(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_Status() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku struct {
	// +kubebuilder:validation:Minimum=0
	//Capacity: The Event Hubs throughput units for Basic or Standard tiers, where
	//value should be 0 to 20 throughput units. The Event Hubs premium units for
	//Premium tier, where value should be 0 to 10 premium units.
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of this SKU.
	Name SkuName `json:"name"`

	//Tier: The billing tier of this particular SKU.
	Tier *SkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Capacity’:
	if sku.Capacity != nil {
		capacity := *sku.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Name’:
	result.Name = sku.Name

	// Set property ‘Tier’:
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20211101storage.Sku) error {

	// Capacity
	if source.Capacity != nil {
		capacity := *source.Capacity
		sku.Capacity = &capacity
	} else {
		sku.Capacity = nil
	}

	// Name
	if source.Name != nil {
		sku.Name = SkuName(*source.Name)
	} else {
		sku.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := SkuTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20211101storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	if sku.Capacity != nil {
		capacity := *sku.Capacity
		destination.Capacity = &capacity
	} else {
		destination.Capacity = nil
	}

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	//Capacity: The Event Hubs throughput units for Basic or Standard tiers, where
	//value should be 0 to 20 throughput units. The Event Hubs premium units for
	//Premium tier, where value should be 0 to 10 premium units.
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of this SKU.
	Name string `json:"name"`

	//Tier: The billing tier of this particular SKU.
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku_Status populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSku_Status(source *v1alpha1api20211101storage.Sku_Status) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	sku.Name = genruntime.GetOptionalStringValue(source.Name)

	// Tier
	sku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToSku_Status populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSku_Status(destination *v1alpha1api20211101storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Name
	name := sku.Name
	destination.Name = &name

	// Tier
	destination.Tier = genruntime.ClonePointerToString(sku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	//CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	//CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedByType: The type of identity that created the resource.
	CreatedByType *string `json:"createdByType,omitempty"`

	//LastModifiedAt: The type of identity that last modified the resource.
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	//LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *string `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemData_Status populates our SystemData_Status from the provided source SystemData_Status
func (data *SystemData_Status) AssignPropertiesFromSystemData_Status(source *v1alpha1api20211101storage.SystemData_Status) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	data.CreatedByType = genruntime.ClonePointerToString(source.CreatedByType)

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	data.LastModifiedByType = genruntime.ClonePointerToString(source.LastModifiedByType)

	// No error
	return nil
}

// AssignPropertiesToSystemData_Status populates the provided destination SystemData_Status from our SystemData_Status
func (data *SystemData_Status) AssignPropertiesToSystemData_Status(destination *v1alpha1api20211101storage.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	destination.CreatedByType = genruntime.ClonePointerToString(data.CreatedByType)

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	destination.LastModifiedByType = genruntime.ClonePointerToString(data.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ConnectionState struct {
	//Description: Description of the connection state.
	Description *string `json:"description,omitempty"`

	//Status: Status of the connection.
	Status *ConnectionStateStatus `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &ConnectionState{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (state *ConnectionState) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if state == nil {
		return nil, nil
	}
	var result ConnectionStateARM

	// Set property ‘Description’:
	if state.Description != nil {
		description := *state.Description
		result.Description = &description
	}

	// Set property ‘Status’:
	if state.Status != nil {
		status := *state.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (state *ConnectionState) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConnectionStateARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (state *ConnectionState) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConnectionStateARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConnectionStateARM, got %T", armInput)
	}

	// Set property ‘Description’:
	if typedInput.Description != nil {
		description := *typedInput.Description
		state.Description = &description
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		state.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromConnectionState populates our ConnectionState from the provided source ConnectionState
func (state *ConnectionState) AssignPropertiesFromConnectionState(source *v1alpha1api20211101storage.ConnectionState) error {

	// Description
	state.Description = genruntime.ClonePointerToString(source.Description)

	// Status
	if source.Status != nil {
		status := ConnectionStateStatus(*source.Status)
		state.Status = &status
	} else {
		state.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConnectionState populates the provided destination ConnectionState from our ConnectionState
func (state *ConnectionState) AssignPropertiesToConnectionState(destination *v1alpha1api20211101storage.ConnectionState) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Description
	destination.Description = genruntime.ClonePointerToString(state.Description)

	// Status
	if state.Status != nil {
		status := string(*state.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.KeyVault"}
type EncryptionKeySource string

const EncryptionKeySourceMicrosoftKeyVault = EncryptionKeySource("Microsoft.KeyVault")

type KeyVaultProperties struct {
	Identity *UserAssignedIdentityProperties `json:"identity,omitempty"`

	//KeyName: Name of the Key from KeyVault
	KeyName *string `json:"keyName,omitempty"`

	//KeyVaultUri: Uri of KeyVault
	KeyVaultUri *string `json:"keyVaultUri,omitempty"`

	//KeyVersion: Key Version
	KeyVersion *string `json:"keyVersion,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result KeyVaultPropertiesARM

	// Set property ‘Identity’:
	if properties.Identity != nil {
		identityARM, err := (*properties.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(UserAssignedIdentityPropertiesARM)
		result.Identity = &identity
	}

	// Set property ‘KeyName’:
	if properties.KeyName != nil {
		keyName := *properties.KeyName
		result.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if properties.KeyVaultUri != nil {
		keyVaultUri := *properties.KeyVaultUri
		result.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if properties.KeyVersion != nil {
		keyVersion := *properties.KeyVersion
		result.KeyVersion = &keyVersion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 UserAssignedIdentityProperties
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		properties.Identity = &identity
	}

	// Set property ‘KeyName’:
	if typedInput.KeyName != nil {
		keyName := *typedInput.KeyName
		properties.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if typedInput.KeyVaultUri != nil {
		keyVaultUri := *typedInput.KeyVaultUri
		properties.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if typedInput.KeyVersion != nil {
		keyVersion := *typedInput.KeyVersion
		properties.KeyVersion = &keyVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *v1alpha1api20211101storage.KeyVaultProperties) error {

	// Identity
	if source.Identity != nil {
		var identity UserAssignedIdentityProperties
		err := identity.AssignPropertiesFromUserAssignedIdentityProperties(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityProperties() to populate field Identity")
		}
		properties.Identity = &identity
	} else {
		properties.Identity = nil
	}

	// KeyName
	properties.KeyName = genruntime.ClonePointerToString(source.KeyName)

	// KeyVaultUri
	properties.KeyVaultUri = genruntime.ClonePointerToString(source.KeyVaultUri)

	// KeyVersion
	properties.KeyVersion = genruntime.ClonePointerToString(source.KeyVersion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *v1alpha1api20211101storage.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if properties.Identity != nil {
		var identity v1alpha1api20211101storage.UserAssignedIdentityProperties
		err := properties.Identity.AssignPropertiesToUserAssignedIdentityProperties(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityProperties() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyName
	destination.KeyName = genruntime.ClonePointerToString(properties.KeyName)

	// KeyVaultUri
	destination.KeyVaultUri = genruntime.ClonePointerToString(properties.KeyVaultUri)

	// KeyVersion
	destination.KeyVersion = genruntime.ClonePointerToString(properties.KeyVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_Status struct {
	Identity *UserAssignedIdentityProperties_Status `json:"identity,omitempty"`

	//KeyName: Name of the Key from KeyVault
	KeyName *string `json:"keyName,omitempty"`

	//KeyVaultUri: Uri of KeyVault
	KeyVaultUri *string `json:"keyVaultUri,omitempty"`

	//KeyVersion: Key Version
	KeyVersion *string `json:"keyVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 UserAssignedIdentityProperties_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		properties.Identity = &identity
	}

	// Set property ‘KeyName’:
	if typedInput.KeyName != nil {
		keyName := *typedInput.KeyName
		properties.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if typedInput.KeyVaultUri != nil {
		keyVaultUri := *typedInput.KeyVaultUri
		properties.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if typedInput.KeyVersion != nil {
		keyVersion := *typedInput.KeyVersion
		properties.KeyVersion = &keyVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties_Status populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultProperties_Status(source *v1alpha1api20211101storage.KeyVaultProperties_Status) error {

	// Identity
	if source.Identity != nil {
		var identity UserAssignedIdentityProperties_Status
		err := identity.AssignPropertiesFromUserAssignedIdentityProperties_Status(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityProperties_Status() to populate field Identity")
		}
		properties.Identity = &identity
	} else {
		properties.Identity = nil
	}

	// KeyName
	properties.KeyName = genruntime.ClonePointerToString(source.KeyName)

	// KeyVaultUri
	properties.KeyVaultUri = genruntime.ClonePointerToString(source.KeyVaultUri)

	// KeyVersion
	properties.KeyVersion = genruntime.ClonePointerToString(source.KeyVersion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties_Status populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultProperties_Status(destination *v1alpha1api20211101storage.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if properties.Identity != nil {
		var identity v1alpha1api20211101storage.UserAssignedIdentityProperties_Status
		err := properties.Identity.AssignPropertiesToUserAssignedIdentityProperties_Status(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityProperties_Status() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyName
	destination.KeyName = genruntime.ClonePointerToString(properties.KeyName)

	// KeyVaultUri
	destination.KeyVaultUri = genruntime.ClonePointerToString(properties.KeyVaultUri)

	// KeyVersion
	destination.KeyVersion = genruntime.ClonePointerToString(properties.KeyVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpoint struct {
	//Id: The ARM identifier for Private Endpoint.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.ARMTransformer = &PrivateEndpoint{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (endpoint *PrivateEndpoint) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if endpoint == nil {
		return nil, nil
	}
	var result PrivateEndpointARM

	// Set property ‘Id’:
	if endpoint.Id != nil {
		id := *endpoint.Id
		result.Id = &id
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoint *PrivateEndpoint) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoint *PrivateEndpoint) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		endpoint.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpoint populates our PrivateEndpoint from the provided source PrivateEndpoint
func (endpoint *PrivateEndpoint) AssignPropertiesFromPrivateEndpoint(source *v1alpha1api20211101storage.PrivateEndpoint) error {

	// Id
	endpoint.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpoint populates the provided destination PrivateEndpoint from our PrivateEndpoint
func (endpoint *PrivateEndpoint) AssignPropertiesToPrivateEndpoint(destination *v1alpha1api20211101storage.PrivateEndpoint) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(endpoint.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Canceled","Creating","Deleting","Failed","Succeeded","Updating"}
type PrivateEndpointConnectionPropertiesProvisioningState string

const (
	PrivateEndpointConnectionPropertiesProvisioningStateCanceled  = PrivateEndpointConnectionPropertiesProvisioningState("Canceled")
	PrivateEndpointConnectionPropertiesProvisioningStateCreating  = PrivateEndpointConnectionPropertiesProvisioningState("Creating")
	PrivateEndpointConnectionPropertiesProvisioningStateDeleting  = PrivateEndpointConnectionPropertiesProvisioningState("Deleting")
	PrivateEndpointConnectionPropertiesProvisioningStateFailed    = PrivateEndpointConnectionPropertiesProvisioningState("Failed")
	PrivateEndpointConnectionPropertiesProvisioningStateSucceeded = PrivateEndpointConnectionPropertiesProvisioningState("Succeeded")
	PrivateEndpointConnectionPropertiesProvisioningStateUpdating  = PrivateEndpointConnectionPropertiesProvisioningState("Updating")
)

type UserAssignedIdentity_Status struct {
	//ClientId: Client Id of user assigned identity
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: Principal Id of user assigned identity
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *UserAssignedIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *UserAssignedIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identity.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentity_Status populates our UserAssignedIdentity_Status from the provided source UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesFromUserAssignedIdentity_Status(source *v1alpha1api20211101storage.UserAssignedIdentity_Status) error {

	// ClientId
	identity.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentity_Status populates the provided destination UserAssignedIdentity_Status from our UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesToUserAssignedIdentity_Status(destination *v1alpha1api20211101storage.UserAssignedIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identity.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Approved","Disconnected","Pending","Rejected"}
type ConnectionStateStatus string

const (
	ConnectionStateStatusApproved     = ConnectionStateStatus("Approved")
	ConnectionStateStatusDisconnected = ConnectionStateStatus("Disconnected")
	ConnectionStateStatusPending      = ConnectionStateStatus("Pending")
	ConnectionStateStatusRejected     = ConnectionStateStatus("Rejected")
)

type UserAssignedIdentityProperties struct {
	//UserAssignedIdentity: ARM ID of user Identity selected for encryption
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.ARMTransformer = &UserAssignedIdentityProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *UserAssignedIdentityProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result UserAssignedIdentityPropertiesARM

	// Set property ‘UserAssignedIdentity’:
	if properties.UserAssignedIdentity != nil {
		userAssignedIdentity := *properties.UserAssignedIdentity
		result.UserAssignedIdentity = &userAssignedIdentity
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserAssignedIdentityProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserAssignedIdentityProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentityPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityPropertiesARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		properties.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityProperties populates our UserAssignedIdentityProperties from the provided source UserAssignedIdentityProperties
func (properties *UserAssignedIdentityProperties) AssignPropertiesFromUserAssignedIdentityProperties(source *v1alpha1api20211101storage.UserAssignedIdentityProperties) error {

	// UserAssignedIdentity
	properties.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityProperties populates the provided destination UserAssignedIdentityProperties from our UserAssignedIdentityProperties
func (properties *UserAssignedIdentityProperties) AssignPropertiesToUserAssignedIdentityProperties(destination *v1alpha1api20211101storage.UserAssignedIdentityProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(properties.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UserAssignedIdentityProperties_Status struct {
	//UserAssignedIdentity: ARM ID of user Identity selected for encryption
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentityProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserAssignedIdentityProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserAssignedIdentityProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentityProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		properties.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityProperties_Status populates our UserAssignedIdentityProperties_Status from the provided source UserAssignedIdentityProperties_Status
func (properties *UserAssignedIdentityProperties_Status) AssignPropertiesFromUserAssignedIdentityProperties_Status(source *v1alpha1api20211101storage.UserAssignedIdentityProperties_Status) error {

	// UserAssignedIdentity
	properties.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityProperties_Status populates the provided destination UserAssignedIdentityProperties_Status from our UserAssignedIdentityProperties_Status
func (properties *UserAssignedIdentityProperties_Status) AssignPropertiesToUserAssignedIdentityProperties_Status(destination *v1alpha1api20211101storage.UserAssignedIdentityProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(properties.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Namespace{}, &NamespaceList{})
}
