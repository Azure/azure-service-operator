// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211101

import (
	"fmt"
	alpha20211101s "github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of Namespace. Use v1beta20211101.Namespace instead
type Namespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Namespaces_Spec    `json:"spec,omitempty"`
	Status            EHNamespace_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Namespace{}

// GetConditions returns the conditions of the resource
func (namespace *Namespace) GetConditions() conditions.Conditions {
	return namespace.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespace *Namespace) SetConditions(conditions conditions.Conditions) {
	namespace.Status.Conditions = conditions
}

var _ conversion.Convertible = &Namespace{}

// ConvertFrom populates our Namespace from the provided hub Namespace
func (namespace *Namespace) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20211101s.Namespace

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = namespace.AssignPropertiesFromNamespace(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to namespace")
	}

	return nil
}

// ConvertTo populates the provided hub Namespace from our Namespace
func (namespace *Namespace) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20211101s.Namespace
	err := namespace.AssignPropertiesToNamespace(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from namespace")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-eventhub-azure-com-v1alpha1api20211101-namespace,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventhub.azure.com,resources=namespaces,verbs=create;update,versions=v1alpha1api20211101,name=default.v1alpha1api20211101.namespaces.eventhub.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Namespace{}

// Default applies defaults to the Namespace resource
func (namespace *Namespace) Default() {
	namespace.defaultImpl()
	var temp interface{} = namespace
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (namespace *Namespace) defaultAzureName() {
	if namespace.Spec.AzureName == "" {
		namespace.Spec.AzureName = namespace.Name
	}
}

// defaultImpl applies the code generated defaults to the Namespace resource
func (namespace *Namespace) defaultImpl() { namespace.defaultAzureName() }

var _ genruntime.KubernetesResource = &Namespace{}

// AzureName returns the Azure name of the resource
func (namespace *Namespace) AzureName() string {
	return namespace.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (namespace Namespace) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (namespace *Namespace) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (namespace *Namespace) GetSpec() genruntime.ConvertibleSpec {
	return &namespace.Spec
}

// GetStatus returns the status of this resource
func (namespace *Namespace) GetStatus() genruntime.ConvertibleStatus {
	return &namespace.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventHub/namespaces"
func (namespace *Namespace) GetType() string {
	return "Microsoft.EventHub/namespaces"
}

// NewEmptyStatus returns a new empty (blank) status
func (namespace *Namespace) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EHNamespace_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespace *Namespace) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespace.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  namespace.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespace *Namespace) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EHNamespace_Status); ok {
		namespace.Status = *st
		return nil
	}

	// Convert status to required version
	var st EHNamespace_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespace.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-eventhub-azure-com-v1alpha1api20211101-namespace,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=eventhub.azure.com,resources=namespaces,verbs=create;update,versions=v1alpha1api20211101,name=validate.v1alpha1api20211101.namespaces.eventhub.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Namespace{}

// ValidateCreate validates the creation of the resource
func (namespace *Namespace) ValidateCreate() error {
	validations := namespace.createValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (namespace *Namespace) ValidateDelete() error {
	validations := namespace.deleteValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (namespace *Namespace) ValidateUpdate(old runtime.Object) error {
	validations := namespace.updateValidations()
	var temp interface{} = namespace
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (namespace *Namespace) createValidations() []func() error {
	return []func() error{namespace.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (namespace *Namespace) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (namespace *Namespace) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return namespace.validateResourceReferences()
		},
		namespace.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (namespace *Namespace) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&namespace.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (namespace *Namespace) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Namespace)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, namespace)
}

// AssignPropertiesFromNamespace populates our Namespace from the provided source Namespace
func (namespace *Namespace) AssignPropertiesFromNamespace(source *alpha20211101s.Namespace) error {

	// ObjectMeta
	namespace.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Namespaces_Spec
	err := spec.AssignPropertiesFromNamespacesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNamespacesSpec() to populate field Spec")
	}
	namespace.Spec = spec

	// Status
	var status EHNamespace_Status
	err = status.AssignPropertiesFromEHNamespaceStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromEHNamespaceStatus() to populate field Status")
	}
	namespace.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespace populates the provided destination Namespace from our Namespace
func (namespace *Namespace) AssignPropertiesToNamespace(destination *alpha20211101s.Namespace) error {

	// ObjectMeta
	destination.ObjectMeta = *namespace.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20211101s.Namespaces_Spec
	err := namespace.Spec.AssignPropertiesToNamespacesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNamespacesSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20211101s.EHNamespace_Status
	err = namespace.Status.AssignPropertiesToEHNamespaceStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToEHNamespaceStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespace *Namespace) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespace.Spec.OriginalVersion(),
		Kind:    "Namespace",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of Namespace. Use v1beta20211101.Namespace instead
type NamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Namespace `json:"items"`
}

// Deprecated version of APIVersion. Use v1beta20211101.APIVersion instead
// +kubebuilder:validation:Enum={"2021-11-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2021-11-01")

// Deprecated version of EHNamespace_Status. Use v1beta20211101.EHNamespace_Status instead
type EHNamespace_Status struct {
	AlternateName *string `json:"alternateName,omitempty"`
	ClusterArmId  *string `json:"clusterArmId,omitempty"`

	// Conditions: The observed state of the resource
	Conditions                 []conditions.Condition                                 `json:"conditions,omitempty"`
	CreatedAt                  *string                                                `json:"createdAt,omitempty"`
	DisableLocalAuth           *bool                                                  `json:"disableLocalAuth,omitempty"`
	Encryption                 *Encryption_Status                                     `json:"encryption,omitempty"`
	Id                         *string                                                `json:"id,omitempty"`
	Identity                   *Identity_Status                                       `json:"identity,omitempty"`
	IsAutoInflateEnabled       *bool                                                  `json:"isAutoInflateEnabled,omitempty"`
	KafkaEnabled               *bool                                                  `json:"kafkaEnabled,omitempty"`
	Location                   *string                                                `json:"location,omitempty"`
	MaximumThroughputUnits     *int                                                   `json:"maximumThroughputUnits,omitempty"`
	MetricId                   *string                                                `json:"metricId,omitempty"`
	Name                       *string                                                `json:"name,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	ProvisioningState          *string                                                `json:"provisioningState,omitempty"`
	ServiceBusEndpoint         *string                                                `json:"serviceBusEndpoint,omitempty"`
	Sku                        *Sku_Status                                            `json:"sku,omitempty"`
	Status                     *string                                                `json:"status,omitempty"`
	SystemData                 *SystemData_Status                                     `json:"systemData,omitempty"`
	Tags                       map[string]string                                      `json:"tags,omitempty"`
	Type                       *string                                                `json:"type,omitempty"`
	UpdatedAt                  *string                                                `json:"updatedAt,omitempty"`
	ZoneRedundant              *bool                                                  `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EHNamespace_Status{}

// ConvertStatusFrom populates our EHNamespace_Status from the provided source
func (namespace *EHNamespace_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20211101s.EHNamespace_Status)
	if ok {
		// Populate our instance from source
		return namespace.AssignPropertiesFromEHNamespaceStatus(src)
	}

	// Convert to an intermediate form
	src = &alpha20211101s.EHNamespace_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = namespace.AssignPropertiesFromEHNamespaceStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EHNamespace_Status
func (namespace *EHNamespace_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20211101s.EHNamespace_Status)
	if ok {
		// Populate destination from our instance
		return namespace.AssignPropertiesToEHNamespaceStatus(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20211101s.EHNamespace_Status{}
	err := namespace.AssignPropertiesToEHNamespaceStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &EHNamespace_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespace *EHNamespace_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EHNamespace_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespace *EHNamespace_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EHNamespace_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EHNamespace_StatusARM, got %T", armInput)
	}

	// Set property ‘AlternateName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AlternateName != nil {
			alternateName := *typedInput.Properties.AlternateName
			namespace.AlternateName = &alternateName
		}
	}

	// Set property ‘ClusterArmId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusterArmId != nil {
			clusterArmId := *typedInput.Properties.ClusterArmId
			namespace.ClusterArmId = &clusterArmId
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			namespace.CreatedAt = &createdAt
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			namespace.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			namespace.Encryption = &encryption
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		namespace.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		namespace.Identity = &identity
	}

	// Set property ‘IsAutoInflateEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsAutoInflateEnabled != nil {
			isAutoInflateEnabled := *typedInput.Properties.IsAutoInflateEnabled
			namespace.IsAutoInflateEnabled = &isAutoInflateEnabled
		}
	}

	// Set property ‘KafkaEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KafkaEnabled != nil {
			kafkaEnabled := *typedInput.Properties.KafkaEnabled
			namespace.KafkaEnabled = &kafkaEnabled
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespace.Location = &location
	}

	// Set property ‘MaximumThroughputUnits’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaximumThroughputUnits != nil {
			maximumThroughputUnits := *typedInput.Properties.MaximumThroughputUnits
			namespace.MaximumThroughputUnits = &maximumThroughputUnits
		}
	}

	// Set property ‘MetricId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MetricId != nil {
			metricId := *typedInput.Properties.MetricId
			namespace.MetricId = &metricId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		namespace.Name = &name
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			namespace.PrivateEndpointConnections = append(namespace.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			namespace.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ServiceBusEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceBusEndpoint != nil {
			serviceBusEndpoint := *typedInput.Properties.ServiceBusEndpoint
			namespace.ServiceBusEndpoint = &serviceBusEndpoint
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		namespace.Sku = &sku
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			namespace.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		namespace.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespace.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			namespace.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		namespace.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			namespace.UpdatedAt = &updatedAt
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			namespace.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromEHNamespaceStatus populates our EHNamespace_Status from the provided source EHNamespace_Status
func (namespace *EHNamespace_Status) AssignPropertiesFromEHNamespaceStatus(source *alpha20211101s.EHNamespace_Status) error {

	// AlternateName
	namespace.AlternateName = genruntime.ClonePointerToString(source.AlternateName)

	// ClusterArmId
	namespace.ClusterArmId = genruntime.ClonePointerToString(source.ClusterArmId)

	// Conditions
	namespace.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreatedAt
	namespace.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		namespace.DisableLocalAuth = &disableLocalAuth
	} else {
		namespace.DisableLocalAuth = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryptionStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionStatus() to populate field Encryption")
		}
		namespace.Encryption = &encryption
	} else {
		namespace.Encryption = nil
	}

	// Id
	namespace.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity Identity_Status
		err := identity.AssignPropertiesFromIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentityStatus() to populate field Identity")
		}
		namespace.Identity = &identity
	} else {
		namespace.Identity = nil
	}

	// IsAutoInflateEnabled
	if source.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *source.IsAutoInflateEnabled
		namespace.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		namespace.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if source.KafkaEnabled != nil {
		kafkaEnabled := *source.KafkaEnabled
		namespace.KafkaEnabled = &kafkaEnabled
	} else {
		namespace.KafkaEnabled = nil
	}

	// Location
	namespace.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumThroughputUnits
	namespace.MaximumThroughputUnits = genruntime.ClonePointerToInt(source.MaximumThroughputUnits)

	// MetricId
	namespace.MetricId = genruntime.ClonePointerToString(source.MetricId)

	// Name
	namespace.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		namespace.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		namespace.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	namespace.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ServiceBusEndpoint
	namespace.ServiceBusEndpoint = genruntime.ClonePointerToString(source.ServiceBusEndpoint)

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuStatus() to populate field Sku")
		}
		namespace.Sku = &sku
	} else {
		namespace.Sku = nil
	}

	// Status
	namespace.Status = genruntime.ClonePointerToString(source.Status)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		namespace.SystemData = &systemDatum
	} else {
		namespace.SystemData = nil
	}

	// Tags
	namespace.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	namespace.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	namespace.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		namespace.ZoneRedundant = &zoneRedundant
	} else {
		namespace.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEHNamespaceStatus populates the provided destination EHNamespace_Status from our EHNamespace_Status
func (namespace *EHNamespace_Status) AssignPropertiesToEHNamespaceStatus(destination *alpha20211101s.EHNamespace_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AlternateName
	destination.AlternateName = genruntime.ClonePointerToString(namespace.AlternateName)

	// ClusterArmId
	destination.ClusterArmId = genruntime.ClonePointerToString(namespace.ClusterArmId)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(namespace.Conditions)

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(namespace.CreatedAt)

	// DisableLocalAuth
	if namespace.DisableLocalAuth != nil {
		disableLocalAuth := *namespace.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Encryption
	if namespace.Encryption != nil {
		var encryption alpha20211101s.Encryption_Status
		err := namespace.Encryption.AssignPropertiesToEncryptionStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(namespace.Id)

	// Identity
	if namespace.Identity != nil {
		var identity alpha20211101s.Identity_Status
		err := namespace.Identity.AssignPropertiesToIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsAutoInflateEnabled
	if namespace.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *namespace.IsAutoInflateEnabled
		destination.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		destination.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if namespace.KafkaEnabled != nil {
		kafkaEnabled := *namespace.KafkaEnabled
		destination.KafkaEnabled = &kafkaEnabled
	} else {
		destination.KafkaEnabled = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespace.Location)

	// MaximumThroughputUnits
	destination.MaximumThroughputUnits = genruntime.ClonePointerToInt(namespace.MaximumThroughputUnits)

	// MetricId
	destination.MetricId = genruntime.ClonePointerToString(namespace.MetricId)

	// Name
	destination.Name = genruntime.ClonePointerToString(namespace.Name)

	// PrivateEndpointConnections
	if namespace.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]alpha20211101s.PrivateEndpointConnection_Status_SubResourceEmbedded, len(namespace.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range namespace.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection alpha20211101s.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(namespace.ProvisioningState)

	// ServiceBusEndpoint
	destination.ServiceBusEndpoint = genruntime.ClonePointerToString(namespace.ServiceBusEndpoint)

	// Sku
	if namespace.Sku != nil {
		var sku alpha20211101s.Sku_Status
		err := namespace.Sku.AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Status
	destination.Status = genruntime.ClonePointerToString(namespace.Status)

	// SystemData
	if namespace.SystemData != nil {
		var systemDatum alpha20211101s.SystemData_Status
		err := namespace.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespace.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(namespace.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(namespace.UpdatedAt)

	// ZoneRedundant
	if namespace.ZoneRedundant != nil {
		zoneRedundant := *namespace.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Namespaces_Spec struct {
	AlternateName *string `json:"alternateName,omitempty"`

	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=6
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName              string                        `json:"azureName,omitempty"`
	ClusterArmReference    *genruntime.ResourceReference `armReference:"ClusterArmId" json:"clusterArmReference,omitempty"`
	DisableLocalAuth       *bool                         `json:"disableLocalAuth,omitempty"`
	Encryption             *Encryption                   `json:"encryption,omitempty"`
	Identity               *Identity                     `json:"identity,omitempty"`
	IsAutoInflateEnabled   *bool                         `json:"isAutoInflateEnabled,omitempty"`
	KafkaEnabled           *bool                         `json:"kafkaEnabled,omitempty"`
	Location               *string                       `json:"location,omitempty"`
	MaximumThroughputUnits *int                          `json:"maximumThroughputUnits,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                      *genruntime.KnownResourceReference                      `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PrivateEndpointConnections []Namespaces_Spec_Properties_PrivateEndpointConnections `json:"privateEndpointConnections,omitempty"`
	Sku                        *Sku                                                    `json:"sku,omitempty"`
	Tags                       map[string]string                                       `json:"tags,omitempty"`
	ZoneRedundant              *bool                                                   `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ARMTransformer = &Namespaces_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespaces *Namespaces_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespaces == nil {
		return nil, nil
	}
	result := &Namespaces_SpecARM{}

	// Set property ‘Identity’:
	if namespaces.Identity != nil {
		identityARM, err := (*namespaces.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*IdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	if namespaces.Location != nil {
		location := *namespaces.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if namespaces.AlternateName != nil ||
		namespaces.ClusterArmReference != nil ||
		namespaces.DisableLocalAuth != nil ||
		namespaces.Encryption != nil ||
		namespaces.IsAutoInflateEnabled != nil ||
		namespaces.KafkaEnabled != nil ||
		namespaces.MaximumThroughputUnits != nil ||
		namespaces.PrivateEndpointConnections != nil ||
		namespaces.ZoneRedundant != nil {
		result.Properties = &Namespaces_Spec_PropertiesARM{}
	}
	if namespaces.AlternateName != nil {
		alternateName := *namespaces.AlternateName
		result.Properties.AlternateName = &alternateName
	}
	if namespaces.ClusterArmReference != nil {
		clusterArmIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*namespaces.ClusterArmReference)
		if err != nil {
			return nil, err
		}
		clusterArmId := clusterArmIdARMID
		result.Properties.ClusterArmId = &clusterArmId
	}
	if namespaces.DisableLocalAuth != nil {
		disableLocalAuth := *namespaces.DisableLocalAuth
		result.Properties.DisableLocalAuth = &disableLocalAuth
	}
	if namespaces.Encryption != nil {
		encryptionARM, err := (*namespaces.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := *encryptionARM.(*EncryptionARM)
		result.Properties.Encryption = &encryption
	}
	if namespaces.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *namespaces.IsAutoInflateEnabled
		result.Properties.IsAutoInflateEnabled = &isAutoInflateEnabled
	}
	if namespaces.KafkaEnabled != nil {
		kafkaEnabled := *namespaces.KafkaEnabled
		result.Properties.KafkaEnabled = &kafkaEnabled
	}
	if namespaces.MaximumThroughputUnits != nil {
		maximumThroughputUnits := *namespaces.MaximumThroughputUnits
		result.Properties.MaximumThroughputUnits = &maximumThroughputUnits
	}
	for _, item := range namespaces.PrivateEndpointConnections {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PrivateEndpointConnections = append(result.Properties.PrivateEndpointConnections, *itemARM.(*Namespaces_Spec_Properties_PrivateEndpointConnectionsARM))
	}
	if namespaces.ZoneRedundant != nil {
		zoneRedundant := *namespaces.ZoneRedundant
		result.Properties.ZoneRedundant = &zoneRedundant
	}

	// Set property ‘Sku’:
	if namespaces.Sku != nil {
		skuARM, err := (*namespaces.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*SkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if namespaces.Tags != nil {
		result.Tags = make(map[string]string, len(namespaces.Tags))
		for key, value := range namespaces.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespaces *Namespaces_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Namespaces_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespaces *Namespaces_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Namespaces_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Namespaces_SpecARM, got %T", armInput)
	}

	// Set property ‘AlternateName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AlternateName != nil {
			alternateName := *typedInput.Properties.AlternateName
			namespaces.AlternateName = &alternateName
		}
	}

	// Set property ‘AzureName’:
	namespaces.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property ‘ClusterArmReference’

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			namespaces.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			namespaces.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		namespaces.Identity = &identity
	}

	// Set property ‘IsAutoInflateEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsAutoInflateEnabled != nil {
			isAutoInflateEnabled := *typedInput.Properties.IsAutoInflateEnabled
			namespaces.IsAutoInflateEnabled = &isAutoInflateEnabled
		}
	}

	// Set property ‘KafkaEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KafkaEnabled != nil {
			kafkaEnabled := *typedInput.Properties.KafkaEnabled
			namespaces.KafkaEnabled = &kafkaEnabled
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespaces.Location = &location
	}

	// Set property ‘MaximumThroughputUnits’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaximumThroughputUnits != nil {
			maximumThroughputUnits := *typedInput.Properties.MaximumThroughputUnits
			namespaces.MaximumThroughputUnits = &maximumThroughputUnits
		}
	}

	// Set property ‘Owner’:
	namespaces.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 Namespaces_Spec_Properties_PrivateEndpointConnections
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			namespaces.PrivateEndpointConnections = append(namespaces.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		namespaces.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespaces.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			namespaces.Tags[key] = value
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			namespaces.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Namespaces_Spec{}

// ConvertSpecFrom populates our Namespaces_Spec from the provided source
func (namespaces *Namespaces_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20211101s.Namespaces_Spec)
	if ok {
		// Populate our instance from source
		return namespaces.AssignPropertiesFromNamespacesSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20211101s.Namespaces_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = namespaces.AssignPropertiesFromNamespacesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Namespaces_Spec
func (namespaces *Namespaces_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20211101s.Namespaces_Spec)
	if ok {
		// Populate destination from our instance
		return namespaces.AssignPropertiesToNamespacesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20211101s.Namespaces_Spec{}
	err := namespaces.AssignPropertiesToNamespacesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesSpec populates our Namespaces_Spec from the provided source Namespaces_Spec
func (namespaces *Namespaces_Spec) AssignPropertiesFromNamespacesSpec(source *alpha20211101s.Namespaces_Spec) error {

	// AlternateName
	namespaces.AlternateName = genruntime.ClonePointerToString(source.AlternateName)

	// AzureName
	namespaces.AzureName = source.AzureName

	// ClusterArmReference
	if source.ClusterArmReference != nil {
		clusterArmReference := source.ClusterArmReference.Copy()
		namespaces.ClusterArmReference = &clusterArmReference
	} else {
		namespaces.ClusterArmReference = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		namespaces.DisableLocalAuth = &disableLocalAuth
	} else {
		namespaces.DisableLocalAuth = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption() to populate field Encryption")
		}
		namespaces.Encryption = &encryption
	} else {
		namespaces.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity
		err := identity.AssignPropertiesFromIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity() to populate field Identity")
		}
		namespaces.Identity = &identity
	} else {
		namespaces.Identity = nil
	}

	// IsAutoInflateEnabled
	if source.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *source.IsAutoInflateEnabled
		namespaces.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		namespaces.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if source.KafkaEnabled != nil {
		kafkaEnabled := *source.KafkaEnabled
		namespaces.KafkaEnabled = &kafkaEnabled
	} else {
		namespaces.KafkaEnabled = nil
	}

	// Location
	namespaces.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumThroughputUnits
	namespaces.MaximumThroughputUnits = genruntime.ClonePointerToInt(source.MaximumThroughputUnits)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		namespaces.Owner = &owner
	} else {
		namespaces.Owner = nil
	}

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]Namespaces_Spec_Properties_PrivateEndpointConnections, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection Namespaces_Spec_Properties_PrivateEndpointConnections
			err := privateEndpointConnection.AssignPropertiesFromNamespacesSpecPropertiesPrivateEndpointConnections(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromNamespacesSpecPropertiesPrivateEndpointConnections() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		namespaces.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		namespaces.PrivateEndpointConnections = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		namespaces.Sku = &sku
	} else {
		namespaces.Sku = nil
	}

	// Tags
	namespaces.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		namespaces.ZoneRedundant = &zoneRedundant
	} else {
		namespaces.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesSpec populates the provided destination Namespaces_Spec from our Namespaces_Spec
func (namespaces *Namespaces_Spec) AssignPropertiesToNamespacesSpec(destination *alpha20211101s.Namespaces_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AlternateName
	destination.AlternateName = genruntime.ClonePointerToString(namespaces.AlternateName)

	// AzureName
	destination.AzureName = namespaces.AzureName

	// ClusterArmReference
	if namespaces.ClusterArmReference != nil {
		clusterArmReference := namespaces.ClusterArmReference.Copy()
		destination.ClusterArmReference = &clusterArmReference
	} else {
		destination.ClusterArmReference = nil
	}

	// DisableLocalAuth
	if namespaces.DisableLocalAuth != nil {
		disableLocalAuth := *namespaces.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Encryption
	if namespaces.Encryption != nil {
		var encryption alpha20211101s.Encryption
		err := namespaces.Encryption.AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if namespaces.Identity != nil {
		var identity alpha20211101s.Identity
		err := namespaces.Identity.AssignPropertiesToIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsAutoInflateEnabled
	if namespaces.IsAutoInflateEnabled != nil {
		isAutoInflateEnabled := *namespaces.IsAutoInflateEnabled
		destination.IsAutoInflateEnabled = &isAutoInflateEnabled
	} else {
		destination.IsAutoInflateEnabled = nil
	}

	// KafkaEnabled
	if namespaces.KafkaEnabled != nil {
		kafkaEnabled := *namespaces.KafkaEnabled
		destination.KafkaEnabled = &kafkaEnabled
	} else {
		destination.KafkaEnabled = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespaces.Location)

	// MaximumThroughputUnits
	destination.MaximumThroughputUnits = genruntime.ClonePointerToInt(namespaces.MaximumThroughputUnits)

	// OriginalVersion
	destination.OriginalVersion = namespaces.OriginalVersion()

	// Owner
	if namespaces.Owner != nil {
		owner := namespaces.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PrivateEndpointConnections
	if namespaces.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]alpha20211101s.Namespaces_Spec_Properties_PrivateEndpointConnections, len(namespaces.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range namespaces.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection alpha20211101s.Namespaces_Spec_Properties_PrivateEndpointConnections
			err := privateEndpointConnectionItem.AssignPropertiesToNamespacesSpecPropertiesPrivateEndpointConnections(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToNamespacesSpecPropertiesPrivateEndpointConnections() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// Sku
	if namespaces.Sku != nil {
		var sku alpha20211101s.Sku
		err := namespaces.Sku.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespaces.Tags)

	// ZoneRedundant
	if namespaces.ZoneRedundant != nil {
		zoneRedundant := *namespaces.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (namespaces *Namespaces_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (namespaces *Namespaces_Spec) SetAzureName(azureName string) { namespaces.AzureName = azureName }

// Deprecated version of Encryption. Use v1beta20211101.Encryption instead
type Encryption struct {
	KeySource                       *EncryptionKeySource `json:"keySource,omitempty"`
	KeyVaultProperties              []KeyVaultProperties `json:"keyVaultProperties,omitempty"`
	RequireInfrastructureEncryption *bool                `json:"requireInfrastructureEncryption,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	result := &EncryptionARM{}

	// Set property ‘KeySource’:
	if encryption.KeySource != nil {
		keySource := *encryption.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range encryption.KeyVaultProperties {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.KeyVaultProperties = append(result.KeyVaultProperties, *itemARM.(*KeyVaultPropertiesARM))
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		result.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range typedInput.KeyVaultProperties {
		var item1 KeyVaultProperties
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		encryption.KeyVaultProperties = append(encryption.KeyVaultProperties, item1)
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption populates our Encryption from the provided source Encryption
func (encryption *Encryption) AssignPropertiesFromEncryption(source *alpha20211101s.Encryption) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]KeyVaultProperties, len(source.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range source.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty KeyVaultProperties
			err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties(&keyVaultPropertyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		encryption.KeyVaultProperties = keyVaultPropertyList
	} else {
		encryption.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption populates the provided destination Encryption from our Encryption
func (encryption *Encryption) AssignPropertiesToEncryption(destination *alpha20211101s.Encryption) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if encryption.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]alpha20211101s.KeyVaultProperties, len(encryption.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range encryption.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty alpha20211101s.KeyVaultProperties
			err := keyVaultPropertyItem.AssignPropertiesToKeyVaultProperties(&keyVaultProperty)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		destination.KeyVaultProperties = keyVaultPropertyList
	} else {
		destination.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Encryption_Status. Use v1beta20211101.Encryption_Status instead
type Encryption_Status struct {
	KeySource                       *EncryptionStatusKeySource  `json:"keySource,omitempty"`
	KeyVaultProperties              []KeyVaultProperties_Status `json:"keyVaultProperties,omitempty"`
	RequireInfrastructureEncryption *bool                       `json:"requireInfrastructureEncryption,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	for _, item := range typedInput.KeyVaultProperties {
		var item1 KeyVaultProperties_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		encryption.KeyVaultProperties = append(encryption.KeyVaultProperties, item1)
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionStatus populates our Encryption_Status from the provided source Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesFromEncryptionStatus(source *alpha20211101s.Encryption_Status) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionStatusKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]KeyVaultProperties_Status, len(source.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range source.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty KeyVaultProperties_Status
			err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesStatus(&keyVaultPropertyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		encryption.KeyVaultProperties = keyVaultPropertyList
	} else {
		encryption.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionStatus populates the provided destination Encryption_Status from our Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesToEncryptionStatus(destination *alpha20211101s.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if encryption.KeyVaultProperties != nil {
		keyVaultPropertyList := make([]alpha20211101s.KeyVaultProperties_Status, len(encryption.KeyVaultProperties))
		for keyVaultPropertyIndex, keyVaultPropertyItem := range encryption.KeyVaultProperties {
			// Shadow the loop variable to avoid aliasing
			keyVaultPropertyItem := keyVaultPropertyItem
			var keyVaultProperty alpha20211101s.KeyVaultProperties_Status
			err := keyVaultPropertyItem.AssignPropertiesToKeyVaultPropertiesStatus(&keyVaultProperty)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
			}
			keyVaultPropertyList[keyVaultPropertyIndex] = keyVaultProperty
		}
		destination.KeyVaultProperties = keyVaultPropertyList
	} else {
		destination.KeyVaultProperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Identity. Use v1beta20211101.Identity instead
type Identity struct {
	Type *IdentityType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Identity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &IdentityARM{}

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentity populates our Identity from the provided source Identity
func (identity *Identity) AssignPropertiesFromIdentity(source *alpha20211101s.Identity) error {

	// Type
	if source.Type != nil {
		typeVar := IdentityType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity populates the provided destination Identity from our Identity
func (identity *Identity) AssignPropertiesToIdentity(destination *alpha20211101s.Identity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Identity_Status. Use v1beta20211101.Identity_Status instead
type Identity_Status struct {
	PrincipalId            *string                                `json:"principalId,omitempty"`
	TenantId               *string                                `json:"tenantId,omitempty"`
	Type                   *IdentityStatusType                    `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentity_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]UserAssignedIdentity_Status, len(typedInput.UserAssignedIdentities))
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentity_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentityStatus populates our Identity_Status from the provided source Identity_Status
func (identity *Identity_Status) AssignPropertiesFromIdentityStatus(source *alpha20211101s.Identity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentityStatusType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentity_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentity_Status
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentityStatus(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentityStatus populates the provided destination Identity_Status from our Identity_Status
func (identity *Identity_Status) AssignPropertiesToIdentityStatus(destination *alpha20211101s.Identity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]alpha20211101s.UserAssignedIdentity_Status, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity alpha20211101s.UserAssignedIdentity_Status
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentityStatus(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Namespaces_Spec_Properties_PrivateEndpointConnections. Use v1beta20211101.Namespaces_Spec_Properties_PrivateEndpointConnections instead
type Namespaces_Spec_Properties_PrivateEndpointConnections struct {
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`
}

var _ genruntime.ARMTransformer = &Namespaces_Spec_Properties_PrivateEndpointConnections{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (connections *Namespaces_Spec_Properties_PrivateEndpointConnections) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if connections == nil {
		return nil, nil
	}
	result := &Namespaces_Spec_Properties_PrivateEndpointConnectionsARM{}

	// Set property ‘Properties’:
	if connections.PrivateEndpoint != nil {
		result.Properties = &PrivateEndpointConnectionPropertiesARM{}
	}
	if connections.PrivateEndpoint != nil {
		privateEndpointARM, err := (*connections.PrivateEndpoint).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		privateEndpoint := *privateEndpointARM.(*PrivateEndpointARM)
		result.Properties.PrivateEndpoint = &privateEndpoint
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (connections *Namespaces_Spec_Properties_PrivateEndpointConnections) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Namespaces_Spec_Properties_PrivateEndpointConnectionsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (connections *Namespaces_Spec_Properties_PrivateEndpointConnections) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Namespaces_Spec_Properties_PrivateEndpointConnectionsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Namespaces_Spec_Properties_PrivateEndpointConnectionsARM, got %T", armInput)
	}

	// Set property ‘PrivateEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpoint != nil {
			var privateEndpoint1 PrivateEndpoint
			err := privateEndpoint1.PopulateFromARM(owner, *typedInput.Properties.PrivateEndpoint)
			if err != nil {
				return err
			}
			privateEndpoint := privateEndpoint1
			connections.PrivateEndpoint = &privateEndpoint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromNamespacesSpecPropertiesPrivateEndpointConnections populates our Namespaces_Spec_Properties_PrivateEndpointConnections from the provided source Namespaces_Spec_Properties_PrivateEndpointConnections
func (connections *Namespaces_Spec_Properties_PrivateEndpointConnections) AssignPropertiesFromNamespacesSpecPropertiesPrivateEndpointConnections(source *alpha20211101s.Namespaces_Spec_Properties_PrivateEndpointConnections) error {

	// PrivateEndpoint
	if source.PrivateEndpoint != nil {
		var privateEndpoint PrivateEndpoint
		err := privateEndpoint.AssignPropertiesFromPrivateEndpoint(source.PrivateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpoint() to populate field PrivateEndpoint")
		}
		connections.PrivateEndpoint = &privateEndpoint
	} else {
		connections.PrivateEndpoint = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNamespacesSpecPropertiesPrivateEndpointConnections populates the provided destination Namespaces_Spec_Properties_PrivateEndpointConnections from our Namespaces_Spec_Properties_PrivateEndpointConnections
func (connections *Namespaces_Spec_Properties_PrivateEndpointConnections) AssignPropertiesToNamespacesSpecPropertiesPrivateEndpointConnections(destination *alpha20211101s.Namespaces_Spec_Properties_PrivateEndpointConnections) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrivateEndpoint
	if connections.PrivateEndpoint != nil {
		var privateEndpoint alpha20211101s.PrivateEndpoint
		err := connections.PrivateEndpoint.AssignPropertiesToPrivateEndpoint(&privateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpoint() to populate field PrivateEndpoint")
		}
		destination.PrivateEndpoint = &privateEndpoint
	} else {
		destination.PrivateEndpoint = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateEndpointConnection_Status_SubResourceEmbedded. Use v1beta20211101.PrivateEndpointConnection_Status_SubResourceEmbedded instead
type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	Id         *string            `json:"id,omitempty"`
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		embedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *alpha20211101s.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		embedded.SystemData = &systemDatum
	} else {
		embedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *alpha20211101s.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// SystemData
	if embedded.SystemData != nil {
		var systemDatum alpha20211101s.SystemData_Status
		err := embedded.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku. Use v1beta20211101.Sku instead
type Sku struct {
	// +kubebuilder:validation:Minimum=0
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	Name *SkuName `json:"name,omitempty"`
	Tier *SkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	result := &SkuARM{}

	// Set property ‘Capacity’:
	if sku.Capacity != nil {
		capacity := *sku.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Name’:
	if sku.Name != nil {
		name := *sku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *alpha20211101s.Sku) error {

	// Capacity
	if source.Capacity != nil {
		capacity := *source.Capacity
		sku.Capacity = &capacity
	} else {
		sku.Capacity = nil
	}

	// Name
	if source.Name != nil {
		name := SkuName(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := SkuTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *alpha20211101s.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	if sku.Capacity != nil {
		capacity := *sku.Capacity
		destination.Capacity = &capacity
	} else {
		destination.Capacity = nil
	}

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku_Status. Use v1beta20211101.Sku_Status instead
type Sku_Status struct {
	Capacity *int           `json:"capacity,omitempty"`
	Name     *SkuStatusName `json:"name,omitempty"`
	Tier     *SkuStatusTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSkuStatus(source *alpha20211101s.Sku_Status) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		name := SkuStatusName(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := SkuStatusTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSkuStatus(destination *alpha20211101s.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SystemData_Status. Use v1beta20211101.SystemData_Status instead
type SystemData_Status struct {
	CreatedAt          *string                             `json:"createdAt,omitempty"`
	CreatedBy          *string                             `json:"createdBy,omitempty"`
	CreatedByType      *SystemDataStatusCreatedByType      `json:"createdByType,omitempty"`
	LastModifiedAt     *string                             `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                             `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *SystemDataStatusLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (data *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *alpha20211101s.SystemData_Status) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataStatusCreatedByType(*source.CreatedByType)
		data.CreatedByType = &createdByType
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataStatusLastModifiedByType(*source.LastModifiedByType)
		data.LastModifiedByType = &lastModifiedByType
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (data *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *alpha20211101s.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionKeySource. Use v1beta20211101.EncryptionKeySource instead
// +kubebuilder:validation:Enum={"Microsoft.KeyVault"}
type EncryptionKeySource string

const EncryptionKeySource_MicrosoftKeyVault = EncryptionKeySource("Microsoft.KeyVault")

// Deprecated version of KeyVaultProperties. Use v1beta20211101.KeyVaultProperties instead
type KeyVaultProperties struct {
	Identity    *UserAssignedIdentityProperties `json:"identity,omitempty"`
	KeyName     *string                         `json:"keyName,omitempty"`
	KeyVaultUri *string                         `json:"keyVaultUri,omitempty"`
	KeyVersion  *string                         `json:"keyVersion,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &KeyVaultPropertiesARM{}

	// Set property ‘Identity’:
	if properties.Identity != nil {
		identityARM, err := (*properties.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*UserAssignedIdentityPropertiesARM)
		result.Identity = &identity
	}

	// Set property ‘KeyName’:
	if properties.KeyName != nil {
		keyName := *properties.KeyName
		result.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if properties.KeyVaultUri != nil {
		keyVaultUri := *properties.KeyVaultUri
		result.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if properties.KeyVersion != nil {
		keyVersion := *properties.KeyVersion
		result.KeyVersion = &keyVersion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 UserAssignedIdentityProperties
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		properties.Identity = &identity
	}

	// Set property ‘KeyName’:
	if typedInput.KeyName != nil {
		keyName := *typedInput.KeyName
		properties.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if typedInput.KeyVaultUri != nil {
		keyVaultUri := *typedInput.KeyVaultUri
		properties.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if typedInput.KeyVersion != nil {
		keyVersion := *typedInput.KeyVersion
		properties.KeyVersion = &keyVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *alpha20211101s.KeyVaultProperties) error {

	// Identity
	if source.Identity != nil {
		var identity UserAssignedIdentityProperties
		err := identity.AssignPropertiesFromUserAssignedIdentityProperties(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityProperties() to populate field Identity")
		}
		properties.Identity = &identity
	} else {
		properties.Identity = nil
	}

	// KeyName
	properties.KeyName = genruntime.ClonePointerToString(source.KeyName)

	// KeyVaultUri
	properties.KeyVaultUri = genruntime.ClonePointerToString(source.KeyVaultUri)

	// KeyVersion
	properties.KeyVersion = genruntime.ClonePointerToString(source.KeyVersion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *alpha20211101s.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if properties.Identity != nil {
		var identity alpha20211101s.UserAssignedIdentityProperties
		err := properties.Identity.AssignPropertiesToUserAssignedIdentityProperties(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityProperties() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyName
	destination.KeyName = genruntime.ClonePointerToString(properties.KeyName)

	// KeyVaultUri
	destination.KeyVaultUri = genruntime.ClonePointerToString(properties.KeyVaultUri)

	// KeyVersion
	destination.KeyVersion = genruntime.ClonePointerToString(properties.KeyVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultProperties_Status. Use v1beta20211101.KeyVaultProperties_Status instead
type KeyVaultProperties_Status struct {
	Identity    *UserAssignedIdentityProperties_Status `json:"identity,omitempty"`
	KeyName     *string                                `json:"keyName,omitempty"`
	KeyVaultUri *string                                `json:"keyVaultUri,omitempty"`
	KeyVersion  *string                                `json:"keyVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 UserAssignedIdentityProperties_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		properties.Identity = &identity
	}

	// Set property ‘KeyName’:
	if typedInput.KeyName != nil {
		keyName := *typedInput.KeyName
		properties.KeyName = &keyName
	}

	// Set property ‘KeyVaultUri’:
	if typedInput.KeyVaultUri != nil {
		keyVaultUri := *typedInput.KeyVaultUri
		properties.KeyVaultUri = &keyVaultUri
	}

	// Set property ‘KeyVersion’:
	if typedInput.KeyVersion != nil {
		keyVersion := *typedInput.KeyVersion
		properties.KeyVersion = &keyVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *alpha20211101s.KeyVaultProperties_Status) error {

	// Identity
	if source.Identity != nil {
		var identity UserAssignedIdentityProperties_Status
		err := identity.AssignPropertiesFromUserAssignedIdentityPropertiesStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityPropertiesStatus() to populate field Identity")
		}
		properties.Identity = &identity
	} else {
		properties.Identity = nil
	}

	// KeyName
	properties.KeyName = genruntime.ClonePointerToString(source.KeyName)

	// KeyVaultUri
	properties.KeyVaultUri = genruntime.ClonePointerToString(source.KeyVaultUri)

	// KeyVersion
	properties.KeyVersion = genruntime.ClonePointerToString(source.KeyVersion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *alpha20211101s.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if properties.Identity != nil {
		var identity alpha20211101s.UserAssignedIdentityProperties_Status
		err := properties.Identity.AssignPropertiesToUserAssignedIdentityPropertiesStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityPropertiesStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyName
	destination.KeyName = genruntime.ClonePointerToString(properties.KeyName)

	// KeyVaultUri
	destination.KeyVaultUri = genruntime.ClonePointerToString(properties.KeyVaultUri)

	// KeyVersion
	destination.KeyVersion = genruntime.ClonePointerToString(properties.KeyVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateEndpoint. Use v1beta20211101.PrivateEndpoint instead
type PrivateEndpoint struct {
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &PrivateEndpoint{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (endpoint *PrivateEndpoint) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if endpoint == nil {
		return nil, nil
	}
	result := &PrivateEndpointARM{}

	// Set property ‘Id’:
	if endpoint.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*endpoint.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoint *PrivateEndpoint) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoint *PrivateEndpoint) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(PrivateEndpointARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpoint populates our PrivateEndpoint from the provided source PrivateEndpoint
func (endpoint *PrivateEndpoint) AssignPropertiesFromPrivateEndpoint(source *alpha20211101s.PrivateEndpoint) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		endpoint.Reference = &reference
	} else {
		endpoint.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpoint populates the provided destination PrivateEndpoint from our PrivateEndpoint
func (endpoint *PrivateEndpoint) AssignPropertiesToPrivateEndpoint(destination *alpha20211101s.PrivateEndpoint) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if endpoint.Reference != nil {
		reference := endpoint.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UserAssignedIdentity_Status. Use v1beta20211101.UserAssignedIdentity_Status instead
type UserAssignedIdentity_Status struct {
	ClientId    *string `json:"clientId,omitempty"`
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *UserAssignedIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *UserAssignedIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identity.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityStatus populates our UserAssignedIdentity_Status from the provided source UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesFromUserAssignedIdentityStatus(source *alpha20211101s.UserAssignedIdentity_Status) error {

	// ClientId
	identity.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityStatus populates the provided destination UserAssignedIdentity_Status from our UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesToUserAssignedIdentityStatus(destination *alpha20211101s.UserAssignedIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identity.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UserAssignedIdentityProperties. Use v1beta20211101.UserAssignedIdentityProperties instead
type UserAssignedIdentityProperties struct {
	UserAssignedIdentityReference *genruntime.ResourceReference `armReference:"UserAssignedIdentity" json:"userAssignedIdentityReference,omitempty"`
}

var _ genruntime.ARMTransformer = &UserAssignedIdentityProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *UserAssignedIdentityProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &UserAssignedIdentityPropertiesARM{}

	// Set property ‘UserAssignedIdentity’:
	if properties.UserAssignedIdentityReference != nil {
		userAssignedIdentityReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.UserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		userAssignedIdentityReference := userAssignedIdentityReferenceARMID
		result.UserAssignedIdentity = &userAssignedIdentityReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserAssignedIdentityProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserAssignedIdentityProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(UserAssignedIdentityPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘UserAssignedIdentityReference’

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityProperties populates our UserAssignedIdentityProperties from the provided source UserAssignedIdentityProperties
func (properties *UserAssignedIdentityProperties) AssignPropertiesFromUserAssignedIdentityProperties(source *alpha20211101s.UserAssignedIdentityProperties) error {

	// UserAssignedIdentityReference
	if source.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := source.UserAssignedIdentityReference.Copy()
		properties.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		properties.UserAssignedIdentityReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityProperties populates the provided destination UserAssignedIdentityProperties from our UserAssignedIdentityProperties
func (properties *UserAssignedIdentityProperties) AssignPropertiesToUserAssignedIdentityProperties(destination *alpha20211101s.UserAssignedIdentityProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentityReference
	if properties.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := properties.UserAssignedIdentityReference.Copy()
		destination.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		destination.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UserAssignedIdentityProperties_Status. Use v1beta20211101.UserAssignedIdentityProperties_Status instead
type UserAssignedIdentityProperties_Status struct {
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentityProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserAssignedIdentityProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserAssignedIdentityProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentityProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		properties.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityPropertiesStatus populates our UserAssignedIdentityProperties_Status from the provided source UserAssignedIdentityProperties_Status
func (properties *UserAssignedIdentityProperties_Status) AssignPropertiesFromUserAssignedIdentityPropertiesStatus(source *alpha20211101s.UserAssignedIdentityProperties_Status) error {

	// UserAssignedIdentity
	properties.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityPropertiesStatus populates the provided destination UserAssignedIdentityProperties_Status from our UserAssignedIdentityProperties_Status
func (properties *UserAssignedIdentityProperties_Status) AssignPropertiesToUserAssignedIdentityPropertiesStatus(destination *alpha20211101s.UserAssignedIdentityProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(properties.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Namespace{}, &NamespaceList{})
}
