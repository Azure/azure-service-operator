// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220901

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccounts_FileService_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccounts_FileService_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccounts_FileService_STATUS_ARM, StorageAccounts_FileService_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccounts_FileService_STATUS_ARM runs a test to see if a specific instance of StorageAccounts_FileService_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccounts_FileService_STATUS_ARM(subject StorageAccounts_FileService_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccounts_FileService_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccounts_FileService_STATUS_ARM instances for property testing - lazily instantiated by
// StorageAccounts_FileService_STATUS_ARMGenerator()
var storageAccounts_FileService_STATUS_ARMGenerator gopter.Gen

// StorageAccounts_FileService_STATUS_ARMGenerator returns a generator of StorageAccounts_FileService_STATUS_ARM instances for property testing.
// We first initialize storageAccounts_FileService_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccounts_FileService_STATUS_ARMGenerator() gopter.Gen {
	if storageAccounts_FileService_STATUS_ARMGenerator != nil {
		return storageAccounts_FileService_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_FileService_STATUS_ARM(generators)
	storageAccounts_FileService_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_FileService_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_FileService_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccounts_FileService_STATUS_ARM(generators)
	storageAccounts_FileService_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_FileService_STATUS_ARM{}), generators)

	return storageAccounts_FileService_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccounts_FileService_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccounts_FileService_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForStorageAccounts_FileService_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccounts_FileService_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageAccounts_FileService_Properties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		SkuName_STATUS_Premium_LRS,
		SkuName_STATUS_Premium_ZRS,
		SkuName_STATUS_Standard_GRS,
		SkuName_STATUS_Standard_GZRS,
		SkuName_STATUS_Standard_LRS,
		SkuName_STATUS_Standard_RAGRS,
		SkuName_STATUS_Standard_RAGZRS,
		SkuName_STATUS_Standard_ZRS))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(Tier_STATUS_Premium, Tier_STATUS_Standard))
}

func Test_StorageAccounts_FileService_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccounts_FileService_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccounts_FileService_Properties_STATUS_ARM, StorageAccounts_FileService_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccounts_FileService_Properties_STATUS_ARM runs a test to see if a specific instance of StorageAccounts_FileService_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccounts_FileService_Properties_STATUS_ARM(subject StorageAccounts_FileService_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccounts_FileService_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccounts_FileService_Properties_STATUS_ARM instances for property testing - lazily instantiated
// by StorageAccounts_FileService_Properties_STATUS_ARMGenerator()
var storageAccounts_FileService_Properties_STATUS_ARMGenerator gopter.Gen

// StorageAccounts_FileService_Properties_STATUS_ARMGenerator returns a generator of StorageAccounts_FileService_Properties_STATUS_ARM instances for property testing.
func StorageAccounts_FileService_Properties_STATUS_ARMGenerator() gopter.Gen {
	if storageAccounts_FileService_Properties_STATUS_ARMGenerator != nil {
		return storageAccounts_FileService_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Properties_STATUS_ARM(generators)
	storageAccounts_FileService_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_FileService_Properties_STATUS_ARM{}), generators)

	return storageAccounts_FileService_Properties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(CorsRules_STATUS_ARMGenerator())
	gens["ProtocolSettings"] = gen.PtrOf(ProtocolSettings_STATUS_ARMGenerator())
	gens["ShareDeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_STATUS_ARMGenerator())
}

func Test_CorsRules_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRules_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRules_STATUS_ARM, CorsRules_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRules_STATUS_ARM runs a test to see if a specific instance of CorsRules_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRules_STATUS_ARM(subject CorsRules_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRules_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRules_STATUS_ARM instances for property testing - lazily instantiated by
// CorsRules_STATUS_ARMGenerator()
var corsRules_STATUS_ARMGenerator gopter.Gen

// CorsRules_STATUS_ARMGenerator returns a generator of CorsRules_STATUS_ARM instances for property testing.
func CorsRules_STATUS_ARMGenerator() gopter.Gen {
	if corsRules_STATUS_ARMGenerator != nil {
		return corsRules_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCorsRules_STATUS_ARM(generators)
	corsRules_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CorsRules_STATUS_ARM{}), generators)

	return corsRules_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForCorsRules_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCorsRules_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CorsRules"] = gen.SliceOf(CorsRule_STATUS_ARMGenerator())
}

func Test_DeleteRetentionPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeleteRetentionPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeleteRetentionPolicy_STATUS_ARM, DeleteRetentionPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeleteRetentionPolicy_STATUS_ARM runs a test to see if a specific instance of DeleteRetentionPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeleteRetentionPolicy_STATUS_ARM(subject DeleteRetentionPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeleteRetentionPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeleteRetentionPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// DeleteRetentionPolicy_STATUS_ARMGenerator()
var deleteRetentionPolicy_STATUS_ARMGenerator gopter.Gen

// DeleteRetentionPolicy_STATUS_ARMGenerator returns a generator of DeleteRetentionPolicy_STATUS_ARM instances for property testing.
func DeleteRetentionPolicy_STATUS_ARMGenerator() gopter.Gen {
	if deleteRetentionPolicy_STATUS_ARMGenerator != nil {
		return deleteRetentionPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_STATUS_ARM(generators)
	deleteRetentionPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeleteRetentionPolicy_STATUS_ARM{}), generators)

	return deleteRetentionPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowPermanentDelete"] = gen.PtrOf(gen.Bool())
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ProtocolSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProtocolSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProtocolSettings_STATUS_ARM, ProtocolSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProtocolSettings_STATUS_ARM runs a test to see if a specific instance of ProtocolSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProtocolSettings_STATUS_ARM(subject ProtocolSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProtocolSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProtocolSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ProtocolSettings_STATUS_ARMGenerator()
var protocolSettings_STATUS_ARMGenerator gopter.Gen

// ProtocolSettings_STATUS_ARMGenerator returns a generator of ProtocolSettings_STATUS_ARM instances for property testing.
func ProtocolSettings_STATUS_ARMGenerator() gopter.Gen {
	if protocolSettings_STATUS_ARMGenerator != nil {
		return protocolSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForProtocolSettings_STATUS_ARM(generators)
	protocolSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ProtocolSettings_STATUS_ARM{}), generators)

	return protocolSettings_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForProtocolSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProtocolSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Smb"] = gen.PtrOf(SmbSetting_STATUS_ARMGenerator())
}

func Test_CorsRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRule_STATUS_ARM, CorsRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRule_STATUS_ARM runs a test to see if a specific instance of CorsRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRule_STATUS_ARM(subject CorsRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRule_STATUS_ARM instances for property testing - lazily instantiated by
// CorsRule_STATUS_ARMGenerator()
var corsRule_STATUS_ARMGenerator gopter.Gen

// CorsRule_STATUS_ARMGenerator returns a generator of CorsRule_STATUS_ARM instances for property testing.
func CorsRule_STATUS_ARMGenerator() gopter.Gen {
	if corsRule_STATUS_ARMGenerator != nil {
		return corsRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsRule_STATUS_ARM(generators)
	corsRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CorsRule_STATUS_ARM{}), generators)

	return corsRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.SliceOf(gen.OneConstOf(
		CorsRule_AllowedMethods_STATUS_DELETE,
		CorsRule_AllowedMethods_STATUS_GET,
		CorsRule_AllowedMethods_STATUS_HEAD,
		CorsRule_AllowedMethods_STATUS_MERGE,
		CorsRule_AllowedMethods_STATUS_OPTIONS,
		CorsRule_AllowedMethods_STATUS_PATCH,
		CorsRule_AllowedMethods_STATUS_POST,
		CorsRule_AllowedMethods_STATUS_PUT))
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.PtrOf(gen.Int())
}

func Test_SmbSetting_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SmbSetting_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSmbSetting_STATUS_ARM, SmbSetting_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSmbSetting_STATUS_ARM runs a test to see if a specific instance of SmbSetting_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSmbSetting_STATUS_ARM(subject SmbSetting_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SmbSetting_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SmbSetting_STATUS_ARM instances for property testing - lazily instantiated by
// SmbSetting_STATUS_ARMGenerator()
var smbSetting_STATUS_ARMGenerator gopter.Gen

// SmbSetting_STATUS_ARMGenerator returns a generator of SmbSetting_STATUS_ARM instances for property testing.
// We first initialize smbSetting_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SmbSetting_STATUS_ARMGenerator() gopter.Gen {
	if smbSetting_STATUS_ARMGenerator != nil {
		return smbSetting_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSmbSetting_STATUS_ARM(generators)
	smbSetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SmbSetting_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSmbSetting_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSmbSetting_STATUS_ARM(generators)
	smbSetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SmbSetting_STATUS_ARM{}), generators)

	return smbSetting_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSmbSetting_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSmbSetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationMethods"] = gen.PtrOf(gen.AlphaString())
	gens["ChannelEncryption"] = gen.PtrOf(gen.AlphaString())
	gens["KerberosTicketEncryption"] = gen.PtrOf(gen.AlphaString())
	gens["Versions"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSmbSetting_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSmbSetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Multichannel"] = gen.PtrOf(Multichannel_STATUS_ARMGenerator())
}

func Test_Multichannel_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Multichannel_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMultichannel_STATUS_ARM, Multichannel_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMultichannel_STATUS_ARM runs a test to see if a specific instance of Multichannel_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMultichannel_STATUS_ARM(subject Multichannel_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Multichannel_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Multichannel_STATUS_ARM instances for property testing - lazily instantiated by
// Multichannel_STATUS_ARMGenerator()
var multichannel_STATUS_ARMGenerator gopter.Gen

// Multichannel_STATUS_ARMGenerator returns a generator of Multichannel_STATUS_ARM instances for property testing.
func Multichannel_STATUS_ARMGenerator() gopter.Gen {
	if multichannel_STATUS_ARMGenerator != nil {
		return multichannel_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMultichannel_STATUS_ARM(generators)
	multichannel_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Multichannel_STATUS_ARM{}), generators)

	return multichannel_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMultichannel_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMultichannel_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}
