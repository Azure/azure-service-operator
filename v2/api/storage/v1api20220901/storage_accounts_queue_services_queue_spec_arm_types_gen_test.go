// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220901

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_QueueProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueueProperties_ARM, QueueProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueueProperties_ARM runs a test to see if a specific instance of QueueProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueueProperties_ARM(subject QueueProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueProperties_ARM instances for property testing - lazily instantiated by
// QueueProperties_ARMGenerator()
var queueProperties_ARMGenerator gopter.Gen

// QueueProperties_ARMGenerator returns a generator of QueueProperties_ARM instances for property testing.
func QueueProperties_ARMGenerator() gopter.Gen {
	if queueProperties_ARMGenerator != nil {
		return queueProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueueProperties_ARM(generators)
	queueProperties_ARMGenerator = gen.Struct(reflect.TypeOf(QueueProperties_ARM{}), generators)

	return queueProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForQueueProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQueueProperties_ARM(gens map[string]gopter.Gen) {
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

func Test_StorageAccountsQueueServicesQueue_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueServicesQueue_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueServicesQueue_Spec_ARM, StorageAccountsQueueServicesQueue_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueServicesQueue_Spec_ARM runs a test to see if a specific instance of StorageAccountsQueueServicesQueue_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueServicesQueue_Spec_ARM(subject StorageAccountsQueueServicesQueue_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueServicesQueue_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueServicesQueue_Spec_ARM instances for property testing - lazily instantiated by
// StorageAccountsQueueServicesQueue_Spec_ARMGenerator()
var storageAccountsQueueServicesQueue_Spec_ARMGenerator gopter.Gen

// StorageAccountsQueueServicesQueue_Spec_ARMGenerator returns a generator of StorageAccountsQueueServicesQueue_Spec_ARM instances for property testing.
// We first initialize storageAccountsQueueServicesQueue_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsQueueServicesQueue_Spec_ARMGenerator() gopter.Gen {
	if storageAccountsQueueServicesQueue_Spec_ARMGenerator != nil {
		return storageAccountsQueueServicesQueue_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_Spec_ARM(generators)
	storageAccountsQueueServicesQueue_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServicesQueue_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueue_Spec_ARM(generators)
	storageAccountsQueueServicesQueue_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServicesQueue_Spec_ARM{}), generators)

	return storageAccountsQueueServicesQueue_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueue_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueue_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QueueProperties_ARMGenerator())
}
