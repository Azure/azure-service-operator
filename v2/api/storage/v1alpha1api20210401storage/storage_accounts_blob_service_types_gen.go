// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401storage

import (
	"fmt"
	v20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1beta20210401storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20210401.StorageAccountsBlobService
// Deprecated version of StorageAccountsBlobService. Use v1beta20210401.StorageAccountsBlobService instead
type StorageAccountsBlobService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_BlobService_Spec `json:"spec,omitempty"`
	Status            BlobServiceProperties_STATUS     `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsBlobService{}

// GetConditions returns the conditions of the resource
func (service *StorageAccountsBlobService) GetConditions() conditions.Conditions {
	return service.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (service *StorageAccountsBlobService) SetConditions(conditions conditions.Conditions) {
	service.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsBlobService{}

// ConvertFrom populates our StorageAccountsBlobService from the provided hub StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210401s.StorageAccountsBlobService)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccountsBlobService but received %T instead", hub)
	}

	return service.AssignProperties_From_StorageAccountsBlobService(source)
}

// ConvertTo populates the provided hub StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210401s.StorageAccountsBlobService)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccountsBlobService but received %T instead", hub)
	}

	return service.AssignProperties_To_StorageAccountsBlobService(destination)
}

var _ genruntime.KubernetesResource = &StorageAccountsBlobService{}

// AzureName returns the Azure name of the resource (always "default")
func (service *StorageAccountsBlobService) AzureName() string {
	return "default"
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (service StorageAccountsBlobService) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (service *StorageAccountsBlobService) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (service *StorageAccountsBlobService) GetSpec() genruntime.ConvertibleSpec {
	return &service.Spec
}

// GetStatus returns the status of this resource
func (service *StorageAccountsBlobService) GetStatus() genruntime.ConvertibleStatus {
	return &service.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/blobServices"
func (service *StorageAccountsBlobService) GetType() string {
	return "Microsoft.Storage/storageAccounts/blobServices"
}

// NewEmptyStatus returns a new empty (blank) status
func (service *StorageAccountsBlobService) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BlobServiceProperties_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (service *StorageAccountsBlobService) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(service.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  service.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (service *StorageAccountsBlobService) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BlobServiceProperties_STATUS); ok {
		service.Status = *st
		return nil
	}

	// Convert status to required version
	var st BlobServiceProperties_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	service.Status = st
	return nil
}

// AssignProperties_From_StorageAccountsBlobService populates our StorageAccountsBlobService from the provided source StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignProperties_From_StorageAccountsBlobService(source *v20210401s.StorageAccountsBlobService) error {

	// ObjectMeta
	service.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccounts_BlobService_Spec
	err := spec.AssignProperties_From_StorageAccounts_BlobService_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_StorageAccounts_BlobService_Spec() to populate field Spec")
	}
	service.Spec = spec

	// Status
	var status BlobServiceProperties_STATUS
	err = status.AssignProperties_From_BlobServiceProperties_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_BlobServiceProperties_STATUS() to populate field Status")
	}
	service.Status = status

	// No error
	return nil
}

// AssignProperties_To_StorageAccountsBlobService populates the provided destination StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignProperties_To_StorageAccountsBlobService(destination *v20210401s.StorageAccountsBlobService) error {

	// ObjectMeta
	destination.ObjectMeta = *service.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210401s.StorageAccounts_BlobService_Spec
	err := service.Spec.AssignProperties_To_StorageAccounts_BlobService_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_StorageAccounts_BlobService_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210401s.BlobServiceProperties_STATUS
	err = service.Status.AssignProperties_To_BlobServiceProperties_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_BlobServiceProperties_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (service *StorageAccountsBlobService) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: service.Spec.OriginalVersion,
		Kind:    "StorageAccountsBlobService",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20210401.StorageAccountsBlobService
// Deprecated version of StorageAccountsBlobService. Use v1beta20210401.StorageAccountsBlobService instead
type StorageAccountsBlobServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsBlobService `json:"items"`
}

// Storage version of v1alpha1api20210401.BlobServiceProperties_STATUS
// Deprecated version of BlobServiceProperties_STATUS. Use v1beta20210401.BlobServiceProperties_STATUS instead
type BlobServiceProperties_STATUS struct {
	AutomaticSnapshotPolicyEnabled *bool                                `json:"automaticSnapshotPolicyEnabled,omitempty"`
	ChangeFeed                     *ChangeFeed_STATUS                   `json:"changeFeed,omitempty"`
	Conditions                     []conditions.Condition               `json:"conditions,omitempty"`
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy_STATUS        `json:"containerDeleteRetentionPolicy,omitempty"`
	Cors                           *CorsRules_STATUS                    `json:"cors,omitempty"`
	DefaultServiceVersion          *string                              `json:"defaultServiceVersion,omitempty"`
	DeleteRetentionPolicy          *DeleteRetentionPolicy_STATUS        `json:"deleteRetentionPolicy,omitempty"`
	Id                             *string                              `json:"id,omitempty"`
	IsVersioningEnabled            *bool                                `json:"isVersioningEnabled,omitempty"`
	LastAccessTimeTrackingPolicy   *LastAccessTimeTrackingPolicy_STATUS `json:"lastAccessTimeTrackingPolicy,omitempty"`
	Name                           *string                              `json:"name,omitempty"`
	PropertyBag                    genruntime.PropertyBag               `json:"$propertyBag,omitempty"`
	RestorePolicy                  *RestorePolicyProperties_STATUS      `json:"restorePolicy,omitempty"`
	Sku                            *Sku_STATUS                          `json:"sku,omitempty"`
	Type                           *string                              `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BlobServiceProperties_STATUS{}

// ConvertStatusFrom populates our BlobServiceProperties_STATUS from the provided source
func (properties *BlobServiceProperties_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210401s.BlobServiceProperties_STATUS)
	if ok {
		// Populate our instance from source
		return properties.AssignProperties_From_BlobServiceProperties_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.BlobServiceProperties_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = properties.AssignProperties_From_BlobServiceProperties_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BlobServiceProperties_STATUS
func (properties *BlobServiceProperties_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210401s.BlobServiceProperties_STATUS)
	if ok {
		// Populate destination from our instance
		return properties.AssignProperties_To_BlobServiceProperties_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.BlobServiceProperties_STATUS{}
	err := properties.AssignProperties_To_BlobServiceProperties_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignProperties_From_BlobServiceProperties_STATUS populates our BlobServiceProperties_STATUS from the provided source BlobServiceProperties_STATUS
func (properties *BlobServiceProperties_STATUS) AssignProperties_From_BlobServiceProperties_STATUS(source *v20210401s.BlobServiceProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		properties.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed_STATUS
		err := changeFeed.AssignProperties_From_ChangeFeed_STATUS(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ChangeFeed_STATUS() to populate field ChangeFeed")
		}
		properties.ChangeFeed = &changeFeed
	} else {
		properties.ChangeFeed = nil
	}

	// Conditions
	properties.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy_STATUS
		err := containerDeleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy_STATUS(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy_STATUS() to populate field ContainerDeleteRetentionPolicy")
		}
		properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		properties.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules_STATUS
		err := cor.AssignProperties_From_CorsRules_STATUS(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CorsRules_STATUS() to populate field Cors")
		}
		properties.Cors = &cor
	} else {
		properties.Cors = nil
	}

	// DefaultServiceVersion
	properties.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy_STATUS
		err := deleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy_STATUS(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy_STATUS() to populate field DeleteRetentionPolicy")
		}
		properties.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		properties.DeleteRetentionPolicy = nil
	}

	// Id
	properties.Id = genruntime.ClonePointerToString(source.Id)

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		properties.IsVersioningEnabled = &isVersioningEnabled
	} else {
		properties.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy_STATUS
		err := lastAccessTimeTrackingPolicy.AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS() to populate field LastAccessTimeTrackingPolicy")
		}
		properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		properties.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	properties.Name = genruntime.ClonePointerToString(source.Name)

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties_STATUS
		err := restorePolicy.AssignProperties_From_RestorePolicyProperties_STATUS(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RestorePolicyProperties_STATUS() to populate field RestorePolicy")
		}
		properties.RestorePolicy = &restorePolicy
	} else {
		properties.RestorePolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignProperties_From_Sku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku_STATUS() to populate field Sku")
		}
		properties.Sku = &sku
	} else {
		properties.Sku = nil
	}

	// Type
	properties.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_BlobServiceProperties_STATUS populates the provided destination BlobServiceProperties_STATUS from our BlobServiceProperties_STATUS
func (properties *BlobServiceProperties_STATUS) AssignProperties_To_BlobServiceProperties_STATUS(destination *v20210401s.BlobServiceProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// AutomaticSnapshotPolicyEnabled
	if properties.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *properties.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if properties.ChangeFeed != nil {
		var changeFeed v20210401s.ChangeFeed_STATUS
		err := properties.ChangeFeed.AssignProperties_To_ChangeFeed_STATUS(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ChangeFeed_STATUS() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(properties.Conditions)

	// ContainerDeleteRetentionPolicy
	if properties.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy v20210401s.DeleteRetentionPolicy_STATUS
		err := properties.ContainerDeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy_STATUS(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy_STATUS() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if properties.Cors != nil {
		var cor v20210401s.CorsRules_STATUS
		err := properties.Cors.AssignProperties_To_CorsRules_STATUS(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CorsRules_STATUS() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(properties.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if properties.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy v20210401s.DeleteRetentionPolicy_STATUS
		err := properties.DeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy_STATUS(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy_STATUS() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(properties.Id)

	// IsVersioningEnabled
	if properties.IsVersioningEnabled != nil {
		isVersioningEnabled := *properties.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if properties.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy v20210401s.LastAccessTimeTrackingPolicy_STATUS
		err := properties.LastAccessTimeTrackingPolicy.AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(properties.Name)

	// RestorePolicy
	if properties.RestorePolicy != nil {
		var restorePolicy v20210401s.RestorePolicyProperties_STATUS
		err := properties.RestorePolicy.AssignProperties_To_RestorePolicyProperties_STATUS(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RestorePolicyProperties_STATUS() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Sku
	if properties.Sku != nil {
		var sku v20210401s.Sku_STATUS
		err := properties.Sku.AssignProperties_To_Sku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(properties.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.StorageAccounts_BlobService_Spec
type StorageAccounts_BlobService_Spec struct {
	AutomaticSnapshotPolicyEnabled *bool                         `json:"automaticSnapshotPolicyEnabled,omitempty"`
	ChangeFeed                     *ChangeFeed                   `json:"changeFeed,omitempty"`
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy        `json:"containerDeleteRetentionPolicy,omitempty"`
	Cors                           *CorsRules                    `json:"cors,omitempty"`
	DefaultServiceVersion          *string                       `json:"defaultServiceVersion,omitempty"`
	DeleteRetentionPolicy          *DeleteRetentionPolicy        `json:"deleteRetentionPolicy,omitempty"`
	IsVersioningEnabled            *bool                         `json:"isVersioningEnabled,omitempty"`
	LastAccessTimeTrackingPolicy   *LastAccessTimeTrackingPolicy `json:"lastAccessTimeTrackingPolicy,omitempty"`
	Location                       *string                       `json:"location,omitempty"`
	OriginalVersion                string                        `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a storage.azure.com/StorageAccount resource
	Owner         *genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner,omitempty" kind:"StorageAccount"`
	PropertyBag   genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	RestorePolicy *RestorePolicyProperties           `json:"restorePolicy,omitempty"`
	Tags          map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_BlobService_Spec{}

// ConvertSpecFrom populates our StorageAccounts_BlobService_Spec from the provided source
func (service *StorageAccounts_BlobService_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210401s.StorageAccounts_BlobService_Spec)
	if ok {
		// Populate our instance from source
		return service.AssignProperties_From_StorageAccounts_BlobService_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccounts_BlobService_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = service.AssignProperties_From_StorageAccounts_BlobService_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_BlobService_Spec
func (service *StorageAccounts_BlobService_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210401s.StorageAccounts_BlobService_Spec)
	if ok {
		// Populate destination from our instance
		return service.AssignProperties_To_StorageAccounts_BlobService_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccounts_BlobService_Spec{}
	err := service.AssignProperties_To_StorageAccounts_BlobService_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_StorageAccounts_BlobService_Spec populates our StorageAccounts_BlobService_Spec from the provided source StorageAccounts_BlobService_Spec
func (service *StorageAccounts_BlobService_Spec) AssignProperties_From_StorageAccounts_BlobService_Spec(source *v20210401s.StorageAccounts_BlobService_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		service.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		service.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed
		err := changeFeed.AssignProperties_From_ChangeFeed(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ChangeFeed() to populate field ChangeFeed")
		}
		service.ChangeFeed = &changeFeed
	} else {
		service.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy
		err := containerDeleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		service.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		service.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules
		err := cor.AssignProperties_From_CorsRules(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CorsRules() to populate field Cors")
		}
		service.Cors = &cor
	} else {
		service.Cors = nil
	}

	// DefaultServiceVersion
	service.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy
		err := deleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		service.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		service.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		service.IsVersioningEnabled = &isVersioningEnabled
	} else {
		service.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy
		err := lastAccessTimeTrackingPolicy.AssignProperties_From_LastAccessTimeTrackingPolicy(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_LastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		service.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		service.LastAccessTimeTrackingPolicy = nil
	}

	// Location
	service.Location = genruntime.ClonePointerToString(source.Location)

	// OriginalVersion
	service.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		service.Owner = &owner
	} else {
		service.Owner = nil
	}

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties
		err := restorePolicy.AssignProperties_From_RestorePolicyProperties(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RestorePolicyProperties() to populate field RestorePolicy")
		}
		service.RestorePolicy = &restorePolicy
	} else {
		service.RestorePolicy = nil
	}

	// Tags
	service.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		service.PropertyBag = propertyBag
	} else {
		service.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageAccounts_BlobService_Spec populates the provided destination StorageAccounts_BlobService_Spec from our StorageAccounts_BlobService_Spec
func (service *StorageAccounts_BlobService_Spec) AssignProperties_To_StorageAccounts_BlobService_Spec(destination *v20210401s.StorageAccounts_BlobService_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(service.PropertyBag)

	// AutomaticSnapshotPolicyEnabled
	if service.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *service.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if service.ChangeFeed != nil {
		var changeFeed v20210401s.ChangeFeed
		err := service.ChangeFeed.AssignProperties_To_ChangeFeed(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ChangeFeed() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if service.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy v20210401s.DeleteRetentionPolicy
		err := service.ContainerDeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if service.Cors != nil {
		var cor v20210401s.CorsRules
		err := service.Cors.AssignProperties_To_CorsRules(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CorsRules() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(service.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if service.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy v20210401s.DeleteRetentionPolicy
		err := service.DeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if service.IsVersioningEnabled != nil {
		isVersioningEnabled := *service.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if service.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy v20210401s.LastAccessTimeTrackingPolicy
		err := service.LastAccessTimeTrackingPolicy.AssignProperties_To_LastAccessTimeTrackingPolicy(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_LastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(service.Location)

	// OriginalVersion
	destination.OriginalVersion = service.OriginalVersion

	// Owner
	if service.Owner != nil {
		owner := service.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RestorePolicy
	if service.RestorePolicy != nil {
		var restorePolicy v20210401s.RestorePolicyProperties
		err := service.RestorePolicy.AssignProperties_To_RestorePolicyProperties(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RestorePolicyProperties() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(service.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ChangeFeed
// Deprecated version of ChangeFeed. Use v1beta20210401.ChangeFeed instead
type ChangeFeed struct {
	Enabled         *bool                  `json:"enabled,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RetentionInDays *int                   `json:"retentionInDays,omitempty"`
}

// AssignProperties_From_ChangeFeed populates our ChangeFeed from the provided source ChangeFeed
func (feed *ChangeFeed) AssignProperties_From_ChangeFeed(source *v20210401s.ChangeFeed) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	feed.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		feed.PropertyBag = propertyBag
	} else {
		feed.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ChangeFeed populates the provided destination ChangeFeed from our ChangeFeed
func (feed *ChangeFeed) AssignProperties_To_ChangeFeed(destination *v20210401s.ChangeFeed) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(feed.PropertyBag)

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(feed.RetentionInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ChangeFeed_STATUS
// Deprecated version of ChangeFeed_STATUS. Use v1beta20210401.ChangeFeed_STATUS instead
type ChangeFeed_STATUS struct {
	Enabled         *bool                  `json:"enabled,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RetentionInDays *int                   `json:"retentionInDays,omitempty"`
}

// AssignProperties_From_ChangeFeed_STATUS populates our ChangeFeed_STATUS from the provided source ChangeFeed_STATUS
func (feed *ChangeFeed_STATUS) AssignProperties_From_ChangeFeed_STATUS(source *v20210401s.ChangeFeed_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	feed.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		feed.PropertyBag = propertyBag
	} else {
		feed.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ChangeFeed_STATUS populates the provided destination ChangeFeed_STATUS from our ChangeFeed_STATUS
func (feed *ChangeFeed_STATUS) AssignProperties_To_ChangeFeed_STATUS(destination *v20210401s.ChangeFeed_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(feed.PropertyBag)

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(feed.RetentionInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.CorsRules
// Deprecated version of CorsRules. Use v1beta20210401.CorsRules instead
type CorsRules struct {
	CorsRules   []CorsRule             `json:"corsRules,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_CorsRules populates our CorsRules from the provided source CorsRules
func (rules *CorsRules) AssignProperties_From_CorsRules(source *v20210401s.CorsRules) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule
			err := corsRule.AssignProperties_From_CorsRule(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CorsRule() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		rules.PropertyBag = propertyBag
	} else {
		rules.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CorsRules populates the provided destination CorsRules from our CorsRules
func (rules *CorsRules) AssignProperties_To_CorsRules(destination *v20210401s.CorsRules) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rules.PropertyBag)

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]v20210401s.CorsRule, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule v20210401s.CorsRule
			err := corsRuleItem.AssignProperties_To_CorsRule(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CorsRule() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.CorsRules_STATUS
// Deprecated version of CorsRules_STATUS. Use v1beta20210401.CorsRules_STATUS instead
type CorsRules_STATUS struct {
	CorsRules   []CorsRule_STATUS      `json:"corsRules,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_CorsRules_STATUS populates our CorsRules_STATUS from the provided source CorsRules_STATUS
func (rules *CorsRules_STATUS) AssignProperties_From_CorsRules_STATUS(source *v20210401s.CorsRules_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule_STATUS, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule_STATUS
			err := corsRule.AssignProperties_From_CorsRule_STATUS(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CorsRule_STATUS() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		rules.PropertyBag = propertyBag
	} else {
		rules.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CorsRules_STATUS populates the provided destination CorsRules_STATUS from our CorsRules_STATUS
func (rules *CorsRules_STATUS) AssignProperties_To_CorsRules_STATUS(destination *v20210401s.CorsRules_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rules.PropertyBag)

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]v20210401s.CorsRule_STATUS, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule v20210401s.CorsRule_STATUS
			err := corsRuleItem.AssignProperties_To_CorsRule_STATUS(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CorsRule_STATUS() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.DeleteRetentionPolicy
// Deprecated version of DeleteRetentionPolicy. Use v1beta20210401.DeleteRetentionPolicy instead
type DeleteRetentionPolicy struct {
	Days        *int                   `json:"days,omitempty"`
	Enabled     *bool                  `json:"enabled,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_DeleteRetentionPolicy populates our DeleteRetentionPolicy from the provided source DeleteRetentionPolicy
func (policy *DeleteRetentionPolicy) AssignProperties_From_DeleteRetentionPolicy(source *v20210401s.DeleteRetentionPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeleteRetentionPolicy populates the provided destination DeleteRetentionPolicy from our DeleteRetentionPolicy
func (policy *DeleteRetentionPolicy) AssignProperties_To_DeleteRetentionPolicy(destination *v20210401s.DeleteRetentionPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.DeleteRetentionPolicy_STATUS
// Deprecated version of DeleteRetentionPolicy_STATUS. Use v1beta20210401.DeleteRetentionPolicy_STATUS instead
type DeleteRetentionPolicy_STATUS struct {
	Days        *int                   `json:"days,omitempty"`
	Enabled     *bool                  `json:"enabled,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_DeleteRetentionPolicy_STATUS populates our DeleteRetentionPolicy_STATUS from the provided source DeleteRetentionPolicy_STATUS
func (policy *DeleteRetentionPolicy_STATUS) AssignProperties_From_DeleteRetentionPolicy_STATUS(source *v20210401s.DeleteRetentionPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeleteRetentionPolicy_STATUS populates the provided destination DeleteRetentionPolicy_STATUS from our DeleteRetentionPolicy_STATUS
func (policy *DeleteRetentionPolicy_STATUS) AssignProperties_To_DeleteRetentionPolicy_STATUS(destination *v20210401s.DeleteRetentionPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.LastAccessTimeTrackingPolicy
// Deprecated version of LastAccessTimeTrackingPolicy. Use v1beta20210401.LastAccessTimeTrackingPolicy instead
type LastAccessTimeTrackingPolicy struct {
	BlobType                  []string               `json:"blobType,omitempty"`
	Enable                    *bool                  `json:"enable,omitempty"`
	Name                      *string                `json:"name,omitempty"`
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	TrackingGranularityInDays *int                   `json:"trackingGranularityInDays,omitempty"`
}

// AssignProperties_From_LastAccessTimeTrackingPolicy populates our LastAccessTimeTrackingPolicy from the provided source LastAccessTimeTrackingPolicy
func (policy *LastAccessTimeTrackingPolicy) AssignProperties_From_LastAccessTimeTrackingPolicy(source *v20210401s.LastAccessTimeTrackingPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		enable := *source.Enable
		policy.Enable = &enable
	} else {
		policy.Enable = nil
	}

	// Name
	policy.Name = genruntime.ClonePointerToString(source.Name)

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_LastAccessTimeTrackingPolicy populates the provided destination LastAccessTimeTrackingPolicy from our LastAccessTimeTrackingPolicy
func (policy *LastAccessTimeTrackingPolicy) AssignProperties_To_LastAccessTimeTrackingPolicy(destination *v20210401s.LastAccessTimeTrackingPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	if policy.Enable != nil {
		enable := *policy.Enable
		destination.Enable = &enable
	} else {
		destination.Enable = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(policy.Name)

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.LastAccessTimeTrackingPolicy_STATUS
// Deprecated version of LastAccessTimeTrackingPolicy_STATUS. Use v1beta20210401.LastAccessTimeTrackingPolicy_STATUS instead
type LastAccessTimeTrackingPolicy_STATUS struct {
	BlobType                  []string               `json:"blobType,omitempty"`
	Enable                    *bool                  `json:"enable,omitempty"`
	Name                      *string                `json:"name,omitempty"`
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	TrackingGranularityInDays *int                   `json:"trackingGranularityInDays,omitempty"`
}

// AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS populates our LastAccessTimeTrackingPolicy_STATUS from the provided source LastAccessTimeTrackingPolicy_STATUS
func (policy *LastAccessTimeTrackingPolicy_STATUS) AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS(source *v20210401s.LastAccessTimeTrackingPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		enable := *source.Enable
		policy.Enable = &enable
	} else {
		policy.Enable = nil
	}

	// Name
	policy.Name = genruntime.ClonePointerToString(source.Name)

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS populates the provided destination LastAccessTimeTrackingPolicy_STATUS from our LastAccessTimeTrackingPolicy_STATUS
func (policy *LastAccessTimeTrackingPolicy_STATUS) AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS(destination *v20210401s.LastAccessTimeTrackingPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	if policy.Enable != nil {
		enable := *policy.Enable
		destination.Enable = &enable
	} else {
		destination.Enable = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(policy.Name)

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.RestorePolicyProperties
// Deprecated version of RestorePolicyProperties. Use v1beta20210401.RestorePolicyProperties instead
type RestorePolicyProperties struct {
	Days        *int                   `json:"days,omitempty"`
	Enabled     *bool                  `json:"enabled,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_RestorePolicyProperties populates our RestorePolicyProperties from the provided source RestorePolicyProperties
func (properties *RestorePolicyProperties) AssignProperties_From_RestorePolicyProperties(source *v20210401s.RestorePolicyProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Days
	properties.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		properties.Enabled = &enabled
	} else {
		properties.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RestorePolicyProperties populates the provided destination RestorePolicyProperties from our RestorePolicyProperties
func (properties *RestorePolicyProperties) AssignProperties_To_RestorePolicyProperties(destination *v20210401s.RestorePolicyProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// Days
	destination.Days = genruntime.ClonePointerToInt(properties.Days)

	// Enabled
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.RestorePolicyProperties_STATUS
// Deprecated version of RestorePolicyProperties_STATUS. Use v1beta20210401.RestorePolicyProperties_STATUS instead
type RestorePolicyProperties_STATUS struct {
	Days            *int                   `json:"days,omitempty"`
	Enabled         *bool                  `json:"enabled,omitempty"`
	LastEnabledTime *string                `json:"lastEnabledTime,omitempty"`
	MinRestoreTime  *string                `json:"minRestoreTime,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_RestorePolicyProperties_STATUS populates our RestorePolicyProperties_STATUS from the provided source RestorePolicyProperties_STATUS
func (properties *RestorePolicyProperties_STATUS) AssignProperties_From_RestorePolicyProperties_STATUS(source *v20210401s.RestorePolicyProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Days
	properties.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		properties.Enabled = &enabled
	} else {
		properties.Enabled = nil
	}

	// LastEnabledTime
	properties.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// MinRestoreTime
	properties.MinRestoreTime = genruntime.ClonePointerToString(source.MinRestoreTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RestorePolicyProperties_STATUS populates the provided destination RestorePolicyProperties_STATUS from our RestorePolicyProperties_STATUS
func (properties *RestorePolicyProperties_STATUS) AssignProperties_To_RestorePolicyProperties_STATUS(destination *v20210401s.RestorePolicyProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// Days
	destination.Days = genruntime.ClonePointerToInt(properties.Days)

	// Enabled
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(properties.LastEnabledTime)

	// MinRestoreTime
	destination.MinRestoreTime = genruntime.ClonePointerToString(properties.MinRestoreTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.CorsRule
// Deprecated version of CorsRule. Use v1beta20210401.CorsRule instead
type CorsRule struct {
	AllowedHeaders  []string               `json:"allowedHeaders,omitempty"`
	AllowedMethods  []string               `json:"allowedMethods,omitempty"`
	AllowedOrigins  []string               `json:"allowedOrigins,omitempty"`
	ExposedHeaders  []string               `json:"exposedHeaders,omitempty"`
	MaxAgeInSeconds *int                   `json:"maxAgeInSeconds,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_CorsRule populates our CorsRule from the provided source CorsRule
func (rule *CorsRule) AssignProperties_From_CorsRule(source *v20210401s.CorsRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	rule.AllowedMethods = genruntime.CloneSliceOfString(source.AllowedMethods)

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.ClonePointerToInt(source.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CorsRule populates the provided destination CorsRule from our CorsRule
func (rule *CorsRule) AssignProperties_To_CorsRule(destination *v20210401s.CorsRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	destination.AllowedMethods = genruntime.CloneSliceOfString(rule.AllowedMethods)

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	destination.MaxAgeInSeconds = genruntime.ClonePointerToInt(rule.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.CorsRule_STATUS
// Deprecated version of CorsRule_STATUS. Use v1beta20210401.CorsRule_STATUS instead
type CorsRule_STATUS struct {
	AllowedHeaders  []string               `json:"allowedHeaders,omitempty"`
	AllowedMethods  []string               `json:"allowedMethods,omitempty"`
	AllowedOrigins  []string               `json:"allowedOrigins,omitempty"`
	ExposedHeaders  []string               `json:"exposedHeaders,omitempty"`
	MaxAgeInSeconds *int                   `json:"maxAgeInSeconds,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_CorsRule_STATUS populates our CorsRule_STATUS from the provided source CorsRule_STATUS
func (rule *CorsRule_STATUS) AssignProperties_From_CorsRule_STATUS(source *v20210401s.CorsRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	rule.AllowedMethods = genruntime.CloneSliceOfString(source.AllowedMethods)

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.ClonePointerToInt(source.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CorsRule_STATUS populates the provided destination CorsRule_STATUS from our CorsRule_STATUS
func (rule *CorsRule_STATUS) AssignProperties_To_CorsRule_STATUS(destination *v20210401s.CorsRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	destination.AllowedMethods = genruntime.CloneSliceOfString(rule.AllowedMethods)

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	destination.MaxAgeInSeconds = genruntime.ClonePointerToInt(rule.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&StorageAccountsBlobService{}, &StorageAccountsBlobServiceList{})
}
