// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=storage.azure.com,resources=storageaccountsqueueservicesqueues,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=storage.azure.com,resources={storageaccountsqueueservicesqueues/status,storageaccountsqueueservicesqueues/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Storage version of v1alpha1api20210401.StorageAccountsQueueServicesQueue
//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/resourceDefinitions/storageAccounts_queueServices_queues
type StorageAccountsQueueServicesQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccountsQueueServicesQueues_Spec `json:"spec,omitempty"`
	Status            StorageQueue_Status                     `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsQueueServicesQueue{}

// GetConditions returns the conditions of the resource
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) GetConditions() conditions.Conditions {
	return storageAccountsQueueServicesQueue.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) SetConditions(conditions conditions.Conditions) {
	storageAccountsQueueServicesQueue.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &StorageAccountsQueueServicesQueue{}

// AzureName returns the Azure name of the resource
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) AzureName() string {
	return storageAccountsQueueServicesQueue.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (storageAccountsQueueServicesQueue StorageAccountsQueueServicesQueue) GetAPIVersion() string {
	return "2021-04-01"
}

// GetResourceKind returns the kind of the resource
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) GetSpec() genruntime.ConvertibleSpec {
	return &storageAccountsQueueServicesQueue.Spec
}

// GetStatus returns the status of this resource
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) GetStatus() genruntime.ConvertibleStatus {
	return &storageAccountsQueueServicesQueue.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/queueServices/queues"
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) GetType() string {
	return "Microsoft.Storage/storageAccounts/queueServices/queues"
}

// NewEmptyStatus returns a new empty (blank) status
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageQueue_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(storageAccountsQueueServicesQueue.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  storageAccountsQueueServicesQueue.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageQueue_Status); ok {
		storageAccountsQueueServicesQueue.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageQueue_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	storageAccountsQueueServicesQueue.Status = st
	return nil
}

// Hub marks that this StorageAccountsQueueServicesQueue is the hub type for conversion
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (storageAccountsQueueServicesQueue *StorageAccountsQueueServicesQueue) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: storageAccountsQueueServicesQueue.Spec.OriginalVersion,
		Kind:    "StorageAccountsQueueServicesQueue",
	}
}

// +kubebuilder:object:root=true
//Storage version of v1alpha1api20210401.StorageAccountsQueueServicesQueue
//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/resourceDefinitions/storageAccounts_queueServices_queues
type StorageAccountsQueueServicesQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsQueueServicesQueue `json:"items"`
}

//Storage version of v1alpha1api20210401.StorageAccountsQueueServicesQueues_Spec
type StorageAccountsQueueServicesQueues_Spec struct {
	// +kubebuilder:validation:MaxLength=63
	// +kubebuilder:validation:MinLength=3
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName       string            `json:"azureName"`
	Location        *string           `json:"location,omitempty"`
	Metadata        map[string]string `json:"metadata,omitempty"`
	OriginalVersion string            `json:"originalVersion"`

	// +kubebuilder:validation:Required
	Owner       genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner" kind:"StorageAccountsQueueService"`
	PropertyBag genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
	Tags        map[string]string                 `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &StorageAccountsQueueServicesQueues_Spec{}

// ConvertSpecFrom populates our StorageAccountsQueueServicesQueues_Spec from the provided source
func (storageAccountsQueueServicesQueuesSpec *StorageAccountsQueueServicesQueues_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == storageAccountsQueueServicesQueuesSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(storageAccountsQueueServicesQueuesSpec)
}

// ConvertSpecTo populates the provided destination from our StorageAccountsQueueServicesQueues_Spec
func (storageAccountsQueueServicesQueuesSpec *StorageAccountsQueueServicesQueues_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == storageAccountsQueueServicesQueuesSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(storageAccountsQueueServicesQueuesSpec)
}

//Storage version of v1alpha1api20210401.StorageQueue_Status
type StorageQueue_Status struct {
	ApproximateMessageCount *int                   `json:"approximateMessageCount,omitempty"`
	Conditions              []conditions.Condition `json:"conditions,omitempty"`
	Id                      *string                `json:"id,omitempty"`
	Metadata                map[string]string      `json:"metadata,omitempty"`
	Name                    *string                `json:"name,omitempty"`
	PropertyBag             genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type                    *string                `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageQueue_Status{}

// ConvertStatusFrom populates our StorageQueue_Status from the provided source
func (storageQueueStatus *StorageQueue_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == storageQueueStatus {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(storageQueueStatus)
}

// ConvertStatusTo populates the provided destination from our StorageQueue_Status
func (storageQueueStatus *StorageQueue_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == storageQueueStatus {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(storageQueueStatus)
}

func init() {
	SchemeBuilder.Register(&StorageAccountsQueueServicesQueue{}, &StorageAccountsQueueServicesQueueList{})
}
