// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401storage

import (
	"fmt"
	v20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1beta20210401storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20210401.StorageAccount
// Deprecated version of StorageAccount. Use v1beta20210401.StorageAccount instead
type StorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_Spec  `json:"spec,omitempty"`
	Status            StorageAccount_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccount{}

// GetConditions returns the conditions of the resource
func (account *StorageAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *StorageAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccount{}

// ConvertFrom populates our StorageAccount from the provided hub StorageAccount
func (account *StorageAccount) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210401s.StorageAccount)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccount but received %T instead", hub)
	}

	return account.AssignPropertiesFromStorageAccount(source)
}

// ConvertTo populates the provided hub StorageAccount from our StorageAccount
func (account *StorageAccount) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210401s.StorageAccount)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccount but received %T instead", hub)
	}

	return account.AssignPropertiesToStorageAccount(destination)
}

var _ genruntime.KubernetesResource = &StorageAccount{}

// AzureName returns the Azure name of the resource
func (account *StorageAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (account StorageAccount) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (account *StorageAccount) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (account *StorageAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *StorageAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts"
func (account *StorageAccount) GetType() string {
	return "Microsoft.Storage/storageAccounts"
}

// NewEmptyStatus returns a new empty (blank) status
func (account *StorageAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccount_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *StorageAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *StorageAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccount_STATUS); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccount_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// AssignPropertiesFromStorageAccount populates our StorageAccount from the provided source StorageAccount
func (account *StorageAccount) AssignPropertiesFromStorageAccount(source *v20210401s.StorageAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccounts_Spec
	err := spec.AssignPropertiesFromStorageAccountsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsSpec() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status StorageAccount_STATUS
	err = status.AssignPropertiesFromStorageAccountSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountSTATUS() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccount populates the provided destination StorageAccount from our StorageAccount
func (account *StorageAccount) AssignPropertiesToStorageAccount(destination *v20210401s.StorageAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210401s.StorageAccounts_Spec
	err := account.Spec.AssignPropertiesToStorageAccountsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210401s.StorageAccount_STATUS
	err = account.Status.AssignPropertiesToStorageAccountSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *StorageAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion,
		Kind:    "StorageAccount",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20210401.StorageAccount
// Deprecated version of StorageAccount. Use v1beta20210401.StorageAccount instead
type StorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccount `json:"items"`
}

// Storage version of v1alpha1api20210401.APIVersion
// Deprecated version of APIVersion. Use v1beta20210401.APIVersion instead
// +kubebuilder:validation:Enum={"2021-04-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2021-04-01")

// Storage version of v1alpha1api20210401.StorageAccount_STATUS
// Deprecated version of StorageAccount_STATUS. Use v1beta20210401.StorageAccount_STATUS instead
type StorageAccount_STATUS struct {
	AccessTier                            *string                                                `json:"accessTier,omitempty"`
	AllowBlobPublicAccess                 *bool                                                  `json:"allowBlobPublicAccess,omitempty"`
	AllowCrossTenantReplication           *bool                                                  `json:"allowCrossTenantReplication,omitempty"`
	AllowSharedKeyAccess                  *bool                                                  `json:"allowSharedKeyAccess,omitempty"`
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_STATUS          `json:"azureFilesIdentityBasedAuthentication,omitempty"`
	BlobRestoreStatus                     *BlobRestoreStatus_STATUS                              `json:"blobRestoreStatus,omitempty"`
	Conditions                            []conditions.Condition                                 `json:"conditions,omitempty"`
	CreationTime                          *string                                                `json:"creationTime,omitempty"`
	CustomDomain                          *CustomDomain_STATUS                                   `json:"customDomain,omitempty"`
	Encryption                            *Encryption_STATUS                                     `json:"encryption,omitempty"`
	ExtendedLocation                      *ExtendedLocation_STATUS                               `json:"extendedLocation,omitempty"`
	FailoverInProgress                    *bool                                                  `json:"failoverInProgress,omitempty"`
	GeoReplicationStats                   *GeoReplicationStats_STATUS                            `json:"geoReplicationStats,omitempty"`
	Id                                    *string                                                `json:"id,omitempty"`
	Identity                              *Identity_STATUS                                       `json:"identity,omitempty"`
	IsHnsEnabled                          *bool                                                  `json:"isHnsEnabled,omitempty"`
	IsNfsV3Enabled                        *bool                                                  `json:"isNfsV3Enabled,omitempty"`
	KeyCreationTime                       *KeyCreationTime_STATUS                                `json:"keyCreationTime,omitempty"`
	KeyPolicy                             *KeyPolicy_STATUS                                      `json:"keyPolicy,omitempty"`
	Kind                                  *string                                                `json:"kind,omitempty"`
	LargeFileSharesState                  *string                                                `json:"largeFileSharesState,omitempty"`
	LastGeoFailoverTime                   *string                                                `json:"lastGeoFailoverTime,omitempty"`
	Location                              *string                                                `json:"location,omitempty"`
	MinimumTlsVersion                     *string                                                `json:"minimumTlsVersion,omitempty"`
	Name                                  *string                                                `json:"name,omitempty"`
	NetworkAcls                           *NetworkRuleSet_STATUS                                 `json:"networkAcls,omitempty"`
	PrimaryEndpoints                      *Endpoints_STATUS                                      `json:"primaryEndpoints,omitempty"`
	PrimaryLocation                       *string                                                `json:"primaryLocation,omitempty"`
	PrivateEndpointConnections            []PrivateEndpointConnection_STATUS_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	PropertyBag                           genruntime.PropertyBag                                 `json:"$propertyBag,omitempty"`
	ProvisioningState                     *string                                                `json:"provisioningState,omitempty"`
	RoutingPreference                     *RoutingPreference_STATUS                              `json:"routingPreference,omitempty"`
	SasPolicy                             *SasPolicy_STATUS                                      `json:"sasPolicy,omitempty"`
	SecondaryEndpoints                    *Endpoints_STATUS                                      `json:"secondaryEndpoints,omitempty"`
	SecondaryLocation                     *string                                                `json:"secondaryLocation,omitempty"`
	Sku                                   *Sku_STATUS                                            `json:"sku,omitempty"`
	StatusOfPrimary                       *string                                                `json:"statusOfPrimary,omitempty"`
	StatusOfSecondary                     *string                                                `json:"statusOfSecondary,omitempty"`
	SupportsHttpsTrafficOnly              *bool                                                  `json:"supportsHttpsTrafficOnly,omitempty"`
	Tags                                  map[string]string                                      `json:"tags,omitempty"`
	Type                                  *string                                                `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccount_STATUS{}

// ConvertStatusFrom populates our StorageAccount_STATUS from the provided source
func (account *StorageAccount_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210401s.StorageAccount_STATUS)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromStorageAccountSTATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccount_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromStorageAccountSTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccount_STATUS
func (account *StorageAccount_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210401s.StorageAccount_STATUS)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToStorageAccountSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccount_STATUS{}
	err := account.AssignPropertiesToStorageAccountSTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountSTATUS populates our StorageAccount_STATUS from the provided source StorageAccount_STATUS
func (account *StorageAccount_STATUS) AssignPropertiesFromStorageAccountSTATUS(source *v20210401s.StorageAccount_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AccessTier
	account.AccessTier = genruntime.ClonePointerToString(source.AccessTier)

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		account.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		account.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		account.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		account.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		account.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		account.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication_STATUS
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS() to populate field AzureFilesIdentityBasedAuthentication")
		}
		account.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		account.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if source.BlobRestoreStatus != nil {
		var blobRestoreStatus BlobRestoreStatus_STATUS
		err := blobRestoreStatus.AssignPropertiesFromBlobRestoreStatusSTATUS(source.BlobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreStatusSTATUS() to populate field BlobRestoreStatus")
		}
		account.BlobRestoreStatus = &blobRestoreStatus
	} else {
		account.BlobRestoreStatus = nil
	}

	// Conditions
	account.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationTime
	account.CreationTime = genruntime.ClonePointerToString(source.CreationTime)

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain_STATUS
		err := customDomain.AssignPropertiesFromCustomDomainSTATUS(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomainSTATUS() to populate field CustomDomain")
		}
		account.CustomDomain = &customDomain
	} else {
		account.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_STATUS
		err := encryption.AssignPropertiesFromEncryptionSTATUS(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSTATUS() to populate field Encryption")
		}
		account.Encryption = &encryption
	} else {
		account.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignPropertiesFromExtendedLocationSTATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		account.ExtendedLocation = &extendedLocation
	} else {
		account.ExtendedLocation = nil
	}

	// FailoverInProgress
	if source.FailoverInProgress != nil {
		failoverInProgress := *source.FailoverInProgress
		account.FailoverInProgress = &failoverInProgress
	} else {
		account.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if source.GeoReplicationStats != nil {
		var geoReplicationStat GeoReplicationStats_STATUS
		err := geoReplicationStat.AssignPropertiesFromGeoReplicationStatsSTATUS(source.GeoReplicationStats)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromGeoReplicationStatsSTATUS() to populate field GeoReplicationStats")
		}
		account.GeoReplicationStats = &geoReplicationStat
	} else {
		account.GeoReplicationStats = nil
	}

	// Id
	account.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity Identity_STATUS
		err := identity.AssignPropertiesFromIdentitySTATUS(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentitySTATUS() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		account.IsHnsEnabled = &isHnsEnabled
	} else {
		account.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		account.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		account.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if source.KeyCreationTime != nil {
		var keyCreationTime KeyCreationTime_STATUS
		err := keyCreationTime.AssignPropertiesFromKeyCreationTimeSTATUS(source.KeyCreationTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyCreationTimeSTATUS() to populate field KeyCreationTime")
		}
		account.KeyCreationTime = &keyCreationTime
	} else {
		account.KeyCreationTime = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy_STATUS
		err := keyPolicy.AssignPropertiesFromKeyPolicySTATUS(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicySTATUS() to populate field KeyPolicy")
		}
		account.KeyPolicy = &keyPolicy
	} else {
		account.KeyPolicy = nil
	}

	// Kind
	account.Kind = genruntime.ClonePointerToString(source.Kind)

	// LargeFileSharesState
	account.LargeFileSharesState = genruntime.ClonePointerToString(source.LargeFileSharesState)

	// LastGeoFailoverTime
	account.LastGeoFailoverTime = genruntime.ClonePointerToString(source.LastGeoFailoverTime)

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	account.MinimumTlsVersion = genruntime.ClonePointerToString(source.MinimumTlsVersion)

	// Name
	account.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet_STATUS
		err := networkAcl.AssignPropertiesFromNetworkRuleSetSTATUS(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSetSTATUS() to populate field NetworkAcls")
		}
		account.NetworkAcls = &networkAcl
	} else {
		account.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if source.PrimaryEndpoints != nil {
		var primaryEndpoint Endpoints_STATUS
		err := primaryEndpoint.AssignPropertiesFromEndpointsSTATUS(source.PrimaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEndpointsSTATUS() to populate field PrimaryEndpoints")
		}
		account.PrimaryEndpoints = &primaryEndpoint
	} else {
		account.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	account.PrimaryLocation = genruntime.ClonePointerToString(source.PrimaryLocation)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		account.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		account.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	account.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference_STATUS
		err := routingPreference.AssignPropertiesFromRoutingPreferenceSTATUS(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreferenceSTATUS() to populate field RoutingPreference")
		}
		account.RoutingPreference = &routingPreference
	} else {
		account.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy_STATUS
		err := sasPolicy.AssignPropertiesFromSasPolicySTATUS(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicySTATUS() to populate field SasPolicy")
		}
		account.SasPolicy = &sasPolicy
	} else {
		account.SasPolicy = nil
	}

	// SecondaryEndpoints
	if source.SecondaryEndpoints != nil {
		var secondaryEndpoint Endpoints_STATUS
		err := secondaryEndpoint.AssignPropertiesFromEndpointsSTATUS(source.SecondaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEndpointsSTATUS() to populate field SecondaryEndpoints")
		}
		account.SecondaryEndpoints = &secondaryEndpoint
	} else {
		account.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	account.SecondaryLocation = genruntime.ClonePointerToString(source.SecondaryLocation)

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignPropertiesFromSkuSTATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuSTATUS() to populate field Sku")
		}
		account.Sku = &sku
	} else {
		account.Sku = nil
	}

	// StatusOfPrimary
	account.StatusOfPrimary = genruntime.ClonePointerToString(source.StatusOfPrimary)

	// StatusOfSecondary
	account.StatusOfSecondary = genruntime.ClonePointerToString(source.StatusOfSecondary)

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		account.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		account.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	account.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		account.PropertyBag = propertyBag
	} else {
		account.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountSTATUS populates the provided destination StorageAccount_STATUS from our StorageAccount_STATUS
func (account *StorageAccount_STATUS) AssignPropertiesToStorageAccountSTATUS(destination *v20210401s.StorageAccount_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(account.PropertyBag)

	// AccessTier
	destination.AccessTier = genruntime.ClonePointerToString(account.AccessTier)

	// AllowBlobPublicAccess
	if account.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *account.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if account.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *account.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if account.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *account.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if account.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v20210401s.AzureFilesIdentityBasedAuthentication_STATUS
		err := account.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if account.BlobRestoreStatus != nil {
		var blobRestoreStatus v20210401s.BlobRestoreStatus_STATUS
		err := account.BlobRestoreStatus.AssignPropertiesToBlobRestoreStatusSTATUS(&blobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreStatusSTATUS() to populate field BlobRestoreStatus")
		}
		destination.BlobRestoreStatus = &blobRestoreStatus
	} else {
		destination.BlobRestoreStatus = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(account.Conditions)

	// CreationTime
	destination.CreationTime = genruntime.ClonePointerToString(account.CreationTime)

	// CustomDomain
	if account.CustomDomain != nil {
		var customDomain v20210401s.CustomDomain_STATUS
		err := account.CustomDomain.AssignPropertiesToCustomDomainSTATUS(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomainSTATUS() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if account.Encryption != nil {
		var encryption v20210401s.Encryption_STATUS
		err := account.Encryption.AssignPropertiesToEncryptionSTATUS(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSTATUS() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if account.ExtendedLocation != nil {
		var extendedLocation v20210401s.ExtendedLocation_STATUS
		err := account.ExtendedLocation.AssignPropertiesToExtendedLocationSTATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FailoverInProgress
	if account.FailoverInProgress != nil {
		failoverInProgress := *account.FailoverInProgress
		destination.FailoverInProgress = &failoverInProgress
	} else {
		destination.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if account.GeoReplicationStats != nil {
		var geoReplicationStat v20210401s.GeoReplicationStats_STATUS
		err := account.GeoReplicationStats.AssignPropertiesToGeoReplicationStatsSTATUS(&geoReplicationStat)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToGeoReplicationStatsSTATUS() to populate field GeoReplicationStats")
		}
		destination.GeoReplicationStats = &geoReplicationStat
	} else {
		destination.GeoReplicationStats = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(account.Id)

	// Identity
	if account.Identity != nil {
		var identity v20210401s.Identity_STATUS
		err := account.Identity.AssignPropertiesToIdentitySTATUS(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentitySTATUS() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if account.IsHnsEnabled != nil {
		isHnsEnabled := *account.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if account.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *account.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if account.KeyCreationTime != nil {
		var keyCreationTime v20210401s.KeyCreationTime_STATUS
		err := account.KeyCreationTime.AssignPropertiesToKeyCreationTimeSTATUS(&keyCreationTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyCreationTimeSTATUS() to populate field KeyCreationTime")
		}
		destination.KeyCreationTime = &keyCreationTime
	} else {
		destination.KeyCreationTime = nil
	}

	// KeyPolicy
	if account.KeyPolicy != nil {
		var keyPolicy v20210401s.KeyPolicy_STATUS
		err := account.KeyPolicy.AssignPropertiesToKeyPolicySTATUS(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicySTATUS() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	destination.Kind = genruntime.ClonePointerToString(account.Kind)

	// LargeFileSharesState
	destination.LargeFileSharesState = genruntime.ClonePointerToString(account.LargeFileSharesState)

	// LastGeoFailoverTime
	destination.LastGeoFailoverTime = genruntime.ClonePointerToString(account.LastGeoFailoverTime)

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// MinimumTlsVersion
	destination.MinimumTlsVersion = genruntime.ClonePointerToString(account.MinimumTlsVersion)

	// Name
	destination.Name = genruntime.ClonePointerToString(account.Name)

	// NetworkAcls
	if account.NetworkAcls != nil {
		var networkAcl v20210401s.NetworkRuleSet_STATUS
		err := account.NetworkAcls.AssignPropertiesToNetworkRuleSetSTATUS(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSetSTATUS() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if account.PrimaryEndpoints != nil {
		var primaryEndpoint v20210401s.Endpoints_STATUS
		err := account.PrimaryEndpoints.AssignPropertiesToEndpointsSTATUS(&primaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEndpointsSTATUS() to populate field PrimaryEndpoints")
		}
		destination.PrimaryEndpoints = &primaryEndpoint
	} else {
		destination.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	destination.PrimaryLocation = genruntime.ClonePointerToString(account.PrimaryLocation)

	// PrivateEndpointConnections
	if account.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded, len(account.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range account.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(account.ProvisioningState)

	// RoutingPreference
	if account.RoutingPreference != nil {
		var routingPreference v20210401s.RoutingPreference_STATUS
		err := account.RoutingPreference.AssignPropertiesToRoutingPreferenceSTATUS(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreferenceSTATUS() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if account.SasPolicy != nil {
		var sasPolicy v20210401s.SasPolicy_STATUS
		err := account.SasPolicy.AssignPropertiesToSasPolicySTATUS(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicySTATUS() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// SecondaryEndpoints
	if account.SecondaryEndpoints != nil {
		var secondaryEndpoint v20210401s.Endpoints_STATUS
		err := account.SecondaryEndpoints.AssignPropertiesToEndpointsSTATUS(&secondaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEndpointsSTATUS() to populate field SecondaryEndpoints")
		}
		destination.SecondaryEndpoints = &secondaryEndpoint
	} else {
		destination.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	destination.SecondaryLocation = genruntime.ClonePointerToString(account.SecondaryLocation)

	// Sku
	if account.Sku != nil {
		var sku v20210401s.Sku_STATUS
		err := account.Sku.AssignPropertiesToSkuSTATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuSTATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StatusOfPrimary
	destination.StatusOfPrimary = genruntime.ClonePointerToString(account.StatusOfPrimary)

	// StatusOfSecondary
	destination.StatusOfSecondary = genruntime.ClonePointerToString(account.StatusOfSecondary)

	// SupportsHttpsTrafficOnly
	if account.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *account.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(account.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.StorageAccounts_Spec
type StorageAccounts_Spec struct {
	AccessTier                            *string                                `json:"accessTier,omitempty"`
	AllowBlobPublicAccess                 *bool                                  `json:"allowBlobPublicAccess,omitempty"`
	AllowCrossTenantReplication           *bool                                  `json:"allowCrossTenantReplication,omitempty"`
	AllowSharedKeyAccess                  *bool                                  `json:"allowSharedKeyAccess,omitempty"`
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	// +kubebuilder:validation:MaxLength=24
	// +kubebuilder:validation:MinLength=3
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName            string                      `json:"azureName,omitempty"`
	CustomDomain         *CustomDomain               `json:"customDomain,omitempty"`
	Encryption           *Encryption                 `json:"encryption,omitempty"`
	ExtendedLocation     *ExtendedLocation           `json:"extendedLocation,omitempty"`
	Identity             *Identity                   `json:"identity,omitempty"`
	IsHnsEnabled         *bool                       `json:"isHnsEnabled,omitempty"`
	IsNfsV3Enabled       *bool                       `json:"isNfsV3Enabled,omitempty"`
	KeyPolicy            *KeyPolicy                  `json:"keyPolicy,omitempty"`
	Kind                 *string                     `json:"kind,omitempty"`
	LargeFileSharesState *string                     `json:"largeFileSharesState,omitempty"`
	Location             *string                     `json:"location,omitempty"`
	MinimumTlsVersion    *string                     `json:"minimumTlsVersion,omitempty"`
	NetworkAcls          *NetworkRuleSet             `json:"networkAcls,omitempty"`
	OperatorSpec         *StorageAccountOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion      string                      `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                    *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag              genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	RoutingPreference        *RoutingPreference                 `json:"routingPreference,omitempty"`
	SasPolicy                *SasPolicy                         `json:"sasPolicy,omitempty"`
	Sku                      *Sku                               `json:"sku,omitempty"`
	SupportsHttpsTrafficOnly *bool                              `json:"supportsHttpsTrafficOnly,omitempty"`
	Tags                     map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_Spec{}

// ConvertSpecFrom populates our StorageAccounts_Spec from the provided source
func (accounts *StorageAccounts_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210401s.StorageAccounts_Spec)
	if ok {
		// Populate our instance from source
		return accounts.AssignPropertiesFromStorageAccountsSpec(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccounts_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = accounts.AssignPropertiesFromStorageAccountsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210401s.StorageAccounts_Spec)
	if ok {
		// Populate destination from our instance
		return accounts.AssignPropertiesToStorageAccountsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccounts_Spec{}
	err := accounts.AssignPropertiesToStorageAccountsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsSpec populates our StorageAccounts_Spec from the provided source StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) AssignPropertiesFromStorageAccountsSpec(source *v20210401s.StorageAccounts_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AccessTier
	accounts.AccessTier = genruntime.ClonePointerToString(source.AccessTier)

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		accounts.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		accounts.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		accounts.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		accounts.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		accounts.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		accounts.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthentication() to populate field AzureFilesIdentityBasedAuthentication")
		}
		accounts.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		accounts.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	accounts.AzureName = source.AzureName

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain
		err := customDomain.AssignPropertiesFromCustomDomain(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomain() to populate field CustomDomain")
		}
		accounts.CustomDomain = &customDomain
	} else {
		accounts.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption() to populate field Encryption")
		}
		accounts.Encryption = &encryption
	} else {
		accounts.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		accounts.ExtendedLocation = &extendedLocation
	} else {
		accounts.ExtendedLocation = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity
		err := identity.AssignPropertiesFromIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity() to populate field Identity")
		}
		accounts.Identity = &identity
	} else {
		accounts.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		accounts.IsHnsEnabled = &isHnsEnabled
	} else {
		accounts.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		accounts.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		accounts.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy
		err := keyPolicy.AssignPropertiesFromKeyPolicy(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicy() to populate field KeyPolicy")
		}
		accounts.KeyPolicy = &keyPolicy
	} else {
		accounts.KeyPolicy = nil
	}

	// Kind
	accounts.Kind = genruntime.ClonePointerToString(source.Kind)

	// LargeFileSharesState
	accounts.LargeFileSharesState = genruntime.ClonePointerToString(source.LargeFileSharesState)

	// Location
	accounts.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	accounts.MinimumTlsVersion = genruntime.ClonePointerToString(source.MinimumTlsVersion)

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet
		err := networkAcl.AssignPropertiesFromNetworkRuleSet(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSet() to populate field NetworkAcls")
		}
		accounts.NetworkAcls = &networkAcl
	} else {
		accounts.NetworkAcls = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec StorageAccountOperatorSpec
		err := operatorSpec.AssignPropertiesFromStorageAccountOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountOperatorSpec() to populate field OperatorSpec")
		}
		accounts.OperatorSpec = &operatorSpec
	} else {
		accounts.OperatorSpec = nil
	}

	// OriginalVersion
	accounts.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		accounts.Owner = &owner
	} else {
		accounts.Owner = nil
	}

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference
		err := routingPreference.AssignPropertiesFromRoutingPreference(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreference() to populate field RoutingPreference")
		}
		accounts.RoutingPreference = &routingPreference
	} else {
		accounts.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy
		err := sasPolicy.AssignPropertiesFromSasPolicy(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicy() to populate field SasPolicy")
		}
		accounts.SasPolicy = &sasPolicy
	} else {
		accounts.SasPolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		accounts.Sku = &sku
	} else {
		accounts.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		accounts.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		accounts.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	accounts.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		accounts.PropertyBag = propertyBag
	} else {
		accounts.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsSpec populates the provided destination StorageAccounts_Spec from our StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) AssignPropertiesToStorageAccountsSpec(destination *v20210401s.StorageAccounts_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(accounts.PropertyBag)

	// AccessTier
	destination.AccessTier = genruntime.ClonePointerToString(accounts.AccessTier)

	// AllowBlobPublicAccess
	if accounts.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *accounts.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if accounts.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *accounts.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if accounts.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *accounts.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if accounts.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v20210401s.AzureFilesIdentityBasedAuthentication
		err := accounts.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthentication(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthentication() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	destination.AzureName = accounts.AzureName

	// CustomDomain
	if accounts.CustomDomain != nil {
		var customDomain v20210401s.CustomDomain
		err := accounts.CustomDomain.AssignPropertiesToCustomDomain(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomain() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if accounts.Encryption != nil {
		var encryption v20210401s.Encryption
		err := accounts.Encryption.AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if accounts.ExtendedLocation != nil {
		var extendedLocation v20210401s.ExtendedLocation
		err := accounts.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Identity
	if accounts.Identity != nil {
		var identity v20210401s.Identity
		err := accounts.Identity.AssignPropertiesToIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if accounts.IsHnsEnabled != nil {
		isHnsEnabled := *accounts.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if accounts.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *accounts.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if accounts.KeyPolicy != nil {
		var keyPolicy v20210401s.KeyPolicy
		err := accounts.KeyPolicy.AssignPropertiesToKeyPolicy(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicy() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	destination.Kind = genruntime.ClonePointerToString(accounts.Kind)

	// LargeFileSharesState
	destination.LargeFileSharesState = genruntime.ClonePointerToString(accounts.LargeFileSharesState)

	// Location
	destination.Location = genruntime.ClonePointerToString(accounts.Location)

	// MinimumTlsVersion
	destination.MinimumTlsVersion = genruntime.ClonePointerToString(accounts.MinimumTlsVersion)

	// NetworkAcls
	if accounts.NetworkAcls != nil {
		var networkAcl v20210401s.NetworkRuleSet
		err := accounts.NetworkAcls.AssignPropertiesToNetworkRuleSet(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSet() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// OperatorSpec
	if accounts.OperatorSpec != nil {
		var operatorSpec v20210401s.StorageAccountOperatorSpec
		err := accounts.OperatorSpec.AssignPropertiesToStorageAccountOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = accounts.OriginalVersion

	// Owner
	if accounts.Owner != nil {
		owner := accounts.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RoutingPreference
	if accounts.RoutingPreference != nil {
		var routingPreference v20210401s.RoutingPreference
		err := accounts.RoutingPreference.AssignPropertiesToRoutingPreference(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreference() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if accounts.SasPolicy != nil {
		var sasPolicy v20210401s.SasPolicy
		err := accounts.SasPolicy.AssignPropertiesToSasPolicy(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicy() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// Sku
	if accounts.Sku != nil {
		var sku v20210401s.Sku
		err := accounts.Sku.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if accounts.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *accounts.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(accounts.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.AzureFilesIdentityBasedAuthentication
// Deprecated version of AzureFilesIdentityBasedAuthentication. Use v1beta20210401.AzureFilesIdentityBasedAuthentication instead
type AzureFilesIdentityBasedAuthentication struct {
	ActiveDirectoryProperties *ActiveDirectoryProperties `json:"activeDirectoryProperties,omitempty"`
	DefaultSharePermission    *string                    `json:"defaultSharePermission,omitempty"`
	DirectoryServiceOptions   *string                    `json:"directoryServiceOptions,omitempty"`
	PropertyBag               genruntime.PropertyBag     `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthentication populates our AzureFilesIdentityBasedAuthentication from the provided source AzureFilesIdentityBasedAuthentication
func (authentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source *v20210401s.AzureFilesIdentityBasedAuthentication) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryProperties(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryProperties() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	authentication.DefaultSharePermission = genruntime.ClonePointerToString(source.DefaultSharePermission)

	// DirectoryServiceOptions
	authentication.DirectoryServiceOptions = genruntime.ClonePointerToString(source.DirectoryServiceOptions)

	// Update the property bag
	if len(propertyBag) > 0 {
		authentication.PropertyBag = propertyBag
	} else {
		authentication.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthentication populates the provided destination AzureFilesIdentityBasedAuthentication from our AzureFilesIdentityBasedAuthentication
func (authentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesToAzureFilesIdentityBasedAuthentication(destination *v20210401s.AzureFilesIdentityBasedAuthentication) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(authentication.PropertyBag)

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v20210401s.ActiveDirectoryProperties
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryProperties(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryProperties() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	destination.DefaultSharePermission = genruntime.ClonePointerToString(authentication.DefaultSharePermission)

	// DirectoryServiceOptions
	destination.DirectoryServiceOptions = genruntime.ClonePointerToString(authentication.DirectoryServiceOptions)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.AzureFilesIdentityBasedAuthentication_STATUS
// Deprecated version of AzureFilesIdentityBasedAuthentication_STATUS. Use v1beta20210401.AzureFilesIdentityBasedAuthentication_STATUS instead
type AzureFilesIdentityBasedAuthentication_STATUS struct {
	ActiveDirectoryProperties *ActiveDirectoryProperties_STATUS `json:"activeDirectoryProperties,omitempty"`
	DefaultSharePermission    *string                           `json:"defaultSharePermission,omitempty"`
	DirectoryServiceOptions   *string                           `json:"directoryServiceOptions,omitempty"`
	PropertyBag               genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS populates our AzureFilesIdentityBasedAuthentication_STATUS from the provided source AzureFilesIdentityBasedAuthentication_STATUS
func (authentication *AzureFilesIdentityBasedAuthentication_STATUS) AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS(source *v20210401s.AzureFilesIdentityBasedAuthentication_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties_STATUS
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryPropertiesSTATUS(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryPropertiesSTATUS() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	authentication.DefaultSharePermission = genruntime.ClonePointerToString(source.DefaultSharePermission)

	// DirectoryServiceOptions
	authentication.DirectoryServiceOptions = genruntime.ClonePointerToString(source.DirectoryServiceOptions)

	// Update the property bag
	if len(propertyBag) > 0 {
		authentication.PropertyBag = propertyBag
	} else {
		authentication.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS populates the provided destination AzureFilesIdentityBasedAuthentication_STATUS from our AzureFilesIdentityBasedAuthentication_STATUS
func (authentication *AzureFilesIdentityBasedAuthentication_STATUS) AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS(destination *v20210401s.AzureFilesIdentityBasedAuthentication_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(authentication.PropertyBag)

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v20210401s.ActiveDirectoryProperties_STATUS
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryPropertiesSTATUS(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryPropertiesSTATUS() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	destination.DefaultSharePermission = genruntime.ClonePointerToString(authentication.DefaultSharePermission)

	// DirectoryServiceOptions
	destination.DirectoryServiceOptions = genruntime.ClonePointerToString(authentication.DirectoryServiceOptions)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.BlobRestoreStatus_STATUS
// Deprecated version of BlobRestoreStatus_STATUS. Use v1beta20210401.BlobRestoreStatus_STATUS instead
type BlobRestoreStatus_STATUS struct {
	FailureReason *string                       `json:"failureReason,omitempty"`
	Parameters    *BlobRestoreParameters_STATUS `json:"parameters,omitempty"`
	PropertyBag   genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	RestoreId     *string                       `json:"restoreId,omitempty"`
	Status        *string                       `json:"status,omitempty"`
}

// AssignPropertiesFromBlobRestoreStatusSTATUS populates our BlobRestoreStatus_STATUS from the provided source BlobRestoreStatus_STATUS
func (status *BlobRestoreStatus_STATUS) AssignPropertiesFromBlobRestoreStatusSTATUS(source *v20210401s.BlobRestoreStatus_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// FailureReason
	status.FailureReason = genruntime.ClonePointerToString(source.FailureReason)

	// Parameters
	if source.Parameters != nil {
		var parameter BlobRestoreParameters_STATUS
		err := parameter.AssignPropertiesFromBlobRestoreParametersSTATUS(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreParametersSTATUS() to populate field Parameters")
		}
		status.Parameters = &parameter
	} else {
		status.Parameters = nil
	}

	// RestoreId
	status.RestoreId = genruntime.ClonePointerToString(source.RestoreId)

	// Status
	status.Status = genruntime.ClonePointerToString(source.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		status.PropertyBag = propertyBag
	} else {
		status.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreStatusSTATUS populates the provided destination BlobRestoreStatus_STATUS from our BlobRestoreStatus_STATUS
func (status *BlobRestoreStatus_STATUS) AssignPropertiesToBlobRestoreStatusSTATUS(destination *v20210401s.BlobRestoreStatus_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(status.PropertyBag)

	// FailureReason
	destination.FailureReason = genruntime.ClonePointerToString(status.FailureReason)

	// Parameters
	if status.Parameters != nil {
		var parameter v20210401s.BlobRestoreParameters_STATUS
		err := status.Parameters.AssignPropertiesToBlobRestoreParametersSTATUS(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreParametersSTATUS() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// RestoreId
	destination.RestoreId = genruntime.ClonePointerToString(status.RestoreId)

	// Status
	destination.Status = genruntime.ClonePointerToString(status.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.CustomDomain
// Deprecated version of CustomDomain. Use v1beta20210401.CustomDomain instead
type CustomDomain struct {
	Name             *string                `json:"name,omitempty"`
	PropertyBag      genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	UseSubDomainName *bool                  `json:"useSubDomainName,omitempty"`
}

// AssignPropertiesFromCustomDomain populates our CustomDomain from the provided source CustomDomain
func (domain *CustomDomain) AssignPropertiesFromCustomDomain(source *v20210401s.CustomDomain) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		domain.PropertyBag = propertyBag
	} else {
		domain.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomain populates the provided destination CustomDomain from our CustomDomain
func (domain *CustomDomain) AssignPropertiesToCustomDomain(destination *v20210401s.CustomDomain) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domain.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.CustomDomain_STATUS
// Deprecated version of CustomDomain_STATUS. Use v1beta20210401.CustomDomain_STATUS instead
type CustomDomain_STATUS struct {
	Name             *string                `json:"name,omitempty"`
	PropertyBag      genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	UseSubDomainName *bool                  `json:"useSubDomainName,omitempty"`
}

// AssignPropertiesFromCustomDomainSTATUS populates our CustomDomain_STATUS from the provided source CustomDomain_STATUS
func (domain *CustomDomain_STATUS) AssignPropertiesFromCustomDomainSTATUS(source *v20210401s.CustomDomain_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		domain.PropertyBag = propertyBag
	} else {
		domain.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomainSTATUS populates the provided destination CustomDomain_STATUS from our CustomDomain_STATUS
func (domain *CustomDomain_STATUS) AssignPropertiesToCustomDomainSTATUS(destination *v20210401s.CustomDomain_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(domain.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.Encryption
// Deprecated version of Encryption. Use v1beta20210401.Encryption instead
type Encryption struct {
	Identity                        *EncryptionIdentity    `json:"identity,omitempty"`
	KeySource                       *string                `json:"keySource,omitempty"`
	Keyvaultproperties              *KeyVaultProperties    `json:"keyvaultproperties,omitempty"`
	PropertyBag                     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RequireInfrastructureEncryption *bool                  `json:"requireInfrastructureEncryption,omitempty"`
	Services                        *EncryptionServices    `json:"services,omitempty"`
}

// AssignPropertiesFromEncryption populates our Encryption from the provided source Encryption
func (encryption *Encryption) AssignPropertiesFromEncryption(source *v20210401s.Encryption) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity
		err := identity.AssignPropertiesFromEncryptionIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentity() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	encryption.KeySource = genruntime.ClonePointerToString(source.KeySource)

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties
		err := keyvaultproperty.AssignPropertiesFromKeyVaultProperties(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices
		err := service.AssignPropertiesFromEncryptionServices(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServices() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		encryption.PropertyBag = propertyBag
	} else {
		encryption.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption populates the provided destination Encryption from our Encryption
func (encryption *Encryption) AssignPropertiesToEncryption(destination *v20210401s.Encryption) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(encryption.PropertyBag)

	// Identity
	if encryption.Identity != nil {
		var identity v20210401s.EncryptionIdentity
		err := encryption.Identity.AssignPropertiesToEncryptionIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	destination.KeySource = genruntime.ClonePointerToString(encryption.KeySource)

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty v20210401s.KeyVaultProperties
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultProperties(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service v20210401s.EncryptionServices
		err := encryption.Services.AssignPropertiesToEncryptionServices(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServices() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.Encryption_STATUS
// Deprecated version of Encryption_STATUS. Use v1beta20210401.Encryption_STATUS instead
type Encryption_STATUS struct {
	Identity                        *EncryptionIdentity_STATUS `json:"identity,omitempty"`
	KeySource                       *string                    `json:"keySource,omitempty"`
	Keyvaultproperties              *KeyVaultProperties_STATUS `json:"keyvaultproperties,omitempty"`
	PropertyBag                     genruntime.PropertyBag     `json:"$propertyBag,omitempty"`
	RequireInfrastructureEncryption *bool                      `json:"requireInfrastructureEncryption,omitempty"`
	Services                        *EncryptionServices_STATUS `json:"services,omitempty"`
}

// AssignPropertiesFromEncryptionSTATUS populates our Encryption_STATUS from the provided source Encryption_STATUS
func (encryption *Encryption_STATUS) AssignPropertiesFromEncryptionSTATUS(source *v20210401s.Encryption_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity_STATUS
		err := identity.AssignPropertiesFromEncryptionIdentitySTATUS(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentitySTATUS() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	encryption.KeySource = genruntime.ClonePointerToString(source.KeySource)

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties_STATUS
		err := keyvaultproperty.AssignPropertiesFromKeyVaultPropertiesSTATUS(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesSTATUS() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices_STATUS
		err := service.AssignPropertiesFromEncryptionServicesSTATUS(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServicesSTATUS() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		encryption.PropertyBag = propertyBag
	} else {
		encryption.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionSTATUS populates the provided destination Encryption_STATUS from our Encryption_STATUS
func (encryption *Encryption_STATUS) AssignPropertiesToEncryptionSTATUS(destination *v20210401s.Encryption_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(encryption.PropertyBag)

	// Identity
	if encryption.Identity != nil {
		var identity v20210401s.EncryptionIdentity_STATUS
		err := encryption.Identity.AssignPropertiesToEncryptionIdentitySTATUS(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentitySTATUS() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	destination.KeySource = genruntime.ClonePointerToString(encryption.KeySource)

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty v20210401s.KeyVaultProperties_STATUS
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultPropertiesSTATUS(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesSTATUS() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service v20210401s.EncryptionServices_STATUS
		err := encryption.Services.AssignPropertiesToEncryptionServicesSTATUS(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServicesSTATUS() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.Endpoints_STATUS
// Deprecated version of Endpoints_STATUS. Use v1beta20210401.Endpoints_STATUS instead
type Endpoints_STATUS struct {
	Blob               *string                                  `json:"blob,omitempty"`
	Dfs                *string                                  `json:"dfs,omitempty"`
	File               *string                                  `json:"file,omitempty"`
	InternetEndpoints  *StorageAccountInternetEndpoints_STATUS  `json:"internetEndpoints,omitempty"`
	MicrosoftEndpoints *StorageAccountMicrosoftEndpoints_STATUS `json:"microsoftEndpoints,omitempty"`
	PropertyBag        genruntime.PropertyBag                   `json:"$propertyBag,omitempty"`
	Queue              *string                                  `json:"queue,omitempty"`
	Table              *string                                  `json:"table,omitempty"`
	Web                *string                                  `json:"web,omitempty"`
}

// AssignPropertiesFromEndpointsSTATUS populates our Endpoints_STATUS from the provided source Endpoints_STATUS
func (endpoints *Endpoints_STATUS) AssignPropertiesFromEndpointsSTATUS(source *v20210401s.Endpoints_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// InternetEndpoints
	if source.InternetEndpoints != nil {
		var internetEndpoint StorageAccountInternetEndpoints_STATUS
		err := internetEndpoint.AssignPropertiesFromStorageAccountInternetEndpointsSTATUS(source.InternetEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountInternetEndpointsSTATUS() to populate field InternetEndpoints")
		}
		endpoints.InternetEndpoints = &internetEndpoint
	} else {
		endpoints.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if source.MicrosoftEndpoints != nil {
		var microsoftEndpoint StorageAccountMicrosoftEndpoints_STATUS
		err := microsoftEndpoint.AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS(source.MicrosoftEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS() to populate field MicrosoftEndpoints")
		}
		endpoints.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		endpoints.MicrosoftEndpoints = nil
	}

	// Queue
	endpoints.Queue = genruntime.ClonePointerToString(source.Queue)

	// Table
	endpoints.Table = genruntime.ClonePointerToString(source.Table)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		endpoints.PropertyBag = propertyBag
	} else {
		endpoints.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEndpointsSTATUS populates the provided destination Endpoints_STATUS from our Endpoints_STATUS
func (endpoints *Endpoints_STATUS) AssignPropertiesToEndpointsSTATUS(destination *v20210401s.Endpoints_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(endpoints.PropertyBag)

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// InternetEndpoints
	if endpoints.InternetEndpoints != nil {
		var internetEndpoint v20210401s.StorageAccountInternetEndpoints_STATUS
		err := endpoints.InternetEndpoints.AssignPropertiesToStorageAccountInternetEndpointsSTATUS(&internetEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountInternetEndpointsSTATUS() to populate field InternetEndpoints")
		}
		destination.InternetEndpoints = &internetEndpoint
	} else {
		destination.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if endpoints.MicrosoftEndpoints != nil {
		var microsoftEndpoint v20210401s.StorageAccountMicrosoftEndpoints_STATUS
		err := endpoints.MicrosoftEndpoints.AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS(&microsoftEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS() to populate field MicrosoftEndpoints")
		}
		destination.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		destination.MicrosoftEndpoints = nil
	}

	// Queue
	destination.Queue = genruntime.ClonePointerToString(endpoints.Queue)

	// Table
	destination.Table = genruntime.ClonePointerToString(endpoints.Table)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ExtendedLocation
// Deprecated version of ExtendedLocation. Use v1beta20210401.ExtendedLocation instead
type ExtendedLocation struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// AssignPropertiesFromExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesFromExtendedLocation(source *v20210401s.ExtendedLocation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	location.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		location.PropertyBag = propertyBag
	} else {
		location.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesToExtendedLocation(destination *v20210401s.ExtendedLocation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(location.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(location.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ExtendedLocation_STATUS
// Deprecated version of ExtendedLocation_STATUS. Use v1beta20210401.ExtendedLocation_STATUS instead
type ExtendedLocation_STATUS struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// AssignPropertiesFromExtendedLocationSTATUS populates our ExtendedLocation_STATUS from the provided source ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignPropertiesFromExtendedLocationSTATUS(source *v20210401s.ExtendedLocation_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	location.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		location.PropertyBag = propertyBag
	} else {
		location.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationSTATUS populates the provided destination ExtendedLocation_STATUS from our ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignPropertiesToExtendedLocationSTATUS(destination *v20210401s.ExtendedLocation_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(location.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(location.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.GeoReplicationStats_STATUS
// Deprecated version of GeoReplicationStats_STATUS. Use v1beta20210401.GeoReplicationStats_STATUS instead
type GeoReplicationStats_STATUS struct {
	CanFailover  *bool                  `json:"canFailover,omitempty"`
	LastSyncTime *string                `json:"lastSyncTime,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Status       *string                `json:"status,omitempty"`
}

// AssignPropertiesFromGeoReplicationStatsSTATUS populates our GeoReplicationStats_STATUS from the provided source GeoReplicationStats_STATUS
func (stats *GeoReplicationStats_STATUS) AssignPropertiesFromGeoReplicationStatsSTATUS(source *v20210401s.GeoReplicationStats_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CanFailover
	if source.CanFailover != nil {
		canFailover := *source.CanFailover
		stats.CanFailover = &canFailover
	} else {
		stats.CanFailover = nil
	}

	// LastSyncTime
	stats.LastSyncTime = genruntime.ClonePointerToString(source.LastSyncTime)

	// Status
	stats.Status = genruntime.ClonePointerToString(source.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		stats.PropertyBag = propertyBag
	} else {
		stats.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToGeoReplicationStatsSTATUS populates the provided destination GeoReplicationStats_STATUS from our GeoReplicationStats_STATUS
func (stats *GeoReplicationStats_STATUS) AssignPropertiesToGeoReplicationStatsSTATUS(destination *v20210401s.GeoReplicationStats_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(stats.PropertyBag)

	// CanFailover
	if stats.CanFailover != nil {
		canFailover := *stats.CanFailover
		destination.CanFailover = &canFailover
	} else {
		destination.CanFailover = nil
	}

	// LastSyncTime
	destination.LastSyncTime = genruntime.ClonePointerToString(stats.LastSyncTime)

	// Status
	destination.Status = genruntime.ClonePointerToString(stats.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.Identity
// Deprecated version of Identity. Use v1beta20210401.Identity instead
type Identity struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// AssignPropertiesFromIdentity populates our Identity from the provided source Identity
func (identity *Identity) AssignPropertiesFromIdentity(source *v20210401s.Identity) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Type
	identity.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		identity.PropertyBag = propertyBag
	} else {
		identity.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity populates the provided destination Identity from our Identity
func (identity *Identity) AssignPropertiesToIdentity(destination *v20210401s.Identity) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(identity.PropertyBag)

	// Type
	destination.Type = genruntime.ClonePointerToString(identity.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.Identity_STATUS
// Deprecated version of Identity_STATUS. Use v1beta20210401.Identity_STATUS instead
type Identity_STATUS struct {
	PrincipalId            *string                                `json:"principalId,omitempty"`
	PropertyBag            genruntime.PropertyBag                 `json:"$propertyBag,omitempty"`
	TenantId               *string                                `json:"tenantId,omitempty"`
	Type                   *string                                `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentity_STATUS `json:"userAssignedIdentities,omitempty"`
}

// AssignPropertiesFromIdentitySTATUS populates our Identity_STATUS from the provided source Identity_STATUS
func (identity *Identity_STATUS) AssignPropertiesFromIdentitySTATUS(source *v20210401s.Identity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	identity.Type = genruntime.ClonePointerToString(source.Type)

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentity_STATUS, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentity_STATUS
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentitySTATUS(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentitySTATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		identity.PropertyBag = propertyBag
	} else {
		identity.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentitySTATUS populates the provided destination Identity_STATUS from our Identity_STATUS
func (identity *Identity_STATUS) AssignPropertiesToIdentitySTATUS(destination *v20210401s.Identity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(identity.PropertyBag)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	destination.Type = genruntime.ClonePointerToString(identity.Type)

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v20210401s.UserAssignedIdentity_STATUS, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v20210401s.UserAssignedIdentity_STATUS
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentitySTATUS(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentitySTATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.KeyCreationTime_STATUS
// Deprecated version of KeyCreationTime_STATUS. Use v1beta20210401.KeyCreationTime_STATUS instead
type KeyCreationTime_STATUS struct {
	Key1        *string                `json:"key1,omitempty"`
	Key2        *string                `json:"key2,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromKeyCreationTimeSTATUS populates our KeyCreationTime_STATUS from the provided source KeyCreationTime_STATUS
func (time *KeyCreationTime_STATUS) AssignPropertiesFromKeyCreationTimeSTATUS(source *v20210401s.KeyCreationTime_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key1
	time.Key1 = genruntime.ClonePointerToString(source.Key1)

	// Key2
	time.Key2 = genruntime.ClonePointerToString(source.Key2)

	// Update the property bag
	if len(propertyBag) > 0 {
		time.PropertyBag = propertyBag
	} else {
		time.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyCreationTimeSTATUS populates the provided destination KeyCreationTime_STATUS from our KeyCreationTime_STATUS
func (time *KeyCreationTime_STATUS) AssignPropertiesToKeyCreationTimeSTATUS(destination *v20210401s.KeyCreationTime_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(time.PropertyBag)

	// Key1
	destination.Key1 = genruntime.ClonePointerToString(time.Key1)

	// Key2
	destination.Key2 = genruntime.ClonePointerToString(time.Key2)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.KeyPolicy
// Deprecated version of KeyPolicy. Use v1beta20210401.KeyPolicy instead
type KeyPolicy struct {
	KeyExpirationPeriodInDays *int                   `json:"keyExpirationPeriodInDays,omitempty"`
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromKeyPolicy populates our KeyPolicy from the provided source KeyPolicy
func (policy *KeyPolicy) AssignPropertiesFromKeyPolicy(source *v20210401s.KeyPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(source.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyPolicy populates the provided destination KeyPolicy from our KeyPolicy
func (policy *KeyPolicy) AssignPropertiesToKeyPolicy(destination *v20210401s.KeyPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(policy.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.KeyPolicy_STATUS
// Deprecated version of KeyPolicy_STATUS. Use v1beta20210401.KeyPolicy_STATUS instead
type KeyPolicy_STATUS struct {
	KeyExpirationPeriodInDays *int                   `json:"keyExpirationPeriodInDays,omitempty"`
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromKeyPolicySTATUS populates our KeyPolicy_STATUS from the provided source KeyPolicy_STATUS
func (policy *KeyPolicy_STATUS) AssignPropertiesFromKeyPolicySTATUS(source *v20210401s.KeyPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(source.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyPolicySTATUS populates the provided destination KeyPolicy_STATUS from our KeyPolicy_STATUS
func (policy *KeyPolicy_STATUS) AssignPropertiesToKeyPolicySTATUS(destination *v20210401s.KeyPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(policy.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.NetworkRuleSet
// Deprecated version of NetworkRuleSet. Use v1beta20210401.NetworkRuleSet instead
type NetworkRuleSet struct {
	Bypass              *string                `json:"bypass,omitempty"`
	DefaultAction       *string                `json:"defaultAction,omitempty"`
	IpRules             []IPRule               `json:"ipRules,omitempty"`
	PropertyBag         genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceAccessRules []ResourceAccessRule   `json:"resourceAccessRules,omitempty"`
	VirtualNetworkRules []VirtualNetworkRule   `json:"virtualNetworkRules,omitempty"`
}

// AssignPropertiesFromNetworkRuleSet populates our NetworkRuleSet from the provided source NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesFromNetworkRuleSet(source *v20210401s.NetworkRuleSet) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Bypass
	ruleSet.Bypass = genruntime.ClonePointerToString(source.Bypass)

	// DefaultAction
	ruleSet.DefaultAction = genruntime.ClonePointerToString(source.DefaultAction)

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule
			err := ipRule.AssignPropertiesFromIPRule(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRule(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRule() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRule() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		ruleSet.PropertyBag = propertyBag
	} else {
		ruleSet.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSet populates the provided destination NetworkRuleSet from our NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesToNetworkRuleSet(destination *v20210401s.NetworkRuleSet) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(ruleSet.PropertyBag)

	// Bypass
	destination.Bypass = genruntime.ClonePointerToString(ruleSet.Bypass)

	// DefaultAction
	destination.DefaultAction = genruntime.ClonePointerToString(ruleSet.DefaultAction)

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v20210401s.IPRule, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v20210401s.IPRule
			err := ipRuleItem.AssignPropertiesToIPRule(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]v20210401s.ResourceAccessRule, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule v20210401s.ResourceAccessRule
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRule(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRule() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v20210401s.VirtualNetworkRule, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v20210401s.VirtualNetworkRule
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRule() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.NetworkRuleSet_STATUS
// Deprecated version of NetworkRuleSet_STATUS. Use v1beta20210401.NetworkRuleSet_STATUS instead
type NetworkRuleSet_STATUS struct {
	Bypass              *string                     `json:"bypass,omitempty"`
	DefaultAction       *string                     `json:"defaultAction,omitempty"`
	IpRules             []IPRule_STATUS             `json:"ipRules,omitempty"`
	PropertyBag         genruntime.PropertyBag      `json:"$propertyBag,omitempty"`
	ResourceAccessRules []ResourceAccessRule_STATUS `json:"resourceAccessRules,omitempty"`
	VirtualNetworkRules []VirtualNetworkRule_STATUS `json:"virtualNetworkRules,omitempty"`
}

// AssignPropertiesFromNetworkRuleSetSTATUS populates our NetworkRuleSet_STATUS from the provided source NetworkRuleSet_STATUS
func (ruleSet *NetworkRuleSet_STATUS) AssignPropertiesFromNetworkRuleSetSTATUS(source *v20210401s.NetworkRuleSet_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Bypass
	ruleSet.Bypass = genruntime.ClonePointerToString(source.Bypass)

	// DefaultAction
	ruleSet.DefaultAction = genruntime.ClonePointerToString(source.DefaultAction)

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule_STATUS, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule_STATUS
			err := ipRule.AssignPropertiesFromIPRuleSTATUS(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRuleSTATUS() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule_STATUS, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule_STATUS
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRuleSTATUS(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRuleSTATUS() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_STATUS, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_STATUS
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRuleSTATUS(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRuleSTATUS() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		ruleSet.PropertyBag = propertyBag
	} else {
		ruleSet.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSetSTATUS populates the provided destination NetworkRuleSet_STATUS from our NetworkRuleSet_STATUS
func (ruleSet *NetworkRuleSet_STATUS) AssignPropertiesToNetworkRuleSetSTATUS(destination *v20210401s.NetworkRuleSet_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(ruleSet.PropertyBag)

	// Bypass
	destination.Bypass = genruntime.ClonePointerToString(ruleSet.Bypass)

	// DefaultAction
	destination.DefaultAction = genruntime.ClonePointerToString(ruleSet.DefaultAction)

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v20210401s.IPRule_STATUS, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v20210401s.IPRule_STATUS
			err := ipRuleItem.AssignPropertiesToIPRuleSTATUS(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRuleSTATUS() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]v20210401s.ResourceAccessRule_STATUS, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule v20210401s.ResourceAccessRule_STATUS
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRuleSTATUS(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRuleSTATUS() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v20210401s.VirtualNetworkRule_STATUS, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v20210401s.VirtualNetworkRule_STATUS
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRuleSTATUS(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRuleSTATUS() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.PrivateEndpointConnection_STATUS_SubResourceEmbedded
// Deprecated version of PrivateEndpointConnection_STATUS_SubResourceEmbedded. Use v1beta20210401.PrivateEndpointConnection_STATUS_SubResourceEmbedded instead
type PrivateEndpointConnection_STATUS_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded populates our PrivateEndpointConnection_STATUS_SubResourceEmbedded from the provided source PrivateEndpointConnection_STATUS_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded(source *v20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded populates the provided destination PrivateEndpointConnection_STATUS_SubResourceEmbedded from our PrivateEndpointConnection_STATUS_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded(destination *v20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.RoutingPreference
// Deprecated version of RoutingPreference. Use v1beta20210401.RoutingPreference instead
type RoutingPreference struct {
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	PublishInternetEndpoints  *bool                  `json:"publishInternetEndpoints,omitempty"`
	PublishMicrosoftEndpoints *bool                  `json:"publishMicrosoftEndpoints,omitempty"`
	RoutingChoice             *string                `json:"routingChoice,omitempty"`
}

// AssignPropertiesFromRoutingPreference populates our RoutingPreference from the provided source RoutingPreference
func (preference *RoutingPreference) AssignPropertiesFromRoutingPreference(source *v20210401s.RoutingPreference) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	preference.RoutingChoice = genruntime.ClonePointerToString(source.RoutingChoice)

	// Update the property bag
	if len(propertyBag) > 0 {
		preference.PropertyBag = propertyBag
	} else {
		preference.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreference populates the provided destination RoutingPreference from our RoutingPreference
func (preference *RoutingPreference) AssignPropertiesToRoutingPreference(destination *v20210401s.RoutingPreference) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(preference.PropertyBag)

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	destination.RoutingChoice = genruntime.ClonePointerToString(preference.RoutingChoice)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.RoutingPreference_STATUS
// Deprecated version of RoutingPreference_STATUS. Use v1beta20210401.RoutingPreference_STATUS instead
type RoutingPreference_STATUS struct {
	PropertyBag               genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	PublishInternetEndpoints  *bool                  `json:"publishInternetEndpoints,omitempty"`
	PublishMicrosoftEndpoints *bool                  `json:"publishMicrosoftEndpoints,omitempty"`
	RoutingChoice             *string                `json:"routingChoice,omitempty"`
}

// AssignPropertiesFromRoutingPreferenceSTATUS populates our RoutingPreference_STATUS from the provided source RoutingPreference_STATUS
func (preference *RoutingPreference_STATUS) AssignPropertiesFromRoutingPreferenceSTATUS(source *v20210401s.RoutingPreference_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	preference.RoutingChoice = genruntime.ClonePointerToString(source.RoutingChoice)

	// Update the property bag
	if len(propertyBag) > 0 {
		preference.PropertyBag = propertyBag
	} else {
		preference.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreferenceSTATUS populates the provided destination RoutingPreference_STATUS from our RoutingPreference_STATUS
func (preference *RoutingPreference_STATUS) AssignPropertiesToRoutingPreferenceSTATUS(destination *v20210401s.RoutingPreference_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(preference.PropertyBag)

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	destination.RoutingChoice = genruntime.ClonePointerToString(preference.RoutingChoice)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.SasPolicy
// Deprecated version of SasPolicy. Use v1beta20210401.SasPolicy instead
type SasPolicy struct {
	ExpirationAction    *string                `json:"expirationAction,omitempty"`
	PropertyBag         genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SasExpirationPeriod *string                `json:"sasExpirationPeriod,omitempty"`
}

// AssignPropertiesFromSasPolicy populates our SasPolicy from the provided source SasPolicy
func (policy *SasPolicy) AssignPropertiesFromSasPolicy(source *v20210401s.SasPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ExpirationAction
	policy.ExpirationAction = genruntime.ClonePointerToString(source.ExpirationAction)

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.ClonePointerToString(source.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSasPolicy populates the provided destination SasPolicy from our SasPolicy
func (policy *SasPolicy) AssignPropertiesToSasPolicy(destination *v20210401s.SasPolicy) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// ExpirationAction
	destination.ExpirationAction = genruntime.ClonePointerToString(policy.ExpirationAction)

	// SasExpirationPeriod
	destination.SasExpirationPeriod = genruntime.ClonePointerToString(policy.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.SasPolicy_STATUS
// Deprecated version of SasPolicy_STATUS. Use v1beta20210401.SasPolicy_STATUS instead
type SasPolicy_STATUS struct {
	ExpirationAction    *string                `json:"expirationAction,omitempty"`
	PropertyBag         genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SasExpirationPeriod *string                `json:"sasExpirationPeriod,omitempty"`
}

// AssignPropertiesFromSasPolicySTATUS populates our SasPolicy_STATUS from the provided source SasPolicy_STATUS
func (policy *SasPolicy_STATUS) AssignPropertiesFromSasPolicySTATUS(source *v20210401s.SasPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ExpirationAction
	policy.ExpirationAction = genruntime.ClonePointerToString(source.ExpirationAction)

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.ClonePointerToString(source.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSasPolicySTATUS populates the provided destination SasPolicy_STATUS from our SasPolicy_STATUS
func (policy *SasPolicy_STATUS) AssignPropertiesToSasPolicySTATUS(destination *v20210401s.SasPolicy_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// ExpirationAction
	destination.ExpirationAction = genruntime.ClonePointerToString(policy.ExpirationAction)

	// SasExpirationPeriod
	destination.SasExpirationPeriod = genruntime.ClonePointerToString(policy.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.Sku
// Deprecated version of Sku. Use v1beta20210401.Sku instead
type Sku struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Tier        *string                `json:"tier,omitempty"`
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v20210401s.Sku) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	sku.Tier = genruntime.ClonePointerToString(source.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		sku.PropertyBag = propertyBag
	} else {
		sku.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v20210401s.Sku) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(sku.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(sku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.Sku_STATUS
// Deprecated version of Sku_STATUS. Use v1beta20210401.Sku_STATUS instead
type Sku_STATUS struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Tier        *string                `json:"tier,omitempty"`
}

// AssignPropertiesFromSkuSTATUS populates our Sku_STATUS from the provided source Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesFromSkuSTATUS(source *v20210401s.Sku_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	sku.Tier = genruntime.ClonePointerToString(source.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		sku.PropertyBag = propertyBag
	} else {
		sku.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuSTATUS populates the provided destination Sku_STATUS from our Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesToSkuSTATUS(destination *v20210401s.Sku_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(sku.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(sku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.StorageAccountOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type StorageAccountOperatorSpec struct {
	PropertyBag genruntime.PropertyBag         `json:"$propertyBag,omitempty"`
	Secrets     *StorageAccountOperatorSecrets `json:"secrets,omitempty"`
}

// AssignPropertiesFromStorageAccountOperatorSpec populates our StorageAccountOperatorSpec from the provided source StorageAccountOperatorSpec
func (operator *StorageAccountOperatorSpec) AssignPropertiesFromStorageAccountOperatorSpec(source *v20210401s.StorageAccountOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Secrets
	if source.Secrets != nil {
		var secret StorageAccountOperatorSecrets
		err := secret.AssignPropertiesFromStorageAccountOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		operator.PropertyBag = propertyBag
	} else {
		operator.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountOperatorSpec populates the provided destination StorageAccountOperatorSpec from our StorageAccountOperatorSpec
func (operator *StorageAccountOperatorSpec) AssignPropertiesToStorageAccountOperatorSpec(destination *v20210401s.StorageAccountOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(operator.PropertyBag)

	// Secrets
	if operator.Secrets != nil {
		var secret v20210401s.StorageAccountOperatorSecrets
		err := operator.Secrets.AssignPropertiesToStorageAccountOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ActiveDirectoryProperties
// Deprecated version of ActiveDirectoryProperties. Use v1beta20210401.ActiveDirectoryProperties instead
type ActiveDirectoryProperties struct {
	AzureStorageSid   *string                `json:"azureStorageSid,omitempty"`
	DomainGuid        *string                `json:"domainGuid,omitempty"`
	DomainName        *string                `json:"domainName,omitempty"`
	DomainSid         *string                `json:"domainSid,omitempty"`
	ForestName        *string                `json:"forestName,omitempty"`
	NetBiosDomainName *string                `json:"netBiosDomainName,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromActiveDirectoryProperties populates our ActiveDirectoryProperties from the provided source ActiveDirectoryProperties
func (properties *ActiveDirectoryProperties) AssignPropertiesFromActiveDirectoryProperties(source *v20210401s.ActiveDirectoryProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.ClonePointerToString(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.ClonePointerToString(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.ClonePointerToString(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.ClonePointerToString(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.ClonePointerToString(source.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryProperties populates the provided destination ActiveDirectoryProperties from our ActiveDirectoryProperties
func (properties *ActiveDirectoryProperties) AssignPropertiesToActiveDirectoryProperties(destination *v20210401s.ActiveDirectoryProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// AzureStorageSid
	destination.AzureStorageSid = genruntime.ClonePointerToString(properties.AzureStorageSid)

	// DomainGuid
	destination.DomainGuid = genruntime.ClonePointerToString(properties.DomainGuid)

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(properties.DomainName)

	// DomainSid
	destination.DomainSid = genruntime.ClonePointerToString(properties.DomainSid)

	// ForestName
	destination.ForestName = genruntime.ClonePointerToString(properties.ForestName)

	// NetBiosDomainName
	destination.NetBiosDomainName = genruntime.ClonePointerToString(properties.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ActiveDirectoryProperties_STATUS
// Deprecated version of ActiveDirectoryProperties_STATUS. Use v1beta20210401.ActiveDirectoryProperties_STATUS instead
type ActiveDirectoryProperties_STATUS struct {
	AzureStorageSid   *string                `json:"azureStorageSid,omitempty"`
	DomainGuid        *string                `json:"domainGuid,omitempty"`
	DomainName        *string                `json:"domainName,omitempty"`
	DomainSid         *string                `json:"domainSid,omitempty"`
	ForestName        *string                `json:"forestName,omitempty"`
	NetBiosDomainName *string                `json:"netBiosDomainName,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromActiveDirectoryPropertiesSTATUS populates our ActiveDirectoryProperties_STATUS from the provided source ActiveDirectoryProperties_STATUS
func (properties *ActiveDirectoryProperties_STATUS) AssignPropertiesFromActiveDirectoryPropertiesSTATUS(source *v20210401s.ActiveDirectoryProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.ClonePointerToString(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.ClonePointerToString(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.ClonePointerToString(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.ClonePointerToString(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.ClonePointerToString(source.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryPropertiesSTATUS populates the provided destination ActiveDirectoryProperties_STATUS from our ActiveDirectoryProperties_STATUS
func (properties *ActiveDirectoryProperties_STATUS) AssignPropertiesToActiveDirectoryPropertiesSTATUS(destination *v20210401s.ActiveDirectoryProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// AzureStorageSid
	destination.AzureStorageSid = genruntime.ClonePointerToString(properties.AzureStorageSid)

	// DomainGuid
	destination.DomainGuid = genruntime.ClonePointerToString(properties.DomainGuid)

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(properties.DomainName)

	// DomainSid
	destination.DomainSid = genruntime.ClonePointerToString(properties.DomainSid)

	// ForestName
	destination.ForestName = genruntime.ClonePointerToString(properties.ForestName)

	// NetBiosDomainName
	destination.NetBiosDomainName = genruntime.ClonePointerToString(properties.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.BlobRestoreParameters_STATUS
// Deprecated version of BlobRestoreParameters_STATUS. Use v1beta20210401.BlobRestoreParameters_STATUS instead
type BlobRestoreParameters_STATUS struct {
	BlobRanges    []BlobRestoreRange_STATUS `json:"blobRanges,omitempty"`
	PropertyBag   genruntime.PropertyBag    `json:"$propertyBag,omitempty"`
	TimeToRestore *string                   `json:"timeToRestore,omitempty"`
}

// AssignPropertiesFromBlobRestoreParametersSTATUS populates our BlobRestoreParameters_STATUS from the provided source BlobRestoreParameters_STATUS
func (parameters *BlobRestoreParameters_STATUS) AssignPropertiesFromBlobRestoreParametersSTATUS(source *v20210401s.BlobRestoreParameters_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BlobRanges
	if source.BlobRanges != nil {
		blobRangeList := make([]BlobRestoreRange_STATUS, len(source.BlobRanges))
		for blobRangeIndex, blobRangeItem := range source.BlobRanges {
			// Shadow the loop variable to avoid aliasing
			blobRangeItem := blobRangeItem
			var blobRange BlobRestoreRange_STATUS
			err := blobRange.AssignPropertiesFromBlobRestoreRangeSTATUS(&blobRangeItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreRangeSTATUS() to populate field BlobRanges")
			}
			blobRangeList[blobRangeIndex] = blobRange
		}
		parameters.BlobRanges = blobRangeList
	} else {
		parameters.BlobRanges = nil
	}

	// TimeToRestore
	parameters.TimeToRestore = genruntime.ClonePointerToString(source.TimeToRestore)

	// Update the property bag
	if len(propertyBag) > 0 {
		parameters.PropertyBag = propertyBag
	} else {
		parameters.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreParametersSTATUS populates the provided destination BlobRestoreParameters_STATUS from our BlobRestoreParameters_STATUS
func (parameters *BlobRestoreParameters_STATUS) AssignPropertiesToBlobRestoreParametersSTATUS(destination *v20210401s.BlobRestoreParameters_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(parameters.PropertyBag)

	// BlobRanges
	if parameters.BlobRanges != nil {
		blobRangeList := make([]v20210401s.BlobRestoreRange_STATUS, len(parameters.BlobRanges))
		for blobRangeIndex, blobRangeItem := range parameters.BlobRanges {
			// Shadow the loop variable to avoid aliasing
			blobRangeItem := blobRangeItem
			var blobRange v20210401s.BlobRestoreRange_STATUS
			err := blobRangeItem.AssignPropertiesToBlobRestoreRangeSTATUS(&blobRange)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreRangeSTATUS() to populate field BlobRanges")
			}
			blobRangeList[blobRangeIndex] = blobRange
		}
		destination.BlobRanges = blobRangeList
	} else {
		destination.BlobRanges = nil
	}

	// TimeToRestore
	destination.TimeToRestore = genruntime.ClonePointerToString(parameters.TimeToRestore)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.EncryptionIdentity
// Deprecated version of EncryptionIdentity. Use v1beta20210401.EncryptionIdentity instead
type EncryptionIdentity struct {
	PropertyBag                   genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	UserAssignedIdentityReference *genruntime.ResourceReference `armReference:"UserAssignedIdentity" json:"userAssignedIdentityReference,omitempty"`
}

// AssignPropertiesFromEncryptionIdentity populates our EncryptionIdentity from the provided source EncryptionIdentity
func (identity *EncryptionIdentity) AssignPropertiesFromEncryptionIdentity(source *v20210401s.EncryptionIdentity) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// UserAssignedIdentityReference
	if source.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := source.UserAssignedIdentityReference.Copy()
		identity.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		identity.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		identity.PropertyBag = propertyBag
	} else {
		identity.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentity populates the provided destination EncryptionIdentity from our EncryptionIdentity
func (identity *EncryptionIdentity) AssignPropertiesToEncryptionIdentity(destination *v20210401s.EncryptionIdentity) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(identity.PropertyBag)

	// UserAssignedIdentityReference
	if identity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := identity.UserAssignedIdentityReference.Copy()
		destination.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		destination.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.EncryptionIdentity_STATUS
// Deprecated version of EncryptionIdentity_STATUS. Use v1beta20210401.EncryptionIdentity_STATUS instead
type EncryptionIdentity_STATUS struct {
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	UserAssignedIdentity *string                `json:"userAssignedIdentity,omitempty"`
}

// AssignPropertiesFromEncryptionIdentitySTATUS populates our EncryptionIdentity_STATUS from the provided source EncryptionIdentity_STATUS
func (identity *EncryptionIdentity_STATUS) AssignPropertiesFromEncryptionIdentitySTATUS(source *v20210401s.EncryptionIdentity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// UserAssignedIdentity
	identity.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		identity.PropertyBag = propertyBag
	} else {
		identity.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentitySTATUS populates the provided destination EncryptionIdentity_STATUS from our EncryptionIdentity_STATUS
func (identity *EncryptionIdentity_STATUS) AssignPropertiesToEncryptionIdentitySTATUS(destination *v20210401s.EncryptionIdentity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(identity.PropertyBag)

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(identity.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.EncryptionServices
// Deprecated version of EncryptionServices. Use v1beta20210401.EncryptionServices instead
type EncryptionServices struct {
	Blob        *EncryptionService     `json:"blob,omitempty"`
	File        *EncryptionService     `json:"file,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Queue       *EncryptionService     `json:"queue,omitempty"`
	Table       *EncryptionService     `json:"table,omitempty"`
}

// AssignPropertiesFromEncryptionServices populates our EncryptionServices from the provided source EncryptionServices
func (services *EncryptionServices) AssignPropertiesFromEncryptionServices(source *v20210401s.EncryptionServices) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Blob
	if source.Blob != nil {
		var blob EncryptionService
		err := blob.AssignPropertiesFromEncryptionService(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService
		err := file.AssignPropertiesFromEncryptionService(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService
		err := queue.AssignPropertiesFromEncryptionService(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService
		err := table.AssignPropertiesFromEncryptionService(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		services.PropertyBag = propertyBag
	} else {
		services.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServices populates the provided destination EncryptionServices from our EncryptionServices
func (services *EncryptionServices) AssignPropertiesToEncryptionServices(destination *v20210401s.EncryptionServices) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(services.PropertyBag)

	// Blob
	if services.Blob != nil {
		var blob v20210401s.EncryptionService
		err := services.Blob.AssignPropertiesToEncryptionService(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file v20210401s.EncryptionService
		err := services.File.AssignPropertiesToEncryptionService(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue v20210401s.EncryptionService
		err := services.Queue.AssignPropertiesToEncryptionService(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table v20210401s.EncryptionService
		err := services.Table.AssignPropertiesToEncryptionService(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.EncryptionServices_STATUS
// Deprecated version of EncryptionServices_STATUS. Use v1beta20210401.EncryptionServices_STATUS instead
type EncryptionServices_STATUS struct {
	Blob        *EncryptionService_STATUS `json:"blob,omitempty"`
	File        *EncryptionService_STATUS `json:"file,omitempty"`
	PropertyBag genruntime.PropertyBag    `json:"$propertyBag,omitempty"`
	Queue       *EncryptionService_STATUS `json:"queue,omitempty"`
	Table       *EncryptionService_STATUS `json:"table,omitempty"`
}

// AssignPropertiesFromEncryptionServicesSTATUS populates our EncryptionServices_STATUS from the provided source EncryptionServices_STATUS
func (services *EncryptionServices_STATUS) AssignPropertiesFromEncryptionServicesSTATUS(source *v20210401s.EncryptionServices_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Blob
	if source.Blob != nil {
		var blob EncryptionService_STATUS
		err := blob.AssignPropertiesFromEncryptionServiceSTATUS(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService_STATUS
		err := file.AssignPropertiesFromEncryptionServiceSTATUS(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService_STATUS
		err := queue.AssignPropertiesFromEncryptionServiceSTATUS(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService_STATUS
		err := table.AssignPropertiesFromEncryptionServiceSTATUS(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		services.PropertyBag = propertyBag
	} else {
		services.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServicesSTATUS populates the provided destination EncryptionServices_STATUS from our EncryptionServices_STATUS
func (services *EncryptionServices_STATUS) AssignPropertiesToEncryptionServicesSTATUS(destination *v20210401s.EncryptionServices_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(services.PropertyBag)

	// Blob
	if services.Blob != nil {
		var blob v20210401s.EncryptionService_STATUS
		err := services.Blob.AssignPropertiesToEncryptionServiceSTATUS(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file v20210401s.EncryptionService_STATUS
		err := services.File.AssignPropertiesToEncryptionServiceSTATUS(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue v20210401s.EncryptionService_STATUS
		err := services.Queue.AssignPropertiesToEncryptionServiceSTATUS(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table v20210401s.EncryptionService_STATUS
		err := services.Table.AssignPropertiesToEncryptionServiceSTATUS(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.IPRule
// Deprecated version of IPRule. Use v1beta20210401.IPRule instead
type IPRule struct {
	Action      *string                `json:"action,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// AssignPropertiesFromIPRule populates our IPRule from the provided source IPRule
func (rule *IPRule) AssignPropertiesFromIPRule(source *v20210401s.IPRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPRule populates the provided destination IPRule from our IPRule
func (rule *IPRule) AssignPropertiesToIPRule(destination *v20210401s.IPRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.IPRule_STATUS
// Deprecated version of IPRule_STATUS. Use v1beta20210401.IPRule_STATUS instead
type IPRule_STATUS struct {
	Action      *string                `json:"action,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// AssignPropertiesFromIPRuleSTATUS populates our IPRule_STATUS from the provided source IPRule_STATUS
func (rule *IPRule_STATUS) AssignPropertiesFromIPRuleSTATUS(source *v20210401s.IPRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPRuleSTATUS populates the provided destination IPRule_STATUS from our IPRule_STATUS
func (rule *IPRule_STATUS) AssignPropertiesToIPRuleSTATUS(destination *v20210401s.IPRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.KeyVaultProperties
// Deprecated version of KeyVaultProperties. Use v1beta20210401.KeyVaultProperties instead
type KeyVaultProperties struct {
	Keyname     *string                `json:"keyname,omitempty"`
	Keyvaulturi *string                `json:"keyvaulturi,omitempty"`
	Keyversion  *string                `json:"keyversion,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *v20210401s.KeyVaultProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *v20210401s.KeyVaultProperties) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.KeyVaultProperties_STATUS
// Deprecated version of KeyVaultProperties_STATUS. Use v1beta20210401.KeyVaultProperties_STATUS instead
type KeyVaultProperties_STATUS struct {
	CurrentVersionedKeyIdentifier *string                `json:"currentVersionedKeyIdentifier,omitempty"`
	Keyname                       *string                `json:"keyname,omitempty"`
	Keyvaulturi                   *string                `json:"keyvaulturi,omitempty"`
	Keyversion                    *string                `json:"keyversion,omitempty"`
	LastKeyRotationTimestamp      *string                `json:"lastKeyRotationTimestamp,omitempty"`
	PropertyBag                   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromKeyVaultPropertiesSTATUS populates our KeyVaultProperties_STATUS from the provided source KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignPropertiesFromKeyVaultPropertiesSTATUS(source *v20210401s.KeyVaultProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// CurrentVersionedKeyIdentifier
	properties.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(source.CurrentVersionedKeyIdentifier)

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// LastKeyRotationTimestamp
	properties.LastKeyRotationTimestamp = genruntime.ClonePointerToString(source.LastKeyRotationTimestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		properties.PropertyBag = propertyBag
	} else {
		properties.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesSTATUS populates the provided destination KeyVaultProperties_STATUS from our KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignPropertiesToKeyVaultPropertiesSTATUS(destination *v20210401s.KeyVaultProperties_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(properties.PropertyBag)

	// CurrentVersionedKeyIdentifier
	destination.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(properties.CurrentVersionedKeyIdentifier)

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// LastKeyRotationTimestamp
	destination.LastKeyRotationTimestamp = genruntime.ClonePointerToString(properties.LastKeyRotationTimestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ResourceAccessRule
// Deprecated version of ResourceAccessRule. Use v1beta20210401.ResourceAccessRule instead
type ResourceAccessRule struct {
	PropertyBag       genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
	TenantId          *string                       `json:"tenantId,omitempty"`
}

// AssignPropertiesFromResourceAccessRule populates our ResourceAccessRule from the provided source ResourceAccessRule
func (rule *ResourceAccessRule) AssignPropertiesFromResourceAccessRule(source *v20210401s.ResourceAccessRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		rule.ResourceReference = &resourceReference
	} else {
		rule.ResourceReference = nil
	}

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRule populates the provided destination ResourceAccessRule from our ResourceAccessRule
func (rule *ResourceAccessRule) AssignPropertiesToResourceAccessRule(destination *v20210401s.ResourceAccessRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// ResourceReference
	if rule.ResourceReference != nil {
		resourceReference := rule.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.ResourceAccessRule_STATUS
// Deprecated version of ResourceAccessRule_STATUS. Use v1beta20210401.ResourceAccessRule_STATUS instead
type ResourceAccessRule_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId  *string                `json:"resourceId,omitempty"`
	TenantId    *string                `json:"tenantId,omitempty"`
}

// AssignPropertiesFromResourceAccessRuleSTATUS populates our ResourceAccessRule_STATUS from the provided source ResourceAccessRule_STATUS
func (rule *ResourceAccessRule_STATUS) AssignPropertiesFromResourceAccessRuleSTATUS(source *v20210401s.ResourceAccessRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ResourceId
	rule.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRuleSTATUS populates the provided destination ResourceAccessRule_STATUS from our ResourceAccessRule_STATUS
func (rule *ResourceAccessRule_STATUS) AssignPropertiesToResourceAccessRuleSTATUS(destination *v20210401s.ResourceAccessRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(rule.ResourceId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.StorageAccountInternetEndpoints_STATUS
// Deprecated version of StorageAccountInternetEndpoints_STATUS. Use v1beta20210401.StorageAccountInternetEndpoints_STATUS instead
type StorageAccountInternetEndpoints_STATUS struct {
	Blob        *string                `json:"blob,omitempty"`
	Dfs         *string                `json:"dfs,omitempty"`
	File        *string                `json:"file,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Web         *string                `json:"web,omitempty"`
}

// AssignPropertiesFromStorageAccountInternetEndpointsSTATUS populates our StorageAccountInternetEndpoints_STATUS from the provided source StorageAccountInternetEndpoints_STATUS
func (endpoints *StorageAccountInternetEndpoints_STATUS) AssignPropertiesFromStorageAccountInternetEndpointsSTATUS(source *v20210401s.StorageAccountInternetEndpoints_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		endpoints.PropertyBag = propertyBag
	} else {
		endpoints.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountInternetEndpointsSTATUS populates the provided destination StorageAccountInternetEndpoints_STATUS from our StorageAccountInternetEndpoints_STATUS
func (endpoints *StorageAccountInternetEndpoints_STATUS) AssignPropertiesToStorageAccountInternetEndpointsSTATUS(destination *v20210401s.StorageAccountInternetEndpoints_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(endpoints.PropertyBag)

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.StorageAccountMicrosoftEndpoints_STATUS
// Deprecated version of StorageAccountMicrosoftEndpoints_STATUS. Use v1beta20210401.StorageAccountMicrosoftEndpoints_STATUS instead
type StorageAccountMicrosoftEndpoints_STATUS struct {
	Blob        *string                `json:"blob,omitempty"`
	Dfs         *string                `json:"dfs,omitempty"`
	File        *string                `json:"file,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Queue       *string                `json:"queue,omitempty"`
	Table       *string                `json:"table,omitempty"`
	Web         *string                `json:"web,omitempty"`
}

// AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS populates our StorageAccountMicrosoftEndpoints_STATUS from the provided source StorageAccountMicrosoftEndpoints_STATUS
func (endpoints *StorageAccountMicrosoftEndpoints_STATUS) AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS(source *v20210401s.StorageAccountMicrosoftEndpoints_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// Queue
	endpoints.Queue = genruntime.ClonePointerToString(source.Queue)

	// Table
	endpoints.Table = genruntime.ClonePointerToString(source.Table)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		endpoints.PropertyBag = propertyBag
	} else {
		endpoints.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS populates the provided destination StorageAccountMicrosoftEndpoints_STATUS from our StorageAccountMicrosoftEndpoints_STATUS
func (endpoints *StorageAccountMicrosoftEndpoints_STATUS) AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS(destination *v20210401s.StorageAccountMicrosoftEndpoints_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(endpoints.PropertyBag)

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// Queue
	destination.Queue = genruntime.ClonePointerToString(endpoints.Queue)

	// Table
	destination.Table = genruntime.ClonePointerToString(endpoints.Table)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.StorageAccountOperatorSecrets
type StorageAccountOperatorSecrets struct {
	BlobEndpoint  *genruntime.SecretDestination `json:"blobEndpoint,omitempty"`
	DfsEndpoint   *genruntime.SecretDestination `json:"dfsEndpoint,omitempty"`
	FileEndpoint  *genruntime.SecretDestination `json:"fileEndpoint,omitempty"`
	Key1          *genruntime.SecretDestination `json:"key1,omitempty"`
	Key2          *genruntime.SecretDestination `json:"key2,omitempty"`
	PropertyBag   genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	QueueEndpoint *genruntime.SecretDestination `json:"queueEndpoint,omitempty"`
	TableEndpoint *genruntime.SecretDestination `json:"tableEndpoint,omitempty"`
	WebEndpoint   *genruntime.SecretDestination `json:"webEndpoint,omitempty"`
}

// AssignPropertiesFromStorageAccountOperatorSecrets populates our StorageAccountOperatorSecrets from the provided source StorageAccountOperatorSecrets
func (secrets *StorageAccountOperatorSecrets) AssignPropertiesFromStorageAccountOperatorSecrets(source *v20210401s.StorageAccountOperatorSecrets) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// BlobEndpoint
	if source.BlobEndpoint != nil {
		blobEndpoint := source.BlobEndpoint.Copy()
		secrets.BlobEndpoint = &blobEndpoint
	} else {
		secrets.BlobEndpoint = nil
	}

	// DfsEndpoint
	if source.DfsEndpoint != nil {
		dfsEndpoint := source.DfsEndpoint.Copy()
		secrets.DfsEndpoint = &dfsEndpoint
	} else {
		secrets.DfsEndpoint = nil
	}

	// FileEndpoint
	if source.FileEndpoint != nil {
		fileEndpoint := source.FileEndpoint.Copy()
		secrets.FileEndpoint = &fileEndpoint
	} else {
		secrets.FileEndpoint = nil
	}

	// Key1
	if source.Key1 != nil {
		key1 := source.Key1.Copy()
		secrets.Key1 = &key1
	} else {
		secrets.Key1 = nil
	}

	// Key2
	if source.Key2 != nil {
		key2 := source.Key2.Copy()
		secrets.Key2 = &key2
	} else {
		secrets.Key2 = nil
	}

	// QueueEndpoint
	if source.QueueEndpoint != nil {
		queueEndpoint := source.QueueEndpoint.Copy()
		secrets.QueueEndpoint = &queueEndpoint
	} else {
		secrets.QueueEndpoint = nil
	}

	// TableEndpoint
	if source.TableEndpoint != nil {
		tableEndpoint := source.TableEndpoint.Copy()
		secrets.TableEndpoint = &tableEndpoint
	} else {
		secrets.TableEndpoint = nil
	}

	// WebEndpoint
	if source.WebEndpoint != nil {
		webEndpoint := source.WebEndpoint.Copy()
		secrets.WebEndpoint = &webEndpoint
	} else {
		secrets.WebEndpoint = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		secrets.PropertyBag = propertyBag
	} else {
		secrets.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountOperatorSecrets populates the provided destination StorageAccountOperatorSecrets from our StorageAccountOperatorSecrets
func (secrets *StorageAccountOperatorSecrets) AssignPropertiesToStorageAccountOperatorSecrets(destination *v20210401s.StorageAccountOperatorSecrets) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(secrets.PropertyBag)

	// BlobEndpoint
	if secrets.BlobEndpoint != nil {
		blobEndpoint := secrets.BlobEndpoint.Copy()
		destination.BlobEndpoint = &blobEndpoint
	} else {
		destination.BlobEndpoint = nil
	}

	// DfsEndpoint
	if secrets.DfsEndpoint != nil {
		dfsEndpoint := secrets.DfsEndpoint.Copy()
		destination.DfsEndpoint = &dfsEndpoint
	} else {
		destination.DfsEndpoint = nil
	}

	// FileEndpoint
	if secrets.FileEndpoint != nil {
		fileEndpoint := secrets.FileEndpoint.Copy()
		destination.FileEndpoint = &fileEndpoint
	} else {
		destination.FileEndpoint = nil
	}

	// Key1
	if secrets.Key1 != nil {
		key1 := secrets.Key1.Copy()
		destination.Key1 = &key1
	} else {
		destination.Key1 = nil
	}

	// Key2
	if secrets.Key2 != nil {
		key2 := secrets.Key2.Copy()
		destination.Key2 = &key2
	} else {
		destination.Key2 = nil
	}

	// QueueEndpoint
	if secrets.QueueEndpoint != nil {
		queueEndpoint := secrets.QueueEndpoint.Copy()
		destination.QueueEndpoint = &queueEndpoint
	} else {
		destination.QueueEndpoint = nil
	}

	// TableEndpoint
	if secrets.TableEndpoint != nil {
		tableEndpoint := secrets.TableEndpoint.Copy()
		destination.TableEndpoint = &tableEndpoint
	} else {
		destination.TableEndpoint = nil
	}

	// WebEndpoint
	if secrets.WebEndpoint != nil {
		webEndpoint := secrets.WebEndpoint.Copy()
		destination.WebEndpoint = &webEndpoint
	} else {
		destination.WebEndpoint = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.UserAssignedIdentity_STATUS
// Deprecated version of UserAssignedIdentity_STATUS. Use v1beta20210401.UserAssignedIdentity_STATUS instead
type UserAssignedIdentity_STATUS struct {
	ClientId    *string                `json:"clientId,omitempty"`
	PrincipalId *string                `json:"principalId,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromUserAssignedIdentitySTATUS populates our UserAssignedIdentity_STATUS from the provided source UserAssignedIdentity_STATUS
func (identity *UserAssignedIdentity_STATUS) AssignPropertiesFromUserAssignedIdentitySTATUS(source *v20210401s.UserAssignedIdentity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ClientId
	identity.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		identity.PropertyBag = propertyBag
	} else {
		identity.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentitySTATUS populates the provided destination UserAssignedIdentity_STATUS from our UserAssignedIdentity_STATUS
func (identity *UserAssignedIdentity_STATUS) AssignPropertiesToUserAssignedIdentitySTATUS(destination *v20210401s.UserAssignedIdentity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(identity.PropertyBag)

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identity.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.VirtualNetworkRule
// Deprecated version of VirtualNetworkRule. Use v1beta20210401.VirtualNetworkRule instead
type VirtualNetworkRule struct {
	Action      *string                `json:"action,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`

	// +kubebuilder:validation:Required
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
	State     *string                       `json:"state,omitempty"`
}

// AssignPropertiesFromVirtualNetworkRule populates our VirtualNetworkRule from the provided source VirtualNetworkRule
func (rule *VirtualNetworkRule) AssignPropertiesFromVirtualNetworkRule(source *v20210401s.VirtualNetworkRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		rule.Reference = &reference
	} else {
		rule.Reference = nil
	}

	// State
	rule.State = genruntime.ClonePointerToString(source.State)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule populates the provided destination VirtualNetworkRule from our VirtualNetworkRule
func (rule *VirtualNetworkRule) AssignPropertiesToVirtualNetworkRule(destination *v20210401s.VirtualNetworkRule) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// Reference
	if rule.Reference != nil {
		reference := rule.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// State
	destination.State = genruntime.ClonePointerToString(rule.State)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.VirtualNetworkRule_STATUS
// Deprecated version of VirtualNetworkRule_STATUS. Use v1beta20210401.VirtualNetworkRule_STATUS instead
type VirtualNetworkRule_STATUS struct {
	Action      *string                `json:"action,omitempty"`
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	State       *string                `json:"state,omitempty"`
}

// AssignPropertiesFromVirtualNetworkRuleSTATUS populates our VirtualNetworkRule_STATUS from the provided source VirtualNetworkRule_STATUS
func (rule *VirtualNetworkRule_STATUS) AssignPropertiesFromVirtualNetworkRuleSTATUS(source *v20210401s.VirtualNetworkRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Action
	rule.Action = genruntime.ClonePointerToString(source.Action)

	// Id
	rule.Id = genruntime.ClonePointerToString(source.Id)

	// State
	rule.State = genruntime.ClonePointerToString(source.State)

	// Update the property bag
	if len(propertyBag) > 0 {
		rule.PropertyBag = propertyBag
	} else {
		rule.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRuleSTATUS populates the provided destination VirtualNetworkRule_STATUS from our VirtualNetworkRule_STATUS
func (rule *VirtualNetworkRule_STATUS) AssignPropertiesToVirtualNetworkRuleSTATUS(destination *v20210401s.VirtualNetworkRule_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rule.PropertyBag)

	// Action
	destination.Action = genruntime.ClonePointerToString(rule.Action)

	// Id
	destination.Id = genruntime.ClonePointerToString(rule.Id)

	// State
	destination.State = genruntime.ClonePointerToString(rule.State)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.BlobRestoreRange_STATUS
// Deprecated version of BlobRestoreRange_STATUS. Use v1beta20210401.BlobRestoreRange_STATUS instead
type BlobRestoreRange_STATUS struct {
	EndRange    *string                `json:"endRange,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	StartRange  *string                `json:"startRange,omitempty"`
}

// AssignPropertiesFromBlobRestoreRangeSTATUS populates our BlobRestoreRange_STATUS from the provided source BlobRestoreRange_STATUS
func (restoreRange *BlobRestoreRange_STATUS) AssignPropertiesFromBlobRestoreRangeSTATUS(source *v20210401s.BlobRestoreRange_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// EndRange
	restoreRange.EndRange = genruntime.ClonePointerToString(source.EndRange)

	// StartRange
	restoreRange.StartRange = genruntime.ClonePointerToString(source.StartRange)

	// Update the property bag
	if len(propertyBag) > 0 {
		restoreRange.PropertyBag = propertyBag
	} else {
		restoreRange.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreRangeSTATUS populates the provided destination BlobRestoreRange_STATUS from our BlobRestoreRange_STATUS
func (restoreRange *BlobRestoreRange_STATUS) AssignPropertiesToBlobRestoreRangeSTATUS(destination *v20210401s.BlobRestoreRange_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(restoreRange.PropertyBag)

	// EndRange
	destination.EndRange = genruntime.ClonePointerToString(restoreRange.EndRange)

	// StartRange
	destination.StartRange = genruntime.ClonePointerToString(restoreRange.StartRange)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.EncryptionService
// Deprecated version of EncryptionService. Use v1beta20210401.EncryptionService instead
type EncryptionService struct {
	Enabled     *bool                  `json:"enabled,omitempty"`
	KeyType     *string                `json:"keyType,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromEncryptionService populates our EncryptionService from the provided source EncryptionService
func (service *EncryptionService) AssignPropertiesFromEncryptionService(source *v20210401s.EncryptionService) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	service.KeyType = genruntime.ClonePointerToString(source.KeyType)

	// Update the property bag
	if len(propertyBag) > 0 {
		service.PropertyBag = propertyBag
	} else {
		service.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionService populates the provided destination EncryptionService from our EncryptionService
func (service *EncryptionService) AssignPropertiesToEncryptionService(destination *v20210401s.EncryptionService) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(service.PropertyBag)

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	destination.KeyType = genruntime.ClonePointerToString(service.KeyType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20210401.EncryptionService_STATUS
// Deprecated version of EncryptionService_STATUS. Use v1beta20210401.EncryptionService_STATUS instead
type EncryptionService_STATUS struct {
	Enabled         *bool                  `json:"enabled,omitempty"`
	KeyType         *string                `json:"keyType,omitempty"`
	LastEnabledTime *string                `json:"lastEnabledTime,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromEncryptionServiceSTATUS populates our EncryptionService_STATUS from the provided source EncryptionService_STATUS
func (service *EncryptionService_STATUS) AssignPropertiesFromEncryptionServiceSTATUS(source *v20210401s.EncryptionService_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	service.KeyType = genruntime.ClonePointerToString(source.KeyType)

	// LastEnabledTime
	service.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		service.PropertyBag = propertyBag
	} else {
		service.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServiceSTATUS populates the provided destination EncryptionService_STATUS from our EncryptionService_STATUS
func (service *EncryptionService_STATUS) AssignPropertiesToEncryptionServiceSTATUS(destination *v20210401s.EncryptionService_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(service.PropertyBag)

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	destination.KeyType = genruntime.ClonePointerToString(service.KeyType)

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(service.LastEnabledTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&StorageAccount{}, &StorageAccountList{})
}
