// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageQueue_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageQueue_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageQueueStatusARM, StorageQueueStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageQueueStatusARM runs a test to see if a specific instance of StorageQueue_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageQueueStatusARM(subject StorageQueue_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageQueue_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageQueue_StatusARM instances for property testing - lazily instantiated by
// StorageQueueStatusARMGenerator()
var storageQueueStatusARMGenerator gopter.Gen

// StorageQueueStatusARMGenerator returns a generator of StorageQueue_StatusARM instances for property testing.
// We first initialize storageQueueStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageQueueStatusARMGenerator() gopter.Gen {
	if storageQueueStatusARMGenerator != nil {
		return storageQueueStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageQueueStatusARM(generators)
	storageQueueStatusARMGenerator = gen.Struct(reflect.TypeOf(StorageQueue_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageQueueStatusARM(generators)
	AddRelatedPropertyGeneratorsForStorageQueueStatusARM(generators)
	storageQueueStatusARMGenerator = gen.Struct(reflect.TypeOf(StorageQueue_StatusARM{}), generators)

	return storageQueueStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageQueueStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageQueueStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForStorageQueueStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageQueueStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QueuePropertiesStatusARMGenerator())
}

func Test_QueueProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueuePropertiesStatusARM, QueuePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueuePropertiesStatusARM runs a test to see if a specific instance of QueueProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueuePropertiesStatusARM(subject QueueProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueProperties_StatusARM instances for property testing - lazily instantiated by
// QueuePropertiesStatusARMGenerator()
var queuePropertiesStatusARMGenerator gopter.Gen

// QueuePropertiesStatusARMGenerator returns a generator of QueueProperties_StatusARM instances for property testing.
func QueuePropertiesStatusARMGenerator() gopter.Gen {
	if queuePropertiesStatusARMGenerator != nil {
		return queuePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueuePropertiesStatusARM(generators)
	queuePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(QueueProperties_StatusARM{}), generators)

	return queuePropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForQueuePropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQueuePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["ApproximateMessageCount"] = gen.PtrOf(gen.Int())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}
