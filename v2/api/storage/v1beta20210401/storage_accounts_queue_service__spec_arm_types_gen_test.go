// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsQueueService_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueService_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueService_SpecARM, StorageAccountsQueueService_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueService_SpecARM runs a test to see if a specific instance of StorageAccountsQueueService_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueService_SpecARM(subject StorageAccountsQueueService_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueService_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueService_SpecARM instances for property testing - lazily instantiated by
// StorageAccountsQueueService_SpecARMGenerator()
var storageAccountsQueueService_SpecARMGenerator gopter.Gen

// StorageAccountsQueueService_SpecARMGenerator returns a generator of StorageAccountsQueueService_SpecARM instances for property testing.
// We first initialize storageAccountsQueueService_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsQueueService_SpecARMGenerator() gopter.Gen {
	if storageAccountsQueueService_SpecARMGenerator != nil {
		return storageAccountsQueueService_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueService_SpecARM(generators)
	storageAccountsQueueService_SpecARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueService_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueService_SpecARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueService_SpecARM(generators)
	storageAccountsQueueService_SpecARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueService_SpecARM{}), generators)

	return storageAccountsQueueService_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsQueueService_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsQueueService_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueService_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueService_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageAccountsQueueService_Spec_PropertiesARMGenerator())
}

func Test_StorageAccountsQueueService_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueService_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueService_Spec_PropertiesARM, StorageAccountsQueueService_Spec_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueService_Spec_PropertiesARM runs a test to see if a specific instance of StorageAccountsQueueService_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueService_Spec_PropertiesARM(subject StorageAccountsQueueService_Spec_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueService_Spec_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueService_Spec_PropertiesARM instances for property testing - lazily instantiated by
// StorageAccountsQueueService_Spec_PropertiesARMGenerator()
var storageAccountsQueueService_Spec_PropertiesARMGenerator gopter.Gen

// StorageAccountsQueueService_Spec_PropertiesARMGenerator returns a generator of StorageAccountsQueueService_Spec_PropertiesARM instances for property testing.
func StorageAccountsQueueService_Spec_PropertiesARMGenerator() gopter.Gen {
	if storageAccountsQueueService_Spec_PropertiesARMGenerator != nil {
		return storageAccountsQueueService_Spec_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueService_Spec_PropertiesARM(generators)
	storageAccountsQueueService_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueService_Spec_PropertiesARM{}), generators)

	return storageAccountsQueueService_Spec_PropertiesARMGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueService_Spec_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueService_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(CorsRulesARMGenerator())
}
