// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_QueueServiceProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueServiceProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueueServicePropertiesStatusARM, QueueServicePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueueServicePropertiesStatusARM runs a test to see if a specific instance of QueueServiceProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueueServicePropertiesStatusARM(subject QueueServiceProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueServiceProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueServiceProperties_StatusARM instances for property testing - lazily instantiated by
// QueueServicePropertiesStatusARMGenerator()
var queueServicePropertiesStatusARMGenerator gopter.Gen

// QueueServicePropertiesStatusARMGenerator returns a generator of QueueServiceProperties_StatusARM instances for property testing.
// We first initialize queueServicePropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QueueServicePropertiesStatusARMGenerator() gopter.Gen {
	if queueServicePropertiesStatusARMGenerator != nil {
		return queueServicePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueueServicePropertiesStatusARM(generators)
	queueServicePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(QueueServiceProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueueServicePropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForQueueServicePropertiesStatusARM(generators)
	queueServicePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(QueueServiceProperties_StatusARM{}), generators)

	return queueServicePropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForQueueServicePropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQueueServicePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQueueServicePropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQueueServicePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QueueServicePropertiesStatusPropertiesARMGenerator())
}

func Test_QueueServiceProperties_Status_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueServiceProperties_Status_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueueServicePropertiesStatusPropertiesARM, QueueServicePropertiesStatusPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueueServicePropertiesStatusPropertiesARM runs a test to see if a specific instance of QueueServiceProperties_Status_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueueServicePropertiesStatusPropertiesARM(subject QueueServiceProperties_Status_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueServiceProperties_Status_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueServiceProperties_Status_PropertiesARM instances for property testing - lazily instantiated by
// QueueServicePropertiesStatusPropertiesARMGenerator()
var queueServicePropertiesStatusPropertiesARMGenerator gopter.Gen

// QueueServicePropertiesStatusPropertiesARMGenerator returns a generator of QueueServiceProperties_Status_PropertiesARM instances for property testing.
func QueueServicePropertiesStatusPropertiesARMGenerator() gopter.Gen {
	if queueServicePropertiesStatusPropertiesARMGenerator != nil {
		return queueServicePropertiesStatusPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForQueueServicePropertiesStatusPropertiesARM(generators)
	queueServicePropertiesStatusPropertiesARMGenerator = gen.Struct(reflect.TypeOf(QueueServiceProperties_Status_PropertiesARM{}), generators)

	return queueServicePropertiesStatusPropertiesARMGenerator
}

// AddRelatedPropertyGeneratorsForQueueServicePropertiesStatusPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQueueServicePropertiesStatusPropertiesARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(CorsRulesStatusARMGenerator())
}
