// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import (
	"fmt"
	v20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1beta20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of StorageAccountsManagementPolicy. Use v1api20210401.StorageAccountsManagementPolicy instead
type StorageAccountsManagementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_ManagementPolicy_Spec   `json:"spec,omitempty"`
	Status            StorageAccounts_ManagementPolicy_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsManagementPolicy{}

// GetConditions returns the conditions of the resource
func (policy *StorageAccountsManagementPolicy) GetConditions() conditions.Conditions {
	return policy.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (policy *StorageAccountsManagementPolicy) SetConditions(conditions conditions.Conditions) {
	policy.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsManagementPolicy{}

// ConvertFrom populates our StorageAccountsManagementPolicy from the provided hub StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source v20210401s.StorageAccountsManagementPolicy

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = policy.AssignProperties_From_StorageAccountsManagementPolicy(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to policy")
	}

	return nil
}

// ConvertTo populates the provided hub StorageAccountsManagementPolicy from our StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination v20210401s.StorageAccountsManagementPolicy
	err := policy.AssignProperties_To_StorageAccountsManagementPolicy(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from policy")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1beta20210401-storageaccountsmanagementpolicy,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsmanagementpolicies,verbs=create;update,versions=v1beta20210401,name=default.v1beta20210401.storageaccountsmanagementpolicies.storage.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &StorageAccountsManagementPolicy{}

// Default applies defaults to the StorageAccountsManagementPolicy resource
func (policy *StorageAccountsManagementPolicy) Default() {
	policy.defaultImpl()
	var temp any = policy
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsManagementPolicy resource
func (policy *StorageAccountsManagementPolicy) defaultImpl() {}

var _ genruntime.KubernetesResource = &StorageAccountsManagementPolicy{}

// AzureName returns the Azure name of the resource (always "default")
func (policy *StorageAccountsManagementPolicy) AzureName() string {
	return "default"
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (policy StorageAccountsManagementPolicy) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (policy *StorageAccountsManagementPolicy) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (policy *StorageAccountsManagementPolicy) GetSpec() genruntime.ConvertibleSpec {
	return &policy.Spec
}

// GetStatus returns the status of this resource
func (policy *StorageAccountsManagementPolicy) GetStatus() genruntime.ConvertibleStatus {
	return &policy.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/managementPolicies"
func (policy *StorageAccountsManagementPolicy) GetType() string {
	return "Microsoft.Storage/storageAccounts/managementPolicies"
}

// NewEmptyStatus returns a new empty (blank) status
func (policy *StorageAccountsManagementPolicy) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccounts_ManagementPolicy_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (policy *StorageAccountsManagementPolicy) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(policy.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  policy.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (policy *StorageAccountsManagementPolicy) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccounts_ManagementPolicy_STATUS); ok {
		policy.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccounts_ManagementPolicy_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	policy.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1beta20210401-storageaccountsmanagementpolicy,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsmanagementpolicies,verbs=create;update,versions=v1beta20210401,name=validate.v1beta20210401.storageaccountsmanagementpolicies.storage.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &StorageAccountsManagementPolicy{}

// ValidateCreate validates the creation of the resource
func (policy *StorageAccountsManagementPolicy) ValidateCreate() error {
	validations := policy.createValidations()
	var temp any = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (policy *StorageAccountsManagementPolicy) ValidateDelete() error {
	validations := policy.deleteValidations()
	var temp any = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (policy *StorageAccountsManagementPolicy) ValidateUpdate(old runtime.Object) error {
	validations := policy.updateValidations()
	var temp any = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (policy *StorageAccountsManagementPolicy) createValidations() []func() error {
	return []func() error{policy.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (policy *StorageAccountsManagementPolicy) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (policy *StorageAccountsManagementPolicy) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return policy.validateResourceReferences()
		},
		policy.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (policy *StorageAccountsManagementPolicy) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&policy.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (policy *StorageAccountsManagementPolicy) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*StorageAccountsManagementPolicy)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, policy)
}

// AssignProperties_From_StorageAccountsManagementPolicy populates our StorageAccountsManagementPolicy from the provided source StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) AssignProperties_From_StorageAccountsManagementPolicy(source *v20210401s.StorageAccountsManagementPolicy) error {

	// ObjectMeta
	policy.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccounts_ManagementPolicy_Spec
	err := spec.AssignProperties_From_StorageAccounts_ManagementPolicy_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_StorageAccounts_ManagementPolicy_Spec() to populate field Spec")
	}
	policy.Spec = spec

	// Status
	var status StorageAccounts_ManagementPolicy_STATUS
	err = status.AssignProperties_From_StorageAccounts_ManagementPolicy_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_StorageAccounts_ManagementPolicy_STATUS() to populate field Status")
	}
	policy.Status = status

	// No error
	return nil
}

// AssignProperties_To_StorageAccountsManagementPolicy populates the provided destination StorageAccountsManagementPolicy from our StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) AssignProperties_To_StorageAccountsManagementPolicy(destination *v20210401s.StorageAccountsManagementPolicy) error {

	// ObjectMeta
	destination.ObjectMeta = *policy.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210401s.StorageAccounts_ManagementPolicy_Spec
	err := policy.Spec.AssignProperties_To_StorageAccounts_ManagementPolicy_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_StorageAccounts_ManagementPolicy_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210401s.StorageAccounts_ManagementPolicy_STATUS
	err = policy.Status.AssignProperties_To_StorageAccounts_ManagementPolicy_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_StorageAccounts_ManagementPolicy_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (policy *StorageAccountsManagementPolicy) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: policy.Spec.OriginalVersion(),
		Kind:    "StorageAccountsManagementPolicy",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of StorageAccountsManagementPolicy. Use v1api20210401.StorageAccountsManagementPolicy instead
type StorageAccountsManagementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsManagementPolicy `json:"items"`
}

type StorageAccounts_ManagementPolicy_Spec struct {
	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a storage.azure.com/StorageAccount resource
	Owner *genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner,omitempty" kind:"StorageAccount"`

	// +kubebuilder:validation:Required
	Policy *ManagementPolicySchema `json:"policy,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccounts_ManagementPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *StorageAccounts_ManagementPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &StorageAccounts_ManagementPolicy_Spec_ARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if policy.Policy != nil {
		result.Properties = &ManagementPolicyProperties_ARM{}
	}
	if policy.Policy != nil {
		policy_ARM, err := (*policy.Policy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		policy1 := *policy_ARM.(*ManagementPolicySchema_ARM)
		result.Properties.Policy = &policy1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *StorageAccounts_ManagementPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_ManagementPolicy_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *StorageAccounts_ManagementPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_ManagementPolicy_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_ManagementPolicy_Spec_ARM, got %T", armInput)
	}

	// Set property ‘Owner’:
	policy.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘Policy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Policy != nil {
			var policy2 ManagementPolicySchema
			err := policy2.PopulateFromARM(owner, *typedInput.Properties.Policy)
			if err != nil {
				return err
			}
			policy1 := policy2
			policy.Policy = &policy1
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_ManagementPolicy_Spec{}

// ConvertSpecFrom populates our StorageAccounts_ManagementPolicy_Spec from the provided source
func (policy *StorageAccounts_ManagementPolicy_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210401s.StorageAccounts_ManagementPolicy_Spec)
	if ok {
		// Populate our instance from source
		return policy.AssignProperties_From_StorageAccounts_ManagementPolicy_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccounts_ManagementPolicy_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = policy.AssignProperties_From_StorageAccounts_ManagementPolicy_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_ManagementPolicy_Spec
func (policy *StorageAccounts_ManagementPolicy_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210401s.StorageAccounts_ManagementPolicy_Spec)
	if ok {
		// Populate destination from our instance
		return policy.AssignProperties_To_StorageAccounts_ManagementPolicy_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccounts_ManagementPolicy_Spec{}
	err := policy.AssignProperties_To_StorageAccounts_ManagementPolicy_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_StorageAccounts_ManagementPolicy_Spec populates our StorageAccounts_ManagementPolicy_Spec from the provided source StorageAccounts_ManagementPolicy_Spec
func (policy *StorageAccounts_ManagementPolicy_Spec) AssignProperties_From_StorageAccounts_ManagementPolicy_Spec(source *v20210401s.StorageAccounts_ManagementPolicy_Spec) error {

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		policy.Owner = &owner
	} else {
		policy.Owner = nil
	}

	// Policy
	if source.Policy != nil {
		var policyLocal ManagementPolicySchema
		err := policyLocal.AssignProperties_From_ManagementPolicySchema(source.Policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicySchema() to populate field Policy")
		}
		policy.Policy = &policyLocal
	} else {
		policy.Policy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageAccounts_ManagementPolicy_Spec populates the provided destination StorageAccounts_ManagementPolicy_Spec from our StorageAccounts_ManagementPolicy_Spec
func (policy *StorageAccounts_ManagementPolicy_Spec) AssignProperties_To_StorageAccounts_ManagementPolicy_Spec(destination *v20210401s.StorageAccounts_ManagementPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// OriginalVersion
	destination.OriginalVersion = policy.OriginalVersion()

	// Owner
	if policy.Owner != nil {
		owner := policy.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Policy
	if policy.Policy != nil {
		var policyLocal v20210401s.ManagementPolicySchema
		err := policy.Policy.AssignProperties_To_ManagementPolicySchema(&policyLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicySchema() to populate field Policy")
		}
		destination.Policy = &policyLocal
	} else {
		destination.Policy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (policy *StorageAccounts_ManagementPolicy_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// Deprecated version of StorageAccounts_ManagementPolicy_STATUS. Use v1api20210401.StorageAccounts_ManagementPolicy_STATUS instead
type StorageAccounts_ManagementPolicy_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions       []conditions.Condition         `json:"conditions,omitempty"`
	Id               *string                        `json:"id,omitempty"`
	LastModifiedTime *string                        `json:"lastModifiedTime,omitempty"`
	Name             *string                        `json:"name,omitempty"`
	Policy           *ManagementPolicySchema_STATUS `json:"policy,omitempty"`
	Type             *string                        `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccounts_ManagementPolicy_STATUS{}

// ConvertStatusFrom populates our StorageAccounts_ManagementPolicy_STATUS from the provided source
func (policy *StorageAccounts_ManagementPolicy_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210401s.StorageAccounts_ManagementPolicy_STATUS)
	if ok {
		// Populate our instance from source
		return policy.AssignProperties_From_StorageAccounts_ManagementPolicy_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccounts_ManagementPolicy_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = policy.AssignProperties_From_StorageAccounts_ManagementPolicy_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccounts_ManagementPolicy_STATUS
func (policy *StorageAccounts_ManagementPolicy_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210401s.StorageAccounts_ManagementPolicy_STATUS)
	if ok {
		// Populate destination from our instance
		return policy.AssignProperties_To_StorageAccounts_ManagementPolicy_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccounts_ManagementPolicy_STATUS{}
	err := policy.AssignProperties_To_StorageAccounts_ManagementPolicy_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccounts_ManagementPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *StorageAccounts_ManagementPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_ManagementPolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *StorageAccounts_ManagementPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_ManagementPolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_ManagementPolicy_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		policy.Id = &id
	}

	// Set property ‘LastModifiedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastModifiedTime != nil {
			lastModifiedTime := *typedInput.Properties.LastModifiedTime
			policy.LastModifiedTime = &lastModifiedTime
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘Policy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Policy != nil {
			var policy2 ManagementPolicySchema_STATUS
			err := policy2.PopulateFromARM(owner, *typedInput.Properties.Policy)
			if err != nil {
				return err
			}
			policy1 := policy2
			policy.Policy = &policy1
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		policy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_StorageAccounts_ManagementPolicy_STATUS populates our StorageAccounts_ManagementPolicy_STATUS from the provided source StorageAccounts_ManagementPolicy_STATUS
func (policy *StorageAccounts_ManagementPolicy_STATUS) AssignProperties_From_StorageAccounts_ManagementPolicy_STATUS(source *v20210401s.StorageAccounts_ManagementPolicy_STATUS) error {

	// Conditions
	policy.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	policy.Id = genruntime.ClonePointerToString(source.Id)

	// LastModifiedTime
	policy.LastModifiedTime = genruntime.ClonePointerToString(source.LastModifiedTime)

	// Name
	policy.Name = genruntime.ClonePointerToString(source.Name)

	// Policy
	if source.Policy != nil {
		var policyLocal ManagementPolicySchema_STATUS
		err := policyLocal.AssignProperties_From_ManagementPolicySchema_STATUS(source.Policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicySchema_STATUS() to populate field Policy")
		}
		policy.Policy = &policyLocal
	} else {
		policy.Policy = nil
	}

	// Type
	policy.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_StorageAccounts_ManagementPolicy_STATUS populates the provided destination StorageAccounts_ManagementPolicy_STATUS from our StorageAccounts_ManagementPolicy_STATUS
func (policy *StorageAccounts_ManagementPolicy_STATUS) AssignProperties_To_StorageAccounts_ManagementPolicy_STATUS(destination *v20210401s.StorageAccounts_ManagementPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(policy.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(policy.Id)

	// LastModifiedTime
	destination.LastModifiedTime = genruntime.ClonePointerToString(policy.LastModifiedTime)

	// Name
	destination.Name = genruntime.ClonePointerToString(policy.Name)

	// Policy
	if policy.Policy != nil {
		var policyLocal v20210401s.ManagementPolicySchema_STATUS
		err := policy.Policy.AssignProperties_To_ManagementPolicySchema_STATUS(&policyLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicySchema_STATUS() to populate field Policy")
		}
		destination.Policy = &policyLocal
	} else {
		destination.Policy = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(policy.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicySchema. Use v1api20210401.ManagementPolicySchema instead
type ManagementPolicySchema struct {
	// +kubebuilder:validation:Required
	Rules []ManagementPolicyRule `json:"rules,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicySchema{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (schema *ManagementPolicySchema) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if schema == nil {
		return nil, nil
	}
	result := &ManagementPolicySchema_ARM{}

	// Set property ‘Rules’:
	for _, item := range schema.Rules {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Rules = append(result.Rules, *item_ARM.(*ManagementPolicyRule_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (schema *ManagementPolicySchema) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySchema_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (schema *ManagementPolicySchema) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySchema_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySchema_ARM, got %T", armInput)
	}

	// Set property ‘Rules’:
	for _, item := range typedInput.Rules {
		var item1 ManagementPolicyRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		schema.Rules = append(schema.Rules, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicySchema populates our ManagementPolicySchema from the provided source ManagementPolicySchema
func (schema *ManagementPolicySchema) AssignProperties_From_ManagementPolicySchema(source *v20210401s.ManagementPolicySchema) error {

	// Rules
	if source.Rules != nil {
		ruleList := make([]ManagementPolicyRule, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule ManagementPolicyRule
			err := rule.AssignProperties_From_ManagementPolicyRule(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		schema.Rules = ruleList
	} else {
		schema.Rules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicySchema populates the provided destination ManagementPolicySchema from our ManagementPolicySchema
func (schema *ManagementPolicySchema) AssignProperties_To_ManagementPolicySchema(destination *v20210401s.ManagementPolicySchema) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Rules
	if schema.Rules != nil {
		ruleList := make([]v20210401s.ManagementPolicyRule, len(schema.Rules))
		for ruleIndex, ruleItem := range schema.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v20210401s.ManagementPolicyRule
			err := ruleItem.AssignProperties_To_ManagementPolicyRule(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicySchema_STATUS. Use v1api20210401.ManagementPolicySchema_STATUS instead
type ManagementPolicySchema_STATUS struct {
	Rules []ManagementPolicyRule_STATUS `json:"rules,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicySchema_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (schema *ManagementPolicySchema_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySchema_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (schema *ManagementPolicySchema_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySchema_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySchema_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Rules’:
	for _, item := range typedInput.Rules {
		var item1 ManagementPolicyRule_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		schema.Rules = append(schema.Rules, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicySchema_STATUS populates our ManagementPolicySchema_STATUS from the provided source ManagementPolicySchema_STATUS
func (schema *ManagementPolicySchema_STATUS) AssignProperties_From_ManagementPolicySchema_STATUS(source *v20210401s.ManagementPolicySchema_STATUS) error {

	// Rules
	if source.Rules != nil {
		ruleList := make([]ManagementPolicyRule_STATUS, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule ManagementPolicyRule_STATUS
			err := rule.AssignProperties_From_ManagementPolicyRule_STATUS(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyRule_STATUS() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		schema.Rules = ruleList
	} else {
		schema.Rules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicySchema_STATUS populates the provided destination ManagementPolicySchema_STATUS from our ManagementPolicySchema_STATUS
func (schema *ManagementPolicySchema_STATUS) AssignProperties_To_ManagementPolicySchema_STATUS(destination *v20210401s.ManagementPolicySchema_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Rules
	if schema.Rules != nil {
		ruleList := make([]v20210401s.ManagementPolicyRule_STATUS, len(schema.Rules))
		for ruleIndex, ruleItem := range schema.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v20210401s.ManagementPolicyRule_STATUS
			err := ruleItem.AssignProperties_To_ManagementPolicyRule_STATUS(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyRule_STATUS() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyRule. Use v1api20210401.ManagementPolicyRule instead
type ManagementPolicyRule struct {
	// +kubebuilder:validation:Required
	Definition *ManagementPolicyDefinition `json:"definition,omitempty"`
	Enabled    *bool                       `json:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	Type *ManagementPolicyRule_Type `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *ManagementPolicyRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &ManagementPolicyRule_ARM{}

	// Set property ‘Definition’:
	if rule.Definition != nil {
		definition_ARM, err := (*rule.Definition).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		definition := *definition_ARM.(*ManagementPolicyDefinition_ARM)
		result.Definition = &definition
	}

	// Set property ‘Enabled’:
	if rule.Enabled != nil {
		enabled := *rule.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘Name’:
	if rule.Name != nil {
		name := *rule.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if rule.Type != nil {
		typeVar := *rule.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ManagementPolicyRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyRule_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ManagementPolicyRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyRule_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyRule_ARM, got %T", armInput)
	}

	// Set property ‘Definition’:
	if typedInput.Definition != nil {
		var definition1 ManagementPolicyDefinition
		err := definition1.PopulateFromARM(owner, *typedInput.Definition)
		if err != nil {
			return err
		}
		definition := definition1
		rule.Definition = &definition
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		rule.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		rule.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyRule populates our ManagementPolicyRule from the provided source ManagementPolicyRule
func (rule *ManagementPolicyRule) AssignProperties_From_ManagementPolicyRule(source *v20210401s.ManagementPolicyRule) error {

	// Definition
	if source.Definition != nil {
		var definition ManagementPolicyDefinition
		err := definition.AssignProperties_From_ManagementPolicyDefinition(source.Definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyDefinition() to populate field Definition")
		}
		rule.Definition = &definition
	} else {
		rule.Definition = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		rule.Enabled = &enabled
	} else {
		rule.Enabled = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ManagementPolicyRule_Type(*source.Type)
		rule.Type = &typeVar
	} else {
		rule.Type = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyRule populates the provided destination ManagementPolicyRule from our ManagementPolicyRule
func (rule *ManagementPolicyRule) AssignProperties_To_ManagementPolicyRule(destination *v20210401s.ManagementPolicyRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Definition
	if rule.Definition != nil {
		var definition v20210401s.ManagementPolicyDefinition
		err := rule.Definition.AssignProperties_To_ManagementPolicyDefinition(&definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyDefinition() to populate field Definition")
		}
		destination.Definition = &definition
	} else {
		destination.Definition = nil
	}

	// Enabled
	if rule.Enabled != nil {
		enabled := *rule.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Type
	if rule.Type != nil {
		typeVar := string(*rule.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyRule_STATUS. Use v1api20210401.ManagementPolicyRule_STATUS instead
type ManagementPolicyRule_STATUS struct {
	Definition *ManagementPolicyDefinition_STATUS `json:"definition,omitempty"`
	Enabled    *bool                              `json:"enabled,omitempty"`
	Name       *string                            `json:"name,omitempty"`
	Type       *ManagementPolicyRule_Type_STATUS  `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ManagementPolicyRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyRule_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ManagementPolicyRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyRule_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyRule_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Definition’:
	if typedInput.Definition != nil {
		var definition1 ManagementPolicyDefinition_STATUS
		err := definition1.PopulateFromARM(owner, *typedInput.Definition)
		if err != nil {
			return err
		}
		definition := definition1
		rule.Definition = &definition
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		rule.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		rule.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyRule_STATUS populates our ManagementPolicyRule_STATUS from the provided source ManagementPolicyRule_STATUS
func (rule *ManagementPolicyRule_STATUS) AssignProperties_From_ManagementPolicyRule_STATUS(source *v20210401s.ManagementPolicyRule_STATUS) error {

	// Definition
	if source.Definition != nil {
		var definition ManagementPolicyDefinition_STATUS
		err := definition.AssignProperties_From_ManagementPolicyDefinition_STATUS(source.Definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyDefinition_STATUS() to populate field Definition")
		}
		rule.Definition = &definition
	} else {
		rule.Definition = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		rule.Enabled = &enabled
	} else {
		rule.Enabled = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ManagementPolicyRule_Type_STATUS(*source.Type)
		rule.Type = &typeVar
	} else {
		rule.Type = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyRule_STATUS populates the provided destination ManagementPolicyRule_STATUS from our ManagementPolicyRule_STATUS
func (rule *ManagementPolicyRule_STATUS) AssignProperties_To_ManagementPolicyRule_STATUS(destination *v20210401s.ManagementPolicyRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Definition
	if rule.Definition != nil {
		var definition v20210401s.ManagementPolicyDefinition_STATUS
		err := rule.Definition.AssignProperties_To_ManagementPolicyDefinition_STATUS(&definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyDefinition_STATUS() to populate field Definition")
		}
		destination.Definition = &definition
	} else {
		destination.Definition = nil
	}

	// Enabled
	if rule.Enabled != nil {
		enabled := *rule.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Type
	if rule.Type != nil {
		typeVar := string(*rule.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyDefinition. Use v1api20210401.ManagementPolicyDefinition instead
type ManagementPolicyDefinition struct {
	// +kubebuilder:validation:Required
	Actions *ManagementPolicyAction `json:"actions,omitempty"`
	Filters *ManagementPolicyFilter `json:"filters,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyDefinition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (definition *ManagementPolicyDefinition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if definition == nil {
		return nil, nil
	}
	result := &ManagementPolicyDefinition_ARM{}

	// Set property ‘Actions’:
	if definition.Actions != nil {
		actions_ARM, err := (*definition.Actions).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		actions := *actions_ARM.(*ManagementPolicyAction_ARM)
		result.Actions = &actions
	}

	// Set property ‘Filters’:
	if definition.Filters != nil {
		filters_ARM, err := (*definition.Filters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		filters := *filters_ARM.(*ManagementPolicyFilter_ARM)
		result.Filters = &filters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (definition *ManagementPolicyDefinition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyDefinition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (definition *ManagementPolicyDefinition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyDefinition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyDefinition_ARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	if typedInput.Actions != nil {
		var actions1 ManagementPolicyAction
		err := actions1.PopulateFromARM(owner, *typedInput.Actions)
		if err != nil {
			return err
		}
		actions := actions1
		definition.Actions = &actions
	}

	// Set property ‘Filters’:
	if typedInput.Filters != nil {
		var filters1 ManagementPolicyFilter
		err := filters1.PopulateFromARM(owner, *typedInput.Filters)
		if err != nil {
			return err
		}
		filters := filters1
		definition.Filters = &filters
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyDefinition populates our ManagementPolicyDefinition from the provided source ManagementPolicyDefinition
func (definition *ManagementPolicyDefinition) AssignProperties_From_ManagementPolicyDefinition(source *v20210401s.ManagementPolicyDefinition) error {

	// Actions
	if source.Actions != nil {
		var action ManagementPolicyAction
		err := action.AssignProperties_From_ManagementPolicyAction(source.Actions)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyAction() to populate field Actions")
		}
		definition.Actions = &action
	} else {
		definition.Actions = nil
	}

	// Filters
	if source.Filters != nil {
		var filter ManagementPolicyFilter
		err := filter.AssignProperties_From_ManagementPolicyFilter(source.Filters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyFilter() to populate field Filters")
		}
		definition.Filters = &filter
	} else {
		definition.Filters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyDefinition populates the provided destination ManagementPolicyDefinition from our ManagementPolicyDefinition
func (definition *ManagementPolicyDefinition) AssignProperties_To_ManagementPolicyDefinition(destination *v20210401s.ManagementPolicyDefinition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	if definition.Actions != nil {
		var action v20210401s.ManagementPolicyAction
		err := definition.Actions.AssignProperties_To_ManagementPolicyAction(&action)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyAction() to populate field Actions")
		}
		destination.Actions = &action
	} else {
		destination.Actions = nil
	}

	// Filters
	if definition.Filters != nil {
		var filter v20210401s.ManagementPolicyFilter
		err := definition.Filters.AssignProperties_To_ManagementPolicyFilter(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyFilter() to populate field Filters")
		}
		destination.Filters = &filter
	} else {
		destination.Filters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyDefinition_STATUS. Use v1api20210401.ManagementPolicyDefinition_STATUS instead
type ManagementPolicyDefinition_STATUS struct {
	Actions *ManagementPolicyAction_STATUS `json:"actions,omitempty"`
	Filters *ManagementPolicyFilter_STATUS `json:"filters,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyDefinition_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (definition *ManagementPolicyDefinition_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyDefinition_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (definition *ManagementPolicyDefinition_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyDefinition_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyDefinition_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	if typedInput.Actions != nil {
		var actions1 ManagementPolicyAction_STATUS
		err := actions1.PopulateFromARM(owner, *typedInput.Actions)
		if err != nil {
			return err
		}
		actions := actions1
		definition.Actions = &actions
	}

	// Set property ‘Filters’:
	if typedInput.Filters != nil {
		var filters1 ManagementPolicyFilter_STATUS
		err := filters1.PopulateFromARM(owner, *typedInput.Filters)
		if err != nil {
			return err
		}
		filters := filters1
		definition.Filters = &filters
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyDefinition_STATUS populates our ManagementPolicyDefinition_STATUS from the provided source ManagementPolicyDefinition_STATUS
func (definition *ManagementPolicyDefinition_STATUS) AssignProperties_From_ManagementPolicyDefinition_STATUS(source *v20210401s.ManagementPolicyDefinition_STATUS) error {

	// Actions
	if source.Actions != nil {
		var action ManagementPolicyAction_STATUS
		err := action.AssignProperties_From_ManagementPolicyAction_STATUS(source.Actions)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyAction_STATUS() to populate field Actions")
		}
		definition.Actions = &action
	} else {
		definition.Actions = nil
	}

	// Filters
	if source.Filters != nil {
		var filter ManagementPolicyFilter_STATUS
		err := filter.AssignProperties_From_ManagementPolicyFilter_STATUS(source.Filters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyFilter_STATUS() to populate field Filters")
		}
		definition.Filters = &filter
	} else {
		definition.Filters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyDefinition_STATUS populates the provided destination ManagementPolicyDefinition_STATUS from our ManagementPolicyDefinition_STATUS
func (definition *ManagementPolicyDefinition_STATUS) AssignProperties_To_ManagementPolicyDefinition_STATUS(destination *v20210401s.ManagementPolicyDefinition_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	if definition.Actions != nil {
		var action v20210401s.ManagementPolicyAction_STATUS
		err := definition.Actions.AssignProperties_To_ManagementPolicyAction_STATUS(&action)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyAction_STATUS() to populate field Actions")
		}
		destination.Actions = &action
	} else {
		destination.Actions = nil
	}

	// Filters
	if definition.Filters != nil {
		var filter v20210401s.ManagementPolicyFilter_STATUS
		err := definition.Filters.AssignProperties_To_ManagementPolicyFilter_STATUS(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyFilter_STATUS() to populate field Filters")
		}
		destination.Filters = &filter
	} else {
		destination.Filters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyRule_Type. Use v1api20210401.ManagementPolicyRule_Type instead
// +kubebuilder:validation:Enum={"Lifecycle"}
type ManagementPolicyRule_Type string

const ManagementPolicyRule_Type_Lifecycle = ManagementPolicyRule_Type("Lifecycle")

// Deprecated version of ManagementPolicyRule_Type_STATUS. Use v1api20210401.ManagementPolicyRule_Type_STATUS instead
type ManagementPolicyRule_Type_STATUS string

const ManagementPolicyRule_Type_STATUS_Lifecycle = ManagementPolicyRule_Type_STATUS("Lifecycle")

// Deprecated version of ManagementPolicyAction. Use v1api20210401.ManagementPolicyAction instead
type ManagementPolicyAction struct {
	BaseBlob *ManagementPolicyBaseBlob `json:"baseBlob,omitempty"`
	Snapshot *ManagementPolicySnapShot `json:"snapshot,omitempty"`
	Version  *ManagementPolicyVersion  `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *ManagementPolicyAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &ManagementPolicyAction_ARM{}

	// Set property ‘BaseBlob’:
	if action.BaseBlob != nil {
		baseBlob_ARM, err := (*action.BaseBlob).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		baseBlob := *baseBlob_ARM.(*ManagementPolicyBaseBlob_ARM)
		result.BaseBlob = &baseBlob
	}

	// Set property ‘Snapshot’:
	if action.Snapshot != nil {
		snapshot_ARM, err := (*action.Snapshot).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		snapshot := *snapshot_ARM.(*ManagementPolicySnapShot_ARM)
		result.Snapshot = &snapshot
	}

	// Set property ‘Version’:
	if action.Version != nil {
		version_ARM, err := (*action.Version).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		version := *version_ARM.(*ManagementPolicyVersion_ARM)
		result.Version = &version
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *ManagementPolicyAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *ManagementPolicyAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyAction_ARM, got %T", armInput)
	}

	// Set property ‘BaseBlob’:
	if typedInput.BaseBlob != nil {
		var baseBlob1 ManagementPolicyBaseBlob
		err := baseBlob1.PopulateFromARM(owner, *typedInput.BaseBlob)
		if err != nil {
			return err
		}
		baseBlob := baseBlob1
		action.BaseBlob = &baseBlob
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 ManagementPolicySnapShot
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		action.Snapshot = &snapshot
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		var version1 ManagementPolicyVersion
		err := version1.PopulateFromARM(owner, *typedInput.Version)
		if err != nil {
			return err
		}
		version := version1
		action.Version = &version
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyAction populates our ManagementPolicyAction from the provided source ManagementPolicyAction
func (action *ManagementPolicyAction) AssignProperties_From_ManagementPolicyAction(source *v20210401s.ManagementPolicyAction) error {

	// BaseBlob
	if source.BaseBlob != nil {
		var baseBlob ManagementPolicyBaseBlob
		err := baseBlob.AssignProperties_From_ManagementPolicyBaseBlob(source.BaseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyBaseBlob() to populate field BaseBlob")
		}
		action.BaseBlob = &baseBlob
	} else {
		action.BaseBlob = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot ManagementPolicySnapShot
		err := snapshot.AssignProperties_From_ManagementPolicySnapShot(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicySnapShot() to populate field Snapshot")
		}
		action.Snapshot = &snapshot
	} else {
		action.Snapshot = nil
	}

	// Version
	if source.Version != nil {
		var version ManagementPolicyVersion
		err := version.AssignProperties_From_ManagementPolicyVersion(source.Version)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyVersion() to populate field Version")
		}
		action.Version = &version
	} else {
		action.Version = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyAction populates the provided destination ManagementPolicyAction from our ManagementPolicyAction
func (action *ManagementPolicyAction) AssignProperties_To_ManagementPolicyAction(destination *v20210401s.ManagementPolicyAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BaseBlob
	if action.BaseBlob != nil {
		var baseBlob v20210401s.ManagementPolicyBaseBlob
		err := action.BaseBlob.AssignProperties_To_ManagementPolicyBaseBlob(&baseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyBaseBlob() to populate field BaseBlob")
		}
		destination.BaseBlob = &baseBlob
	} else {
		destination.BaseBlob = nil
	}

	// Snapshot
	if action.Snapshot != nil {
		var snapshot v20210401s.ManagementPolicySnapShot
		err := action.Snapshot.AssignProperties_To_ManagementPolicySnapShot(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicySnapShot() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// Version
	if action.Version != nil {
		var version v20210401s.ManagementPolicyVersion
		err := action.Version.AssignProperties_To_ManagementPolicyVersion(&version)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyVersion() to populate field Version")
		}
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyAction_STATUS. Use v1api20210401.ManagementPolicyAction_STATUS instead
type ManagementPolicyAction_STATUS struct {
	BaseBlob *ManagementPolicyBaseBlob_STATUS `json:"baseBlob,omitempty"`
	Snapshot *ManagementPolicySnapShot_STATUS `json:"snapshot,omitempty"`
	Version  *ManagementPolicyVersion_STATUS  `json:"version,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyAction_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *ManagementPolicyAction_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyAction_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *ManagementPolicyAction_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyAction_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyAction_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘BaseBlob’:
	if typedInput.BaseBlob != nil {
		var baseBlob1 ManagementPolicyBaseBlob_STATUS
		err := baseBlob1.PopulateFromARM(owner, *typedInput.BaseBlob)
		if err != nil {
			return err
		}
		baseBlob := baseBlob1
		action.BaseBlob = &baseBlob
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 ManagementPolicySnapShot_STATUS
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		action.Snapshot = &snapshot
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		var version1 ManagementPolicyVersion_STATUS
		err := version1.PopulateFromARM(owner, *typedInput.Version)
		if err != nil {
			return err
		}
		version := version1
		action.Version = &version
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyAction_STATUS populates our ManagementPolicyAction_STATUS from the provided source ManagementPolicyAction_STATUS
func (action *ManagementPolicyAction_STATUS) AssignProperties_From_ManagementPolicyAction_STATUS(source *v20210401s.ManagementPolicyAction_STATUS) error {

	// BaseBlob
	if source.BaseBlob != nil {
		var baseBlob ManagementPolicyBaseBlob_STATUS
		err := baseBlob.AssignProperties_From_ManagementPolicyBaseBlob_STATUS(source.BaseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyBaseBlob_STATUS() to populate field BaseBlob")
		}
		action.BaseBlob = &baseBlob
	} else {
		action.BaseBlob = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot ManagementPolicySnapShot_STATUS
		err := snapshot.AssignProperties_From_ManagementPolicySnapShot_STATUS(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicySnapShot_STATUS() to populate field Snapshot")
		}
		action.Snapshot = &snapshot
	} else {
		action.Snapshot = nil
	}

	// Version
	if source.Version != nil {
		var version ManagementPolicyVersion_STATUS
		err := version.AssignProperties_From_ManagementPolicyVersion_STATUS(source.Version)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ManagementPolicyVersion_STATUS() to populate field Version")
		}
		action.Version = &version
	} else {
		action.Version = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyAction_STATUS populates the provided destination ManagementPolicyAction_STATUS from our ManagementPolicyAction_STATUS
func (action *ManagementPolicyAction_STATUS) AssignProperties_To_ManagementPolicyAction_STATUS(destination *v20210401s.ManagementPolicyAction_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BaseBlob
	if action.BaseBlob != nil {
		var baseBlob v20210401s.ManagementPolicyBaseBlob_STATUS
		err := action.BaseBlob.AssignProperties_To_ManagementPolicyBaseBlob_STATUS(&baseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyBaseBlob_STATUS() to populate field BaseBlob")
		}
		destination.BaseBlob = &baseBlob
	} else {
		destination.BaseBlob = nil
	}

	// Snapshot
	if action.Snapshot != nil {
		var snapshot v20210401s.ManagementPolicySnapShot_STATUS
		err := action.Snapshot.AssignProperties_To_ManagementPolicySnapShot_STATUS(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicySnapShot_STATUS() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// Version
	if action.Version != nil {
		var version v20210401s.ManagementPolicyVersion_STATUS
		err := action.Version.AssignProperties_To_ManagementPolicyVersion_STATUS(&version)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ManagementPolicyVersion_STATUS() to populate field Version")
		}
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyFilter. Use v1api20210401.ManagementPolicyFilter instead
type ManagementPolicyFilter struct {
	BlobIndexMatch []TagFilter `json:"blobIndexMatch,omitempty"`

	// +kubebuilder:validation:Required
	BlobTypes   []string `json:"blobTypes,omitempty"`
	PrefixMatch []string `json:"prefixMatch,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *ManagementPolicyFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	result := &ManagementPolicyFilter_ARM{}

	// Set property ‘BlobIndexMatch’:
	for _, item := range filter.BlobIndexMatch {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.BlobIndexMatch = append(result.BlobIndexMatch, *item_ARM.(*TagFilter_ARM))
	}

	// Set property ‘BlobTypes’:
	for _, item := range filter.BlobTypes {
		result.BlobTypes = append(result.BlobTypes, item)
	}

	// Set property ‘PrefixMatch’:
	for _, item := range filter.PrefixMatch {
		result.PrefixMatch = append(result.PrefixMatch, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *ManagementPolicyFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyFilter_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *ManagementPolicyFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyFilter_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyFilter_ARM, got %T", armInput)
	}

	// Set property ‘BlobIndexMatch’:
	for _, item := range typedInput.BlobIndexMatch {
		var item1 TagFilter
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.BlobIndexMatch = append(filter.BlobIndexMatch, item1)
	}

	// Set property ‘BlobTypes’:
	for _, item := range typedInput.BlobTypes {
		filter.BlobTypes = append(filter.BlobTypes, item)
	}

	// Set property ‘PrefixMatch’:
	for _, item := range typedInput.PrefixMatch {
		filter.PrefixMatch = append(filter.PrefixMatch, item)
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyFilter populates our ManagementPolicyFilter from the provided source ManagementPolicyFilter
func (filter *ManagementPolicyFilter) AssignProperties_From_ManagementPolicyFilter(source *v20210401s.ManagementPolicyFilter) error {

	// BlobIndexMatch
	if source.BlobIndexMatch != nil {
		blobIndexMatchList := make([]TagFilter, len(source.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range source.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch TagFilter
			err := blobIndexMatch.AssignProperties_From_TagFilter(&blobIndexMatchItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TagFilter() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		filter.BlobIndexMatch = blobIndexMatchList
	} else {
		filter.BlobIndexMatch = nil
	}

	// BlobTypes
	filter.BlobTypes = genruntime.CloneSliceOfString(source.BlobTypes)

	// PrefixMatch
	filter.PrefixMatch = genruntime.CloneSliceOfString(source.PrefixMatch)

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyFilter populates the provided destination ManagementPolicyFilter from our ManagementPolicyFilter
func (filter *ManagementPolicyFilter) AssignProperties_To_ManagementPolicyFilter(destination *v20210401s.ManagementPolicyFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobIndexMatch
	if filter.BlobIndexMatch != nil {
		blobIndexMatchList := make([]v20210401s.TagFilter, len(filter.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range filter.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch v20210401s.TagFilter
			err := blobIndexMatchItem.AssignProperties_To_TagFilter(&blobIndexMatch)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TagFilter() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		destination.BlobIndexMatch = blobIndexMatchList
	} else {
		destination.BlobIndexMatch = nil
	}

	// BlobTypes
	destination.BlobTypes = genruntime.CloneSliceOfString(filter.BlobTypes)

	// PrefixMatch
	destination.PrefixMatch = genruntime.CloneSliceOfString(filter.PrefixMatch)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyFilter_STATUS. Use v1api20210401.ManagementPolicyFilter_STATUS instead
type ManagementPolicyFilter_STATUS struct {
	BlobIndexMatch []TagFilter_STATUS `json:"blobIndexMatch,omitempty"`
	BlobTypes      []string           `json:"blobTypes,omitempty"`
	PrefixMatch    []string           `json:"prefixMatch,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyFilter_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *ManagementPolicyFilter_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyFilter_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *ManagementPolicyFilter_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyFilter_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyFilter_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘BlobIndexMatch’:
	for _, item := range typedInput.BlobIndexMatch {
		var item1 TagFilter_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.BlobIndexMatch = append(filter.BlobIndexMatch, item1)
	}

	// Set property ‘BlobTypes’:
	for _, item := range typedInput.BlobTypes {
		filter.BlobTypes = append(filter.BlobTypes, item)
	}

	// Set property ‘PrefixMatch’:
	for _, item := range typedInput.PrefixMatch {
		filter.PrefixMatch = append(filter.PrefixMatch, item)
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyFilter_STATUS populates our ManagementPolicyFilter_STATUS from the provided source ManagementPolicyFilter_STATUS
func (filter *ManagementPolicyFilter_STATUS) AssignProperties_From_ManagementPolicyFilter_STATUS(source *v20210401s.ManagementPolicyFilter_STATUS) error {

	// BlobIndexMatch
	if source.BlobIndexMatch != nil {
		blobIndexMatchList := make([]TagFilter_STATUS, len(source.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range source.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch TagFilter_STATUS
			err := blobIndexMatch.AssignProperties_From_TagFilter_STATUS(&blobIndexMatchItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TagFilter_STATUS() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		filter.BlobIndexMatch = blobIndexMatchList
	} else {
		filter.BlobIndexMatch = nil
	}

	// BlobTypes
	filter.BlobTypes = genruntime.CloneSliceOfString(source.BlobTypes)

	// PrefixMatch
	filter.PrefixMatch = genruntime.CloneSliceOfString(source.PrefixMatch)

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyFilter_STATUS populates the provided destination ManagementPolicyFilter_STATUS from our ManagementPolicyFilter_STATUS
func (filter *ManagementPolicyFilter_STATUS) AssignProperties_To_ManagementPolicyFilter_STATUS(destination *v20210401s.ManagementPolicyFilter_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobIndexMatch
	if filter.BlobIndexMatch != nil {
		blobIndexMatchList := make([]v20210401s.TagFilter_STATUS, len(filter.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range filter.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch v20210401s.TagFilter_STATUS
			err := blobIndexMatchItem.AssignProperties_To_TagFilter_STATUS(&blobIndexMatch)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TagFilter_STATUS() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		destination.BlobIndexMatch = blobIndexMatchList
	} else {
		destination.BlobIndexMatch = nil
	}

	// BlobTypes
	destination.BlobTypes = genruntime.CloneSliceOfString(filter.BlobTypes)

	// PrefixMatch
	destination.PrefixMatch = genruntime.CloneSliceOfString(filter.PrefixMatch)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyBaseBlob. Use v1api20210401.ManagementPolicyBaseBlob instead
type ManagementPolicyBaseBlob struct {
	Delete                      *DateAfterModification `json:"delete,omitempty"`
	EnableAutoTierToHotFromCool *bool                  `json:"enableAutoTierToHotFromCool,omitempty"`
	TierToArchive               *DateAfterModification `json:"tierToArchive,omitempty"`
	TierToCool                  *DateAfterModification `json:"tierToCool,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyBaseBlob{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (blob *ManagementPolicyBaseBlob) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if blob == nil {
		return nil, nil
	}
	result := &ManagementPolicyBaseBlob_ARM{}

	// Set property ‘Delete’:
	if blob.Delete != nil {
		delete_ARM, err := (*blob.Delete).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		delete := *delete_ARM.(*DateAfterModification_ARM)
		result.Delete = &delete
	}

	// Set property ‘EnableAutoTierToHotFromCool’:
	if blob.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *blob.EnableAutoTierToHotFromCool
		result.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	}

	// Set property ‘TierToArchive’:
	if blob.TierToArchive != nil {
		tierToArchive_ARM, err := (*blob.TierToArchive).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToArchive := *tierToArchive_ARM.(*DateAfterModification_ARM)
		result.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if blob.TierToCool != nil {
		tierToCool_ARM, err := (*blob.TierToCool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToCool := *tierToCool_ARM.(*DateAfterModification_ARM)
		result.TierToCool = &tierToCool
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (blob *ManagementPolicyBaseBlob) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyBaseBlob_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (blob *ManagementPolicyBaseBlob) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyBaseBlob_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyBaseBlob_ARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterModification
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		blob.Delete = &delete
	}

	// Set property ‘EnableAutoTierToHotFromCool’:
	if typedInput.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *typedInput.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterModification
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		blob.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterModification
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		blob.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyBaseBlob populates our ManagementPolicyBaseBlob from the provided source ManagementPolicyBaseBlob
func (blob *ManagementPolicyBaseBlob) AssignProperties_From_ManagementPolicyBaseBlob(source *v20210401s.ManagementPolicyBaseBlob) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterModification
		err := delete.AssignProperties_From_DateAfterModification(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterModification() to populate field Delete")
		}
		blob.Delete = &delete
	} else {
		blob.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if source.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *source.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		blob.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterModification
		err := tierToArchive.AssignProperties_From_DateAfterModification(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterModification() to populate field TierToArchive")
		}
		blob.TierToArchive = &tierToArchive
	} else {
		blob.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterModification
		err := tierToCool.AssignProperties_From_DateAfterModification(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterModification() to populate field TierToCool")
		}
		blob.TierToCool = &tierToCool
	} else {
		blob.TierToCool = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyBaseBlob populates the provided destination ManagementPolicyBaseBlob from our ManagementPolicyBaseBlob
func (blob *ManagementPolicyBaseBlob) AssignProperties_To_ManagementPolicyBaseBlob(destination *v20210401s.ManagementPolicyBaseBlob) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if blob.Delete != nil {
		var delete v20210401s.DateAfterModification
		err := blob.Delete.AssignProperties_To_DateAfterModification(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterModification() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if blob.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *blob.EnableAutoTierToHotFromCool
		destination.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		destination.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if blob.TierToArchive != nil {
		var tierToArchive v20210401s.DateAfterModification
		err := blob.TierToArchive.AssignProperties_To_DateAfterModification(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterModification() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if blob.TierToCool != nil {
		var tierToCool v20210401s.DateAfterModification
		err := blob.TierToCool.AssignProperties_To_DateAfterModification(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterModification() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyBaseBlob_STATUS. Use v1api20210401.ManagementPolicyBaseBlob_STATUS instead
type ManagementPolicyBaseBlob_STATUS struct {
	Delete                      *DateAfterModification_STATUS `json:"delete,omitempty"`
	EnableAutoTierToHotFromCool *bool                         `json:"enableAutoTierToHotFromCool,omitempty"`
	TierToArchive               *DateAfterModification_STATUS `json:"tierToArchive,omitempty"`
	TierToCool                  *DateAfterModification_STATUS `json:"tierToCool,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyBaseBlob_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (blob *ManagementPolicyBaseBlob_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyBaseBlob_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (blob *ManagementPolicyBaseBlob_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyBaseBlob_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyBaseBlob_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterModification_STATUS
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		blob.Delete = &delete
	}

	// Set property ‘EnableAutoTierToHotFromCool’:
	if typedInput.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *typedInput.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterModification_STATUS
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		blob.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterModification_STATUS
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		blob.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyBaseBlob_STATUS populates our ManagementPolicyBaseBlob_STATUS from the provided source ManagementPolicyBaseBlob_STATUS
func (blob *ManagementPolicyBaseBlob_STATUS) AssignProperties_From_ManagementPolicyBaseBlob_STATUS(source *v20210401s.ManagementPolicyBaseBlob_STATUS) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterModification_STATUS
		err := delete.AssignProperties_From_DateAfterModification_STATUS(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterModification_STATUS() to populate field Delete")
		}
		blob.Delete = &delete
	} else {
		blob.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if source.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *source.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		blob.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterModification_STATUS
		err := tierToArchive.AssignProperties_From_DateAfterModification_STATUS(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterModification_STATUS() to populate field TierToArchive")
		}
		blob.TierToArchive = &tierToArchive
	} else {
		blob.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterModification_STATUS
		err := tierToCool.AssignProperties_From_DateAfterModification_STATUS(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterModification_STATUS() to populate field TierToCool")
		}
		blob.TierToCool = &tierToCool
	} else {
		blob.TierToCool = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyBaseBlob_STATUS populates the provided destination ManagementPolicyBaseBlob_STATUS from our ManagementPolicyBaseBlob_STATUS
func (blob *ManagementPolicyBaseBlob_STATUS) AssignProperties_To_ManagementPolicyBaseBlob_STATUS(destination *v20210401s.ManagementPolicyBaseBlob_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if blob.Delete != nil {
		var delete v20210401s.DateAfterModification_STATUS
		err := blob.Delete.AssignProperties_To_DateAfterModification_STATUS(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterModification_STATUS() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if blob.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *blob.EnableAutoTierToHotFromCool
		destination.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		destination.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if blob.TierToArchive != nil {
		var tierToArchive v20210401s.DateAfterModification_STATUS
		err := blob.TierToArchive.AssignProperties_To_DateAfterModification_STATUS(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterModification_STATUS() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if blob.TierToCool != nil {
		var tierToCool v20210401s.DateAfterModification_STATUS
		err := blob.TierToCool.AssignProperties_To_DateAfterModification_STATUS(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterModification_STATUS() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicySnapShot. Use v1api20210401.ManagementPolicySnapShot instead
type ManagementPolicySnapShot struct {
	Delete        *DateAfterCreation `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation `json:"tierToCool,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicySnapShot{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (shot *ManagementPolicySnapShot) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if shot == nil {
		return nil, nil
	}
	result := &ManagementPolicySnapShot_ARM{}

	// Set property ‘Delete’:
	if shot.Delete != nil {
		delete_ARM, err := (*shot.Delete).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		delete := *delete_ARM.(*DateAfterCreation_ARM)
		result.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if shot.TierToArchive != nil {
		tierToArchive_ARM, err := (*shot.TierToArchive).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToArchive := *tierToArchive_ARM.(*DateAfterCreation_ARM)
		result.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if shot.TierToCool != nil {
		tierToCool_ARM, err := (*shot.TierToCool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToCool := *tierToCool_ARM.(*DateAfterCreation_ARM)
		result.TierToCool = &tierToCool
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (shot *ManagementPolicySnapShot) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySnapShot_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (shot *ManagementPolicySnapShot) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySnapShot_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySnapShot_ARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		shot.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		shot.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		shot.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicySnapShot populates our ManagementPolicySnapShot from the provided source ManagementPolicySnapShot
func (shot *ManagementPolicySnapShot) AssignProperties_From_ManagementPolicySnapShot(source *v20210401s.ManagementPolicySnapShot) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation
		err := delete.AssignProperties_From_DateAfterCreation(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation() to populate field Delete")
		}
		shot.Delete = &delete
	} else {
		shot.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation
		err := tierToArchive.AssignProperties_From_DateAfterCreation(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation() to populate field TierToArchive")
		}
		shot.TierToArchive = &tierToArchive
	} else {
		shot.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation
		err := tierToCool.AssignProperties_From_DateAfterCreation(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation() to populate field TierToCool")
		}
		shot.TierToCool = &tierToCool
	} else {
		shot.TierToCool = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicySnapShot populates the provided destination ManagementPolicySnapShot from our ManagementPolicySnapShot
func (shot *ManagementPolicySnapShot) AssignProperties_To_ManagementPolicySnapShot(destination *v20210401s.ManagementPolicySnapShot) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if shot.Delete != nil {
		var delete v20210401s.DateAfterCreation
		err := shot.Delete.AssignProperties_To_DateAfterCreation(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if shot.TierToArchive != nil {
		var tierToArchive v20210401s.DateAfterCreation
		err := shot.TierToArchive.AssignProperties_To_DateAfterCreation(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if shot.TierToCool != nil {
		var tierToCool v20210401s.DateAfterCreation
		err := shot.TierToCool.AssignProperties_To_DateAfterCreation(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicySnapShot_STATUS. Use v1api20210401.ManagementPolicySnapShot_STATUS instead
type ManagementPolicySnapShot_STATUS struct {
	Delete        *DateAfterCreation_STATUS `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation_STATUS `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation_STATUS `json:"tierToCool,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicySnapShot_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (shot *ManagementPolicySnapShot_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySnapShot_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (shot *ManagementPolicySnapShot_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySnapShot_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySnapShot_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation_STATUS
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		shot.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation_STATUS
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		shot.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation_STATUS
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		shot.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicySnapShot_STATUS populates our ManagementPolicySnapShot_STATUS from the provided source ManagementPolicySnapShot_STATUS
func (shot *ManagementPolicySnapShot_STATUS) AssignProperties_From_ManagementPolicySnapShot_STATUS(source *v20210401s.ManagementPolicySnapShot_STATUS) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation_STATUS
		err := delete.AssignProperties_From_DateAfterCreation_STATUS(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation_STATUS() to populate field Delete")
		}
		shot.Delete = &delete
	} else {
		shot.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation_STATUS
		err := tierToArchive.AssignProperties_From_DateAfterCreation_STATUS(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation_STATUS() to populate field TierToArchive")
		}
		shot.TierToArchive = &tierToArchive
	} else {
		shot.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation_STATUS
		err := tierToCool.AssignProperties_From_DateAfterCreation_STATUS(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation_STATUS() to populate field TierToCool")
		}
		shot.TierToCool = &tierToCool
	} else {
		shot.TierToCool = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicySnapShot_STATUS populates the provided destination ManagementPolicySnapShot_STATUS from our ManagementPolicySnapShot_STATUS
func (shot *ManagementPolicySnapShot_STATUS) AssignProperties_To_ManagementPolicySnapShot_STATUS(destination *v20210401s.ManagementPolicySnapShot_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if shot.Delete != nil {
		var delete v20210401s.DateAfterCreation_STATUS
		err := shot.Delete.AssignProperties_To_DateAfterCreation_STATUS(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation_STATUS() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if shot.TierToArchive != nil {
		var tierToArchive v20210401s.DateAfterCreation_STATUS
		err := shot.TierToArchive.AssignProperties_To_DateAfterCreation_STATUS(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation_STATUS() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if shot.TierToCool != nil {
		var tierToCool v20210401s.DateAfterCreation_STATUS
		err := shot.TierToCool.AssignProperties_To_DateAfterCreation_STATUS(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation_STATUS() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyVersion. Use v1api20210401.ManagementPolicyVersion instead
type ManagementPolicyVersion struct {
	Delete        *DateAfterCreation `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation `json:"tierToCool,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyVersion{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (version *ManagementPolicyVersion) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if version == nil {
		return nil, nil
	}
	result := &ManagementPolicyVersion_ARM{}

	// Set property ‘Delete’:
	if version.Delete != nil {
		delete_ARM, err := (*version.Delete).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		delete := *delete_ARM.(*DateAfterCreation_ARM)
		result.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if version.TierToArchive != nil {
		tierToArchive_ARM, err := (*version.TierToArchive).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToArchive := *tierToArchive_ARM.(*DateAfterCreation_ARM)
		result.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if version.TierToCool != nil {
		tierToCool_ARM, err := (*version.TierToCool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToCool := *tierToCool_ARM.(*DateAfterCreation_ARM)
		result.TierToCool = &tierToCool
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (version *ManagementPolicyVersion) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyVersion_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (version *ManagementPolicyVersion) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyVersion_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyVersion_ARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		version.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		version.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		version.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyVersion populates our ManagementPolicyVersion from the provided source ManagementPolicyVersion
func (version *ManagementPolicyVersion) AssignProperties_From_ManagementPolicyVersion(source *v20210401s.ManagementPolicyVersion) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation
		err := delete.AssignProperties_From_DateAfterCreation(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation() to populate field Delete")
		}
		version.Delete = &delete
	} else {
		version.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation
		err := tierToArchive.AssignProperties_From_DateAfterCreation(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation() to populate field TierToArchive")
		}
		version.TierToArchive = &tierToArchive
	} else {
		version.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation
		err := tierToCool.AssignProperties_From_DateAfterCreation(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation() to populate field TierToCool")
		}
		version.TierToCool = &tierToCool
	} else {
		version.TierToCool = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyVersion populates the provided destination ManagementPolicyVersion from our ManagementPolicyVersion
func (version *ManagementPolicyVersion) AssignProperties_To_ManagementPolicyVersion(destination *v20210401s.ManagementPolicyVersion) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if version.Delete != nil {
		var delete v20210401s.DateAfterCreation
		err := version.Delete.AssignProperties_To_DateAfterCreation(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if version.TierToArchive != nil {
		var tierToArchive v20210401s.DateAfterCreation
		err := version.TierToArchive.AssignProperties_To_DateAfterCreation(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if version.TierToCool != nil {
		var tierToCool v20210401s.DateAfterCreation
		err := version.TierToCool.AssignProperties_To_DateAfterCreation(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ManagementPolicyVersion_STATUS. Use v1api20210401.ManagementPolicyVersion_STATUS instead
type ManagementPolicyVersion_STATUS struct {
	Delete        *DateAfterCreation_STATUS `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation_STATUS `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation_STATUS `json:"tierToCool,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyVersion_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (version *ManagementPolicyVersion_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyVersion_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (version *ManagementPolicyVersion_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyVersion_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyVersion_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation_STATUS
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		version.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation_STATUS
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		version.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation_STATUS
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		version.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignProperties_From_ManagementPolicyVersion_STATUS populates our ManagementPolicyVersion_STATUS from the provided source ManagementPolicyVersion_STATUS
func (version *ManagementPolicyVersion_STATUS) AssignProperties_From_ManagementPolicyVersion_STATUS(source *v20210401s.ManagementPolicyVersion_STATUS) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation_STATUS
		err := delete.AssignProperties_From_DateAfterCreation_STATUS(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation_STATUS() to populate field Delete")
		}
		version.Delete = &delete
	} else {
		version.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation_STATUS
		err := tierToArchive.AssignProperties_From_DateAfterCreation_STATUS(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation_STATUS() to populate field TierToArchive")
		}
		version.TierToArchive = &tierToArchive
	} else {
		version.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation_STATUS
		err := tierToCool.AssignProperties_From_DateAfterCreation_STATUS(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DateAfterCreation_STATUS() to populate field TierToCool")
		}
		version.TierToCool = &tierToCool
	} else {
		version.TierToCool = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ManagementPolicyVersion_STATUS populates the provided destination ManagementPolicyVersion_STATUS from our ManagementPolicyVersion_STATUS
func (version *ManagementPolicyVersion_STATUS) AssignProperties_To_ManagementPolicyVersion_STATUS(destination *v20210401s.ManagementPolicyVersion_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if version.Delete != nil {
		var delete v20210401s.DateAfterCreation_STATUS
		err := version.Delete.AssignProperties_To_DateAfterCreation_STATUS(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation_STATUS() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if version.TierToArchive != nil {
		var tierToArchive v20210401s.DateAfterCreation_STATUS
		err := version.TierToArchive.AssignProperties_To_DateAfterCreation_STATUS(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation_STATUS() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if version.TierToCool != nil {
		var tierToCool v20210401s.DateAfterCreation_STATUS
		err := version.TierToCool.AssignProperties_To_DateAfterCreation_STATUS(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DateAfterCreation_STATUS() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of TagFilter. Use v1api20210401.TagFilter instead
type TagFilter struct {
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=128
	// +kubebuilder:validation:MinLength=1
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	Op *string `json:"op,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=256
	// +kubebuilder:validation:MinLength=0
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &TagFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *TagFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	result := &TagFilter_ARM{}

	// Set property ‘Name’:
	if filter.Name != nil {
		name := *filter.Name
		result.Name = &name
	}

	// Set property ‘Op’:
	if filter.Op != nil {
		op := *filter.Op
		result.Op = &op
	}

	// Set property ‘Value’:
	if filter.Value != nil {
		value := *filter.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *TagFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TagFilter_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *TagFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TagFilter_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TagFilter_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		filter.Name = &name
	}

	// Set property ‘Op’:
	if typedInput.Op != nil {
		op := *typedInput.Op
		filter.Op = &op
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		filter.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_TagFilter populates our TagFilter from the provided source TagFilter
func (filter *TagFilter) AssignProperties_From_TagFilter(source *v20210401s.TagFilter) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		filter.Name = &name
	} else {
		filter.Name = nil
	}

	// Op
	filter.Op = genruntime.ClonePointerToString(source.Op)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// No error
	return nil
}

// AssignProperties_To_TagFilter populates the provided destination TagFilter from our TagFilter
func (filter *TagFilter) AssignProperties_To_TagFilter(destination *v20210401s.TagFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if filter.Name != nil {
		name := *filter.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Op
	destination.Op = genruntime.ClonePointerToString(filter.Op)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of TagFilter_STATUS. Use v1api20210401.TagFilter_STATUS instead
type TagFilter_STATUS struct {
	Name  *string `json:"name,omitempty"`
	Op    *string `json:"op,omitempty"`
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &TagFilter_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *TagFilter_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TagFilter_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *TagFilter_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TagFilter_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TagFilter_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		filter.Name = &name
	}

	// Set property ‘Op’:
	if typedInput.Op != nil {
		op := *typedInput.Op
		filter.Op = &op
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		filter.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_TagFilter_STATUS populates our TagFilter_STATUS from the provided source TagFilter_STATUS
func (filter *TagFilter_STATUS) AssignProperties_From_TagFilter_STATUS(source *v20210401s.TagFilter_STATUS) error {

	// Name
	filter.Name = genruntime.ClonePointerToString(source.Name)

	// Op
	filter.Op = genruntime.ClonePointerToString(source.Op)

	// Value
	filter.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_TagFilter_STATUS populates the provided destination TagFilter_STATUS from our TagFilter_STATUS
func (filter *TagFilter_STATUS) AssignProperties_To_TagFilter_STATUS(destination *v20210401s.TagFilter_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(filter.Name)

	// Op
	destination.Op = genruntime.ClonePointerToString(filter.Op)

	// Value
	destination.Value = genruntime.ClonePointerToString(filter.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DateAfterCreation. Use v1api20210401.DateAfterCreation instead
type DateAfterCreation struct {
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:MultipleOf=1
	DaysAfterCreationGreaterThan *int `json:"daysAfterCreationGreaterThan,omitempty"`
}

var _ genruntime.ARMTransformer = &DateAfterCreation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (creation *DateAfterCreation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if creation == nil {
		return nil, nil
	}
	result := &DateAfterCreation_ARM{}

	// Set property ‘DaysAfterCreationGreaterThan’:
	if creation.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *creation.DaysAfterCreationGreaterThan
		result.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (creation *DateAfterCreation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterCreation_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (creation *DateAfterCreation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterCreation_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterCreation_ARM, got %T", armInput)
	}

	// Set property ‘DaysAfterCreationGreaterThan’:
	if typedInput.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *typedInput.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	}

	// No error
	return nil
}

// AssignProperties_From_DateAfterCreation populates our DateAfterCreation from the provided source DateAfterCreation
func (creation *DateAfterCreation) AssignProperties_From_DateAfterCreation(source *v20210401s.DateAfterCreation) error {

	// DaysAfterCreationGreaterThan
	if source.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *source.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		creation.DaysAfterCreationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DateAfterCreation populates the provided destination DateAfterCreation from our DateAfterCreation
func (creation *DateAfterCreation) AssignProperties_To_DateAfterCreation(destination *v20210401s.DateAfterCreation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterCreationGreaterThan
	if creation.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *creation.DaysAfterCreationGreaterThan
		destination.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		destination.DaysAfterCreationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DateAfterCreation_STATUS. Use v1api20210401.DateAfterCreation_STATUS instead
type DateAfterCreation_STATUS struct {
	DaysAfterCreationGreaterThan *float64 `json:"daysAfterCreationGreaterThan,omitempty"`
}

var _ genruntime.FromARMConverter = &DateAfterCreation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (creation *DateAfterCreation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterCreation_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (creation *DateAfterCreation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterCreation_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterCreation_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘DaysAfterCreationGreaterThan’:
	if typedInput.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *typedInput.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	}

	// No error
	return nil
}

// AssignProperties_From_DateAfterCreation_STATUS populates our DateAfterCreation_STATUS from the provided source DateAfterCreation_STATUS
func (creation *DateAfterCreation_STATUS) AssignProperties_From_DateAfterCreation_STATUS(source *v20210401s.DateAfterCreation_STATUS) error {

	// DaysAfterCreationGreaterThan
	if source.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *source.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		creation.DaysAfterCreationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DateAfterCreation_STATUS populates the provided destination DateAfterCreation_STATUS from our DateAfterCreation_STATUS
func (creation *DateAfterCreation_STATUS) AssignProperties_To_DateAfterCreation_STATUS(destination *v20210401s.DateAfterCreation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterCreationGreaterThan
	if creation.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *creation.DaysAfterCreationGreaterThan
		destination.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		destination.DaysAfterCreationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DateAfterModification. Use v1api20210401.DateAfterModification instead
type DateAfterModification struct {
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:MultipleOf=1
	DaysAfterLastAccessTimeGreaterThan *int `json:"daysAfterLastAccessTimeGreaterThan,omitempty"`

	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:MultipleOf=1
	DaysAfterModificationGreaterThan *int `json:"daysAfterModificationGreaterThan,omitempty"`
}

var _ genruntime.ARMTransformer = &DateAfterModification{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (modification *DateAfterModification) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if modification == nil {
		return nil, nil
	}
	result := &DateAfterModification_ARM{}

	// Set property ‘DaysAfterLastAccessTimeGreaterThan’:
	if modification.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *modification.DaysAfterLastAccessTimeGreaterThan
		result.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	}

	// Set property ‘DaysAfterModificationGreaterThan’:
	if modification.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *modification.DaysAfterModificationGreaterThan
		result.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (modification *DateAfterModification) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterModification_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (modification *DateAfterModification) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterModification_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterModification_ARM, got %T", armInput)
	}

	// Set property ‘DaysAfterLastAccessTimeGreaterThan’:
	if typedInput.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *typedInput.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	}

	// Set property ‘DaysAfterModificationGreaterThan’:
	if typedInput.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *typedInput.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	}

	// No error
	return nil
}

// AssignProperties_From_DateAfterModification populates our DateAfterModification from the provided source DateAfterModification
func (modification *DateAfterModification) AssignProperties_From_DateAfterModification(source *v20210401s.DateAfterModification) error {

	// DaysAfterLastAccessTimeGreaterThan
	if source.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *source.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		modification.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if source.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *source.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		modification.DaysAfterModificationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DateAfterModification populates the provided destination DateAfterModification from our DateAfterModification
func (modification *DateAfterModification) AssignProperties_To_DateAfterModification(destination *v20210401s.DateAfterModification) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterLastAccessTimeGreaterThan
	if modification.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *modification.DaysAfterLastAccessTimeGreaterThan
		destination.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		destination.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if modification.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *modification.DaysAfterModificationGreaterThan
		destination.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		destination.DaysAfterModificationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DateAfterModification_STATUS. Use v1api20210401.DateAfterModification_STATUS instead
type DateAfterModification_STATUS struct {
	DaysAfterLastAccessTimeGreaterThan *float64 `json:"daysAfterLastAccessTimeGreaterThan,omitempty"`
	DaysAfterModificationGreaterThan   *float64 `json:"daysAfterModificationGreaterThan,omitempty"`
}

var _ genruntime.FromARMConverter = &DateAfterModification_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (modification *DateAfterModification_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterModification_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (modification *DateAfterModification_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterModification_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterModification_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘DaysAfterLastAccessTimeGreaterThan’:
	if typedInput.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *typedInput.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	}

	// Set property ‘DaysAfterModificationGreaterThan’:
	if typedInput.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *typedInput.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	}

	// No error
	return nil
}

// AssignProperties_From_DateAfterModification_STATUS populates our DateAfterModification_STATUS from the provided source DateAfterModification_STATUS
func (modification *DateAfterModification_STATUS) AssignProperties_From_DateAfterModification_STATUS(source *v20210401s.DateAfterModification_STATUS) error {

	// DaysAfterLastAccessTimeGreaterThan
	if source.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *source.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		modification.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if source.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *source.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		modification.DaysAfterModificationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DateAfterModification_STATUS populates the provided destination DateAfterModification_STATUS from our DateAfterModification_STATUS
func (modification *DateAfterModification_STATUS) AssignProperties_To_DateAfterModification_STATUS(destination *v20210401s.DateAfterModification_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterLastAccessTimeGreaterThan
	if modification.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *modification.DaysAfterLastAccessTimeGreaterThan
		destination.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		destination.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if modification.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *modification.DaysAfterModificationGreaterThan
		destination.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		destination.DaysAfterModificationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&StorageAccountsManagementPolicy{}, &StorageAccountsManagementPolicyList{})
}
