// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type StorageAccounts_ManagementPolicy_SpecARM struct {
<<<<<<< HEAD
	AzureName string `json:"azureName,omitempty"`
	Name      string `json:"name,omitempty"`
=======
	// Name: The name of the Storage Account Management Policy. It should always be 'default'
	Name string `json:"name,omitempty"`
>>>>>>> main

	// Properties: Returns the Storage Account Data Policies Rules.
	Properties *ManagementPolicyPropertiesARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &StorageAccounts_ManagementPolicy_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (policy StorageAccounts_ManagementPolicy_SpecARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (policy *StorageAccounts_ManagementPolicy_SpecARM) GetName() string {
	return policy.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/managementPolicies"
func (policy *StorageAccounts_ManagementPolicy_SpecARM) GetType() string {
	return "Microsoft.Storage/storageAccounts/managementPolicies"
}

type ManagementPolicyPropertiesARM struct {
	// Policy: The Storage Account ManagementPolicy, in JSON format. See more details in:
	// https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
	Policy *ManagementPolicySchemaARM `json:"policy,omitempty"`
}

type ManagementPolicySchemaARM struct {
	// Rules: The Storage Account ManagementPolicies Rules. See more details in:
	// https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
	Rules []ManagementPolicyRuleARM `json:"rules,omitempty"`
}

type ManagementPolicyRuleARM struct {
	// Definition: An object that defines the Lifecycle rule.
	Definition *ManagementPolicyDefinitionARM `json:"definition,omitempty"`

	// Enabled: Rule is enabled if set to true.
	Enabled *bool `json:"enabled,omitempty"`

	// Name: A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be
	// unique within a policy.
	Name *string `json:"name,omitempty"`

	// Type: The valid value is Lifecycle
	Type *ManagementPolicyRule_Type `json:"type,omitempty"`
}

type ManagementPolicyDefinitionARM struct {
	// Actions: An object that defines the action set.
	Actions *ManagementPolicyActionARM `json:"actions,omitempty"`

	// Filters: An object that defines the filter set.
	Filters *ManagementPolicyFilterARM `json:"filters,omitempty"`
}

type ManagementPolicyActionARM struct {
	// BaseBlob: The management policy action for base blob
	BaseBlob *ManagementPolicyBaseBlobARM `json:"baseBlob,omitempty"`

	// Snapshot: The management policy action for snapshot
	Snapshot *ManagementPolicySnapShotARM `json:"snapshot,omitempty"`

	// Version: The management policy action for version
	Version *ManagementPolicyVersionARM `json:"version,omitempty"`
}

type ManagementPolicyFilterARM struct {
	// BlobIndexMatch: An array of blob index tag based filters, there can be at most 10 tag filters
	BlobIndexMatch []TagFilterARM `json:"blobIndexMatch,omitempty"`

	// BlobTypes: An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete
	// actions are supported for appendBlob.
	BlobTypes []string `json:"blobTypes,omitempty"`

	// PrefixMatch: An array of strings for prefixes to be match.
	PrefixMatch []string `json:"prefixMatch,omitempty"`
}

type ManagementPolicyBaseBlobARM struct {
	// Delete: The function to delete the blob
	Delete *DateAfterModificationARM `json:"delete,omitempty"`

	// EnableAutoTierToHotFromCool: This property enables auto tiering of a blob from cool to hot on a blob access. This
	// property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
	EnableAutoTierToHotFromCool *bool `json:"enableAutoTierToHotFromCool,omitempty"`

	// TierToArchive: The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
	TierToArchive *DateAfterModificationARM `json:"tierToArchive,omitempty"`

	// TierToCool: The function to tier blobs to cool storage. Support blobs currently at Hot tier
	TierToCool *DateAfterModificationARM `json:"tierToCool,omitempty"`
}

type ManagementPolicySnapShotARM struct {
	// Delete: The function to delete the blob snapshot
	Delete *DateAfterCreationARM `json:"delete,omitempty"`

	// TierToArchive: The function to tier blob snapshot to archive storage. Support blob snapshot currently at Hot or Cool tier
	TierToArchive *DateAfterCreationARM `json:"tierToArchive,omitempty"`

	// TierToCool: The function to tier blob snapshot to cool storage. Support blob snapshot currently at Hot tier
	TierToCool *DateAfterCreationARM `json:"tierToCool,omitempty"`
}

type ManagementPolicyVersionARM struct {
	// Delete: The function to delete the blob version
	Delete *DateAfterCreationARM `json:"delete,omitempty"`

	// TierToArchive: The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier
	TierToArchive *DateAfterCreationARM `json:"tierToArchive,omitempty"`

	// TierToCool: The function to tier blob version to cool storage. Support blob version currently at Hot tier
	TierToCool *DateAfterCreationARM `json:"tierToCool,omitempty"`
}

type TagFilterARM struct {
	// Name: This is the filter tag name, it can have 1 - 128 characters
	Name *string `json:"name,omitempty"`

	// Op: This is the comparison operator which is used for object comparison and filtering. Only == (equality operator) is
	// currently supported
	Op *string `json:"op,omitempty"`

	// Value: This is the filter tag value field used for tag based filtering, it can have 0 - 256 characters
	Value *string `json:"value,omitempty"`
}

type DateAfterCreationARM struct {
	// DaysAfterCreationGreaterThan: Value indicating the age in days after creation
	DaysAfterCreationGreaterThan *int `json:"daysAfterCreationGreaterThan,omitempty"`
}

type DateAfterModificationARM struct {
	// DaysAfterLastAccessTimeGreaterThan: Value indicating the age in days after last blob access. This property can only be
	// used in conjunction with last access time tracking policy
	DaysAfterLastAccessTimeGreaterThan *int `json:"daysAfterLastAccessTimeGreaterThan,omitempty"`

	// DaysAfterModificationGreaterThan: Value indicating the age in days after last modification
	DaysAfterModificationGreaterThan *int `json:"daysAfterModificationGreaterThan,omitempty"`
}
