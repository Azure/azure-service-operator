// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import (
	"fmt"
	v20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1beta20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/resourceDefinitions/storageAccounts
type StorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_Spec  `json:"spec,omitempty"`
	Status            StorageAccount_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccount{}

// GetConditions returns the conditions of the resource
func (account *StorageAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *StorageAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccount{}

// ConvertFrom populates our StorageAccount from the provided hub StorageAccount
func (account *StorageAccount) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210401s.StorageAccount)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccount but received %T instead", hub)
	}

	return account.AssignPropertiesFromStorageAccount(source)
}

// ConvertTo populates the provided hub StorageAccount from our StorageAccount
func (account *StorageAccount) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210401s.StorageAccount)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccount but received %T instead", hub)
	}

	return account.AssignPropertiesToStorageAccount(destination)
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1beta20210401-storageaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1beta20210401,name=default.v1beta20210401.storageaccounts.storage.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &StorageAccount{}

// Default applies defaults to the StorageAccount resource
func (account *StorageAccount) Default() {
	account.defaultImpl()
	var temp interface{} = account
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (account *StorageAccount) defaultAzureName() {
	if account.Spec.AzureName == "" {
		account.Spec.AzureName = account.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccount resource
func (account *StorageAccount) defaultImpl() { account.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccount{}

// AzureName returns the Azure name of the resource
func (account *StorageAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (account StorageAccount) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (account *StorageAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (account *StorageAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *StorageAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts"
func (account *StorageAccount) GetType() string {
	return "Microsoft.Storage/storageAccounts"
}

// NewEmptyStatus returns a new empty (blank) status
func (account *StorageAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccount_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *StorageAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *StorageAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccount_Status); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccount_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1beta20210401-storageaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1beta20210401,name=validate.v1beta20210401.storageaccounts.storage.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &StorageAccount{}

// ValidateCreate validates the creation of the resource
func (account *StorageAccount) ValidateCreate() error {
	validations := account.createValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (account *StorageAccount) ValidateDelete() error {
	validations := account.deleteValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (account *StorageAccount) ValidateUpdate(old runtime.Object) error {
	validations := account.updateValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (account *StorageAccount) createValidations() []func() error {
	return []func() error{account.validateResourceReferences, account.validateSecretDestinations}
}

// deleteValidations validates the deletion of the resource
func (account *StorageAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (account *StorageAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return account.validateResourceReferences()
		},
		account.validateWriteOnceProperties,
		func(old runtime.Object) error {
			return account.validateSecretDestinations()
		},
	}
}

// validateResourceReferences validates all resource references
func (account *StorageAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&account.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (account *StorageAccount) validateSecretDestinations() error {
	if account.Spec.OperatorSpec == nil {
		return nil
	}
	if account.Spec.OperatorSpec.Secrets == nil {
		return nil
	}
	secrets := []*genruntime.SecretDestination{
		account.Spec.OperatorSpec.Secrets.BlobEndpoint,
		account.Spec.OperatorSpec.Secrets.DfsEndpoint,
		account.Spec.OperatorSpec.Secrets.FileEndpoint,
		account.Spec.OperatorSpec.Secrets.Key1,
		account.Spec.OperatorSpec.Secrets.Key2,
		account.Spec.OperatorSpec.Secrets.QueueEndpoint,
		account.Spec.OperatorSpec.Secrets.TableEndpoint,
		account.Spec.OperatorSpec.Secrets.WebEndpoint,
	}
	return genruntime.ValidateSecretDestinations(secrets)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (account *StorageAccount) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*StorageAccount)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, account)
}

// AssignPropertiesFromStorageAccount populates our StorageAccount from the provided source StorageAccount
func (account *StorageAccount) AssignPropertiesFromStorageAccount(source *v20210401s.StorageAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccounts_Spec
	err := spec.AssignPropertiesFromStorageAccountsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsSpec() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status StorageAccount_Status
	err = status.AssignPropertiesFromStorageAccountStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountStatus() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccount populates the provided destination StorageAccount from our StorageAccount
func (account *StorageAccount) AssignPropertiesToStorageAccount(destination *v20210401s.StorageAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210401s.StorageAccounts_Spec
	err := account.Spec.AssignPropertiesToStorageAccountsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210401s.StorageAccount_Status
	err = account.Status.AssignPropertiesToStorageAccountStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *StorageAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion(),
		Kind:    "StorageAccount",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/resourceDefinitions/storageAccounts
type StorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccount `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-04-01"}
type APIVersion string

const APIVersionValue = APIVersion("2021-04-01")

type StorageAccount_Status struct {
	// AccessTier: Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	AccessTier *StorageAccountPropertiesStatusAccessTier `json:"accessTier,omitempty"`

	// AllowBlobPublicAccess: Allow or disallow public access to all blobs or containers in the storage account. The default
	// interpretation is true for this property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	// AllowCrossTenantReplication: Allow or disallow cross AAD tenant object replication. The default interpretation is true
	// for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	// AllowSharedKeyAccess: Indicates whether the storage account permits requests to be authorized with the account access
	// key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure
	// Active Directory (Azure AD). The default value is null, which is equivalent to true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	// AzureFilesIdentityBasedAuthentication: Provides the identity based authentication settings for Azure Files.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_Status `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	// BlobRestoreStatus: Blob restore status
	BlobRestoreStatus *BlobRestoreStatus_Status `json:"blobRestoreStatus,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CreationTime: Gets the creation date and time of the storage account in UTC.
	CreationTime *string `json:"creationTime,omitempty"`

	// CustomDomain: Gets the custom domain the user assigned to this storage account.
	CustomDomain *CustomDomain_Status `json:"customDomain,omitempty"`

	// Encryption: Gets the encryption settings on the account. If unspecified, the account is unencrypted.
	Encryption *Encryption_Status `json:"encryption,omitempty"`

	// ExtendedLocation: The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	// FailoverInProgress: If the failover is in progress, the value will be true, otherwise, it will be null.
	FailoverInProgress *bool `json:"failoverInProgress,omitempty"`

	// GeoReplicationStats: Geo Replication Stats
	GeoReplicationStats *GeoReplicationStats_Status `json:"geoReplicationStats,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Identity: The identity of the resource.
	Identity *Identity_Status `json:"identity,omitempty"`

	// IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	// IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	// KeyCreationTime: Storage account keys creation time.
	KeyCreationTime *KeyCreationTime_Status `json:"keyCreationTime,omitempty"`

	// KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy_Status `json:"keyPolicy,omitempty"`

	// Kind: Gets the Kind.
	Kind *StorageAccountStatusKind `json:"kind,omitempty"`

	// LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
	LargeFileSharesState *StorageAccountPropertiesStatusLargeFileSharesState `json:"largeFileSharesState,omitempty"`

	// LastGeoFailoverTime: Gets the timestamp of the most recent instance of a failover to the secondary location. Only the
	// most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only
	// available if the accountType is Standard_GRS or Standard_RAGRS.
	LastGeoFailoverTime *string `json:"lastGeoFailoverTime,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS
	// 1.0 for this property.
	MinimumTlsVersion *StorageAccountPropertiesStatusMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet_Status `json:"networkAcls,omitempty"`

	// PrimaryEndpoints: Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that
	// Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
	PrimaryEndpoints *Endpoints_Status `json:"primaryEndpoints,omitempty"`

	// PrimaryLocation: Gets the location of the primary data center for the storage account.
	PrimaryLocation *string `json:"primaryLocation,omitempty"`

	// PrivateEndpointConnections: List of private endpoint connection associated with the specified storage account
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	// ProvisioningState: Gets the status of the storage account at the time the operation was called.
	ProvisioningState *StorageAccountPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	// RoutingPreference: Maintains information about the network routing choice opted by the user for data transfer
	RoutingPreference *RoutingPreference_Status `json:"routingPreference,omitempty"`

	// SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy_Status `json:"sasPolicy,omitempty"`

	// SecondaryEndpoints: Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the
	// secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
	SecondaryEndpoints *Endpoints_Status `json:"secondaryEndpoints,omitempty"`

	// SecondaryLocation: Gets the location of the geo-replicated secondary for the storage account. Only available if the
	// accountType is Standard_GRS or Standard_RAGRS.
	SecondaryLocation *string `json:"secondaryLocation,omitempty"`

	// Sku: Gets the SKU.
	Sku *Sku_Status `json:"sku,omitempty"`

	// StatusOfPrimary: Gets the status indicating whether the primary location of the storage account is available or
	// unavailable.
	StatusOfPrimary *StorageAccountPropertiesStatusStatusOfPrimary `json:"statusOfPrimary,omitempty"`

	// StatusOfSecondary: Gets the status indicating whether the secondary location of the storage account is available or
	// unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
	StatusOfSecondary *StorageAccountPropertiesStatusStatusOfSecondary `json:"statusOfSecondary,omitempty"`

	// SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets to true.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccount_Status{}

// ConvertStatusFrom populates our StorageAccount_Status from the provided source
func (account *StorageAccount_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210401s.StorageAccount_Status)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromStorageAccountStatus(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccount_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromStorageAccountStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccount_Status
func (account *StorageAccount_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210401s.StorageAccount_Status)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToStorageAccountStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccount_Status{}
	err := account.AssignPropertiesToStorageAccountStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccount_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (account *StorageAccount_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccount_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (account *StorageAccount_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccount_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccount_StatusARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			account.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			account.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			account.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			account.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication_Status
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			account.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// Set property ‘BlobRestoreStatus’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BlobRestoreStatus != nil {
			var blobRestoreStatus1 BlobRestoreStatus_Status
			err := blobRestoreStatus1.PopulateFromARM(owner, *typedInput.Properties.BlobRestoreStatus)
			if err != nil {
				return err
			}
			blobRestoreStatus := blobRestoreStatus1
			account.BlobRestoreStatus = &blobRestoreStatus
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationTime != nil {
			creationTime := *typedInput.Properties.CreationTime
			account.CreationTime = &creationTime
		}
	}

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain_Status
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			account.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			account.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		account.ExtendedLocation = &extendedLocation
	}

	// Set property ‘FailoverInProgress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FailoverInProgress != nil {
			failoverInProgress := *typedInput.Properties.FailoverInProgress
			account.FailoverInProgress = &failoverInProgress
		}
	}

	// Set property ‘GeoReplicationStats’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GeoReplicationStats != nil {
			var geoReplicationStats1 GeoReplicationStats_Status
			err := geoReplicationStats1.PopulateFromARM(owner, *typedInput.Properties.GeoReplicationStats)
			if err != nil {
				return err
			}
			geoReplicationStats := geoReplicationStats1
			account.GeoReplicationStats = &geoReplicationStats
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		account.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		account.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			account.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			account.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyCreationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyCreationTime != nil {
			var keyCreationTime1 KeyCreationTime_Status
			err := keyCreationTime1.PopulateFromARM(owner, *typedInput.Properties.KeyCreationTime)
			if err != nil {
				return err
			}
			keyCreationTime := keyCreationTime1
			account.KeyCreationTime = &keyCreationTime
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy_Status
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			account.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		account.Kind = &kind
	}

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			account.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘LastGeoFailoverTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastGeoFailoverTime != nil {
			lastGeoFailoverTime := *typedInput.Properties.LastGeoFailoverTime
			account.LastGeoFailoverTime = &lastGeoFailoverTime
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		account.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			account.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		account.Name = &name
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet_Status
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			account.NetworkAcls = &networkAcls
		}
	}

	// Set property ‘PrimaryEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryEndpoints != nil {
			var primaryEndpoints1 Endpoints_Status
			err := primaryEndpoints1.PopulateFromARM(owner, *typedInput.Properties.PrimaryEndpoints)
			if err != nil {
				return err
			}
			primaryEndpoints := primaryEndpoints1
			account.PrimaryEndpoints = &primaryEndpoints
		}
	}

	// Set property ‘PrimaryLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryLocation != nil {
			primaryLocation := *typedInput.Properties.PrimaryLocation
			account.PrimaryLocation = &primaryLocation
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.PrivateEndpointConnections = append(account.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			account.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference_Status
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			account.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy_Status
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			account.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘SecondaryEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryEndpoints != nil {
			var secondaryEndpoints1 Endpoints_Status
			err := secondaryEndpoints1.PopulateFromARM(owner, *typedInput.Properties.SecondaryEndpoints)
			if err != nil {
				return err
			}
			secondaryEndpoints := secondaryEndpoints1
			account.SecondaryEndpoints = &secondaryEndpoints
		}
	}

	// Set property ‘SecondaryLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryLocation != nil {
			secondaryLocation := *typedInput.Properties.SecondaryLocation
			account.SecondaryLocation = &secondaryLocation
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		account.Sku = &sku
	}

	// Set property ‘StatusOfPrimary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StatusOfPrimary != nil {
			statusOfPrimary := *typedInput.Properties.StatusOfPrimary
			account.StatusOfPrimary = &statusOfPrimary
		}
	}

	// Set property ‘StatusOfSecondary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StatusOfSecondary != nil {
			statusOfSecondary := *typedInput.Properties.StatusOfSecondary
			account.StatusOfSecondary = &statusOfSecondary
		}
	}

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			account.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		account.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			account.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		account.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountStatus populates our StorageAccount_Status from the provided source StorageAccount_Status
func (account *StorageAccount_Status) AssignPropertiesFromStorageAccountStatus(source *v20210401s.StorageAccount_Status) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountPropertiesStatusAccessTier(*source.AccessTier)
		account.AccessTier = &accessTier
	} else {
		account.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		account.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		account.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		account.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		account.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		account.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		account.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication_Status
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus() to populate field AzureFilesIdentityBasedAuthentication")
		}
		account.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		account.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if source.BlobRestoreStatus != nil {
		var blobRestoreStatus BlobRestoreStatus_Status
		err := blobRestoreStatus.AssignPropertiesFromBlobRestoreStatusStatus(source.BlobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreStatusStatus() to populate field BlobRestoreStatus")
		}
		account.BlobRestoreStatus = &blobRestoreStatus
	} else {
		account.BlobRestoreStatus = nil
	}

	// Conditions
	account.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationTime
	account.CreationTime = genruntime.ClonePointerToString(source.CreationTime)

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain_Status
		err := customDomain.AssignPropertiesFromCustomDomainStatus(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomainStatus() to populate field CustomDomain")
		}
		account.CustomDomain = &customDomain
	} else {
		account.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryptionStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionStatus() to populate field Encryption")
		}
		account.Encryption = &encryption
	} else {
		account.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationStatus() to populate field ExtendedLocation")
		}
		account.ExtendedLocation = &extendedLocation
	} else {
		account.ExtendedLocation = nil
	}

	// FailoverInProgress
	if source.FailoverInProgress != nil {
		failoverInProgress := *source.FailoverInProgress
		account.FailoverInProgress = &failoverInProgress
	} else {
		account.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if source.GeoReplicationStats != nil {
		var geoReplicationStat GeoReplicationStats_Status
		err := geoReplicationStat.AssignPropertiesFromGeoReplicationStatsStatus(source.GeoReplicationStats)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromGeoReplicationStatsStatus() to populate field GeoReplicationStats")
		}
		account.GeoReplicationStats = &geoReplicationStat
	} else {
		account.GeoReplicationStats = nil
	}

	// Id
	account.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity Identity_Status
		err := identity.AssignPropertiesFromIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentityStatus() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		account.IsHnsEnabled = &isHnsEnabled
	} else {
		account.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		account.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		account.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if source.KeyCreationTime != nil {
		var keyCreationTime KeyCreationTime_Status
		err := keyCreationTime.AssignPropertiesFromKeyCreationTimeStatus(source.KeyCreationTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyCreationTimeStatus() to populate field KeyCreationTime")
		}
		account.KeyCreationTime = &keyCreationTime
	} else {
		account.KeyCreationTime = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy_Status
		err := keyPolicy.AssignPropertiesFromKeyPolicyStatus(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicyStatus() to populate field KeyPolicy")
		}
		account.KeyPolicy = &keyPolicy
	} else {
		account.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		kind := StorageAccountStatusKind(*source.Kind)
		account.Kind = &kind
	} else {
		account.Kind = nil
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountPropertiesStatusLargeFileSharesState(*source.LargeFileSharesState)
		account.LargeFileSharesState = &largeFileSharesState
	} else {
		account.LargeFileSharesState = nil
	}

	// LastGeoFailoverTime
	account.LastGeoFailoverTime = genruntime.ClonePointerToString(source.LastGeoFailoverTime)

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountPropertiesStatusMinimumTlsVersion(*source.MinimumTlsVersion)
		account.MinimumTlsVersion = &minimumTlsVersion
	} else {
		account.MinimumTlsVersion = nil
	}

	// Name
	account.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet_Status
		err := networkAcl.AssignPropertiesFromNetworkRuleSetStatus(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSetStatus() to populate field NetworkAcls")
		}
		account.NetworkAcls = &networkAcl
	} else {
		account.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if source.PrimaryEndpoints != nil {
		var primaryEndpoint Endpoints_Status
		err := primaryEndpoint.AssignPropertiesFromEndpointsStatus(source.PrimaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEndpointsStatus() to populate field PrimaryEndpoints")
		}
		account.PrimaryEndpoints = &primaryEndpoint
	} else {
		account.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	account.PrimaryLocation = genruntime.ClonePointerToString(source.PrimaryLocation)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		account.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		account.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := StorageAccountPropertiesStatusProvisioningState(*source.ProvisioningState)
		account.ProvisioningState = &provisioningState
	} else {
		account.ProvisioningState = nil
	}

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference_Status
		err := routingPreference.AssignPropertiesFromRoutingPreferenceStatus(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreferenceStatus() to populate field RoutingPreference")
		}
		account.RoutingPreference = &routingPreference
	} else {
		account.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy_Status
		err := sasPolicy.AssignPropertiesFromSasPolicyStatus(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicyStatus() to populate field SasPolicy")
		}
		account.SasPolicy = &sasPolicy
	} else {
		account.SasPolicy = nil
	}

	// SecondaryEndpoints
	if source.SecondaryEndpoints != nil {
		var secondaryEndpoint Endpoints_Status
		err := secondaryEndpoint.AssignPropertiesFromEndpointsStatus(source.SecondaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEndpointsStatus() to populate field SecondaryEndpoints")
		}
		account.SecondaryEndpoints = &secondaryEndpoint
	} else {
		account.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	account.SecondaryLocation = genruntime.ClonePointerToString(source.SecondaryLocation)

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuStatus() to populate field Sku")
		}
		account.Sku = &sku
	} else {
		account.Sku = nil
	}

	// StatusOfPrimary
	if source.StatusOfPrimary != nil {
		statusOfPrimary := StorageAccountPropertiesStatusStatusOfPrimary(*source.StatusOfPrimary)
		account.StatusOfPrimary = &statusOfPrimary
	} else {
		account.StatusOfPrimary = nil
	}

	// StatusOfSecondary
	if source.StatusOfSecondary != nil {
		statusOfSecondary := StorageAccountPropertiesStatusStatusOfSecondary(*source.StatusOfSecondary)
		account.StatusOfSecondary = &statusOfSecondary
	} else {
		account.StatusOfSecondary = nil
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		account.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		account.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	account.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountStatus populates the provided destination StorageAccount_Status from our StorageAccount_Status
func (account *StorageAccount_Status) AssignPropertiesToStorageAccountStatus(destination *v20210401s.StorageAccount_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if account.AccessTier != nil {
		accessTier := string(*account.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if account.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *account.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if account.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *account.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if account.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *account.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if account.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v20210401s.AzureFilesIdentityBasedAuthentication_Status
		err := account.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if account.BlobRestoreStatus != nil {
		var blobRestoreStatus v20210401s.BlobRestoreStatus_Status
		err := account.BlobRestoreStatus.AssignPropertiesToBlobRestoreStatusStatus(&blobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreStatusStatus() to populate field BlobRestoreStatus")
		}
		destination.BlobRestoreStatus = &blobRestoreStatus
	} else {
		destination.BlobRestoreStatus = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(account.Conditions)

	// CreationTime
	destination.CreationTime = genruntime.ClonePointerToString(account.CreationTime)

	// CustomDomain
	if account.CustomDomain != nil {
		var customDomain v20210401s.CustomDomain_Status
		err := account.CustomDomain.AssignPropertiesToCustomDomainStatus(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomainStatus() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if account.Encryption != nil {
		var encryption v20210401s.Encryption_Status
		err := account.Encryption.AssignPropertiesToEncryptionStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if account.ExtendedLocation != nil {
		var extendedLocation v20210401s.ExtendedLocation_Status
		err := account.ExtendedLocation.AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationStatus() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FailoverInProgress
	if account.FailoverInProgress != nil {
		failoverInProgress := *account.FailoverInProgress
		destination.FailoverInProgress = &failoverInProgress
	} else {
		destination.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if account.GeoReplicationStats != nil {
		var geoReplicationStat v20210401s.GeoReplicationStats_Status
		err := account.GeoReplicationStats.AssignPropertiesToGeoReplicationStatsStatus(&geoReplicationStat)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToGeoReplicationStatsStatus() to populate field GeoReplicationStats")
		}
		destination.GeoReplicationStats = &geoReplicationStat
	} else {
		destination.GeoReplicationStats = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(account.Id)

	// Identity
	if account.Identity != nil {
		var identity v20210401s.Identity_Status
		err := account.Identity.AssignPropertiesToIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if account.IsHnsEnabled != nil {
		isHnsEnabled := *account.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if account.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *account.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if account.KeyCreationTime != nil {
		var keyCreationTime v20210401s.KeyCreationTime_Status
		err := account.KeyCreationTime.AssignPropertiesToKeyCreationTimeStatus(&keyCreationTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyCreationTimeStatus() to populate field KeyCreationTime")
		}
		destination.KeyCreationTime = &keyCreationTime
	} else {
		destination.KeyCreationTime = nil
	}

	// KeyPolicy
	if account.KeyPolicy != nil {
		var keyPolicy v20210401s.KeyPolicy_Status
		err := account.KeyPolicy.AssignPropertiesToKeyPolicyStatus(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicyStatus() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	if account.Kind != nil {
		kind := string(*account.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// LargeFileSharesState
	if account.LargeFileSharesState != nil {
		largeFileSharesState := string(*account.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// LastGeoFailoverTime
	destination.LastGeoFailoverTime = genruntime.ClonePointerToString(account.LastGeoFailoverTime)

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// MinimumTlsVersion
	if account.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*account.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(account.Name)

	// NetworkAcls
	if account.NetworkAcls != nil {
		var networkAcl v20210401s.NetworkRuleSet_Status
		err := account.NetworkAcls.AssignPropertiesToNetworkRuleSetStatus(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSetStatus() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if account.PrimaryEndpoints != nil {
		var primaryEndpoint v20210401s.Endpoints_Status
		err := account.PrimaryEndpoints.AssignPropertiesToEndpointsStatus(&primaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEndpointsStatus() to populate field PrimaryEndpoints")
		}
		destination.PrimaryEndpoints = &primaryEndpoint
	} else {
		destination.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	destination.PrimaryLocation = genruntime.ClonePointerToString(account.PrimaryLocation)

	// PrivateEndpointConnections
	if account.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20210401s.PrivateEndpointConnection_Status_SubResourceEmbedded, len(account.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range account.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20210401s.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if account.ProvisioningState != nil {
		provisioningState := string(*account.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RoutingPreference
	if account.RoutingPreference != nil {
		var routingPreference v20210401s.RoutingPreference_Status
		err := account.RoutingPreference.AssignPropertiesToRoutingPreferenceStatus(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreferenceStatus() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if account.SasPolicy != nil {
		var sasPolicy v20210401s.SasPolicy_Status
		err := account.SasPolicy.AssignPropertiesToSasPolicyStatus(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicyStatus() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// SecondaryEndpoints
	if account.SecondaryEndpoints != nil {
		var secondaryEndpoint v20210401s.Endpoints_Status
		err := account.SecondaryEndpoints.AssignPropertiesToEndpointsStatus(&secondaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEndpointsStatus() to populate field SecondaryEndpoints")
		}
		destination.SecondaryEndpoints = &secondaryEndpoint
	} else {
		destination.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	destination.SecondaryLocation = genruntime.ClonePointerToString(account.SecondaryLocation)

	// Sku
	if account.Sku != nil {
		var sku v20210401s.Sku_Status
		err := account.Sku.AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StatusOfPrimary
	if account.StatusOfPrimary != nil {
		statusOfPrimary := string(*account.StatusOfPrimary)
		destination.StatusOfPrimary = &statusOfPrimary
	} else {
		destination.StatusOfPrimary = nil
	}

	// StatusOfSecondary
	if account.StatusOfSecondary != nil {
		statusOfSecondary := string(*account.StatusOfSecondary)
		destination.StatusOfSecondary = &statusOfSecondary
	} else {
		destination.StatusOfSecondary = nil
	}

	// SupportsHttpsTrafficOnly
	if account.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *account.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(account.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccounts_Spec struct {
	// AccessTier: Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	AccessTier *StorageAccountPropertiesCreateParametersAccessTier `json:"accessTier,omitempty"`

	// AllowBlobPublicAccess: Allow or disallow public access to all blobs or containers in the storage account. The default
	// interpretation is true for this property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	// AllowCrossTenantReplication: Allow or disallow cross AAD tenant object replication. The default interpretation is true
	// for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	// AllowSharedKeyAccess: Indicates whether the storage account permits requests to be authorized with the account access
	// key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure
	// Active Directory (Azure AD). The default value is null, which is equivalent to true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	// AzureFilesIdentityBasedAuthentication: Settings for Azure Files identity based authentication.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	// +kubebuilder:validation:MaxLength=24
	// +kubebuilder:validation:MinLength=3
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// CustomDomain: The custom domain assigned to this storage account. This can be set via Update.
	CustomDomain *CustomDomain `json:"customDomain,omitempty"`

	// Encryption: The encryption settings on the storage account.
	Encryption *Encryption `json:"encryption,omitempty"`

	// ExtendedLocation: The complex type of the extended location.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Identity: Identity for the resource.
	Identity *Identity `json:"identity,omitempty"`

	// IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	// IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	// KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy `json:"keyPolicy,omitempty"`

	// +kubebuilder:validation:Required
	// Kind: Required. Indicates the type of storage account.
	Kind *StorageAccountsSpecKind `json:"kind,omitempty"`

	// LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
	LargeFileSharesState *StorageAccountPropertiesCreateParametersLargeFileSharesState `json:"largeFileSharesState,omitempty"`

	// Location: Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure
	// Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is
	// created, but if an identical geo region is specified on update, the request will succeed.
	Location *string `json:"location,omitempty"`

	// MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS
	// 1.0 for this property.
	MinimumTlsVersion *StorageAccountPropertiesCreateParametersMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	// NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet `json:"networkAcls,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *StorageAccountOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// RoutingPreference: Routing preference defines the type of network, either microsoft or internet routing to be used to
	// deliver the user data, the default option is microsoft routing
	RoutingPreference *RoutingPreference `json:"routingPreference,omitempty"`

	// SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy `json:"sasPolicy,omitempty"`

	// +kubebuilder:validation:Required
	// Sku: The SKU of the storage account.
	Sku *Sku `json:"sku,omitempty"`

	// SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets to true. The default value is true since
	// API version 2019-04-01.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`

	// Tags: Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping
	// this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key
	// with a length no greater than 128 characters and a value with a length no greater than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccounts_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (accounts *StorageAccounts_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if accounts == nil {
		return nil, nil
	}
	result := &StorageAccounts_SpecARM{}

	// Set property ‘ExtendedLocation’:
	if accounts.ExtendedLocation != nil {
		extendedLocationARM, err := (*accounts.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := *extendedLocationARM.(*ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if accounts.Identity != nil {
		identityARM, err := (*accounts.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*IdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	if accounts.Kind != nil {
		kind := *accounts.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if accounts.Location != nil {
		location := *accounts.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if accounts.AccessTier != nil ||
		accounts.AllowBlobPublicAccess != nil ||
		accounts.AllowCrossTenantReplication != nil ||
		accounts.AllowSharedKeyAccess != nil ||
		accounts.AzureFilesIdentityBasedAuthentication != nil ||
		accounts.CustomDomain != nil ||
		accounts.Encryption != nil ||
		accounts.IsHnsEnabled != nil ||
		accounts.IsNfsV3Enabled != nil ||
		accounts.KeyPolicy != nil ||
		accounts.LargeFileSharesState != nil ||
		accounts.MinimumTlsVersion != nil ||
		accounts.NetworkAcls != nil ||
		accounts.RoutingPreference != nil ||
		accounts.SasPolicy != nil ||
		accounts.SupportsHttpsTrafficOnly != nil {
		result.Properties = &StorageAccountPropertiesCreateParametersARM{}
	}
	if accounts.AccessTier != nil {
		accessTier := *accounts.AccessTier
		result.Properties.AccessTier = &accessTier
	}
	if accounts.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *accounts.AllowBlobPublicAccess
		result.Properties.AllowBlobPublicAccess = &allowBlobPublicAccess
	}
	if accounts.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *accounts.AllowCrossTenantReplication
		result.Properties.AllowCrossTenantReplication = &allowCrossTenantReplication
	}
	if accounts.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *accounts.AllowSharedKeyAccess
		result.Properties.AllowSharedKeyAccess = &allowSharedKeyAccess
	}
	if accounts.AzureFilesIdentityBasedAuthentication != nil {
		azureFilesIdentityBasedAuthenticationARM, err := (*accounts.AzureFilesIdentityBasedAuthentication).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		azureFilesIdentityBasedAuthentication := *azureFilesIdentityBasedAuthenticationARM.(*AzureFilesIdentityBasedAuthenticationARM)
		result.Properties.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	}
	if accounts.CustomDomain != nil {
		customDomainARM, err := (*accounts.CustomDomain).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		customDomain := *customDomainARM.(*CustomDomainARM)
		result.Properties.CustomDomain = &customDomain
	}
	if accounts.Encryption != nil {
		encryptionARM, err := (*accounts.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := *encryptionARM.(*EncryptionARM)
		result.Properties.Encryption = &encryption
	}
	if accounts.IsHnsEnabled != nil {
		isHnsEnabled := *accounts.IsHnsEnabled
		result.Properties.IsHnsEnabled = &isHnsEnabled
	}
	if accounts.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *accounts.IsNfsV3Enabled
		result.Properties.IsNfsV3Enabled = &isNfsV3Enabled
	}
	if accounts.KeyPolicy != nil {
		keyPolicyARM, err := (*accounts.KeyPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyPolicy := *keyPolicyARM.(*KeyPolicyARM)
		result.Properties.KeyPolicy = &keyPolicy
	}
	if accounts.LargeFileSharesState != nil {
		largeFileSharesState := *accounts.LargeFileSharesState
		result.Properties.LargeFileSharesState = &largeFileSharesState
	}
	if accounts.MinimumTlsVersion != nil {
		minimumTlsVersion := *accounts.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}
	if accounts.NetworkAcls != nil {
		networkAclsARM, err := (*accounts.NetworkAcls).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkAcls := *networkAclsARM.(*NetworkRuleSetARM)
		result.Properties.NetworkAcls = &networkAcls
	}
	if accounts.RoutingPreference != nil {
		routingPreferenceARM, err := (*accounts.RoutingPreference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		routingPreference := *routingPreferenceARM.(*RoutingPreferenceARM)
		result.Properties.RoutingPreference = &routingPreference
	}
	if accounts.SasPolicy != nil {
		sasPolicyARM, err := (*accounts.SasPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sasPolicy := *sasPolicyARM.(*SasPolicyARM)
		result.Properties.SasPolicy = &sasPolicy
	}
	if accounts.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *accounts.SupportsHttpsTrafficOnly
		result.Properties.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	}

	// Set property ‘Sku’:
	if accounts.Sku != nil {
		skuARM, err := (*accounts.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*SkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if accounts.Tags != nil {
		result.Tags = make(map[string]string, len(accounts.Tags))
		for key, value := range accounts.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (accounts *StorageAccounts_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (accounts *StorageAccounts_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_SpecARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			accounts.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			accounts.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			accounts.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			accounts.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			accounts.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// Set property ‘AzureName’:
	accounts.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			accounts.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			accounts.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		accounts.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		accounts.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			accounts.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			accounts.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			accounts.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		accounts.Kind = &kind
	}

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			accounts.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		accounts.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			accounts.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			accounts.NetworkAcls = &networkAcls
		}
	}

	// no assignment for property ‘OperatorSpec’

	// Set property ‘Owner’:
	accounts.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			accounts.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			accounts.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		accounts.Sku = &sku
	}

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			accounts.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		accounts.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			accounts.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_Spec{}

// ConvertSpecFrom populates our StorageAccounts_Spec from the provided source
func (accounts *StorageAccounts_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210401s.StorageAccounts_Spec)
	if ok {
		// Populate our instance from source
		return accounts.AssignPropertiesFromStorageAccountsSpec(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccounts_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = accounts.AssignPropertiesFromStorageAccountsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210401s.StorageAccounts_Spec)
	if ok {
		// Populate destination from our instance
		return accounts.AssignPropertiesToStorageAccountsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccounts_Spec{}
	err := accounts.AssignPropertiesToStorageAccountsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsSpec populates our StorageAccounts_Spec from the provided source StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) AssignPropertiesFromStorageAccountsSpec(source *v20210401s.StorageAccounts_Spec) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountPropertiesCreateParametersAccessTier(*source.AccessTier)
		accounts.AccessTier = &accessTier
	} else {
		accounts.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		accounts.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		accounts.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		accounts.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		accounts.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		accounts.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		accounts.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthentication() to populate field AzureFilesIdentityBasedAuthentication")
		}
		accounts.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		accounts.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	accounts.AzureName = source.AzureName

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain
		err := customDomain.AssignPropertiesFromCustomDomain(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomain() to populate field CustomDomain")
		}
		accounts.CustomDomain = &customDomain
	} else {
		accounts.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption() to populate field Encryption")
		}
		accounts.Encryption = &encryption
	} else {
		accounts.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		accounts.ExtendedLocation = &extendedLocation
	} else {
		accounts.ExtendedLocation = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity
		err := identity.AssignPropertiesFromIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity() to populate field Identity")
		}
		accounts.Identity = &identity
	} else {
		accounts.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		accounts.IsHnsEnabled = &isHnsEnabled
	} else {
		accounts.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		accounts.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		accounts.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy
		err := keyPolicy.AssignPropertiesFromKeyPolicy(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicy() to populate field KeyPolicy")
		}
		accounts.KeyPolicy = &keyPolicy
	} else {
		accounts.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		kind := StorageAccountsSpecKind(*source.Kind)
		accounts.Kind = &kind
	} else {
		accounts.Kind = nil
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountPropertiesCreateParametersLargeFileSharesState(*source.LargeFileSharesState)
		accounts.LargeFileSharesState = &largeFileSharesState
	} else {
		accounts.LargeFileSharesState = nil
	}

	// Location
	accounts.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountPropertiesCreateParametersMinimumTlsVersion(*source.MinimumTlsVersion)
		accounts.MinimumTlsVersion = &minimumTlsVersion
	} else {
		accounts.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet
		err := networkAcl.AssignPropertiesFromNetworkRuleSet(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSet() to populate field NetworkAcls")
		}
		accounts.NetworkAcls = &networkAcl
	} else {
		accounts.NetworkAcls = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec StorageAccountOperatorSpec
		err := operatorSpec.AssignPropertiesFromStorageAccountOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountOperatorSpec() to populate field OperatorSpec")
		}
		accounts.OperatorSpec = &operatorSpec
	} else {
		accounts.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		accounts.Owner = &owner
	} else {
		accounts.Owner = nil
	}

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference
		err := routingPreference.AssignPropertiesFromRoutingPreference(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreference() to populate field RoutingPreference")
		}
		accounts.RoutingPreference = &routingPreference
	} else {
		accounts.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy
		err := sasPolicy.AssignPropertiesFromSasPolicy(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicy() to populate field SasPolicy")
		}
		accounts.SasPolicy = &sasPolicy
	} else {
		accounts.SasPolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		accounts.Sku = &sku
	} else {
		accounts.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		accounts.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		accounts.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	accounts.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsSpec populates the provided destination StorageAccounts_Spec from our StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) AssignPropertiesToStorageAccountsSpec(destination *v20210401s.StorageAccounts_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if accounts.AccessTier != nil {
		accessTier := string(*accounts.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if accounts.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *accounts.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if accounts.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *accounts.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if accounts.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *accounts.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if accounts.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v20210401s.AzureFilesIdentityBasedAuthentication
		err := accounts.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthentication(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthentication() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	destination.AzureName = accounts.AzureName

	// CustomDomain
	if accounts.CustomDomain != nil {
		var customDomain v20210401s.CustomDomain
		err := accounts.CustomDomain.AssignPropertiesToCustomDomain(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomain() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if accounts.Encryption != nil {
		var encryption v20210401s.Encryption
		err := accounts.Encryption.AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if accounts.ExtendedLocation != nil {
		var extendedLocation v20210401s.ExtendedLocation
		err := accounts.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Identity
	if accounts.Identity != nil {
		var identity v20210401s.Identity
		err := accounts.Identity.AssignPropertiesToIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if accounts.IsHnsEnabled != nil {
		isHnsEnabled := *accounts.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if accounts.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *accounts.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if accounts.KeyPolicy != nil {
		var keyPolicy v20210401s.KeyPolicy
		err := accounts.KeyPolicy.AssignPropertiesToKeyPolicy(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicy() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	if accounts.Kind != nil {
		kind := string(*accounts.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// LargeFileSharesState
	if accounts.LargeFileSharesState != nil {
		largeFileSharesState := string(*accounts.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(accounts.Location)

	// MinimumTlsVersion
	if accounts.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*accounts.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if accounts.NetworkAcls != nil {
		var networkAcl v20210401s.NetworkRuleSet
		err := accounts.NetworkAcls.AssignPropertiesToNetworkRuleSet(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSet() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// OperatorSpec
	if accounts.OperatorSpec != nil {
		var operatorSpec v20210401s.StorageAccountOperatorSpec
		err := accounts.OperatorSpec.AssignPropertiesToStorageAccountOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = accounts.OriginalVersion()

	// Owner
	if accounts.Owner != nil {
		owner := accounts.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RoutingPreference
	if accounts.RoutingPreference != nil {
		var routingPreference v20210401s.RoutingPreference
		err := accounts.RoutingPreference.AssignPropertiesToRoutingPreference(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreference() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if accounts.SasPolicy != nil {
		var sasPolicy v20210401s.SasPolicy
		err := accounts.SasPolicy.AssignPropertiesToSasPolicy(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicy() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// Sku
	if accounts.Sku != nil {
		var sku v20210401s.Sku
		err := accounts.Sku.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if accounts.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *accounts.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(accounts.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (accounts *StorageAccounts_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (accounts *StorageAccounts_Spec) SetAzureName(azureName string) { accounts.AzureName = azureName }

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/AzureFilesIdentityBasedAuthentication
type AzureFilesIdentityBasedAuthentication struct {
	// ActiveDirectoryProperties: Settings properties for Active Directory (AD).
	ActiveDirectoryProperties *ActiveDirectoryProperties `json:"activeDirectoryProperties,omitempty"`

	// DefaultSharePermission: Default share permission for users using Kerberos authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthenticationDefaultSharePermission `json:"defaultSharePermission,omitempty"`

	// +kubebuilder:validation:Required
	// DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions *AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions `json:"directoryServiceOptions,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFilesIdentityBasedAuthentication{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (authentication *AzureFilesIdentityBasedAuthentication) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if authentication == nil {
		return nil, nil
	}
	result := &AzureFilesIdentityBasedAuthenticationARM{}

	// Set property ‘ActiveDirectoryProperties’:
	if authentication.ActiveDirectoryProperties != nil {
		activeDirectoryPropertiesARM, err := (*authentication.ActiveDirectoryProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		activeDirectoryProperties := *activeDirectoryPropertiesARM.(*ActiveDirectoryPropertiesARM)
		result.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := *authentication.DefaultSharePermission
		result.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	if authentication.DirectoryServiceOptions != nil {
		directoryServiceOptions := *authentication.DirectoryServiceOptions
		result.DirectoryServiceOptions = &directoryServiceOptions
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authentication *AzureFilesIdentityBasedAuthentication) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthenticationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authentication *AzureFilesIdentityBasedAuthentication) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthenticationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthenticationARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		authentication.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		authentication.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	if typedInput.DirectoryServiceOptions != nil {
		directoryServiceOptions := *typedInput.DirectoryServiceOptions
		authentication.DirectoryServiceOptions = &directoryServiceOptions
	}

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthentication populates our AzureFilesIdentityBasedAuthentication from the provided source AzureFilesIdentityBasedAuthentication
func (authentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source *v20210401s.AzureFilesIdentityBasedAuthentication) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryProperties(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryProperties() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthenticationDefaultSharePermission(*source.DefaultSharePermission)
		authentication.DefaultSharePermission = &defaultSharePermission
	} else {
		authentication.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		directoryServiceOption := AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions(*source.DirectoryServiceOptions)
		authentication.DirectoryServiceOptions = &directoryServiceOption
	} else {
		authentication.DirectoryServiceOptions = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthentication populates the provided destination AzureFilesIdentityBasedAuthentication from our AzureFilesIdentityBasedAuthentication
func (authentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesToAzureFilesIdentityBasedAuthentication(destination *v20210401s.AzureFilesIdentityBasedAuthentication) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v20210401s.ActiveDirectoryProperties
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryProperties(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryProperties() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := string(*authentication.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if authentication.DirectoryServiceOptions != nil {
		directoryServiceOption := string(*authentication.DirectoryServiceOptions)
		destination.DirectoryServiceOptions = &directoryServiceOption
	} else {
		destination.DirectoryServiceOptions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AzureFilesIdentityBasedAuthentication_Status struct {
	// ActiveDirectoryProperties: Required if choose AD.
	ActiveDirectoryProperties *ActiveDirectoryProperties_Status `json:"activeDirectoryProperties,omitempty"`

	// DefaultSharePermission: Default share permission for users using Kerberos authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission `json:"defaultSharePermission,omitempty"`

	// DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions *AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions `json:"directoryServiceOptions,omitempty"`
}

var _ genruntime.FromARMConverter = &AzureFilesIdentityBasedAuthentication_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authentication *AzureFilesIdentityBasedAuthentication_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthentication_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authentication *AzureFilesIdentityBasedAuthentication_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthentication_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthentication_StatusARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties_Status
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		authentication.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		authentication.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	if typedInput.DirectoryServiceOptions != nil {
		directoryServiceOptions := *typedInput.DirectoryServiceOptions
		authentication.DirectoryServiceOptions = &directoryServiceOptions
	}

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus populates our AzureFilesIdentityBasedAuthentication_Status from the provided source AzureFilesIdentityBasedAuthentication_Status
func (authentication *AzureFilesIdentityBasedAuthentication_Status) AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus(source *v20210401s.AzureFilesIdentityBasedAuthentication_Status) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties_Status
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryPropertiesStatus(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryPropertiesStatus() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission(*source.DefaultSharePermission)
		authentication.DefaultSharePermission = &defaultSharePermission
	} else {
		authentication.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		directoryServiceOption := AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions(*source.DirectoryServiceOptions)
		authentication.DirectoryServiceOptions = &directoryServiceOption
	} else {
		authentication.DirectoryServiceOptions = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus populates the provided destination AzureFilesIdentityBasedAuthentication_Status from our AzureFilesIdentityBasedAuthentication_Status
func (authentication *AzureFilesIdentityBasedAuthentication_Status) AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus(destination *v20210401s.AzureFilesIdentityBasedAuthentication_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v20210401s.ActiveDirectoryProperties_Status
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryPropertiesStatus(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryPropertiesStatus() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := string(*authentication.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if authentication.DirectoryServiceOptions != nil {
		directoryServiceOption := string(*authentication.DirectoryServiceOptions)
		destination.DirectoryServiceOptions = &directoryServiceOption
	} else {
		destination.DirectoryServiceOptions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BlobRestoreStatus_Status struct {
	// FailureReason: Failure reason when blob restore is failed.
	FailureReason *string `json:"failureReason,omitempty"`

	// Parameters: Blob restore request parameters.
	Parameters *BlobRestoreParameters_Status `json:"parameters,omitempty"`

	// RestoreId: Id for tracking blob restore request.
	RestoreId *string `json:"restoreId,omitempty"`

	// Status: The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing.
	// - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
	Status *BlobRestoreStatusStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &BlobRestoreStatus_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (restore *BlobRestoreStatus_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreStatus_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (restore *BlobRestoreStatus_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreStatus_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreStatus_StatusARM, got %T", armInput)
	}

	// Set property ‘FailureReason’:
	if typedInput.FailureReason != nil {
		failureReason := *typedInput.FailureReason
		restore.FailureReason = &failureReason
	}

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 BlobRestoreParameters_Status
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		restore.Parameters = &parameters
	}

	// Set property ‘RestoreId’:
	if typedInput.RestoreId != nil {
		restoreId := *typedInput.RestoreId
		restore.RestoreId = &restoreId
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		restore.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreStatusStatus populates our BlobRestoreStatus_Status from the provided source BlobRestoreStatus_Status
func (restore *BlobRestoreStatus_Status) AssignPropertiesFromBlobRestoreStatusStatus(source *v20210401s.BlobRestoreStatus_Status) error {

	// FailureReason
	restore.FailureReason = genruntime.ClonePointerToString(source.FailureReason)

	// Parameters
	if source.Parameters != nil {
		var parameter BlobRestoreParameters_Status
		err := parameter.AssignPropertiesFromBlobRestoreParametersStatus(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreParametersStatus() to populate field Parameters")
		}
		restore.Parameters = &parameter
	} else {
		restore.Parameters = nil
	}

	// RestoreId
	restore.RestoreId = genruntime.ClonePointerToString(source.RestoreId)

	// Status
	if source.Status != nil {
		status := BlobRestoreStatusStatusStatus(*source.Status)
		restore.Status = &status
	} else {
		restore.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreStatusStatus populates the provided destination BlobRestoreStatus_Status from our BlobRestoreStatus_Status
func (restore *BlobRestoreStatus_Status) AssignPropertiesToBlobRestoreStatusStatus(destination *v20210401s.BlobRestoreStatus_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FailureReason
	destination.FailureReason = genruntime.ClonePointerToString(restore.FailureReason)

	// Parameters
	if restore.Parameters != nil {
		var parameter v20210401s.BlobRestoreParameters_Status
		err := restore.Parameters.AssignPropertiesToBlobRestoreParametersStatus(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreParametersStatus() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// RestoreId
	destination.RestoreId = genruntime.ClonePointerToString(restore.RestoreId)

	// Status
	if restore.Status != nil {
		status := string(*restore.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/CustomDomain
type CustomDomain struct {
	// +kubebuilder:validation:Required
	// Name: Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
	Name *string `json:"name,omitempty"`

	// UseSubDomainName: Indicates whether indirect CName validation is enabled. Default value is false. This should only be
	// set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

var _ genruntime.ARMTransformer = &CustomDomain{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (domain *CustomDomain) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if domain == nil {
		return nil, nil
	}
	result := &CustomDomainARM{}

	// Set property ‘Name’:
	if domain.Name != nil {
		name := *domain.Name
		result.Name = &name
	}

	// Set property ‘UseSubDomainName’:
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		result.UseSubDomainName = &useSubDomainName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domain *CustomDomain) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomainARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domain *CustomDomain) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomainARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomainARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		domain.Name = &name
	}

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomain populates our CustomDomain from the provided source CustomDomain
func (domain *CustomDomain) AssignPropertiesFromCustomDomain(source *v20210401s.CustomDomain) error {

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomain populates the provided destination CustomDomain from our CustomDomain
func (domain *CustomDomain) AssignPropertiesToCustomDomain(destination *v20210401s.CustomDomain) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CustomDomain_Status struct {
	// Name: Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
	Name *string `json:"name,omitempty"`

	// UseSubDomainName: Indicates whether indirect CName validation is enabled. Default value is false. This should only be
	// set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

var _ genruntime.FromARMConverter = &CustomDomain_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domain *CustomDomain_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomain_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domain *CustomDomain_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomain_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomain_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		domain.Name = &name
	}

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomainStatus populates our CustomDomain_Status from the provided source CustomDomain_Status
func (domain *CustomDomain_Status) AssignPropertiesFromCustomDomainStatus(source *v20210401s.CustomDomain_Status) error {

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomainStatus populates the provided destination CustomDomain_Status from our CustomDomain_Status
func (domain *CustomDomain_Status) AssignPropertiesToCustomDomainStatus(destination *v20210401s.CustomDomain_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/Encryption
type Encryption struct {
	// Identity: Encryption identity for the storage account.
	Identity *EncryptionIdentity `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	// KeySource: The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage,
	// Microsoft.Keyvault.
	KeySource *EncryptionKeySource `json:"keySource,omitempty"`

	// Keyvaultproperties: Properties of key vault.
	Keyvaultproperties *KeyVaultProperties `json:"keyvaultproperties,omitempty"`

	// RequireInfrastructureEncryption: A boolean indicating whether or not the service applies a secondary layer of encryption
	// with platform managed keys for data at rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	// Services: A list of services that support encryption.
	Services *EncryptionServices `json:"services,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	result := &EncryptionARM{}

	// Set property ‘Identity’:
	if encryption.Identity != nil {
		identityARM, err := (*encryption.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*EncryptionIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘KeySource’:
	if encryption.KeySource != nil {
		keySource := *encryption.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘Keyvaultproperties’:
	if encryption.Keyvaultproperties != nil {
		keyvaultpropertiesARM, err := (*encryption.Keyvaultproperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyvaultproperties := *keyvaultpropertiesARM.(*KeyVaultPropertiesARM)
		result.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		result.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if encryption.Services != nil {
		servicesARM, err := (*encryption.Services).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		services := *servicesARM.(*EncryptionServicesARM)
		result.Services = &services
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryption.Identity = &identity
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryption.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryption.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption populates our Encryption from the provided source Encryption
func (encryption *Encryption) AssignPropertiesFromEncryption(source *v20210401s.Encryption) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity
		err := identity.AssignPropertiesFromEncryptionIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentity() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties
		err := keyvaultproperty.AssignPropertiesFromKeyVaultProperties(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices
		err := service.AssignPropertiesFromEncryptionServices(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServices() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption populates the provided destination Encryption from our Encryption
func (encryption *Encryption) AssignPropertiesToEncryption(destination *v20210401s.Encryption) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryption.Identity != nil {
		var identity v20210401s.EncryptionIdentity
		err := encryption.Identity.AssignPropertiesToEncryptionIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty v20210401s.KeyVaultProperties
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultProperties(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service v20210401s.EncryptionServices
		err := encryption.Services.AssignPropertiesToEncryptionServices(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServices() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Encryption_Status struct {
	// Identity: The identity to be used with service-side encryption at rest.
	Identity *EncryptionIdentity_Status `json:"identity,omitempty"`

	// KeySource: The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage,
	// Microsoft.Keyvault
	KeySource *EncryptionStatusKeySource `json:"keySource,omitempty"`

	// Keyvaultproperties: Properties provided by key vault.
	Keyvaultproperties *KeyVaultProperties_Status `json:"keyvaultproperties,omitempty"`

	// RequireInfrastructureEncryption: A boolean indicating whether or not the service applies a secondary layer of encryption
	// with platform managed keys for data at rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	// Services: List of services which support encryption.
	Services *EncryptionServices_Status `json:"services,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryption.Identity = &identity
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties_Status
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryption.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices_Status
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryption.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionStatus populates our Encryption_Status from the provided source Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesFromEncryptionStatus(source *v20210401s.Encryption_Status) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity_Status
		err := identity.AssignPropertiesFromEncryptionIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentityStatus() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionStatusKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties_Status
		err := keyvaultproperty.AssignPropertiesFromKeyVaultPropertiesStatus(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesStatus() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices_Status
		err := service.AssignPropertiesFromEncryptionServicesStatus(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServicesStatus() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionStatus populates the provided destination Encryption_Status from our Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesToEncryptionStatus(destination *v20210401s.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryption.Identity != nil {
		var identity v20210401s.EncryptionIdentity_Status
		err := encryption.Identity.AssignPropertiesToEncryptionIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty v20210401s.KeyVaultProperties_Status
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultPropertiesStatus(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesStatus() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service v20210401s.EncryptionServices_Status
		err := encryption.Services.AssignPropertiesToEncryptionServicesStatus(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServicesStatus() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Endpoints_Status struct {
	// Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	// Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	// File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	// InternetEndpoints: Gets the internet routing storage endpoints
	InternetEndpoints *StorageAccountInternetEndpoints_Status `json:"internetEndpoints,omitempty"`

	// MicrosoftEndpoints: Gets the microsoft routing storage endpoints.
	MicrosoftEndpoints *StorageAccountMicrosoftEndpoints_Status `json:"microsoftEndpoints,omitempty"`

	// Queue: Gets the queue endpoint.
	Queue *string `json:"queue,omitempty"`

	// Table: Gets the table endpoint.
	Table *string `json:"table,omitempty"`

	// Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &Endpoints_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoints *Endpoints_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Endpoints_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoints *Endpoints_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Endpoints_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Endpoints_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		endpoints.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		endpoints.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		endpoints.File = &file
	}

	// Set property ‘InternetEndpoints’:
	if typedInput.InternetEndpoints != nil {
		var internetEndpoints1 StorageAccountInternetEndpoints_Status
		err := internetEndpoints1.PopulateFromARM(owner, *typedInput.InternetEndpoints)
		if err != nil {
			return err
		}
		internetEndpoints := internetEndpoints1
		endpoints.InternetEndpoints = &internetEndpoints
	}

	// Set property ‘MicrosoftEndpoints’:
	if typedInput.MicrosoftEndpoints != nil {
		var microsoftEndpoints1 StorageAccountMicrosoftEndpoints_Status
		err := microsoftEndpoints1.PopulateFromARM(owner, *typedInput.MicrosoftEndpoints)
		if err != nil {
			return err
		}
		microsoftEndpoints := microsoftEndpoints1
		endpoints.MicrosoftEndpoints = &microsoftEndpoints
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		queue := *typedInput.Queue
		endpoints.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		table := *typedInput.Table
		endpoints.Table = &table
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		endpoints.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromEndpointsStatus populates our Endpoints_Status from the provided source Endpoints_Status
func (endpoints *Endpoints_Status) AssignPropertiesFromEndpointsStatus(source *v20210401s.Endpoints_Status) error {

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// InternetEndpoints
	if source.InternetEndpoints != nil {
		var internetEndpoint StorageAccountInternetEndpoints_Status
		err := internetEndpoint.AssignPropertiesFromStorageAccountInternetEndpointsStatus(source.InternetEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountInternetEndpointsStatus() to populate field InternetEndpoints")
		}
		endpoints.InternetEndpoints = &internetEndpoint
	} else {
		endpoints.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if source.MicrosoftEndpoints != nil {
		var microsoftEndpoint StorageAccountMicrosoftEndpoints_Status
		err := microsoftEndpoint.AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus(source.MicrosoftEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus() to populate field MicrosoftEndpoints")
		}
		endpoints.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		endpoints.MicrosoftEndpoints = nil
	}

	// Queue
	endpoints.Queue = genruntime.ClonePointerToString(source.Queue)

	// Table
	endpoints.Table = genruntime.ClonePointerToString(source.Table)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// No error
	return nil
}

// AssignPropertiesToEndpointsStatus populates the provided destination Endpoints_Status from our Endpoints_Status
func (endpoints *Endpoints_Status) AssignPropertiesToEndpointsStatus(destination *v20210401s.Endpoints_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// InternetEndpoints
	if endpoints.InternetEndpoints != nil {
		var internetEndpoint v20210401s.StorageAccountInternetEndpoints_Status
		err := endpoints.InternetEndpoints.AssignPropertiesToStorageAccountInternetEndpointsStatus(&internetEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountInternetEndpointsStatus() to populate field InternetEndpoints")
		}
		destination.InternetEndpoints = &internetEndpoint
	} else {
		destination.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if endpoints.MicrosoftEndpoints != nil {
		var microsoftEndpoint v20210401s.StorageAccountMicrosoftEndpoints_Status
		err := endpoints.MicrosoftEndpoints.AssignPropertiesToStorageAccountMicrosoftEndpointsStatus(&microsoftEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountMicrosoftEndpointsStatus() to populate field MicrosoftEndpoints")
		}
		destination.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		destination.MicrosoftEndpoints = nil
	}

	// Queue
	destination.Queue = genruntime.ClonePointerToString(endpoints.Queue)

	// Table
	destination.Table = genruntime.ClonePointerToString(endpoints.Table)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/ExtendedLocation
type ExtendedLocation struct {
	// Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	// Type: The type of the extended location.
	Type *ExtendedLocationType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	result := &ExtendedLocationARM{}

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocationARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesFromExtendedLocation(source *v20210401s.ExtendedLocation) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesToExtendedLocation(destination *v20210401s.ExtendedLocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExtendedLocation_Status struct {
	// Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	// Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationStatus populates our ExtendedLocation_Status from the provided source ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesFromExtendedLocationStatus(source *v20210401s.ExtendedLocation_Status) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Status(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationStatus populates the provided destination ExtendedLocation_Status from our ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesToExtendedLocationStatus(destination *v20210401s.ExtendedLocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type GeoReplicationStats_Status struct {
	// CanFailover: A boolean flag which indicates whether or not account failover is supported for the account.
	CanFailover *bool `json:"canFailover,omitempty"`

	// LastSyncTime: All primary writes preceding this UTC date/time value are guaranteed to be available for read operations.
	// Primary writes following this point in time may or may not be available for reads. Element may be default value if value
	// of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
	LastSyncTime *string `json:"lastSyncTime,omitempty"`

	// Status: The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is
	// active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary
	// location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the
	// secondary location is temporarily unavailable.
	Status *GeoReplicationStatsStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &GeoReplicationStats_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (stats *GeoReplicationStats_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &GeoReplicationStats_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (stats *GeoReplicationStats_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(GeoReplicationStats_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected GeoReplicationStats_StatusARM, got %T", armInput)
	}

	// Set property ‘CanFailover’:
	if typedInput.CanFailover != nil {
		canFailover := *typedInput.CanFailover
		stats.CanFailover = &canFailover
	}

	// Set property ‘LastSyncTime’:
	if typedInput.LastSyncTime != nil {
		lastSyncTime := *typedInput.LastSyncTime
		stats.LastSyncTime = &lastSyncTime
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		stats.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromGeoReplicationStatsStatus populates our GeoReplicationStats_Status from the provided source GeoReplicationStats_Status
func (stats *GeoReplicationStats_Status) AssignPropertiesFromGeoReplicationStatsStatus(source *v20210401s.GeoReplicationStats_Status) error {

	// CanFailover
	if source.CanFailover != nil {
		canFailover := *source.CanFailover
		stats.CanFailover = &canFailover
	} else {
		stats.CanFailover = nil
	}

	// LastSyncTime
	stats.LastSyncTime = genruntime.ClonePointerToString(source.LastSyncTime)

	// Status
	if source.Status != nil {
		status := GeoReplicationStatsStatusStatus(*source.Status)
		stats.Status = &status
	} else {
		stats.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToGeoReplicationStatsStatus populates the provided destination GeoReplicationStats_Status from our GeoReplicationStats_Status
func (stats *GeoReplicationStats_Status) AssignPropertiesToGeoReplicationStatsStatus(destination *v20210401s.GeoReplicationStats_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CanFailover
	if stats.CanFailover != nil {
		canFailover := *stats.CanFailover
		destination.CanFailover = &canFailover
	} else {
		destination.CanFailover = nil
	}

	// LastSyncTime
	destination.LastSyncTime = genruntime.ClonePointerToString(stats.LastSyncTime)

	// Status
	if stats.Status != nil {
		status := string(*stats.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/Identity
type Identity struct {
	// +kubebuilder:validation:Required
	// Type: The identity type.
	Type *IdentityType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Identity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &IdentityARM{}

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentity populates our Identity from the provided source Identity
func (identity *Identity) AssignPropertiesFromIdentity(source *v20210401s.Identity) error {

	// Type
	if source.Type != nil {
		typeVar := IdentityType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity populates the provided destination Identity from our Identity
func (identity *Identity) AssignPropertiesToIdentity(destination *v20210401s.Identity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Identity_Status struct {
	// PrincipalId: The principal ID of resource identity.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: The tenant ID of resource.
	TenantId *string `json:"tenantId,omitempty"`

	// Type: The identity type.
	Type *IdentityStatusType `json:"type,omitempty"`

	// UserAssignedIdentities: Gets or sets a list of key value pairs that describe the set of User Assigned identities that
	// will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned
	// identity is permitted here.
	UserAssignedIdentities map[string]UserAssignedIdentity_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]UserAssignedIdentity_Status, len(typedInput.UserAssignedIdentities))
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentity_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentityStatus populates our Identity_Status from the provided source Identity_Status
func (identity *Identity_Status) AssignPropertiesFromIdentityStatus(source *v20210401s.Identity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentityStatusType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentity_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentity_Status
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentityStatus(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentityStatus populates the provided destination Identity_Status from our Identity_Status
func (identity *Identity_Status) AssignPropertiesToIdentityStatus(destination *v20210401s.Identity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v20210401s.UserAssignedIdentity_Status, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v20210401s.UserAssignedIdentity_Status
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentityStatus(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyCreationTime_Status struct {
	Key1 *string `json:"key1,omitempty"`
	Key2 *string `json:"key2,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyCreationTime_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (time *KeyCreationTime_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyCreationTime_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (time *KeyCreationTime_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyCreationTime_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyCreationTime_StatusARM, got %T", armInput)
	}

	// Set property ‘Key1’:
	if typedInput.Key1 != nil {
		key1 := *typedInput.Key1
		time.Key1 = &key1
	}

	// Set property ‘Key2’:
	if typedInput.Key2 != nil {
		key2 := *typedInput.Key2
		time.Key2 = &key2
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyCreationTimeStatus populates our KeyCreationTime_Status from the provided source KeyCreationTime_Status
func (time *KeyCreationTime_Status) AssignPropertiesFromKeyCreationTimeStatus(source *v20210401s.KeyCreationTime_Status) error {

	// Key1
	time.Key1 = genruntime.ClonePointerToString(source.Key1)

	// Key2
	time.Key2 = genruntime.ClonePointerToString(source.Key2)

	// No error
	return nil
}

// AssignPropertiesToKeyCreationTimeStatus populates the provided destination KeyCreationTime_Status from our KeyCreationTime_Status
func (time *KeyCreationTime_Status) AssignPropertiesToKeyCreationTimeStatus(destination *v20210401s.KeyCreationTime_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key1
	destination.Key1 = genruntime.ClonePointerToString(time.Key1)

	// Key2
	destination.Key2 = genruntime.ClonePointerToString(time.Key2)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/KeyPolicy
type KeyPolicy struct {
	// +kubebuilder:validation:Required
	// KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays *int `json:"keyExpirationPeriodInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *KeyPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &KeyPolicyARM{}

	// Set property ‘KeyExpirationPeriodInDays’:
	if policy.KeyExpirationPeriodInDays != nil {
		keyExpirationPeriodInDays := *policy.KeyExpirationPeriodInDays
		result.KeyExpirationPeriodInDays = &keyExpirationPeriodInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *KeyPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *KeyPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicyARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	if typedInput.KeyExpirationPeriodInDays != nil {
		keyExpirationPeriodInDays := *typedInput.KeyExpirationPeriodInDays
		policy.KeyExpirationPeriodInDays = &keyExpirationPeriodInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicy populates our KeyPolicy from the provided source KeyPolicy
func (policy *KeyPolicy) AssignPropertiesFromKeyPolicy(source *v20210401s.KeyPolicy) error {

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(source.KeyExpirationPeriodInDays)

	// No error
	return nil
}

// AssignPropertiesToKeyPolicy populates the provided destination KeyPolicy from our KeyPolicy
func (policy *KeyPolicy) AssignPropertiesToKeyPolicy(destination *v20210401s.KeyPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(policy.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyPolicy_Status struct {
	// KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays *int `json:"keyExpirationPeriodInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *KeyPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *KeyPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	if typedInput.KeyExpirationPeriodInDays != nil {
		keyExpirationPeriodInDays := *typedInput.KeyExpirationPeriodInDays
		policy.KeyExpirationPeriodInDays = &keyExpirationPeriodInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicyStatus populates our KeyPolicy_Status from the provided source KeyPolicy_Status
func (policy *KeyPolicy_Status) AssignPropertiesFromKeyPolicyStatus(source *v20210401s.KeyPolicy_Status) error {

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(source.KeyExpirationPeriodInDays)

	// No error
	return nil
}

// AssignPropertiesToKeyPolicyStatus populates the provided destination KeyPolicy_Status from our KeyPolicy_Status
func (policy *KeyPolicy_Status) AssignPropertiesToKeyPolicyStatus(destination *v20210401s.KeyPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(policy.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/NetworkRuleSet
type NetworkRuleSet struct {
	// Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of
	// Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSetBypass `json:"bypass,omitempty"`

	// +kubebuilder:validation:Required
	// DefaultAction: Specifies the default action of allow or deny when no other rules match.
	DefaultAction *NetworkRuleSetDefaultAction `json:"defaultAction,omitempty"`

	// IpRules: Sets the IP ACL rules
	IpRules []IPRule `json:"ipRules,omitempty"`

	// ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule `json:"resourceAccessRules,omitempty"`

	// VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkRuleSet{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ruleSet *NetworkRuleSet) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ruleSet == nil {
		return nil, nil
	}
	result := &NetworkRuleSetARM{}

	// Set property ‘Bypass’:
	if ruleSet.Bypass != nil {
		bypass := *ruleSet.Bypass
		result.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	if ruleSet.DefaultAction != nil {
		defaultAction := *ruleSet.DefaultAction
		result.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range ruleSet.IpRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.IpRules = append(result.IpRules, *itemARM.(*IPRuleARM))
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range ruleSet.ResourceAccessRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ResourceAccessRules = append(result.ResourceAccessRules, *itemARM.(*ResourceAccessRuleARM))
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range ruleSet.VirtualNetworkRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VirtualNetworkRules = append(result.VirtualNetworkRules, *itemARM.(*VirtualNetworkRuleARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSetARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSetARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSetARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		ruleSet.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		ruleSet.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.ResourceAccessRules = append(ruleSet.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.VirtualNetworkRules = append(ruleSet.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSet populates our NetworkRuleSet from the provided source NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesFromNetworkRuleSet(source *v20210401s.NetworkRuleSet) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSetBypass(*source.Bypass)
		ruleSet.Bypass = &bypass
	} else {
		ruleSet.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := NetworkRuleSetDefaultAction(*source.DefaultAction)
		ruleSet.DefaultAction = &defaultAction
	} else {
		ruleSet.DefaultAction = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule
			err := ipRule.AssignPropertiesFromIPRule(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRule(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRule() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRule() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSet populates the provided destination NetworkRuleSet from our NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesToNetworkRuleSet(destination *v20210401s.NetworkRuleSet) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if ruleSet.Bypass != nil {
		bypass := string(*ruleSet.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	if ruleSet.DefaultAction != nil {
		defaultAction := string(*ruleSet.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v20210401s.IPRule, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v20210401s.IPRule
			err := ipRuleItem.AssignPropertiesToIPRule(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]v20210401s.ResourceAccessRule, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule v20210401s.ResourceAccessRule
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRule(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRule() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v20210401s.VirtualNetworkRule, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v20210401s.VirtualNetworkRule
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRule() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkRuleSet_Status struct {
	// Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of
	// Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSetStatusBypass `json:"bypass,omitempty"`

	// DefaultAction: Specifies the default action of allow or deny when no other rules match.
	DefaultAction *NetworkRuleSetStatusDefaultAction `json:"defaultAction,omitempty"`

	// IpRules: Sets the IP ACL rules
	IpRules []IPRule_Status `json:"ipRules,omitempty"`

	// ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule_Status `json:"resourceAccessRules,omitempty"`

	// VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule_Status `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkRuleSet_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_StatusARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		ruleSet.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		ruleSet.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.ResourceAccessRules = append(ruleSet.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.VirtualNetworkRules = append(ruleSet.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSetStatus populates our NetworkRuleSet_Status from the provided source NetworkRuleSet_Status
func (ruleSet *NetworkRuleSet_Status) AssignPropertiesFromNetworkRuleSetStatus(source *v20210401s.NetworkRuleSet_Status) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSetStatusBypass(*source.Bypass)
		ruleSet.Bypass = &bypass
	} else {
		ruleSet.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := NetworkRuleSetStatusDefaultAction(*source.DefaultAction)
		ruleSet.DefaultAction = &defaultAction
	} else {
		ruleSet.DefaultAction = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule_Status, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule_Status
			err := ipRule.AssignPropertiesFromIPRuleStatus(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRuleStatus() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule_Status, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule_Status
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRuleStatus(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRuleStatus() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_Status, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_Status
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRuleStatus(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRuleStatus() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSetStatus populates the provided destination NetworkRuleSet_Status from our NetworkRuleSet_Status
func (ruleSet *NetworkRuleSet_Status) AssignPropertiesToNetworkRuleSetStatus(destination *v20210401s.NetworkRuleSet_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if ruleSet.Bypass != nil {
		bypass := string(*ruleSet.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	if ruleSet.DefaultAction != nil {
		defaultAction := string(*ruleSet.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v20210401s.IPRule_Status, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v20210401s.IPRule_Status
			err := ipRuleItem.AssignPropertiesToIPRuleStatus(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRuleStatus() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]v20210401s.ResourceAccessRule_Status, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule v20210401s.ResourceAccessRule_Status
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRuleStatus(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRuleStatus() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v20210401s.VirtualNetworkRule_Status, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v20210401s.VirtualNetworkRule_Status
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRuleStatus(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRuleStatus() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *v20210401s.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *v20210401s.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/RoutingPreference
type RoutingPreference struct {
	// PublishInternetEndpoints: A boolean flag which indicates whether internet routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	// PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	// RoutingChoice: Routing Choice defines the kind of network routing opted by the user.
	RoutingChoice *RoutingPreferenceRoutingChoice `json:"routingChoice,omitempty"`
}

var _ genruntime.ARMTransformer = &RoutingPreference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (preference *RoutingPreference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if preference == nil {
		return nil, nil
	}
	result := &RoutingPreferenceARM{}

	// Set property ‘PublishInternetEndpoints’:
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *preference.PublishInternetEndpoints
		result.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *preference.PublishMicrosoftEndpoints
		result.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if preference.RoutingChoice != nil {
		routingChoice := *preference.RoutingChoice
		result.RoutingChoice = &routingChoice
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (preference *RoutingPreference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (preference *RoutingPreference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreferenceARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		preference.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreference populates our RoutingPreference from the provided source RoutingPreference
func (preference *RoutingPreference) AssignPropertiesFromRoutingPreference(source *v20210401s.RoutingPreference) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreferenceRoutingChoice(*source.RoutingChoice)
		preference.RoutingChoice = &routingChoice
	} else {
		preference.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreference populates the provided destination RoutingPreference from our RoutingPreference
func (preference *RoutingPreference) AssignPropertiesToRoutingPreference(destination *v20210401s.RoutingPreference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if preference.RoutingChoice != nil {
		routingChoice := string(*preference.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RoutingPreference_Status struct {
	// PublishInternetEndpoints: A boolean flag which indicates whether internet routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	// PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	// RoutingChoice: Routing Choice defines the kind of network routing opted by the user.
	RoutingChoice *RoutingPreferenceStatusRoutingChoice `json:"routingChoice,omitempty"`
}

var _ genruntime.FromARMConverter = &RoutingPreference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (preference *RoutingPreference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (preference *RoutingPreference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreference_StatusARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		preference.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreferenceStatus populates our RoutingPreference_Status from the provided source RoutingPreference_Status
func (preference *RoutingPreference_Status) AssignPropertiesFromRoutingPreferenceStatus(source *v20210401s.RoutingPreference_Status) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreferenceStatusRoutingChoice(*source.RoutingChoice)
		preference.RoutingChoice = &routingChoice
	} else {
		preference.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreferenceStatus populates the provided destination RoutingPreference_Status from our RoutingPreference_Status
func (preference *RoutingPreference_Status) AssignPropertiesToRoutingPreferenceStatus(destination *v20210401s.RoutingPreference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if preference.RoutingChoice != nil {
		routingChoice := string(*preference.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/SasPolicy
type SasPolicy struct {
	// +kubebuilder:validation:Required
	// ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction *SasPolicyExpirationAction `json:"expirationAction,omitempty"`

	// +kubebuilder:validation:Required
	// SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod *string `json:"sasExpirationPeriod,omitempty"`
}

var _ genruntime.ARMTransformer = &SasPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *SasPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &SasPolicyARM{}

	// Set property ‘ExpirationAction’:
	if policy.ExpirationAction != nil {
		expirationAction := *policy.ExpirationAction
		result.ExpirationAction = &expirationAction
	}

	// Set property ‘SasExpirationPeriod’:
	if policy.SasExpirationPeriod != nil {
		sasExpirationPeriod := *policy.SasExpirationPeriod
		result.SasExpirationPeriod = &sasExpirationPeriod
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *SasPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *SasPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicyARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	if typedInput.ExpirationAction != nil {
		expirationAction := *typedInput.ExpirationAction
		policy.ExpirationAction = &expirationAction
	}

	// Set property ‘SasExpirationPeriod’:
	if typedInput.SasExpirationPeriod != nil {
		sasExpirationPeriod := *typedInput.SasExpirationPeriod
		policy.SasExpirationPeriod = &sasExpirationPeriod
	}

	// No error
	return nil
}

// AssignPropertiesFromSasPolicy populates our SasPolicy from the provided source SasPolicy
func (policy *SasPolicy) AssignPropertiesFromSasPolicy(source *v20210401s.SasPolicy) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		expirationAction := SasPolicyExpirationAction(*source.ExpirationAction)
		policy.ExpirationAction = &expirationAction
	} else {
		policy.ExpirationAction = nil
	}

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.ClonePointerToString(source.SasExpirationPeriod)

	// No error
	return nil
}

// AssignPropertiesToSasPolicy populates the provided destination SasPolicy from our SasPolicy
func (policy *SasPolicy) AssignPropertiesToSasPolicy(destination *v20210401s.SasPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	if policy.ExpirationAction != nil {
		expirationAction := string(*policy.ExpirationAction)
		destination.ExpirationAction = &expirationAction
	} else {
		destination.ExpirationAction = nil
	}

	// SasExpirationPeriod
	destination.SasExpirationPeriod = genruntime.ClonePointerToString(policy.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SasPolicy_Status struct {
	// ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction *SasPolicyStatusExpirationAction `json:"expirationAction,omitempty"`

	// SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod *string `json:"sasExpirationPeriod,omitempty"`
}

var _ genruntime.FromARMConverter = &SasPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *SasPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *SasPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	if typedInput.ExpirationAction != nil {
		expirationAction := *typedInput.ExpirationAction
		policy.ExpirationAction = &expirationAction
	}

	// Set property ‘SasExpirationPeriod’:
	if typedInput.SasExpirationPeriod != nil {
		sasExpirationPeriod := *typedInput.SasExpirationPeriod
		policy.SasExpirationPeriod = &sasExpirationPeriod
	}

	// No error
	return nil
}

// AssignPropertiesFromSasPolicyStatus populates our SasPolicy_Status from the provided source SasPolicy_Status
func (policy *SasPolicy_Status) AssignPropertiesFromSasPolicyStatus(source *v20210401s.SasPolicy_Status) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		expirationAction := SasPolicyStatusExpirationAction(*source.ExpirationAction)
		policy.ExpirationAction = &expirationAction
	} else {
		policy.ExpirationAction = nil
	}

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.ClonePointerToString(source.SasExpirationPeriod)

	// No error
	return nil
}

// AssignPropertiesToSasPolicyStatus populates the provided destination SasPolicy_Status from our SasPolicy_Status
func (policy *SasPolicy_Status) AssignPropertiesToSasPolicyStatus(destination *v20210401s.SasPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	if policy.ExpirationAction != nil {
		expirationAction := string(*policy.ExpirationAction)
		destination.ExpirationAction = &expirationAction
	} else {
		destination.ExpirationAction = nil
	}

	// SasExpirationPeriod
	destination.SasExpirationPeriod = genruntime.ClonePointerToString(policy.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/Sku
type Sku struct {
	// +kubebuilder:validation:Required
	Name *SkuName `json:"name,omitempty"`
	Tier *SkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	result := &SkuARM{}

	// Set property ‘Name’:
	if sku.Name != nil {
		name := *sku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v20210401s.Sku) error {

	// Name
	if source.Name != nil {
		name := SkuName(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := SkuTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v20210401s.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	Name *SkuName_Status `json:"name,omitempty"`
	Tier *Tier_Status    `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSkuStatus(source *v20210401s.Sku_Status) error {

	// Name
	if source.Name != nil {
		name := SkuName_Status(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := Tier_Status(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSkuStatus(destination *v20210401s.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type StorageAccountOperatorSpec struct {
	// Secrets: configures where to place Azure generated secrets.
	Secrets *StorageAccountOperatorSecrets `json:"secrets,omitempty"`
}

// AssignPropertiesFromStorageAccountOperatorSpec populates our StorageAccountOperatorSpec from the provided source StorageAccountOperatorSpec
func (operator *StorageAccountOperatorSpec) AssignPropertiesFromStorageAccountOperatorSpec(source *v20210401s.StorageAccountOperatorSpec) error {

	// Secrets
	if source.Secrets != nil {
		var secret StorageAccountOperatorSecrets
		err := secret.AssignPropertiesFromStorageAccountOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountOperatorSpec populates the provided destination StorageAccountOperatorSpec from our StorageAccountOperatorSpec
func (operator *StorageAccountOperatorSpec) AssignPropertiesToStorageAccountOperatorSpec(destination *v20210401s.StorageAccountOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Secrets
	if operator.Secrets != nil {
		var secret v20210401s.StorageAccountOperatorSecrets
		err := operator.Secrets.AssignPropertiesToStorageAccountOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Cool","Hot"}
type StorageAccountPropertiesCreateParametersAccessTier string

const (
	StorageAccountPropertiesCreateParametersAccessTierCool = StorageAccountPropertiesCreateParametersAccessTier("Cool")
	StorageAccountPropertiesCreateParametersAccessTierHot  = StorageAccountPropertiesCreateParametersAccessTier("Hot")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type StorageAccountPropertiesCreateParametersLargeFileSharesState string

const (
	StorageAccountPropertiesCreateParametersLargeFileSharesStateDisabled = StorageAccountPropertiesCreateParametersLargeFileSharesState("Disabled")
	StorageAccountPropertiesCreateParametersLargeFileSharesStateEnabled  = StorageAccountPropertiesCreateParametersLargeFileSharesState("Enabled")
)

// +kubebuilder:validation:Enum={"TLS1_0","TLS1_1","TLS1_2"}
type StorageAccountPropertiesCreateParametersMinimumTlsVersion string

const (
	StorageAccountPropertiesCreateParametersMinimumTlsVersionTLS10 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_0")
	StorageAccountPropertiesCreateParametersMinimumTlsVersionTLS11 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_1")
	StorageAccountPropertiesCreateParametersMinimumTlsVersionTLS12 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_2")
)

type StorageAccountPropertiesStatusAccessTier string

const (
	StorageAccountPropertiesStatusAccessTierCool = StorageAccountPropertiesStatusAccessTier("Cool")
	StorageAccountPropertiesStatusAccessTierHot  = StorageAccountPropertiesStatusAccessTier("Hot")
)

type StorageAccountPropertiesStatusLargeFileSharesState string

const (
	StorageAccountPropertiesStatusLargeFileSharesStateDisabled = StorageAccountPropertiesStatusLargeFileSharesState("Disabled")
	StorageAccountPropertiesStatusLargeFileSharesStateEnabled  = StorageAccountPropertiesStatusLargeFileSharesState("Enabled")
)

type StorageAccountPropertiesStatusMinimumTlsVersion string

const (
	StorageAccountPropertiesStatusMinimumTlsVersionTLS10 = StorageAccountPropertiesStatusMinimumTlsVersion("TLS1_0")
	StorageAccountPropertiesStatusMinimumTlsVersionTLS11 = StorageAccountPropertiesStatusMinimumTlsVersion("TLS1_1")
	StorageAccountPropertiesStatusMinimumTlsVersionTLS12 = StorageAccountPropertiesStatusMinimumTlsVersion("TLS1_2")
)

type StorageAccountPropertiesStatusProvisioningState string

const (
	StorageAccountPropertiesStatusProvisioningStateCreating     = StorageAccountPropertiesStatusProvisioningState("Creating")
	StorageAccountPropertiesStatusProvisioningStateResolvingDNS = StorageAccountPropertiesStatusProvisioningState("ResolvingDNS")
	StorageAccountPropertiesStatusProvisioningStateSucceeded    = StorageAccountPropertiesStatusProvisioningState("Succeeded")
)

type StorageAccountPropertiesStatusStatusOfPrimary string

const (
	StorageAccountPropertiesStatusStatusOfPrimaryAvailable   = StorageAccountPropertiesStatusStatusOfPrimary("available")
	StorageAccountPropertiesStatusStatusOfPrimaryUnavailable = StorageAccountPropertiesStatusStatusOfPrimary("unavailable")
)

type StorageAccountPropertiesStatusStatusOfSecondary string

const (
	StorageAccountPropertiesStatusStatusOfSecondaryAvailable   = StorageAccountPropertiesStatusStatusOfSecondary("available")
	StorageAccountPropertiesStatusStatusOfSecondaryUnavailable = StorageAccountPropertiesStatusStatusOfSecondary("unavailable")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/ActiveDirectoryProperties
type ActiveDirectoryProperties struct {
	// +kubebuilder:validation:Required
	// AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid *string `json:"azureStorageSid,omitempty"`

	// +kubebuilder:validation:Required
	// DomainGuid: Specifies the domain GUID.
	DomainGuid *string `json:"domainGuid,omitempty"`

	// +kubebuilder:validation:Required
	// DomainName: Specifies the primary domain that the AD DNS server is authoritative for.
	DomainName *string `json:"domainName,omitempty"`

	// +kubebuilder:validation:Required
	// DomainSid: Specifies the security identifier (SID).
	DomainSid *string `json:"domainSid,omitempty"`

	// +kubebuilder:validation:Required
	// ForestName: Specifies the Active Directory forest to get.
	ForestName *string `json:"forestName,omitempty"`

	// +kubebuilder:validation:Required
	// NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName *string `json:"netBiosDomainName,omitempty"`
}

var _ genruntime.ARMTransformer = &ActiveDirectoryProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *ActiveDirectoryProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &ActiveDirectoryPropertiesARM{}

	// Set property ‘AzureStorageSid’:
	if properties.AzureStorageSid != nil {
		azureStorageSid := *properties.AzureStorageSid
		result.AzureStorageSid = &azureStorageSid
	}

	// Set property ‘DomainGuid’:
	if properties.DomainGuid != nil {
		domainGuid := *properties.DomainGuid
		result.DomainGuid = &domainGuid
	}

	// Set property ‘DomainName’:
	if properties.DomainName != nil {
		domainName := *properties.DomainName
		result.DomainName = &domainName
	}

	// Set property ‘DomainSid’:
	if properties.DomainSid != nil {
		domainSid := *properties.DomainSid
		result.DomainSid = &domainSid
	}

	// Set property ‘ForestName’:
	if properties.ForestName != nil {
		forestName := *properties.ForestName
		result.ForestName = &forestName
	}

	// Set property ‘NetBiosDomainName’:
	if properties.NetBiosDomainName != nil {
		netBiosDomainName := *properties.NetBiosDomainName
		result.NetBiosDomainName = &netBiosDomainName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ActiveDirectoryProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ActiveDirectoryProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryPropertiesARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	if typedInput.AzureStorageSid != nil {
		azureStorageSid := *typedInput.AzureStorageSid
		properties.AzureStorageSid = &azureStorageSid
	}

	// Set property ‘DomainGuid’:
	if typedInput.DomainGuid != nil {
		domainGuid := *typedInput.DomainGuid
		properties.DomainGuid = &domainGuid
	}

	// Set property ‘DomainName’:
	if typedInput.DomainName != nil {
		domainName := *typedInput.DomainName
		properties.DomainName = &domainName
	}

	// Set property ‘DomainSid’:
	if typedInput.DomainSid != nil {
		domainSid := *typedInput.DomainSid
		properties.DomainSid = &domainSid
	}

	// Set property ‘ForestName’:
	if typedInput.ForestName != nil {
		forestName := *typedInput.ForestName
		properties.ForestName = &forestName
	}

	// Set property ‘NetBiosDomainName’:
	if typedInput.NetBiosDomainName != nil {
		netBiosDomainName := *typedInput.NetBiosDomainName
		properties.NetBiosDomainName = &netBiosDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryProperties populates our ActiveDirectoryProperties from the provided source ActiveDirectoryProperties
func (properties *ActiveDirectoryProperties) AssignPropertiesFromActiveDirectoryProperties(source *v20210401s.ActiveDirectoryProperties) error {

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.ClonePointerToString(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.ClonePointerToString(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.ClonePointerToString(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.ClonePointerToString(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.ClonePointerToString(source.NetBiosDomainName)

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryProperties populates the provided destination ActiveDirectoryProperties from our ActiveDirectoryProperties
func (properties *ActiveDirectoryProperties) AssignPropertiesToActiveDirectoryProperties(destination *v20210401s.ActiveDirectoryProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	destination.AzureStorageSid = genruntime.ClonePointerToString(properties.AzureStorageSid)

	// DomainGuid
	destination.DomainGuid = genruntime.ClonePointerToString(properties.DomainGuid)

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(properties.DomainName)

	// DomainSid
	destination.DomainSid = genruntime.ClonePointerToString(properties.DomainSid)

	// ForestName
	destination.ForestName = genruntime.ClonePointerToString(properties.ForestName)

	// NetBiosDomainName
	destination.NetBiosDomainName = genruntime.ClonePointerToString(properties.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ActiveDirectoryProperties_Status struct {
	// AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid *string `json:"azureStorageSid,omitempty"`

	// DomainGuid: Specifies the domain GUID.
	DomainGuid *string `json:"domainGuid,omitempty"`

	// DomainName: Specifies the primary domain that the AD DNS server is authoritative for.
	DomainName *string `json:"domainName,omitempty"`

	// DomainSid: Specifies the security identifier (SID).
	DomainSid *string `json:"domainSid,omitempty"`

	// ForestName: Specifies the Active Directory forest to get.
	ForestName *string `json:"forestName,omitempty"`

	// NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName *string `json:"netBiosDomainName,omitempty"`
}

var _ genruntime.FromARMConverter = &ActiveDirectoryProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ActiveDirectoryProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ActiveDirectoryProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	if typedInput.AzureStorageSid != nil {
		azureStorageSid := *typedInput.AzureStorageSid
		properties.AzureStorageSid = &azureStorageSid
	}

	// Set property ‘DomainGuid’:
	if typedInput.DomainGuid != nil {
		domainGuid := *typedInput.DomainGuid
		properties.DomainGuid = &domainGuid
	}

	// Set property ‘DomainName’:
	if typedInput.DomainName != nil {
		domainName := *typedInput.DomainName
		properties.DomainName = &domainName
	}

	// Set property ‘DomainSid’:
	if typedInput.DomainSid != nil {
		domainSid := *typedInput.DomainSid
		properties.DomainSid = &domainSid
	}

	// Set property ‘ForestName’:
	if typedInput.ForestName != nil {
		forestName := *typedInput.ForestName
		properties.ForestName = &forestName
	}

	// Set property ‘NetBiosDomainName’:
	if typedInput.NetBiosDomainName != nil {
		netBiosDomainName := *typedInput.NetBiosDomainName
		properties.NetBiosDomainName = &netBiosDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryPropertiesStatus populates our ActiveDirectoryProperties_Status from the provided source ActiveDirectoryProperties_Status
func (properties *ActiveDirectoryProperties_Status) AssignPropertiesFromActiveDirectoryPropertiesStatus(source *v20210401s.ActiveDirectoryProperties_Status) error {

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.ClonePointerToString(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.ClonePointerToString(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.ClonePointerToString(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.ClonePointerToString(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.ClonePointerToString(source.NetBiosDomainName)

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryPropertiesStatus populates the provided destination ActiveDirectoryProperties_Status from our ActiveDirectoryProperties_Status
func (properties *ActiveDirectoryProperties_Status) AssignPropertiesToActiveDirectoryPropertiesStatus(destination *v20210401s.ActiveDirectoryProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	destination.AzureStorageSid = genruntime.ClonePointerToString(properties.AzureStorageSid)

	// DomainGuid
	destination.DomainGuid = genruntime.ClonePointerToString(properties.DomainGuid)

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(properties.DomainName)

	// DomainSid
	destination.DomainSid = genruntime.ClonePointerToString(properties.DomainSid)

	// ForestName
	destination.ForestName = genruntime.ClonePointerToString(properties.ForestName)

	// NetBiosDomainName
	destination.NetBiosDomainName = genruntime.ClonePointerToString(properties.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"None","StorageFileDataSmbShareContributor","StorageFileDataSmbShareElevatedContributor","StorageFileDataSmbShareOwner","StorageFileDataSmbShareReader"}
type AzureFilesIdentityBasedAuthenticationDefaultSharePermission string

const (
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionNone                                       = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("None")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareReader")
)

// +kubebuilder:validation:Enum={"AADDS","AD","None"}
type AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions string

const (
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptionsAADDS = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("AADDS")
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptionsAD    = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("AD")
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptionsNone  = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("None")
)

type AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission string

const (
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionNone                                       = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("None")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareReader")
)

type AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions string

const (
	AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptionsAADDS = AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions("AADDS")
	AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptionsAD    = AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions("AD")
	AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptionsNone  = AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions("None")
)

type BlobRestoreParameters_Status struct {
	// BlobRanges: Blob ranges to restore.
	BlobRanges []BlobRestoreRange_Status `json:"blobRanges,omitempty"`

	// TimeToRestore: Restore blob to the specified time.
	TimeToRestore *string `json:"timeToRestore,omitempty"`
}

var _ genruntime.FromARMConverter = &BlobRestoreParameters_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *BlobRestoreParameters_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreParameters_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *BlobRestoreParameters_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreParameters_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreParameters_StatusARM, got %T", armInput)
	}

	// Set property ‘BlobRanges’:
	for _, item := range typedInput.BlobRanges {
		var item1 BlobRestoreRange_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		parameters.BlobRanges = append(parameters.BlobRanges, item1)
	}

	// Set property ‘TimeToRestore’:
	if typedInput.TimeToRestore != nil {
		timeToRestore := *typedInput.TimeToRestore
		parameters.TimeToRestore = &timeToRestore
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreParametersStatus populates our BlobRestoreParameters_Status from the provided source BlobRestoreParameters_Status
func (parameters *BlobRestoreParameters_Status) AssignPropertiesFromBlobRestoreParametersStatus(source *v20210401s.BlobRestoreParameters_Status) error {

	// BlobRanges
	if source.BlobRanges != nil {
		blobRangeList := make([]BlobRestoreRange_Status, len(source.BlobRanges))
		for blobRangeIndex, blobRangeItem := range source.BlobRanges {
			// Shadow the loop variable to avoid aliasing
			blobRangeItem := blobRangeItem
			var blobRange BlobRestoreRange_Status
			err := blobRange.AssignPropertiesFromBlobRestoreRangeStatus(&blobRangeItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreRangeStatus() to populate field BlobRanges")
			}
			blobRangeList[blobRangeIndex] = blobRange
		}
		parameters.BlobRanges = blobRangeList
	} else {
		parameters.BlobRanges = nil
	}

	// TimeToRestore
	parameters.TimeToRestore = genruntime.ClonePointerToString(source.TimeToRestore)

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreParametersStatus populates the provided destination BlobRestoreParameters_Status from our BlobRestoreParameters_Status
func (parameters *BlobRestoreParameters_Status) AssignPropertiesToBlobRestoreParametersStatus(destination *v20210401s.BlobRestoreParameters_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobRanges
	if parameters.BlobRanges != nil {
		blobRangeList := make([]v20210401s.BlobRestoreRange_Status, len(parameters.BlobRanges))
		for blobRangeIndex, blobRangeItem := range parameters.BlobRanges {
			// Shadow the loop variable to avoid aliasing
			blobRangeItem := blobRangeItem
			var blobRange v20210401s.BlobRestoreRange_Status
			err := blobRangeItem.AssignPropertiesToBlobRestoreRangeStatus(&blobRange)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreRangeStatus() to populate field BlobRanges")
			}
			blobRangeList[blobRangeIndex] = blobRange
		}
		destination.BlobRanges = blobRangeList
	} else {
		destination.BlobRanges = nil
	}

	// TimeToRestore
	destination.TimeToRestore = genruntime.ClonePointerToString(parameters.TimeToRestore)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BlobRestoreStatusStatusStatus string

const (
	BlobRestoreStatusStatusStatusComplete   = BlobRestoreStatusStatusStatus("Complete")
	BlobRestoreStatusStatusStatusFailed     = BlobRestoreStatusStatusStatus("Failed")
	BlobRestoreStatusStatusStatusInProgress = BlobRestoreStatusStatusStatus("InProgress")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/EncryptionIdentity
type EncryptionIdentity struct {
	// UserAssignedIdentityReference: Resource identifier of the UserAssigned identity to be associated with server-side
	// encryption on the storage account.
	UserAssignedIdentityReference *genruntime.ResourceReference `armReference:"UserAssignedIdentity" json:"userAssignedIdentityReference,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *EncryptionIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &EncryptionIdentityARM{}

	// Set property ‘UserAssignedIdentity’:
	if identity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*identity.UserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		userAssignedIdentityReference := userAssignedIdentityReferenceARMID
		result.UserAssignedIdentity = &userAssignedIdentityReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *EncryptionIdentity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *EncryptionIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(EncryptionIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentityARM, got %T", armInput)
	}

	// no assignment for property ‘UserAssignedIdentityReference’

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentity populates our EncryptionIdentity from the provided source EncryptionIdentity
func (identity *EncryptionIdentity) AssignPropertiesFromEncryptionIdentity(source *v20210401s.EncryptionIdentity) error {

	// UserAssignedIdentityReference
	if source.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := source.UserAssignedIdentityReference.Copy()
		identity.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		identity.UserAssignedIdentityReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentity populates the provided destination EncryptionIdentity from our EncryptionIdentity
func (identity *EncryptionIdentity) AssignPropertiesToEncryptionIdentity(destination *v20210401s.EncryptionIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentityReference
	if identity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := identity.UserAssignedIdentityReference.Copy()
		destination.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		destination.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionIdentity_Status struct {
	// UserAssignedIdentity: Resource identifier of the UserAssigned identity to be associated with server-side encryption on
	// the storage account.
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *EncryptionIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *EncryptionIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		identity.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentityStatus populates our EncryptionIdentity_Status from the provided source EncryptionIdentity_Status
func (identity *EncryptionIdentity_Status) AssignPropertiesFromEncryptionIdentityStatus(source *v20210401s.EncryptionIdentity_Status) error {

	// UserAssignedIdentity
	identity.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentityStatus populates the provided destination EncryptionIdentity_Status from our EncryptionIdentity_Status
func (identity *EncryptionIdentity_Status) AssignPropertiesToEncryptionIdentityStatus(destination *v20210401s.EncryptionIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(identity.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.Keyvault","Microsoft.Storage"}
type EncryptionKeySource string

const (
	EncryptionKeySourceMicrosoftKeyvault = EncryptionKeySource("Microsoft.Keyvault")
	EncryptionKeySourceMicrosoftStorage  = EncryptionKeySource("Microsoft.Storage")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/EncryptionServices
type EncryptionServices struct {
	// Blob: A service that allows server-side encryption to be used.
	Blob *EncryptionService `json:"blob,omitempty"`

	// File: A service that allows server-side encryption to be used.
	File *EncryptionService `json:"file,omitempty"`

	// Queue: A service that allows server-side encryption to be used.
	Queue *EncryptionService `json:"queue,omitempty"`

	// Table: A service that allows server-side encryption to be used.
	Table *EncryptionService `json:"table,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionServices{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (services *EncryptionServices) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if services == nil {
		return nil, nil
	}
	result := &EncryptionServicesARM{}

	// Set property ‘Blob’:
	if services.Blob != nil {
		blobARM, err := (*services.Blob).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		blob := *blobARM.(*EncryptionServiceARM)
		result.Blob = &blob
	}

	// Set property ‘File’:
	if services.File != nil {
		fileARM, err := (*services.File).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		file := *fileARM.(*EncryptionServiceARM)
		result.File = &file
	}

	// Set property ‘Queue’:
	if services.Queue != nil {
		queueARM, err := (*services.Queue).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		queue := *queueARM.(*EncryptionServiceARM)
		result.Queue = &queue
	}

	// Set property ‘Table’:
	if services.Table != nil {
		tableARM, err := (*services.Table).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		table := *tableARM.(*EncryptionServiceARM)
		result.Table = &table
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *EncryptionServices) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServicesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *EncryptionServices) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServicesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServicesARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		services.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		services.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		services.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		services.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServices populates our EncryptionServices from the provided source EncryptionServices
func (services *EncryptionServices) AssignPropertiesFromEncryptionServices(source *v20210401s.EncryptionServices) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService
		err := blob.AssignPropertiesFromEncryptionService(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService
		err := file.AssignPropertiesFromEncryptionService(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService
		err := queue.AssignPropertiesFromEncryptionService(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService
		err := table.AssignPropertiesFromEncryptionService(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServices populates the provided destination EncryptionServices from our EncryptionServices
func (services *EncryptionServices) AssignPropertiesToEncryptionServices(destination *v20210401s.EncryptionServices) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if services.Blob != nil {
		var blob v20210401s.EncryptionService
		err := services.Blob.AssignPropertiesToEncryptionService(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file v20210401s.EncryptionService
		err := services.File.AssignPropertiesToEncryptionService(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue v20210401s.EncryptionService
		err := services.Queue.AssignPropertiesToEncryptionService(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table v20210401s.EncryptionService
		err := services.Table.AssignPropertiesToEncryptionService(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionServices_Status struct {
	// Blob: The encryption function of the blob storage service.
	Blob *EncryptionService_Status `json:"blob,omitempty"`

	// File: The encryption function of the file storage service.
	File *EncryptionService_Status `json:"file,omitempty"`

	// Queue: The encryption function of the queue storage service.
	Queue *EncryptionService_Status `json:"queue,omitempty"`

	// Table: The encryption function of the table storage service.
	Table *EncryptionService_Status `json:"table,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionServices_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *EncryptionServices_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServices_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *EncryptionServices_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServices_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServices_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService_Status
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		services.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService_Status
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		services.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService_Status
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		services.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService_Status
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		services.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServicesStatus populates our EncryptionServices_Status from the provided source EncryptionServices_Status
func (services *EncryptionServices_Status) AssignPropertiesFromEncryptionServicesStatus(source *v20210401s.EncryptionServices_Status) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService_Status
		err := blob.AssignPropertiesFromEncryptionServiceStatus(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceStatus() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService_Status
		err := file.AssignPropertiesFromEncryptionServiceStatus(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceStatus() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService_Status
		err := queue.AssignPropertiesFromEncryptionServiceStatus(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceStatus() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService_Status
		err := table.AssignPropertiesFromEncryptionServiceStatus(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceStatus() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServicesStatus populates the provided destination EncryptionServices_Status from our EncryptionServices_Status
func (services *EncryptionServices_Status) AssignPropertiesToEncryptionServicesStatus(destination *v20210401s.EncryptionServices_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if services.Blob != nil {
		var blob v20210401s.EncryptionService_Status
		err := services.Blob.AssignPropertiesToEncryptionServiceStatus(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceStatus() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file v20210401s.EncryptionService_Status
		err := services.File.AssignPropertiesToEncryptionServiceStatus(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceStatus() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue v20210401s.EncryptionService_Status
		err := services.Queue.AssignPropertiesToEncryptionServiceStatus(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceStatus() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table v20210401s.EncryptionService_Status
		err := services.Table.AssignPropertiesToEncryptionServiceStatus(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceStatus() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionStatusKeySource string

const (
	EncryptionStatusKeySourceMicrosoftKeyvault = EncryptionStatusKeySource("Microsoft.Keyvault")
	EncryptionStatusKeySourceMicrosoftStorage  = EncryptionStatusKeySource("Microsoft.Storage")
)

type GeoReplicationStatsStatusStatus string

const (
	GeoReplicationStatsStatusStatusBootstrap   = GeoReplicationStatsStatusStatus("Bootstrap")
	GeoReplicationStatsStatusStatusLive        = GeoReplicationStatsStatusStatus("Live")
	GeoReplicationStatsStatusStatusUnavailable = GeoReplicationStatsStatusStatus("Unavailable")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/IPRule
type IPRule struct {
	// Action: The action of IP ACL rule.
	Action *IPRuleAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	// Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &IPRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *IPRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &IPRuleARM{}

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Value’:
	if rule.Value != nil {
		value := *rule.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		rule.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromIPRule populates our IPRule from the provided source IPRule
func (rule *IPRule) AssignPropertiesFromIPRule(source *v20210401s.IPRule) error {

	// Action
	if source.Action != nil {
		action := IPRuleAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRule populates the provided destination IPRule from our IPRule
func (rule *IPRule) AssignPropertiesToIPRule(destination *v20210401s.IPRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPRule_Status struct {
	// Action: The action of IP ACL rule.
	Action *IPRuleStatusAction `json:"action,omitempty"`

	// Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &IPRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		rule.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromIPRuleStatus populates our IPRule_Status from the provided source IPRule_Status
func (rule *IPRule_Status) AssignPropertiesFromIPRuleStatus(source *v20210401s.IPRule_Status) error {

	// Action
	if source.Action != nil {
		action := IPRuleStatusAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRuleStatus populates the provided destination IPRule_Status from our IPRule_Status
func (rule *IPRule_Status) AssignPropertiesToIPRuleStatus(destination *v20210401s.IPRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/KeyVaultProperties
type KeyVaultProperties struct {
	// Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	// Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	// Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &KeyVaultPropertiesARM{}

	// Set property ‘Keyname’:
	if properties.Keyname != nil {
		keyname := *properties.Keyname
		result.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if properties.Keyvaulturi != nil {
		keyvaulturi := *properties.Keyvaulturi
		result.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if properties.Keyversion != nil {
		keyversion := *properties.Keyversion
		result.Keyversion = &keyversion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		properties.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		properties.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		properties.Keyversion = &keyversion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *v20210401s.KeyVaultProperties) error {

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *v20210401s.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_Status struct {
	// CurrentVersionedKeyIdentifier: The object identifier of the current versioned Key Vault Key in use.
	CurrentVersionedKeyIdentifier *string `json:"currentVersionedKeyIdentifier,omitempty"`

	// Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	// Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	// Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`

	// LastKeyRotationTimestamp: Timestamp of last rotation of the Key Vault Key.
	LastKeyRotationTimestamp *string `json:"lastKeyRotationTimestamp,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘CurrentVersionedKeyIdentifier’:
	if typedInput.CurrentVersionedKeyIdentifier != nil {
		currentVersionedKeyIdentifier := *typedInput.CurrentVersionedKeyIdentifier
		properties.CurrentVersionedKeyIdentifier = &currentVersionedKeyIdentifier
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		properties.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		properties.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		properties.Keyversion = &keyversion
	}

	// Set property ‘LastKeyRotationTimestamp’:
	if typedInput.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *typedInput.LastKeyRotationTimestamp
		properties.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *v20210401s.KeyVaultProperties_Status) error {

	// CurrentVersionedKeyIdentifier
	properties.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(source.CurrentVersionedKeyIdentifier)

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// LastKeyRotationTimestamp
	properties.LastKeyRotationTimestamp = genruntime.ClonePointerToString(source.LastKeyRotationTimestamp)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *v20210401s.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CurrentVersionedKeyIdentifier
	destination.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(properties.CurrentVersionedKeyIdentifier)

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// LastKeyRotationTimestamp
	destination.LastKeyRotationTimestamp = genruntime.ClonePointerToString(properties.LastKeyRotationTimestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AzureServices","Logging","Metrics","None"}
type NetworkRuleSetBypass string

const (
	NetworkRuleSetBypassAzureServices = NetworkRuleSetBypass("AzureServices")
	NetworkRuleSetBypassLogging       = NetworkRuleSetBypass("Logging")
	NetworkRuleSetBypassMetrics       = NetworkRuleSetBypass("Metrics")
	NetworkRuleSetBypassNone          = NetworkRuleSetBypass("None")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type NetworkRuleSetDefaultAction string

const (
	NetworkRuleSetDefaultActionAllow = NetworkRuleSetDefaultAction("Allow")
	NetworkRuleSetDefaultActionDeny  = NetworkRuleSetDefaultAction("Deny")
)

type NetworkRuleSetStatusBypass string

const (
	NetworkRuleSetStatusBypassAzureServices = NetworkRuleSetStatusBypass("AzureServices")
	NetworkRuleSetStatusBypassLogging       = NetworkRuleSetStatusBypass("Logging")
	NetworkRuleSetStatusBypassMetrics       = NetworkRuleSetStatusBypass("Metrics")
	NetworkRuleSetStatusBypassNone          = NetworkRuleSetStatusBypass("None")
)

type NetworkRuleSetStatusDefaultAction string

const (
	NetworkRuleSetStatusDefaultActionAllow = NetworkRuleSetStatusDefaultAction("Allow")
	NetworkRuleSetStatusDefaultActionDeny  = NetworkRuleSetStatusDefaultAction("Deny")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/ResourceAccessRule
type ResourceAccessRule struct {
	// ResourceReference: Resource Id
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`

	// TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceAccessRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *ResourceAccessRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &ResourceAccessRuleARM{}

	// Set property ‘ResourceId’:
	if rule.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*rule.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}

	// Set property ‘TenantId’:
	if rule.TenantId != nil {
		tenantId := *rule.TenantId
		result.TenantId = &tenantId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ResourceAccessRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ResourceAccessRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRuleARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		rule.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRule populates our ResourceAccessRule from the provided source ResourceAccessRule
func (rule *ResourceAccessRule) AssignPropertiesFromResourceAccessRule(source *v20210401s.ResourceAccessRule) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		rule.ResourceReference = &resourceReference
	} else {
		rule.ResourceReference = nil
	}

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRule populates the provided destination ResourceAccessRule from our ResourceAccessRule
func (rule *ResourceAccessRule) AssignPropertiesToResourceAccessRule(destination *v20210401s.ResourceAccessRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if rule.ResourceReference != nil {
		resourceReference := rule.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceAccessRule_Status struct {
	// ResourceId: Resource Id
	ResourceId *string `json:"resourceId,omitempty"`

	// TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceAccessRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ResourceAccessRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ResourceAccessRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRule_StatusARM, got %T", armInput)
	}

	// Set property ‘ResourceId’:
	if typedInput.ResourceId != nil {
		resourceId := *typedInput.ResourceId
		rule.ResourceId = &resourceId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		rule.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRuleStatus populates our ResourceAccessRule_Status from the provided source ResourceAccessRule_Status
func (rule *ResourceAccessRule_Status) AssignPropertiesFromResourceAccessRuleStatus(source *v20210401s.ResourceAccessRule_Status) error {

	// ResourceId
	rule.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRuleStatus populates the provided destination ResourceAccessRule_Status from our ResourceAccessRule_Status
func (rule *ResourceAccessRule_Status) AssignPropertiesToResourceAccessRuleStatus(destination *v20210401s.ResourceAccessRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(rule.ResourceId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"InternetRouting","MicrosoftRouting"}
type RoutingPreferenceRoutingChoice string

const (
	RoutingPreferenceRoutingChoiceInternetRouting  = RoutingPreferenceRoutingChoice("InternetRouting")
	RoutingPreferenceRoutingChoiceMicrosoftRouting = RoutingPreferenceRoutingChoice("MicrosoftRouting")
)

type RoutingPreferenceStatusRoutingChoice string

const (
	RoutingPreferenceStatusRoutingChoiceInternetRouting  = RoutingPreferenceStatusRoutingChoice("InternetRouting")
	RoutingPreferenceStatusRoutingChoiceMicrosoftRouting = RoutingPreferenceStatusRoutingChoice("MicrosoftRouting")
)

// +kubebuilder:validation:Enum={"Log"}
type SasPolicyExpirationAction string

const SasPolicyExpirationActionLog = SasPolicyExpirationAction("Log")

type SasPolicyStatusExpirationAction string

const SasPolicyStatusExpirationActionLog = SasPolicyStatusExpirationAction("Log")

type StorageAccountInternetEndpoints_Status struct {
	// Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	// Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	// File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	// Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &StorageAccountInternetEndpoints_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoints *StorageAccountInternetEndpoints_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountInternetEndpoints_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoints *StorageAccountInternetEndpoints_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountInternetEndpoints_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountInternetEndpoints_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		endpoints.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		endpoints.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		endpoints.File = &file
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		endpoints.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountInternetEndpointsStatus populates our StorageAccountInternetEndpoints_Status from the provided source StorageAccountInternetEndpoints_Status
func (endpoints *StorageAccountInternetEndpoints_Status) AssignPropertiesFromStorageAccountInternetEndpointsStatus(source *v20210401s.StorageAccountInternetEndpoints_Status) error {

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountInternetEndpointsStatus populates the provided destination StorageAccountInternetEndpoints_Status from our StorageAccountInternetEndpoints_Status
func (endpoints *StorageAccountInternetEndpoints_Status) AssignPropertiesToStorageAccountInternetEndpointsStatus(destination *v20210401s.StorageAccountInternetEndpoints_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountMicrosoftEndpoints_Status struct {
	// Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	// Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	// File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	// Queue: Gets the queue endpoint.
	Queue *string `json:"queue,omitempty"`

	// Table: Gets the table endpoint.
	Table *string `json:"table,omitempty"`

	// Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &StorageAccountMicrosoftEndpoints_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoints *StorageAccountMicrosoftEndpoints_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountMicrosoftEndpoints_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoints *StorageAccountMicrosoftEndpoints_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountMicrosoftEndpoints_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountMicrosoftEndpoints_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		endpoints.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		endpoints.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		endpoints.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		queue := *typedInput.Queue
		endpoints.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		table := *typedInput.Table
		endpoints.Table = &table
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		endpoints.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus populates our StorageAccountMicrosoftEndpoints_Status from the provided source StorageAccountMicrosoftEndpoints_Status
func (endpoints *StorageAccountMicrosoftEndpoints_Status) AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus(source *v20210401s.StorageAccountMicrosoftEndpoints_Status) error {

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// Queue
	endpoints.Queue = genruntime.ClonePointerToString(source.Queue)

	// Table
	endpoints.Table = genruntime.ClonePointerToString(source.Table)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountMicrosoftEndpointsStatus populates the provided destination StorageAccountMicrosoftEndpoints_Status from our StorageAccountMicrosoftEndpoints_Status
func (endpoints *StorageAccountMicrosoftEndpoints_Status) AssignPropertiesToStorageAccountMicrosoftEndpointsStatus(destination *v20210401s.StorageAccountMicrosoftEndpoints_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// Queue
	destination.Queue = genruntime.ClonePointerToString(endpoints.Queue)

	// Table
	destination.Table = genruntime.ClonePointerToString(endpoints.Table)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountOperatorSecrets struct {
	// BlobEndpoint: indicates where the BlobEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	BlobEndpoint *genruntime.SecretDestination `json:"blobEndpoint,omitempty"`

	// DfsEndpoint: indicates where the DfsEndpoint secret should be placed. If omitted, the secret will not be retrieved from
	// Azure.
	DfsEndpoint *genruntime.SecretDestination `json:"dfsEndpoint,omitempty"`

	// FileEndpoint: indicates where the FileEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	FileEndpoint *genruntime.SecretDestination `json:"fileEndpoint,omitempty"`

	// Key1: indicates where the Key1 secret should be placed. If omitted, the secret will not be retrieved from Azure.
	Key1 *genruntime.SecretDestination `json:"key1,omitempty"`

	// Key2: indicates where the Key2 secret should be placed. If omitted, the secret will not be retrieved from Azure.
	Key2 *genruntime.SecretDestination `json:"key2,omitempty"`

	// QueueEndpoint: indicates where the QueueEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	QueueEndpoint *genruntime.SecretDestination `json:"queueEndpoint,omitempty"`

	// TableEndpoint: indicates where the TableEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	TableEndpoint *genruntime.SecretDestination `json:"tableEndpoint,omitempty"`

	// WebEndpoint: indicates where the WebEndpoint secret should be placed. If omitted, the secret will not be retrieved from
	// Azure.
	WebEndpoint *genruntime.SecretDestination `json:"webEndpoint,omitempty"`
}

// AssignPropertiesFromStorageAccountOperatorSecrets populates our StorageAccountOperatorSecrets from the provided source StorageAccountOperatorSecrets
func (secrets *StorageAccountOperatorSecrets) AssignPropertiesFromStorageAccountOperatorSecrets(source *v20210401s.StorageAccountOperatorSecrets) error {

	// BlobEndpoint
	if source.BlobEndpoint != nil {
		blobEndpoint := source.BlobEndpoint.Copy()
		secrets.BlobEndpoint = &blobEndpoint
	} else {
		secrets.BlobEndpoint = nil
	}

	// DfsEndpoint
	if source.DfsEndpoint != nil {
		dfsEndpoint := source.DfsEndpoint.Copy()
		secrets.DfsEndpoint = &dfsEndpoint
	} else {
		secrets.DfsEndpoint = nil
	}

	// FileEndpoint
	if source.FileEndpoint != nil {
		fileEndpoint := source.FileEndpoint.Copy()
		secrets.FileEndpoint = &fileEndpoint
	} else {
		secrets.FileEndpoint = nil
	}

	// Key1
	if source.Key1 != nil {
		key1 := source.Key1.Copy()
		secrets.Key1 = &key1
	} else {
		secrets.Key1 = nil
	}

	// Key2
	if source.Key2 != nil {
		key2 := source.Key2.Copy()
		secrets.Key2 = &key2
	} else {
		secrets.Key2 = nil
	}

	// QueueEndpoint
	if source.QueueEndpoint != nil {
		queueEndpoint := source.QueueEndpoint.Copy()
		secrets.QueueEndpoint = &queueEndpoint
	} else {
		secrets.QueueEndpoint = nil
	}

	// TableEndpoint
	if source.TableEndpoint != nil {
		tableEndpoint := source.TableEndpoint.Copy()
		secrets.TableEndpoint = &tableEndpoint
	} else {
		secrets.TableEndpoint = nil
	}

	// WebEndpoint
	if source.WebEndpoint != nil {
		webEndpoint := source.WebEndpoint.Copy()
		secrets.WebEndpoint = &webEndpoint
	} else {
		secrets.WebEndpoint = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountOperatorSecrets populates the provided destination StorageAccountOperatorSecrets from our StorageAccountOperatorSecrets
func (secrets *StorageAccountOperatorSecrets) AssignPropertiesToStorageAccountOperatorSecrets(destination *v20210401s.StorageAccountOperatorSecrets) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobEndpoint
	if secrets.BlobEndpoint != nil {
		blobEndpoint := secrets.BlobEndpoint.Copy()
		destination.BlobEndpoint = &blobEndpoint
	} else {
		destination.BlobEndpoint = nil
	}

	// DfsEndpoint
	if secrets.DfsEndpoint != nil {
		dfsEndpoint := secrets.DfsEndpoint.Copy()
		destination.DfsEndpoint = &dfsEndpoint
	} else {
		destination.DfsEndpoint = nil
	}

	// FileEndpoint
	if secrets.FileEndpoint != nil {
		fileEndpoint := secrets.FileEndpoint.Copy()
		destination.FileEndpoint = &fileEndpoint
	} else {
		destination.FileEndpoint = nil
	}

	// Key1
	if secrets.Key1 != nil {
		key1 := secrets.Key1.Copy()
		destination.Key1 = &key1
	} else {
		destination.Key1 = nil
	}

	// Key2
	if secrets.Key2 != nil {
		key2 := secrets.Key2.Copy()
		destination.Key2 = &key2
	} else {
		destination.Key2 = nil
	}

	// QueueEndpoint
	if secrets.QueueEndpoint != nil {
		queueEndpoint := secrets.QueueEndpoint.Copy()
		destination.QueueEndpoint = &queueEndpoint
	} else {
		destination.QueueEndpoint = nil
	}

	// TableEndpoint
	if secrets.TableEndpoint != nil {
		tableEndpoint := secrets.TableEndpoint.Copy()
		destination.TableEndpoint = &tableEndpoint
	} else {
		destination.TableEndpoint = nil
	}

	// WebEndpoint
	if secrets.WebEndpoint != nil {
		webEndpoint := secrets.WebEndpoint.Copy()
		destination.WebEndpoint = &webEndpoint
	} else {
		destination.WebEndpoint = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UserAssignedIdentity_Status struct {
	// ClientId: The client ID of the identity.
	ClientId *string `json:"clientId,omitempty"`

	// PrincipalId: The principal ID of the identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *UserAssignedIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *UserAssignedIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identity.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityStatus populates our UserAssignedIdentity_Status from the provided source UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesFromUserAssignedIdentityStatus(source *v20210401s.UserAssignedIdentity_Status) error {

	// ClientId
	identity.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityStatus populates the provided destination UserAssignedIdentity_Status from our UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesToUserAssignedIdentityStatus(destination *v20210401s.UserAssignedIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identity.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/VirtualNetworkRule
type VirtualNetworkRule struct {
	// Action: The action of virtual network rule.
	Action *VirtualNetworkRuleAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	// Reference: Resource ID of a subnet, for example:
	// /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	// State: Gets the state of virtual network rule.
	State *VirtualNetworkRuleState `json:"state,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *VirtualNetworkRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &VirtualNetworkRuleARM{}

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Id’:
	if rule.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*rule.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘State’:
	if rule.State != nil {
		state := *rule.State
		result.State = &state
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// no assignment for property ‘Reference’

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		rule.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule populates our VirtualNetworkRule from the provided source VirtualNetworkRule
func (rule *VirtualNetworkRule) AssignPropertiesFromVirtualNetworkRule(source *v20210401s.VirtualNetworkRule) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRuleAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		rule.Reference = &reference
	} else {
		rule.Reference = nil
	}

	// State
	if source.State != nil {
		state := VirtualNetworkRuleState(*source.State)
		rule.State = &state
	} else {
		rule.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule populates the provided destination VirtualNetworkRule from our VirtualNetworkRule
func (rule *VirtualNetworkRule) AssignPropertiesToVirtualNetworkRule(destination *v20210401s.VirtualNetworkRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Reference
	if rule.Reference != nil {
		reference := rule.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// State
	if rule.State != nil {
		state := string(*rule.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkRule_Status struct {
	// Action: The action of virtual network rule.
	Action *VirtualNetworkRuleStatusAction `json:"action,omitempty"`

	// Id: Resource ID of a subnet, for example:
	// /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Id *string `json:"id,omitempty"`

	// State: Gets the state of virtual network rule.
	State *VirtualNetworkRuleStatusState `json:"state,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		rule.Id = &id
	}

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		rule.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRuleStatus populates our VirtualNetworkRule_Status from the provided source VirtualNetworkRule_Status
func (rule *VirtualNetworkRule_Status) AssignPropertiesFromVirtualNetworkRuleStatus(source *v20210401s.VirtualNetworkRule_Status) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRuleStatusAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Id
	rule.Id = genruntime.ClonePointerToString(source.Id)

	// State
	if source.State != nil {
		state := VirtualNetworkRuleStatusState(*source.State)
		rule.State = &state
	} else {
		rule.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRuleStatus populates the provided destination VirtualNetworkRule_Status from our VirtualNetworkRule_Status
func (rule *VirtualNetworkRule_Status) AssignPropertiesToVirtualNetworkRuleStatus(destination *v20210401s.VirtualNetworkRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(rule.Id)

	// State
	if rule.State != nil {
		state := string(*rule.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BlobRestoreRange_Status struct {
	// EndRange: Blob end range. This is exclusive. Empty means account end.
	EndRange *string `json:"endRange,omitempty"`

	// StartRange: Blob start range. This is inclusive. Empty means account start.
	StartRange *string `json:"startRange,omitempty"`
}

var _ genruntime.FromARMConverter = &BlobRestoreRange_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (restoreRange *BlobRestoreRange_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreRange_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (restoreRange *BlobRestoreRange_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreRange_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreRange_StatusARM, got %T", armInput)
	}

	// Set property ‘EndRange’:
	if typedInput.EndRange != nil {
		endRange := *typedInput.EndRange
		restoreRange.EndRange = &endRange
	}

	// Set property ‘StartRange’:
	if typedInput.StartRange != nil {
		startRange := *typedInput.StartRange
		restoreRange.StartRange = &startRange
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreRangeStatus populates our BlobRestoreRange_Status from the provided source BlobRestoreRange_Status
func (restoreRange *BlobRestoreRange_Status) AssignPropertiesFromBlobRestoreRangeStatus(source *v20210401s.BlobRestoreRange_Status) error {

	// EndRange
	restoreRange.EndRange = genruntime.ClonePointerToString(source.EndRange)

	// StartRange
	restoreRange.StartRange = genruntime.ClonePointerToString(source.StartRange)

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreRangeStatus populates the provided destination BlobRestoreRange_Status from our BlobRestoreRange_Status
func (restoreRange *BlobRestoreRange_Status) AssignPropertiesToBlobRestoreRangeStatus(destination *v20210401s.BlobRestoreRange_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndRange
	destination.EndRange = genruntime.ClonePointerToString(restoreRange.EndRange)

	// StartRange
	destination.StartRange = genruntime.ClonePointerToString(restoreRange.StartRange)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/EncryptionService
type EncryptionService struct {
	// Enabled: A boolean indicating whether or not the service encrypts the data as it is stored.
	Enabled *bool `json:"enabled,omitempty"`

	// KeyType: Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped
	// encryption key will be used. 'Service' key type implies that a default service key is used.
	KeyType *EncryptionServiceKeyType `json:"keyType,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionService{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (service *EncryptionService) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if service == nil {
		return nil, nil
	}
	result := &EncryptionServiceARM{}

	// Set property ‘Enabled’:
	if service.Enabled != nil {
		enabled := *service.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if service.KeyType != nil {
		keyType := *service.KeyType
		result.KeyType = &keyType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *EncryptionService) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServiceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *EncryptionService) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServiceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServiceARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		service.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		service.KeyType = &keyType
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionService populates our EncryptionService from the provided source EncryptionService
func (service *EncryptionService) AssignPropertiesFromEncryptionService(source *v20210401s.EncryptionService) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionServiceKeyType(*source.KeyType)
		service.KeyType = &keyType
	} else {
		service.KeyType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionService populates the provided destination EncryptionService from our EncryptionService
func (service *EncryptionService) AssignPropertiesToEncryptionService(destination *v20210401s.EncryptionService) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if service.KeyType != nil {
		keyType := string(*service.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionService_Status struct {
	// Enabled: A boolean indicating whether or not the service encrypts the data as it is stored.
	Enabled *bool `json:"enabled,omitempty"`

	// KeyType: Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped
	// encryption key will be used. 'Service' key type implies that a default service key is used.
	KeyType *EncryptionServiceStatusKeyType `json:"keyType,omitempty"`

	// LastEnabledTime: Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned
	// when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a
	// rough estimate.
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionService_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *EncryptionService_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionService_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *EncryptionService_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionService_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionService_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		service.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		service.KeyType = &keyType
	}

	// Set property ‘LastEnabledTime’:
	if typedInput.LastEnabledTime != nil {
		lastEnabledTime := *typedInput.LastEnabledTime
		service.LastEnabledTime = &lastEnabledTime
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServiceStatus populates our EncryptionService_Status from the provided source EncryptionService_Status
func (service *EncryptionService_Status) AssignPropertiesFromEncryptionServiceStatus(source *v20210401s.EncryptionService_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionServiceStatusKeyType(*source.KeyType)
		service.KeyType = &keyType
	} else {
		service.KeyType = nil
	}

	// LastEnabledTime
	service.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// No error
	return nil
}

// AssignPropertiesToEncryptionServiceStatus populates the provided destination EncryptionService_Status from our EncryptionService_Status
func (service *EncryptionService_Status) AssignPropertiesToEncryptionServiceStatus(destination *v20210401s.EncryptionService_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if service.KeyType != nil {
		keyType := string(*service.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(service.LastEnabledTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Allow"}
type IPRuleAction string

const IPRuleActionAllow = IPRuleAction("Allow")

type IPRuleStatusAction string

const IPRuleStatusActionAllow = IPRuleStatusAction("Allow")

// +kubebuilder:validation:Enum={"Allow"}
type VirtualNetworkRuleAction string

const VirtualNetworkRuleActionAllow = VirtualNetworkRuleAction("Allow")

// +kubebuilder:validation:Enum={"Deprovisioning","Failed","NetworkSourceDeleted","Provisioning","Succeeded"}
type VirtualNetworkRuleState string

const (
	VirtualNetworkRuleStateDeprovisioning       = VirtualNetworkRuleState("Deprovisioning")
	VirtualNetworkRuleStateFailed               = VirtualNetworkRuleState("Failed")
	VirtualNetworkRuleStateNetworkSourceDeleted = VirtualNetworkRuleState("NetworkSourceDeleted")
	VirtualNetworkRuleStateProvisioning         = VirtualNetworkRuleState("Provisioning")
	VirtualNetworkRuleStateSucceeded            = VirtualNetworkRuleState("Succeeded")
)

type VirtualNetworkRuleStatusAction string

const VirtualNetworkRuleStatusActionAllow = VirtualNetworkRuleStatusAction("Allow")

type VirtualNetworkRuleStatusState string

const (
	VirtualNetworkRuleStatusStateDeprovisioning       = VirtualNetworkRuleStatusState("Deprovisioning")
	VirtualNetworkRuleStatusStateFailed               = VirtualNetworkRuleStatusState("Failed")
	VirtualNetworkRuleStatusStateNetworkSourceDeleted = VirtualNetworkRuleStatusState("NetworkSourceDeleted")
	VirtualNetworkRuleStatusStateProvisioning         = VirtualNetworkRuleStatusState("Provisioning")
	VirtualNetworkRuleStatusStateSucceeded            = VirtualNetworkRuleStatusState("Succeeded")
)

// +kubebuilder:validation:Enum={"Account","Service"}
type EncryptionServiceKeyType string

const (
	EncryptionServiceKeyTypeAccount = EncryptionServiceKeyType("Account")
	EncryptionServiceKeyTypeService = EncryptionServiceKeyType("Service")
)

type EncryptionServiceStatusKeyType string

const (
	EncryptionServiceStatusKeyTypeAccount = EncryptionServiceStatusKeyType("Account")
	EncryptionServiceStatusKeyTypeService = EncryptionServiceStatusKeyType("Service")
)

func init() {
	SchemeBuilder.Register(&StorageAccount{}, &StorageAccountList{})
}
