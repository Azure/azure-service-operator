// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import (
	"fmt"
	v20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1beta20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /storage/resource-manager/Microsoft.Storage/stable/2021-04-01/blob.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default
type StorageAccountsBlobService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
<<<<<<< HEAD
	Spec              StorageAccountsBlobService_Spec   `json:"spec,omitempty"`
	Status            StorageAccountsBlobService_STATUS `json:"status,omitempty"`
=======
	Spec              StorageAccounts_BlobServices_Spec `json:"spec,omitempty"`
	Status            BlobServiceProperties_STATUS      `json:"status,omitempty"`
>>>>>>> main
}

var _ conditions.Conditioner = &StorageAccountsBlobService{}

// GetConditions returns the conditions of the resource
func (service *StorageAccountsBlobService) GetConditions() conditions.Conditions {
	return service.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (service *StorageAccountsBlobService) SetConditions(conditions conditions.Conditions) {
	service.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsBlobService{}

// ConvertFrom populates our StorageAccountsBlobService from the provided hub StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210401s.StorageAccountsBlobService)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccountsBlobService but received %T instead", hub)
	}

	return service.AssignProperties_From_StorageAccountsBlobService(source)
}

// ConvertTo populates the provided hub StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210401s.StorageAccountsBlobService)
	if !ok {
		return fmt.Errorf("expected storage/v1beta20210401storage/StorageAccountsBlobService but received %T instead", hub)
	}

	return service.AssignProperties_To_StorageAccountsBlobService(destination)
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1beta20210401-storageaccountsblobservice,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservices,verbs=create;update,versions=v1beta20210401,name=default.v1beta20210401.storageaccountsblobservices.storage.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &StorageAccountsBlobService{}

// Default applies defaults to the StorageAccountsBlobService resource
func (service *StorageAccountsBlobService) Default() {
	service.defaultImpl()
	var temp interface{} = service
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (service *StorageAccountsBlobService) defaultAzureName() {
	if service.Spec.AzureName == "" {
		service.Spec.AzureName = service.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsBlobService resource
func (service *StorageAccountsBlobService) defaultImpl() { service.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccountsBlobService{}

// AzureName returns the Azure name of the resource
func (service *StorageAccountsBlobService) AzureName() string {
	return service.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (service StorageAccountsBlobService) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (service *StorageAccountsBlobService) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (service *StorageAccountsBlobService) GetSpec() genruntime.ConvertibleSpec {
	return &service.Spec
}

// GetStatus returns the status of this resource
func (service *StorageAccountsBlobService) GetStatus() genruntime.ConvertibleStatus {
	return &service.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/blobServices"
func (service *StorageAccountsBlobService) GetType() string {
	return "Microsoft.Storage/storageAccounts/blobServices"
}

// NewEmptyStatus returns a new empty (blank) status
func (service *StorageAccountsBlobService) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccountsBlobService_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (service *StorageAccountsBlobService) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(service.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  service.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (service *StorageAccountsBlobService) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccountsBlobService_STATUS); ok {
		service.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccountsBlobService_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	service.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1beta20210401-storageaccountsblobservice,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservices,verbs=create;update,versions=v1beta20210401,name=validate.v1beta20210401.storageaccountsblobservices.storage.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &StorageAccountsBlobService{}

// ValidateCreate validates the creation of the resource
func (service *StorageAccountsBlobService) ValidateCreate() error {
	validations := service.createValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (service *StorageAccountsBlobService) ValidateDelete() error {
	validations := service.deleteValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (service *StorageAccountsBlobService) ValidateUpdate(old runtime.Object) error {
	validations := service.updateValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (service *StorageAccountsBlobService) createValidations() []func() error {
	return []func() error{service.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (service *StorageAccountsBlobService) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (service *StorageAccountsBlobService) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return service.validateResourceReferences()
		},
		service.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (service *StorageAccountsBlobService) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&service.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (service *StorageAccountsBlobService) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*StorageAccountsBlobService)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, service)
}

// AssignProperties_From_StorageAccountsBlobService populates our StorageAccountsBlobService from the provided source StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignProperties_From_StorageAccountsBlobService(source *v20210401s.StorageAccountsBlobService) error {

	// ObjectMeta
	service.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
<<<<<<< HEAD
	var spec StorageAccountsBlobService_Spec
	err := spec.AssignPropertiesFromStorageAccountsBlobService_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsBlobService_Spec() to populate field Spec")
=======
	var spec StorageAccounts_BlobServices_Spec
	err := spec.AssignProperties_From_StorageAccounts_BlobServices_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_StorageAccounts_BlobServices_Spec() to populate field Spec")
>>>>>>> main
	}
	service.Spec = spec

	// Status
<<<<<<< HEAD
	var status StorageAccountsBlobService_STATUS
	err = status.AssignPropertiesFromStorageAccountsBlobService_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsBlobService_STATUS() to populate field Status")
=======
	var status BlobServiceProperties_STATUS
	err = status.AssignProperties_From_BlobServiceProperties_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_BlobServiceProperties_STATUS() to populate field Status")
>>>>>>> main
	}
	service.Status = status

	// No error
	return nil
}

// AssignProperties_To_StorageAccountsBlobService populates the provided destination StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignProperties_To_StorageAccountsBlobService(destination *v20210401s.StorageAccountsBlobService) error {

	// ObjectMeta
	destination.ObjectMeta = *service.ObjectMeta.DeepCopy()

	// Spec
<<<<<<< HEAD
	var spec v20210401s.StorageAccountsBlobService_Spec
	err := service.Spec.AssignPropertiesToStorageAccountsBlobService_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsBlobService_Spec() to populate field Spec")
=======
	var spec v20210401s.StorageAccounts_BlobServices_Spec
	err := service.Spec.AssignProperties_To_StorageAccounts_BlobServices_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_StorageAccounts_BlobServices_Spec() to populate field Spec")
>>>>>>> main
	}
	destination.Spec = spec

	// Status
<<<<<<< HEAD
	var status v20210401s.StorageAccountsBlobService_STATUS
	err = service.Status.AssignPropertiesToStorageAccountsBlobService_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsBlobService_STATUS() to populate field Status")
=======
	var status v20210401s.BlobServiceProperties_STATUS
	err = service.Status.AssignProperties_To_BlobServiceProperties_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_BlobServiceProperties_STATUS() to populate field Status")
>>>>>>> main
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (service *StorageAccountsBlobService) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: service.Spec.OriginalVersion(),
		Kind:    "StorageAccountsBlobService",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /storage/resource-manager/Microsoft.Storage/stable/2021-04-01/blob.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default
type StorageAccountsBlobServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsBlobService `json:"items"`
}

type StorageAccountsBlobService_Spec struct {
	// AutomaticSnapshotPolicyEnabled: Deprecated in favor of isVersioningEnabled property.
	AutomaticSnapshotPolicyEnabled *bool `json:"automaticSnapshotPolicyEnabled,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// ChangeFeed: The blob service properties for change feed events.
	ChangeFeed *ChangeFeed `json:"changeFeed,omitempty"`

	// ContainerDeleteRetentionPolicy: The blob service properties for container soft delete.
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy `json:"containerDeleteRetentionPolicy,omitempty"`

	// Cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no
	// CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the
	// Blob service.
	Cors *CorsRules `json:"cors,omitempty"`

	// DefaultServiceVersion: DefaultServiceVersion indicates the default version to use for requests to the Blob service if an
	// incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions.
	DefaultServiceVersion *string `json:"defaultServiceVersion,omitempty"`

	// DeleteRetentionPolicy: The blob service properties for blob soft delete.
	DeleteRetentionPolicy *DeleteRetentionPolicy `json:"deleteRetentionPolicy,omitempty"`

	// IsVersioningEnabled: Versioning is enabled if set to true.
	IsVersioningEnabled *bool `json:"isVersioningEnabled,omitempty"`

	// LastAccessTimeTrackingPolicy: The blob service property to configure last access time based tracking policy.
	LastAccessTimeTrackingPolicy *LastAccessTimeTrackingPolicy `json:"lastAccessTimeTrackingPolicy,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a storage.azure.com/StorageAccount resource
	Owner *genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner,omitempty" kind:"StorageAccount"`

	// RestorePolicy: The blob service properties for blob restore policy.
	RestorePolicy *RestorePolicyProperties `json:"restorePolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccountsBlobService_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (service *StorageAccountsBlobService_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if service == nil {
		return nil, nil
	}
	result := &StorageAccountsBlobService_SpecARM{}

	// Set property ‘AzureName’:
	result.AzureName = service.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if service.AutomaticSnapshotPolicyEnabled != nil ||
		service.ChangeFeed != nil ||
		service.ContainerDeleteRetentionPolicy != nil ||
		service.Cors != nil ||
		service.DefaultServiceVersion != nil ||
		service.DeleteRetentionPolicy != nil ||
		service.IsVersioningEnabled != nil ||
		service.LastAccessTimeTrackingPolicy != nil ||
		service.RestorePolicy != nil {
		result.Properties = &StorageAccountsBlobService_Spec_PropertiesARM{}
	}
	if service.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *service.AutomaticSnapshotPolicyEnabled
		result.Properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	}
	if service.ChangeFeed != nil {
		changeFeedARM, err := (*service.ChangeFeed).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		changeFeed := *changeFeedARM.(*ChangeFeedARM)
		result.Properties.ChangeFeed = &changeFeed
	}
	if service.ContainerDeleteRetentionPolicy != nil {
		containerDeleteRetentionPolicyARM, err := (*service.ContainerDeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		containerDeleteRetentionPolicy := *containerDeleteRetentionPolicyARM.(*DeleteRetentionPolicyARM)
		result.Properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	}
	if service.Cors != nil {
		corsARM, err := (*service.Cors).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cors := *corsARM.(*CorsRulesARM)
		result.Properties.Cors = &cors
	}
	if service.DefaultServiceVersion != nil {
		defaultServiceVersion := *service.DefaultServiceVersion
		result.Properties.DefaultServiceVersion = &defaultServiceVersion
	}
	if service.DeleteRetentionPolicy != nil {
		deleteRetentionPolicyARM, err := (*service.DeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deleteRetentionPolicy := *deleteRetentionPolicyARM.(*DeleteRetentionPolicyARM)
		result.Properties.DeleteRetentionPolicy = &deleteRetentionPolicy
	}
	if service.IsVersioningEnabled != nil {
		isVersioningEnabled := *service.IsVersioningEnabled
		result.Properties.IsVersioningEnabled = &isVersioningEnabled
	}
	if service.LastAccessTimeTrackingPolicy != nil {
		lastAccessTimeTrackingPolicyARM, err := (*service.LastAccessTimeTrackingPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		lastAccessTimeTrackingPolicy := *lastAccessTimeTrackingPolicyARM.(*LastAccessTimeTrackingPolicyARM)
		result.Properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	}
	if service.RestorePolicy != nil {
		restorePolicyARM, err := (*service.RestorePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		restorePolicy := *restorePolicyARM.(*RestorePolicyPropertiesARM)
		result.Properties.RestorePolicy = &restorePolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *StorageAccountsBlobService_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsBlobService_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *StorageAccountsBlobService_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsBlobService_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsBlobService_SpecARM, got %T", armInput)
	}

	// Set property ‘AutomaticSnapshotPolicyEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutomaticSnapshotPolicyEnabled != nil {
			automaticSnapshotPolicyEnabled := *typedInput.Properties.AutomaticSnapshotPolicyEnabled
			service.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
		}
	}

	// Set property ‘AzureName’:
	service.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ChangeFeed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ChangeFeed != nil {
			var changeFeed1 ChangeFeed
			err := changeFeed1.PopulateFromARM(owner, *typedInput.Properties.ChangeFeed)
			if err != nil {
				return err
			}
			changeFeed := changeFeed1
			service.ChangeFeed = &changeFeed
		}
	}

	// Set property ‘ContainerDeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContainerDeleteRetentionPolicy != nil {
			var containerDeleteRetentionPolicy1 DeleteRetentionPolicy
			err := containerDeleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.ContainerDeleteRetentionPolicy)
			if err != nil {
				return err
			}
			containerDeleteRetentionPolicy := containerDeleteRetentionPolicy1
			service.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 CorsRules
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			service.Cors = &cors
		}
	}

	// Set property ‘DefaultServiceVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultServiceVersion != nil {
			defaultServiceVersion := *typedInput.Properties.DefaultServiceVersion
			service.DefaultServiceVersion = &defaultServiceVersion
		}
	}

	// Set property ‘DeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeleteRetentionPolicy != nil {
			var deleteRetentionPolicy1 DeleteRetentionPolicy
			err := deleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeleteRetentionPolicy)
			if err != nil {
				return err
			}
			deleteRetentionPolicy := deleteRetentionPolicy1
			service.DeleteRetentionPolicy = &deleteRetentionPolicy
		}
	}

	// Set property ‘IsVersioningEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVersioningEnabled != nil {
			isVersioningEnabled := *typedInput.Properties.IsVersioningEnabled
			service.IsVersioningEnabled = &isVersioningEnabled
		}
	}

	// Set property ‘LastAccessTimeTrackingPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastAccessTimeTrackingPolicy != nil {
			var lastAccessTimeTrackingPolicy1 LastAccessTimeTrackingPolicy
			err := lastAccessTimeTrackingPolicy1.PopulateFromARM(owner, *typedInput.Properties.LastAccessTimeTrackingPolicy)
			if err != nil {
				return err
			}
			lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicy1
			service.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
		}
	}

	// Set property ‘Owner’:
	service.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RestorePolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePolicy != nil {
			var restorePolicy1 RestorePolicyProperties
			err := restorePolicy1.PopulateFromARM(owner, *typedInput.Properties.RestorePolicy)
			if err != nil {
				return err
			}
			restorePolicy := restorePolicy1
			service.RestorePolicy = &restorePolicy
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccountsBlobService_Spec{}

// ConvertSpecFrom populates our StorageAccountsBlobService_Spec from the provided source
func (service *StorageAccountsBlobService_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210401s.StorageAccountsBlobService_Spec)
	if ok {
		// Populate our instance from source
		return service.AssignPropertiesFromStorageAccountsBlobService_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccountsBlobService_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = service.AssignPropertiesFromStorageAccountsBlobService_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccountsBlobService_Spec
func (service *StorageAccountsBlobService_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210401s.StorageAccountsBlobService_Spec)
	if ok {
		// Populate destination from our instance
		return service.AssignPropertiesToStorageAccountsBlobService_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccountsBlobService_Spec{}
	err := service.AssignPropertiesToStorageAccountsBlobService_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsBlobService_Spec populates our StorageAccountsBlobService_Spec from the provided source StorageAccountsBlobService_Spec
func (service *StorageAccountsBlobService_Spec) AssignPropertiesFromStorageAccountsBlobService_Spec(source *v20210401s.StorageAccountsBlobService_Spec) error {

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		service.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		service.AutomaticSnapshotPolicyEnabled = nil
	}

	// AzureName
	service.AzureName = source.AzureName

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed
		err := changeFeed.AssignPropertiesFromChangeFeed(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromChangeFeed() to populate field ChangeFeed")
		}
		service.ChangeFeed = &changeFeed
	} else {
		service.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy
		err := containerDeleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		service.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		service.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules
		err := cor.AssignPropertiesFromCorsRules(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCorsRules() to populate field Cors")
		}
		service.Cors = &cor
	} else {
		service.Cors = nil
	}

	// DefaultServiceVersion
	service.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy
		err := deleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		service.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		service.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		service.IsVersioningEnabled = &isVersioningEnabled
	} else {
		service.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy
		err := lastAccessTimeTrackingPolicy.AssignPropertiesFromLastAccessTimeTrackingPolicy(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		service.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		service.LastAccessTimeTrackingPolicy = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		service.Owner = &owner
	} else {
		service.Owner = nil
	}

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties
		err := restorePolicy.AssignPropertiesFromRestorePolicyProperties(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRestorePolicyProperties() to populate field RestorePolicy")
		}
		service.RestorePolicy = &restorePolicy
	} else {
		service.RestorePolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobService_Spec populates the provided destination StorageAccountsBlobService_Spec from our StorageAccountsBlobService_Spec
func (service *StorageAccountsBlobService_Spec) AssignPropertiesToStorageAccountsBlobService_Spec(destination *v20210401s.StorageAccountsBlobService_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutomaticSnapshotPolicyEnabled
	if service.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *service.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// AzureName
	destination.AzureName = service.AzureName

	// ChangeFeed
	if service.ChangeFeed != nil {
		var changeFeed v20210401s.ChangeFeed
		err := service.ChangeFeed.AssignPropertiesToChangeFeed(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToChangeFeed() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if service.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy v20210401s.DeleteRetentionPolicy
		err := service.ContainerDeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if service.Cors != nil {
		var cor v20210401s.CorsRules
		err := service.Cors.AssignPropertiesToCorsRules(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCorsRules() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(service.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if service.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy v20210401s.DeleteRetentionPolicy
		err := service.DeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if service.IsVersioningEnabled != nil {
		isVersioningEnabled := *service.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if service.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy v20210401s.LastAccessTimeTrackingPolicy
		err := service.LastAccessTimeTrackingPolicy.AssignPropertiesToLastAccessTimeTrackingPolicy(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// OriginalVersion
	destination.OriginalVersion = service.OriginalVersion()

	// Owner
	if service.Owner != nil {
		owner := service.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RestorePolicy
	if service.RestorePolicy != nil {
		var restorePolicy v20210401s.RestorePolicyProperties
		err := service.RestorePolicy.AssignPropertiesToRestorePolicyProperties(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRestorePolicyProperties() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (service *StorageAccountsBlobService_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (service *StorageAccountsBlobService_Spec) SetAzureName(azureName string) {
	service.AzureName = azureName
}

type StorageAccountsBlobService_STATUS struct {
	// AutomaticSnapshotPolicyEnabled: Deprecated in favor of isVersioningEnabled property.
	AutomaticSnapshotPolicyEnabled *bool `json:"automaticSnapshotPolicyEnabled,omitempty"`

	// ChangeFeed: The blob service properties for change feed events.
	ChangeFeed *ChangeFeed_STATUS `json:"changeFeed,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ContainerDeleteRetentionPolicy: The blob service properties for container soft delete.
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy_STATUS `json:"containerDeleteRetentionPolicy,omitempty"`

	// Cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no
	// CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the
	// Blob service.
	Cors *CorsRules_STATUS `json:"cors,omitempty"`

	// DefaultServiceVersion: DefaultServiceVersion indicates the default version to use for requests to the Blob service if an
	// incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions.
	DefaultServiceVersion *string `json:"defaultServiceVersion,omitempty"`

	// DeleteRetentionPolicy: The blob service properties for blob soft delete.
	DeleteRetentionPolicy *DeleteRetentionPolicy_STATUS `json:"deleteRetentionPolicy,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// IsVersioningEnabled: Versioning is enabled if set to true.
	IsVersioningEnabled *bool `json:"isVersioningEnabled,omitempty"`

	// LastAccessTimeTrackingPolicy: The blob service property to configure last access time based tracking policy.
	LastAccessTimeTrackingPolicy *LastAccessTimeTrackingPolicy_STATUS `json:"lastAccessTimeTrackingPolicy,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// RestorePolicy: The blob service properties for blob restore policy.
	RestorePolicy *RestorePolicyProperties_STATUS `json:"restorePolicy,omitempty"`

	// Sku: Sku name and tier.
	Sku *Sku_STATUS `json:"sku,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccountsBlobService_STATUS{}

// ConvertStatusFrom populates our StorageAccountsBlobService_STATUS from the provided source
func (service *StorageAccountsBlobService_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210401s.StorageAccountsBlobService_STATUS)
	if ok {
		// Populate our instance from source
<<<<<<< HEAD
		return service.AssignPropertiesFromStorageAccountsBlobService_STATUS(src)
=======
		return properties.AssignProperties_From_BlobServiceProperties_STATUS(src)
>>>>>>> main
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccountsBlobService_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
<<<<<<< HEAD
	err = service.AssignPropertiesFromStorageAccountsBlobService_STATUS(src)
=======
	err = properties.AssignProperties_From_BlobServiceProperties_STATUS(src)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccountsBlobService_STATUS
func (service *StorageAccountsBlobService_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210401s.StorageAccountsBlobService_STATUS)
	if ok {
		// Populate destination from our instance
<<<<<<< HEAD
		return service.AssignPropertiesToStorageAccountsBlobService_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccountsBlobService_STATUS{}
	err := service.AssignPropertiesToStorageAccountsBlobService_STATUS(dst)
=======
		return properties.AssignProperties_To_BlobServiceProperties_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.BlobServiceProperties_STATUS{}
	err := properties.AssignProperties_To_BlobServiceProperties_STATUS(dst)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccountsBlobService_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *StorageAccountsBlobService_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsBlobService_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *StorageAccountsBlobService_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsBlobService_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsBlobService_STATUSARM, got %T", armInput)
	}

	// Set property ‘AutomaticSnapshotPolicyEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutomaticSnapshotPolicyEnabled != nil {
			automaticSnapshotPolicyEnabled := *typedInput.Properties.AutomaticSnapshotPolicyEnabled
			service.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
		}
	}

	// Set property ‘ChangeFeed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ChangeFeed != nil {
			var changeFeed1 ChangeFeed_STATUS
			err := changeFeed1.PopulateFromARM(owner, *typedInput.Properties.ChangeFeed)
			if err != nil {
				return err
			}
			changeFeed := changeFeed1
			service.ChangeFeed = &changeFeed
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ContainerDeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContainerDeleteRetentionPolicy != nil {
			var containerDeleteRetentionPolicy1 DeleteRetentionPolicy_STATUS
			err := containerDeleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.ContainerDeleteRetentionPolicy)
			if err != nil {
				return err
			}
			containerDeleteRetentionPolicy := containerDeleteRetentionPolicy1
			service.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 CorsRules_STATUS
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			service.Cors = &cors
		}
	}

	// Set property ‘DefaultServiceVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultServiceVersion != nil {
			defaultServiceVersion := *typedInput.Properties.DefaultServiceVersion
			service.DefaultServiceVersion = &defaultServiceVersion
		}
	}

	// Set property ‘DeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeleteRetentionPolicy != nil {
			var deleteRetentionPolicy1 DeleteRetentionPolicy_STATUS
			err := deleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeleteRetentionPolicy)
			if err != nil {
				return err
			}
			deleteRetentionPolicy := deleteRetentionPolicy1
			service.DeleteRetentionPolicy = &deleteRetentionPolicy
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		service.Id = &id
	}

	// Set property ‘IsVersioningEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVersioningEnabled != nil {
			isVersioningEnabled := *typedInput.Properties.IsVersioningEnabled
			service.IsVersioningEnabled = &isVersioningEnabled
		}
	}

	// Set property ‘LastAccessTimeTrackingPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastAccessTimeTrackingPolicy != nil {
			var lastAccessTimeTrackingPolicy1 LastAccessTimeTrackingPolicy_STATUS
			err := lastAccessTimeTrackingPolicy1.PopulateFromARM(owner, *typedInput.Properties.LastAccessTimeTrackingPolicy)
			if err != nil {
				return err
			}
			lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicy1
			service.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		service.Name = &name
	}

	// Set property ‘RestorePolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePolicy != nil {
			var restorePolicy1 RestorePolicyProperties_STATUS
			err := restorePolicy1.PopulateFromARM(owner, *typedInput.Properties.RestorePolicy)
			if err != nil {
				return err
			}
			restorePolicy := restorePolicy1
			service.RestorePolicy = &restorePolicy
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		service.Sku = &sku
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		service.Type = &typeVar
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromStorageAccountsBlobService_STATUS populates our StorageAccountsBlobService_STATUS from the provided source StorageAccountsBlobService_STATUS
func (service *StorageAccountsBlobService_STATUS) AssignPropertiesFromStorageAccountsBlobService_STATUS(source *v20210401s.StorageAccountsBlobService_STATUS) error {
=======
// AssignProperties_From_BlobServiceProperties_STATUS populates our BlobServiceProperties_STATUS from the provided source BlobServiceProperties_STATUS
func (properties *BlobServiceProperties_STATUS) AssignProperties_From_BlobServiceProperties_STATUS(source *v20210401s.BlobServiceProperties_STATUS) error {
>>>>>>> main

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		service.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		service.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed_STATUS
<<<<<<< HEAD
		err := changeFeed.AssignPropertiesFromChangeFeed_STATUS(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromChangeFeed_STATUS() to populate field ChangeFeed")
=======
		err := changeFeed.AssignProperties_From_ChangeFeed_STATUS(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ChangeFeed_STATUS() to populate field ChangeFeed")
>>>>>>> main
		}
		service.ChangeFeed = &changeFeed
	} else {
		service.ChangeFeed = nil
	}

	// Conditions
	service.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy_STATUS
<<<<<<< HEAD
		err := containerDeleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy_STATUS(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy_STATUS() to populate field ContainerDeleteRetentionPolicy")
=======
		err := containerDeleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy_STATUS(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy_STATUS() to populate field ContainerDeleteRetentionPolicy")
>>>>>>> main
		}
		service.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		service.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules_STATUS
<<<<<<< HEAD
		err := cor.AssignPropertiesFromCorsRules_STATUS(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCorsRules_STATUS() to populate field Cors")
=======
		err := cor.AssignProperties_From_CorsRules_STATUS(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CorsRules_STATUS() to populate field Cors")
>>>>>>> main
		}
		service.Cors = &cor
	} else {
		service.Cors = nil
	}

	// DefaultServiceVersion
	service.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy_STATUS
<<<<<<< HEAD
		err := deleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy_STATUS(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy_STATUS() to populate field DeleteRetentionPolicy")
=======
		err := deleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy_STATUS(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy_STATUS() to populate field DeleteRetentionPolicy")
>>>>>>> main
		}
		service.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		service.DeleteRetentionPolicy = nil
	}

	// Id
	service.Id = genruntime.ClonePointerToString(source.Id)

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		service.IsVersioningEnabled = &isVersioningEnabled
	} else {
		service.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy_STATUS
<<<<<<< HEAD
		err := lastAccessTimeTrackingPolicy.AssignPropertiesFromLastAccessTimeTrackingPolicy_STATUS(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLastAccessTimeTrackingPolicy_STATUS() to populate field LastAccessTimeTrackingPolicy")
=======
		err := lastAccessTimeTrackingPolicy.AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS() to populate field LastAccessTimeTrackingPolicy")
>>>>>>> main
		}
		service.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		service.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	service.Name = genruntime.ClonePointerToString(source.Name)

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties_STATUS
<<<<<<< HEAD
		err := restorePolicy.AssignPropertiesFromRestorePolicyProperties_STATUS(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRestorePolicyProperties_STATUS() to populate field RestorePolicy")
=======
		err := restorePolicy.AssignProperties_From_RestorePolicyProperties_STATUS(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RestorePolicyProperties_STATUS() to populate field RestorePolicy")
>>>>>>> main
		}
		service.RestorePolicy = &restorePolicy
	} else {
		service.RestorePolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
<<<<<<< HEAD
		err := sku.AssignPropertiesFromSku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_STATUS() to populate field Sku")
=======
		err := sku.AssignProperties_From_Sku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku_STATUS() to populate field Sku")
>>>>>>> main
		}
		service.Sku = &sku
	} else {
		service.Sku = nil
	}

	// Type
	service.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToStorageAccountsBlobService_STATUS populates the provided destination StorageAccountsBlobService_STATUS from our StorageAccountsBlobService_STATUS
func (service *StorageAccountsBlobService_STATUS) AssignPropertiesToStorageAccountsBlobService_STATUS(destination *v20210401s.StorageAccountsBlobService_STATUS) error {
=======
// AssignProperties_To_BlobServiceProperties_STATUS populates the provided destination BlobServiceProperties_STATUS from our BlobServiceProperties_STATUS
func (properties *BlobServiceProperties_STATUS) AssignProperties_To_BlobServiceProperties_STATUS(destination *v20210401s.BlobServiceProperties_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutomaticSnapshotPolicyEnabled
	if service.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *service.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if service.ChangeFeed != nil {
		var changeFeed v20210401s.ChangeFeed_STATUS
<<<<<<< HEAD
		err := service.ChangeFeed.AssignPropertiesToChangeFeed_STATUS(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToChangeFeed_STATUS() to populate field ChangeFeed")
=======
		err := properties.ChangeFeed.AssignProperties_To_ChangeFeed_STATUS(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ChangeFeed_STATUS() to populate field ChangeFeed")
>>>>>>> main
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(service.Conditions)

	// ContainerDeleteRetentionPolicy
	if service.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy v20210401s.DeleteRetentionPolicy_STATUS
<<<<<<< HEAD
		err := service.ContainerDeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy_STATUS(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy_STATUS() to populate field ContainerDeleteRetentionPolicy")
=======
		err := properties.ContainerDeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy_STATUS(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy_STATUS() to populate field ContainerDeleteRetentionPolicy")
>>>>>>> main
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if service.Cors != nil {
		var cor v20210401s.CorsRules_STATUS
<<<<<<< HEAD
		err := service.Cors.AssignPropertiesToCorsRules_STATUS(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCorsRules_STATUS() to populate field Cors")
=======
		err := properties.Cors.AssignProperties_To_CorsRules_STATUS(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CorsRules_STATUS() to populate field Cors")
>>>>>>> main
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(service.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if service.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy v20210401s.DeleteRetentionPolicy_STATUS
<<<<<<< HEAD
		err := service.DeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy_STATUS(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy_STATUS() to populate field DeleteRetentionPolicy")
=======
		err := properties.DeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy_STATUS(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy_STATUS() to populate field DeleteRetentionPolicy")
>>>>>>> main
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(service.Id)

	// IsVersioningEnabled
	if service.IsVersioningEnabled != nil {
		isVersioningEnabled := *service.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if service.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy v20210401s.LastAccessTimeTrackingPolicy_STATUS
<<<<<<< HEAD
		err := service.LastAccessTimeTrackingPolicy.AssignPropertiesToLastAccessTimeTrackingPolicy_STATUS(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLastAccessTimeTrackingPolicy_STATUS() to populate field LastAccessTimeTrackingPolicy")
=======
		err := properties.LastAccessTimeTrackingPolicy.AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS() to populate field LastAccessTimeTrackingPolicy")
>>>>>>> main
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(service.Name)

	// RestorePolicy
	if service.RestorePolicy != nil {
		var restorePolicy v20210401s.RestorePolicyProperties_STATUS
<<<<<<< HEAD
		err := service.RestorePolicy.AssignPropertiesToRestorePolicyProperties_STATUS(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRestorePolicyProperties_STATUS() to populate field RestorePolicy")
=======
		err := properties.RestorePolicy.AssignProperties_To_RestorePolicyProperties_STATUS(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RestorePolicyProperties_STATUS() to populate field RestorePolicy")
>>>>>>> main
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Sku
	if service.Sku != nil {
		var sku v20210401s.Sku_STATUS
<<<<<<< HEAD
		err := service.Sku.AssignPropertiesToSku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_STATUS() to populate field Sku")
=======
		err := properties.Sku.AssignProperties_To_Sku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku_STATUS() to populate field Sku")
>>>>>>> main
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(service.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
=======
type StorageAccounts_BlobServices_Spec struct {
	// AutomaticSnapshotPolicyEnabled: Deprecated in favor of isVersioningEnabled property.
	AutomaticSnapshotPolicyEnabled *bool `json:"automaticSnapshotPolicyEnabled,omitempty"`

	// ChangeFeed: The blob service properties for change feed events.
	ChangeFeed *ChangeFeed `json:"changeFeed,omitempty"`

	// ContainerDeleteRetentionPolicy: The service properties for soft delete.
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy `json:"containerDeleteRetentionPolicy,omitempty"`

	// Cors: Sets the CORS rules. You can include up to five CorsRule elements in the request.
	Cors *CorsRules `json:"cors,omitempty"`

	// DefaultServiceVersion: DefaultServiceVersion indicates the default version to use for requests to the Blob service if an
	// incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions.
	DefaultServiceVersion *string `json:"defaultServiceVersion,omitempty"`

	// DeleteRetentionPolicy: The service properties for soft delete.
	DeleteRetentionPolicy *DeleteRetentionPolicy `json:"deleteRetentionPolicy,omitempty"`

	// IsVersioningEnabled: Versioning is enabled if set to true.
	IsVersioningEnabled *bool `json:"isVersioningEnabled,omitempty"`

	// LastAccessTimeTrackingPolicy: The blob service properties for Last access time based tracking policy.
	LastAccessTimeTrackingPolicy *LastAccessTimeTrackingPolicy `json:"lastAccessTimeTrackingPolicy,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a storage.azure.com/StorageAccount resource
	Owner *genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner,omitempty" kind:"StorageAccount"`

	// RestorePolicy: The blob service properties for blob restore policy
	RestorePolicy *RestorePolicyProperties `json:"restorePolicy,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccounts_BlobServices_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (services *StorageAccounts_BlobServices_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if services == nil {
		return nil, nil
	}
	result := &StorageAccounts_BlobServices_SpecARM{}

	// Set property ‘Location’:
	if services.Location != nil {
		location := *services.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if services.AutomaticSnapshotPolicyEnabled != nil ||
		services.ChangeFeed != nil ||
		services.ContainerDeleteRetentionPolicy != nil ||
		services.Cors != nil ||
		services.DefaultServiceVersion != nil ||
		services.DeleteRetentionPolicy != nil ||
		services.IsVersioningEnabled != nil ||
		services.LastAccessTimeTrackingPolicy != nil ||
		services.RestorePolicy != nil {
		result.Properties = &BlobServicePropertiesPropertiesARM{}
	}
	if services.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *services.AutomaticSnapshotPolicyEnabled
		result.Properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	}
	if services.ChangeFeed != nil {
		changeFeedARM, err := (*services.ChangeFeed).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		changeFeed := *changeFeedARM.(*ChangeFeedARM)
		result.Properties.ChangeFeed = &changeFeed
	}
	if services.ContainerDeleteRetentionPolicy != nil {
		containerDeleteRetentionPolicyARM, err := (*services.ContainerDeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		containerDeleteRetentionPolicy := *containerDeleteRetentionPolicyARM.(*DeleteRetentionPolicyARM)
		result.Properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	}
	if services.Cors != nil {
		corsARM, err := (*services.Cors).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cors := *corsARM.(*CorsRulesARM)
		result.Properties.Cors = &cors
	}
	if services.DefaultServiceVersion != nil {
		defaultServiceVersion := *services.DefaultServiceVersion
		result.Properties.DefaultServiceVersion = &defaultServiceVersion
	}
	if services.DeleteRetentionPolicy != nil {
		deleteRetentionPolicyARM, err := (*services.DeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deleteRetentionPolicy := *deleteRetentionPolicyARM.(*DeleteRetentionPolicyARM)
		result.Properties.DeleteRetentionPolicy = &deleteRetentionPolicy
	}
	if services.IsVersioningEnabled != nil {
		isVersioningEnabled := *services.IsVersioningEnabled
		result.Properties.IsVersioningEnabled = &isVersioningEnabled
	}
	if services.LastAccessTimeTrackingPolicy != nil {
		lastAccessTimeTrackingPolicyARM, err := (*services.LastAccessTimeTrackingPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		lastAccessTimeTrackingPolicy := *lastAccessTimeTrackingPolicyARM.(*LastAccessTimeTrackingPolicyARM)
		result.Properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	}
	if services.RestorePolicy != nil {
		restorePolicyARM, err := (*services.RestorePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		restorePolicy := *restorePolicyARM.(*RestorePolicyPropertiesARM)
		result.Properties.RestorePolicy = &restorePolicy
	}

	// Set property ‘Tags’:
	if services.Tags != nil {
		result.Tags = make(map[string]string, len(services.Tags))
		for key, value := range services.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *StorageAccounts_BlobServices_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_BlobServices_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *StorageAccounts_BlobServices_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_BlobServices_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_BlobServices_SpecARM, got %T", armInput)
	}

	// Set property ‘AutomaticSnapshotPolicyEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutomaticSnapshotPolicyEnabled != nil {
			automaticSnapshotPolicyEnabled := *typedInput.Properties.AutomaticSnapshotPolicyEnabled
			services.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
		}
	}

	// Set property ‘ChangeFeed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ChangeFeed != nil {
			var changeFeed1 ChangeFeed
			err := changeFeed1.PopulateFromARM(owner, *typedInput.Properties.ChangeFeed)
			if err != nil {
				return err
			}
			changeFeed := changeFeed1
			services.ChangeFeed = &changeFeed
		}
	}

	// Set property ‘ContainerDeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContainerDeleteRetentionPolicy != nil {
			var containerDeleteRetentionPolicy1 DeleteRetentionPolicy
			err := containerDeleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.ContainerDeleteRetentionPolicy)
			if err != nil {
				return err
			}
			containerDeleteRetentionPolicy := containerDeleteRetentionPolicy1
			services.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 CorsRules
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			services.Cors = &cors
		}
	}

	// Set property ‘DefaultServiceVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultServiceVersion != nil {
			defaultServiceVersion := *typedInput.Properties.DefaultServiceVersion
			services.DefaultServiceVersion = &defaultServiceVersion
		}
	}

	// Set property ‘DeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeleteRetentionPolicy != nil {
			var deleteRetentionPolicy1 DeleteRetentionPolicy
			err := deleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeleteRetentionPolicy)
			if err != nil {
				return err
			}
			deleteRetentionPolicy := deleteRetentionPolicy1
			services.DeleteRetentionPolicy = &deleteRetentionPolicy
		}
	}

	// Set property ‘IsVersioningEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVersioningEnabled != nil {
			isVersioningEnabled := *typedInput.Properties.IsVersioningEnabled
			services.IsVersioningEnabled = &isVersioningEnabled
		}
	}

	// Set property ‘LastAccessTimeTrackingPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastAccessTimeTrackingPolicy != nil {
			var lastAccessTimeTrackingPolicy1 LastAccessTimeTrackingPolicy
			err := lastAccessTimeTrackingPolicy1.PopulateFromARM(owner, *typedInput.Properties.LastAccessTimeTrackingPolicy)
			if err != nil {
				return err
			}
			lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicy1
			services.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		services.Location = &location
	}

	// Set property ‘Owner’:
	services.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RestorePolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePolicy != nil {
			var restorePolicy1 RestorePolicyProperties
			err := restorePolicy1.PopulateFromARM(owner, *typedInput.Properties.RestorePolicy)
			if err != nil {
				return err
			}
			restorePolicy := restorePolicy1
			services.RestorePolicy = &restorePolicy
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		services.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			services.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_BlobServices_Spec{}

// ConvertSpecFrom populates our StorageAccounts_BlobServices_Spec from the provided source
func (services *StorageAccounts_BlobServices_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210401s.StorageAccounts_BlobServices_Spec)
	if ok {
		// Populate our instance from source
		return services.AssignProperties_From_StorageAccounts_BlobServices_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210401s.StorageAccounts_BlobServices_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = services.AssignProperties_From_StorageAccounts_BlobServices_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_BlobServices_Spec
func (services *StorageAccounts_BlobServices_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210401s.StorageAccounts_BlobServices_Spec)
	if ok {
		// Populate destination from our instance
		return services.AssignProperties_To_StorageAccounts_BlobServices_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210401s.StorageAccounts_BlobServices_Spec{}
	err := services.AssignProperties_To_StorageAccounts_BlobServices_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_StorageAccounts_BlobServices_Spec populates our StorageAccounts_BlobServices_Spec from the provided source StorageAccounts_BlobServices_Spec
func (services *StorageAccounts_BlobServices_Spec) AssignProperties_From_StorageAccounts_BlobServices_Spec(source *v20210401s.StorageAccounts_BlobServices_Spec) error {

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		services.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		services.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed
		err := changeFeed.AssignProperties_From_ChangeFeed(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ChangeFeed() to populate field ChangeFeed")
		}
		services.ChangeFeed = &changeFeed
	} else {
		services.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy
		err := containerDeleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		services.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		services.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules
		err := cor.AssignProperties_From_CorsRules(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CorsRules() to populate field Cors")
		}
		services.Cors = &cor
	} else {
		services.Cors = nil
	}

	// DefaultServiceVersion
	services.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy
		err := deleteRetentionPolicy.AssignProperties_From_DeleteRetentionPolicy(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		services.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		services.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		services.IsVersioningEnabled = &isVersioningEnabled
	} else {
		services.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy
		err := lastAccessTimeTrackingPolicy.AssignProperties_From_LastAccessTimeTrackingPolicy(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_LastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		services.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		services.LastAccessTimeTrackingPolicy = nil
	}

	// Location
	services.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		services.Owner = &owner
	} else {
		services.Owner = nil
	}

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties
		err := restorePolicy.AssignProperties_From_RestorePolicyProperties(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RestorePolicyProperties() to populate field RestorePolicy")
		}
		services.RestorePolicy = &restorePolicy
	} else {
		services.RestorePolicy = nil
	}

	// Tags
	services.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_StorageAccounts_BlobServices_Spec populates the provided destination StorageAccounts_BlobServices_Spec from our StorageAccounts_BlobServices_Spec
func (services *StorageAccounts_BlobServices_Spec) AssignProperties_To_StorageAccounts_BlobServices_Spec(destination *v20210401s.StorageAccounts_BlobServices_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutomaticSnapshotPolicyEnabled
	if services.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *services.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if services.ChangeFeed != nil {
		var changeFeed v20210401s.ChangeFeed
		err := services.ChangeFeed.AssignProperties_To_ChangeFeed(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ChangeFeed() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if services.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy v20210401s.DeleteRetentionPolicy
		err := services.ContainerDeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if services.Cors != nil {
		var cor v20210401s.CorsRules
		err := services.Cors.AssignProperties_To_CorsRules(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CorsRules() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(services.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if services.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy v20210401s.DeleteRetentionPolicy
		err := services.DeleteRetentionPolicy.AssignProperties_To_DeleteRetentionPolicy(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if services.IsVersioningEnabled != nil {
		isVersioningEnabled := *services.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if services.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy v20210401s.LastAccessTimeTrackingPolicy
		err := services.LastAccessTimeTrackingPolicy.AssignProperties_To_LastAccessTimeTrackingPolicy(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_LastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(services.Location)

	// OriginalVersion
	destination.OriginalVersion = services.OriginalVersion()

	// Owner
	if services.Owner != nil {
		owner := services.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RestorePolicy
	if services.RestorePolicy != nil {
		var restorePolicy v20210401s.RestorePolicyProperties
		err := services.RestorePolicy.AssignProperties_To_RestorePolicyProperties(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RestorePolicyProperties() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(services.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (services *StorageAccounts_BlobServices_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/ChangeFeed
>>>>>>> main
type ChangeFeed struct {
	// Enabled: Indicates whether change feed event logging is enabled for the Blob service.
	Enabled *bool `json:"enabled,omitempty"`

	// +kubebuilder:validation:Maximum=146000
	// +kubebuilder:validation:Minimum=1
	// RetentionInDays: Indicates the duration of changeFeed retention in days. Minimum value is 1 day and maximum value is
	// 146000 days (400 years). A null value indicates an infinite retention of the change feed.
	RetentionInDays *int `json:"retentionInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &ChangeFeed{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (feed *ChangeFeed) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if feed == nil {
		return nil, nil
	}
	result := &ChangeFeedARM{}

	// Set property ‘Enabled’:
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if feed.RetentionInDays != nil {
		retentionInDays := *feed.RetentionInDays
		result.RetentionInDays = &retentionInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feed *ChangeFeed) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ChangeFeedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feed *ChangeFeed) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ChangeFeedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ChangeFeedARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		feed.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if typedInput.RetentionInDays != nil {
		retentionInDays := *typedInput.RetentionInDays
		feed.RetentionInDays = &retentionInDays
	}

	// No error
	return nil
}

// AssignProperties_From_ChangeFeed populates our ChangeFeed from the provided source ChangeFeed
func (feed *ChangeFeed) AssignProperties_From_ChangeFeed(source *v20210401s.ChangeFeed) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	if source.RetentionInDays != nil {
		retentionInDay := *source.RetentionInDays
		feed.RetentionInDays = &retentionInDay
	} else {
		feed.RetentionInDays = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ChangeFeed populates the provided destination ChangeFeed from our ChangeFeed
func (feed *ChangeFeed) AssignProperties_To_ChangeFeed(destination *v20210401s.ChangeFeed) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	if feed.RetentionInDays != nil {
		retentionInDay := *feed.RetentionInDays
		destination.RetentionInDays = &retentionInDay
	} else {
		destination.RetentionInDays = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ChangeFeed_STATUS struct {
	// Enabled: Indicates whether change feed event logging is enabled for the Blob service.
	Enabled *bool `json:"enabled,omitempty"`

	// RetentionInDays: Indicates the duration of changeFeed retention in days. Minimum value is 1 day and maximum value is
	// 146000 days (400 years). A null value indicates an infinite retention of the change feed.
	RetentionInDays *int `json:"retentionInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &ChangeFeed_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feed *ChangeFeed_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ChangeFeed_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feed *ChangeFeed_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ChangeFeed_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ChangeFeed_STATUSARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		feed.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if typedInput.RetentionInDays != nil {
		retentionInDays := *typedInput.RetentionInDays
		feed.RetentionInDays = &retentionInDays
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromChangeFeed_STATUS populates our ChangeFeed_STATUS from the provided source ChangeFeed_STATUS
func (feed *ChangeFeed_STATUS) AssignPropertiesFromChangeFeed_STATUS(source *v20210401s.ChangeFeed_STATUS) error {
=======
// AssignProperties_From_ChangeFeed_STATUS populates our ChangeFeed_STATUS from the provided source ChangeFeed_STATUS
func (feed *ChangeFeed_STATUS) AssignProperties_From_ChangeFeed_STATUS(source *v20210401s.ChangeFeed_STATUS) error {
>>>>>>> main

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	feed.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToChangeFeed_STATUS populates the provided destination ChangeFeed_STATUS from our ChangeFeed_STATUS
func (feed *ChangeFeed_STATUS) AssignPropertiesToChangeFeed_STATUS(destination *v20210401s.ChangeFeed_STATUS) error {
=======
// AssignProperties_To_ChangeFeed_STATUS populates the provided destination ChangeFeed_STATUS from our ChangeFeed_STATUS
func (feed *ChangeFeed_STATUS) AssignProperties_To_ChangeFeed_STATUS(destination *v20210401s.ChangeFeed_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(feed.RetentionInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRules struct {
	// CorsRules: The List of CORS rules. You can include up to five CorsRule elements in the request.
	CorsRules []CorsRule `json:"corsRules,omitempty"`
}

var _ genruntime.ARMTransformer = &CorsRules{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rules *CorsRules) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rules == nil {
		return nil, nil
	}
	result := &CorsRulesARM{}

	// Set property ‘CorsRules’:
	for _, item := range rules.CorsRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.CorsRules = append(result.CorsRules, *itemARM.(*CorsRuleARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *CorsRules) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRulesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *CorsRules) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRulesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRulesARM, got %T", armInput)
	}

	// Set property ‘CorsRules’:
	for _, item := range typedInput.CorsRules {
		var item1 CorsRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rules.CorsRules = append(rules.CorsRules, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_CorsRules populates our CorsRules from the provided source CorsRules
func (rules *CorsRules) AssignProperties_From_CorsRules(source *v20210401s.CorsRules) error {

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule
			err := corsRule.AssignProperties_From_CorsRule(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CorsRule() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CorsRules populates the provided destination CorsRules from our CorsRules
func (rules *CorsRules) AssignProperties_To_CorsRules(destination *v20210401s.CorsRules) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]v20210401s.CorsRule, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule v20210401s.CorsRule
			err := corsRuleItem.AssignProperties_To_CorsRule(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CorsRule() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRules_STATUS struct {
	// CorsRules: The List of CORS rules. You can include up to five CorsRule elements in the request.
	CorsRules []CorsRule_STATUS `json:"corsRules,omitempty"`
}

var _ genruntime.FromARMConverter = &CorsRules_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *CorsRules_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRules_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *CorsRules_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRules_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRules_STATUSARM, got %T", armInput)
	}

	// Set property ‘CorsRules’:
	for _, item := range typedInput.CorsRules {
		var item1 CorsRule_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rules.CorsRules = append(rules.CorsRules, item1)
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromCorsRules_STATUS populates our CorsRules_STATUS from the provided source CorsRules_STATUS
func (rules *CorsRules_STATUS) AssignPropertiesFromCorsRules_STATUS(source *v20210401s.CorsRules_STATUS) error {
=======
// AssignProperties_From_CorsRules_STATUS populates our CorsRules_STATUS from the provided source CorsRules_STATUS
func (rules *CorsRules_STATUS) AssignProperties_From_CorsRules_STATUS(source *v20210401s.CorsRules_STATUS) error {
>>>>>>> main

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule_STATUS, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule_STATUS
<<<<<<< HEAD
			err := corsRule.AssignPropertiesFromCorsRule_STATUS(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCorsRule_STATUS() to populate field CorsRules")
=======
			err := corsRule.AssignProperties_From_CorsRule_STATUS(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CorsRule_STATUS() to populate field CorsRules")
>>>>>>> main
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToCorsRules_STATUS populates the provided destination CorsRules_STATUS from our CorsRules_STATUS
func (rules *CorsRules_STATUS) AssignPropertiesToCorsRules_STATUS(destination *v20210401s.CorsRules_STATUS) error {
=======
// AssignProperties_To_CorsRules_STATUS populates the provided destination CorsRules_STATUS from our CorsRules_STATUS
func (rules *CorsRules_STATUS) AssignProperties_To_CorsRules_STATUS(destination *v20210401s.CorsRules_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]v20210401s.CorsRule_STATUS, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule v20210401s.CorsRule_STATUS
<<<<<<< HEAD
			err := corsRuleItem.AssignPropertiesToCorsRule_STATUS(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCorsRule_STATUS() to populate field CorsRules")
=======
			err := corsRuleItem.AssignProperties_To_CorsRule_STATUS(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CorsRule_STATUS() to populate field CorsRules")
>>>>>>> main
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeleteRetentionPolicy struct {
	// +kubebuilder:validation:Maximum=365
	// +kubebuilder:validation:Minimum=1
	// Days: Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and
	// the maximum value can be 365.
	Days *int `json:"days,omitempty"`

	// Enabled: Indicates whether DeleteRetentionPolicy is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.ARMTransformer = &DeleteRetentionPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *DeleteRetentionPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &DeleteRetentionPolicyARM{}

	// Set property ‘Days’:
	if policy.Days != nil {
		days := *policy.Days
		result.Days = &days
	}

	// Set property ‘Enabled’:
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		result.Enabled = &enabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *DeleteRetentionPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeleteRetentionPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *DeleteRetentionPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeleteRetentionPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeleteRetentionPolicyARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		policy.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignProperties_From_DeleteRetentionPolicy populates our DeleteRetentionPolicy from the provided source DeleteRetentionPolicy
func (policy *DeleteRetentionPolicy) AssignProperties_From_DeleteRetentionPolicy(source *v20210401s.DeleteRetentionPolicy) error {

	// Days
	if source.Days != nil {
		day := *source.Days
		policy.Days = &day
	} else {
		policy.Days = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeleteRetentionPolicy populates the provided destination DeleteRetentionPolicy from our DeleteRetentionPolicy
func (policy *DeleteRetentionPolicy) AssignProperties_To_DeleteRetentionPolicy(destination *v20210401s.DeleteRetentionPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	if policy.Days != nil {
		day := *policy.Days
		destination.Days = &day
	} else {
		destination.Days = nil
	}

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeleteRetentionPolicy_STATUS struct {
	// Days: Indicates the number of days that the deleted item should be retained. The minimum specified value can be 1 and
	// the maximum value can be 365.
	Days *int `json:"days,omitempty"`

	// Enabled: Indicates whether DeleteRetentionPolicy is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.FromARMConverter = &DeleteRetentionPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *DeleteRetentionPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeleteRetentionPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *DeleteRetentionPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeleteRetentionPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeleteRetentionPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		policy.Enabled = &enabled
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromDeleteRetentionPolicy_STATUS populates our DeleteRetentionPolicy_STATUS from the provided source DeleteRetentionPolicy_STATUS
func (policy *DeleteRetentionPolicy_STATUS) AssignPropertiesFromDeleteRetentionPolicy_STATUS(source *v20210401s.DeleteRetentionPolicy_STATUS) error {
=======
// AssignProperties_From_DeleteRetentionPolicy_STATUS populates our DeleteRetentionPolicy_STATUS from the provided source DeleteRetentionPolicy_STATUS
func (policy *DeleteRetentionPolicy_STATUS) AssignProperties_From_DeleteRetentionPolicy_STATUS(source *v20210401s.DeleteRetentionPolicy_STATUS) error {
>>>>>>> main

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToDeleteRetentionPolicy_STATUS populates the provided destination DeleteRetentionPolicy_STATUS from our DeleteRetentionPolicy_STATUS
func (policy *DeleteRetentionPolicy_STATUS) AssignPropertiesToDeleteRetentionPolicy_STATUS(destination *v20210401s.DeleteRetentionPolicy_STATUS) error {
=======
// AssignProperties_To_DeleteRetentionPolicy_STATUS populates the provided destination DeleteRetentionPolicy_STATUS from our DeleteRetentionPolicy_STATUS
func (policy *DeleteRetentionPolicy_STATUS) AssignProperties_To_DeleteRetentionPolicy_STATUS(destination *v20210401s.DeleteRetentionPolicy_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LastAccessTimeTrackingPolicy struct {
	// BlobType: An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently
	// read only
	BlobType []string `json:"blobType,omitempty"`

	// +kubebuilder:validation:Required
	// Enable: When set to true last access time based tracking is enabled.
	Enable *bool `json:"enable,omitempty"`

<<<<<<< HEAD
	// Name: Name of the policy. The valid value is AccessTimeTracking. This field is currently read only
=======
	// Name: Name of the policy. The valid value is AccessTimeTracking. This field is currently read only.
>>>>>>> main
	Name *LastAccessTimeTrackingPolicy_Name `json:"name,omitempty"`

	// TrackingGranularityInDays: The field specifies blob object tracking granularity in days, typically how often the blob
	// object should be tracked.This field is currently read only with value as 1
	TrackingGranularityInDays *int `json:"trackingGranularityInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &LastAccessTimeTrackingPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *LastAccessTimeTrackingPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &LastAccessTimeTrackingPolicyARM{}

	// Set property ‘BlobType’:
	for _, item := range policy.BlobType {
		result.BlobType = append(result.BlobType, item)
	}

	// Set property ‘Enable’:
	if policy.Enable != nil {
		enable := *policy.Enable
		result.Enable = &enable
	}

	// Set property ‘Name’:
	if policy.Name != nil {
		name := *policy.Name
		result.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if policy.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *policy.TrackingGranularityInDays
		result.TrackingGranularityInDays = &trackingGranularityInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *LastAccessTimeTrackingPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LastAccessTimeTrackingPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *LastAccessTimeTrackingPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LastAccessTimeTrackingPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LastAccessTimeTrackingPolicyARM, got %T", armInput)
	}

	// Set property ‘BlobType’:
	for _, item := range typedInput.BlobType {
		policy.BlobType = append(policy.BlobType, item)
	}

	// Set property ‘Enable’:
	if typedInput.Enable != nil {
		enable := *typedInput.Enable
		policy.Enable = &enable
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if typedInput.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *typedInput.TrackingGranularityInDays
		policy.TrackingGranularityInDays = &trackingGranularityInDays
	}

	// No error
	return nil
}

// AssignProperties_From_LastAccessTimeTrackingPolicy populates our LastAccessTimeTrackingPolicy from the provided source LastAccessTimeTrackingPolicy
func (policy *LastAccessTimeTrackingPolicy) AssignProperties_From_LastAccessTimeTrackingPolicy(source *v20210401s.LastAccessTimeTrackingPolicy) error {

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		enable := *source.Enable
		policy.Enable = &enable
	} else {
		policy.Enable = nil
	}

	// Name
	if source.Name != nil {
		name := LastAccessTimeTrackingPolicy_Name(*source.Name)
		policy.Name = &name
	} else {
		policy.Name = nil
	}

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// No error
	return nil
}

// AssignProperties_To_LastAccessTimeTrackingPolicy populates the provided destination LastAccessTimeTrackingPolicy from our LastAccessTimeTrackingPolicy
func (policy *LastAccessTimeTrackingPolicy) AssignProperties_To_LastAccessTimeTrackingPolicy(destination *v20210401s.LastAccessTimeTrackingPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	if policy.Enable != nil {
		enable := *policy.Enable
		destination.Enable = &enable
	} else {
		destination.Enable = nil
	}

	// Name
	if policy.Name != nil {
		name := string(*policy.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LastAccessTimeTrackingPolicy_STATUS struct {
	// BlobType: An array of predefined supported blob types. Only blockBlob is the supported value. This field is currently
	// read only
	BlobType []string `json:"blobType,omitempty"`

	// Enable: When set to true last access time based tracking is enabled.
	Enable *bool `json:"enable,omitempty"`

	// Name: Name of the policy. The valid value is AccessTimeTracking. This field is currently read only
<<<<<<< HEAD
	Name *LastAccessTimeTrackingPolicy_Name_STATUS `json:"name,omitempty"`
=======
	Name *LastAccessTimeTrackingPolicy_STATUS_Name `json:"name,omitempty"`
>>>>>>> main

	// TrackingGranularityInDays: The field specifies blob object tracking granularity in days, typically how often the blob
	// object should be tracked.This field is currently read only with value as 1
	TrackingGranularityInDays *int `json:"trackingGranularityInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &LastAccessTimeTrackingPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *LastAccessTimeTrackingPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LastAccessTimeTrackingPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *LastAccessTimeTrackingPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LastAccessTimeTrackingPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LastAccessTimeTrackingPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘BlobType’:
	for _, item := range typedInput.BlobType {
		policy.BlobType = append(policy.BlobType, item)
	}

	// Set property ‘Enable’:
	if typedInput.Enable != nil {
		enable := *typedInput.Enable
		policy.Enable = &enable
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if typedInput.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *typedInput.TrackingGranularityInDays
		policy.TrackingGranularityInDays = &trackingGranularityInDays
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromLastAccessTimeTrackingPolicy_STATUS populates our LastAccessTimeTrackingPolicy_STATUS from the provided source LastAccessTimeTrackingPolicy_STATUS
func (policy *LastAccessTimeTrackingPolicy_STATUS) AssignPropertiesFromLastAccessTimeTrackingPolicy_STATUS(source *v20210401s.LastAccessTimeTrackingPolicy_STATUS) error {
=======
// AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS populates our LastAccessTimeTrackingPolicy_STATUS from the provided source LastAccessTimeTrackingPolicy_STATUS
func (policy *LastAccessTimeTrackingPolicy_STATUS) AssignProperties_From_LastAccessTimeTrackingPolicy_STATUS(source *v20210401s.LastAccessTimeTrackingPolicy_STATUS) error {
>>>>>>> main

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		enable := *source.Enable
		policy.Enable = &enable
	} else {
		policy.Enable = nil
	}

	// Name
	if source.Name != nil {
<<<<<<< HEAD
		name := LastAccessTimeTrackingPolicy_Name_STATUS(*source.Name)
=======
		name := LastAccessTimeTrackingPolicy_STATUS_Name(*source.Name)
>>>>>>> main
		policy.Name = &name
	} else {
		policy.Name = nil
	}

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToLastAccessTimeTrackingPolicy_STATUS populates the provided destination LastAccessTimeTrackingPolicy_STATUS from our LastAccessTimeTrackingPolicy_STATUS
func (policy *LastAccessTimeTrackingPolicy_STATUS) AssignPropertiesToLastAccessTimeTrackingPolicy_STATUS(destination *v20210401s.LastAccessTimeTrackingPolicy_STATUS) error {
=======
// AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS populates the provided destination LastAccessTimeTrackingPolicy_STATUS from our LastAccessTimeTrackingPolicy_STATUS
func (policy *LastAccessTimeTrackingPolicy_STATUS) AssignProperties_To_LastAccessTimeTrackingPolicy_STATUS(destination *v20210401s.LastAccessTimeTrackingPolicy_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	if policy.Enable != nil {
		enable := *policy.Enable
		destination.Enable = &enable
	} else {
		destination.Enable = nil
	}

	// Name
	if policy.Name != nil {
		name := string(*policy.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RestorePolicyProperties struct {
	// +kubebuilder:validation:Maximum=365
	// +kubebuilder:validation:Minimum=1
	// Days: how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days.
	Days *int `json:"days,omitempty"`

	// +kubebuilder:validation:Required
	// Enabled: Blob restore is enabled if set to true.
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.ARMTransformer = &RestorePolicyProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *RestorePolicyProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &RestorePolicyPropertiesARM{}

	// Set property ‘Days’:
	if properties.Days != nil {
		days := *properties.Days
		result.Days = &days
	}

	// Set property ‘Enabled’:
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		result.Enabled = &enabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *RestorePolicyProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RestorePolicyPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *RestorePolicyProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RestorePolicyPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RestorePolicyPropertiesARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		properties.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		properties.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignProperties_From_RestorePolicyProperties populates our RestorePolicyProperties from the provided source RestorePolicyProperties
func (properties *RestorePolicyProperties) AssignProperties_From_RestorePolicyProperties(source *v20210401s.RestorePolicyProperties) error {

	// Days
	if source.Days != nil {
		day := *source.Days
		properties.Days = &day
	} else {
		properties.Days = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		properties.Enabled = &enabled
	} else {
		properties.Enabled = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RestorePolicyProperties populates the provided destination RestorePolicyProperties from our RestorePolicyProperties
func (properties *RestorePolicyProperties) AssignProperties_To_RestorePolicyProperties(destination *v20210401s.RestorePolicyProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	if properties.Days != nil {
		day := *properties.Days
		destination.Days = &day
	} else {
		destination.Days = nil
	}

	// Enabled
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RestorePolicyProperties_STATUS struct {
	// Days: how long this blob can be restored. It should be great than zero and less than DeleteRetentionPolicy.days.
	Days *int `json:"days,omitempty"`

	// Enabled: Blob restore is enabled if set to true.
	Enabled *bool `json:"enabled,omitempty"`

	// LastEnabledTime: Deprecated in favor of minRestoreTime property.
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`

	// MinRestoreTime: Returns the minimum date and time that the restore can be started.
	MinRestoreTime *string `json:"minRestoreTime,omitempty"`
}

var _ genruntime.FromARMConverter = &RestorePolicyProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *RestorePolicyProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RestorePolicyProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *RestorePolicyProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RestorePolicyProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RestorePolicyProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		properties.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		properties.Enabled = &enabled
	}

	// Set property ‘LastEnabledTime’:
	if typedInput.LastEnabledTime != nil {
		lastEnabledTime := *typedInput.LastEnabledTime
		properties.LastEnabledTime = &lastEnabledTime
	}

	// Set property ‘MinRestoreTime’:
	if typedInput.MinRestoreTime != nil {
		minRestoreTime := *typedInput.MinRestoreTime
		properties.MinRestoreTime = &minRestoreTime
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromRestorePolicyProperties_STATUS populates our RestorePolicyProperties_STATUS from the provided source RestorePolicyProperties_STATUS
func (properties *RestorePolicyProperties_STATUS) AssignPropertiesFromRestorePolicyProperties_STATUS(source *v20210401s.RestorePolicyProperties_STATUS) error {
=======
// AssignProperties_From_RestorePolicyProperties_STATUS populates our RestorePolicyProperties_STATUS from the provided source RestorePolicyProperties_STATUS
func (properties *RestorePolicyProperties_STATUS) AssignProperties_From_RestorePolicyProperties_STATUS(source *v20210401s.RestorePolicyProperties_STATUS) error {
>>>>>>> main

	// Days
	properties.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		properties.Enabled = &enabled
	} else {
		properties.Enabled = nil
	}

	// LastEnabledTime
	properties.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// MinRestoreTime
	properties.MinRestoreTime = genruntime.ClonePointerToString(source.MinRestoreTime)

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToRestorePolicyProperties_STATUS populates the provided destination RestorePolicyProperties_STATUS from our RestorePolicyProperties_STATUS
func (properties *RestorePolicyProperties_STATUS) AssignPropertiesToRestorePolicyProperties_STATUS(destination *v20210401s.RestorePolicyProperties_STATUS) error {
=======
// AssignProperties_To_RestorePolicyProperties_STATUS populates the provided destination RestorePolicyProperties_STATUS from our RestorePolicyProperties_STATUS
func (properties *RestorePolicyProperties_STATUS) AssignProperties_To_RestorePolicyProperties_STATUS(destination *v20210401s.RestorePolicyProperties_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(properties.Days)

	// Enabled
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(properties.LastEnabledTime)

	// MinRestoreTime
	destination.MinRestoreTime = genruntime.ClonePointerToString(properties.MinRestoreTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRule struct {
	// +kubebuilder:validation:Required
	// AllowedHeaders: Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin
	// request.
	AllowedHeaders []string `json:"allowedHeaders,omitempty"`

	// +kubebuilder:validation:Required
	// AllowedMethods: Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the
	// origin.
	AllowedMethods []CorsRule_AllowedMethods `json:"allowedMethods,omitempty"`

	// +kubebuilder:validation:Required
	// AllowedOrigins: Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*"
	// to allow all domains
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`

	// +kubebuilder:validation:Required
	// ExposedHeaders: Required if CorsRule element is present. A list of response headers to expose to CORS clients.
	ExposedHeaders []string `json:"exposedHeaders,omitempty"`

	// +kubebuilder:validation:Required
	// MaxAgeInSeconds: Required if CorsRule element is present. The number of seconds that the client/browser should cache a
	// preflight response.
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.ARMTransformer = &CorsRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *CorsRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &CorsRuleARM{}

	// Set property ‘AllowedHeaders’:
	for _, item := range rule.AllowedHeaders {
		result.AllowedHeaders = append(result.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range rule.AllowedMethods {
		result.AllowedMethods = append(result.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range rule.AllowedOrigins {
		result.AllowedOrigins = append(result.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range rule.ExposedHeaders {
		result.ExposedHeaders = append(result.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	if rule.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *rule.MaxAgeInSeconds
		result.MaxAgeInSeconds = &maxAgeInSeconds
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *CorsRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *CorsRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRuleARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	for _, item := range typedInput.AllowedHeaders {
		rule.AllowedHeaders = append(rule.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range typedInput.AllowedMethods {
		rule.AllowedMethods = append(rule.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		rule.AllowedOrigins = append(rule.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range typedInput.ExposedHeaders {
		rule.ExposedHeaders = append(rule.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		rule.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

// AssignProperties_From_CorsRule populates our CorsRule from the provided source CorsRule
func (rule *CorsRule) AssignProperties_From_CorsRule(source *v20210401s.CorsRule) error {

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	if source.AllowedMethods != nil {
		allowedMethodList := make([]CorsRule_AllowedMethods, len(source.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range source.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = CorsRule_AllowedMethods(allowedMethodItem)
		}
		rule.AllowedMethods = allowedMethodList
	} else {
		rule.AllowedMethods = nil
	}

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.ClonePointerToInt(source.MaxAgeInSeconds)

	// No error
	return nil
}

// AssignProperties_To_CorsRule populates the provided destination CorsRule from our CorsRule
func (rule *CorsRule) AssignProperties_To_CorsRule(destination *v20210401s.CorsRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	if rule.AllowedMethods != nil {
		allowedMethodList := make([]string, len(rule.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range rule.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = string(allowedMethodItem)
		}
		destination.AllowedMethods = allowedMethodList
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	destination.MaxAgeInSeconds = genruntime.ClonePointerToInt(rule.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRule_STATUS struct {
	// AllowedHeaders: Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin
	// request.
	AllowedHeaders []string `json:"allowedHeaders,omitempty"`

	// AllowedMethods: Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the
	// origin.
<<<<<<< HEAD
	AllowedMethods []CorsRule_AllowedMethods_STATUS `json:"allowedMethods,omitempty"`
=======
	AllowedMethods []CorsRule_STATUS_AllowedMethods `json:"allowedMethods,omitempty"`
>>>>>>> main

	// AllowedOrigins: Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*"
	// to allow all domains
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`

	// ExposedHeaders: Required if CorsRule element is present. A list of response headers to expose to CORS clients.
	ExposedHeaders []string `json:"exposedHeaders,omitempty"`

	// MaxAgeInSeconds: Required if CorsRule element is present. The number of seconds that the client/browser should cache a
	// preflight response.
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.FromARMConverter = &CorsRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *CorsRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRule_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *CorsRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRule_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRule_STATUSARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	for _, item := range typedInput.AllowedHeaders {
		rule.AllowedHeaders = append(rule.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range typedInput.AllowedMethods {
		rule.AllowedMethods = append(rule.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		rule.AllowedOrigins = append(rule.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range typedInput.ExposedHeaders {
		rule.ExposedHeaders = append(rule.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		rule.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromCorsRule_STATUS populates our CorsRule_STATUS from the provided source CorsRule_STATUS
func (rule *CorsRule_STATUS) AssignPropertiesFromCorsRule_STATUS(source *v20210401s.CorsRule_STATUS) error {
=======
// AssignProperties_From_CorsRule_STATUS populates our CorsRule_STATUS from the provided source CorsRule_STATUS
func (rule *CorsRule_STATUS) AssignProperties_From_CorsRule_STATUS(source *v20210401s.CorsRule_STATUS) error {
>>>>>>> main

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	if source.AllowedMethods != nil {
<<<<<<< HEAD
		allowedMethodList := make([]CorsRule_AllowedMethods_STATUS, len(source.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range source.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = CorsRule_AllowedMethods_STATUS(allowedMethodItem)
=======
		allowedMethodList := make([]CorsRule_STATUS_AllowedMethods, len(source.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range source.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = CorsRule_STATUS_AllowedMethods(allowedMethodItem)
>>>>>>> main
		}
		rule.AllowedMethods = allowedMethodList
	} else {
		rule.AllowedMethods = nil
	}

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.ClonePointerToInt(source.MaxAgeInSeconds)

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToCorsRule_STATUS populates the provided destination CorsRule_STATUS from our CorsRule_STATUS
func (rule *CorsRule_STATUS) AssignPropertiesToCorsRule_STATUS(destination *v20210401s.CorsRule_STATUS) error {
=======
// AssignProperties_To_CorsRule_STATUS populates the provided destination CorsRule_STATUS from our CorsRule_STATUS
func (rule *CorsRule_STATUS) AssignProperties_To_CorsRule_STATUS(destination *v20210401s.CorsRule_STATUS) error {
>>>>>>> main
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	if rule.AllowedMethods != nil {
		allowedMethodList := make([]string, len(rule.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range rule.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = string(allowedMethodItem)
		}
		destination.AllowedMethods = allowedMethodList
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	destination.MaxAgeInSeconds = genruntime.ClonePointerToInt(rule.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AccessTimeTracking"}
type LastAccessTimeTrackingPolicy_Name string

const LastAccessTimeTrackingPolicy_Name_AccessTimeTracking = LastAccessTimeTrackingPolicy_Name("AccessTimeTracking")
<<<<<<< HEAD

type LastAccessTimeTrackingPolicy_Name_STATUS string

const LastAccessTimeTrackingPolicy_Name_AccessTimeTracking_STATUS = LastAccessTimeTrackingPolicy_Name_STATUS("AccessTimeTracking")
=======
>>>>>>> main

// +kubebuilder:validation:Enum={"DELETE","GET","HEAD","MERGE","OPTIONS","POST","PUT"}
type CorsRule_AllowedMethods string

const (
	CorsRule_AllowedMethods_DELETE  = CorsRule_AllowedMethods("DELETE")
	CorsRule_AllowedMethods_GET     = CorsRule_AllowedMethods("GET")
	CorsRule_AllowedMethods_HEAD    = CorsRule_AllowedMethods("HEAD")
	CorsRule_AllowedMethods_MERGE   = CorsRule_AllowedMethods("MERGE")
	CorsRule_AllowedMethods_OPTIONS = CorsRule_AllowedMethods("OPTIONS")
	CorsRule_AllowedMethods_POST    = CorsRule_AllowedMethods("POST")
	CorsRule_AllowedMethods_PUT     = CorsRule_AllowedMethods("PUT")
<<<<<<< HEAD
)

type CorsRule_AllowedMethods_STATUS string

const (
	CorsRule_AllowedMethods_DELETE_STATUS  = CorsRule_AllowedMethods_STATUS("DELETE")
	CorsRule_AllowedMethods_GET_STATUS     = CorsRule_AllowedMethods_STATUS("GET")
	CorsRule_AllowedMethods_HEAD_STATUS    = CorsRule_AllowedMethods_STATUS("HEAD")
	CorsRule_AllowedMethods_MERGE_STATUS   = CorsRule_AllowedMethods_STATUS("MERGE")
	CorsRule_AllowedMethods_OPTIONS_STATUS = CorsRule_AllowedMethods_STATUS("OPTIONS")
	CorsRule_AllowedMethods_POST_STATUS    = CorsRule_AllowedMethods_STATUS("POST")
	CorsRule_AllowedMethods_PUT_STATUS     = CorsRule_AllowedMethods_STATUS("PUT")
=======
>>>>>>> main
)

func init() {
	SchemeBuilder.Register(&StorageAccountsBlobService{}, &StorageAccountsBlobServiceList{})
}
