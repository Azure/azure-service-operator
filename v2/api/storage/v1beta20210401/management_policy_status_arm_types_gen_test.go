// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagementPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicy_STATUSARM, ManagementPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicy_STATUSARM runs a test to see if a specific instance of ManagementPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicy_STATUSARM(subject ManagementPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicy_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicy_STATUSARMGenerator()
var managementPolicy_STATUSARMGenerator gopter.Gen

// ManagementPolicy_STATUSARMGenerator returns a generator of ManagementPolicy_STATUSARM instances for property testing.
// We first initialize managementPolicy_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicy_STATUSARMGenerator() gopter.Gen {
	if managementPolicy_STATUSARMGenerator != nil {
		return managementPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicy_STATUSARM(generators)
	managementPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicy_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicy_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicy_STATUSARM(generators)
	managementPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicy_STATUSARM{}), generators)

	return managementPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicy_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagementPolicyProperties_STATUSARMGenerator())
}

func Test_ManagementPolicyProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyProperties_STATUSARM, ManagementPolicyProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyProperties_STATUSARM runs a test to see if a specific instance of ManagementPolicyProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyProperties_STATUSARM(subject ManagementPolicyProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyProperties_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyProperties_STATUSARMGenerator()
var managementPolicyProperties_STATUSARMGenerator gopter.Gen

// ManagementPolicyProperties_STATUSARMGenerator returns a generator of ManagementPolicyProperties_STATUSARM instances for property testing.
// We first initialize managementPolicyProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyProperties_STATUSARMGenerator() gopter.Gen {
	if managementPolicyProperties_STATUSARMGenerator != nil {
		return managementPolicyProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyProperties_STATUSARM(generators)
	managementPolicyProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyProperties_STATUSARM(generators)
	managementPolicyProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyProperties_STATUSARM{}), generators)

	return managementPolicyProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicyProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Policy"] = gen.PtrOf(ManagementPolicySchema_STATUSARMGenerator())
}

func Test_ManagementPolicySchema_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySchema_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySchema_STATUSARM, ManagementPolicySchema_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySchema_STATUSARM runs a test to see if a specific instance of ManagementPolicySchema_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySchema_STATUSARM(subject ManagementPolicySchema_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySchema_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySchema_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicySchema_STATUSARMGenerator()
var managementPolicySchema_STATUSARMGenerator gopter.Gen

// ManagementPolicySchema_STATUSARMGenerator returns a generator of ManagementPolicySchema_STATUSARM instances for property testing.
func ManagementPolicySchema_STATUSARMGenerator() gopter.Gen {
	if managementPolicySchema_STATUSARMGenerator != nil {
		return managementPolicySchema_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySchema_STATUSARM(generators)
	managementPolicySchema_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySchema_STATUSARM{}), generators)

	return managementPolicySchema_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySchema_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySchema_STATUSARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(ManagementPolicyRule_STATUSARMGenerator())
}

func Test_ManagementPolicyRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyRule_STATUSARM, ManagementPolicyRule_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyRule_STATUSARM runs a test to see if a specific instance of ManagementPolicyRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyRule_STATUSARM(subject ManagementPolicyRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyRule_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyRule_STATUSARMGenerator()
var managementPolicyRule_STATUSARMGenerator gopter.Gen

// ManagementPolicyRule_STATUSARMGenerator returns a generator of ManagementPolicyRule_STATUSARM instances for property testing.
// We first initialize managementPolicyRule_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyRule_STATUSARMGenerator() gopter.Gen {
	if managementPolicyRule_STATUSARMGenerator != nil {
		return managementPolicyRule_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRule_STATUSARM(generators)
	managementPolicyRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRule_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyRule_STATUSARM(generators)
	managementPolicyRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule_STATUSARM{}), generators)

	return managementPolicyRule_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyRule_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagementPolicyRule_STATUS_Type_Lifecycle))
}

// AddRelatedPropertyGeneratorsForManagementPolicyRule_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Definition"] = gen.PtrOf(ManagementPolicyDefinition_STATUSARMGenerator())
}

func Test_ManagementPolicyDefinition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyDefinition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyDefinition_STATUSARM, ManagementPolicyDefinition_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyDefinition_STATUSARM runs a test to see if a specific instance of ManagementPolicyDefinition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyDefinition_STATUSARM(subject ManagementPolicyDefinition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyDefinition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyDefinition_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyDefinition_STATUSARMGenerator()
var managementPolicyDefinition_STATUSARMGenerator gopter.Gen

// ManagementPolicyDefinition_STATUSARMGenerator returns a generator of ManagementPolicyDefinition_STATUSARM instances for property testing.
func ManagementPolicyDefinition_STATUSARMGenerator() gopter.Gen {
	if managementPolicyDefinition_STATUSARMGenerator != nil {
		return managementPolicyDefinition_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyDefinition_STATUSARM(generators)
	managementPolicyDefinition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyDefinition_STATUSARM{}), generators)

	return managementPolicyDefinition_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyDefinition_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyDefinition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.PtrOf(ManagementPolicyAction_STATUSARMGenerator())
	gens["Filters"] = gen.PtrOf(ManagementPolicyFilter_STATUSARMGenerator())
}

func Test_ManagementPolicyAction_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyAction_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyAction_STATUSARM, ManagementPolicyAction_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyAction_STATUSARM runs a test to see if a specific instance of ManagementPolicyAction_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyAction_STATUSARM(subject ManagementPolicyAction_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyAction_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyAction_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyAction_STATUSARMGenerator()
var managementPolicyAction_STATUSARMGenerator gopter.Gen

// ManagementPolicyAction_STATUSARMGenerator returns a generator of ManagementPolicyAction_STATUSARM instances for property testing.
func ManagementPolicyAction_STATUSARMGenerator() gopter.Gen {
	if managementPolicyAction_STATUSARMGenerator != nil {
		return managementPolicyAction_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyAction_STATUSARM(generators)
	managementPolicyAction_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyAction_STATUSARM{}), generators)

	return managementPolicyAction_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyAction_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyAction_STATUSARM(gens map[string]gopter.Gen) {
	gens["BaseBlob"] = gen.PtrOf(ManagementPolicyBaseBlob_STATUSARMGenerator())
	gens["Snapshot"] = gen.PtrOf(ManagementPolicySnapShot_STATUSARMGenerator())
	gens["Version"] = gen.PtrOf(ManagementPolicyVersion_STATUSARMGenerator())
}

func Test_ManagementPolicyFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyFilter_STATUSARM, ManagementPolicyFilter_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyFilter_STATUSARM runs a test to see if a specific instance of ManagementPolicyFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyFilter_STATUSARM(subject ManagementPolicyFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyFilter_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyFilter_STATUSARMGenerator()
var managementPolicyFilter_STATUSARMGenerator gopter.Gen

// ManagementPolicyFilter_STATUSARMGenerator returns a generator of ManagementPolicyFilter_STATUSARM instances for property testing.
// We first initialize managementPolicyFilter_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyFilter_STATUSARMGenerator() gopter.Gen {
	if managementPolicyFilter_STATUSARMGenerator != nil {
		return managementPolicyFilter_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilter_STATUSARM(generators)
	managementPolicyFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilter_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyFilter_STATUSARM(generators)
	managementPolicyFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter_STATUSARM{}), generators)

	return managementPolicyFilter_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyFilter_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["BlobTypes"] = gen.SliceOf(gen.AlphaString())
	gens["PrefixMatch"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicyFilter_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["BlobIndexMatch"] = gen.SliceOf(TagFilter_STATUSARMGenerator())
}

func Test_ManagementPolicyBaseBlob_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyBaseBlob_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyBaseBlob_STATUSARM, ManagementPolicyBaseBlob_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyBaseBlob_STATUSARM runs a test to see if a specific instance of ManagementPolicyBaseBlob_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyBaseBlob_STATUSARM(subject ManagementPolicyBaseBlob_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyBaseBlob_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyBaseBlob_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyBaseBlob_STATUSARMGenerator()
var managementPolicyBaseBlob_STATUSARMGenerator gopter.Gen

// ManagementPolicyBaseBlob_STATUSARMGenerator returns a generator of ManagementPolicyBaseBlob_STATUSARM instances for property testing.
// We first initialize managementPolicyBaseBlob_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyBaseBlob_STATUSARMGenerator() gopter.Gen {
	if managementPolicyBaseBlob_STATUSARMGenerator != nil {
		return managementPolicyBaseBlob_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob_STATUSARM(generators)
	managementPolicyBaseBlob_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyBaseBlob_STATUSARM(generators)
	managementPolicyBaseBlob_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob_STATUSARM{}), generators)

	return managementPolicyBaseBlob_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob_STATUSARM(gens map[string]gopter.Gen) {
	gens["EnableAutoTierToHotFromCool"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagementPolicyBaseBlob_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyBaseBlob_STATUSARM(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterModification_STATUSARMGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterModification_STATUSARMGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterModification_STATUSARMGenerator())
}

func Test_ManagementPolicySnapShot_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySnapShot_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySnapShot_STATUSARM, ManagementPolicySnapShot_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySnapShot_STATUSARM runs a test to see if a specific instance of ManagementPolicySnapShot_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySnapShot_STATUSARM(subject ManagementPolicySnapShot_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySnapShot_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySnapShot_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicySnapShot_STATUSARMGenerator()
var managementPolicySnapShot_STATUSARMGenerator gopter.Gen

// ManagementPolicySnapShot_STATUSARMGenerator returns a generator of ManagementPolicySnapShot_STATUSARM instances for property testing.
func ManagementPolicySnapShot_STATUSARMGenerator() gopter.Gen {
	if managementPolicySnapShot_STATUSARMGenerator != nil {
		return managementPolicySnapShot_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySnapShot_STATUSARM(generators)
	managementPolicySnapShot_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySnapShot_STATUSARM{}), generators)

	return managementPolicySnapShot_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySnapShot_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySnapShot_STATUSARM(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreation_STATUSARMGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreation_STATUSARMGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreation_STATUSARMGenerator())
}

func Test_ManagementPolicyVersion_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyVersion_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyVersion_STATUSARM, ManagementPolicyVersion_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyVersion_STATUSARM runs a test to see if a specific instance of ManagementPolicyVersion_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyVersion_STATUSARM(subject ManagementPolicyVersion_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyVersion_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyVersion_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyVersion_STATUSARMGenerator()
var managementPolicyVersion_STATUSARMGenerator gopter.Gen

// ManagementPolicyVersion_STATUSARMGenerator returns a generator of ManagementPolicyVersion_STATUSARM instances for property testing.
func ManagementPolicyVersion_STATUSARMGenerator() gopter.Gen {
	if managementPolicyVersion_STATUSARMGenerator != nil {
		return managementPolicyVersion_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyVersion_STATUSARM(generators)
	managementPolicyVersion_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyVersion_STATUSARM{}), generators)

	return managementPolicyVersion_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyVersion_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyVersion_STATUSARM(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreation_STATUSARMGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreation_STATUSARMGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreation_STATUSARMGenerator())
}

func Test_TagFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TagFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTagFilter_STATUSARM, TagFilter_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTagFilter_STATUSARM runs a test to see if a specific instance of TagFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTagFilter_STATUSARM(subject TagFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TagFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TagFilter_STATUSARM instances for property testing - lazily instantiated by
// TagFilter_STATUSARMGenerator()
var tagFilter_STATUSARMGenerator gopter.Gen

// TagFilter_STATUSARMGenerator returns a generator of TagFilter_STATUSARM instances for property testing.
func TagFilter_STATUSARMGenerator() gopter.Gen {
	if tagFilter_STATUSARMGenerator != nil {
		return tagFilter_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTagFilter_STATUSARM(generators)
	tagFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(TagFilter_STATUSARM{}), generators)

	return tagFilter_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTagFilter_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTagFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Op"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_DateAfterCreation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterCreation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterCreation_STATUSARM, DateAfterCreation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterCreation_STATUSARM runs a test to see if a specific instance of DateAfterCreation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterCreation_STATUSARM(subject DateAfterCreation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterCreation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterCreation_STATUSARM instances for property testing - lazily instantiated by
// DateAfterCreation_STATUSARMGenerator()
var dateAfterCreation_STATUSARMGenerator gopter.Gen

// DateAfterCreation_STATUSARMGenerator returns a generator of DateAfterCreation_STATUSARM instances for property testing.
func DateAfterCreation_STATUSARMGenerator() gopter.Gen {
	if dateAfterCreation_STATUSARMGenerator != nil {
		return dateAfterCreation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterCreation_STATUSARM(generators)
	dateAfterCreation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DateAfterCreation_STATUSARM{}), generators)

	return dateAfterCreation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterCreation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterCreation_STATUSARM(gens map[string]gopter.Gen) {
	gens["DaysAfterCreationGreaterThan"] = gen.PtrOf(gen.Float64())
}

func Test_DateAfterModification_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterModification_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterModification_STATUSARM, DateAfterModification_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterModification_STATUSARM runs a test to see if a specific instance of DateAfterModification_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterModification_STATUSARM(subject DateAfterModification_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterModification_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterModification_STATUSARM instances for property testing - lazily instantiated by
// DateAfterModification_STATUSARMGenerator()
var dateAfterModification_STATUSARMGenerator gopter.Gen

// DateAfterModification_STATUSARMGenerator returns a generator of DateAfterModification_STATUSARM instances for property testing.
func DateAfterModification_STATUSARMGenerator() gopter.Gen {
	if dateAfterModification_STATUSARMGenerator != nil {
		return dateAfterModification_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterModification_STATUSARM(generators)
	dateAfterModification_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DateAfterModification_STATUSARM{}), generators)

	return dateAfterModification_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterModification_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterModification_STATUSARM(gens map[string]gopter.Gen) {
	gens["DaysAfterLastAccessTimeGreaterThan"] = gen.PtrOf(gen.Float64())
	gens["DaysAfterModificationGreaterThan"] = gen.PtrOf(gen.Float64())
}
