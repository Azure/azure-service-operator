// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
type StorageAccountsBlobServicesContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccountsBlobServicesContainers_SPEC `json:"spec,omitempty"`
	Status            BlobContainer_Status                       `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsBlobServicesContainer{}

// GetConditions returns the conditions of the resource
func (container *StorageAccountsBlobServicesContainer) GetConditions() conditions.Conditions {
	return container.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (container *StorageAccountsBlobServicesContainer) SetConditions(conditions conditions.Conditions) {
	container.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsBlobServicesContainer{}

// ConvertFrom populates our StorageAccountsBlobServicesContainer from the provided hub StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210401storage.StorageAccountsBlobServicesContainer)
	if !ok {
		return fmt.Errorf("expected storage:storage/v1alpha1api20210401storage/StorageAccountsBlobServicesContainer but received %T instead", hub)
	}

	return container.AssignPropertiesFromStorageAccountsBlobServicesContainer(source)
}

// ConvertTo populates the provided hub StorageAccountsBlobServicesContainer from our StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210401storage.StorageAccountsBlobServicesContainer)
	if !ok {
		return fmt.Errorf("expected storage:storage/v1alpha1api20210401storage/StorageAccountsBlobServicesContainer but received %T instead", hub)
	}

	return container.AssignPropertiesToStorageAccountsBlobServicesContainer(destination)
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservicescontainer,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservicescontainers,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccountsblobservicescontainers.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &StorageAccountsBlobServicesContainer{}

// Default applies defaults to the StorageAccountsBlobServicesContainer resource
func (container *StorageAccountsBlobServicesContainer) Default() {
	container.defaultImpl()
	var temp interface{} = container
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (container *StorageAccountsBlobServicesContainer) defaultAzureName() {
	if container.Spec.AzureName == "" {
		container.Spec.AzureName = container.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsBlobServicesContainer resource
func (container *StorageAccountsBlobServicesContainer) defaultImpl() { container.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccountsBlobServicesContainer{}

// AzureName returns the Azure name of the resource
func (container *StorageAccountsBlobServicesContainer) AzureName() string {
	return container.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (container StorageAccountsBlobServicesContainer) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (container *StorageAccountsBlobServicesContainer) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (container *StorageAccountsBlobServicesContainer) GetSpec() genruntime.ConvertibleSpec {
	return &container.Spec
}

// GetStatus returns the status of this resource
func (container *StorageAccountsBlobServicesContainer) GetStatus() genruntime.ConvertibleStatus {
	return &container.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (container *StorageAccountsBlobServicesContainer) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (container *StorageAccountsBlobServicesContainer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BlobContainer_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (container *StorageAccountsBlobServicesContainer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(container.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  container.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (container *StorageAccountsBlobServicesContainer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BlobContainer_Status); ok {
		container.Status = *st
		return nil
	}

	// Convert status to required version
	var st BlobContainer_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	container.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservicescontainer,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservicescontainers,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccountsblobservicescontainers.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &StorageAccountsBlobServicesContainer{}

// ValidateCreate validates the creation of the resource
func (container *StorageAccountsBlobServicesContainer) ValidateCreate() error {
	validations := container.createValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (container *StorageAccountsBlobServicesContainer) ValidateDelete() error {
	validations := container.deleteValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (container *StorageAccountsBlobServicesContainer) ValidateUpdate(old runtime.Object) error {
	validations := container.updateValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (container *StorageAccountsBlobServicesContainer) createValidations() []func() error {
	return []func() error{container.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (container *StorageAccountsBlobServicesContainer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (container *StorageAccountsBlobServicesContainer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return container.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (container *StorageAccountsBlobServicesContainer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&container.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromStorageAccountsBlobServicesContainer populates our StorageAccountsBlobServicesContainer from the provided source StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) AssignPropertiesFromStorageAccountsBlobServicesContainer(source *v1alpha1api20210401storage.StorageAccountsBlobServicesContainer) error {

	// ObjectMeta
	container.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccountsBlobServicesContainers_SPEC
	err := spec.AssignPropertiesFromStorageAccountsBlobServicesContainersSPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsBlobServicesContainersSPEC() to populate field Spec")
	}
	container.Spec = spec

	// Status
	var status BlobContainer_Status
	err = status.AssignPropertiesFromBlobContainerStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBlobContainerStatus() to populate field Status")
	}
	container.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobServicesContainer populates the provided destination StorageAccountsBlobServicesContainer from our StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) AssignPropertiesToStorageAccountsBlobServicesContainer(destination *v1alpha1api20210401storage.StorageAccountsBlobServicesContainer) error {

	// ObjectMeta
	destination.ObjectMeta = *container.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210401storage.StorageAccountsBlobServicesContainers_SPEC
	err := container.Spec.AssignPropertiesToStorageAccountsBlobServicesContainersSPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsBlobServicesContainersSPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210401storage.BlobContainer_Status
	err = container.Status.AssignPropertiesToBlobContainerStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBlobContainerStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (container *StorageAccountsBlobServicesContainer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: container.Spec.OriginalVersion(),
		Kind:    "StorageAccountsBlobServicesContainer",
	}
}

// +kubebuilder:object:root=true
type StorageAccountsBlobServicesContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsBlobServicesContainer `json:"items"`
}

type BlobContainer_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DefaultEncryptionScope: Default the container to use specified encryption scope
	//for all writes.
	DefaultEncryptionScope *string `json:"defaultEncryptionScope,omitempty"`

	//Deleted: Indicates whether the blob container was deleted.
	Deleted *bool `json:"deleted,omitempty"`

	//DeletedTime: Blob container deletion time.
	DeletedTime *string `json:"deletedTime,omitempty"`

	//DenyEncryptionScopeOverride: Block override of encryption scope from the
	//container default.
	DenyEncryptionScopeOverride *bool `json:"denyEncryptionScopeOverride,omitempty"`

	//Etag: Resource Etag.
	Etag *string `json:"etag,omitempty"`

	//HasImmutabilityPolicy: The hasImmutabilityPolicy public property is set to true
	//by SRP if ImmutabilityPolicy has been created for this container. The
	//hasImmutabilityPolicy public property is set to false by SRP if
	//ImmutabilityPolicy has not been created for this container.
	HasImmutabilityPolicy *bool `json:"hasImmutabilityPolicy,omitempty"`

	//HasLegalHold: The hasLegalHold public property is set to true by SRP if there
	//are at least one existing tag. The hasLegalHold public property is set to false
	//by SRP if all existing legal hold tags are cleared out. There can be a maximum
	//of 1000 blob containers with hasLegalHold=true for a given account.
	HasLegalHold *bool `json:"hasLegalHold,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//ImmutabilityPolicy: The ImmutabilityPolicy property of the container.
	ImmutabilityPolicy *ImmutabilityPolicyProperties_Status `json:"immutabilityPolicy,omitempty"`

	//ImmutableStorageWithVersioning: The object level immutability property of the
	//container. The property is immutable and can only be set to true at the
	//container creation time. Existing containers must undergo a migration process.
	ImmutableStorageWithVersioning *ImmutableStorageWithVersioning_Status `json:"immutableStorageWithVersioning,omitempty"`

	//LastModifiedTime: Returns the date and time the container was last modified.
	LastModifiedTime *string `json:"lastModifiedTime,omitempty"`

	//LeaseDuration: Specifies whether the lease on a container is of infinite or
	//fixed duration, only when the container is leased.
	LeaseDuration *ContainerPropertiesStatusLeaseDuration `json:"leaseDuration,omitempty"`

	//LeaseState: Lease state of the container.
	LeaseState *ContainerPropertiesStatusLeaseState `json:"leaseState,omitempty"`

	//LeaseStatus: The lease status of the container.
	LeaseStatus *ContainerPropertiesStatusLeaseStatus `json:"leaseStatus,omitempty"`

	//LegalHold: The LegalHold property of the container.
	LegalHold *LegalHoldProperties_Status `json:"legalHold,omitempty"`

	//Metadata: A name-value pair to associate with the container as metadata.
	Metadata map[string]string `json:"metadata,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//PublicAccess: Specifies whether data in the container may be accessed publicly
	//and the level of access.
	PublicAccess *ContainerPropertiesStatusPublicAccess `json:"publicAccess,omitempty"`

	//RemainingRetentionDays: Remaining retention days for soft deleted blob container.
	RemainingRetentionDays *int `json:"remainingRetentionDays,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	//Version: The version of the deleted blob container.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BlobContainer_Status{}

// ConvertStatusFrom populates our BlobContainer_Status from the provided source
func (container *BlobContainer_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210401storage.BlobContainer_Status)
	if ok {
		// Populate our instance from source
		return container.AssignPropertiesFromBlobContainerStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.BlobContainer_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = container.AssignPropertiesFromBlobContainerStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BlobContainer_Status
func (container *BlobContainer_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210401storage.BlobContainer_Status)
	if ok {
		// Populate destination from our instance
		return container.AssignPropertiesToBlobContainerStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.BlobContainer_Status{}
	err := container.AssignPropertiesToBlobContainerStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &BlobContainer_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (container *BlobContainer_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobContainer_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (container *BlobContainer_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobContainer_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobContainer_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DefaultEncryptionScope’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultEncryptionScope != nil {
			defaultEncryptionScope := *typedInput.Properties.DefaultEncryptionScope
			container.DefaultEncryptionScope = &defaultEncryptionScope
		}
	}

	// Set property ‘Deleted’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Deleted != nil {
			deleted := *typedInput.Properties.Deleted
			container.Deleted = &deleted
		}
	}

	// Set property ‘DeletedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeletedTime != nil {
			deletedTime := *typedInput.Properties.DeletedTime
			container.DeletedTime = &deletedTime
		}
	}

	// Set property ‘DenyEncryptionScopeOverride’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DenyEncryptionScopeOverride != nil {
			denyEncryptionScopeOverride := *typedInput.Properties.DenyEncryptionScopeOverride
			container.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		container.Etag = &etag
	}

	// Set property ‘HasImmutabilityPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HasImmutabilityPolicy != nil {
			hasImmutabilityPolicy := *typedInput.Properties.HasImmutabilityPolicy
			container.HasImmutabilityPolicy = &hasImmutabilityPolicy
		}
	}

	// Set property ‘HasLegalHold’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HasLegalHold != nil {
			hasLegalHold := *typedInput.Properties.HasLegalHold
			container.HasLegalHold = &hasLegalHold
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		container.Id = &id
	}

	// Set property ‘ImmutabilityPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutabilityPolicy != nil {
			var immutabilityPolicy1 ImmutabilityPolicyProperties_Status
			err := immutabilityPolicy1.PopulateFromARM(owner, *typedInput.Properties.ImmutabilityPolicy)
			if err != nil {
				return err
			}
			immutabilityPolicy := immutabilityPolicy1
			container.ImmutabilityPolicy = &immutabilityPolicy
		}
	}

	// Set property ‘ImmutableStorageWithVersioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutableStorageWithVersioning != nil {
			var immutableStorageWithVersioning1 ImmutableStorageWithVersioning_Status
			err := immutableStorageWithVersioning1.PopulateFromARM(owner, *typedInput.Properties.ImmutableStorageWithVersioning)
			if err != nil {
				return err
			}
			immutableStorageWithVersioning := immutableStorageWithVersioning1
			container.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
		}
	}

	// Set property ‘LastModifiedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastModifiedTime != nil {
			lastModifiedTime := *typedInput.Properties.LastModifiedTime
			container.LastModifiedTime = &lastModifiedTime
		}
	}

	// Set property ‘LeaseDuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseDuration != nil {
			leaseDuration := *typedInput.Properties.LeaseDuration
			container.LeaseDuration = &leaseDuration
		}
	}

	// Set property ‘LeaseState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseState != nil {
			leaseState := *typedInput.Properties.LeaseState
			container.LeaseState = &leaseState
		}
	}

	// Set property ‘LeaseStatus’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseStatus != nil {
			leaseStatus := *typedInput.Properties.LeaseStatus
			container.LeaseStatus = &leaseStatus
		}
	}

	// Set property ‘LegalHold’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LegalHold != nil {
			var legalHold1 LegalHoldProperties_Status
			err := legalHold1.PopulateFromARM(owner, *typedInput.Properties.LegalHold)
			if err != nil {
				return err
			}
			legalHold := legalHold1
			container.LegalHold = &legalHold
		}
	}

	// Set property ‘Metadata’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			container.Metadata = make(map[string]string)
			for key, value := range typedInput.Properties.Metadata {
				container.Metadata[key] = value
			}
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		container.Name = &name
	}

	// Set property ‘PublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicAccess != nil {
			publicAccess := *typedInput.Properties.PublicAccess
			container.PublicAccess = &publicAccess
		}
	}

	// Set property ‘RemainingRetentionDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RemainingRetentionDays != nil {
			remainingRetentionDays := *typedInput.Properties.RemainingRetentionDays
			container.RemainingRetentionDays = &remainingRetentionDays
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		container.Type = &typeVar
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			container.Version = &version
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobContainerStatus populates our BlobContainer_Status from the provided source BlobContainer_Status
func (container *BlobContainer_Status) AssignPropertiesFromBlobContainerStatus(source *v1alpha1api20210401storage.BlobContainer_Status) error {

	// Conditions
	container.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DefaultEncryptionScope
	container.DefaultEncryptionScope = genruntime.ClonePointerToString(source.DefaultEncryptionScope)

	// Deleted
	if source.Deleted != nil {
		deleted := *source.Deleted
		container.Deleted = &deleted
	} else {
		container.Deleted = nil
	}

	// DeletedTime
	container.DeletedTime = genruntime.ClonePointerToString(source.DeletedTime)

	// DenyEncryptionScopeOverride
	if source.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *source.DenyEncryptionScopeOverride
		container.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		container.DenyEncryptionScopeOverride = nil
	}

	// Etag
	container.Etag = genruntime.ClonePointerToString(source.Etag)

	// HasImmutabilityPolicy
	if source.HasImmutabilityPolicy != nil {
		hasImmutabilityPolicy := *source.HasImmutabilityPolicy
		container.HasImmutabilityPolicy = &hasImmutabilityPolicy
	} else {
		container.HasImmutabilityPolicy = nil
	}

	// HasLegalHold
	if source.HasLegalHold != nil {
		hasLegalHold := *source.HasLegalHold
		container.HasLegalHold = &hasLegalHold
	} else {
		container.HasLegalHold = nil
	}

	// Id
	container.Id = genruntime.ClonePointerToString(source.Id)

	// ImmutabilityPolicy
	if source.ImmutabilityPolicy != nil {
		var immutabilityPolicy ImmutabilityPolicyProperties_Status
		err := immutabilityPolicy.AssignPropertiesFromImmutabilityPolicyPropertiesStatus(source.ImmutabilityPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImmutabilityPolicyPropertiesStatus() to populate field ImmutabilityPolicy")
		}
		container.ImmutabilityPolicy = &immutabilityPolicy
	} else {
		container.ImmutabilityPolicy = nil
	}

	// ImmutableStorageWithVersioning
	if source.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning ImmutableStorageWithVersioning_Status
		err := immutableStorageWithVersioning.AssignPropertiesFromImmutableStorageWithVersioningStatus(source.ImmutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImmutableStorageWithVersioningStatus() to populate field ImmutableStorageWithVersioning")
		}
		container.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		container.ImmutableStorageWithVersioning = nil
	}

	// LastModifiedTime
	container.LastModifiedTime = genruntime.ClonePointerToString(source.LastModifiedTime)

	// LeaseDuration
	if source.LeaseDuration != nil {
		leaseDuration := ContainerPropertiesStatusLeaseDuration(*source.LeaseDuration)
		container.LeaseDuration = &leaseDuration
	} else {
		container.LeaseDuration = nil
	}

	// LeaseState
	if source.LeaseState != nil {
		leaseState := ContainerPropertiesStatusLeaseState(*source.LeaseState)
		container.LeaseState = &leaseState
	} else {
		container.LeaseState = nil
	}

	// LeaseStatus
	if source.LeaseStatus != nil {
		leaseStatus := ContainerPropertiesStatusLeaseStatus(*source.LeaseStatus)
		container.LeaseStatus = &leaseStatus
	} else {
		container.LeaseStatus = nil
	}

	// LegalHold
	if source.LegalHold != nil {
		var legalHold LegalHoldProperties_Status
		err := legalHold.AssignPropertiesFromLegalHoldPropertiesStatus(source.LegalHold)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLegalHoldPropertiesStatus() to populate field LegalHold")
		}
		container.LegalHold = &legalHold
	} else {
		container.LegalHold = nil
	}

	// Metadata
	container.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Name
	container.Name = genruntime.ClonePointerToString(source.Name)

	// PublicAccess
	if source.PublicAccess != nil {
		publicAccess := ContainerPropertiesStatusPublicAccess(*source.PublicAccess)
		container.PublicAccess = &publicAccess
	} else {
		container.PublicAccess = nil
	}

	// RemainingRetentionDays
	container.RemainingRetentionDays = genruntime.ClonePointerToInt(source.RemainingRetentionDays)

	// Type
	container.Type = genruntime.ClonePointerToString(source.Type)

	// Version
	container.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToBlobContainerStatus populates the provided destination BlobContainer_Status from our BlobContainer_Status
func (container *BlobContainer_Status) AssignPropertiesToBlobContainerStatus(destination *v1alpha1api20210401storage.BlobContainer_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(container.Conditions)

	// DefaultEncryptionScope
	destination.DefaultEncryptionScope = genruntime.ClonePointerToString(container.DefaultEncryptionScope)

	// Deleted
	if container.Deleted != nil {
		deleted := *container.Deleted
		destination.Deleted = &deleted
	} else {
		destination.Deleted = nil
	}

	// DeletedTime
	destination.DeletedTime = genruntime.ClonePointerToString(container.DeletedTime)

	// DenyEncryptionScopeOverride
	if container.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *container.DenyEncryptionScopeOverride
		destination.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		destination.DenyEncryptionScopeOverride = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(container.Etag)

	// HasImmutabilityPolicy
	if container.HasImmutabilityPolicy != nil {
		hasImmutabilityPolicy := *container.HasImmutabilityPolicy
		destination.HasImmutabilityPolicy = &hasImmutabilityPolicy
	} else {
		destination.HasImmutabilityPolicy = nil
	}

	// HasLegalHold
	if container.HasLegalHold != nil {
		hasLegalHold := *container.HasLegalHold
		destination.HasLegalHold = &hasLegalHold
	} else {
		destination.HasLegalHold = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(container.Id)

	// ImmutabilityPolicy
	if container.ImmutabilityPolicy != nil {
		var immutabilityPolicy v1alpha1api20210401storage.ImmutabilityPolicyProperties_Status
		err := container.ImmutabilityPolicy.AssignPropertiesToImmutabilityPolicyPropertiesStatus(&immutabilityPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImmutabilityPolicyPropertiesStatus() to populate field ImmutabilityPolicy")
		}
		destination.ImmutabilityPolicy = &immutabilityPolicy
	} else {
		destination.ImmutabilityPolicy = nil
	}

	// ImmutableStorageWithVersioning
	if container.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning v1alpha1api20210401storage.ImmutableStorageWithVersioning_Status
		err := container.ImmutableStorageWithVersioning.AssignPropertiesToImmutableStorageWithVersioningStatus(&immutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImmutableStorageWithVersioningStatus() to populate field ImmutableStorageWithVersioning")
		}
		destination.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		destination.ImmutableStorageWithVersioning = nil
	}

	// LastModifiedTime
	destination.LastModifiedTime = genruntime.ClonePointerToString(container.LastModifiedTime)

	// LeaseDuration
	if container.LeaseDuration != nil {
		leaseDuration := string(*container.LeaseDuration)
		destination.LeaseDuration = &leaseDuration
	} else {
		destination.LeaseDuration = nil
	}

	// LeaseState
	if container.LeaseState != nil {
		leaseState := string(*container.LeaseState)
		destination.LeaseState = &leaseState
	} else {
		destination.LeaseState = nil
	}

	// LeaseStatus
	if container.LeaseStatus != nil {
		leaseStatus := string(*container.LeaseStatus)
		destination.LeaseStatus = &leaseStatus
	} else {
		destination.LeaseStatus = nil
	}

	// LegalHold
	if container.LegalHold != nil {
		var legalHold v1alpha1api20210401storage.LegalHoldProperties_Status
		err := container.LegalHold.AssignPropertiesToLegalHoldPropertiesStatus(&legalHold)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLegalHoldPropertiesStatus() to populate field LegalHold")
		}
		destination.LegalHold = &legalHold
	} else {
		destination.LegalHold = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(container.Metadata)

	// Name
	destination.Name = genruntime.ClonePointerToString(container.Name)

	// PublicAccess
	if container.PublicAccess != nil {
		publicAccess := string(*container.PublicAccess)
		destination.PublicAccess = &publicAccess
	} else {
		destination.PublicAccess = nil
	}

	// RemainingRetentionDays
	destination.RemainingRetentionDays = genruntime.ClonePointerToInt(container.RemainingRetentionDays)

	// Type
	destination.Type = genruntime.ClonePointerToString(container.Type)

	// Version
	destination.Version = genruntime.ClonePointerToString(container.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountsBlobServicesContainers_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DefaultEncryptionScope: Default the container to use specified encryption scope
	//for all writes.
	DefaultEncryptionScope *string `json:"defaultEncryptionScope,omitempty"`

	//DenyEncryptionScopeOverride: Block override of encryption scope from the
	//container default.
	DenyEncryptionScopeOverride *bool `json:"denyEncryptionScopeOverride,omitempty"`

	//ImmutableStorageWithVersioning: The object level immutability property of the
	//container. The property is immutable and can only be set to true at the
	//container creation time. Existing containers must undergo a migration process.
	ImmutableStorageWithVersioning *ImmutableStorageWithVersioning_Spec `json:"immutableStorageWithVersioning,omitempty"`

	//Metadata: A name-value pair to associate with the container as metadata.
	Metadata map[string]string `json:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicAccess: Specifies whether data in the container may be accessed publicly
	//and the level of access.
	PublicAccess *ContainerPropertiesSpecPublicAccess `json:"publicAccess,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccountsBlobServicesContainers_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *StorageAccountsBlobServicesContainers_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result StorageAccountsBlobServicesContainers_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.DefaultEncryptionScope != nil ||
		spec.DenyEncryptionScopeOverride != nil ||
		spec.ImmutableStorageWithVersioning != nil ||
		spec.Metadata != nil ||
		spec.PublicAccess != nil {
		result.Properties = &ContainerProperties_SpecARM{}
	}
	if spec.DefaultEncryptionScope != nil {
		defaultEncryptionScope := *spec.DefaultEncryptionScope
		result.Properties.DefaultEncryptionScope = &defaultEncryptionScope
	}
	if spec.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *spec.DenyEncryptionScopeOverride
		result.Properties.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	}
	if spec.ImmutableStorageWithVersioning != nil {
		immutableStorageWithVersioningARM, err := (*spec.ImmutableStorageWithVersioning).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		immutableStorageWithVersioning := immutableStorageWithVersioningARM.(ImmutableStorageWithVersioning_SpecARM)
		result.Properties.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	}
	if spec.Metadata != nil {
		result.Properties.Metadata = make(map[string]string)
		for key, value := range spec.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	if spec.PublicAccess != nil {
		publicAccess := *spec.PublicAccess
		result.Properties.PublicAccess = &publicAccess
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *StorageAccountsBlobServicesContainers_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsBlobServicesContainers_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *StorageAccountsBlobServicesContainers_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsBlobServicesContainers_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsBlobServicesContainers_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DefaultEncryptionScope’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultEncryptionScope != nil {
			defaultEncryptionScope := *typedInput.Properties.DefaultEncryptionScope
			spec.DefaultEncryptionScope = &defaultEncryptionScope
		}
	}

	// Set property ‘DenyEncryptionScopeOverride’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DenyEncryptionScopeOverride != nil {
			denyEncryptionScopeOverride := *typedInput.Properties.DenyEncryptionScopeOverride
			spec.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
		}
	}

	// Set property ‘ImmutableStorageWithVersioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutableStorageWithVersioning != nil {
			var immutableStorageWithVersioning1 ImmutableStorageWithVersioning_Spec
			err := immutableStorageWithVersioning1.PopulateFromARM(owner, *typedInput.Properties.ImmutableStorageWithVersioning)
			if err != nil {
				return err
			}
			immutableStorageWithVersioning := immutableStorageWithVersioning1
			spec.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
		}
	}

	// Set property ‘Metadata’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			spec.Metadata = make(map[string]string)
			for key, value := range typedInput.Properties.Metadata {
				spec.Metadata[key] = value
			}
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicAccess != nil {
			publicAccess := *typedInput.Properties.PublicAccess
			spec.PublicAccess = &publicAccess
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccountsBlobServicesContainers_SPEC{}

// ConvertSpecFrom populates our StorageAccountsBlobServicesContainers_SPEC from the provided source
func (spec *StorageAccountsBlobServicesContainers_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210401storage.StorageAccountsBlobServicesContainers_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromStorageAccountsBlobServicesContainersSPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.StorageAccountsBlobServicesContainers_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromStorageAccountsBlobServicesContainersSPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccountsBlobServicesContainers_SPEC
func (spec *StorageAccountsBlobServicesContainers_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210401storage.StorageAccountsBlobServicesContainers_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToStorageAccountsBlobServicesContainersSPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.StorageAccountsBlobServicesContainers_SPEC{}
	err := spec.AssignPropertiesToStorageAccountsBlobServicesContainersSPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsBlobServicesContainersSPEC populates our StorageAccountsBlobServicesContainers_SPEC from the provided source StorageAccountsBlobServicesContainers_SPEC
func (spec *StorageAccountsBlobServicesContainers_SPEC) AssignPropertiesFromStorageAccountsBlobServicesContainersSPEC(source *v1alpha1api20210401storage.StorageAccountsBlobServicesContainers_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// DefaultEncryptionScope
	spec.DefaultEncryptionScope = genruntime.ClonePointerToString(source.DefaultEncryptionScope)

	// DenyEncryptionScopeOverride
	if source.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *source.DenyEncryptionScopeOverride
		spec.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		spec.DenyEncryptionScopeOverride = nil
	}

	// ImmutableStorageWithVersioning
	if source.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning ImmutableStorageWithVersioning_Spec
		err := immutableStorageWithVersioning.AssignPropertiesFromImmutableStorageWithVersioningSpec(source.ImmutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImmutableStorageWithVersioningSpec() to populate field ImmutableStorageWithVersioning")
		}
		spec.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		spec.ImmutableStorageWithVersioning = nil
	}

	// Metadata
	spec.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Owner
	spec.Owner = source.Owner.Copy()

	// PublicAccess
	if source.PublicAccess != nil {
		publicAccess := ContainerPropertiesSpecPublicAccess(*source.PublicAccess)
		spec.PublicAccess = &publicAccess
	} else {
		spec.PublicAccess = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobServicesContainersSPEC populates the provided destination StorageAccountsBlobServicesContainers_SPEC from our StorageAccountsBlobServicesContainers_SPEC
func (spec *StorageAccountsBlobServicesContainers_SPEC) AssignPropertiesToStorageAccountsBlobServicesContainersSPEC(destination *v1alpha1api20210401storage.StorageAccountsBlobServicesContainers_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// DefaultEncryptionScope
	destination.DefaultEncryptionScope = genruntime.ClonePointerToString(spec.DefaultEncryptionScope)

	// DenyEncryptionScopeOverride
	if spec.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *spec.DenyEncryptionScopeOverride
		destination.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		destination.DenyEncryptionScopeOverride = nil
	}

	// ImmutableStorageWithVersioning
	if spec.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning v1alpha1api20210401storage.ImmutableStorageWithVersioning_Spec
		err := spec.ImmutableStorageWithVersioning.AssignPropertiesToImmutableStorageWithVersioningSpec(&immutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImmutableStorageWithVersioningSpec() to populate field ImmutableStorageWithVersioning")
		}
		destination.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		destination.ImmutableStorageWithVersioning = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(spec.Metadata)

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// PublicAccess
	if spec.PublicAccess != nil {
		publicAccess := string(*spec.PublicAccess)
		destination.PublicAccess = &publicAccess
	} else {
		destination.PublicAccess = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *StorageAccountsBlobServicesContainers_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *StorageAccountsBlobServicesContainers_SPEC) SetAzureName(azureName string) {
	spec.AzureName = azureName
}

// +kubebuilder:validation:Enum={"Blob","Container","None"}
type ContainerPropertiesSpecPublicAccess string

const (
	ContainerPropertiesSpecPublicAccessBlob      = ContainerPropertiesSpecPublicAccess("Blob")
	ContainerPropertiesSpecPublicAccessContainer = ContainerPropertiesSpecPublicAccess("Container")
	ContainerPropertiesSpecPublicAccessNone      = ContainerPropertiesSpecPublicAccess("None")
)

type ImmutabilityPolicyProperties_Status struct {
	//AllowProtectedAppendWrites: This property can only be changed for unlocked
	//time-based retention policies. When enabled, new blocks can be written to an
	//append blob while maintaining immutability protection and compliance. Only new
	//blocks can be added and any existing blocks cannot be modified or deleted. This
	//property cannot be changed with ExtendImmutabilityPolicy API
	AllowProtectedAppendWrites *bool `json:"allowProtectedAppendWrites,omitempty"`

	//Etag: ImmutabilityPolicy Etag.
	Etag *string `json:"etag,omitempty"`

	//ImmutabilityPeriodSinceCreationInDays: The immutability period for the blobs in
	//the container since the policy creation, in days.
	ImmutabilityPeriodSinceCreationInDays *int `json:"immutabilityPeriodSinceCreationInDays,omitempty"`

	//State: The ImmutabilityPolicy state of a blob container, possible values
	//include: Locked and Unlocked.
	State *ImmutabilityPolicyPropertyStatusState `json:"state,omitempty"`

	//UpdateHistory: The ImmutabilityPolicy update history of the blob container.
	UpdateHistory []UpdateHistoryProperty_Status `json:"updateHistory,omitempty"`
}

var _ genruntime.FromARMConverter = &ImmutabilityPolicyProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ImmutabilityPolicyProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImmutabilityPolicyProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ImmutabilityPolicyProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImmutabilityPolicyProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImmutabilityPolicyProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowProtectedAppendWrites’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowProtectedAppendWrites != nil {
			allowProtectedAppendWrites := *typedInput.Properties.AllowProtectedAppendWrites
			properties.AllowProtectedAppendWrites = &allowProtectedAppendWrites
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		properties.Etag = &etag
	}

	// Set property ‘ImmutabilityPeriodSinceCreationInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutabilityPeriodSinceCreationInDays != nil {
			immutabilityPeriodSinceCreationInDays := *typedInput.Properties.ImmutabilityPeriodSinceCreationInDays
			properties.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
		}
	}

	// Set property ‘State’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			properties.State = &state
		}
	}

	// Set property ‘UpdateHistory’:
	for _, item := range typedInput.UpdateHistory {
		var item1 UpdateHistoryProperty_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		properties.UpdateHistory = append(properties.UpdateHistory, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromImmutabilityPolicyPropertiesStatus populates our ImmutabilityPolicyProperties_Status from the provided source ImmutabilityPolicyProperties_Status
func (properties *ImmutabilityPolicyProperties_Status) AssignPropertiesFromImmutabilityPolicyPropertiesStatus(source *v1alpha1api20210401storage.ImmutabilityPolicyProperties_Status) error {

	// AllowProtectedAppendWrites
	if source.AllowProtectedAppendWrites != nil {
		allowProtectedAppendWrite := *source.AllowProtectedAppendWrites
		properties.AllowProtectedAppendWrites = &allowProtectedAppendWrite
	} else {
		properties.AllowProtectedAppendWrites = nil
	}

	// Etag
	properties.Etag = genruntime.ClonePointerToString(source.Etag)

	// ImmutabilityPeriodSinceCreationInDays
	properties.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(source.ImmutabilityPeriodSinceCreationInDays)

	// State
	if source.State != nil {
		state := ImmutabilityPolicyPropertyStatusState(*source.State)
		properties.State = &state
	} else {
		properties.State = nil
	}

	// UpdateHistory
	if source.UpdateHistory != nil {
		updateHistoryList := make([]UpdateHistoryProperty_Status, len(source.UpdateHistory))
		for updateHistoryIndex, updateHistoryItem := range source.UpdateHistory {
			// Shadow the loop variable to avoid aliasing
			updateHistoryItem := updateHistoryItem
			var updateHistory UpdateHistoryProperty_Status
			err := updateHistory.AssignPropertiesFromUpdateHistoryPropertyStatus(&updateHistoryItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUpdateHistoryPropertyStatus() to populate field UpdateHistory")
			}
			updateHistoryList[updateHistoryIndex] = updateHistory
		}
		properties.UpdateHistory = updateHistoryList
	} else {
		properties.UpdateHistory = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImmutabilityPolicyPropertiesStatus populates the provided destination ImmutabilityPolicyProperties_Status from our ImmutabilityPolicyProperties_Status
func (properties *ImmutabilityPolicyProperties_Status) AssignPropertiesToImmutabilityPolicyPropertiesStatus(destination *v1alpha1api20210401storage.ImmutabilityPolicyProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowProtectedAppendWrites
	if properties.AllowProtectedAppendWrites != nil {
		allowProtectedAppendWrite := *properties.AllowProtectedAppendWrites
		destination.AllowProtectedAppendWrites = &allowProtectedAppendWrite
	} else {
		destination.AllowProtectedAppendWrites = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(properties.Etag)

	// ImmutabilityPeriodSinceCreationInDays
	destination.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(properties.ImmutabilityPeriodSinceCreationInDays)

	// State
	if properties.State != nil {
		state := string(*properties.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// UpdateHistory
	if properties.UpdateHistory != nil {
		updateHistoryList := make([]v1alpha1api20210401storage.UpdateHistoryProperty_Status, len(properties.UpdateHistory))
		for updateHistoryIndex, updateHistoryItem := range properties.UpdateHistory {
			// Shadow the loop variable to avoid aliasing
			updateHistoryItem := updateHistoryItem
			var updateHistory v1alpha1api20210401storage.UpdateHistoryProperty_Status
			err := updateHistoryItem.AssignPropertiesToUpdateHistoryPropertyStatus(&updateHistory)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUpdateHistoryPropertyStatus() to populate field UpdateHistory")
			}
			updateHistoryList[updateHistoryIndex] = updateHistory
		}
		destination.UpdateHistory = updateHistoryList
	} else {
		destination.UpdateHistory = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ImmutableStorageWithVersioning_Spec struct {
	//Enabled: This is an immutable property, when set to true it enables object level
	//immutability at the container level.
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.ARMTransformer = &ImmutableStorageWithVersioning_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (versioning *ImmutableStorageWithVersioning_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if versioning == nil {
		return nil, nil
	}
	var result ImmutableStorageWithVersioning_SpecARM

	// Set property ‘Enabled’:
	if versioning.Enabled != nil {
		enabled := *versioning.Enabled
		result.Enabled = &enabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (versioning *ImmutableStorageWithVersioning_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImmutableStorageWithVersioning_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (versioning *ImmutableStorageWithVersioning_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImmutableStorageWithVersioning_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImmutableStorageWithVersioning_SpecARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		versioning.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignPropertiesFromImmutableStorageWithVersioningSpec populates our ImmutableStorageWithVersioning_Spec from the provided source ImmutableStorageWithVersioning_Spec
func (versioning *ImmutableStorageWithVersioning_Spec) AssignPropertiesFromImmutableStorageWithVersioningSpec(source *v1alpha1api20210401storage.ImmutableStorageWithVersioning_Spec) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		versioning.Enabled = &enabled
	} else {
		versioning.Enabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImmutableStorageWithVersioningSpec populates the provided destination ImmutableStorageWithVersioning_Spec from our ImmutableStorageWithVersioning_Spec
func (versioning *ImmutableStorageWithVersioning_Spec) AssignPropertiesToImmutableStorageWithVersioningSpec(destination *v1alpha1api20210401storage.ImmutableStorageWithVersioning_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if versioning.Enabled != nil {
		enabled := *versioning.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ImmutableStorageWithVersioning_Status struct {
	//Enabled: This is an immutable property, when set to true it enables object level
	//immutability at the container level.
	Enabled *bool `json:"enabled,omitempty"`

	//MigrationState: This property denotes the container level immutability to object
	//level immutability migration state.
	MigrationState *ImmutableStorageWithVersioningStatusMigrationState `json:"migrationState,omitempty"`

	//TimeStamp: Returns the date and time the object level immutability was enabled.
	TimeStamp *string `json:"timeStamp,omitempty"`
}

var _ genruntime.FromARMConverter = &ImmutableStorageWithVersioning_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (versioning *ImmutableStorageWithVersioning_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImmutableStorageWithVersioning_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (versioning *ImmutableStorageWithVersioning_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImmutableStorageWithVersioning_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImmutableStorageWithVersioning_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		versioning.Enabled = &enabled
	}

	// Set property ‘MigrationState’:
	if typedInput.MigrationState != nil {
		migrationState := *typedInput.MigrationState
		versioning.MigrationState = &migrationState
	}

	// Set property ‘TimeStamp’:
	if typedInput.TimeStamp != nil {
		timeStamp := *typedInput.TimeStamp
		versioning.TimeStamp = &timeStamp
	}

	// No error
	return nil
}

// AssignPropertiesFromImmutableStorageWithVersioningStatus populates our ImmutableStorageWithVersioning_Status from the provided source ImmutableStorageWithVersioning_Status
func (versioning *ImmutableStorageWithVersioning_Status) AssignPropertiesFromImmutableStorageWithVersioningStatus(source *v1alpha1api20210401storage.ImmutableStorageWithVersioning_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		versioning.Enabled = &enabled
	} else {
		versioning.Enabled = nil
	}

	// MigrationState
	if source.MigrationState != nil {
		migrationState := ImmutableStorageWithVersioningStatusMigrationState(*source.MigrationState)
		versioning.MigrationState = &migrationState
	} else {
		versioning.MigrationState = nil
	}

	// TimeStamp
	versioning.TimeStamp = genruntime.ClonePointerToString(source.TimeStamp)

	// No error
	return nil
}

// AssignPropertiesToImmutableStorageWithVersioningStatus populates the provided destination ImmutableStorageWithVersioning_Status from our ImmutableStorageWithVersioning_Status
func (versioning *ImmutableStorageWithVersioning_Status) AssignPropertiesToImmutableStorageWithVersioningStatus(destination *v1alpha1api20210401storage.ImmutableStorageWithVersioning_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if versioning.Enabled != nil {
		enabled := *versioning.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// MigrationState
	if versioning.MigrationState != nil {
		migrationState := string(*versioning.MigrationState)
		destination.MigrationState = &migrationState
	} else {
		destination.MigrationState = nil
	}

	// TimeStamp
	destination.TimeStamp = genruntime.ClonePointerToString(versioning.TimeStamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LegalHoldProperties_Status struct {
	//HasLegalHold: The hasLegalHold public property is set to true by SRP if there
	//are at least one existing tag. The hasLegalHold public property is set to false
	//by SRP if all existing legal hold tags are cleared out. There can be a maximum
	//of 1000 blob containers with hasLegalHold=true for a given account.
	HasLegalHold *bool `json:"hasLegalHold,omitempty"`

	//Tags: The list of LegalHold tags of a blob container.
	Tags []TagProperty_Status `json:"tags,omitempty"`
}

var _ genruntime.FromARMConverter = &LegalHoldProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *LegalHoldProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LegalHoldProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *LegalHoldProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LegalHoldProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LegalHoldProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘HasLegalHold’:
	if typedInput.HasLegalHold != nil {
		hasLegalHold := *typedInput.HasLegalHold
		properties.HasLegalHold = &hasLegalHold
	}

	// Set property ‘Tags’:
	for _, item := range typedInput.Tags {
		var item1 TagProperty_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		properties.Tags = append(properties.Tags, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromLegalHoldPropertiesStatus populates our LegalHoldProperties_Status from the provided source LegalHoldProperties_Status
func (properties *LegalHoldProperties_Status) AssignPropertiesFromLegalHoldPropertiesStatus(source *v1alpha1api20210401storage.LegalHoldProperties_Status) error {

	// HasLegalHold
	if source.HasLegalHold != nil {
		hasLegalHold := *source.HasLegalHold
		properties.HasLegalHold = &hasLegalHold
	} else {
		properties.HasLegalHold = nil
	}

	// Tags
	if source.Tags != nil {
		tagList := make([]TagProperty_Status, len(source.Tags))
		for tagIndex, tagItem := range source.Tags {
			// Shadow the loop variable to avoid aliasing
			tagItem := tagItem
			var tag TagProperty_Status
			err := tag.AssignPropertiesFromTagPropertyStatus(&tagItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromTagPropertyStatus() to populate field Tags")
			}
			tagList[tagIndex] = tag
		}
		properties.Tags = tagList
	} else {
		properties.Tags = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLegalHoldPropertiesStatus populates the provided destination LegalHoldProperties_Status from our LegalHoldProperties_Status
func (properties *LegalHoldProperties_Status) AssignPropertiesToLegalHoldPropertiesStatus(destination *v1alpha1api20210401storage.LegalHoldProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HasLegalHold
	if properties.HasLegalHold != nil {
		hasLegalHold := *properties.HasLegalHold
		destination.HasLegalHold = &hasLegalHold
	} else {
		destination.HasLegalHold = nil
	}

	// Tags
	if properties.Tags != nil {
		tagList := make([]v1alpha1api20210401storage.TagProperty_Status, len(properties.Tags))
		for tagIndex, tagItem := range properties.Tags {
			// Shadow the loop variable to avoid aliasing
			tagItem := tagItem
			var tag v1alpha1api20210401storage.TagProperty_Status
			err := tagItem.AssignPropertiesToTagPropertyStatus(&tag)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToTagPropertyStatus() to populate field Tags")
			}
			tagList[tagIndex] = tag
		}
		destination.Tags = tagList
	} else {
		destination.Tags = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ImmutabilityPolicyPropertyStatusState string

const (
	ImmutabilityPolicyPropertyStatusStateLocked   = ImmutabilityPolicyPropertyStatusState("Locked")
	ImmutabilityPolicyPropertyStatusStateUnlocked = ImmutabilityPolicyPropertyStatusState("Unlocked")
)

type TagProperty_Status struct {
	//ObjectIdentifier: Returns the Object ID of the user who added the tag.
	ObjectIdentifier *string `json:"objectIdentifier,omitempty"`

	//Tag: The tag value.
	Tag *string `json:"tag,omitempty"`

	//TenantId: Returns the Tenant ID that issued the token for the user who added the
	//tag.
	TenantId *string `json:"tenantId,omitempty"`

	//Timestamp: Returns the date and time the tag was added.
	Timestamp *string `json:"timestamp,omitempty"`

	//Upn: Returns the User Principal Name of the user who added the tag.
	Upn *string `json:"upn,omitempty"`
}

var _ genruntime.FromARMConverter = &TagProperty_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *TagProperty_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TagProperty_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *TagProperty_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TagProperty_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TagProperty_StatusARM, got %T", armInput)
	}

	// Set property ‘ObjectIdentifier’:
	if typedInput.ObjectIdentifier != nil {
		objectIdentifier := *typedInput.ObjectIdentifier
		property.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		property.Tag = &tag
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		property.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		property.Timestamp = &timestamp
	}

	// Set property ‘Upn’:
	if typedInput.Upn != nil {
		upn := *typedInput.Upn
		property.Upn = &upn
	}

	// No error
	return nil
}

// AssignPropertiesFromTagPropertyStatus populates our TagProperty_Status from the provided source TagProperty_Status
func (property *TagProperty_Status) AssignPropertiesFromTagPropertyStatus(source *v1alpha1api20210401storage.TagProperty_Status) error {

	// ObjectIdentifier
	property.ObjectIdentifier = genruntime.ClonePointerToString(source.ObjectIdentifier)

	// Tag
	property.Tag = genruntime.ClonePointerToString(source.Tag)

	// TenantId
	property.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Timestamp
	property.Timestamp = genruntime.ClonePointerToString(source.Timestamp)

	// Upn
	property.Upn = genruntime.ClonePointerToString(source.Upn)

	// No error
	return nil
}

// AssignPropertiesToTagPropertyStatus populates the provided destination TagProperty_Status from our TagProperty_Status
func (property *TagProperty_Status) AssignPropertiesToTagPropertyStatus(destination *v1alpha1api20210401storage.TagProperty_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ObjectIdentifier
	destination.ObjectIdentifier = genruntime.ClonePointerToString(property.ObjectIdentifier)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(property.Tag)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(property.TenantId)

	// Timestamp
	destination.Timestamp = genruntime.ClonePointerToString(property.Timestamp)

	// Upn
	destination.Upn = genruntime.ClonePointerToString(property.Upn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UpdateHistoryProperty_Status struct {
	//ImmutabilityPeriodSinceCreationInDays: The immutability period for the blobs in
	//the container since the policy creation, in days.
	ImmutabilityPeriodSinceCreationInDays *int `json:"immutabilityPeriodSinceCreationInDays,omitempty"`

	//ObjectIdentifier: Returns the Object ID of the user who updated the
	//ImmutabilityPolicy.
	ObjectIdentifier *string `json:"objectIdentifier,omitempty"`

	//TenantId: Returns the Tenant ID that issued the token for the user who updated
	//the ImmutabilityPolicy.
	TenantId *string `json:"tenantId,omitempty"`

	//Timestamp: Returns the date and time the ImmutabilityPolicy was updated.
	Timestamp *string `json:"timestamp,omitempty"`

	//Update: The ImmutabilityPolicy update type of a blob container, possible values
	//include: put, lock and extend.
	Update *UpdateHistoryPropertyStatusUpdate `json:"update,omitempty"`

	//Upn: Returns the User Principal Name of the user who updated the
	//ImmutabilityPolicy.
	Upn *string `json:"upn,omitempty"`
}

var _ genruntime.FromARMConverter = &UpdateHistoryProperty_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *UpdateHistoryProperty_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpdateHistoryProperty_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *UpdateHistoryProperty_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpdateHistoryProperty_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpdateHistoryProperty_StatusARM, got %T", armInput)
	}

	// Set property ‘ImmutabilityPeriodSinceCreationInDays’:
	if typedInput.ImmutabilityPeriodSinceCreationInDays != nil {
		immutabilityPeriodSinceCreationInDays := *typedInput.ImmutabilityPeriodSinceCreationInDays
		property.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
	}

	// Set property ‘ObjectIdentifier’:
	if typedInput.ObjectIdentifier != nil {
		objectIdentifier := *typedInput.ObjectIdentifier
		property.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		property.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		property.Timestamp = &timestamp
	}

	// Set property ‘Update’:
	if typedInput.Update != nil {
		update := *typedInput.Update
		property.Update = &update
	}

	// Set property ‘Upn’:
	if typedInput.Upn != nil {
		upn := *typedInput.Upn
		property.Upn = &upn
	}

	// No error
	return nil
}

// AssignPropertiesFromUpdateHistoryPropertyStatus populates our UpdateHistoryProperty_Status from the provided source UpdateHistoryProperty_Status
func (property *UpdateHistoryProperty_Status) AssignPropertiesFromUpdateHistoryPropertyStatus(source *v1alpha1api20210401storage.UpdateHistoryProperty_Status) error {

	// ImmutabilityPeriodSinceCreationInDays
	property.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(source.ImmutabilityPeriodSinceCreationInDays)

	// ObjectIdentifier
	property.ObjectIdentifier = genruntime.ClonePointerToString(source.ObjectIdentifier)

	// TenantId
	property.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Timestamp
	property.Timestamp = genruntime.ClonePointerToString(source.Timestamp)

	// Update
	if source.Update != nil {
		update := UpdateHistoryPropertyStatusUpdate(*source.Update)
		property.Update = &update
	} else {
		property.Update = nil
	}

	// Upn
	property.Upn = genruntime.ClonePointerToString(source.Upn)

	// No error
	return nil
}

// AssignPropertiesToUpdateHistoryPropertyStatus populates the provided destination UpdateHistoryProperty_Status from our UpdateHistoryProperty_Status
func (property *UpdateHistoryProperty_Status) AssignPropertiesToUpdateHistoryPropertyStatus(destination *v1alpha1api20210401storage.UpdateHistoryProperty_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ImmutabilityPeriodSinceCreationInDays
	destination.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(property.ImmutabilityPeriodSinceCreationInDays)

	// ObjectIdentifier
	destination.ObjectIdentifier = genruntime.ClonePointerToString(property.ObjectIdentifier)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(property.TenantId)

	// Timestamp
	destination.Timestamp = genruntime.ClonePointerToString(property.Timestamp)

	// Update
	if property.Update != nil {
		update := string(*property.Update)
		destination.Update = &update
	} else {
		destination.Update = nil
	}

	// Upn
	destination.Upn = genruntime.ClonePointerToString(property.Upn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&StorageAccountsBlobServicesContainer{}, &StorageAccountsBlobServicesContainerList{})
}
