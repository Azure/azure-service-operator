// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	alpha20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of StorageAccountsBlobServicesContainer. Use v1beta20210401.StorageAccountsBlobServicesContainer instead
type StorageAccountsBlobServicesContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccountsBlobServicesContainer_Spec   `json:"spec,omitempty"`
	Status            StorageAccountsBlobServicesContainer_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsBlobServicesContainer{}

// GetConditions returns the conditions of the resource
func (container *StorageAccountsBlobServicesContainer) GetConditions() conditions.Conditions {
	return container.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (container *StorageAccountsBlobServicesContainer) SetConditions(conditions conditions.Conditions) {
	container.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsBlobServicesContainer{}

// ConvertFrom populates our StorageAccountsBlobServicesContainer from the provided hub StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210401s.StorageAccountsBlobServicesContainer

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = container.AssignPropertiesFromStorageAccountsBlobServicesContainer(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to container")
	}

	return nil
}

// ConvertTo populates the provided hub StorageAccountsBlobServicesContainer from our StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210401s.StorageAccountsBlobServicesContainer
	err := container.AssignPropertiesToStorageAccountsBlobServicesContainer(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from container")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservicescontainer,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservicescontainers,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccountsblobservicescontainers.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &StorageAccountsBlobServicesContainer{}

// Default applies defaults to the StorageAccountsBlobServicesContainer resource
func (container *StorageAccountsBlobServicesContainer) Default() {
	container.defaultImpl()
	var temp interface{} = container
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (container *StorageAccountsBlobServicesContainer) defaultAzureName() {
	if container.Spec.AzureName == "" {
		container.Spec.AzureName = container.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsBlobServicesContainer resource
func (container *StorageAccountsBlobServicesContainer) defaultImpl() { container.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccountsBlobServicesContainer{}

// AzureName returns the Azure name of the resource
func (container *StorageAccountsBlobServicesContainer) AzureName() string {
	return container.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "20210401"
func (container StorageAccountsBlobServicesContainer) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (container *StorageAccountsBlobServicesContainer) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (container *StorageAccountsBlobServicesContainer) GetSpec() genruntime.ConvertibleSpec {
	return &container.Spec
}

// GetStatus returns the status of this resource
func (container *StorageAccountsBlobServicesContainer) GetStatus() genruntime.ConvertibleStatus {
	return &container.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (container *StorageAccountsBlobServicesContainer) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (container *StorageAccountsBlobServicesContainer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccountsBlobServicesContainer_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (container *StorageAccountsBlobServicesContainer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(container.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  container.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (container *StorageAccountsBlobServicesContainer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccountsBlobServicesContainer_STATUS); ok {
		container.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccountsBlobServicesContainer_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	container.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservicescontainer,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservicescontainers,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccountsblobservicescontainers.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &StorageAccountsBlobServicesContainer{}

// ValidateCreate validates the creation of the resource
func (container *StorageAccountsBlobServicesContainer) ValidateCreate() error {
	validations := container.createValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (container *StorageAccountsBlobServicesContainer) ValidateDelete() error {
	validations := container.deleteValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (container *StorageAccountsBlobServicesContainer) ValidateUpdate(old runtime.Object) error {
	validations := container.updateValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (container *StorageAccountsBlobServicesContainer) createValidations() []func() error {
	return []func() error{container.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (container *StorageAccountsBlobServicesContainer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (container *StorageAccountsBlobServicesContainer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return container.validateResourceReferences()
		},
		container.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (container *StorageAccountsBlobServicesContainer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&container.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (container *StorageAccountsBlobServicesContainer) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*StorageAccountsBlobServicesContainer)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, container)
}

// AssignPropertiesFromStorageAccountsBlobServicesContainer populates our StorageAccountsBlobServicesContainer from the provided source StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) AssignPropertiesFromStorageAccountsBlobServicesContainer(source *alpha20210401s.StorageAccountsBlobServicesContainer) error {

	// ObjectMeta
	container.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccountsBlobServicesContainer_Spec
	err := spec.AssignPropertiesFromStorageAccountsBlobServicesContainer_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsBlobServicesContainer_Spec() to populate field Spec")
	}
	container.Spec = spec

	// Status
	var status StorageAccountsBlobServicesContainer_STATUS
	err = status.AssignPropertiesFromStorageAccountsBlobServicesContainer_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsBlobServicesContainer_STATUS() to populate field Status")
	}
	container.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobServicesContainer populates the provided destination StorageAccountsBlobServicesContainer from our StorageAccountsBlobServicesContainer
func (container *StorageAccountsBlobServicesContainer) AssignPropertiesToStorageAccountsBlobServicesContainer(destination *alpha20210401s.StorageAccountsBlobServicesContainer) error {

	// ObjectMeta
	destination.ObjectMeta = *container.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210401s.StorageAccountsBlobServicesContainer_Spec
	err := container.Spec.AssignPropertiesToStorageAccountsBlobServicesContainer_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsBlobServicesContainer_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210401s.StorageAccountsBlobServicesContainer_STATUS
	err = container.Status.AssignPropertiesToStorageAccountsBlobServicesContainer_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsBlobServicesContainer_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (container *StorageAccountsBlobServicesContainer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: container.Spec.OriginalVersion(),
		Kind:    "StorageAccountsBlobServicesContainer",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of StorageAccountsBlobServicesContainer. Use v1beta20210401.StorageAccountsBlobServicesContainer instead
type StorageAccountsBlobServicesContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsBlobServicesContainer `json:"items"`
}

// Deprecated version of StorageAccountsBlobServicesContainer_STATUS. Use v1beta20210401.StorageAccountsBlobServicesContainer_STATUS instead
type StorageAccountsBlobServicesContainer_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions                     []conditions.Condition                    `json:"conditions,omitempty"`
	DefaultEncryptionScope         *string                                   `json:"defaultEncryptionScope,omitempty"`
	Deleted                        *bool                                     `json:"deleted,omitempty"`
	DeletedTime                    *string                                   `json:"deletedTime,omitempty"`
	DenyEncryptionScopeOverride    *bool                                     `json:"denyEncryptionScopeOverride,omitempty"`
	Etag                           *string                                   `json:"etag,omitempty"`
	HasImmutabilityPolicy          *bool                                     `json:"hasImmutabilityPolicy,omitempty"`
	HasLegalHold                   *bool                                     `json:"hasLegalHold,omitempty"`
	Id                             *string                                   `json:"id,omitempty"`
	ImmutabilityPolicy             *ImmutabilityPolicyProperties_STATUS      `json:"immutabilityPolicy,omitempty"`
	ImmutableStorageWithVersioning *ImmutableStorageWithVersioning_STATUS    `json:"immutableStorageWithVersioning,omitempty"`
	LastModifiedTime               *string                                   `json:"lastModifiedTime,omitempty"`
	LeaseDuration                  *ContainerProperties_LeaseDuration_STATUS `json:"leaseDuration,omitempty"`
	LeaseState                     *ContainerProperties_LeaseState_STATUS    `json:"leaseState,omitempty"`
	LeaseStatus                    *ContainerProperties_LeaseStatus_STATUS   `json:"leaseStatus,omitempty"`
	LegalHold                      *LegalHoldProperties_STATUS               `json:"legalHold,omitempty"`
	Metadata                       map[string]string                         `json:"metadata,omitempty"`
	Name                           *string                                   `json:"name,omitempty"`
	PublicAccess                   *ContainerProperties_PublicAccess_STATUS  `json:"publicAccess,omitempty"`
	RemainingRetentionDays         *int                                      `json:"remainingRetentionDays,omitempty"`
	Type                           *string                                   `json:"type,omitempty"`
	Version                        *string                                   `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccountsBlobServicesContainer_STATUS{}

// ConvertStatusFrom populates our StorageAccountsBlobServicesContainer_STATUS from the provided source
func (container *StorageAccountsBlobServicesContainer_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210401s.StorageAccountsBlobServicesContainer_STATUS)
	if ok {
		// Populate our instance from source
		return container.AssignPropertiesFromStorageAccountsBlobServicesContainer_STATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20210401s.StorageAccountsBlobServicesContainer_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = container.AssignPropertiesFromStorageAccountsBlobServicesContainer_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccountsBlobServicesContainer_STATUS
func (container *StorageAccountsBlobServicesContainer_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210401s.StorageAccountsBlobServicesContainer_STATUS)
	if ok {
		// Populate destination from our instance
		return container.AssignPropertiesToStorageAccountsBlobServicesContainer_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210401s.StorageAccountsBlobServicesContainer_STATUS{}
	err := container.AssignPropertiesToStorageAccountsBlobServicesContainer_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccountsBlobServicesContainer_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (container *StorageAccountsBlobServicesContainer_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsBlobServicesContainer_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (container *StorageAccountsBlobServicesContainer_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsBlobServicesContainer_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsBlobServicesContainer_STATUSARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DefaultEncryptionScope’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultEncryptionScope != nil {
			defaultEncryptionScope := *typedInput.Properties.DefaultEncryptionScope
			container.DefaultEncryptionScope = &defaultEncryptionScope
		}
	}

	// Set property ‘Deleted’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Deleted != nil {
			deleted := *typedInput.Properties.Deleted
			container.Deleted = &deleted
		}
	}

	// Set property ‘DeletedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeletedTime != nil {
			deletedTime := *typedInput.Properties.DeletedTime
			container.DeletedTime = &deletedTime
		}
	}

	// Set property ‘DenyEncryptionScopeOverride’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DenyEncryptionScopeOverride != nil {
			denyEncryptionScopeOverride := *typedInput.Properties.DenyEncryptionScopeOverride
			container.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		container.Etag = &etag
	}

	// Set property ‘HasImmutabilityPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HasImmutabilityPolicy != nil {
			hasImmutabilityPolicy := *typedInput.Properties.HasImmutabilityPolicy
			container.HasImmutabilityPolicy = &hasImmutabilityPolicy
		}
	}

	// Set property ‘HasLegalHold’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HasLegalHold != nil {
			hasLegalHold := *typedInput.Properties.HasLegalHold
			container.HasLegalHold = &hasLegalHold
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		container.Id = &id
	}

	// Set property ‘ImmutabilityPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutabilityPolicy != nil {
			var immutabilityPolicy1 ImmutabilityPolicyProperties_STATUS
			err := immutabilityPolicy1.PopulateFromARM(owner, *typedInput.Properties.ImmutabilityPolicy)
			if err != nil {
				return err
			}
			immutabilityPolicy := immutabilityPolicy1
			container.ImmutabilityPolicy = &immutabilityPolicy
		}
	}

	// Set property ‘ImmutableStorageWithVersioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutableStorageWithVersioning != nil {
			var immutableStorageWithVersioning1 ImmutableStorageWithVersioning_STATUS
			err := immutableStorageWithVersioning1.PopulateFromARM(owner, *typedInput.Properties.ImmutableStorageWithVersioning)
			if err != nil {
				return err
			}
			immutableStorageWithVersioning := immutableStorageWithVersioning1
			container.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
		}
	}

	// Set property ‘LastModifiedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastModifiedTime != nil {
			lastModifiedTime := *typedInput.Properties.LastModifiedTime
			container.LastModifiedTime = &lastModifiedTime
		}
	}

	// Set property ‘LeaseDuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseDuration != nil {
			leaseDuration := *typedInput.Properties.LeaseDuration
			container.LeaseDuration = &leaseDuration
		}
	}

	// Set property ‘LeaseState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseState != nil {
			leaseState := *typedInput.Properties.LeaseState
			container.LeaseState = &leaseState
		}
	}

	// Set property ‘LeaseStatus’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseStatus != nil {
			leaseStatus := *typedInput.Properties.LeaseStatus
			container.LeaseStatus = &leaseStatus
		}
	}

	// Set property ‘LegalHold’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LegalHold != nil {
			var legalHold1 LegalHoldProperties_STATUS
			err := legalHold1.PopulateFromARM(owner, *typedInput.Properties.LegalHold)
			if err != nil {
				return err
			}
			legalHold := legalHold1
			container.LegalHold = &legalHold
		}
	}

	// Set property ‘Metadata’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			container.Metadata = make(map[string]string)
			for key, value := range typedInput.Properties.Metadata {
				container.Metadata[key] = value
			}
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		container.Name = &name
	}

	// Set property ‘PublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicAccess != nil {
			publicAccess := *typedInput.Properties.PublicAccess
			container.PublicAccess = &publicAccess
		}
	}

	// Set property ‘RemainingRetentionDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RemainingRetentionDays != nil {
			remainingRetentionDays := *typedInput.Properties.RemainingRetentionDays
			container.RemainingRetentionDays = &remainingRetentionDays
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		container.Type = &typeVar
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			container.Version = &version
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountsBlobServicesContainer_STATUS populates our StorageAccountsBlobServicesContainer_STATUS from the provided source StorageAccountsBlobServicesContainer_STATUS
func (container *StorageAccountsBlobServicesContainer_STATUS) AssignPropertiesFromStorageAccountsBlobServicesContainer_STATUS(source *alpha20210401s.StorageAccountsBlobServicesContainer_STATUS) error {

	// Conditions
	container.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DefaultEncryptionScope
	container.DefaultEncryptionScope = genruntime.ClonePointerToString(source.DefaultEncryptionScope)

	// Deleted
	if source.Deleted != nil {
		deleted := *source.Deleted
		container.Deleted = &deleted
	} else {
		container.Deleted = nil
	}

	// DeletedTime
	container.DeletedTime = genruntime.ClonePointerToString(source.DeletedTime)

	// DenyEncryptionScopeOverride
	if source.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *source.DenyEncryptionScopeOverride
		container.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		container.DenyEncryptionScopeOverride = nil
	}

	// Etag
	container.Etag = genruntime.ClonePointerToString(source.Etag)

	// HasImmutabilityPolicy
	if source.HasImmutabilityPolicy != nil {
		hasImmutabilityPolicy := *source.HasImmutabilityPolicy
		container.HasImmutabilityPolicy = &hasImmutabilityPolicy
	} else {
		container.HasImmutabilityPolicy = nil
	}

	// HasLegalHold
	if source.HasLegalHold != nil {
		hasLegalHold := *source.HasLegalHold
		container.HasLegalHold = &hasLegalHold
	} else {
		container.HasLegalHold = nil
	}

	// Id
	container.Id = genruntime.ClonePointerToString(source.Id)

	// ImmutabilityPolicy
	if source.ImmutabilityPolicy != nil {
		var immutabilityPolicy ImmutabilityPolicyProperties_STATUS
		err := immutabilityPolicy.AssignPropertiesFromImmutabilityPolicyProperties_STATUS(source.ImmutabilityPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImmutabilityPolicyProperties_STATUS() to populate field ImmutabilityPolicy")
		}
		container.ImmutabilityPolicy = &immutabilityPolicy
	} else {
		container.ImmutabilityPolicy = nil
	}

	// ImmutableStorageWithVersioning
	if source.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning ImmutableStorageWithVersioning_STATUS
		err := immutableStorageWithVersioning.AssignPropertiesFromImmutableStorageWithVersioning_STATUS(source.ImmutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImmutableStorageWithVersioning_STATUS() to populate field ImmutableStorageWithVersioning")
		}
		container.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		container.ImmutableStorageWithVersioning = nil
	}

	// LastModifiedTime
	container.LastModifiedTime = genruntime.ClonePointerToString(source.LastModifiedTime)

	// LeaseDuration
	if source.LeaseDuration != nil {
		leaseDuration := ContainerProperties_LeaseDuration_STATUS(*source.LeaseDuration)
		container.LeaseDuration = &leaseDuration
	} else {
		container.LeaseDuration = nil
	}

	// LeaseState
	if source.LeaseState != nil {
		leaseState := ContainerProperties_LeaseState_STATUS(*source.LeaseState)
		container.LeaseState = &leaseState
	} else {
		container.LeaseState = nil
	}

	// LeaseStatus
	if source.LeaseStatus != nil {
		leaseStatus := ContainerProperties_LeaseStatus_STATUS(*source.LeaseStatus)
		container.LeaseStatus = &leaseStatus
	} else {
		container.LeaseStatus = nil
	}

	// LegalHold
	if source.LegalHold != nil {
		var legalHold LegalHoldProperties_STATUS
		err := legalHold.AssignPropertiesFromLegalHoldProperties_STATUS(source.LegalHold)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLegalHoldProperties_STATUS() to populate field LegalHold")
		}
		container.LegalHold = &legalHold
	} else {
		container.LegalHold = nil
	}

	// Metadata
	container.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Name
	container.Name = genruntime.ClonePointerToString(source.Name)

	// PublicAccess
	if source.PublicAccess != nil {
		publicAccess := ContainerProperties_PublicAccess_STATUS(*source.PublicAccess)
		container.PublicAccess = &publicAccess
	} else {
		container.PublicAccess = nil
	}

	// RemainingRetentionDays
	container.RemainingRetentionDays = genruntime.ClonePointerToInt(source.RemainingRetentionDays)

	// Type
	container.Type = genruntime.ClonePointerToString(source.Type)

	// Version
	container.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobServicesContainer_STATUS populates the provided destination StorageAccountsBlobServicesContainer_STATUS from our StorageAccountsBlobServicesContainer_STATUS
func (container *StorageAccountsBlobServicesContainer_STATUS) AssignPropertiesToStorageAccountsBlobServicesContainer_STATUS(destination *alpha20210401s.StorageAccountsBlobServicesContainer_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(container.Conditions)

	// DefaultEncryptionScope
	destination.DefaultEncryptionScope = genruntime.ClonePointerToString(container.DefaultEncryptionScope)

	// Deleted
	if container.Deleted != nil {
		deleted := *container.Deleted
		destination.Deleted = &deleted
	} else {
		destination.Deleted = nil
	}

	// DeletedTime
	destination.DeletedTime = genruntime.ClonePointerToString(container.DeletedTime)

	// DenyEncryptionScopeOverride
	if container.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *container.DenyEncryptionScopeOverride
		destination.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		destination.DenyEncryptionScopeOverride = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(container.Etag)

	// HasImmutabilityPolicy
	if container.HasImmutabilityPolicy != nil {
		hasImmutabilityPolicy := *container.HasImmutabilityPolicy
		destination.HasImmutabilityPolicy = &hasImmutabilityPolicy
	} else {
		destination.HasImmutabilityPolicy = nil
	}

	// HasLegalHold
	if container.HasLegalHold != nil {
		hasLegalHold := *container.HasLegalHold
		destination.HasLegalHold = &hasLegalHold
	} else {
		destination.HasLegalHold = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(container.Id)

	// ImmutabilityPolicy
	if container.ImmutabilityPolicy != nil {
		var immutabilityPolicy alpha20210401s.ImmutabilityPolicyProperties_STATUS
		err := container.ImmutabilityPolicy.AssignPropertiesToImmutabilityPolicyProperties_STATUS(&immutabilityPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImmutabilityPolicyProperties_STATUS() to populate field ImmutabilityPolicy")
		}
		destination.ImmutabilityPolicy = &immutabilityPolicy
	} else {
		destination.ImmutabilityPolicy = nil
	}

	// ImmutableStorageWithVersioning
	if container.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning alpha20210401s.ImmutableStorageWithVersioning_STATUS
		err := container.ImmutableStorageWithVersioning.AssignPropertiesToImmutableStorageWithVersioning_STATUS(&immutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImmutableStorageWithVersioning_STATUS() to populate field ImmutableStorageWithVersioning")
		}
		destination.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		destination.ImmutableStorageWithVersioning = nil
	}

	// LastModifiedTime
	destination.LastModifiedTime = genruntime.ClonePointerToString(container.LastModifiedTime)

	// LeaseDuration
	if container.LeaseDuration != nil {
		leaseDuration := string(*container.LeaseDuration)
		destination.LeaseDuration = &leaseDuration
	} else {
		destination.LeaseDuration = nil
	}

	// LeaseState
	if container.LeaseState != nil {
		leaseState := string(*container.LeaseState)
		destination.LeaseState = &leaseState
	} else {
		destination.LeaseState = nil
	}

	// LeaseStatus
	if container.LeaseStatus != nil {
		leaseStatus := string(*container.LeaseStatus)
		destination.LeaseStatus = &leaseStatus
	} else {
		destination.LeaseStatus = nil
	}

	// LegalHold
	if container.LegalHold != nil {
		var legalHold alpha20210401s.LegalHoldProperties_STATUS
		err := container.LegalHold.AssignPropertiesToLegalHoldProperties_STATUS(&legalHold)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLegalHoldProperties_STATUS() to populate field LegalHold")
		}
		destination.LegalHold = &legalHold
	} else {
		destination.LegalHold = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(container.Metadata)

	// Name
	destination.Name = genruntime.ClonePointerToString(container.Name)

	// PublicAccess
	if container.PublicAccess != nil {
		publicAccess := string(*container.PublicAccess)
		destination.PublicAccess = &publicAccess
	} else {
		destination.PublicAccess = nil
	}

	// RemainingRetentionDays
	destination.RemainingRetentionDays = genruntime.ClonePointerToInt(container.RemainingRetentionDays)

	// Type
	destination.Type = genruntime.ClonePointerToString(container.Type)

	// Version
	destination.Version = genruntime.ClonePointerToString(container.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountsBlobServicesContainer_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName                      string                             `json:"azureName,omitempty"`
	DefaultEncryptionScope         *string                            `json:"defaultEncryptionScope,omitempty"`
	Deleted                        *bool                              `json:"deleted,omitempty"`
	DeletedTime                    *string                            `json:"deletedTime,omitempty"`
	DenyEncryptionScopeOverride    *bool                              `json:"denyEncryptionScopeOverride,omitempty"`
	Etag                           *string                            `json:"etag,omitempty"`
	HasImmutabilityPolicy          *bool                              `json:"hasImmutabilityPolicy,omitempty"`
	HasLegalHold                   *bool                              `json:"hasLegalHold,omitempty"`
	Id                             *string                            `json:"id,omitempty"`
	ImmutabilityPolicy             *ImmutabilityPolicyProperties      `json:"immutabilityPolicy,omitempty"`
	ImmutableStorageWithVersioning *ImmutableStorageWithVersioning    `json:"immutableStorageWithVersioning,omitempty"`
	LastModifiedTime               *string                            `json:"lastModifiedTime,omitempty"`
	LeaseDuration                  *ContainerProperties_LeaseDuration `json:"leaseDuration,omitempty"`
	LeaseState                     *ContainerProperties_LeaseState    `json:"leaseState,omitempty"`
	LeaseStatus                    *ContainerProperties_LeaseStatus   `json:"leaseStatus,omitempty"`
	LegalHold                      *LegalHoldProperties               `json:"legalHold,omitempty"`
	Metadata                       map[string]string                  `json:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                  *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PublicAccess           *ContainerProperties_PublicAccess  `json:"publicAccess,omitempty"`
	RemainingRetentionDays *int                               `json:"remainingRetentionDays,omitempty"`
	Type                   *string                            `json:"type,omitempty"`
	Version                *string                            `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccountsBlobServicesContainer_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (container *StorageAccountsBlobServicesContainer_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if container == nil {
		return nil, nil
	}
	result := &StorageAccountsBlobServicesContainer_SpecARM{}

	// Set property ‘AzureName’:
	result.AzureName = container.AzureName

	// Set property ‘Etag’:
	if container.Etag != nil {
		etag := *container.Etag
		result.Etag = &etag
	}

	// Set property ‘Id’:
	if container.Id != nil {
		id := *container.Id
		result.Id = &id
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if container.DefaultEncryptionScope != nil ||
		container.Deleted != nil ||
		container.DeletedTime != nil ||
		container.DenyEncryptionScopeOverride != nil ||
		container.HasImmutabilityPolicy != nil ||
		container.HasLegalHold != nil ||
		container.ImmutabilityPolicy != nil ||
		container.ImmutableStorageWithVersioning != nil ||
		container.LastModifiedTime != nil ||
		container.LeaseDuration != nil ||
		container.LeaseState != nil ||
		container.LeaseStatus != nil ||
		container.LegalHold != nil ||
		container.Metadata != nil ||
		container.PublicAccess != nil ||
		container.RemainingRetentionDays != nil ||
		container.Version != nil {
		result.Properties = &ContainerPropertiesARM{}
	}
	if container.DefaultEncryptionScope != nil {
		defaultEncryptionScope := *container.DefaultEncryptionScope
		result.Properties.DefaultEncryptionScope = &defaultEncryptionScope
	}
	if container.Deleted != nil {
		deleted := *container.Deleted
		result.Properties.Deleted = &deleted
	}
	if container.DeletedTime != nil {
		deletedTime := *container.DeletedTime
		result.Properties.DeletedTime = &deletedTime
	}
	if container.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *container.DenyEncryptionScopeOverride
		result.Properties.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	}
	if container.HasImmutabilityPolicy != nil {
		hasImmutabilityPolicy := *container.HasImmutabilityPolicy
		result.Properties.HasImmutabilityPolicy = &hasImmutabilityPolicy
	}
	if container.HasLegalHold != nil {
		hasLegalHold := *container.HasLegalHold
		result.Properties.HasLegalHold = &hasLegalHold
	}
	if container.ImmutabilityPolicy != nil {
		immutabilityPolicyARM, err := (*container.ImmutabilityPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		immutabilityPolicy := *immutabilityPolicyARM.(*ImmutabilityPolicyPropertiesARM)
		result.Properties.ImmutabilityPolicy = &immutabilityPolicy
	}
	if container.ImmutableStorageWithVersioning != nil {
		immutableStorageWithVersioningARM, err := (*container.ImmutableStorageWithVersioning).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		immutableStorageWithVersioning := *immutableStorageWithVersioningARM.(*ImmutableStorageWithVersioningARM)
		result.Properties.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	}
	if container.LastModifiedTime != nil {
		lastModifiedTime := *container.LastModifiedTime
		result.Properties.LastModifiedTime = &lastModifiedTime
	}
	if container.LeaseDuration != nil {
		leaseDuration := *container.LeaseDuration
		result.Properties.LeaseDuration = &leaseDuration
	}
	if container.LeaseState != nil {
		leaseState := *container.LeaseState
		result.Properties.LeaseState = &leaseState
	}
	if container.LeaseStatus != nil {
		leaseStatus := *container.LeaseStatus
		result.Properties.LeaseStatus = &leaseStatus
	}
	if container.LegalHold != nil {
		legalHoldARM, err := (*container.LegalHold).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		legalHold := *legalHoldARM.(*LegalHoldPropertiesARM)
		result.Properties.LegalHold = &legalHold
	}
	if container.Metadata != nil {
		result.Properties.Metadata = make(map[string]string)
		for key, value := range container.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	if container.PublicAccess != nil {
		publicAccess := *container.PublicAccess
		result.Properties.PublicAccess = &publicAccess
	}
	if container.RemainingRetentionDays != nil {
		remainingRetentionDays := *container.RemainingRetentionDays
		result.Properties.RemainingRetentionDays = &remainingRetentionDays
	}
	if container.Version != nil {
		version := *container.Version
		result.Properties.Version = &version
	}

	// Set property ‘Type’:
	if container.Type != nil {
		typeVar := *container.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (container *StorageAccountsBlobServicesContainer_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsBlobServicesContainer_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (container *StorageAccountsBlobServicesContainer_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsBlobServicesContainer_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsBlobServicesContainer_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	container.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DefaultEncryptionScope’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultEncryptionScope != nil {
			defaultEncryptionScope := *typedInput.Properties.DefaultEncryptionScope
			container.DefaultEncryptionScope = &defaultEncryptionScope
		}
	}

	// Set property ‘Deleted’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Deleted != nil {
			deleted := *typedInput.Properties.Deleted
			container.Deleted = &deleted
		}
	}

	// Set property ‘DeletedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeletedTime != nil {
			deletedTime := *typedInput.Properties.DeletedTime
			container.DeletedTime = &deletedTime
		}
	}

	// Set property ‘DenyEncryptionScopeOverride’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DenyEncryptionScopeOverride != nil {
			denyEncryptionScopeOverride := *typedInput.Properties.DenyEncryptionScopeOverride
			container.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		container.Etag = &etag
	}

	// Set property ‘HasImmutabilityPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HasImmutabilityPolicy != nil {
			hasImmutabilityPolicy := *typedInput.Properties.HasImmutabilityPolicy
			container.HasImmutabilityPolicy = &hasImmutabilityPolicy
		}
	}

	// Set property ‘HasLegalHold’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HasLegalHold != nil {
			hasLegalHold := *typedInput.Properties.HasLegalHold
			container.HasLegalHold = &hasLegalHold
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		container.Id = &id
	}

	// Set property ‘ImmutabilityPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutabilityPolicy != nil {
			var immutabilityPolicy1 ImmutabilityPolicyProperties
			err := immutabilityPolicy1.PopulateFromARM(owner, *typedInput.Properties.ImmutabilityPolicy)
			if err != nil {
				return err
			}
			immutabilityPolicy := immutabilityPolicy1
			container.ImmutabilityPolicy = &immutabilityPolicy
		}
	}

	// Set property ‘ImmutableStorageWithVersioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutableStorageWithVersioning != nil {
			var immutableStorageWithVersioning1 ImmutableStorageWithVersioning
			err := immutableStorageWithVersioning1.PopulateFromARM(owner, *typedInput.Properties.ImmutableStorageWithVersioning)
			if err != nil {
				return err
			}
			immutableStorageWithVersioning := immutableStorageWithVersioning1
			container.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
		}
	}

	// Set property ‘LastModifiedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastModifiedTime != nil {
			lastModifiedTime := *typedInput.Properties.LastModifiedTime
			container.LastModifiedTime = &lastModifiedTime
		}
	}

	// Set property ‘LeaseDuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseDuration != nil {
			leaseDuration := *typedInput.Properties.LeaseDuration
			container.LeaseDuration = &leaseDuration
		}
	}

	// Set property ‘LeaseState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseState != nil {
			leaseState := *typedInput.Properties.LeaseState
			container.LeaseState = &leaseState
		}
	}

	// Set property ‘LeaseStatus’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseStatus != nil {
			leaseStatus := *typedInput.Properties.LeaseStatus
			container.LeaseStatus = &leaseStatus
		}
	}

	// Set property ‘LegalHold’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LegalHold != nil {
			var legalHold1 LegalHoldProperties
			err := legalHold1.PopulateFromARM(owner, *typedInput.Properties.LegalHold)
			if err != nil {
				return err
			}
			legalHold := legalHold1
			container.LegalHold = &legalHold
		}
	}

	// Set property ‘Metadata’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			container.Metadata = make(map[string]string)
			for key, value := range typedInput.Properties.Metadata {
				container.Metadata[key] = value
			}
		}
	}

	// Set property ‘Owner’:
	container.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicAccess != nil {
			publicAccess := *typedInput.Properties.PublicAccess
			container.PublicAccess = &publicAccess
		}
	}

	// Set property ‘RemainingRetentionDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RemainingRetentionDays != nil {
			remainingRetentionDays := *typedInput.Properties.RemainingRetentionDays
			container.RemainingRetentionDays = &remainingRetentionDays
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		container.Type = &typeVar
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			container.Version = &version
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccountsBlobServicesContainer_Spec{}

// ConvertSpecFrom populates our StorageAccountsBlobServicesContainer_Spec from the provided source
func (container *StorageAccountsBlobServicesContainer_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210401s.StorageAccountsBlobServicesContainer_Spec)
	if ok {
		// Populate our instance from source
		return container.AssignPropertiesFromStorageAccountsBlobServicesContainer_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210401s.StorageAccountsBlobServicesContainer_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = container.AssignPropertiesFromStorageAccountsBlobServicesContainer_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccountsBlobServicesContainer_Spec
func (container *StorageAccountsBlobServicesContainer_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210401s.StorageAccountsBlobServicesContainer_Spec)
	if ok {
		// Populate destination from our instance
		return container.AssignPropertiesToStorageAccountsBlobServicesContainer_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210401s.StorageAccountsBlobServicesContainer_Spec{}
	err := container.AssignPropertiesToStorageAccountsBlobServicesContainer_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsBlobServicesContainer_Spec populates our StorageAccountsBlobServicesContainer_Spec from the provided source StorageAccountsBlobServicesContainer_Spec
func (container *StorageAccountsBlobServicesContainer_Spec) AssignPropertiesFromStorageAccountsBlobServicesContainer_Spec(source *alpha20210401s.StorageAccountsBlobServicesContainer_Spec) error {

	// AzureName
	container.AzureName = source.AzureName

	// DefaultEncryptionScope
	container.DefaultEncryptionScope = genruntime.ClonePointerToString(source.DefaultEncryptionScope)

	// Deleted
	if source.Deleted != nil {
		deleted := *source.Deleted
		container.Deleted = &deleted
	} else {
		container.Deleted = nil
	}

	// DeletedTime
	if source.DeletedTime != nil {
		deletedTime := *source.DeletedTime
		container.DeletedTime = &deletedTime
	} else {
		container.DeletedTime = nil
	}

	// DenyEncryptionScopeOverride
	if source.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *source.DenyEncryptionScopeOverride
		container.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		container.DenyEncryptionScopeOverride = nil
	}

	// Etag
	container.Etag = genruntime.ClonePointerToString(source.Etag)

	// HasImmutabilityPolicy
	if source.HasImmutabilityPolicy != nil {
		hasImmutabilityPolicy := *source.HasImmutabilityPolicy
		container.HasImmutabilityPolicy = &hasImmutabilityPolicy
	} else {
		container.HasImmutabilityPolicy = nil
	}

	// HasLegalHold
	if source.HasLegalHold != nil {
		hasLegalHold := *source.HasLegalHold
		container.HasLegalHold = &hasLegalHold
	} else {
		container.HasLegalHold = nil
	}

	// Id
	container.Id = genruntime.ClonePointerToString(source.Id)

	// ImmutabilityPolicy
	if source.ImmutabilityPolicy != nil {
		var immutabilityPolicy ImmutabilityPolicyProperties
		err := immutabilityPolicy.AssignPropertiesFromImmutabilityPolicyProperties(source.ImmutabilityPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImmutabilityPolicyProperties() to populate field ImmutabilityPolicy")
		}
		container.ImmutabilityPolicy = &immutabilityPolicy
	} else {
		container.ImmutabilityPolicy = nil
	}

	// ImmutableStorageWithVersioning
	if source.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning ImmutableStorageWithVersioning
		err := immutableStorageWithVersioning.AssignPropertiesFromImmutableStorageWithVersioning(source.ImmutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImmutableStorageWithVersioning() to populate field ImmutableStorageWithVersioning")
		}
		container.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		container.ImmutableStorageWithVersioning = nil
	}

	// LastModifiedTime
	if source.LastModifiedTime != nil {
		lastModifiedTime := *source.LastModifiedTime
		container.LastModifiedTime = &lastModifiedTime
	} else {
		container.LastModifiedTime = nil
	}

	// LeaseDuration
	if source.LeaseDuration != nil {
		leaseDuration := ContainerProperties_LeaseDuration(*source.LeaseDuration)
		container.LeaseDuration = &leaseDuration
	} else {
		container.LeaseDuration = nil
	}

	// LeaseState
	if source.LeaseState != nil {
		leaseState := ContainerProperties_LeaseState(*source.LeaseState)
		container.LeaseState = &leaseState
	} else {
		container.LeaseState = nil
	}

	// LeaseStatus
	if source.LeaseStatus != nil {
		leaseStatus := ContainerProperties_LeaseStatus(*source.LeaseStatus)
		container.LeaseStatus = &leaseStatus
	} else {
		container.LeaseStatus = nil
	}

	// LegalHold
	if source.LegalHold != nil {
		var legalHold LegalHoldProperties
		err := legalHold.AssignPropertiesFromLegalHoldProperties(source.LegalHold)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLegalHoldProperties() to populate field LegalHold")
		}
		container.LegalHold = &legalHold
	} else {
		container.LegalHold = nil
	}

	// Metadata
	container.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		container.Owner = &owner
	} else {
		container.Owner = nil
	}

	// PublicAccess
	if source.PublicAccess != nil {
		publicAccess := ContainerProperties_PublicAccess(*source.PublicAccess)
		container.PublicAccess = &publicAccess
	} else {
		container.PublicAccess = nil
	}

	// RemainingRetentionDays
	container.RemainingRetentionDays = genruntime.ClonePointerToInt(source.RemainingRetentionDays)

	// Type
	container.Type = genruntime.ClonePointerToString(source.Type)

	// Version
	container.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobServicesContainer_Spec populates the provided destination StorageAccountsBlobServicesContainer_Spec from our StorageAccountsBlobServicesContainer_Spec
func (container *StorageAccountsBlobServicesContainer_Spec) AssignPropertiesToStorageAccountsBlobServicesContainer_Spec(destination *alpha20210401s.StorageAccountsBlobServicesContainer_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = container.AzureName

	// DefaultEncryptionScope
	destination.DefaultEncryptionScope = genruntime.ClonePointerToString(container.DefaultEncryptionScope)

	// Deleted
	if container.Deleted != nil {
		deleted := *container.Deleted
		destination.Deleted = &deleted
	} else {
		destination.Deleted = nil
	}

	// DeletedTime
	if container.DeletedTime != nil {
		deletedTime := *container.DeletedTime
		destination.DeletedTime = &deletedTime
	} else {
		destination.DeletedTime = nil
	}

	// DenyEncryptionScopeOverride
	if container.DenyEncryptionScopeOverride != nil {
		denyEncryptionScopeOverride := *container.DenyEncryptionScopeOverride
		destination.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	} else {
		destination.DenyEncryptionScopeOverride = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(container.Etag)

	// HasImmutabilityPolicy
	if container.HasImmutabilityPolicy != nil {
		hasImmutabilityPolicy := *container.HasImmutabilityPolicy
		destination.HasImmutabilityPolicy = &hasImmutabilityPolicy
	} else {
		destination.HasImmutabilityPolicy = nil
	}

	// HasLegalHold
	if container.HasLegalHold != nil {
		hasLegalHold := *container.HasLegalHold
		destination.HasLegalHold = &hasLegalHold
	} else {
		destination.HasLegalHold = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(container.Id)

	// ImmutabilityPolicy
	if container.ImmutabilityPolicy != nil {
		var immutabilityPolicy alpha20210401s.ImmutabilityPolicyProperties
		err := container.ImmutabilityPolicy.AssignPropertiesToImmutabilityPolicyProperties(&immutabilityPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImmutabilityPolicyProperties() to populate field ImmutabilityPolicy")
		}
		destination.ImmutabilityPolicy = &immutabilityPolicy
	} else {
		destination.ImmutabilityPolicy = nil
	}

	// ImmutableStorageWithVersioning
	if container.ImmutableStorageWithVersioning != nil {
		var immutableStorageWithVersioning alpha20210401s.ImmutableStorageWithVersioning
		err := container.ImmutableStorageWithVersioning.AssignPropertiesToImmutableStorageWithVersioning(&immutableStorageWithVersioning)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImmutableStorageWithVersioning() to populate field ImmutableStorageWithVersioning")
		}
		destination.ImmutableStorageWithVersioning = &immutableStorageWithVersioning
	} else {
		destination.ImmutableStorageWithVersioning = nil
	}

	// LastModifiedTime
	if container.LastModifiedTime != nil {
		lastModifiedTime := *container.LastModifiedTime
		destination.LastModifiedTime = &lastModifiedTime
	} else {
		destination.LastModifiedTime = nil
	}

	// LeaseDuration
	if container.LeaseDuration != nil {
		leaseDuration := string(*container.LeaseDuration)
		destination.LeaseDuration = &leaseDuration
	} else {
		destination.LeaseDuration = nil
	}

	// LeaseState
	if container.LeaseState != nil {
		leaseState := string(*container.LeaseState)
		destination.LeaseState = &leaseState
	} else {
		destination.LeaseState = nil
	}

	// LeaseStatus
	if container.LeaseStatus != nil {
		leaseStatus := string(*container.LeaseStatus)
		destination.LeaseStatus = &leaseStatus
	} else {
		destination.LeaseStatus = nil
	}

	// LegalHold
	if container.LegalHold != nil {
		var legalHold alpha20210401s.LegalHoldProperties
		err := container.LegalHold.AssignPropertiesToLegalHoldProperties(&legalHold)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLegalHoldProperties() to populate field LegalHold")
		}
		destination.LegalHold = &legalHold
	} else {
		destination.LegalHold = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(container.Metadata)

	// OriginalVersion
	destination.OriginalVersion = container.OriginalVersion()

	// Owner
	if container.Owner != nil {
		owner := container.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicAccess
	if container.PublicAccess != nil {
		publicAccess := string(*container.PublicAccess)
		destination.PublicAccess = &publicAccess
	} else {
		destination.PublicAccess = nil
	}

	// RemainingRetentionDays
	destination.RemainingRetentionDays = genruntime.ClonePointerToInt(container.RemainingRetentionDays)

	// Type
	destination.Type = genruntime.ClonePointerToString(container.Type)

	// Version
	destination.Version = genruntime.ClonePointerToString(container.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (container *StorageAccountsBlobServicesContainer_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (container *StorageAccountsBlobServicesContainer_Spec) SetAzureName(azureName string) {
	container.AzureName = azureName
}

// Deprecated version of ContainerProperties_LeaseDuration. Use v1beta20210401.ContainerProperties_LeaseDuration instead
// +kubebuilder:validation:Enum={"Fixed","Infinite"}
type ContainerProperties_LeaseDuration string

const (
	ContainerProperties_LeaseDurationFixed    = ContainerProperties_LeaseDuration("Fixed")
	ContainerProperties_LeaseDurationInfinite = ContainerProperties_LeaseDuration("Infinite")
)

// Deprecated version of ContainerProperties_LeaseDuration_STATUS. Use
// v1beta20210401.ContainerProperties_LeaseDuration_STATUS instead
type ContainerProperties_LeaseDuration_STATUS string

const (
	ContainerProperties_LeaseDuration_STATUSFixed    = ContainerProperties_LeaseDuration_STATUS("Fixed")
	ContainerProperties_LeaseDuration_STATUSInfinite = ContainerProperties_LeaseDuration_STATUS("Infinite")
)

// Deprecated version of ContainerProperties_LeaseState. Use v1beta20210401.ContainerProperties_LeaseState instead
// +kubebuilder:validation:Enum={"Available","Breaking","Broken","Expired","Leased"}
type ContainerProperties_LeaseState string

const (
	ContainerProperties_LeaseStateAvailable = ContainerProperties_LeaseState("Available")
	ContainerProperties_LeaseStateBreaking  = ContainerProperties_LeaseState("Breaking")
	ContainerProperties_LeaseStateBroken    = ContainerProperties_LeaseState("Broken")
	ContainerProperties_LeaseStateExpired   = ContainerProperties_LeaseState("Expired")
	ContainerProperties_LeaseStateLeased    = ContainerProperties_LeaseState("Leased")
)

// Deprecated version of ContainerProperties_LeaseState_STATUS. Use v1beta20210401.ContainerProperties_LeaseState_STATUS
// instead
type ContainerProperties_LeaseState_STATUS string

const (
	ContainerProperties_LeaseState_STATUSAvailable = ContainerProperties_LeaseState_STATUS("Available")
	ContainerProperties_LeaseState_STATUSBreaking  = ContainerProperties_LeaseState_STATUS("Breaking")
	ContainerProperties_LeaseState_STATUSBroken    = ContainerProperties_LeaseState_STATUS("Broken")
	ContainerProperties_LeaseState_STATUSExpired   = ContainerProperties_LeaseState_STATUS("Expired")
	ContainerProperties_LeaseState_STATUSLeased    = ContainerProperties_LeaseState_STATUS("Leased")
)

// Deprecated version of ContainerProperties_LeaseStatus. Use v1beta20210401.ContainerProperties_LeaseStatus instead
// +kubebuilder:validation:Enum={"Locked","Unlocked"}
type ContainerProperties_LeaseStatus string

const (
	ContainerProperties_LeaseStatusLocked   = ContainerProperties_LeaseStatus("Locked")
	ContainerProperties_LeaseStatusUnlocked = ContainerProperties_LeaseStatus("Unlocked")
)

// Deprecated version of ContainerProperties_LeaseStatus_STATUS. Use v1beta20210401.ContainerProperties_LeaseStatus_STATUS
// instead
type ContainerProperties_LeaseStatus_STATUS string

const (
	ContainerProperties_LeaseStatus_STATUSLocked   = ContainerProperties_LeaseStatus_STATUS("Locked")
	ContainerProperties_LeaseStatus_STATUSUnlocked = ContainerProperties_LeaseStatus_STATUS("Unlocked")
)

// Deprecated version of ContainerProperties_PublicAccess. Use v1beta20210401.ContainerProperties_PublicAccess instead
// +kubebuilder:validation:Enum={"Blob","Container","None"}
type ContainerProperties_PublicAccess string

const (
	ContainerProperties_PublicAccessBlob      = ContainerProperties_PublicAccess("Blob")
	ContainerProperties_PublicAccessContainer = ContainerProperties_PublicAccess("Container")
	ContainerProperties_PublicAccessNone      = ContainerProperties_PublicAccess("None")
)

// Deprecated version of ContainerProperties_PublicAccess_STATUS. Use
// v1beta20210401.ContainerProperties_PublicAccess_STATUS instead
type ContainerProperties_PublicAccess_STATUS string

const (
	ContainerProperties_PublicAccess_STATUSBlob      = ContainerProperties_PublicAccess_STATUS("Blob")
	ContainerProperties_PublicAccess_STATUSContainer = ContainerProperties_PublicAccess_STATUS("Container")
	ContainerProperties_PublicAccess_STATUSNone      = ContainerProperties_PublicAccess_STATUS("None")
)

// Deprecated version of ImmutabilityPolicyProperties. Use v1beta20210401.ImmutabilityPolicyProperties instead
type ImmutabilityPolicyProperties struct {
	AllowProtectedAppendWrites            *bool                             `json:"allowProtectedAppendWrites,omitempty"`
	Etag                                  *string                           `json:"etag,omitempty"`
	ImmutabilityPeriodSinceCreationInDays *int                              `json:"immutabilityPeriodSinceCreationInDays,omitempty"`
	State                                 *ImmutabilityPolicyProperty_State `json:"state,omitempty"`
	UpdateHistory                         []UpdateHistoryProperty           `json:"updateHistory,omitempty"`
}

var _ genruntime.ARMTransformer = &ImmutabilityPolicyProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *ImmutabilityPolicyProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &ImmutabilityPolicyPropertiesARM{}

	// Set property ‘Etag’:
	if properties.Etag != nil {
		etag := *properties.Etag
		result.Etag = &etag
	}

	// Set property ‘Properties’:
	if properties.AllowProtectedAppendWrites != nil ||
		properties.ImmutabilityPeriodSinceCreationInDays != nil ||
		properties.State != nil {
		result.Properties = &ImmutabilityPolicyPropertyARM{}
	}
	if properties.AllowProtectedAppendWrites != nil {
		allowProtectedAppendWrites := *properties.AllowProtectedAppendWrites
		result.Properties.AllowProtectedAppendWrites = &allowProtectedAppendWrites
	}
	if properties.ImmutabilityPeriodSinceCreationInDays != nil {
		immutabilityPeriodSinceCreationInDays := *properties.ImmutabilityPeriodSinceCreationInDays
		result.Properties.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
	}
	if properties.State != nil {
		state := *properties.State
		result.Properties.State = &state
	}

	// Set property ‘UpdateHistory’:
	for _, item := range properties.UpdateHistory {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.UpdateHistory = append(result.UpdateHistory, *itemARM.(*UpdateHistoryPropertyARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ImmutabilityPolicyProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImmutabilityPolicyPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ImmutabilityPolicyProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImmutabilityPolicyPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImmutabilityPolicyPropertiesARM, got %T", armInput)
	}

	// Set property ‘AllowProtectedAppendWrites’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowProtectedAppendWrites != nil {
			allowProtectedAppendWrites := *typedInput.Properties.AllowProtectedAppendWrites
			properties.AllowProtectedAppendWrites = &allowProtectedAppendWrites
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		properties.Etag = &etag
	}

	// Set property ‘ImmutabilityPeriodSinceCreationInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutabilityPeriodSinceCreationInDays != nil {
			immutabilityPeriodSinceCreationInDays := *typedInput.Properties.ImmutabilityPeriodSinceCreationInDays
			properties.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
		}
	}

	// Set property ‘State’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			properties.State = &state
		}
	}

	// Set property ‘UpdateHistory’:
	for _, item := range typedInput.UpdateHistory {
		var item1 UpdateHistoryProperty
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		properties.UpdateHistory = append(properties.UpdateHistory, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromImmutabilityPolicyProperties populates our ImmutabilityPolicyProperties from the provided source ImmutabilityPolicyProperties
func (properties *ImmutabilityPolicyProperties) AssignPropertiesFromImmutabilityPolicyProperties(source *alpha20210401s.ImmutabilityPolicyProperties) error {

	// AllowProtectedAppendWrites
	if source.AllowProtectedAppendWrites != nil {
		allowProtectedAppendWrite := *source.AllowProtectedAppendWrites
		properties.AllowProtectedAppendWrites = &allowProtectedAppendWrite
	} else {
		properties.AllowProtectedAppendWrites = nil
	}

	// Etag
	properties.Etag = genruntime.ClonePointerToString(source.Etag)

	// ImmutabilityPeriodSinceCreationInDays
	properties.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(source.ImmutabilityPeriodSinceCreationInDays)

	// State
	if source.State != nil {
		state := ImmutabilityPolicyProperty_State(*source.State)
		properties.State = &state
	} else {
		properties.State = nil
	}

	// UpdateHistory
	if source.UpdateHistory != nil {
		updateHistoryList := make([]UpdateHistoryProperty, len(source.UpdateHistory))
		for updateHistoryIndex, updateHistoryItem := range source.UpdateHistory {
			// Shadow the loop variable to avoid aliasing
			updateHistoryItem := updateHistoryItem
			var updateHistory UpdateHistoryProperty
			err := updateHistory.AssignPropertiesFromUpdateHistoryProperty(&updateHistoryItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUpdateHistoryProperty() to populate field UpdateHistory")
			}
			updateHistoryList[updateHistoryIndex] = updateHistory
		}
		properties.UpdateHistory = updateHistoryList
	} else {
		properties.UpdateHistory = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImmutabilityPolicyProperties populates the provided destination ImmutabilityPolicyProperties from our ImmutabilityPolicyProperties
func (properties *ImmutabilityPolicyProperties) AssignPropertiesToImmutabilityPolicyProperties(destination *alpha20210401s.ImmutabilityPolicyProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowProtectedAppendWrites
	if properties.AllowProtectedAppendWrites != nil {
		allowProtectedAppendWrite := *properties.AllowProtectedAppendWrites
		destination.AllowProtectedAppendWrites = &allowProtectedAppendWrite
	} else {
		destination.AllowProtectedAppendWrites = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(properties.Etag)

	// ImmutabilityPeriodSinceCreationInDays
	destination.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(properties.ImmutabilityPeriodSinceCreationInDays)

	// State
	if properties.State != nil {
		state := string(*properties.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// UpdateHistory
	if properties.UpdateHistory != nil {
		updateHistoryList := make([]alpha20210401s.UpdateHistoryProperty, len(properties.UpdateHistory))
		for updateHistoryIndex, updateHistoryItem := range properties.UpdateHistory {
			// Shadow the loop variable to avoid aliasing
			updateHistoryItem := updateHistoryItem
			var updateHistory alpha20210401s.UpdateHistoryProperty
			err := updateHistoryItem.AssignPropertiesToUpdateHistoryProperty(&updateHistory)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUpdateHistoryProperty() to populate field UpdateHistory")
			}
			updateHistoryList[updateHistoryIndex] = updateHistory
		}
		destination.UpdateHistory = updateHistoryList
	} else {
		destination.UpdateHistory = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImmutabilityPolicyProperties_STATUS. Use v1beta20210401.ImmutabilityPolicyProperties_STATUS instead
type ImmutabilityPolicyProperties_STATUS struct {
	AllowProtectedAppendWrites            *bool                                    `json:"allowProtectedAppendWrites,omitempty"`
	Etag                                  *string                                  `json:"etag,omitempty"`
	ImmutabilityPeriodSinceCreationInDays *int                                     `json:"immutabilityPeriodSinceCreationInDays,omitempty"`
	State                                 *ImmutabilityPolicyProperty_State_STATUS `json:"state,omitempty"`
	UpdateHistory                         []UpdateHistoryProperty_STATUS           `json:"updateHistory,omitempty"`
}

var _ genruntime.FromARMConverter = &ImmutabilityPolicyProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ImmutabilityPolicyProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImmutabilityPolicyProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ImmutabilityPolicyProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImmutabilityPolicyProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImmutabilityPolicyProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘AllowProtectedAppendWrites’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowProtectedAppendWrites != nil {
			allowProtectedAppendWrites := *typedInput.Properties.AllowProtectedAppendWrites
			properties.AllowProtectedAppendWrites = &allowProtectedAppendWrites
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		properties.Etag = &etag
	}

	// Set property ‘ImmutabilityPeriodSinceCreationInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmutabilityPeriodSinceCreationInDays != nil {
			immutabilityPeriodSinceCreationInDays := *typedInput.Properties.ImmutabilityPeriodSinceCreationInDays
			properties.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
		}
	}

	// Set property ‘State’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			properties.State = &state
		}
	}

	// Set property ‘UpdateHistory’:
	for _, item := range typedInput.UpdateHistory {
		var item1 UpdateHistoryProperty_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		properties.UpdateHistory = append(properties.UpdateHistory, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromImmutabilityPolicyProperties_STATUS populates our ImmutabilityPolicyProperties_STATUS from the provided source ImmutabilityPolicyProperties_STATUS
func (properties *ImmutabilityPolicyProperties_STATUS) AssignPropertiesFromImmutabilityPolicyProperties_STATUS(source *alpha20210401s.ImmutabilityPolicyProperties_STATUS) error {

	// AllowProtectedAppendWrites
	if source.AllowProtectedAppendWrites != nil {
		allowProtectedAppendWrite := *source.AllowProtectedAppendWrites
		properties.AllowProtectedAppendWrites = &allowProtectedAppendWrite
	} else {
		properties.AllowProtectedAppendWrites = nil
	}

	// Etag
	properties.Etag = genruntime.ClonePointerToString(source.Etag)

	// ImmutabilityPeriodSinceCreationInDays
	properties.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(source.ImmutabilityPeriodSinceCreationInDays)

	// State
	if source.State != nil {
		state := ImmutabilityPolicyProperty_State_STATUS(*source.State)
		properties.State = &state
	} else {
		properties.State = nil
	}

	// UpdateHistory
	if source.UpdateHistory != nil {
		updateHistoryList := make([]UpdateHistoryProperty_STATUS, len(source.UpdateHistory))
		for updateHistoryIndex, updateHistoryItem := range source.UpdateHistory {
			// Shadow the loop variable to avoid aliasing
			updateHistoryItem := updateHistoryItem
			var updateHistory UpdateHistoryProperty_STATUS
			err := updateHistory.AssignPropertiesFromUpdateHistoryProperty_STATUS(&updateHistoryItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUpdateHistoryProperty_STATUS() to populate field UpdateHistory")
			}
			updateHistoryList[updateHistoryIndex] = updateHistory
		}
		properties.UpdateHistory = updateHistoryList
	} else {
		properties.UpdateHistory = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImmutabilityPolicyProperties_STATUS populates the provided destination ImmutabilityPolicyProperties_STATUS from our ImmutabilityPolicyProperties_STATUS
func (properties *ImmutabilityPolicyProperties_STATUS) AssignPropertiesToImmutabilityPolicyProperties_STATUS(destination *alpha20210401s.ImmutabilityPolicyProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowProtectedAppendWrites
	if properties.AllowProtectedAppendWrites != nil {
		allowProtectedAppendWrite := *properties.AllowProtectedAppendWrites
		destination.AllowProtectedAppendWrites = &allowProtectedAppendWrite
	} else {
		destination.AllowProtectedAppendWrites = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(properties.Etag)

	// ImmutabilityPeriodSinceCreationInDays
	destination.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(properties.ImmutabilityPeriodSinceCreationInDays)

	// State
	if properties.State != nil {
		state := string(*properties.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// UpdateHistory
	if properties.UpdateHistory != nil {
		updateHistoryList := make([]alpha20210401s.UpdateHistoryProperty_STATUS, len(properties.UpdateHistory))
		for updateHistoryIndex, updateHistoryItem := range properties.UpdateHistory {
			// Shadow the loop variable to avoid aliasing
			updateHistoryItem := updateHistoryItem
			var updateHistory alpha20210401s.UpdateHistoryProperty_STATUS
			err := updateHistoryItem.AssignPropertiesToUpdateHistoryProperty_STATUS(&updateHistory)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUpdateHistoryProperty_STATUS() to populate field UpdateHistory")
			}
			updateHistoryList[updateHistoryIndex] = updateHistory
		}
		destination.UpdateHistory = updateHistoryList
	} else {
		destination.UpdateHistory = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImmutableStorageWithVersioning. Use v1beta20210401.ImmutableStorageWithVersioning instead
type ImmutableStorageWithVersioning struct {
	Enabled        *bool                                          `json:"enabled,omitempty"`
	MigrationState *ImmutableStorageWithVersioning_MigrationState `json:"migrationState,omitempty"`
	TimeStamp      *string                                        `json:"timeStamp,omitempty"`
}

var _ genruntime.ARMTransformer = &ImmutableStorageWithVersioning{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (versioning *ImmutableStorageWithVersioning) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if versioning == nil {
		return nil, nil
	}
	result := &ImmutableStorageWithVersioningARM{}

	// Set property ‘Enabled’:
	if versioning.Enabled != nil {
		enabled := *versioning.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘MigrationState’:
	if versioning.MigrationState != nil {
		migrationState := *versioning.MigrationState
		result.MigrationState = &migrationState
	}

	// Set property ‘TimeStamp’:
	if versioning.TimeStamp != nil {
		timeStamp := *versioning.TimeStamp
		result.TimeStamp = &timeStamp
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (versioning *ImmutableStorageWithVersioning) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImmutableStorageWithVersioningARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (versioning *ImmutableStorageWithVersioning) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImmutableStorageWithVersioningARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImmutableStorageWithVersioningARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		versioning.Enabled = &enabled
	}

	// Set property ‘MigrationState’:
	if typedInput.MigrationState != nil {
		migrationState := *typedInput.MigrationState
		versioning.MigrationState = &migrationState
	}

	// Set property ‘TimeStamp’:
	if typedInput.TimeStamp != nil {
		timeStamp := *typedInput.TimeStamp
		versioning.TimeStamp = &timeStamp
	}

	// No error
	return nil
}

// AssignPropertiesFromImmutableStorageWithVersioning populates our ImmutableStorageWithVersioning from the provided source ImmutableStorageWithVersioning
func (versioning *ImmutableStorageWithVersioning) AssignPropertiesFromImmutableStorageWithVersioning(source *alpha20210401s.ImmutableStorageWithVersioning) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		versioning.Enabled = &enabled
	} else {
		versioning.Enabled = nil
	}

	// MigrationState
	if source.MigrationState != nil {
		migrationState := ImmutableStorageWithVersioning_MigrationState(*source.MigrationState)
		versioning.MigrationState = &migrationState
	} else {
		versioning.MigrationState = nil
	}

	// TimeStamp
	if source.TimeStamp != nil {
		timeStamp := *source.TimeStamp
		versioning.TimeStamp = &timeStamp
	} else {
		versioning.TimeStamp = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImmutableStorageWithVersioning populates the provided destination ImmutableStorageWithVersioning from our ImmutableStorageWithVersioning
func (versioning *ImmutableStorageWithVersioning) AssignPropertiesToImmutableStorageWithVersioning(destination *alpha20210401s.ImmutableStorageWithVersioning) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if versioning.Enabled != nil {
		enabled := *versioning.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// MigrationState
	if versioning.MigrationState != nil {
		migrationState := string(*versioning.MigrationState)
		destination.MigrationState = &migrationState
	} else {
		destination.MigrationState = nil
	}

	// TimeStamp
	if versioning.TimeStamp != nil {
		timeStamp := *versioning.TimeStamp
		destination.TimeStamp = &timeStamp
	} else {
		destination.TimeStamp = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImmutableStorageWithVersioning_STATUS. Use v1beta20210401.ImmutableStorageWithVersioning_STATUS instead
type ImmutableStorageWithVersioning_STATUS struct {
	Enabled        *bool                                                 `json:"enabled,omitempty"`
	MigrationState *ImmutableStorageWithVersioning_MigrationState_STATUS `json:"migrationState,omitempty"`
	TimeStamp      *string                                               `json:"timeStamp,omitempty"`
}

var _ genruntime.FromARMConverter = &ImmutableStorageWithVersioning_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (versioning *ImmutableStorageWithVersioning_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImmutableStorageWithVersioning_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (versioning *ImmutableStorageWithVersioning_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImmutableStorageWithVersioning_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImmutableStorageWithVersioning_STATUSARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		versioning.Enabled = &enabled
	}

	// Set property ‘MigrationState’:
	if typedInput.MigrationState != nil {
		migrationState := *typedInput.MigrationState
		versioning.MigrationState = &migrationState
	}

	// Set property ‘TimeStamp’:
	if typedInput.TimeStamp != nil {
		timeStamp := *typedInput.TimeStamp
		versioning.TimeStamp = &timeStamp
	}

	// No error
	return nil
}

// AssignPropertiesFromImmutableStorageWithVersioning_STATUS populates our ImmutableStorageWithVersioning_STATUS from the provided source ImmutableStorageWithVersioning_STATUS
func (versioning *ImmutableStorageWithVersioning_STATUS) AssignPropertiesFromImmutableStorageWithVersioning_STATUS(source *alpha20210401s.ImmutableStorageWithVersioning_STATUS) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		versioning.Enabled = &enabled
	} else {
		versioning.Enabled = nil
	}

	// MigrationState
	if source.MigrationState != nil {
		migrationState := ImmutableStorageWithVersioning_MigrationState_STATUS(*source.MigrationState)
		versioning.MigrationState = &migrationState
	} else {
		versioning.MigrationState = nil
	}

	// TimeStamp
	versioning.TimeStamp = genruntime.ClonePointerToString(source.TimeStamp)

	// No error
	return nil
}

// AssignPropertiesToImmutableStorageWithVersioning_STATUS populates the provided destination ImmutableStorageWithVersioning_STATUS from our ImmutableStorageWithVersioning_STATUS
func (versioning *ImmutableStorageWithVersioning_STATUS) AssignPropertiesToImmutableStorageWithVersioning_STATUS(destination *alpha20210401s.ImmutableStorageWithVersioning_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if versioning.Enabled != nil {
		enabled := *versioning.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// MigrationState
	if versioning.MigrationState != nil {
		migrationState := string(*versioning.MigrationState)
		destination.MigrationState = &migrationState
	} else {
		destination.MigrationState = nil
	}

	// TimeStamp
	destination.TimeStamp = genruntime.ClonePointerToString(versioning.TimeStamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of LegalHoldProperties. Use v1beta20210401.LegalHoldProperties instead
type LegalHoldProperties struct {
	HasLegalHold *bool         `json:"hasLegalHold,omitempty"`
	Tags         []TagProperty `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &LegalHoldProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *LegalHoldProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &LegalHoldPropertiesARM{}

	// Set property ‘HasLegalHold’:
	if properties.HasLegalHold != nil {
		hasLegalHold := *properties.HasLegalHold
		result.HasLegalHold = &hasLegalHold
	}

	// Set property ‘Tags’:
	for _, item := range properties.Tags {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Tags = append(result.Tags, *itemARM.(*TagPropertyARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *LegalHoldProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LegalHoldPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *LegalHoldProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LegalHoldPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LegalHoldPropertiesARM, got %T", armInput)
	}

	// Set property ‘HasLegalHold’:
	if typedInput.HasLegalHold != nil {
		hasLegalHold := *typedInput.HasLegalHold
		properties.HasLegalHold = &hasLegalHold
	}

	// Set property ‘Tags’:
	for _, item := range typedInput.Tags {
		var item1 TagProperty
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		properties.Tags = append(properties.Tags, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromLegalHoldProperties populates our LegalHoldProperties from the provided source LegalHoldProperties
func (properties *LegalHoldProperties) AssignPropertiesFromLegalHoldProperties(source *alpha20210401s.LegalHoldProperties) error {

	// HasLegalHold
	if source.HasLegalHold != nil {
		hasLegalHold := *source.HasLegalHold
		properties.HasLegalHold = &hasLegalHold
	} else {
		properties.HasLegalHold = nil
	}

	// Tags
	if source.Tags != nil {
		tagList := make([]TagProperty, len(source.Tags))
		for tagIndex, tagItem := range source.Tags {
			// Shadow the loop variable to avoid aliasing
			tagItem := tagItem
			var tag TagProperty
			err := tag.AssignPropertiesFromTagProperty(&tagItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromTagProperty() to populate field Tags")
			}
			tagList[tagIndex] = tag
		}
		properties.Tags = tagList
	} else {
		properties.Tags = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLegalHoldProperties populates the provided destination LegalHoldProperties from our LegalHoldProperties
func (properties *LegalHoldProperties) AssignPropertiesToLegalHoldProperties(destination *alpha20210401s.LegalHoldProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HasLegalHold
	if properties.HasLegalHold != nil {
		hasLegalHold := *properties.HasLegalHold
		destination.HasLegalHold = &hasLegalHold
	} else {
		destination.HasLegalHold = nil
	}

	// Tags
	if properties.Tags != nil {
		tagList := make([]alpha20210401s.TagProperty, len(properties.Tags))
		for tagIndex, tagItem := range properties.Tags {
			// Shadow the loop variable to avoid aliasing
			tagItem := tagItem
			var tag alpha20210401s.TagProperty
			err := tagItem.AssignPropertiesToTagProperty(&tag)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToTagProperty() to populate field Tags")
			}
			tagList[tagIndex] = tag
		}
		destination.Tags = tagList
	} else {
		destination.Tags = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of LegalHoldProperties_STATUS. Use v1beta20210401.LegalHoldProperties_STATUS instead
type LegalHoldProperties_STATUS struct {
	HasLegalHold *bool                `json:"hasLegalHold,omitempty"`
	Tags         []TagProperty_STATUS `json:"tags,omitempty"`
}

var _ genruntime.FromARMConverter = &LegalHoldProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *LegalHoldProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LegalHoldProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *LegalHoldProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LegalHoldProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LegalHoldProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘HasLegalHold’:
	if typedInput.HasLegalHold != nil {
		hasLegalHold := *typedInput.HasLegalHold
		properties.HasLegalHold = &hasLegalHold
	}

	// Set property ‘Tags’:
	for _, item := range typedInput.Tags {
		var item1 TagProperty_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		properties.Tags = append(properties.Tags, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromLegalHoldProperties_STATUS populates our LegalHoldProperties_STATUS from the provided source LegalHoldProperties_STATUS
func (properties *LegalHoldProperties_STATUS) AssignPropertiesFromLegalHoldProperties_STATUS(source *alpha20210401s.LegalHoldProperties_STATUS) error {

	// HasLegalHold
	if source.HasLegalHold != nil {
		hasLegalHold := *source.HasLegalHold
		properties.HasLegalHold = &hasLegalHold
	} else {
		properties.HasLegalHold = nil
	}

	// Tags
	if source.Tags != nil {
		tagList := make([]TagProperty_STATUS, len(source.Tags))
		for tagIndex, tagItem := range source.Tags {
			// Shadow the loop variable to avoid aliasing
			tagItem := tagItem
			var tag TagProperty_STATUS
			err := tag.AssignPropertiesFromTagProperty_STATUS(&tagItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromTagProperty_STATUS() to populate field Tags")
			}
			tagList[tagIndex] = tag
		}
		properties.Tags = tagList
	} else {
		properties.Tags = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLegalHoldProperties_STATUS populates the provided destination LegalHoldProperties_STATUS from our LegalHoldProperties_STATUS
func (properties *LegalHoldProperties_STATUS) AssignPropertiesToLegalHoldProperties_STATUS(destination *alpha20210401s.LegalHoldProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HasLegalHold
	if properties.HasLegalHold != nil {
		hasLegalHold := *properties.HasLegalHold
		destination.HasLegalHold = &hasLegalHold
	} else {
		destination.HasLegalHold = nil
	}

	// Tags
	if properties.Tags != nil {
		tagList := make([]alpha20210401s.TagProperty_STATUS, len(properties.Tags))
		for tagIndex, tagItem := range properties.Tags {
			// Shadow the loop variable to avoid aliasing
			tagItem := tagItem
			var tag alpha20210401s.TagProperty_STATUS
			err := tagItem.AssignPropertiesToTagProperty_STATUS(&tag)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToTagProperty_STATUS() to populate field Tags")
			}
			tagList[tagIndex] = tag
		}
		destination.Tags = tagList
	} else {
		destination.Tags = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImmutabilityPolicyProperty_State. Use v1beta20210401.ImmutabilityPolicyProperty_State instead
// +kubebuilder:validation:Enum={"Locked","Unlocked"}
type ImmutabilityPolicyProperty_State string

const (
	ImmutabilityPolicyProperty_StateLocked   = ImmutabilityPolicyProperty_State("Locked")
	ImmutabilityPolicyProperty_StateUnlocked = ImmutabilityPolicyProperty_State("Unlocked")
)

// Deprecated version of ImmutabilityPolicyProperty_State_STATUS. Use
// v1beta20210401.ImmutabilityPolicyProperty_State_STATUS instead
type ImmutabilityPolicyProperty_State_STATUS string

const (
	ImmutabilityPolicyProperty_State_STATUSLocked   = ImmutabilityPolicyProperty_State_STATUS("Locked")
	ImmutabilityPolicyProperty_State_STATUSUnlocked = ImmutabilityPolicyProperty_State_STATUS("Unlocked")
)

// Deprecated version of ImmutableStorageWithVersioning_MigrationState. Use
// v1beta20210401.ImmutableStorageWithVersioning_MigrationState instead
// +kubebuilder:validation:Enum={"Completed","InProgress"}
type ImmutableStorageWithVersioning_MigrationState string

const (
	ImmutableStorageWithVersioning_MigrationStateCompleted  = ImmutableStorageWithVersioning_MigrationState("Completed")
	ImmutableStorageWithVersioning_MigrationStateInProgress = ImmutableStorageWithVersioning_MigrationState("InProgress")
)

// Deprecated version of ImmutableStorageWithVersioning_MigrationState_STATUS. Use
// v1beta20210401.ImmutableStorageWithVersioning_MigrationState_STATUS instead
type ImmutableStorageWithVersioning_MigrationState_STATUS string

const (
	ImmutableStorageWithVersioning_MigrationState_STATUSCompleted  = ImmutableStorageWithVersioning_MigrationState_STATUS("Completed")
	ImmutableStorageWithVersioning_MigrationState_STATUSInProgress = ImmutableStorageWithVersioning_MigrationState_STATUS("InProgress")
)

// Deprecated version of TagProperty. Use v1beta20210401.TagProperty instead
type TagProperty struct {
	ObjectIdentifier *string `json:"objectIdentifier,omitempty"`
	Tag              *string `json:"tag,omitempty"`
	TenantId         *string `json:"tenantId,omitempty"`
	Timestamp        *string `json:"timestamp,omitempty"`
	Upn              *string `json:"upn,omitempty"`
}

var _ genruntime.ARMTransformer = &TagProperty{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (property *TagProperty) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if property == nil {
		return nil, nil
	}
	result := &TagPropertyARM{}

	// Set property ‘ObjectIdentifier’:
	if property.ObjectIdentifier != nil {
		objectIdentifier := *property.ObjectIdentifier
		result.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘Tag’:
	if property.Tag != nil {
		tag := *property.Tag
		result.Tag = &tag
	}

	// Set property ‘TenantId’:
	if property.TenantId != nil {
		tenantId := *property.TenantId
		result.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if property.Timestamp != nil {
		timestamp := *property.Timestamp
		result.Timestamp = &timestamp
	}

	// Set property ‘Upn’:
	if property.Upn != nil {
		upn := *property.Upn
		result.Upn = &upn
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *TagProperty) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TagPropertyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *TagProperty) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TagPropertyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TagPropertyARM, got %T", armInput)
	}

	// Set property ‘ObjectIdentifier’:
	if typedInput.ObjectIdentifier != nil {
		objectIdentifier := *typedInput.ObjectIdentifier
		property.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		property.Tag = &tag
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		property.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		property.Timestamp = &timestamp
	}

	// Set property ‘Upn’:
	if typedInput.Upn != nil {
		upn := *typedInput.Upn
		property.Upn = &upn
	}

	// No error
	return nil
}

// AssignPropertiesFromTagProperty populates our TagProperty from the provided source TagProperty
func (property *TagProperty) AssignPropertiesFromTagProperty(source *alpha20210401s.TagProperty) error {

	// ObjectIdentifier
	property.ObjectIdentifier = genruntime.ClonePointerToString(source.ObjectIdentifier)

	// Tag
	property.Tag = genruntime.ClonePointerToString(source.Tag)

	// TenantId
	property.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Timestamp
	if source.Timestamp != nil {
		timestamp := *source.Timestamp
		property.Timestamp = &timestamp
	} else {
		property.Timestamp = nil
	}

	// Upn
	property.Upn = genruntime.ClonePointerToString(source.Upn)

	// No error
	return nil
}

// AssignPropertiesToTagProperty populates the provided destination TagProperty from our TagProperty
func (property *TagProperty) AssignPropertiesToTagProperty(destination *alpha20210401s.TagProperty) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ObjectIdentifier
	destination.ObjectIdentifier = genruntime.ClonePointerToString(property.ObjectIdentifier)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(property.Tag)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(property.TenantId)

	// Timestamp
	if property.Timestamp != nil {
		timestamp := *property.Timestamp
		destination.Timestamp = &timestamp
	} else {
		destination.Timestamp = nil
	}

	// Upn
	destination.Upn = genruntime.ClonePointerToString(property.Upn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of TagProperty_STATUS. Use v1beta20210401.TagProperty_STATUS instead
type TagProperty_STATUS struct {
	ObjectIdentifier *string `json:"objectIdentifier,omitempty"`
	Tag              *string `json:"tag,omitempty"`
	TenantId         *string `json:"tenantId,omitempty"`
	Timestamp        *string `json:"timestamp,omitempty"`
	Upn              *string `json:"upn,omitempty"`
}

var _ genruntime.FromARMConverter = &TagProperty_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *TagProperty_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TagProperty_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *TagProperty_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TagProperty_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TagProperty_STATUSARM, got %T", armInput)
	}

	// Set property ‘ObjectIdentifier’:
	if typedInput.ObjectIdentifier != nil {
		objectIdentifier := *typedInput.ObjectIdentifier
		property.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		property.Tag = &tag
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		property.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		property.Timestamp = &timestamp
	}

	// Set property ‘Upn’:
	if typedInput.Upn != nil {
		upn := *typedInput.Upn
		property.Upn = &upn
	}

	// No error
	return nil
}

// AssignPropertiesFromTagProperty_STATUS populates our TagProperty_STATUS from the provided source TagProperty_STATUS
func (property *TagProperty_STATUS) AssignPropertiesFromTagProperty_STATUS(source *alpha20210401s.TagProperty_STATUS) error {

	// ObjectIdentifier
	property.ObjectIdentifier = genruntime.ClonePointerToString(source.ObjectIdentifier)

	// Tag
	property.Tag = genruntime.ClonePointerToString(source.Tag)

	// TenantId
	property.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Timestamp
	property.Timestamp = genruntime.ClonePointerToString(source.Timestamp)

	// Upn
	property.Upn = genruntime.ClonePointerToString(source.Upn)

	// No error
	return nil
}

// AssignPropertiesToTagProperty_STATUS populates the provided destination TagProperty_STATUS from our TagProperty_STATUS
func (property *TagProperty_STATUS) AssignPropertiesToTagProperty_STATUS(destination *alpha20210401s.TagProperty_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ObjectIdentifier
	destination.ObjectIdentifier = genruntime.ClonePointerToString(property.ObjectIdentifier)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(property.Tag)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(property.TenantId)

	// Timestamp
	destination.Timestamp = genruntime.ClonePointerToString(property.Timestamp)

	// Upn
	destination.Upn = genruntime.ClonePointerToString(property.Upn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UpdateHistoryProperty. Use v1beta20210401.UpdateHistoryProperty instead
type UpdateHistoryProperty struct {
	ImmutabilityPeriodSinceCreationInDays *int                          `json:"immutabilityPeriodSinceCreationInDays,omitempty"`
	ObjectIdentifier                      *string                       `json:"objectIdentifier,omitempty"`
	TenantId                              *string                       `json:"tenantId,omitempty"`
	Timestamp                             *string                       `json:"timestamp,omitempty"`
	Update                                *UpdateHistoryProperty_Update `json:"update,omitempty"`
	Upn                                   *string                       `json:"upn,omitempty"`
}

var _ genruntime.ARMTransformer = &UpdateHistoryProperty{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (property *UpdateHistoryProperty) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if property == nil {
		return nil, nil
	}
	result := &UpdateHistoryPropertyARM{}

	// Set property ‘ImmutabilityPeriodSinceCreationInDays’:
	if property.ImmutabilityPeriodSinceCreationInDays != nil {
		immutabilityPeriodSinceCreationInDays := *property.ImmutabilityPeriodSinceCreationInDays
		result.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
	}

	// Set property ‘ObjectIdentifier’:
	if property.ObjectIdentifier != nil {
		objectIdentifier := *property.ObjectIdentifier
		result.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘TenantId’:
	if property.TenantId != nil {
		tenantId := *property.TenantId
		result.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if property.Timestamp != nil {
		timestamp := *property.Timestamp
		result.Timestamp = &timestamp
	}

	// Set property ‘Update’:
	if property.Update != nil {
		update := *property.Update
		result.Update = &update
	}

	// Set property ‘Upn’:
	if property.Upn != nil {
		upn := *property.Upn
		result.Upn = &upn
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *UpdateHistoryProperty) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpdateHistoryPropertyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *UpdateHistoryProperty) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpdateHistoryPropertyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpdateHistoryPropertyARM, got %T", armInput)
	}

	// Set property ‘ImmutabilityPeriodSinceCreationInDays’:
	if typedInput.ImmutabilityPeriodSinceCreationInDays != nil {
		immutabilityPeriodSinceCreationInDays := *typedInput.ImmutabilityPeriodSinceCreationInDays
		property.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
	}

	// Set property ‘ObjectIdentifier’:
	if typedInput.ObjectIdentifier != nil {
		objectIdentifier := *typedInput.ObjectIdentifier
		property.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		property.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		property.Timestamp = &timestamp
	}

	// Set property ‘Update’:
	if typedInput.Update != nil {
		update := *typedInput.Update
		property.Update = &update
	}

	// Set property ‘Upn’:
	if typedInput.Upn != nil {
		upn := *typedInput.Upn
		property.Upn = &upn
	}

	// No error
	return nil
}

// AssignPropertiesFromUpdateHistoryProperty populates our UpdateHistoryProperty from the provided source UpdateHistoryProperty
func (property *UpdateHistoryProperty) AssignPropertiesFromUpdateHistoryProperty(source *alpha20210401s.UpdateHistoryProperty) error {

	// ImmutabilityPeriodSinceCreationInDays
	property.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(source.ImmutabilityPeriodSinceCreationInDays)

	// ObjectIdentifier
	property.ObjectIdentifier = genruntime.ClonePointerToString(source.ObjectIdentifier)

	// TenantId
	property.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Timestamp
	if source.Timestamp != nil {
		timestamp := *source.Timestamp
		property.Timestamp = &timestamp
	} else {
		property.Timestamp = nil
	}

	// Update
	if source.Update != nil {
		update := UpdateHistoryProperty_Update(*source.Update)
		property.Update = &update
	} else {
		property.Update = nil
	}

	// Upn
	property.Upn = genruntime.ClonePointerToString(source.Upn)

	// No error
	return nil
}

// AssignPropertiesToUpdateHistoryProperty populates the provided destination UpdateHistoryProperty from our UpdateHistoryProperty
func (property *UpdateHistoryProperty) AssignPropertiesToUpdateHistoryProperty(destination *alpha20210401s.UpdateHistoryProperty) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ImmutabilityPeriodSinceCreationInDays
	destination.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(property.ImmutabilityPeriodSinceCreationInDays)

	// ObjectIdentifier
	destination.ObjectIdentifier = genruntime.ClonePointerToString(property.ObjectIdentifier)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(property.TenantId)

	// Timestamp
	if property.Timestamp != nil {
		timestamp := *property.Timestamp
		destination.Timestamp = &timestamp
	} else {
		destination.Timestamp = nil
	}

	// Update
	if property.Update != nil {
		update := string(*property.Update)
		destination.Update = &update
	} else {
		destination.Update = nil
	}

	// Upn
	destination.Upn = genruntime.ClonePointerToString(property.Upn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UpdateHistoryProperty_STATUS. Use v1beta20210401.UpdateHistoryProperty_STATUS instead
type UpdateHistoryProperty_STATUS struct {
	ImmutabilityPeriodSinceCreationInDays *int                                 `json:"immutabilityPeriodSinceCreationInDays,omitempty"`
	ObjectIdentifier                      *string                              `json:"objectIdentifier,omitempty"`
	TenantId                              *string                              `json:"tenantId,omitempty"`
	Timestamp                             *string                              `json:"timestamp,omitempty"`
	Update                                *UpdateHistoryProperty_Update_STATUS `json:"update,omitempty"`
	Upn                                   *string                              `json:"upn,omitempty"`
}

var _ genruntime.FromARMConverter = &UpdateHistoryProperty_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *UpdateHistoryProperty_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpdateHistoryProperty_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *UpdateHistoryProperty_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpdateHistoryProperty_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpdateHistoryProperty_STATUSARM, got %T", armInput)
	}

	// Set property ‘ImmutabilityPeriodSinceCreationInDays’:
	if typedInput.ImmutabilityPeriodSinceCreationInDays != nil {
		immutabilityPeriodSinceCreationInDays := *typedInput.ImmutabilityPeriodSinceCreationInDays
		property.ImmutabilityPeriodSinceCreationInDays = &immutabilityPeriodSinceCreationInDays
	}

	// Set property ‘ObjectIdentifier’:
	if typedInput.ObjectIdentifier != nil {
		objectIdentifier := *typedInput.ObjectIdentifier
		property.ObjectIdentifier = &objectIdentifier
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		property.TenantId = &tenantId
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		property.Timestamp = &timestamp
	}

	// Set property ‘Update’:
	if typedInput.Update != nil {
		update := *typedInput.Update
		property.Update = &update
	}

	// Set property ‘Upn’:
	if typedInput.Upn != nil {
		upn := *typedInput.Upn
		property.Upn = &upn
	}

	// No error
	return nil
}

// AssignPropertiesFromUpdateHistoryProperty_STATUS populates our UpdateHistoryProperty_STATUS from the provided source UpdateHistoryProperty_STATUS
func (property *UpdateHistoryProperty_STATUS) AssignPropertiesFromUpdateHistoryProperty_STATUS(source *alpha20210401s.UpdateHistoryProperty_STATUS) error {

	// ImmutabilityPeriodSinceCreationInDays
	property.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(source.ImmutabilityPeriodSinceCreationInDays)

	// ObjectIdentifier
	property.ObjectIdentifier = genruntime.ClonePointerToString(source.ObjectIdentifier)

	// TenantId
	property.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Timestamp
	property.Timestamp = genruntime.ClonePointerToString(source.Timestamp)

	// Update
	if source.Update != nil {
		update := UpdateHistoryProperty_Update_STATUS(*source.Update)
		property.Update = &update
	} else {
		property.Update = nil
	}

	// Upn
	property.Upn = genruntime.ClonePointerToString(source.Upn)

	// No error
	return nil
}

// AssignPropertiesToUpdateHistoryProperty_STATUS populates the provided destination UpdateHistoryProperty_STATUS from our UpdateHistoryProperty_STATUS
func (property *UpdateHistoryProperty_STATUS) AssignPropertiesToUpdateHistoryProperty_STATUS(destination *alpha20210401s.UpdateHistoryProperty_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ImmutabilityPeriodSinceCreationInDays
	destination.ImmutabilityPeriodSinceCreationInDays = genruntime.ClonePointerToInt(property.ImmutabilityPeriodSinceCreationInDays)

	// ObjectIdentifier
	destination.ObjectIdentifier = genruntime.ClonePointerToString(property.ObjectIdentifier)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(property.TenantId)

	// Timestamp
	destination.Timestamp = genruntime.ClonePointerToString(property.Timestamp)

	// Update
	if property.Update != nil {
		update := string(*property.Update)
		destination.Update = &update
	} else {
		destination.Update = nil
	}

	// Upn
	destination.Upn = genruntime.ClonePointerToString(property.Upn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UpdateHistoryProperty_Update. Use v1beta20210401.UpdateHistoryProperty_Update instead
// +kubebuilder:validation:Enum={"extend","lock","put"}
type UpdateHistoryProperty_Update string

const (
	UpdateHistoryProperty_UpdateExtend = UpdateHistoryProperty_Update("extend")
	UpdateHistoryProperty_UpdateLock   = UpdateHistoryProperty_Update("lock")
	UpdateHistoryProperty_UpdatePut    = UpdateHistoryProperty_Update("put")
)

// Deprecated version of UpdateHistoryProperty_Update_STATUS. Use v1beta20210401.UpdateHistoryProperty_Update_STATUS instead
type UpdateHistoryProperty_Update_STATUS string

const (
	UpdateHistoryProperty_Update_STATUSExtend = UpdateHistoryProperty_Update_STATUS("extend")
	UpdateHistoryProperty_Update_STATUSLock   = UpdateHistoryProperty_Update_STATUS("lock")
	UpdateHistoryProperty_Update_STATUSPut    = UpdateHistoryProperty_Update_STATUS("put")
)

func init() {
	SchemeBuilder.Register(&StorageAccountsBlobServicesContainer{}, &StorageAccountsBlobServicesContainerList{})
}
