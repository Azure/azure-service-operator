// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsQueueServicesQueues_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueServicesQueues_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueServicesQueues_SPECARM, StorageAccountsQueueServicesQueues_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueServicesQueues_SPECARM runs a test to see if a specific instance of StorageAccountsQueueServicesQueues_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueServicesQueues_SPECARM(subject StorageAccountsQueueServicesQueues_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueServicesQueues_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueServicesQueues_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsQueueServicesQueues_SPECARMGenerator()
var storageAccountsQueueServicesQueues_specarmGenerator gopter.Gen

// StorageAccountsQueueServicesQueues_SPECARMGenerator returns a generator of StorageAccountsQueueServicesQueues_SPECARM instances for property testing.
// We first initialize storageAccountsQueueServicesQueues_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsQueueServicesQueues_SPECARMGenerator() gopter.Gen {
	if storageAccountsQueueServicesQueues_specarmGenerator != nil {
		return storageAccountsQueueServicesQueues_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueues_SPECARM(generators)
	storageAccountsQueueServicesQueues_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServicesQueues_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueues_SPECARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueues_SPECARM(generators)
	storageAccountsQueueServicesQueues_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServicesQueues_SPECARM{}), generators)

	return storageAccountsQueueServicesQueues_specarmGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueues_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueues_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueues_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueues_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QueueProperties_SpecARMGenerator())
}

func Test_QueueProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueueProperties_SpecARM, QueueProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueueProperties_SpecARM runs a test to see if a specific instance of QueueProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueueProperties_SpecARM(subject QueueProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueProperties_SpecARM instances for property testing - lazily instantiated by
//QueueProperties_SpecARMGenerator()
var queueProperties_specARMGenerator gopter.Gen

// QueueProperties_SpecARMGenerator returns a generator of QueueProperties_SpecARM instances for property testing.
func QueueProperties_SpecARMGenerator() gopter.Gen {
	if queueProperties_specARMGenerator != nil {
		return queueProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueueProperties_SpecARM(generators)
	queueProperties_specARMGenerator = gen.Struct(reflect.TypeOf(QueueProperties_SpecARM{}), generators)

	return queueProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForQueueProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQueueProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}
