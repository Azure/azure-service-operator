// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsBlobServicesContainers_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobServicesContainers_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobServicesContainers_SPECARM, StorageAccountsBlobServicesContainers_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobServicesContainers_SPECARM runs a test to see if a specific instance of StorageAccountsBlobServicesContainers_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobServicesContainers_SPECARM(subject StorageAccountsBlobServicesContainers_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobServicesContainers_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobServicesContainers_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsBlobServicesContainers_SPECARMGenerator()
var storageAccountsBlobServicesContainers_specarmGenerator gopter.Gen

// StorageAccountsBlobServicesContainers_SPECARMGenerator returns a generator of StorageAccountsBlobServicesContainers_SPECARM instances for property testing.
// We first initialize storageAccountsBlobServicesContainers_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsBlobServicesContainers_SPECARMGenerator() gopter.Gen {
	if storageAccountsBlobServicesContainers_specarmGenerator != nil {
		return storageAccountsBlobServicesContainers_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainers_SPECARM(generators)
	storageAccountsBlobServicesContainers_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainers_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainers_SPECARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainers_SPECARM(generators)
	storageAccountsBlobServicesContainers_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainers_SPECARM{}), generators)

	return storageAccountsBlobServicesContainers_specarmGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainers_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainers_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainers_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainers_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerProperties_SpecARMGenerator())
}

func Test_ContainerProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProperties_SpecARM, ContainerProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProperties_SpecARM runs a test to see if a specific instance of ContainerProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProperties_SpecARM(subject ContainerProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_SpecARM instances for property testing - lazily instantiated by
//ContainerProperties_SpecARMGenerator()
var containerProperties_specARMGenerator gopter.Gen

// ContainerProperties_SpecARMGenerator returns a generator of ContainerProperties_SpecARM instances for property testing.
// We first initialize containerProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProperties_SpecARMGenerator() gopter.Gen {
	if containerProperties_specARMGenerator != nil {
		return containerProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_SpecARM(generators)
	containerProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForContainerProperties_SpecARM(generators)
	containerProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_SpecARM{}), generators)

	return containerProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["DefaultEncryptionScope"] = gen.PtrOf(gen.AlphaString())
	gens["DenyEncryptionScopeOverride"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["PublicAccess"] = gen.PtrOf(gen.OneConstOf(ContainerProperties_PublicAccess_SpecBlob, ContainerProperties_PublicAccess_SpecContainer, ContainerProperties_PublicAccess_SpecNone))
}

// AddRelatedPropertyGeneratorsForContainerProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["ImmutableStorageWithVersioning"] = gen.PtrOf(ImmutableStorageWithVersioning_SpecARMGenerator())
}

func Test_ImmutableStorageWithVersioning_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutableStorageWithVersioning_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutableStorageWithVersioning_SpecARM, ImmutableStorageWithVersioning_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutableStorageWithVersioning_SpecARM runs a test to see if a specific instance of ImmutableStorageWithVersioning_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutableStorageWithVersioning_SpecARM(subject ImmutableStorageWithVersioning_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutableStorageWithVersioning_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutableStorageWithVersioning_SpecARM instances for property testing - lazily instantiated by
//ImmutableStorageWithVersioning_SpecARMGenerator()
var immutableStorageWithVersioning_specARMGenerator gopter.Gen

// ImmutableStorageWithVersioning_SpecARMGenerator returns a generator of ImmutableStorageWithVersioning_SpecARM instances for property testing.
func ImmutableStorageWithVersioning_SpecARMGenerator() gopter.Gen {
	if immutableStorageWithVersioning_specARMGenerator != nil {
		return immutableStorageWithVersioning_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_SpecARM(generators)
	immutableStorageWithVersioning_specARMGenerator = gen.Struct(reflect.TypeOf(ImmutableStorageWithVersioning_SpecARM{}), generators)

	return immutableStorageWithVersioning_specARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_SpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}
