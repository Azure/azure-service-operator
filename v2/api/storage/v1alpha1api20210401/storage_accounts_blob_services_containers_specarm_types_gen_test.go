// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsBlobServicesContainers_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobServicesContainers_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobServicesContainersSPECARM, StorageAccountsBlobServicesContainersSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobServicesContainersSPECARM runs a test to see if a specific instance of StorageAccountsBlobServicesContainers_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobServicesContainersSPECARM(subject StorageAccountsBlobServicesContainers_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobServicesContainers_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobServicesContainers_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsBlobServicesContainersSPECARMGenerator()
var storageAccountsBlobServicesContainersSPECARMGenerator gopter.Gen

// StorageAccountsBlobServicesContainersSPECARMGenerator returns a generator of StorageAccountsBlobServicesContainers_SPECARM instances for property testing.
// We first initialize storageAccountsBlobServicesContainersSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsBlobServicesContainersSPECARMGenerator() gopter.Gen {
	if storageAccountsBlobServicesContainersSPECARMGenerator != nil {
		return storageAccountsBlobServicesContainersSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainersSPECARM(generators)
	storageAccountsBlobServicesContainersSPECARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainers_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainersSPECARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainersSPECARM(generators)
	storageAccountsBlobServicesContainersSPECARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainers_SPECARM{}), generators)

	return storageAccountsBlobServicesContainersSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainersSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainersSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainersSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainersSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerPropertiesSpecARMGenerator())
}

func Test_ContainerProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPropertiesSpecARM, ContainerPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPropertiesSpecARM runs a test to see if a specific instance of ContainerProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPropertiesSpecARM(subject ContainerProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_SpecARM instances for property testing - lazily instantiated by
//ContainerPropertiesSpecARMGenerator()
var containerPropertiesSpecARMGenerator gopter.Gen

// ContainerPropertiesSpecARMGenerator returns a generator of ContainerProperties_SpecARM instances for property testing.
// We first initialize containerPropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerPropertiesSpecARMGenerator() gopter.Gen {
	if containerPropertiesSpecARMGenerator != nil {
		return containerPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesSpecARM(generators)
	containerPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForContainerPropertiesSpecARM(generators)
	containerPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_SpecARM{}), generators)

	return containerPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["DefaultEncryptionScope"] = gen.PtrOf(gen.AlphaString())
	gens["DenyEncryptionScopeOverride"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["PublicAccess"] = gen.PtrOf(gen.OneConstOf(ContainerPropertiesSpecPublicAccessBlob, ContainerPropertiesSpecPublicAccessContainer, ContainerPropertiesSpecPublicAccessNone))
}

// AddRelatedPropertyGeneratorsForContainerPropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["ImmutableStorageWithVersioning"] = gen.PtrOf(ImmutableStorageWithVersioningSpecARMGenerator())
}

func Test_ImmutableStorageWithVersioning_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutableStorageWithVersioning_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutableStorageWithVersioningSpecARM, ImmutableStorageWithVersioningSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutableStorageWithVersioningSpecARM runs a test to see if a specific instance of ImmutableStorageWithVersioning_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutableStorageWithVersioningSpecARM(subject ImmutableStorageWithVersioning_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutableStorageWithVersioning_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutableStorageWithVersioning_SpecARM instances for property testing - lazily instantiated by
//ImmutableStorageWithVersioningSpecARMGenerator()
var immutableStorageWithVersioningSpecARMGenerator gopter.Gen

// ImmutableStorageWithVersioningSpecARMGenerator returns a generator of ImmutableStorageWithVersioning_SpecARM instances for property testing.
func ImmutableStorageWithVersioningSpecARMGenerator() gopter.Gen {
	if immutableStorageWithVersioningSpecARMGenerator != nil {
		return immutableStorageWithVersioningSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutableStorageWithVersioningSpecARM(generators)
	immutableStorageWithVersioningSpecARMGenerator = gen.Struct(reflect.TypeOf(ImmutableStorageWithVersioning_SpecARM{}), generators)

	return immutableStorageWithVersioningSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutableStorageWithVersioningSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutableStorageWithVersioningSpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}
