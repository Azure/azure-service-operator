// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	alpha20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	v20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1beta20210401storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsManagementPolicy_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from StorageAccountsManagementPolicy to hub returns original",
		prop.ForAll(RunResourceConversionTestForStorageAccountsManagementPolicy, StorageAccountsManagementPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForStorageAccountsManagementPolicy tests if a specific instance of StorageAccountsManagementPolicy round trips to the hub storage version and back losslessly
func RunResourceConversionTestForStorageAccountsManagementPolicy(subject StorageAccountsManagementPolicy) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20210401s.StorageAccountsManagementPolicy
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual StorageAccountsManagementPolicy
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_StorageAccountsManagementPolicy_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from StorageAccountsManagementPolicy to StorageAccountsManagementPolicy via AssignPropertiesToStorageAccountsManagementPolicy & AssignPropertiesFromStorageAccountsManagementPolicy returns original",
		prop.ForAll(RunPropertyAssignmentTestForStorageAccountsManagementPolicy, StorageAccountsManagementPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForStorageAccountsManagementPolicy tests if a specific instance of StorageAccountsManagementPolicy can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForStorageAccountsManagementPolicy(subject StorageAccountsManagementPolicy) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.StorageAccountsManagementPolicy
	err := copied.AssignPropertiesToStorageAccountsManagementPolicy(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual StorageAccountsManagementPolicy
	err = actual.AssignPropertiesFromStorageAccountsManagementPolicy(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_StorageAccountsManagementPolicy_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsManagementPolicy via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsManagementPolicy, StorageAccountsManagementPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsManagementPolicy runs a test to see if a specific instance of StorageAccountsManagementPolicy round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsManagementPolicy(subject StorageAccountsManagementPolicy) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsManagementPolicy
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsManagementPolicy instances for property testing - lazily instantiated by
// StorageAccountsManagementPolicyGenerator()
var storageAccountsManagementPolicyGenerator gopter.Gen

// StorageAccountsManagementPolicyGenerator returns a generator of StorageAccountsManagementPolicy instances for property testing.
func StorageAccountsManagementPolicyGenerator() gopter.Gen {
	if storageAccountsManagementPolicyGenerator != nil {
		return storageAccountsManagementPolicyGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccountsManagementPolicy(generators)
	storageAccountsManagementPolicyGenerator = gen.Struct(reflect.TypeOf(StorageAccountsManagementPolicy{}), generators)

	return storageAccountsManagementPolicyGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccountsManagementPolicy is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsManagementPolicy(gens map[string]gopter.Gen) {
	gens["Spec"] = StorageAccountsManagementPoliciesSpecGenerator()
	gens["Status"] = ManagementPolicySTATUSGenerator()
}

func Test_ManagementPolicy_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicy_STATUS to ManagementPolicy_STATUS via AssignPropertiesToManagementPolicySTATUS & AssignPropertiesFromManagementPolicySTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicySTATUS, ManagementPolicySTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicySTATUS tests if a specific instance of ManagementPolicy_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicySTATUS(subject ManagementPolicy_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicy_STATUS
	err := copied.AssignPropertiesToManagementPolicySTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicy_STATUS
	err = actual.AssignPropertiesFromManagementPolicySTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicy_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicy_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySTATUS, ManagementPolicySTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySTATUS runs a test to see if a specific instance of ManagementPolicy_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySTATUS(subject ManagementPolicy_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicy_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicy_STATUS instances for property testing - lazily instantiated by
// ManagementPolicySTATUSGenerator()
var managementPolicySTATUSGenerator gopter.Gen

// ManagementPolicySTATUSGenerator returns a generator of ManagementPolicy_STATUS instances for property testing.
// We first initialize managementPolicySTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicySTATUSGenerator() gopter.Gen {
	if managementPolicySTATUSGenerator != nil {
		return managementPolicySTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicySTATUS(generators)
	managementPolicySTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicy_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicySTATUS(generators)
	AddRelatedPropertyGeneratorsForManagementPolicySTATUS(generators)
	managementPolicySTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicy_STATUS{}), generators)

	return managementPolicySTATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicySTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicySTATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicySTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySTATUS(gens map[string]gopter.Gen) {
	gens["Policy"] = gen.PtrOf(ManagementPolicySchemaSTATUSGenerator())
}

func Test_StorageAccountsManagementPolicies_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from StorageAccountsManagementPolicies_Spec to StorageAccountsManagementPolicies_Spec via AssignPropertiesToStorageAccountsManagementPoliciesSpec & AssignPropertiesFromStorageAccountsManagementPoliciesSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForStorageAccountsManagementPoliciesSpec, StorageAccountsManagementPoliciesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForStorageAccountsManagementPoliciesSpec tests if a specific instance of StorageAccountsManagementPolicies_Spec can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForStorageAccountsManagementPoliciesSpec(subject StorageAccountsManagementPolicies_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.StorageAccountsManagementPolicies_Spec
	err := copied.AssignPropertiesToStorageAccountsManagementPoliciesSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual StorageAccountsManagementPolicies_Spec
	err = actual.AssignPropertiesFromStorageAccountsManagementPoliciesSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_StorageAccountsManagementPolicies_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsManagementPolicies_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsManagementPoliciesSpec, StorageAccountsManagementPoliciesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsManagementPoliciesSpec runs a test to see if a specific instance of StorageAccountsManagementPolicies_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsManagementPoliciesSpec(subject StorageAccountsManagementPolicies_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsManagementPolicies_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsManagementPolicies_Spec instances for property testing - lazily instantiated by
// StorageAccountsManagementPoliciesSpecGenerator()
var storageAccountsManagementPoliciesSpecGenerator gopter.Gen

// StorageAccountsManagementPoliciesSpecGenerator returns a generator of StorageAccountsManagementPolicies_Spec instances for property testing.
// We first initialize storageAccountsManagementPoliciesSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsManagementPoliciesSpecGenerator() gopter.Gen {
	if storageAccountsManagementPoliciesSpecGenerator != nil {
		return storageAccountsManagementPoliciesSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsManagementPoliciesSpec(generators)
	storageAccountsManagementPoliciesSpecGenerator = gen.Struct(reflect.TypeOf(StorageAccountsManagementPolicies_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsManagementPoliciesSpec(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsManagementPoliciesSpec(generators)
	storageAccountsManagementPoliciesSpecGenerator = gen.Struct(reflect.TypeOf(StorageAccountsManagementPolicies_Spec{}), generators)

	return storageAccountsManagementPoliciesSpecGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsManagementPoliciesSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsManagementPoliciesSpec(gens map[string]gopter.Gen) {
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForStorageAccountsManagementPoliciesSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsManagementPoliciesSpec(gens map[string]gopter.Gen) {
	gens["Policy"] = gen.PtrOf(ManagementPolicySchemaGenerator())
}

func Test_ManagementPolicySchema_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicySchema to ManagementPolicySchema via AssignPropertiesToManagementPolicySchema & AssignPropertiesFromManagementPolicySchema returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicySchema, ManagementPolicySchemaGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicySchema tests if a specific instance of ManagementPolicySchema can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicySchema(subject ManagementPolicySchema) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicySchema
	err := copied.AssignPropertiesToManagementPolicySchema(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicySchema
	err = actual.AssignPropertiesFromManagementPolicySchema(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicySchema_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySchema via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySchema, ManagementPolicySchemaGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySchema runs a test to see if a specific instance of ManagementPolicySchema round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySchema(subject ManagementPolicySchema) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySchema
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySchema instances for property testing - lazily instantiated by
// ManagementPolicySchemaGenerator()
var managementPolicySchemaGenerator gopter.Gen

// ManagementPolicySchemaGenerator returns a generator of ManagementPolicySchema instances for property testing.
func ManagementPolicySchemaGenerator() gopter.Gen {
	if managementPolicySchemaGenerator != nil {
		return managementPolicySchemaGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySchema(generators)
	managementPolicySchemaGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySchema{}), generators)

	return managementPolicySchemaGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySchema is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySchema(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(ManagementPolicyRuleGenerator())
}

func Test_ManagementPolicySchema_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicySchema_STATUS to ManagementPolicySchema_STATUS via AssignPropertiesToManagementPolicySchemaSTATUS & AssignPropertiesFromManagementPolicySchemaSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicySchemaSTATUS, ManagementPolicySchemaSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicySchemaSTATUS tests if a specific instance of ManagementPolicySchema_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicySchemaSTATUS(subject ManagementPolicySchema_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicySchema_STATUS
	err := copied.AssignPropertiesToManagementPolicySchemaSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicySchema_STATUS
	err = actual.AssignPropertiesFromManagementPolicySchemaSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicySchema_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySchema_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySchemaSTATUS, ManagementPolicySchemaSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySchemaSTATUS runs a test to see if a specific instance of ManagementPolicySchema_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySchemaSTATUS(subject ManagementPolicySchema_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySchema_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySchema_STATUS instances for property testing - lazily instantiated by
// ManagementPolicySchemaSTATUSGenerator()
var managementPolicySchemaSTATUSGenerator gopter.Gen

// ManagementPolicySchemaSTATUSGenerator returns a generator of ManagementPolicySchema_STATUS instances for property testing.
func ManagementPolicySchemaSTATUSGenerator() gopter.Gen {
	if managementPolicySchemaSTATUSGenerator != nil {
		return managementPolicySchemaSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySchemaSTATUS(generators)
	managementPolicySchemaSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySchema_STATUS{}), generators)

	return managementPolicySchemaSTATUSGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySchemaSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySchemaSTATUS(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(ManagementPolicyRuleSTATUSGenerator())
}

func Test_ManagementPolicyRule_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyRule to ManagementPolicyRule via AssignPropertiesToManagementPolicyRule & AssignPropertiesFromManagementPolicyRule returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyRule, ManagementPolicyRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyRule tests if a specific instance of ManagementPolicyRule can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyRule(subject ManagementPolicyRule) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyRule
	err := copied.AssignPropertiesToManagementPolicyRule(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyRule
	err = actual.AssignPropertiesFromManagementPolicyRule(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyRule_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyRule via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyRule, ManagementPolicyRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyRule runs a test to see if a specific instance of ManagementPolicyRule round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyRule(subject ManagementPolicyRule) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyRule
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyRule instances for property testing - lazily instantiated by
// ManagementPolicyRuleGenerator()
var managementPolicyRuleGenerator gopter.Gen

// ManagementPolicyRuleGenerator returns a generator of ManagementPolicyRule instances for property testing.
// We first initialize managementPolicyRuleGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyRuleGenerator() gopter.Gen {
	if managementPolicyRuleGenerator != nil {
		return managementPolicyRuleGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRule(generators)
	managementPolicyRuleGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRule(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyRule(generators)
	managementPolicyRuleGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule{}), generators)

	return managementPolicyRuleGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyRule is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyRule(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagementPolicyRuleType_Lifecycle))
}

// AddRelatedPropertyGeneratorsForManagementPolicyRule is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyRule(gens map[string]gopter.Gen) {
	gens["Definition"] = gen.PtrOf(ManagementPolicyDefinitionGenerator())
}

func Test_ManagementPolicyRule_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyRule_STATUS to ManagementPolicyRule_STATUS via AssignPropertiesToManagementPolicyRuleSTATUS & AssignPropertiesFromManagementPolicyRuleSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyRuleSTATUS, ManagementPolicyRuleSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyRuleSTATUS tests if a specific instance of ManagementPolicyRule_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyRuleSTATUS(subject ManagementPolicyRule_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyRule_STATUS
	err := copied.AssignPropertiesToManagementPolicyRuleSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyRule_STATUS
	err = actual.AssignPropertiesFromManagementPolicyRuleSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyRuleSTATUS, ManagementPolicyRuleSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyRuleSTATUS runs a test to see if a specific instance of ManagementPolicyRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyRuleSTATUS(subject ManagementPolicyRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyRule_STATUS instances for property testing - lazily instantiated by
// ManagementPolicyRuleSTATUSGenerator()
var managementPolicyRuleSTATUSGenerator gopter.Gen

// ManagementPolicyRuleSTATUSGenerator returns a generator of ManagementPolicyRule_STATUS instances for property testing.
// We first initialize managementPolicyRuleSTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyRuleSTATUSGenerator() gopter.Gen {
	if managementPolicyRuleSTATUSGenerator != nil {
		return managementPolicyRuleSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUS(generators)
	managementPolicyRuleSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUS(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyRuleSTATUS(generators)
	managementPolicyRuleSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule_STATUS{}), generators)

	return managementPolicyRuleSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUS(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagementPolicyRuleSTATUSType_Lifecycle))
}

// AddRelatedPropertyGeneratorsForManagementPolicyRuleSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyRuleSTATUS(gens map[string]gopter.Gen) {
	gens["Definition"] = gen.PtrOf(ManagementPolicyDefinitionSTATUSGenerator())
}

func Test_ManagementPolicyDefinition_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyDefinition to ManagementPolicyDefinition via AssignPropertiesToManagementPolicyDefinition & AssignPropertiesFromManagementPolicyDefinition returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyDefinition, ManagementPolicyDefinitionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyDefinition tests if a specific instance of ManagementPolicyDefinition can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyDefinition(subject ManagementPolicyDefinition) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyDefinition
	err := copied.AssignPropertiesToManagementPolicyDefinition(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyDefinition
	err = actual.AssignPropertiesFromManagementPolicyDefinition(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyDefinition_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyDefinition via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyDefinition, ManagementPolicyDefinitionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyDefinition runs a test to see if a specific instance of ManagementPolicyDefinition round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyDefinition(subject ManagementPolicyDefinition) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyDefinition
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyDefinition instances for property testing - lazily instantiated by
// ManagementPolicyDefinitionGenerator()
var managementPolicyDefinitionGenerator gopter.Gen

// ManagementPolicyDefinitionGenerator returns a generator of ManagementPolicyDefinition instances for property testing.
func ManagementPolicyDefinitionGenerator() gopter.Gen {
	if managementPolicyDefinitionGenerator != nil {
		return managementPolicyDefinitionGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyDefinition(generators)
	managementPolicyDefinitionGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyDefinition{}), generators)

	return managementPolicyDefinitionGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyDefinition is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyDefinition(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.PtrOf(ManagementPolicyActionGenerator())
	gens["Filters"] = gen.PtrOf(ManagementPolicyFilterGenerator())
}

func Test_ManagementPolicyDefinition_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyDefinition_STATUS to ManagementPolicyDefinition_STATUS via AssignPropertiesToManagementPolicyDefinitionSTATUS & AssignPropertiesFromManagementPolicyDefinitionSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyDefinitionSTATUS, ManagementPolicyDefinitionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyDefinitionSTATUS tests if a specific instance of ManagementPolicyDefinition_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyDefinitionSTATUS(subject ManagementPolicyDefinition_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyDefinition_STATUS
	err := copied.AssignPropertiesToManagementPolicyDefinitionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyDefinition_STATUS
	err = actual.AssignPropertiesFromManagementPolicyDefinitionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyDefinition_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyDefinition_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyDefinitionSTATUS, ManagementPolicyDefinitionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyDefinitionSTATUS runs a test to see if a specific instance of ManagementPolicyDefinition_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyDefinitionSTATUS(subject ManagementPolicyDefinition_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyDefinition_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyDefinition_STATUS instances for property testing - lazily instantiated by
// ManagementPolicyDefinitionSTATUSGenerator()
var managementPolicyDefinitionSTATUSGenerator gopter.Gen

// ManagementPolicyDefinitionSTATUSGenerator returns a generator of ManagementPolicyDefinition_STATUS instances for property testing.
func ManagementPolicyDefinitionSTATUSGenerator() gopter.Gen {
	if managementPolicyDefinitionSTATUSGenerator != nil {
		return managementPolicyDefinitionSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyDefinitionSTATUS(generators)
	managementPolicyDefinitionSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyDefinition_STATUS{}), generators)

	return managementPolicyDefinitionSTATUSGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyDefinitionSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyDefinitionSTATUS(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.PtrOf(ManagementPolicyActionSTATUSGenerator())
	gens["Filters"] = gen.PtrOf(ManagementPolicyFilterSTATUSGenerator())
}

func Test_ManagementPolicyAction_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyAction to ManagementPolicyAction via AssignPropertiesToManagementPolicyAction & AssignPropertiesFromManagementPolicyAction returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyAction, ManagementPolicyActionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyAction tests if a specific instance of ManagementPolicyAction can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyAction(subject ManagementPolicyAction) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyAction
	err := copied.AssignPropertiesToManagementPolicyAction(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyAction
	err = actual.AssignPropertiesFromManagementPolicyAction(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyAction_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyAction via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyAction, ManagementPolicyActionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyAction runs a test to see if a specific instance of ManagementPolicyAction round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyAction(subject ManagementPolicyAction) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyAction
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyAction instances for property testing - lazily instantiated by
// ManagementPolicyActionGenerator()
var managementPolicyActionGenerator gopter.Gen

// ManagementPolicyActionGenerator returns a generator of ManagementPolicyAction instances for property testing.
func ManagementPolicyActionGenerator() gopter.Gen {
	if managementPolicyActionGenerator != nil {
		return managementPolicyActionGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyAction(generators)
	managementPolicyActionGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyAction{}), generators)

	return managementPolicyActionGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyAction is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyAction(gens map[string]gopter.Gen) {
	gens["BaseBlob"] = gen.PtrOf(ManagementPolicyBaseBlobGenerator())
	gens["Snapshot"] = gen.PtrOf(ManagementPolicySnapShotGenerator())
	gens["Version"] = gen.PtrOf(ManagementPolicyVersionGenerator())
}

func Test_ManagementPolicyAction_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyAction_STATUS to ManagementPolicyAction_STATUS via AssignPropertiesToManagementPolicyActionSTATUS & AssignPropertiesFromManagementPolicyActionSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyActionSTATUS, ManagementPolicyActionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyActionSTATUS tests if a specific instance of ManagementPolicyAction_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyActionSTATUS(subject ManagementPolicyAction_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyAction_STATUS
	err := copied.AssignPropertiesToManagementPolicyActionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyAction_STATUS
	err = actual.AssignPropertiesFromManagementPolicyActionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyAction_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyAction_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyActionSTATUS, ManagementPolicyActionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyActionSTATUS runs a test to see if a specific instance of ManagementPolicyAction_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyActionSTATUS(subject ManagementPolicyAction_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyAction_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyAction_STATUS instances for property testing - lazily instantiated by
// ManagementPolicyActionSTATUSGenerator()
var managementPolicyActionSTATUSGenerator gopter.Gen

// ManagementPolicyActionSTATUSGenerator returns a generator of ManagementPolicyAction_STATUS instances for property testing.
func ManagementPolicyActionSTATUSGenerator() gopter.Gen {
	if managementPolicyActionSTATUSGenerator != nil {
		return managementPolicyActionSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyActionSTATUS(generators)
	managementPolicyActionSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyAction_STATUS{}), generators)

	return managementPolicyActionSTATUSGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyActionSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyActionSTATUS(gens map[string]gopter.Gen) {
	gens["BaseBlob"] = gen.PtrOf(ManagementPolicyBaseBlobSTATUSGenerator())
	gens["Snapshot"] = gen.PtrOf(ManagementPolicySnapShotSTATUSGenerator())
	gens["Version"] = gen.PtrOf(ManagementPolicyVersionSTATUSGenerator())
}

func Test_ManagementPolicyFilter_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyFilter to ManagementPolicyFilter via AssignPropertiesToManagementPolicyFilter & AssignPropertiesFromManagementPolicyFilter returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyFilter, ManagementPolicyFilterGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyFilter tests if a specific instance of ManagementPolicyFilter can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyFilter(subject ManagementPolicyFilter) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyFilter
	err := copied.AssignPropertiesToManagementPolicyFilter(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyFilter
	err = actual.AssignPropertiesFromManagementPolicyFilter(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyFilter_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyFilter via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyFilter, ManagementPolicyFilterGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyFilter runs a test to see if a specific instance of ManagementPolicyFilter round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyFilter(subject ManagementPolicyFilter) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyFilter
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyFilter instances for property testing - lazily instantiated by
// ManagementPolicyFilterGenerator()
var managementPolicyFilterGenerator gopter.Gen

// ManagementPolicyFilterGenerator returns a generator of ManagementPolicyFilter instances for property testing.
// We first initialize managementPolicyFilterGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyFilterGenerator() gopter.Gen {
	if managementPolicyFilterGenerator != nil {
		return managementPolicyFilterGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilter(generators)
	managementPolicyFilterGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilter(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyFilter(generators)
	managementPolicyFilterGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter{}), generators)

	return managementPolicyFilterGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyFilter is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyFilter(gens map[string]gopter.Gen) {
	gens["BlobTypes"] = gen.SliceOf(gen.AlphaString())
	gens["PrefixMatch"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicyFilter is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyFilter(gens map[string]gopter.Gen) {
	gens["BlobIndexMatch"] = gen.SliceOf(TagFilterGenerator())
}

func Test_ManagementPolicyFilter_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyFilter_STATUS to ManagementPolicyFilter_STATUS via AssignPropertiesToManagementPolicyFilterSTATUS & AssignPropertiesFromManagementPolicyFilterSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyFilterSTATUS, ManagementPolicyFilterSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyFilterSTATUS tests if a specific instance of ManagementPolicyFilter_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyFilterSTATUS(subject ManagementPolicyFilter_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyFilter_STATUS
	err := copied.AssignPropertiesToManagementPolicyFilterSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyFilter_STATUS
	err = actual.AssignPropertiesFromManagementPolicyFilterSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyFilter_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyFilter_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyFilterSTATUS, ManagementPolicyFilterSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyFilterSTATUS runs a test to see if a specific instance of ManagementPolicyFilter_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyFilterSTATUS(subject ManagementPolicyFilter_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyFilter_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyFilter_STATUS instances for property testing - lazily instantiated by
// ManagementPolicyFilterSTATUSGenerator()
var managementPolicyFilterSTATUSGenerator gopter.Gen

// ManagementPolicyFilterSTATUSGenerator returns a generator of ManagementPolicyFilter_STATUS instances for property testing.
// We first initialize managementPolicyFilterSTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyFilterSTATUSGenerator() gopter.Gen {
	if managementPolicyFilterSTATUSGenerator != nil {
		return managementPolicyFilterSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUS(generators)
	managementPolicyFilterSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUS(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyFilterSTATUS(generators)
	managementPolicyFilterSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter_STATUS{}), generators)

	return managementPolicyFilterSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUS(gens map[string]gopter.Gen) {
	gens["BlobTypes"] = gen.SliceOf(gen.AlphaString())
	gens["PrefixMatch"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicyFilterSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyFilterSTATUS(gens map[string]gopter.Gen) {
	gens["BlobIndexMatch"] = gen.SliceOf(TagFilterSTATUSGenerator())
}

func Test_ManagementPolicyBaseBlob_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyBaseBlob to ManagementPolicyBaseBlob via AssignPropertiesToManagementPolicyBaseBlob & AssignPropertiesFromManagementPolicyBaseBlob returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyBaseBlob, ManagementPolicyBaseBlobGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyBaseBlob tests if a specific instance of ManagementPolicyBaseBlob can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyBaseBlob(subject ManagementPolicyBaseBlob) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyBaseBlob
	err := copied.AssignPropertiesToManagementPolicyBaseBlob(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyBaseBlob
	err = actual.AssignPropertiesFromManagementPolicyBaseBlob(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyBaseBlob_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyBaseBlob via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyBaseBlob, ManagementPolicyBaseBlobGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyBaseBlob runs a test to see if a specific instance of ManagementPolicyBaseBlob round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyBaseBlob(subject ManagementPolicyBaseBlob) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyBaseBlob
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyBaseBlob instances for property testing - lazily instantiated by
// ManagementPolicyBaseBlobGenerator()
var managementPolicyBaseBlobGenerator gopter.Gen

// ManagementPolicyBaseBlobGenerator returns a generator of ManagementPolicyBaseBlob instances for property testing.
// We first initialize managementPolicyBaseBlobGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyBaseBlobGenerator() gopter.Gen {
	if managementPolicyBaseBlobGenerator != nil {
		return managementPolicyBaseBlobGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob(generators)
	managementPolicyBaseBlobGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyBaseBlob(generators)
	managementPolicyBaseBlobGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob{}), generators)

	return managementPolicyBaseBlobGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyBaseBlob(gens map[string]gopter.Gen) {
	gens["EnableAutoTierToHotFromCool"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagementPolicyBaseBlob is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyBaseBlob(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterModificationGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterModificationGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterModificationGenerator())
}

func Test_ManagementPolicyBaseBlob_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyBaseBlob_STATUS to ManagementPolicyBaseBlob_STATUS via AssignPropertiesToManagementPolicyBaseBlobSTATUS & AssignPropertiesFromManagementPolicyBaseBlobSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyBaseBlobSTATUS, ManagementPolicyBaseBlobSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyBaseBlobSTATUS tests if a specific instance of ManagementPolicyBaseBlob_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyBaseBlobSTATUS(subject ManagementPolicyBaseBlob_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyBaseBlob_STATUS
	err := copied.AssignPropertiesToManagementPolicyBaseBlobSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyBaseBlob_STATUS
	err = actual.AssignPropertiesFromManagementPolicyBaseBlobSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyBaseBlob_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyBaseBlob_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyBaseBlobSTATUS, ManagementPolicyBaseBlobSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyBaseBlobSTATUS runs a test to see if a specific instance of ManagementPolicyBaseBlob_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyBaseBlobSTATUS(subject ManagementPolicyBaseBlob_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyBaseBlob_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyBaseBlob_STATUS instances for property testing - lazily instantiated by
// ManagementPolicyBaseBlobSTATUSGenerator()
var managementPolicyBaseBlobSTATUSGenerator gopter.Gen

// ManagementPolicyBaseBlobSTATUSGenerator returns a generator of ManagementPolicyBaseBlob_STATUS instances for property testing.
// We first initialize managementPolicyBaseBlobSTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyBaseBlobSTATUSGenerator() gopter.Gen {
	if managementPolicyBaseBlobSTATUSGenerator != nil {
		return managementPolicyBaseBlobSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUS(generators)
	managementPolicyBaseBlobSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUS(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyBaseBlobSTATUS(generators)
	managementPolicyBaseBlobSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob_STATUS{}), generators)

	return managementPolicyBaseBlobSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUS(gens map[string]gopter.Gen) {
	gens["EnableAutoTierToHotFromCool"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagementPolicyBaseBlobSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyBaseBlobSTATUS(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterModificationSTATUSGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterModificationSTATUSGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterModificationSTATUSGenerator())
}

func Test_ManagementPolicySnapShot_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicySnapShot to ManagementPolicySnapShot via AssignPropertiesToManagementPolicySnapShot & AssignPropertiesFromManagementPolicySnapShot returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicySnapShot, ManagementPolicySnapShotGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicySnapShot tests if a specific instance of ManagementPolicySnapShot can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicySnapShot(subject ManagementPolicySnapShot) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicySnapShot
	err := copied.AssignPropertiesToManagementPolicySnapShot(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicySnapShot
	err = actual.AssignPropertiesFromManagementPolicySnapShot(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicySnapShot_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySnapShot via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySnapShot, ManagementPolicySnapShotGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySnapShot runs a test to see if a specific instance of ManagementPolicySnapShot round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySnapShot(subject ManagementPolicySnapShot) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySnapShot
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySnapShot instances for property testing - lazily instantiated by
// ManagementPolicySnapShotGenerator()
var managementPolicySnapShotGenerator gopter.Gen

// ManagementPolicySnapShotGenerator returns a generator of ManagementPolicySnapShot instances for property testing.
func ManagementPolicySnapShotGenerator() gopter.Gen {
	if managementPolicySnapShotGenerator != nil {
		return managementPolicySnapShotGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySnapShot(generators)
	managementPolicySnapShotGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySnapShot{}), generators)

	return managementPolicySnapShotGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySnapShot is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySnapShot(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreationGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreationGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreationGenerator())
}

func Test_ManagementPolicySnapShot_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicySnapShot_STATUS to ManagementPolicySnapShot_STATUS via AssignPropertiesToManagementPolicySnapShotSTATUS & AssignPropertiesFromManagementPolicySnapShotSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicySnapShotSTATUS, ManagementPolicySnapShotSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicySnapShotSTATUS tests if a specific instance of ManagementPolicySnapShot_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicySnapShotSTATUS(subject ManagementPolicySnapShot_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicySnapShot_STATUS
	err := copied.AssignPropertiesToManagementPolicySnapShotSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicySnapShot_STATUS
	err = actual.AssignPropertiesFromManagementPolicySnapShotSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicySnapShot_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySnapShot_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySnapShotSTATUS, ManagementPolicySnapShotSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySnapShotSTATUS runs a test to see if a specific instance of ManagementPolicySnapShot_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySnapShotSTATUS(subject ManagementPolicySnapShot_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySnapShot_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySnapShot_STATUS instances for property testing - lazily instantiated by
// ManagementPolicySnapShotSTATUSGenerator()
var managementPolicySnapShotSTATUSGenerator gopter.Gen

// ManagementPolicySnapShotSTATUSGenerator returns a generator of ManagementPolicySnapShot_STATUS instances for property testing.
func ManagementPolicySnapShotSTATUSGenerator() gopter.Gen {
	if managementPolicySnapShotSTATUSGenerator != nil {
		return managementPolicySnapShotSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySnapShotSTATUS(generators)
	managementPolicySnapShotSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySnapShot_STATUS{}), generators)

	return managementPolicySnapShotSTATUSGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySnapShotSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySnapShotSTATUS(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreationSTATUSGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreationSTATUSGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreationSTATUSGenerator())
}

func Test_ManagementPolicyVersion_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyVersion to ManagementPolicyVersion via AssignPropertiesToManagementPolicyVersion & AssignPropertiesFromManagementPolicyVersion returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyVersion, ManagementPolicyVersionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyVersion tests if a specific instance of ManagementPolicyVersion can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyVersion(subject ManagementPolicyVersion) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyVersion
	err := copied.AssignPropertiesToManagementPolicyVersion(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyVersion
	err = actual.AssignPropertiesFromManagementPolicyVersion(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyVersion_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyVersion via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyVersion, ManagementPolicyVersionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyVersion runs a test to see if a specific instance of ManagementPolicyVersion round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyVersion(subject ManagementPolicyVersion) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyVersion
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyVersion instances for property testing - lazily instantiated by
// ManagementPolicyVersionGenerator()
var managementPolicyVersionGenerator gopter.Gen

// ManagementPolicyVersionGenerator returns a generator of ManagementPolicyVersion instances for property testing.
func ManagementPolicyVersionGenerator() gopter.Gen {
	if managementPolicyVersionGenerator != nil {
		return managementPolicyVersionGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyVersion(generators)
	managementPolicyVersionGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyVersion{}), generators)

	return managementPolicyVersionGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyVersion is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyVersion(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreationGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreationGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreationGenerator())
}

func Test_ManagementPolicyVersion_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagementPolicyVersion_STATUS to ManagementPolicyVersion_STATUS via AssignPropertiesToManagementPolicyVersionSTATUS & AssignPropertiesFromManagementPolicyVersionSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagementPolicyVersionSTATUS, ManagementPolicyVersionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagementPolicyVersionSTATUS tests if a specific instance of ManagementPolicyVersion_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForManagementPolicyVersionSTATUS(subject ManagementPolicyVersion_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.ManagementPolicyVersion_STATUS
	err := copied.AssignPropertiesToManagementPolicyVersionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagementPolicyVersion_STATUS
	err = actual.AssignPropertiesFromManagementPolicyVersionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagementPolicyVersion_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyVersion_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyVersionSTATUS, ManagementPolicyVersionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyVersionSTATUS runs a test to see if a specific instance of ManagementPolicyVersion_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyVersionSTATUS(subject ManagementPolicyVersion_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyVersion_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyVersion_STATUS instances for property testing - lazily instantiated by
// ManagementPolicyVersionSTATUSGenerator()
var managementPolicyVersionSTATUSGenerator gopter.Gen

// ManagementPolicyVersionSTATUSGenerator returns a generator of ManagementPolicyVersion_STATUS instances for property testing.
func ManagementPolicyVersionSTATUSGenerator() gopter.Gen {
	if managementPolicyVersionSTATUSGenerator != nil {
		return managementPolicyVersionSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyVersionSTATUS(generators)
	managementPolicyVersionSTATUSGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyVersion_STATUS{}), generators)

	return managementPolicyVersionSTATUSGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyVersionSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyVersionSTATUS(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreationSTATUSGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreationSTATUSGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreationSTATUSGenerator())
}

func Test_TagFilter_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TagFilter to TagFilter via AssignPropertiesToTagFilter & AssignPropertiesFromTagFilter returns original",
		prop.ForAll(RunPropertyAssignmentTestForTagFilter, TagFilterGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTagFilter tests if a specific instance of TagFilter can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForTagFilter(subject TagFilter) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.TagFilter
	err := copied.AssignPropertiesToTagFilter(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TagFilter
	err = actual.AssignPropertiesFromTagFilter(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TagFilter_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TagFilter via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTagFilter, TagFilterGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTagFilter runs a test to see if a specific instance of TagFilter round trips to JSON and back losslessly
func RunJSONSerializationTestForTagFilter(subject TagFilter) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TagFilter
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TagFilter instances for property testing - lazily instantiated by TagFilterGenerator()
var tagFilterGenerator gopter.Gen

// TagFilterGenerator returns a generator of TagFilter instances for property testing.
func TagFilterGenerator() gopter.Gen {
	if tagFilterGenerator != nil {
		return tagFilterGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTagFilter(generators)
	tagFilterGenerator = gen.Struct(reflect.TypeOf(TagFilter{}), generators)

	return tagFilterGenerator
}

// AddIndependentPropertyGeneratorsForTagFilter is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTagFilter(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Op"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_TagFilter_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TagFilter_STATUS to TagFilter_STATUS via AssignPropertiesToTagFilterSTATUS & AssignPropertiesFromTagFilterSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForTagFilterSTATUS, TagFilterSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTagFilterSTATUS tests if a specific instance of TagFilter_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForTagFilterSTATUS(subject TagFilter_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.TagFilter_STATUS
	err := copied.AssignPropertiesToTagFilterSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TagFilter_STATUS
	err = actual.AssignPropertiesFromTagFilterSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TagFilter_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TagFilter_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTagFilterSTATUS, TagFilterSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTagFilterSTATUS runs a test to see if a specific instance of TagFilter_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTagFilterSTATUS(subject TagFilter_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TagFilter_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TagFilter_STATUS instances for property testing - lazily instantiated by TagFilterSTATUSGenerator()
var tagFilterSTATUSGenerator gopter.Gen

// TagFilterSTATUSGenerator returns a generator of TagFilter_STATUS instances for property testing.
func TagFilterSTATUSGenerator() gopter.Gen {
	if tagFilterSTATUSGenerator != nil {
		return tagFilterSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTagFilterSTATUS(generators)
	tagFilterSTATUSGenerator = gen.Struct(reflect.TypeOf(TagFilter_STATUS{}), generators)

	return tagFilterSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForTagFilterSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTagFilterSTATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Op"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_DateAfterCreation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DateAfterCreation to DateAfterCreation via AssignPropertiesToDateAfterCreation & AssignPropertiesFromDateAfterCreation returns original",
		prop.ForAll(RunPropertyAssignmentTestForDateAfterCreation, DateAfterCreationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDateAfterCreation tests if a specific instance of DateAfterCreation can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForDateAfterCreation(subject DateAfterCreation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.DateAfterCreation
	err := copied.AssignPropertiesToDateAfterCreation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DateAfterCreation
	err = actual.AssignPropertiesFromDateAfterCreation(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DateAfterCreation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterCreation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterCreation, DateAfterCreationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterCreation runs a test to see if a specific instance of DateAfterCreation round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterCreation(subject DateAfterCreation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterCreation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterCreation instances for property testing - lazily instantiated by DateAfterCreationGenerator()
var dateAfterCreationGenerator gopter.Gen

// DateAfterCreationGenerator returns a generator of DateAfterCreation instances for property testing.
func DateAfterCreationGenerator() gopter.Gen {
	if dateAfterCreationGenerator != nil {
		return dateAfterCreationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterCreation(generators)
	dateAfterCreationGenerator = gen.Struct(reflect.TypeOf(DateAfterCreation{}), generators)

	return dateAfterCreationGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterCreation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterCreation(gens map[string]gopter.Gen) {
	gens["DaysAfterCreationGreaterThan"] = gen.PtrOf(gen.Int())
}

func Test_DateAfterCreation_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DateAfterCreation_STATUS to DateAfterCreation_STATUS via AssignPropertiesToDateAfterCreationSTATUS & AssignPropertiesFromDateAfterCreationSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForDateAfterCreationSTATUS, DateAfterCreationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDateAfterCreationSTATUS tests if a specific instance of DateAfterCreation_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForDateAfterCreationSTATUS(subject DateAfterCreation_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.DateAfterCreation_STATUS
	err := copied.AssignPropertiesToDateAfterCreationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DateAfterCreation_STATUS
	err = actual.AssignPropertiesFromDateAfterCreationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DateAfterCreation_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterCreation_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterCreationSTATUS, DateAfterCreationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterCreationSTATUS runs a test to see if a specific instance of DateAfterCreation_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterCreationSTATUS(subject DateAfterCreation_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterCreation_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterCreation_STATUS instances for property testing - lazily instantiated by
// DateAfterCreationSTATUSGenerator()
var dateAfterCreationSTATUSGenerator gopter.Gen

// DateAfterCreationSTATUSGenerator returns a generator of DateAfterCreation_STATUS instances for property testing.
func DateAfterCreationSTATUSGenerator() gopter.Gen {
	if dateAfterCreationSTATUSGenerator != nil {
		return dateAfterCreationSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterCreationSTATUS(generators)
	dateAfterCreationSTATUSGenerator = gen.Struct(reflect.TypeOf(DateAfterCreation_STATUS{}), generators)

	return dateAfterCreationSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterCreationSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterCreationSTATUS(gens map[string]gopter.Gen) {
	gens["DaysAfterCreationGreaterThan"] = gen.PtrOf(gen.Float64())
}

func Test_DateAfterModification_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DateAfterModification to DateAfterModification via AssignPropertiesToDateAfterModification & AssignPropertiesFromDateAfterModification returns original",
		prop.ForAll(RunPropertyAssignmentTestForDateAfterModification, DateAfterModificationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDateAfterModification tests if a specific instance of DateAfterModification can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForDateAfterModification(subject DateAfterModification) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.DateAfterModification
	err := copied.AssignPropertiesToDateAfterModification(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DateAfterModification
	err = actual.AssignPropertiesFromDateAfterModification(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DateAfterModification_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterModification via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterModification, DateAfterModificationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterModification runs a test to see if a specific instance of DateAfterModification round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterModification(subject DateAfterModification) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterModification
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterModification instances for property testing - lazily instantiated by
// DateAfterModificationGenerator()
var dateAfterModificationGenerator gopter.Gen

// DateAfterModificationGenerator returns a generator of DateAfterModification instances for property testing.
func DateAfterModificationGenerator() gopter.Gen {
	if dateAfterModificationGenerator != nil {
		return dateAfterModificationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterModification(generators)
	dateAfterModificationGenerator = gen.Struct(reflect.TypeOf(DateAfterModification{}), generators)

	return dateAfterModificationGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterModification is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterModification(gens map[string]gopter.Gen) {
	gens["DaysAfterLastAccessTimeGreaterThan"] = gen.PtrOf(gen.Int())
	gens["DaysAfterModificationGreaterThan"] = gen.PtrOf(gen.Int())
}

func Test_DateAfterModification_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DateAfterModification_STATUS to DateAfterModification_STATUS via AssignPropertiesToDateAfterModificationSTATUS & AssignPropertiesFromDateAfterModificationSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForDateAfterModificationSTATUS, DateAfterModificationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDateAfterModificationSTATUS tests if a specific instance of DateAfterModification_STATUS can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForDateAfterModificationSTATUS(subject DateAfterModification_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210401s.DateAfterModification_STATUS
	err := copied.AssignPropertiesToDateAfterModificationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DateAfterModification_STATUS
	err = actual.AssignPropertiesFromDateAfterModificationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DateAfterModification_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterModification_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterModificationSTATUS, DateAfterModificationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterModificationSTATUS runs a test to see if a specific instance of DateAfterModification_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterModificationSTATUS(subject DateAfterModification_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterModification_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterModification_STATUS instances for property testing - lazily instantiated by
// DateAfterModificationSTATUSGenerator()
var dateAfterModificationSTATUSGenerator gopter.Gen

// DateAfterModificationSTATUSGenerator returns a generator of DateAfterModification_STATUS instances for property testing.
func DateAfterModificationSTATUSGenerator() gopter.Gen {
	if dateAfterModificationSTATUSGenerator != nil {
		return dateAfterModificationSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterModificationSTATUS(generators)
	dateAfterModificationSTATUSGenerator = gen.Struct(reflect.TypeOf(DateAfterModification_STATUS{}), generators)

	return dateAfterModificationSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterModificationSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterModificationSTATUS(gens map[string]gopter.Gen) {
	gens["DaysAfterLastAccessTimeGreaterThan"] = gen.PtrOf(gen.Float64())
	gens["DaysAfterModificationGreaterThan"] = gen.PtrOf(gen.Float64())
}
