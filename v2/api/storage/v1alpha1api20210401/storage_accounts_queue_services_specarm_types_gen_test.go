// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsQueueServices_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueServices_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueServices_SPECARM, StorageAccountsQueueServices_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueServices_SPECARM runs a test to see if a specific instance of StorageAccountsQueueServices_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueServices_SPECARM(subject StorageAccountsQueueServices_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueServices_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueServices_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsQueueServices_SPECARMGenerator()
var storageAccountsQueueServices_specarmGenerator gopter.Gen

// StorageAccountsQueueServices_SPECARMGenerator returns a generator of StorageAccountsQueueServices_SPECARM instances for property testing.
// We first initialize storageAccountsQueueServices_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsQueueServices_SPECARMGenerator() gopter.Gen {
	if storageAccountsQueueServices_specarmGenerator != nil {
		return storageAccountsQueueServices_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServices_SPECARM(generators)
	storageAccountsQueueServices_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServices_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServices_SPECARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueServices_SPECARM(generators)
	storageAccountsQueueServices_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServices_SPECARM{}), generators)

	return storageAccountsQueueServices_specarmGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsQueueServices_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsQueueServices_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueServices_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueServices_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageAccountsQueueServices_Properties_SPECARMGenerator())
}

func Test_StorageAccountsQueueServices_Properties_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueServices_Properties_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueServices_Properties_SPECARM, StorageAccountsQueueServices_Properties_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueServices_Properties_SPECARM runs a test to see if a specific instance of StorageAccountsQueueServices_Properties_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueServices_Properties_SPECARM(subject StorageAccountsQueueServices_Properties_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueServices_Properties_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueServices_Properties_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsQueueServices_Properties_SPECARMGenerator()
var storageAccountsQueueServices_properties_specarmGenerator gopter.Gen

// StorageAccountsQueueServices_Properties_SPECARMGenerator returns a generator of StorageAccountsQueueServices_Properties_SPECARM instances for property testing.
func StorageAccountsQueueServices_Properties_SPECARMGenerator() gopter.Gen {
	if storageAccountsQueueServices_properties_specarmGenerator != nil {
		return storageAccountsQueueServices_properties_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueServices_Properties_SPECARM(generators)
	storageAccountsQueueServices_properties_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServices_Properties_SPECARM{}), generators)

	return storageAccountsQueueServices_properties_specarmGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueServices_Properties_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueServices_Properties_SPECARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(CorsRules_SpecARMGenerator())
}
