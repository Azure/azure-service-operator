// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsQueueServices_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueServices_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueServicesSPECARM, StorageAccountsQueueServicesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueServicesSPECARM runs a test to see if a specific instance of StorageAccountsQueueServices_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueServicesSPECARM(subject StorageAccountsQueueServices_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueServices_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueServices_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsQueueServicesSPECARMGenerator()
var storageAccountsQueueServicesSPECARMGenerator gopter.Gen

// StorageAccountsQueueServicesSPECARMGenerator returns a generator of StorageAccountsQueueServices_SPECARM instances for property testing.
// We first initialize storageAccountsQueueServicesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsQueueServicesSPECARMGenerator() gopter.Gen {
	if storageAccountsQueueServicesSPECARMGenerator != nil {
		return storageAccountsQueueServicesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesSPECARM(generators)
	storageAccountsQueueServicesSPECARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServices_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesSPECARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesSPECARM(generators)
	storageAccountsQueueServicesSPECARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServices_SPECARM{}), generators)

	return storageAccountsQueueServicesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageAccountsQueueServicesSPECPropertiesARMGenerator())
}

func Test_StorageAccountsQueueServices_SPEC_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueServices_SPEC_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueServicesSPECPropertiesARM, StorageAccountsQueueServicesSPECPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueServicesSPECPropertiesARM runs a test to see if a specific instance of StorageAccountsQueueServices_SPEC_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueServicesSPECPropertiesARM(subject StorageAccountsQueueServices_SPEC_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueServices_SPEC_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueServices_SPEC_PropertiesARM instances for property testing - lazily instantiated by
//StorageAccountsQueueServicesSPECPropertiesARMGenerator()
var storageAccountsQueueServicesSPECPropertiesARMGenerator gopter.Gen

// StorageAccountsQueueServicesSPECPropertiesARMGenerator returns a generator of StorageAccountsQueueServices_SPEC_PropertiesARM instances for property testing.
func StorageAccountsQueueServicesSPECPropertiesARMGenerator() gopter.Gen {
	if storageAccountsQueueServicesSPECPropertiesARMGenerator != nil {
		return storageAccountsQueueServicesSPECPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesSPECPropertiesARM(generators)
	storageAccountsQueueServicesSPECPropertiesARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServices_SPEC_PropertiesARM{}), generators)

	return storageAccountsQueueServicesSPECPropertiesARMGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesSPECPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesSPECPropertiesARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(CorsRulesSpecARMGenerator())
}
