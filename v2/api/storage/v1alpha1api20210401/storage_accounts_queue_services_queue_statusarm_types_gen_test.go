// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsQueueServicesQueue_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsQueueServicesQueue_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsQueueServicesQueue_STATUSARM, StorageAccountsQueueServicesQueue_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsQueueServicesQueue_STATUSARM runs a test to see if a specific instance of StorageAccountsQueueServicesQueue_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsQueueServicesQueue_STATUSARM(subject StorageAccountsQueueServicesQueue_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsQueueServicesQueue_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsQueueServicesQueue_STATUSARM instances for property testing - lazily instantiated by
// StorageAccountsQueueServicesQueue_STATUSARMGenerator()
var storageAccountsQueueServicesQueue_STATUSARMGenerator gopter.Gen

// StorageAccountsQueueServicesQueue_STATUSARMGenerator returns a generator of StorageAccountsQueueServicesQueue_STATUSARM instances for property testing.
// We first initialize storageAccountsQueueServicesQueue_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsQueueServicesQueue_STATUSARMGenerator() gopter.Gen {
	if storageAccountsQueueServicesQueue_STATUSARMGenerator != nil {
		return storageAccountsQueueServicesQueue_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_STATUSARM(generators)
	storageAccountsQueueServicesQueue_STATUSARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServicesQueue_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueue_STATUSARM(generators)
	storageAccountsQueueServicesQueue_STATUSARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsQueueServicesQueue_STATUSARM{}), generators)

	return storageAccountsQueueServicesQueue_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsQueueServicesQueue_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueue_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsQueueServicesQueue_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QueueProperties_STATUSARMGenerator())
}

func Test_QueueProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueueProperties_STATUSARM, QueueProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueueProperties_STATUSARM runs a test to see if a specific instance of QueueProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueueProperties_STATUSARM(subject QueueProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueProperties_STATUSARM instances for property testing - lazily instantiated by
// QueueProperties_STATUSARMGenerator()
var queueProperties_STATUSARMGenerator gopter.Gen

// QueueProperties_STATUSARMGenerator returns a generator of QueueProperties_STATUSARM instances for property testing.
func QueueProperties_STATUSARMGenerator() gopter.Gen {
	if queueProperties_STATUSARMGenerator != nil {
		return queueProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueueProperties_STATUSARM(generators)
	queueProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(QueueProperties_STATUSARM{}), generators)

	return queueProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForQueueProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQueueProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ApproximateMessageCount"] = gen.PtrOf(gen.Int())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}
