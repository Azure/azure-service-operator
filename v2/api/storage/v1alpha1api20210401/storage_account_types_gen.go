// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /storage/resource-manager/Microsoft.Storage/stable/2021-04-01/storage.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}
type StorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_SPEC  `json:"spec,omitempty"`
	Status            StorageAccount_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccount{}

// GetConditions returns the conditions of the resource
func (account *StorageAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *StorageAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccount{}

// ConvertFrom populates our StorageAccount from the provided hub StorageAccount
func (account *StorageAccount) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210401storage.StorageAccount)
	if !ok {
		return fmt.Errorf("expected storage:storage/v1alpha1api20210401storage/StorageAccount but received %T instead", hub)
	}

	return account.AssignPropertiesFromStorageAccount(source)
}

// ConvertTo populates the provided hub StorageAccount from our StorageAccount
func (account *StorageAccount) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210401storage.StorageAccount)
	if !ok {
		return fmt.Errorf("expected storage:storage/v1alpha1api20210401storage/StorageAccount but received %T instead", hub)
	}

	return account.AssignPropertiesToStorageAccount(destination)
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1alpha1api20210401-storageaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccounts.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &StorageAccount{}

// Default applies defaults to the StorageAccount resource
func (account *StorageAccount) Default() {
	account.defaultImpl()
	var temp interface{} = account
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (account *StorageAccount) defaultAzureName() {
	if account.Spec.AzureName == "" {
		account.Spec.AzureName = account.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccount resource
func (account *StorageAccount) defaultImpl() { account.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccount{}

// AzureName returns the Azure name of the resource
func (account *StorageAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (account StorageAccount) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (account *StorageAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (account *StorageAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *StorageAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (account *StorageAccount) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (account *StorageAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccount_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *StorageAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *StorageAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccount_Status); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccount_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1alpha1api20210401-storageaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccounts.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &StorageAccount{}

// ValidateCreate validates the creation of the resource
func (account *StorageAccount) ValidateCreate() error {
	validations := account.createValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (account *StorageAccount) ValidateDelete() error {
	validations := account.deleteValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (account *StorageAccount) ValidateUpdate(old runtime.Object) error {
	validations := account.updateValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (account *StorageAccount) createValidations() []func() error {
	return []func() error{account.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (account *StorageAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (account *StorageAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return account.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (account *StorageAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&account.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromStorageAccount populates our StorageAccount from the provided source StorageAccount
func (account *StorageAccount) AssignPropertiesFromStorageAccount(source *v1alpha1api20210401storage.StorageAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccounts_SPEC
	err := spec.AssignPropertiesFromStorageAccounts_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccounts_SPEC() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status StorageAccount_Status
	err = status.AssignPropertiesFromStorageAccount_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccount_Status() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccount populates the provided destination StorageAccount from our StorageAccount
func (account *StorageAccount) AssignPropertiesToStorageAccount(destination *v1alpha1api20210401storage.StorageAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210401storage.StorageAccounts_SPEC
	err := account.Spec.AssignPropertiesToStorageAccounts_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccounts_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210401storage.StorageAccount_Status
	err = account.Status.AssignPropertiesToStorageAccount_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccount_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *StorageAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion(),
		Kind:    "StorageAccount",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /storage/resource-manager/Microsoft.Storage/stable/2021-04-01/storage.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}
type StorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccount `json:"items"`
}

type StorageAccount_Status struct {
	//AccessTier: Required for storage accounts where kind = BlobStorage. The access
	//tier used for billing.
	AccessTier *StorageAccountProperties_AccessTier_Status `json:"accessTier,omitempty"`

	//AllowBlobPublicAccess: Allow or disallow public access to all blobs or
	//containers in the storage account. The default interpretation is true for this
	//property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	//AllowCrossTenantReplication: Allow or disallow cross AAD tenant object
	//replication. The default interpretation is true for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	//AllowSharedKeyAccess: Indicates whether the storage account permits requests to
	//be authorized with the account access key via Shared Key. If false, then all
	//requests, including shared access signatures, must be authorized with Azure
	//Active Directory (Azure AD). The default value is null, which is equivalent to
	//true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	//AzureFilesIdentityBasedAuthentication: Provides the identity based
	//authentication settings for Azure Files.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_Status `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CustomDomain: User domain assigned to the storage account. Name is the CNAME
	//source. Only one custom domain is supported per storage account at this time. To
	//clear the existing custom domain, use an empty string for the custom domain name
	//property.
	CustomDomain *CustomDomain_Status `json:"customDomain,omitempty"`

	//Encryption: Not applicable. Azure Storage encryption is enabled for all storage
	//accounts and cannot be disabled.
	Encryption *Encryption_Status `json:"encryption,omitempty"`

	//ExtendedLocation: Optional. Set the extended location of the resource. If not
	//set, the storage account will be created in Azure main region. Otherwise it will
	//be created in the specified extended location
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Identity: The identity of the resource.
	Identity *Identity_Status `json:"identity,omitempty"`

	//IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	//IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	//KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy_Status `json:"keyPolicy,omitempty"`

	//Kind: Required. Indicates the type of storage account.
	Kind *StorageAccount_Kind_Status `json:"kind,omitempty"`

	//LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be
	//disabled once it is enabled.
	LargeFileSharesState *StorageAccountProperties_LargeFileSharesState_Status `json:"largeFileSharesState,omitempty"`

	//Location: Required. Gets or sets the location of the resource. This will be one
	//of the supported and registered Azure Geo Regions (e.g. West US, East US,
	//Southeast Asia, etc.). The geo region of a resource cannot be changed once it is
	//created, but if an identical geo region is specified on update, the request will
	//succeed.
	Location *string `json:"location,omitempty"`

	//MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to
	//storage. The default interpretation is TLS 1.0 for this property.
	MinimumTlsVersion *StorageAccountProperties_MinimumTlsVersion_Status `json:"minimumTlsVersion,omitempty"`

	//NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet_Status `json:"networkAcls,omitempty"`

	//RoutingPreference: Maintains information about the network routing choice opted
	//by the user for data transfer
	RoutingPreference *RoutingPreference_Status `json:"routingPreference,omitempty"`

	//SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy_Status `json:"sasPolicy,omitempty"`

	//Sku: Required. Gets or sets the SKU name.
	Sku *Sku_Status `json:"sku,omitempty"`

	//SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets
	//to true. The default value is true since API version 2019-04-01.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`

	//Tags: Gets or sets a list of key value pairs that describe the resource. These
	//tags can be used for viewing and grouping this resource (across resource
	//groups). A maximum of 15 tags can be provided for a resource. Each tag must have
	//a key with a length no greater than 128 characters and a value with a length no
	//greater than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccount_Status{}

// ConvertStatusFrom populates our StorageAccount_Status from the provided source
func (account *StorageAccount_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210401storage.StorageAccount_Status)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromStorageAccount_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.StorageAccount_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromStorageAccount_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccount_Status
func (account *StorageAccount_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210401storage.StorageAccount_Status)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToStorageAccount_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.StorageAccount_Status{}
	err := account.AssignPropertiesToStorageAccount_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccount_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (account *StorageAccount_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccount_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (account *StorageAccount_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccount_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccount_StatusARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			account.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			account.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			account.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			account.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication_Status
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			account.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain_Status
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			account.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			account.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		account.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		account.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			account.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			account.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy_Status
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			account.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		account.Kind = &kind
	}

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			account.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		account.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			account.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet_Status
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			account.NetworkAcls = &networkAcls
		}
	}

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference_Status
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			account.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy_Status
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			account.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		account.Sku = &sku
	}

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			account.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		account.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			account.Tags[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccount_Status populates our StorageAccount_Status from the provided source StorageAccount_Status
func (account *StorageAccount_Status) AssignPropertiesFromStorageAccount_Status(source *v1alpha1api20210401storage.StorageAccount_Status) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountProperties_AccessTier_Status(*source.AccessTier)
		account.AccessTier = &accessTier
	} else {
		account.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		account.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		account.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		account.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		account.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		account.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		account.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication_Status
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Status(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Status() to populate field AzureFilesIdentityBasedAuthentication")
		}
		account.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		account.AzureFilesIdentityBasedAuthentication = nil
	}

	// Conditions
	account.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain_Status
		err := customDomain.AssignPropertiesFromCustomDomain_Status(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomain_Status() to populate field CustomDomain")
		}
		account.CustomDomain = &customDomain
	} else {
		account.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryption_Status(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption_Status() to populate field Encryption")
		}
		account.Encryption = &encryption
	} else {
		account.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Status(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Status() to populate field ExtendedLocation")
		}
		account.ExtendedLocation = &extendedLocation
	} else {
		account.ExtendedLocation = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity_Status
		err := identity.AssignPropertiesFromIdentity_Status(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity_Status() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		account.IsHnsEnabled = &isHnsEnabled
	} else {
		account.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		account.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		account.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy_Status
		err := keyPolicy.AssignPropertiesFromKeyPolicy_Status(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicy_Status() to populate field KeyPolicy")
		}
		account.KeyPolicy = &keyPolicy
	} else {
		account.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		kind := StorageAccount_Kind_Status(*source.Kind)
		account.Kind = &kind
	} else {
		account.Kind = nil
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountProperties_LargeFileSharesState_Status(*source.LargeFileSharesState)
		account.LargeFileSharesState = &largeFileSharesState
	} else {
		account.LargeFileSharesState = nil
	}

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountProperties_MinimumTlsVersion_Status(*source.MinimumTlsVersion)
		account.MinimumTlsVersion = &minimumTlsVersion
	} else {
		account.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet_Status
		err := networkAcl.AssignPropertiesFromNetworkRuleSet_Status(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSet_Status() to populate field NetworkAcls")
		}
		account.NetworkAcls = &networkAcl
	} else {
		account.NetworkAcls = nil
	}

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference_Status
		err := routingPreference.AssignPropertiesFromRoutingPreference_Status(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreference_Status() to populate field RoutingPreference")
		}
		account.RoutingPreference = &routingPreference
	} else {
		account.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy_Status
		err := sasPolicy.AssignPropertiesFromSasPolicy_Status(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicy_Status() to populate field SasPolicy")
		}
		account.SasPolicy = &sasPolicy
	} else {
		account.SasPolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_Status() to populate field Sku")
		}
		account.Sku = &sku
	} else {
		account.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		account.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		account.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToStorageAccount_Status populates the provided destination StorageAccount_Status from our StorageAccount_Status
func (account *StorageAccount_Status) AssignPropertiesToStorageAccount_Status(destination *v1alpha1api20210401storage.StorageAccount_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if account.AccessTier != nil {
		accessTier := string(*account.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if account.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *account.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if account.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *account.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if account.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *account.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if account.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Status
		err := account.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthentication_Status(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthentication_Status() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(account.Conditions)

	// CustomDomain
	if account.CustomDomain != nil {
		var customDomain v1alpha1api20210401storage.CustomDomain_Status
		err := account.CustomDomain.AssignPropertiesToCustomDomain_Status(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomain_Status() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if account.Encryption != nil {
		var encryption v1alpha1api20210401storage.Encryption_Status
		err := account.Encryption.AssignPropertiesToEncryption_Status(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption_Status() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if account.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20210401storage.ExtendedLocation_Status
		err := account.ExtendedLocation.AssignPropertiesToExtendedLocation_Status(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Status() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Identity
	if account.Identity != nil {
		var identity v1alpha1api20210401storage.Identity_Status
		err := account.Identity.AssignPropertiesToIdentity_Status(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity_Status() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if account.IsHnsEnabled != nil {
		isHnsEnabled := *account.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if account.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *account.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if account.KeyPolicy != nil {
		var keyPolicy v1alpha1api20210401storage.KeyPolicy_Status
		err := account.KeyPolicy.AssignPropertiesToKeyPolicy_Status(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicy_Status() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	if account.Kind != nil {
		kind := string(*account.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// LargeFileSharesState
	if account.LargeFileSharesState != nil {
		largeFileSharesState := string(*account.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// MinimumTlsVersion
	if account.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*account.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if account.NetworkAcls != nil {
		var networkAcl v1alpha1api20210401storage.NetworkRuleSet_Status
		err := account.NetworkAcls.AssignPropertiesToNetworkRuleSet_Status(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSet_Status() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// RoutingPreference
	if account.RoutingPreference != nil {
		var routingPreference v1alpha1api20210401storage.RoutingPreference_Status
		err := account.RoutingPreference.AssignPropertiesToRoutingPreference_Status(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreference_Status() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if account.SasPolicy != nil {
		var sasPolicy v1alpha1api20210401storage.SasPolicy_Status
		err := account.SasPolicy.AssignPropertiesToSasPolicy_Status(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicy_Status() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// Sku
	if account.Sku != nil {
		var sku v1alpha1api20210401storage.Sku_Status
		err := account.Sku.AssignPropertiesToSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if account.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *account.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccounts_SPEC struct {
	//AccessTier: Required for storage accounts where kind = BlobStorage. The access
	//tier used for billing.
	AccessTier *StorageAccountProperties_AccessTier_Spec `json:"accessTier,omitempty"`

	//AllowBlobPublicAccess: Allow or disallow public access to all blobs or
	//containers in the storage account. The default interpretation is true for this
	//property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	//AllowCrossTenantReplication: Allow or disallow cross AAD tenant object
	//replication. The default interpretation is true for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	//AllowSharedKeyAccess: Indicates whether the storage account permits requests to
	//be authorized with the account access key via Shared Key. If false, then all
	//requests, including shared access signatures, must be authorized with Azure
	//Active Directory (Azure AD). The default value is null, which is equivalent to
	//true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	//AzureFilesIdentityBasedAuthentication: Provides the identity based
	//authentication settings for Azure Files.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_Spec `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//CustomDomain: User domain assigned to the storage account. Name is the CNAME
	//source. Only one custom domain is supported per storage account at this time. To
	//clear the existing custom domain, use an empty string for the custom domain name
	//property.
	CustomDomain *CustomDomain_Spec `json:"customDomain,omitempty"`

	//Encryption: Not applicable. Azure Storage encryption is enabled for all storage
	//accounts and cannot be disabled.
	Encryption *Encryption_Spec `json:"encryption,omitempty"`

	//ExtendedLocation: Optional. Set the extended location of the resource. If not
	//set, the storage account will be created in Azure main region. Otherwise it will
	//be created in the specified extended location
	ExtendedLocation *ExtendedLocation_Spec `json:"extendedLocation,omitempty"`

	//Identity: The identity of the resource.
	Identity *Identity_Spec `json:"identity,omitempty"`

	//IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	//IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	//KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy_Spec `json:"keyPolicy,omitempty"`

	// +kubebuilder:validation:Required
	//Kind: Required. Indicates the type of storage account.
	Kind StorageAccounts_Kind_SPEC `json:"kind"`

	//LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be
	//disabled once it is enabled.
	LargeFileSharesState *StorageAccountProperties_LargeFileSharesState_Spec `json:"largeFileSharesState,omitempty"`

	// +kubebuilder:validation:Required
	//Location: Required. Gets or sets the location of the resource. This will be one
	//of the supported and registered Azure Geo Regions (e.g. West US, East US,
	//Southeast Asia, etc.). The geo region of a resource cannot be changed once it is
	//created, but if an identical geo region is specified on update, the request will
	//succeed.
	Location string `json:"location"`

	//MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to
	//storage. The default interpretation is TLS 1.0 for this property.
	MinimumTlsVersion *StorageAccountProperties_MinimumTlsVersion_Spec `json:"minimumTlsVersion,omitempty"`

	//NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet_Spec `json:"networkAcls,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//RoutingPreference: Maintains information about the network routing choice opted
	//by the user for data transfer
	RoutingPreference *RoutingPreference_Spec `json:"routingPreference,omitempty"`

	//SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy_Spec `json:"sasPolicy,omitempty"`

	// +kubebuilder:validation:Required
	//Sku: Required. Gets or sets the SKU name.
	Sku Sku_Spec `json:"sku"`

	//SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets
	//to true. The default value is true since API version 2019-04-01.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`

	//Tags: Gets or sets a list of key value pairs that describe the resource. These
	//tags can be used for viewing and grouping this resource (across resource
	//groups). A maximum of 15 tags can be provided for a resource. Each tag must have
	//a key with a length no greater than 128 characters and a value with a length no
	//greater than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccounts_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *StorageAccounts_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result StorageAccounts_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘ExtendedLocation’:
	if spec.ExtendedLocation != nil {
		extendedLocationARM, err := (*spec.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocation_SpecARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if spec.Identity != nil {
		identityARM, err := (*spec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(Identity_SpecARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	result.Kind = spec.Kind

	// Set property ‘Location’:
	result.Location = spec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.AccessTier != nil ||
		spec.AllowBlobPublicAccess != nil ||
		spec.AllowCrossTenantReplication != nil ||
		spec.AllowSharedKeyAccess != nil ||
		spec.AzureFilesIdentityBasedAuthentication != nil ||
		spec.CustomDomain != nil ||
		spec.Encryption != nil ||
		spec.IsHnsEnabled != nil ||
		spec.IsNfsV3Enabled != nil ||
		spec.KeyPolicy != nil ||
		spec.LargeFileSharesState != nil ||
		spec.MinimumTlsVersion != nil ||
		spec.NetworkAcls != nil ||
		spec.RoutingPreference != nil ||
		spec.SasPolicy != nil ||
		spec.SupportsHttpsTrafficOnly != nil {
		result.Properties = &StorageAccountProperties_SpecARM{}
	}
	if spec.AccessTier != nil {
		accessTier := *spec.AccessTier
		result.Properties.AccessTier = &accessTier
	}
	if spec.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *spec.AllowBlobPublicAccess
		result.Properties.AllowBlobPublicAccess = &allowBlobPublicAccess
	}
	if spec.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *spec.AllowCrossTenantReplication
		result.Properties.AllowCrossTenantReplication = &allowCrossTenantReplication
	}
	if spec.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *spec.AllowSharedKeyAccess
		result.Properties.AllowSharedKeyAccess = &allowSharedKeyAccess
	}
	if spec.AzureFilesIdentityBasedAuthentication != nil {
		azureFilesIdentityBasedAuthenticationARM, err := (*spec.AzureFilesIdentityBasedAuthentication).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthenticationARM.(AzureFilesIdentityBasedAuthentication_SpecARM)
		result.Properties.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	}
	if spec.CustomDomain != nil {
		customDomainARM, err := (*spec.CustomDomain).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		customDomain := customDomainARM.(CustomDomain_SpecARM)
		result.Properties.CustomDomain = &customDomain
	}
	if spec.Encryption != nil {
		encryptionARM, err := (*spec.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(Encryption_SpecARM)
		result.Properties.Encryption = &encryption
	}
	if spec.IsHnsEnabled != nil {
		isHnsEnabled := *spec.IsHnsEnabled
		result.Properties.IsHnsEnabled = &isHnsEnabled
	}
	if spec.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *spec.IsNfsV3Enabled
		result.Properties.IsNfsV3Enabled = &isNfsV3Enabled
	}
	if spec.KeyPolicy != nil {
		keyPolicyARM, err := (*spec.KeyPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyPolicy := keyPolicyARM.(KeyPolicy_SpecARM)
		result.Properties.KeyPolicy = &keyPolicy
	}
	if spec.LargeFileSharesState != nil {
		largeFileSharesState := *spec.LargeFileSharesState
		result.Properties.LargeFileSharesState = &largeFileSharesState
	}
	if spec.MinimumTlsVersion != nil {
		minimumTlsVersion := *spec.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}
	if spec.NetworkAcls != nil {
		networkAclsARM, err := (*spec.NetworkAcls).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkAcls := networkAclsARM.(NetworkRuleSet_SpecARM)
		result.Properties.NetworkAcls = &networkAcls
	}
	if spec.RoutingPreference != nil {
		routingPreferenceARM, err := (*spec.RoutingPreference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		routingPreference := routingPreferenceARM.(RoutingPreference_SpecARM)
		result.Properties.RoutingPreference = &routingPreference
	}
	if spec.SasPolicy != nil {
		sasPolicyARM, err := (*spec.SasPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sasPolicy := sasPolicyARM.(SasPolicy_SpecARM)
		result.Properties.SasPolicy = &sasPolicy
	}
	if spec.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *spec.SupportsHttpsTrafficOnly
		result.Properties.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	}

	// Set property ‘Sku’:
	skuARM, err := spec.Sku.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Sku = skuARM.(Sku_SpecARM)

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *StorageAccounts_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *StorageAccounts_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_SPECARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			spec.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			spec.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			spec.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			spec.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication_Spec
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			spec.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain_Spec
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			spec.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Spec
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			spec.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Spec
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		spec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Spec
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		spec.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			spec.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			spec.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy_Spec
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			spec.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	spec.Kind = typedInput.Kind

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			spec.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘Location’:
	spec.Location = typedInput.Location

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			spec.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet_Spec
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			spec.NetworkAcls = &networkAcls
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference_Spec
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			spec.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy_Spec
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			spec.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘Sku’:
	var sku Sku_Spec
	err := sku.PopulateFromARM(owner, typedInput.Sku)
	if err != nil {
		return err
	}
	spec.Sku = sku

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			spec.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_SPEC{}

// ConvertSpecFrom populates our StorageAccounts_SPEC from the provided source
func (spec *StorageAccounts_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210401storage.StorageAccounts_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromStorageAccounts_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.StorageAccounts_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromStorageAccounts_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_SPEC
func (spec *StorageAccounts_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210401storage.StorageAccounts_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToStorageAccounts_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.StorageAccounts_SPEC{}
	err := spec.AssignPropertiesToStorageAccounts_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccounts_SPEC populates our StorageAccounts_SPEC from the provided source StorageAccounts_SPEC
func (spec *StorageAccounts_SPEC) AssignPropertiesFromStorageAccounts_SPEC(source *v1alpha1api20210401storage.StorageAccounts_SPEC) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountProperties_AccessTier_Spec(*source.AccessTier)
		spec.AccessTier = &accessTier
	} else {
		spec.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		spec.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		spec.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		spec.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		spec.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		spec.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		spec.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication_Spec
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Spec(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Spec() to populate field AzureFilesIdentityBasedAuthentication")
		}
		spec.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		spec.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain_Spec
		err := customDomain.AssignPropertiesFromCustomDomain_Spec(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomain_Spec() to populate field CustomDomain")
		}
		spec.CustomDomain = &customDomain
	} else {
		spec.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Spec
		err := encryption.AssignPropertiesFromEncryption_Spec(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption_Spec() to populate field Encryption")
		}
		spec.Encryption = &encryption
	} else {
		spec.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Spec
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Spec(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		spec.ExtendedLocation = &extendedLocation
	} else {
		spec.ExtendedLocation = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity_Spec
		err := identity.AssignPropertiesFromIdentity_Spec(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity_Spec() to populate field Identity")
		}
		spec.Identity = &identity
	} else {
		spec.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		spec.IsHnsEnabled = &isHnsEnabled
	} else {
		spec.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		spec.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		spec.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy_Spec
		err := keyPolicy.AssignPropertiesFromKeyPolicy_Spec(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicy_Spec() to populate field KeyPolicy")
		}
		spec.KeyPolicy = &keyPolicy
	} else {
		spec.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		spec.Kind = StorageAccounts_Kind_SPEC(*source.Kind)
	} else {
		spec.Kind = ""
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountProperties_LargeFileSharesState_Spec(*source.LargeFileSharesState)
		spec.LargeFileSharesState = &largeFileSharesState
	} else {
		spec.LargeFileSharesState = nil
	}

	// Location
	spec.Location = genruntime.GetOptionalStringValue(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountProperties_MinimumTlsVersion_Spec(*source.MinimumTlsVersion)
		spec.MinimumTlsVersion = &minimumTlsVersion
	} else {
		spec.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet_Spec
		err := networkAcl.AssignPropertiesFromNetworkRuleSet_Spec(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSet_Spec() to populate field NetworkAcls")
		}
		spec.NetworkAcls = &networkAcl
	} else {
		spec.NetworkAcls = nil
	}

	// Owner
	spec.Owner = source.Owner.Copy()

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference_Spec
		err := routingPreference.AssignPropertiesFromRoutingPreference_Spec(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreference_Spec() to populate field RoutingPreference")
		}
		spec.RoutingPreference = &routingPreference
	} else {
		spec.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy_Spec
		err := sasPolicy.AssignPropertiesFromSasPolicy_Spec(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicy_Spec() to populate field SasPolicy")
		}
		spec.SasPolicy = &sasPolicy
	} else {
		spec.SasPolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_Spec
		err := sku.AssignPropertiesFromSku_Spec(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_Spec() to populate field Sku")
		}
		spec.Sku = sku
	} else {
		spec.Sku = Sku_Spec{}
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		spec.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		spec.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToStorageAccounts_SPEC populates the provided destination StorageAccounts_SPEC from our StorageAccounts_SPEC
func (spec *StorageAccounts_SPEC) AssignPropertiesToStorageAccounts_SPEC(destination *v1alpha1api20210401storage.StorageAccounts_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if spec.AccessTier != nil {
		accessTier := string(*spec.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if spec.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *spec.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if spec.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *spec.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if spec.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *spec.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if spec.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Spec
		err := spec.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthentication_Spec(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthentication_Spec() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// CustomDomain
	if spec.CustomDomain != nil {
		var customDomain v1alpha1api20210401storage.CustomDomain_Spec
		err := spec.CustomDomain.AssignPropertiesToCustomDomain_Spec(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomain_Spec() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if spec.Encryption != nil {
		var encryption v1alpha1api20210401storage.Encryption_Spec
		err := spec.Encryption.AssignPropertiesToEncryption_Spec(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption_Spec() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if spec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20210401storage.ExtendedLocation_Spec
		err := spec.ExtendedLocation.AssignPropertiesToExtendedLocation_Spec(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Identity
	if spec.Identity != nil {
		var identity v1alpha1api20210401storage.Identity_Spec
		err := spec.Identity.AssignPropertiesToIdentity_Spec(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity_Spec() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if spec.IsHnsEnabled != nil {
		isHnsEnabled := *spec.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if spec.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *spec.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if spec.KeyPolicy != nil {
		var keyPolicy v1alpha1api20210401storage.KeyPolicy_Spec
		err := spec.KeyPolicy.AssignPropertiesToKeyPolicy_Spec(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicy_Spec() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	kind := string(spec.Kind)
	destination.Kind = &kind

	// LargeFileSharesState
	if spec.LargeFileSharesState != nil {
		largeFileSharesState := string(*spec.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// Location
	location := spec.Location
	destination.Location = &location

	// MinimumTlsVersion
	if spec.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*spec.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if spec.NetworkAcls != nil {
		var networkAcl v1alpha1api20210401storage.NetworkRuleSet_Spec
		err := spec.NetworkAcls.AssignPropertiesToNetworkRuleSet_Spec(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSet_Spec() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// RoutingPreference
	if spec.RoutingPreference != nil {
		var routingPreference v1alpha1api20210401storage.RoutingPreference_Spec
		err := spec.RoutingPreference.AssignPropertiesToRoutingPreference_Spec(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreference_Spec() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if spec.SasPolicy != nil {
		var sasPolicy v1alpha1api20210401storage.SasPolicy_Spec
		err := spec.SasPolicy.AssignPropertiesToSasPolicy_Spec(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicy_Spec() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// Sku
	var sku v1alpha1api20210401storage.Sku_Spec
	err := spec.Sku.AssignPropertiesToSku_Spec(&sku)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSku_Spec() to populate field Sku")
	}
	destination.Sku = &sku

	// SupportsHttpsTrafficOnly
	if spec.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *spec.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *StorageAccounts_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *StorageAccounts_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type AzureFilesIdentityBasedAuthentication_Spec struct {
	//ActiveDirectoryProperties: Required if choose AD.
	ActiveDirectoryProperties *ActiveDirectoryProperties_Spec `json:"activeDirectoryProperties,omitempty"`

	//DefaultSharePermission: Default share permission for users using Kerberos
	//authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec `json:"defaultSharePermission,omitempty"`

	// +kubebuilder:validation:Required
	//DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Spec `json:"directoryServiceOptions"`
}

var _ genruntime.ARMTransformer = &AzureFilesIdentityBasedAuthentication_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (authentication *AzureFilesIdentityBasedAuthentication_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if authentication == nil {
		return nil, nil
	}
	var result AzureFilesIdentityBasedAuthentication_SpecARM

	// Set property ‘ActiveDirectoryProperties’:
	if authentication.ActiveDirectoryProperties != nil {
		activeDirectoryPropertiesARM, err := (*authentication.ActiveDirectoryProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		activeDirectoryProperties := activeDirectoryPropertiesARM.(ActiveDirectoryProperties_SpecARM)
		result.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := *authentication.DefaultSharePermission
		result.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	result.DirectoryServiceOptions = authentication.DirectoryServiceOptions
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authentication *AzureFilesIdentityBasedAuthentication_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthentication_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authentication *AzureFilesIdentityBasedAuthentication_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthentication_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthentication_SpecARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties_Spec
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		authentication.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		authentication.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	authentication.DirectoryServiceOptions = typedInput.DirectoryServiceOptions

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Spec populates our AzureFilesIdentityBasedAuthentication_Spec from the provided source AzureFilesIdentityBasedAuthentication_Spec
func (authentication *AzureFilesIdentityBasedAuthentication_Spec) AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Spec(source *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Spec) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties_Spec
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryProperties_Spec(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryProperties_Spec() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec(*source.DefaultSharePermission)
		authentication.DefaultSharePermission = &defaultSharePermission
	} else {
		authentication.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		authentication.DirectoryServiceOptions = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Spec(*source.DirectoryServiceOptions)
	} else {
		authentication.DirectoryServiceOptions = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthentication_Spec populates the provided destination AzureFilesIdentityBasedAuthentication_Spec from our AzureFilesIdentityBasedAuthentication_Spec
func (authentication *AzureFilesIdentityBasedAuthentication_Spec) AssignPropertiesToAzureFilesIdentityBasedAuthentication_Spec(destination *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v1alpha1api20210401storage.ActiveDirectoryProperties_Spec
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryProperties_Spec(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryProperties_Spec() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := string(*authentication.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	directoryServiceOption := string(authentication.DirectoryServiceOptions)
	destination.DirectoryServiceOptions = &directoryServiceOption

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AzureFilesIdentityBasedAuthentication_Status struct {
	//ActiveDirectoryProperties: Required if choose AD.
	ActiveDirectoryProperties *ActiveDirectoryProperties_Status `json:"activeDirectoryProperties,omitempty"`

	//DefaultSharePermission: Default share permission for users using Kerberos
	//authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status `json:"defaultSharePermission,omitempty"`

	// +kubebuilder:validation:Required
	//DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Status `json:"directoryServiceOptions"`
}

var _ genruntime.FromARMConverter = &AzureFilesIdentityBasedAuthentication_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authentication *AzureFilesIdentityBasedAuthentication_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthentication_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authentication *AzureFilesIdentityBasedAuthentication_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthentication_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthentication_StatusARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties_Status
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		authentication.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		authentication.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	authentication.DirectoryServiceOptions = typedInput.DirectoryServiceOptions

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Status populates our AzureFilesIdentityBasedAuthentication_Status from the provided source AzureFilesIdentityBasedAuthentication_Status
func (authentication *AzureFilesIdentityBasedAuthentication_Status) AssignPropertiesFromAzureFilesIdentityBasedAuthentication_Status(source *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Status) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties_Status
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryProperties_Status(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryProperties_Status() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status(*source.DefaultSharePermission)
		authentication.DefaultSharePermission = &defaultSharePermission
	} else {
		authentication.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		authentication.DirectoryServiceOptions = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Status(*source.DirectoryServiceOptions)
	} else {
		authentication.DirectoryServiceOptions = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthentication_Status populates the provided destination AzureFilesIdentityBasedAuthentication_Status from our AzureFilesIdentityBasedAuthentication_Status
func (authentication *AzureFilesIdentityBasedAuthentication_Status) AssignPropertiesToAzureFilesIdentityBasedAuthentication_Status(destination *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v1alpha1api20210401storage.ActiveDirectoryProperties_Status
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryProperties_Status(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryProperties_Status() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := string(*authentication.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	directoryServiceOption := string(authentication.DirectoryServiceOptions)
	destination.DirectoryServiceOptions = &directoryServiceOption

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CustomDomain_Spec struct {
	// +kubebuilder:validation:Required
	//Name: Gets or sets the custom domain name assigned to the storage account. Name
	//is the CNAME source.
	Name string `json:"name"`

	//UseSubDomainName: Indicates whether indirect CName validation is enabled.
	//Default value is false. This should only be set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

var _ genruntime.ARMTransformer = &CustomDomain_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (domain *CustomDomain_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if domain == nil {
		return nil, nil
	}
	var result CustomDomain_SpecARM

	// Set property ‘Name’:
	result.Name = domain.Name

	// Set property ‘UseSubDomainName’:
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		result.UseSubDomainName = &useSubDomainName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domain *CustomDomain_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomain_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domain *CustomDomain_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomain_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomain_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	domain.Name = typedInput.Name

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomain_Spec populates our CustomDomain_Spec from the provided source CustomDomain_Spec
func (domain *CustomDomain_Spec) AssignPropertiesFromCustomDomain_Spec(source *v1alpha1api20210401storage.CustomDomain_Spec) error {

	// Name
	domain.Name = genruntime.GetOptionalStringValue(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomain_Spec populates the provided destination CustomDomain_Spec from our CustomDomain_Spec
func (domain *CustomDomain_Spec) AssignPropertiesToCustomDomain_Spec(destination *v1alpha1api20210401storage.CustomDomain_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := domain.Name
	destination.Name = &name

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CustomDomain_Status struct {
	// +kubebuilder:validation:Required
	//Name: Gets or sets the custom domain name assigned to the storage account. Name
	//is the CNAME source.
	Name string `json:"name"`

	//UseSubDomainName: Indicates whether indirect CName validation is enabled.
	//Default value is false. This should only be set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

var _ genruntime.FromARMConverter = &CustomDomain_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domain *CustomDomain_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomain_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domain *CustomDomain_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomain_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomain_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	domain.Name = typedInput.Name

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomain_Status populates our CustomDomain_Status from the provided source CustomDomain_Status
func (domain *CustomDomain_Status) AssignPropertiesFromCustomDomain_Status(source *v1alpha1api20210401storage.CustomDomain_Status) error {

	// Name
	domain.Name = genruntime.GetOptionalStringValue(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomain_Status populates the provided destination CustomDomain_Status from our CustomDomain_Status
func (domain *CustomDomain_Status) AssignPropertiesToCustomDomain_Status(destination *v1alpha1api20210401storage.CustomDomain_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := domain.Name
	destination.Name = &name

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Encryption_Spec struct {
	//Identity: The identity to be used with service-side encryption at rest.
	Identity *EncryptionIdentity_Spec `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	//KeySource: The encryption keySource (provider). Possible values
	//(case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
	KeySource Encryption_KeySource_Spec `json:"keySource"`

	//Keyvaultproperties: Properties provided by key vault.
	Keyvaultproperties *KeyVaultProperties_Spec `json:"keyvaultproperties,omitempty"`

	//RequireInfrastructureEncryption: A boolean indicating whether or not the service
	//applies a secondary layer of encryption with platform managed keys for data at
	//rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	//Services: List of services which support encryption.
	Services *EncryptionServices_Spec `json:"services,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	var result Encryption_SpecARM

	// Set property ‘Identity’:
	if encryption.Identity != nil {
		identityARM, err := (*encryption.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(EncryptionIdentity_SpecARM)
		result.Identity = &identity
	}

	// Set property ‘KeySource’:
	result.KeySource = encryption.KeySource

	// Set property ‘Keyvaultproperties’:
	if encryption.Keyvaultproperties != nil {
		keyvaultpropertiesARM, err := (*encryption.Keyvaultproperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyvaultproperties := keyvaultpropertiesARM.(KeyVaultProperties_SpecARM)
		result.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		result.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if encryption.Services != nil {
		servicesARM, err := (*encryption.Services).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		services := servicesARM.(EncryptionServices_SpecARM)
		result.Services = &services
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_SpecARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity_Spec
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryption.Identity = &identity
	}

	// Set property ‘KeySource’:
	encryption.KeySource = typedInput.KeySource

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties_Spec
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryption.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices_Spec
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryption.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption_Spec populates our Encryption_Spec from the provided source Encryption_Spec
func (encryption *Encryption_Spec) AssignPropertiesFromEncryption_Spec(source *v1alpha1api20210401storage.Encryption_Spec) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity_Spec
		err := identity.AssignPropertiesFromEncryptionIdentity_Spec(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentity_Spec() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		encryption.KeySource = Encryption_KeySource_Spec(*source.KeySource)
	} else {
		encryption.KeySource = ""
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties_Spec
		err := keyvaultproperty.AssignPropertiesFromKeyVaultProperties_Spec(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties_Spec() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices_Spec
		err := service.AssignPropertiesFromEncryptionServices_Spec(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServices_Spec() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption_Spec populates the provided destination Encryption_Spec from our Encryption_Spec
func (encryption *Encryption_Spec) AssignPropertiesToEncryption_Spec(destination *v1alpha1api20210401storage.Encryption_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryption.Identity != nil {
		var identity v1alpha1api20210401storage.EncryptionIdentity_Spec
		err := encryption.Identity.AssignPropertiesToEncryptionIdentity_Spec(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentity_Spec() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	keySource := string(encryption.KeySource)
	destination.KeySource = &keySource

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty v1alpha1api20210401storage.KeyVaultProperties_Spec
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultProperties_Spec(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties_Spec() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service v1alpha1api20210401storage.EncryptionServices_Spec
		err := encryption.Services.AssignPropertiesToEncryptionServices_Spec(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServices_Spec() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Encryption_Status struct {
	//Identity: The identity to be used with service-side encryption at rest.
	Identity *EncryptionIdentity_Status `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	//KeySource: The encryption keySource (provider). Possible values
	//(case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
	KeySource Encryption_KeySource_Status `json:"keySource"`

	//Keyvaultproperties: Properties provided by key vault.
	Keyvaultproperties *KeyVaultProperties_Status `json:"keyvaultproperties,omitempty"`

	//RequireInfrastructureEncryption: A boolean indicating whether or not the service
	//applies a secondary layer of encryption with platform managed keys for data at
	//rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	//Services: List of services which support encryption.
	Services *EncryptionServices_Status `json:"services,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryption.Identity = &identity
	}

	// Set property ‘KeySource’:
	encryption.KeySource = typedInput.KeySource

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties_Status
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryption.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices_Status
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryption.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption_Status populates our Encryption_Status from the provided source Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesFromEncryption_Status(source *v1alpha1api20210401storage.Encryption_Status) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity_Status
		err := identity.AssignPropertiesFromEncryptionIdentity_Status(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentity_Status() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		encryption.KeySource = Encryption_KeySource_Status(*source.KeySource)
	} else {
		encryption.KeySource = ""
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties_Status
		err := keyvaultproperty.AssignPropertiesFromKeyVaultProperties_Status(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties_Status() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices_Status
		err := service.AssignPropertiesFromEncryptionServices_Status(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServices_Status() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption_Status populates the provided destination Encryption_Status from our Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesToEncryption_Status(destination *v1alpha1api20210401storage.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryption.Identity != nil {
		var identity v1alpha1api20210401storage.EncryptionIdentity_Status
		err := encryption.Identity.AssignPropertiesToEncryptionIdentity_Status(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentity_Status() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	keySource := string(encryption.KeySource)
	destination.KeySource = &keySource

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty v1alpha1api20210401storage.KeyVaultProperties_Status
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultProperties_Status(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties_Status() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service v1alpha1api20210401storage.EncryptionServices_Status
		err := encryption.Services.AssignPropertiesToEncryptionServices_Status(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServices_Status() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExtendedLocation_Spec struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	var result ExtendedLocation_SpecARM

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation_Spec populates our ExtendedLocation_Spec from the provided source ExtendedLocation_Spec
func (location *ExtendedLocation_Spec) AssignPropertiesFromExtendedLocation_Spec(source *v1alpha1api20210401storage.ExtendedLocation_Spec) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Spec(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation_Spec populates the provided destination ExtendedLocation_Spec from our ExtendedLocation_Spec
func (location *ExtendedLocation_Spec) AssignPropertiesToExtendedLocation_Spec(destination *v1alpha1api20210401storage.ExtendedLocation_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExtendedLocation_Status struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation_Status populates our ExtendedLocation_Status from the provided source ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesFromExtendedLocation_Status(source *v1alpha1api20210401storage.ExtendedLocation_Status) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Status(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation_Status populates the provided destination ExtendedLocation_Status from our ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesToExtendedLocation_Status(destination *v1alpha1api20210401storage.ExtendedLocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Identity_Spec struct {
	// +kubebuilder:validation:Required
	//Type: The identity type.
	Type Identity_Type_Spec `json:"type"`
}

var _ genruntime.ARMTransformer = &Identity_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result Identity_SpecARM

	// Set property ‘Type’:
	result.Type = identity.Type
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_SpecARM, got %T", armInput)
	}

	// Set property ‘Type’:
	identity.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromIdentity_Spec populates our Identity_Spec from the provided source Identity_Spec
func (identity *Identity_Spec) AssignPropertiesFromIdentity_Spec(source *v1alpha1api20210401storage.Identity_Spec) error {

	// Type
	if source.Type != nil {
		identity.Type = Identity_Type_Spec(*source.Type)
	} else {
		identity.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity_Spec populates the provided destination Identity_Spec from our Identity_Spec
func (identity *Identity_Spec) AssignPropertiesToIdentity_Spec(destination *v1alpha1api20210401storage.Identity_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(identity.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Identity_Status struct {
	//PrincipalId: The principal ID of resource identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant ID of resource.
	TenantId *string `json:"tenantId,omitempty"`

	// +kubebuilder:validation:Required
	//Type: The identity type.
	Type Identity_Type_Status `json:"type"`

	//UserAssignedIdentities: Gets or sets a list of key value pairs that describe the
	//set of User Assigned identities that will be used with this storage account. The
	//key is the ARM resource identifier of the identity. Only 1 User Assigned
	//identity is permitted here.
	UserAssignedIdentities map[string]UserAssignedIdentity_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	identity.Type = typedInput.Type

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]UserAssignedIdentity_Status)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentity_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentity_Status populates our Identity_Status from the provided source Identity_Status
func (identity *Identity_Status) AssignPropertiesFromIdentity_Status(source *v1alpha1api20210401storage.Identity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		identity.Type = Identity_Type_Status(*source.Type)
	} else {
		identity.Type = ""
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentity_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentity_Status
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentity_Status(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentity_Status() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity_Status populates the provided destination Identity_Status from our Identity_Status
func (identity *Identity_Status) AssignPropertiesToIdentity_Status(destination *v1alpha1api20210401storage.Identity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	typeVar := string(identity.Type)
	destination.Type = &typeVar

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20210401storage.UserAssignedIdentity_Status, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20210401storage.UserAssignedIdentity_Status
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentity_Status(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentity_Status() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyPolicy_Spec struct {
	// +kubebuilder:validation:Required
	//KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays int `json:"keyExpirationPeriodInDays"`
}

var _ genruntime.ARMTransformer = &KeyPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *KeyPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result KeyPolicy_SpecARM

	// Set property ‘KeyExpirationPeriodInDays’:
	result.KeyExpirationPeriodInDays = policy.KeyExpirationPeriodInDays
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *KeyPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *KeyPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	policy.KeyExpirationPeriodInDays = typedInput.KeyExpirationPeriodInDays

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicy_Spec populates our KeyPolicy_Spec from the provided source KeyPolicy_Spec
func (policy *KeyPolicy_Spec) AssignPropertiesFromKeyPolicy_Spec(source *v1alpha1api20210401storage.KeyPolicy_Spec) error {

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.GetOptionalIntValue(source.KeyExpirationPeriodInDays)

	// No error
	return nil
}

// AssignPropertiesToKeyPolicy_Spec populates the provided destination KeyPolicy_Spec from our KeyPolicy_Spec
func (policy *KeyPolicy_Spec) AssignPropertiesToKeyPolicy_Spec(destination *v1alpha1api20210401storage.KeyPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	keyExpirationPeriodInDay := policy.KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = &keyExpirationPeriodInDay

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyPolicy_Status struct {
	// +kubebuilder:validation:Required
	//KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays int `json:"keyExpirationPeriodInDays"`
}

var _ genruntime.FromARMConverter = &KeyPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *KeyPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *KeyPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	policy.KeyExpirationPeriodInDays = typedInput.KeyExpirationPeriodInDays

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicy_Status populates our KeyPolicy_Status from the provided source KeyPolicy_Status
func (policy *KeyPolicy_Status) AssignPropertiesFromKeyPolicy_Status(source *v1alpha1api20210401storage.KeyPolicy_Status) error {

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.GetOptionalIntValue(source.KeyExpirationPeriodInDays)

	// No error
	return nil
}

// AssignPropertiesToKeyPolicy_Status populates the provided destination KeyPolicy_Status from our KeyPolicy_Status
func (policy *KeyPolicy_Status) AssignPropertiesToKeyPolicy_Status(destination *v1alpha1api20210401storage.KeyPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	keyExpirationPeriodInDay := policy.KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = &keyExpirationPeriodInDay

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkRuleSet_Spec struct {
	//Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
	//Possible values are any combination of Logging|Metrics|AzureServices (For
	//example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSet_Bypass_Spec `json:"bypass,omitempty"`

	// +kubebuilder:validation:Required
	//DefaultAction: Specifies the default action of allow or deny when no other rules
	//match.
	DefaultAction NetworkRuleSet_DefaultAction_Spec `json:"defaultAction"`

	//IpRules: Sets the IP ACL rules
	IpRules []IPRule_Spec `json:"ipRules,omitempty"`

	//ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule_Spec `json:"resourceAccessRules,omitempty"`

	//VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule_Spec `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkRuleSet_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ruleSet *NetworkRuleSet_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ruleSet == nil {
		return nil, nil
	}
	var result NetworkRuleSet_SpecARM

	// Set property ‘Bypass’:
	if ruleSet.Bypass != nil {
		bypass := *ruleSet.Bypass
		result.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	result.DefaultAction = ruleSet.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range ruleSet.IpRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.IpRules = append(result.IpRules, itemARM.(IPRule_SpecARM))
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range ruleSet.ResourceAccessRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ResourceAccessRules = append(result.ResourceAccessRules, itemARM.(ResourceAccessRule_SpecARM))
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range ruleSet.VirtualNetworkRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VirtualNetworkRules = append(result.VirtualNetworkRules, itemARM.(VirtualNetworkRule_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_SpecARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		ruleSet.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	ruleSet.DefaultAction = typedInput.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.ResourceAccessRules = append(ruleSet.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.VirtualNetworkRules = append(ruleSet.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSet_Spec populates our NetworkRuleSet_Spec from the provided source NetworkRuleSet_Spec
func (ruleSet *NetworkRuleSet_Spec) AssignPropertiesFromNetworkRuleSet_Spec(source *v1alpha1api20210401storage.NetworkRuleSet_Spec) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSet_Bypass_Spec(*source.Bypass)
		ruleSet.Bypass = &bypass
	} else {
		ruleSet.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		ruleSet.DefaultAction = NetworkRuleSet_DefaultAction_Spec(*source.DefaultAction)
	} else {
		ruleSet.DefaultAction = ""
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule_Spec, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule_Spec
			err := ipRule.AssignPropertiesFromIPRule_Spec(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRule_Spec() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule_Spec, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule_Spec
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRule_Spec(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRule_Spec() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_Spec, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_Spec
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule_Spec(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRule_Spec() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSet_Spec populates the provided destination NetworkRuleSet_Spec from our NetworkRuleSet_Spec
func (ruleSet *NetworkRuleSet_Spec) AssignPropertiesToNetworkRuleSet_Spec(destination *v1alpha1api20210401storage.NetworkRuleSet_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if ruleSet.Bypass != nil {
		bypass := string(*ruleSet.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	defaultAction := string(ruleSet.DefaultAction)
	destination.DefaultAction = &defaultAction

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210401storage.IPRule_Spec, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210401storage.IPRule_Spec
			err := ipRuleItem.AssignPropertiesToIPRule_Spec(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRule_Spec() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]v1alpha1api20210401storage.ResourceAccessRule_Spec, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule v1alpha1api20210401storage.ResourceAccessRule_Spec
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRule_Spec(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRule_Spec() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v1alpha1api20210401storage.VirtualNetworkRule_Spec, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v1alpha1api20210401storage.VirtualNetworkRule_Spec
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule_Spec(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRule_Spec() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkRuleSet_Status struct {
	//Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
	//Possible values are any combination of Logging|Metrics|AzureServices (For
	//example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSet_Bypass_Status `json:"bypass,omitempty"`

	// +kubebuilder:validation:Required
	//DefaultAction: Specifies the default action of allow or deny when no other rules
	//match.
	DefaultAction NetworkRuleSet_DefaultAction_Status `json:"defaultAction"`

	//IpRules: Sets the IP ACL rules
	IpRules []IPRule_Status `json:"ipRules,omitempty"`

	//ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule_Status `json:"resourceAccessRules,omitempty"`

	//VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule_Status `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkRuleSet_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_StatusARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		ruleSet.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	ruleSet.DefaultAction = typedInput.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.ResourceAccessRules = append(ruleSet.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.VirtualNetworkRules = append(ruleSet.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSet_Status populates our NetworkRuleSet_Status from the provided source NetworkRuleSet_Status
func (ruleSet *NetworkRuleSet_Status) AssignPropertiesFromNetworkRuleSet_Status(source *v1alpha1api20210401storage.NetworkRuleSet_Status) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSet_Bypass_Status(*source.Bypass)
		ruleSet.Bypass = &bypass
	} else {
		ruleSet.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		ruleSet.DefaultAction = NetworkRuleSet_DefaultAction_Status(*source.DefaultAction)
	} else {
		ruleSet.DefaultAction = ""
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule_Status, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule_Status
			err := ipRule.AssignPropertiesFromIPRule_Status(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRule_Status() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule_Status, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule_Status
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRule_Status(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRule_Status() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_Status, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_Status
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule_Status(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRule_Status() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSet_Status populates the provided destination NetworkRuleSet_Status from our NetworkRuleSet_Status
func (ruleSet *NetworkRuleSet_Status) AssignPropertiesToNetworkRuleSet_Status(destination *v1alpha1api20210401storage.NetworkRuleSet_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if ruleSet.Bypass != nil {
		bypass := string(*ruleSet.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	defaultAction := string(ruleSet.DefaultAction)
	destination.DefaultAction = &defaultAction

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210401storage.IPRule_Status, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210401storage.IPRule_Status
			err := ipRuleItem.AssignPropertiesToIPRule_Status(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRule_Status() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]v1alpha1api20210401storage.ResourceAccessRule_Status, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule v1alpha1api20210401storage.ResourceAccessRule_Status
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRule_Status(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRule_Status() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v1alpha1api20210401storage.VirtualNetworkRule_Status, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v1alpha1api20210401storage.VirtualNetworkRule_Status
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule_Status(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRule_Status() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RoutingPreference_Spec struct {
	//PublishInternetEndpoints: A boolean flag which indicates whether internet
	//routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	//PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft
	//routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	//RoutingChoice: Routing Choice defines the kind of network routing opted by the
	//user.
	RoutingChoice *RoutingPreference_RoutingChoice_Spec `json:"routingChoice,omitempty"`
}

var _ genruntime.ARMTransformer = &RoutingPreference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (preference *RoutingPreference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if preference == nil {
		return nil, nil
	}
	var result RoutingPreference_SpecARM

	// Set property ‘PublishInternetEndpoints’:
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *preference.PublishInternetEndpoints
		result.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *preference.PublishMicrosoftEndpoints
		result.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if preference.RoutingChoice != nil {
		routingChoice := *preference.RoutingChoice
		result.RoutingChoice = &routingChoice
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (preference *RoutingPreference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (preference *RoutingPreference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreference_SpecARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		preference.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreference_Spec populates our RoutingPreference_Spec from the provided source RoutingPreference_Spec
func (preference *RoutingPreference_Spec) AssignPropertiesFromRoutingPreference_Spec(source *v1alpha1api20210401storage.RoutingPreference_Spec) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreference_RoutingChoice_Spec(*source.RoutingChoice)
		preference.RoutingChoice = &routingChoice
	} else {
		preference.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreference_Spec populates the provided destination RoutingPreference_Spec from our RoutingPreference_Spec
func (preference *RoutingPreference_Spec) AssignPropertiesToRoutingPreference_Spec(destination *v1alpha1api20210401storage.RoutingPreference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if preference.RoutingChoice != nil {
		routingChoice := string(*preference.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RoutingPreference_Status struct {
	//PublishInternetEndpoints: A boolean flag which indicates whether internet
	//routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	//PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft
	//routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	//RoutingChoice: Routing Choice defines the kind of network routing opted by the
	//user.
	RoutingChoice *RoutingPreference_RoutingChoice_Status `json:"routingChoice,omitempty"`
}

var _ genruntime.FromARMConverter = &RoutingPreference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (preference *RoutingPreference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (preference *RoutingPreference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreference_StatusARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		preference.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreference_Status populates our RoutingPreference_Status from the provided source RoutingPreference_Status
func (preference *RoutingPreference_Status) AssignPropertiesFromRoutingPreference_Status(source *v1alpha1api20210401storage.RoutingPreference_Status) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreference_RoutingChoice_Status(*source.RoutingChoice)
		preference.RoutingChoice = &routingChoice
	} else {
		preference.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreference_Status populates the provided destination RoutingPreference_Status from our RoutingPreference_Status
func (preference *RoutingPreference_Status) AssignPropertiesToRoutingPreference_Status(destination *v1alpha1api20210401storage.RoutingPreference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if preference.RoutingChoice != nil {
		routingChoice := string(*preference.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SasPolicy_Spec struct {
	// +kubebuilder:validation:Required
	//ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction SasPolicy_ExpirationAction_Spec `json:"expirationAction"`

	// +kubebuilder:validation:Required
	//SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod string `json:"sasExpirationPeriod"`
}

var _ genruntime.ARMTransformer = &SasPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *SasPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result SasPolicy_SpecARM

	// Set property ‘ExpirationAction’:
	result.ExpirationAction = policy.ExpirationAction

	// Set property ‘SasExpirationPeriod’:
	result.SasExpirationPeriod = policy.SasExpirationPeriod
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *SasPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *SasPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	policy.ExpirationAction = typedInput.ExpirationAction

	// Set property ‘SasExpirationPeriod’:
	policy.SasExpirationPeriod = typedInput.SasExpirationPeriod

	// No error
	return nil
}

// AssignPropertiesFromSasPolicy_Spec populates our SasPolicy_Spec from the provided source SasPolicy_Spec
func (policy *SasPolicy_Spec) AssignPropertiesFromSasPolicy_Spec(source *v1alpha1api20210401storage.SasPolicy_Spec) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		policy.ExpirationAction = SasPolicy_ExpirationAction_Spec(*source.ExpirationAction)
	} else {
		policy.ExpirationAction = ""
	}

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.GetOptionalStringValue(source.SasExpirationPeriod)

	// No error
	return nil
}

// AssignPropertiesToSasPolicy_Spec populates the provided destination SasPolicy_Spec from our SasPolicy_Spec
func (policy *SasPolicy_Spec) AssignPropertiesToSasPolicy_Spec(destination *v1alpha1api20210401storage.SasPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	expirationAction := string(policy.ExpirationAction)
	destination.ExpirationAction = &expirationAction

	// SasExpirationPeriod
	sasExpirationPeriod := policy.SasExpirationPeriod
	destination.SasExpirationPeriod = &sasExpirationPeriod

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SasPolicy_Status struct {
	// +kubebuilder:validation:Required
	//ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction SasPolicy_ExpirationAction_Status `json:"expirationAction"`

	// +kubebuilder:validation:Required
	//SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod string `json:"sasExpirationPeriod"`
}

var _ genruntime.FromARMConverter = &SasPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *SasPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *SasPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	policy.ExpirationAction = typedInput.ExpirationAction

	// Set property ‘SasExpirationPeriod’:
	policy.SasExpirationPeriod = typedInput.SasExpirationPeriod

	// No error
	return nil
}

// AssignPropertiesFromSasPolicy_Status populates our SasPolicy_Status from the provided source SasPolicy_Status
func (policy *SasPolicy_Status) AssignPropertiesFromSasPolicy_Status(source *v1alpha1api20210401storage.SasPolicy_Status) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		policy.ExpirationAction = SasPolicy_ExpirationAction_Status(*source.ExpirationAction)
	} else {
		policy.ExpirationAction = ""
	}

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.GetOptionalStringValue(source.SasExpirationPeriod)

	// No error
	return nil
}

// AssignPropertiesToSasPolicy_Status populates the provided destination SasPolicy_Status from our SasPolicy_Status
func (policy *SasPolicy_Status) AssignPropertiesToSasPolicy_Status(destination *v1alpha1api20210401storage.SasPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	expirationAction := string(policy.ExpirationAction)
	destination.ExpirationAction = &expirationAction

	// SasExpirationPeriod
	sasExpirationPeriod := policy.SasExpirationPeriod
	destination.SasExpirationPeriod = &sasExpirationPeriod

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Spec struct {
	// +kubebuilder:validation:Required
	Name SkuName_Spec `json:"name"`
	Tier *Tier_Spec   `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result Sku_SpecARM

	// Set property ‘Name’:
	result.Name = sku.Name

	// Set property ‘Tier’:
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku_Spec populates our Sku_Spec from the provided source Sku_Spec
func (sku *Sku_Spec) AssignPropertiesFromSku_Spec(source *v1alpha1api20210401storage.Sku_Spec) error {

	// Name
	if source.Name != nil {
		sku.Name = SkuName_Spec(*source.Name)
	} else {
		sku.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := Tier_Spec(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku_Spec populates the provided destination Sku_Spec from our Sku_Spec
func (sku *Sku_Spec) AssignPropertiesToSku_Spec(destination *v1alpha1api20210401storage.Sku_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	// +kubebuilder:validation:Required
	Name SkuName_Status `json:"name"`
	Tier *Tier_Status   `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku_Status populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSku_Status(source *v1alpha1api20210401storage.Sku_Status) error {

	// Name
	if source.Name != nil {
		sku.Name = SkuName_Status(*source.Name)
	} else {
		sku.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := Tier_Status(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku_Status populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSku_Status(destination *v1alpha1api20210401storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Cool","Hot"}
type StorageAccountProperties_AccessTier_Spec string

const (
	StorageAccountProperties_AccessTier_SpecCool = StorageAccountProperties_AccessTier_Spec("Cool")
	StorageAccountProperties_AccessTier_SpecHot  = StorageAccountProperties_AccessTier_Spec("Hot")
)

type StorageAccountProperties_AccessTier_Status string

const (
	StorageAccountProperties_AccessTier_StatusCool = StorageAccountProperties_AccessTier_Status("Cool")
	StorageAccountProperties_AccessTier_StatusHot  = StorageAccountProperties_AccessTier_Status("Hot")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type StorageAccountProperties_LargeFileSharesState_Spec string

const (
	StorageAccountProperties_LargeFileSharesState_SpecDisabled = StorageAccountProperties_LargeFileSharesState_Spec("Disabled")
	StorageAccountProperties_LargeFileSharesState_SpecEnabled  = StorageAccountProperties_LargeFileSharesState_Spec("Enabled")
)

type StorageAccountProperties_LargeFileSharesState_Status string

const (
	StorageAccountProperties_LargeFileSharesState_StatusDisabled = StorageAccountProperties_LargeFileSharesState_Status("Disabled")
	StorageAccountProperties_LargeFileSharesState_StatusEnabled  = StorageAccountProperties_LargeFileSharesState_Status("Enabled")
)

// +kubebuilder:validation:Enum={"TLS1_0","TLS1_1","TLS1_2"}
type StorageAccountProperties_MinimumTlsVersion_Spec string

const (
	StorageAccountProperties_MinimumTlsVersion_SpecTLS1_0 = StorageAccountProperties_MinimumTlsVersion_Spec("TLS1_0")
	StorageAccountProperties_MinimumTlsVersion_SpecTLS1_1 = StorageAccountProperties_MinimumTlsVersion_Spec("TLS1_1")
	StorageAccountProperties_MinimumTlsVersion_SpecTLS1_2 = StorageAccountProperties_MinimumTlsVersion_Spec("TLS1_2")
)

type StorageAccountProperties_MinimumTlsVersion_Status string

const (
	StorageAccountProperties_MinimumTlsVersion_StatusTLS1_0 = StorageAccountProperties_MinimumTlsVersion_Status("TLS1_0")
	StorageAccountProperties_MinimumTlsVersion_StatusTLS1_1 = StorageAccountProperties_MinimumTlsVersion_Status("TLS1_1")
	StorageAccountProperties_MinimumTlsVersion_StatusTLS1_2 = StorageAccountProperties_MinimumTlsVersion_Status("TLS1_2")
)

type ActiveDirectoryProperties_Spec struct {
	// +kubebuilder:validation:Required
	//AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid string `json:"azureStorageSid"`

	// +kubebuilder:validation:Required
	//DomainGuid: Specifies the domain GUID.
	DomainGuid string `json:"domainGuid"`

	// +kubebuilder:validation:Required
	//DomainName: Specifies the primary domain that the AD DNS server is authoritative
	//for.
	DomainName string `json:"domainName"`

	// +kubebuilder:validation:Required
	//DomainSid: Specifies the security identifier (SID).
	DomainSid string `json:"domainSid"`

	// +kubebuilder:validation:Required
	//ForestName: Specifies the Active Directory forest to get.
	ForestName string `json:"forestName"`

	// +kubebuilder:validation:Required
	//NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName string `json:"netBiosDomainName"`
}

var _ genruntime.ARMTransformer = &ActiveDirectoryProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *ActiveDirectoryProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result ActiveDirectoryProperties_SpecARM

	// Set property ‘AzureStorageSid’:
	result.AzureStorageSid = properties.AzureStorageSid

	// Set property ‘DomainGuid’:
	result.DomainGuid = properties.DomainGuid

	// Set property ‘DomainName’:
	result.DomainName = properties.DomainName

	// Set property ‘DomainSid’:
	result.DomainSid = properties.DomainSid

	// Set property ‘ForestName’:
	result.ForestName = properties.ForestName

	// Set property ‘NetBiosDomainName’:
	result.NetBiosDomainName = properties.NetBiosDomainName
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ActiveDirectoryProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ActiveDirectoryProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryProperties_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	properties.AzureStorageSid = typedInput.AzureStorageSid

	// Set property ‘DomainGuid’:
	properties.DomainGuid = typedInput.DomainGuid

	// Set property ‘DomainName’:
	properties.DomainName = typedInput.DomainName

	// Set property ‘DomainSid’:
	properties.DomainSid = typedInput.DomainSid

	// Set property ‘ForestName’:
	properties.ForestName = typedInput.ForestName

	// Set property ‘NetBiosDomainName’:
	properties.NetBiosDomainName = typedInput.NetBiosDomainName

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryProperties_Spec populates our ActiveDirectoryProperties_Spec from the provided source ActiveDirectoryProperties_Spec
func (properties *ActiveDirectoryProperties_Spec) AssignPropertiesFromActiveDirectoryProperties_Spec(source *v1alpha1api20210401storage.ActiveDirectoryProperties_Spec) error {

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.GetOptionalStringValue(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.GetOptionalStringValue(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.GetOptionalStringValue(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.GetOptionalStringValue(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.GetOptionalStringValue(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.GetOptionalStringValue(source.NetBiosDomainName)

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryProperties_Spec populates the provided destination ActiveDirectoryProperties_Spec from our ActiveDirectoryProperties_Spec
func (properties *ActiveDirectoryProperties_Spec) AssignPropertiesToActiveDirectoryProperties_Spec(destination *v1alpha1api20210401storage.ActiveDirectoryProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	azureStorageSid := properties.AzureStorageSid
	destination.AzureStorageSid = &azureStorageSid

	// DomainGuid
	domainGuid := properties.DomainGuid
	destination.DomainGuid = &domainGuid

	// DomainName
	domainName := properties.DomainName
	destination.DomainName = &domainName

	// DomainSid
	domainSid := properties.DomainSid
	destination.DomainSid = &domainSid

	// ForestName
	forestName := properties.ForestName
	destination.ForestName = &forestName

	// NetBiosDomainName
	netBiosDomainName := properties.NetBiosDomainName
	destination.NetBiosDomainName = &netBiosDomainName

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ActiveDirectoryProperties_Status struct {
	// +kubebuilder:validation:Required
	//AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid string `json:"azureStorageSid"`

	// +kubebuilder:validation:Required
	//DomainGuid: Specifies the domain GUID.
	DomainGuid string `json:"domainGuid"`

	// +kubebuilder:validation:Required
	//DomainName: Specifies the primary domain that the AD DNS server is authoritative
	//for.
	DomainName string `json:"domainName"`

	// +kubebuilder:validation:Required
	//DomainSid: Specifies the security identifier (SID).
	DomainSid string `json:"domainSid"`

	// +kubebuilder:validation:Required
	//ForestName: Specifies the Active Directory forest to get.
	ForestName string `json:"forestName"`

	// +kubebuilder:validation:Required
	//NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName string `json:"netBiosDomainName"`
}

var _ genruntime.FromARMConverter = &ActiveDirectoryProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ActiveDirectoryProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ActiveDirectoryProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	properties.AzureStorageSid = typedInput.AzureStorageSid

	// Set property ‘DomainGuid’:
	properties.DomainGuid = typedInput.DomainGuid

	// Set property ‘DomainName’:
	properties.DomainName = typedInput.DomainName

	// Set property ‘DomainSid’:
	properties.DomainSid = typedInput.DomainSid

	// Set property ‘ForestName’:
	properties.ForestName = typedInput.ForestName

	// Set property ‘NetBiosDomainName’:
	properties.NetBiosDomainName = typedInput.NetBiosDomainName

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryProperties_Status populates our ActiveDirectoryProperties_Status from the provided source ActiveDirectoryProperties_Status
func (properties *ActiveDirectoryProperties_Status) AssignPropertiesFromActiveDirectoryProperties_Status(source *v1alpha1api20210401storage.ActiveDirectoryProperties_Status) error {

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.GetOptionalStringValue(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.GetOptionalStringValue(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.GetOptionalStringValue(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.GetOptionalStringValue(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.GetOptionalStringValue(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.GetOptionalStringValue(source.NetBiosDomainName)

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryProperties_Status populates the provided destination ActiveDirectoryProperties_Status from our ActiveDirectoryProperties_Status
func (properties *ActiveDirectoryProperties_Status) AssignPropertiesToActiveDirectoryProperties_Status(destination *v1alpha1api20210401storage.ActiveDirectoryProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	azureStorageSid := properties.AzureStorageSid
	destination.AzureStorageSid = &azureStorageSid

	// DomainGuid
	domainGuid := properties.DomainGuid
	destination.DomainGuid = &domainGuid

	// DomainName
	domainName := properties.DomainName
	destination.DomainName = &domainName

	// DomainSid
	domainSid := properties.DomainSid
	destination.DomainSid = &domainSid

	// ForestName
	forestName := properties.ForestName
	destination.ForestName = &forestName

	// NetBiosDomainName
	netBiosDomainName := properties.NetBiosDomainName
	destination.NetBiosDomainName = &netBiosDomainName

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"None","StorageFileDataSmbShareContributor","StorageFileDataSmbShareElevatedContributor","StorageFileDataSmbShareOwner","StorageFileDataSmbShareReader"}
type AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec string

const (
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_SpecNone                                       = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec("None")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_SpecStorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_SpecStorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_SpecStorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_SpecStorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Spec("StorageFileDataSmbShareReader")
)

type AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status string

const (
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_StatusNone                                       = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status("None")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_StatusStorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_StatusStorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_StatusStorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthentication_DefaultSharePermission_StatusStorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status("StorageFileDataSmbShareReader")
)

// +kubebuilder:validation:Enum={"AADDS","AD","None"}
type AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Spec string

const (
	AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_SpecAADDS = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Spec("AADDS")
	AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_SpecAD    = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Spec("AD")
	AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_SpecNone  = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Spec("None")
)

type AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Status string

const (
	AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_StatusAADDS = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Status("AADDS")
	AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_StatusAD    = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Status("AD")
	AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_StatusNone  = AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Status("None")
)

type EncryptionIdentity_Spec struct {
	//UserAssignedIdentityReference: Resource identifier of the UserAssigned identity
	//to be associated with server-side encryption on the storage account.
	UserAssignedIdentityReference *genruntime.ResourceReference `armReference:"UserAssignedIdentity" json:"userAssignedIdentityReference,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionIdentity_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *EncryptionIdentity_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result EncryptionIdentity_SpecARM

	// Set property ‘UserAssignedIdentity’:
	if identity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*identity.UserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		userAssignedIdentityReference := userAssignedIdentityReferenceARMID
		result.UserAssignedIdentity = &userAssignedIdentityReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *EncryptionIdentity_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentity_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *EncryptionIdentity_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(EncryptionIdentity_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentity_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘UserAssignedIdentityReference’

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentity_Spec populates our EncryptionIdentity_Spec from the provided source EncryptionIdentity_Spec
func (identity *EncryptionIdentity_Spec) AssignPropertiesFromEncryptionIdentity_Spec(source *v1alpha1api20210401storage.EncryptionIdentity_Spec) error {

	// UserAssignedIdentityReference
	if source.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := source.UserAssignedIdentityReference.Copy()
		identity.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		identity.UserAssignedIdentityReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentity_Spec populates the provided destination EncryptionIdentity_Spec from our EncryptionIdentity_Spec
func (identity *EncryptionIdentity_Spec) AssignPropertiesToEncryptionIdentity_Spec(destination *v1alpha1api20210401storage.EncryptionIdentity_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentityReference
	if identity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := identity.UserAssignedIdentityReference.Copy()
		destination.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		destination.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionIdentity_Status struct {
	//UserAssignedIdentity: Resource identifier of the UserAssigned identity to be
	//associated with server-side encryption on the storage account.
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *EncryptionIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *EncryptionIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		identity.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentity_Status populates our EncryptionIdentity_Status from the provided source EncryptionIdentity_Status
func (identity *EncryptionIdentity_Status) AssignPropertiesFromEncryptionIdentity_Status(source *v1alpha1api20210401storage.EncryptionIdentity_Status) error {

	// UserAssignedIdentity
	identity.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentity_Status populates the provided destination EncryptionIdentity_Status from our EncryptionIdentity_Status
func (identity *EncryptionIdentity_Status) AssignPropertiesToEncryptionIdentity_Status(destination *v1alpha1api20210401storage.EncryptionIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(identity.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionServices_Spec struct {
	//Blob: The encryption function of the blob storage service.
	Blob *EncryptionService_Spec `json:"blob,omitempty"`

	//File: The encryption function of the file storage service.
	File *EncryptionService_Spec `json:"file,omitempty"`

	//Queue: The encryption function of the queue storage service.
	Queue *EncryptionService_Spec `json:"queue,omitempty"`

	//Table: The encryption function of the table storage service.
	Table *EncryptionService_Spec `json:"table,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionServices_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (services *EncryptionServices_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if services == nil {
		return nil, nil
	}
	var result EncryptionServices_SpecARM

	// Set property ‘Blob’:
	if services.Blob != nil {
		blobARM, err := (*services.Blob).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		blob := blobARM.(EncryptionService_SpecARM)
		result.Blob = &blob
	}

	// Set property ‘File’:
	if services.File != nil {
		fileARM, err := (*services.File).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		file := fileARM.(EncryptionService_SpecARM)
		result.File = &file
	}

	// Set property ‘Queue’:
	if services.Queue != nil {
		queueARM, err := (*services.Queue).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		queue := queueARM.(EncryptionService_SpecARM)
		result.Queue = &queue
	}

	// Set property ‘Table’:
	if services.Table != nil {
		tableARM, err := (*services.Table).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		table := tableARM.(EncryptionService_SpecARM)
		result.Table = &table
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *EncryptionServices_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServices_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *EncryptionServices_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServices_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServices_SpecARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService_Spec
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		services.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService_Spec
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		services.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService_Spec
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		services.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService_Spec
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		services.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServices_Spec populates our EncryptionServices_Spec from the provided source EncryptionServices_Spec
func (services *EncryptionServices_Spec) AssignPropertiesFromEncryptionServices_Spec(source *v1alpha1api20210401storage.EncryptionServices_Spec) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService_Spec
		err := blob.AssignPropertiesFromEncryptionService_Spec(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Spec() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService_Spec
		err := file.AssignPropertiesFromEncryptionService_Spec(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Spec() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService_Spec
		err := queue.AssignPropertiesFromEncryptionService_Spec(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Spec() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService_Spec
		err := table.AssignPropertiesFromEncryptionService_Spec(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Spec() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServices_Spec populates the provided destination EncryptionServices_Spec from our EncryptionServices_Spec
func (services *EncryptionServices_Spec) AssignPropertiesToEncryptionServices_Spec(destination *v1alpha1api20210401storage.EncryptionServices_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if services.Blob != nil {
		var blob v1alpha1api20210401storage.EncryptionService_Spec
		err := services.Blob.AssignPropertiesToEncryptionService_Spec(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Spec() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file v1alpha1api20210401storage.EncryptionService_Spec
		err := services.File.AssignPropertiesToEncryptionService_Spec(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Spec() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue v1alpha1api20210401storage.EncryptionService_Spec
		err := services.Queue.AssignPropertiesToEncryptionService_Spec(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Spec() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table v1alpha1api20210401storage.EncryptionService_Spec
		err := services.Table.AssignPropertiesToEncryptionService_Spec(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Spec() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionServices_Status struct {
	//Blob: The encryption function of the blob storage service.
	Blob *EncryptionService_Status `json:"blob,omitempty"`

	//File: The encryption function of the file storage service.
	File *EncryptionService_Status `json:"file,omitempty"`

	//Queue: The encryption function of the queue storage service.
	Queue *EncryptionService_Status `json:"queue,omitempty"`

	//Table: The encryption function of the table storage service.
	Table *EncryptionService_Status `json:"table,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionServices_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *EncryptionServices_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServices_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *EncryptionServices_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServices_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServices_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService_Status
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		services.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService_Status
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		services.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService_Status
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		services.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService_Status
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		services.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServices_Status populates our EncryptionServices_Status from the provided source EncryptionServices_Status
func (services *EncryptionServices_Status) AssignPropertiesFromEncryptionServices_Status(source *v1alpha1api20210401storage.EncryptionServices_Status) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService_Status
		err := blob.AssignPropertiesFromEncryptionService_Status(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Status() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService_Status
		err := file.AssignPropertiesFromEncryptionService_Status(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Status() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService_Status
		err := queue.AssignPropertiesFromEncryptionService_Status(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Status() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService_Status
		err := table.AssignPropertiesFromEncryptionService_Status(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService_Status() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServices_Status populates the provided destination EncryptionServices_Status from our EncryptionServices_Status
func (services *EncryptionServices_Status) AssignPropertiesToEncryptionServices_Status(destination *v1alpha1api20210401storage.EncryptionServices_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if services.Blob != nil {
		var blob v1alpha1api20210401storage.EncryptionService_Status
		err := services.Blob.AssignPropertiesToEncryptionService_Status(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Status() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file v1alpha1api20210401storage.EncryptionService_Status
		err := services.File.AssignPropertiesToEncryptionService_Status(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Status() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue v1alpha1api20210401storage.EncryptionService_Status
		err := services.Queue.AssignPropertiesToEncryptionService_Status(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Status() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table v1alpha1api20210401storage.EncryptionService_Status
		err := services.Table.AssignPropertiesToEncryptionService_Status(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService_Status() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.Keyvault","Microsoft.Storage"}
type Encryption_KeySource_Spec string

const (
	Encryption_KeySource_SpecMicrosoftKeyvault = Encryption_KeySource_Spec("Microsoft.Keyvault")
	Encryption_KeySource_SpecMicrosoftStorage  = Encryption_KeySource_Spec("Microsoft.Storage")
)

type Encryption_KeySource_Status string

const (
	Encryption_KeySource_StatusMicrosoftKeyvault = Encryption_KeySource_Status("Microsoft.Keyvault")
	Encryption_KeySource_StatusMicrosoftStorage  = Encryption_KeySource_Status("Microsoft.Storage")
)

type IPRule_Spec struct {
	//Action: The action of IP ACL rule.
	Action *IPRule_Action_Spec `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

var _ genruntime.ARMTransformer = &IPRule_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *IPRule_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	var result IPRule_SpecARM

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Value’:
	result.Value = rule.Value
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_SpecARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	rule.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromIPRule_Spec populates our IPRule_Spec from the provided source IPRule_Spec
func (rule *IPRule_Spec) AssignPropertiesFromIPRule_Spec(source *v1alpha1api20210401storage.IPRule_Spec) error {

	// Action
	if source.Action != nil {
		action := IPRule_Action_Spec(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.GetOptionalStringValue(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRule_Spec populates the provided destination IPRule_Spec from our IPRule_Spec
func (rule *IPRule_Spec) AssignPropertiesToIPRule_Spec(destination *v1alpha1api20210401storage.IPRule_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	value := rule.Value
	destination.Value = &value

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPRule_Status struct {
	//Action: The action of IP ACL rule.
	Action *IPRule_Action_Status `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

var _ genruntime.FromARMConverter = &IPRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	rule.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromIPRule_Status populates our IPRule_Status from the provided source IPRule_Status
func (rule *IPRule_Status) AssignPropertiesFromIPRule_Status(source *v1alpha1api20210401storage.IPRule_Status) error {

	// Action
	if source.Action != nil {
		action := IPRule_Action_Status(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.GetOptionalStringValue(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRule_Status populates the provided destination IPRule_Status from our IPRule_Status
func (rule *IPRule_Status) AssignPropertiesToIPRule_Status(destination *v1alpha1api20210401storage.IPRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	value := rule.Value
	destination.Value = &value

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_Spec struct {
	//Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	//Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	//Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result KeyVaultProperties_SpecARM

	// Set property ‘Keyname’:
	if properties.Keyname != nil {
		keyname := *properties.Keyname
		result.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if properties.Keyvaulturi != nil {
		keyvaulturi := *properties.Keyvaulturi
		result.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if properties.Keyversion != nil {
		keyversion := *properties.Keyversion
		result.Keyversion = &keyversion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_SpecARM, got %T", armInput)
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		properties.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		properties.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		properties.Keyversion = &keyversion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties_Spec populates our KeyVaultProperties_Spec from the provided source KeyVaultProperties_Spec
func (properties *KeyVaultProperties_Spec) AssignPropertiesFromKeyVaultProperties_Spec(source *v1alpha1api20210401storage.KeyVaultProperties_Spec) error {

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties_Spec populates the provided destination KeyVaultProperties_Spec from our KeyVaultProperties_Spec
func (properties *KeyVaultProperties_Spec) AssignPropertiesToKeyVaultProperties_Spec(destination *v1alpha1api20210401storage.KeyVaultProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_Status struct {
	//CurrentVersionedKeyIdentifier: The object identifier of the current versioned
	//Key Vault Key in use.
	CurrentVersionedKeyIdentifier *string `json:"currentVersionedKeyIdentifier,omitempty"`

	//Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	//Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	//Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`

	//LastKeyRotationTimestamp: Timestamp of last rotation of the Key Vault Key.
	LastKeyRotationTimestamp *string `json:"lastKeyRotationTimestamp,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘CurrentVersionedKeyIdentifier’:
	if typedInput.CurrentVersionedKeyIdentifier != nil {
		currentVersionedKeyIdentifier := *typedInput.CurrentVersionedKeyIdentifier
		properties.CurrentVersionedKeyIdentifier = &currentVersionedKeyIdentifier
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		properties.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		properties.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		properties.Keyversion = &keyversion
	}

	// Set property ‘LastKeyRotationTimestamp’:
	if typedInput.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *typedInput.LastKeyRotationTimestamp
		properties.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties_Status populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultProperties_Status(source *v1alpha1api20210401storage.KeyVaultProperties_Status) error {

	// CurrentVersionedKeyIdentifier
	properties.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(source.CurrentVersionedKeyIdentifier)

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// LastKeyRotationTimestamp
	properties.LastKeyRotationTimestamp = genruntime.ClonePointerToString(source.LastKeyRotationTimestamp)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties_Status populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultProperties_Status(destination *v1alpha1api20210401storage.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CurrentVersionedKeyIdentifier
	destination.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(properties.CurrentVersionedKeyIdentifier)

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// LastKeyRotationTimestamp
	destination.LastKeyRotationTimestamp = genruntime.ClonePointerToString(properties.LastKeyRotationTimestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AzureServices","Logging","Metrics","None"}
type NetworkRuleSet_Bypass_Spec string

const (
	NetworkRuleSet_Bypass_SpecAzureServices = NetworkRuleSet_Bypass_Spec("AzureServices")
	NetworkRuleSet_Bypass_SpecLogging       = NetworkRuleSet_Bypass_Spec("Logging")
	NetworkRuleSet_Bypass_SpecMetrics       = NetworkRuleSet_Bypass_Spec("Metrics")
	NetworkRuleSet_Bypass_SpecNone          = NetworkRuleSet_Bypass_Spec("None")
)

type NetworkRuleSet_Bypass_Status string

const (
	NetworkRuleSet_Bypass_StatusAzureServices = NetworkRuleSet_Bypass_Status("AzureServices")
	NetworkRuleSet_Bypass_StatusLogging       = NetworkRuleSet_Bypass_Status("Logging")
	NetworkRuleSet_Bypass_StatusMetrics       = NetworkRuleSet_Bypass_Status("Metrics")
	NetworkRuleSet_Bypass_StatusNone          = NetworkRuleSet_Bypass_Status("None")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type NetworkRuleSet_DefaultAction_Spec string

const (
	NetworkRuleSet_DefaultAction_SpecAllow = NetworkRuleSet_DefaultAction_Spec("Allow")
	NetworkRuleSet_DefaultAction_SpecDeny  = NetworkRuleSet_DefaultAction_Spec("Deny")
)

type NetworkRuleSet_DefaultAction_Status string

const (
	NetworkRuleSet_DefaultAction_StatusAllow = NetworkRuleSet_DefaultAction_Status("Allow")
	NetworkRuleSet_DefaultAction_StatusDeny  = NetworkRuleSet_DefaultAction_Status("Deny")
)

type ResourceAccessRule_Spec struct {
	//ResourceReference: Resource Id
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`

	//TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceAccessRule_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *ResourceAccessRule_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	var result ResourceAccessRule_SpecARM

	// Set property ‘ResourceId’:
	if rule.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*rule.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}

	// Set property ‘TenantId’:
	if rule.TenantId != nil {
		tenantId := *rule.TenantId
		result.TenantId = &tenantId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ResourceAccessRule_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRule_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ResourceAccessRule_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRule_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRule_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		rule.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRule_Spec populates our ResourceAccessRule_Spec from the provided source ResourceAccessRule_Spec
func (rule *ResourceAccessRule_Spec) AssignPropertiesFromResourceAccessRule_Spec(source *v1alpha1api20210401storage.ResourceAccessRule_Spec) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		rule.ResourceReference = &resourceReference
	} else {
		rule.ResourceReference = nil
	}

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRule_Spec populates the provided destination ResourceAccessRule_Spec from our ResourceAccessRule_Spec
func (rule *ResourceAccessRule_Spec) AssignPropertiesToResourceAccessRule_Spec(destination *v1alpha1api20210401storage.ResourceAccessRule_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if rule.ResourceReference != nil {
		resourceReference := rule.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceAccessRule_Status struct {
	//ResourceId: Resource Id
	ResourceId *string `json:"resourceId,omitempty"`

	//TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceAccessRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ResourceAccessRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ResourceAccessRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRule_StatusARM, got %T", armInput)
	}

	// Set property ‘ResourceId’:
	if typedInput.ResourceId != nil {
		resourceId := *typedInput.ResourceId
		rule.ResourceId = &resourceId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		rule.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRule_Status populates our ResourceAccessRule_Status from the provided source ResourceAccessRule_Status
func (rule *ResourceAccessRule_Status) AssignPropertiesFromResourceAccessRule_Status(source *v1alpha1api20210401storage.ResourceAccessRule_Status) error {

	// ResourceId
	rule.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRule_Status populates the provided destination ResourceAccessRule_Status from our ResourceAccessRule_Status
func (rule *ResourceAccessRule_Status) AssignPropertiesToResourceAccessRule_Status(destination *v1alpha1api20210401storage.ResourceAccessRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(rule.ResourceId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"InternetRouting","MicrosoftRouting"}
type RoutingPreference_RoutingChoice_Spec string

const (
	RoutingPreference_RoutingChoice_SpecInternetRouting  = RoutingPreference_RoutingChoice_Spec("InternetRouting")
	RoutingPreference_RoutingChoice_SpecMicrosoftRouting = RoutingPreference_RoutingChoice_Spec("MicrosoftRouting")
)

type RoutingPreference_RoutingChoice_Status string

const (
	RoutingPreference_RoutingChoice_StatusInternetRouting  = RoutingPreference_RoutingChoice_Status("InternetRouting")
	RoutingPreference_RoutingChoice_StatusMicrosoftRouting = RoutingPreference_RoutingChoice_Status("MicrosoftRouting")
)

// +kubebuilder:validation:Enum={"Log"}
type SasPolicy_ExpirationAction_Spec string

const SasPolicy_ExpirationAction_SpecLog = SasPolicy_ExpirationAction_Spec("Log")

type SasPolicy_ExpirationAction_Status string

const SasPolicy_ExpirationAction_StatusLog = SasPolicy_ExpirationAction_Status("Log")

type UserAssignedIdentity_Status struct {
	//ClientId: The client ID of the identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal ID of the identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *UserAssignedIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *UserAssignedIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identity.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentity_Status populates our UserAssignedIdentity_Status from the provided source UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesFromUserAssignedIdentity_Status(source *v1alpha1api20210401storage.UserAssignedIdentity_Status) error {

	// ClientId
	identity.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentity_Status populates the provided destination UserAssignedIdentity_Status from our UserAssignedIdentity_Status
func (identity *UserAssignedIdentity_Status) AssignPropertiesToUserAssignedIdentity_Status(destination *v1alpha1api20210401storage.UserAssignedIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identity.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkRule_Spec struct {
	//Action: The action of virtual network rule.
	Action *VirtualNetworkRule_Action_Spec `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Reference: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Reference genruntime.ResourceReference `armReference:"Id" json:"reference"`

	//State: Gets the state of virtual network rule.
	State *VirtualNetworkRule_State_Spec `json:"state,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkRule_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *VirtualNetworkRule_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	var result VirtualNetworkRule_SpecARM

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Id’:
	referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(rule.Reference)
	if err != nil {
		return nil, err
	}
	result.Id = referenceARMID

	// Set property ‘State’:
	if rule.State != nil {
		state := *rule.State
		result.State = &state
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_SpecARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// no assignment for property ‘Reference’

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		rule.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule_Spec populates our VirtualNetworkRule_Spec from the provided source VirtualNetworkRule_Spec
func (rule *VirtualNetworkRule_Spec) AssignPropertiesFromVirtualNetworkRule_Spec(source *v1alpha1api20210401storage.VirtualNetworkRule_Spec) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRule_Action_Spec(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Reference
	rule.Reference = source.Reference.Copy()

	// State
	if source.State != nil {
		state := VirtualNetworkRule_State_Spec(*source.State)
		rule.State = &state
	} else {
		rule.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule_Spec populates the provided destination VirtualNetworkRule_Spec from our VirtualNetworkRule_Spec
func (rule *VirtualNetworkRule_Spec) AssignPropertiesToVirtualNetworkRule_Spec(destination *v1alpha1api20210401storage.VirtualNetworkRule_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Reference
	destination.Reference = rule.Reference.Copy()

	// State
	if rule.State != nil {
		state := string(*rule.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkRule_Status struct {
	//Action: The action of virtual network rule.
	Action *VirtualNetworkRule_Action_Status `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Id string `json:"id"`

	//State: Gets the state of virtual network rule.
	State *VirtualNetworkRule_State_Status `json:"state,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Id’:
	rule.Id = typedInput.Id

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		rule.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule_Status populates our VirtualNetworkRule_Status from the provided source VirtualNetworkRule_Status
func (rule *VirtualNetworkRule_Status) AssignPropertiesFromVirtualNetworkRule_Status(source *v1alpha1api20210401storage.VirtualNetworkRule_Status) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRule_Action_Status(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Id
	rule.Id = genruntime.GetOptionalStringValue(source.Id)

	// State
	if source.State != nil {
		state := VirtualNetworkRule_State_Status(*source.State)
		rule.State = &state
	} else {
		rule.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule_Status populates the provided destination VirtualNetworkRule_Status from our VirtualNetworkRule_Status
func (rule *VirtualNetworkRule_Status) AssignPropertiesToVirtualNetworkRule_Status(destination *v1alpha1api20210401storage.VirtualNetworkRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Id
	id := rule.Id
	destination.Id = &id

	// State
	if rule.State != nil {
		state := string(*rule.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionService_Spec struct {
	//Enabled: A boolean indicating whether or not the service encrypts the data as it
	//is stored.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyType: Encryption key type to be used for the encryption service. 'Account'
	//key type implies that an account-scoped encryption key will be used. 'Service'
	//key type implies that a default service key is used.
	KeyType *EncryptionService_KeyType_Spec `json:"keyType,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionService_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (service *EncryptionService_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if service == nil {
		return nil, nil
	}
	var result EncryptionService_SpecARM

	// Set property ‘Enabled’:
	if service.Enabled != nil {
		enabled := *service.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if service.KeyType != nil {
		keyType := *service.KeyType
		result.KeyType = &keyType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *EncryptionService_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionService_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *EncryptionService_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionService_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionService_SpecARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		service.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		service.KeyType = &keyType
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionService_Spec populates our EncryptionService_Spec from the provided source EncryptionService_Spec
func (service *EncryptionService_Spec) AssignPropertiesFromEncryptionService_Spec(source *v1alpha1api20210401storage.EncryptionService_Spec) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionService_KeyType_Spec(*source.KeyType)
		service.KeyType = &keyType
	} else {
		service.KeyType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionService_Spec populates the provided destination EncryptionService_Spec from our EncryptionService_Spec
func (service *EncryptionService_Spec) AssignPropertiesToEncryptionService_Spec(destination *v1alpha1api20210401storage.EncryptionService_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if service.KeyType != nil {
		keyType := string(*service.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionService_Status struct {
	//Enabled: A boolean indicating whether or not the service encrypts the data as it
	//is stored.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyType: Encryption key type to be used for the encryption service. 'Account'
	//key type implies that an account-scoped encryption key will be used. 'Service'
	//key type implies that a default service key is used.
	KeyType *EncryptionService_KeyType_Status `json:"keyType,omitempty"`

	//LastEnabledTime: Gets a rough estimate of the date/time when the encryption was
	//last enabled by the user. Only returned when encryption is enabled. There might
	//be some unencrypted blobs which were written after this time, as it is just a
	//rough estimate.
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionService_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *EncryptionService_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionService_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *EncryptionService_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionService_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionService_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		service.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		service.KeyType = &keyType
	}

	// Set property ‘LastEnabledTime’:
	if typedInput.LastEnabledTime != nil {
		lastEnabledTime := *typedInput.LastEnabledTime
		service.LastEnabledTime = &lastEnabledTime
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionService_Status populates our EncryptionService_Status from the provided source EncryptionService_Status
func (service *EncryptionService_Status) AssignPropertiesFromEncryptionService_Status(source *v1alpha1api20210401storage.EncryptionService_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionService_KeyType_Status(*source.KeyType)
		service.KeyType = &keyType
	} else {
		service.KeyType = nil
	}

	// LastEnabledTime
	service.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// No error
	return nil
}

// AssignPropertiesToEncryptionService_Status populates the provided destination EncryptionService_Status from our EncryptionService_Status
func (service *EncryptionService_Status) AssignPropertiesToEncryptionService_Status(destination *v1alpha1api20210401storage.EncryptionService_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if service.KeyType != nil {
		keyType := string(*service.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(service.LastEnabledTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Allow"}
type IPRule_Action_Spec string

const IPRule_Action_SpecAllow = IPRule_Action_Spec("Allow")

type IPRule_Action_Status string

const IPRule_Action_StatusAllow = IPRule_Action_Status("Allow")

// +kubebuilder:validation:Enum={"Allow"}
type VirtualNetworkRule_Action_Spec string

const VirtualNetworkRule_Action_SpecAllow = VirtualNetworkRule_Action_Spec("Allow")

type VirtualNetworkRule_Action_Status string

const VirtualNetworkRule_Action_StatusAllow = VirtualNetworkRule_Action_Status("Allow")

// +kubebuilder:validation:Enum={"Deprovisioning","Failed","NetworkSourceDeleted","Provisioning","Succeeded"}
type VirtualNetworkRule_State_Spec string

const (
	VirtualNetworkRule_State_SpecDeprovisioning       = VirtualNetworkRule_State_Spec("Deprovisioning")
	VirtualNetworkRule_State_SpecFailed               = VirtualNetworkRule_State_Spec("Failed")
	VirtualNetworkRule_State_SpecNetworkSourceDeleted = VirtualNetworkRule_State_Spec("NetworkSourceDeleted")
	VirtualNetworkRule_State_SpecProvisioning         = VirtualNetworkRule_State_Spec("Provisioning")
	VirtualNetworkRule_State_SpecSucceeded            = VirtualNetworkRule_State_Spec("Succeeded")
)

type VirtualNetworkRule_State_Status string

const (
	VirtualNetworkRule_State_StatusDeprovisioning       = VirtualNetworkRule_State_Status("Deprovisioning")
	VirtualNetworkRule_State_StatusFailed               = VirtualNetworkRule_State_Status("Failed")
	VirtualNetworkRule_State_StatusNetworkSourceDeleted = VirtualNetworkRule_State_Status("NetworkSourceDeleted")
	VirtualNetworkRule_State_StatusProvisioning         = VirtualNetworkRule_State_Status("Provisioning")
	VirtualNetworkRule_State_StatusSucceeded            = VirtualNetworkRule_State_Status("Succeeded")
)

// +kubebuilder:validation:Enum={"Account","Service"}
type EncryptionService_KeyType_Spec string

const (
	EncryptionService_KeyType_SpecAccount = EncryptionService_KeyType_Spec("Account")
	EncryptionService_KeyType_SpecService = EncryptionService_KeyType_Spec("Service")
)

type EncryptionService_KeyType_Status string

const (
	EncryptionService_KeyType_StatusAccount = EncryptionService_KeyType_Status("Account")
	EncryptionService_KeyType_StatusService = EncryptionService_KeyType_Status("Service")
)

func init() {
	SchemeBuilder.Register(&StorageAccount{}, &StorageAccountList{})
}
