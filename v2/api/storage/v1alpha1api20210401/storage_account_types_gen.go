// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	alpha20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of StorageAccount. Use v1beta20210401.StorageAccount instead
type StorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_Spec  `json:"spec,omitempty"`
	Status            StorageAccount_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccount{}

// GetConditions returns the conditions of the resource
func (account *StorageAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *StorageAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccount{}

// ConvertFrom populates our StorageAccount from the provided hub StorageAccount
func (account *StorageAccount) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210401s.StorageAccount

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = account.AssignPropertiesFromStorageAccount(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to account")
	}

	return nil
}

// ConvertTo populates the provided hub StorageAccount from our StorageAccount
func (account *StorageAccount) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210401s.StorageAccount
	err := account.AssignPropertiesToStorageAccount(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from account")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1alpha1api20210401-storageaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccounts.storage.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &StorageAccount{}

// Default applies defaults to the StorageAccount resource
func (account *StorageAccount) Default() {
	account.defaultImpl()
	var temp interface{} = account
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (account *StorageAccount) defaultAzureName() {
	if account.Spec.AzureName == "" {
		account.Spec.AzureName = account.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccount resource
func (account *StorageAccount) defaultImpl() { account.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccount{}

// AzureName returns the Azure name of the resource
func (account *StorageAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (account StorageAccount) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (account *StorageAccount) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (account *StorageAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *StorageAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts"
func (account *StorageAccount) GetType() string {
	return "Microsoft.Storage/storageAccounts"
}

// NewEmptyStatus returns a new empty (blank) status
func (account *StorageAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccount_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *StorageAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *StorageAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccount_STATUS); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccount_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1alpha1api20210401-storageaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccounts.storage.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &StorageAccount{}

// ValidateCreate validates the creation of the resource
func (account *StorageAccount) ValidateCreate() error {
	validations := account.createValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (account *StorageAccount) ValidateDelete() error {
	validations := account.deleteValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (account *StorageAccount) ValidateUpdate(old runtime.Object) error {
	validations := account.updateValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (account *StorageAccount) createValidations() []func() error {
	return []func() error{account.validateResourceReferences, account.validateSecretDestinations}
}

// deleteValidations validates the deletion of the resource
func (account *StorageAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (account *StorageAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return account.validateResourceReferences()
		},
		account.validateWriteOnceProperties,
		func(old runtime.Object) error {
			return account.validateSecretDestinations()
		},
	}
}

// validateResourceReferences validates all resource references
func (account *StorageAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&account.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (account *StorageAccount) validateSecretDestinations() error {
	if account.Spec.OperatorSpec == nil {
		return nil
	}
	if account.Spec.OperatorSpec.Secrets == nil {
		return nil
	}
	secrets := []*genruntime.SecretDestination{
		account.Spec.OperatorSpec.Secrets.BlobEndpoint,
		account.Spec.OperatorSpec.Secrets.DfsEndpoint,
		account.Spec.OperatorSpec.Secrets.FileEndpoint,
		account.Spec.OperatorSpec.Secrets.Key1,
		account.Spec.OperatorSpec.Secrets.Key2,
		account.Spec.OperatorSpec.Secrets.QueueEndpoint,
		account.Spec.OperatorSpec.Secrets.TableEndpoint,
		account.Spec.OperatorSpec.Secrets.WebEndpoint,
	}
	return genruntime.ValidateSecretDestinations(secrets)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (account *StorageAccount) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*StorageAccount)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, account)
}

// AssignPropertiesFromStorageAccount populates our StorageAccount from the provided source StorageAccount
func (account *StorageAccount) AssignPropertiesFromStorageAccount(source *alpha20210401s.StorageAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccounts_Spec
	err := spec.AssignPropertiesFromStorageAccountsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsSpec() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status StorageAccount_STATUS
	err = status.AssignPropertiesFromStorageAccountSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountSTATUS() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccount populates the provided destination StorageAccount from our StorageAccount
func (account *StorageAccount) AssignPropertiesToStorageAccount(destination *alpha20210401s.StorageAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210401s.StorageAccounts_Spec
	err := account.Spec.AssignPropertiesToStorageAccountsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210401s.StorageAccount_STATUS
	err = account.Status.AssignPropertiesToStorageAccountSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *StorageAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion(),
		Kind:    "StorageAccount",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of StorageAccount. Use v1beta20210401.StorageAccount instead
type StorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccount `json:"items"`
}

// Deprecated version of APIVersion. Use v1beta20210401.APIVersion instead
// +kubebuilder:validation:Enum={"2021-04-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2021-04-01")

// Deprecated version of StorageAccount_STATUS. Use v1beta20210401.StorageAccount_STATUS instead
type StorageAccount_STATUS struct {
	AccessTier                            *StorageAccountPropertiesSTATUSAccessTier     `json:"accessTier,omitempty"`
	AllowBlobPublicAccess                 *bool                                         `json:"allowBlobPublicAccess,omitempty"`
	AllowCrossTenantReplication           *bool                                         `json:"allowCrossTenantReplication,omitempty"`
	AllowSharedKeyAccess                  *bool                                         `json:"allowSharedKeyAccess,omitempty"`
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_STATUS `json:"azureFilesIdentityBasedAuthentication,omitempty"`
	BlobRestoreStatus                     *BlobRestoreStatus_STATUS                     `json:"blobRestoreStatus,omitempty"`

	// Conditions: The observed state of the resource
	Conditions                 []conditions.Condition                                 `json:"conditions,omitempty"`
	CreationTime               *string                                                `json:"creationTime,omitempty"`
	CustomDomain               *CustomDomain_STATUS                                   `json:"customDomain,omitempty"`
	Encryption                 *Encryption_STATUS                                     `json:"encryption,omitempty"`
	ExtendedLocation           *ExtendedLocation_STATUS                               `json:"extendedLocation,omitempty"`
	FailoverInProgress         *bool                                                  `json:"failoverInProgress,omitempty"`
	GeoReplicationStats        *GeoReplicationStats_STATUS                            `json:"geoReplicationStats,omitempty"`
	Id                         *string                                                `json:"id,omitempty"`
	Identity                   *Identity_STATUS                                       `json:"identity,omitempty"`
	IsHnsEnabled               *bool                                                  `json:"isHnsEnabled,omitempty"`
	IsNfsV3Enabled             *bool                                                  `json:"isNfsV3Enabled,omitempty"`
	KeyCreationTime            *KeyCreationTime_STATUS                                `json:"keyCreationTime,omitempty"`
	KeyPolicy                  *KeyPolicy_STATUS                                      `json:"keyPolicy,omitempty"`
	Kind                       *StorageAccountSTATUSKind                              `json:"kind,omitempty"`
	LargeFileSharesState       *StorageAccountPropertiesSTATUSLargeFileSharesState    `json:"largeFileSharesState,omitempty"`
	LastGeoFailoverTime        *string                                                `json:"lastGeoFailoverTime,omitempty"`
	Location                   *string                                                `json:"location,omitempty"`
	MinimumTlsVersion          *StorageAccountPropertiesSTATUSMinimumTlsVersion       `json:"minimumTlsVersion,omitempty"`
	Name                       *string                                                `json:"name,omitempty"`
	NetworkAcls                *NetworkRuleSet_STATUS                                 `json:"networkAcls,omitempty"`
	PrimaryEndpoints           *Endpoints_STATUS                                      `json:"primaryEndpoints,omitempty"`
	PrimaryLocation            *string                                                `json:"primaryLocation,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	ProvisioningState          *StorageAccountPropertiesSTATUSProvisioningState       `json:"provisioningState,omitempty"`
	RoutingPreference          *RoutingPreference_STATUS                              `json:"routingPreference,omitempty"`
	SasPolicy                  *SasPolicy_STATUS                                      `json:"sasPolicy,omitempty"`
	SecondaryEndpoints         *Endpoints_STATUS                                      `json:"secondaryEndpoints,omitempty"`
	SecondaryLocation          *string                                                `json:"secondaryLocation,omitempty"`
	Sku                        *Sku_STATUS                                            `json:"sku,omitempty"`
	StatusOfPrimary            *StorageAccountPropertiesSTATUSStatusOfPrimary         `json:"statusOfPrimary,omitempty"`
	StatusOfSecondary          *StorageAccountPropertiesSTATUSStatusOfSecondary       `json:"statusOfSecondary,omitempty"`
	SupportsHttpsTrafficOnly   *bool                                                  `json:"supportsHttpsTrafficOnly,omitempty"`
	Tags                       map[string]string                                      `json:"tags,omitempty"`
	Type                       *string                                                `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccount_STATUS{}

// ConvertStatusFrom populates our StorageAccount_STATUS from the provided source
func (account *StorageAccount_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210401s.StorageAccount_STATUS)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromStorageAccountSTATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20210401s.StorageAccount_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromStorageAccountSTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccount_STATUS
func (account *StorageAccount_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210401s.StorageAccount_STATUS)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToStorageAccountSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210401s.StorageAccount_STATUS{}
	err := account.AssignPropertiesToStorageAccountSTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccount_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (account *StorageAccount_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccount_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (account *StorageAccount_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccount_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccount_STATUSARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			account.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			account.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			account.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			account.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication_STATUS
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			account.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// Set property ‘BlobRestoreStatus’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BlobRestoreStatus != nil {
			var blobRestoreStatus1 BlobRestoreStatus_STATUS
			err := blobRestoreStatus1.PopulateFromARM(owner, *typedInput.Properties.BlobRestoreStatus)
			if err != nil {
				return err
			}
			blobRestoreStatus := blobRestoreStatus1
			account.BlobRestoreStatus = &blobRestoreStatus
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationTime != nil {
			creationTime := *typedInput.Properties.CreationTime
			account.CreationTime = &creationTime
		}
	}

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain_STATUS
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			account.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_STATUS
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			account.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_STATUS
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		account.ExtendedLocation = &extendedLocation
	}

	// Set property ‘FailoverInProgress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FailoverInProgress != nil {
			failoverInProgress := *typedInput.Properties.FailoverInProgress
			account.FailoverInProgress = &failoverInProgress
		}
	}

	// Set property ‘GeoReplicationStats’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GeoReplicationStats != nil {
			var geoReplicationStats1 GeoReplicationStats_STATUS
			err := geoReplicationStats1.PopulateFromARM(owner, *typedInput.Properties.GeoReplicationStats)
			if err != nil {
				return err
			}
			geoReplicationStats := geoReplicationStats1
			account.GeoReplicationStats = &geoReplicationStats
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		account.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_STATUS
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		account.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			account.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			account.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyCreationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyCreationTime != nil {
			var keyCreationTime1 KeyCreationTime_STATUS
			err := keyCreationTime1.PopulateFromARM(owner, *typedInput.Properties.KeyCreationTime)
			if err != nil {
				return err
			}
			keyCreationTime := keyCreationTime1
			account.KeyCreationTime = &keyCreationTime
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy_STATUS
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			account.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		account.Kind = &kind
	}

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			account.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘LastGeoFailoverTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastGeoFailoverTime != nil {
			lastGeoFailoverTime := *typedInput.Properties.LastGeoFailoverTime
			account.LastGeoFailoverTime = &lastGeoFailoverTime
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		account.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			account.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		account.Name = &name
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet_STATUS
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			account.NetworkAcls = &networkAcls
		}
	}

	// Set property ‘PrimaryEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryEndpoints != nil {
			var primaryEndpoints1 Endpoints_STATUS
			err := primaryEndpoints1.PopulateFromARM(owner, *typedInput.Properties.PrimaryEndpoints)
			if err != nil {
				return err
			}
			primaryEndpoints := primaryEndpoints1
			account.PrimaryEndpoints = &primaryEndpoints
		}
	}

	// Set property ‘PrimaryLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryLocation != nil {
			primaryLocation := *typedInput.Properties.PrimaryLocation
			account.PrimaryLocation = &primaryLocation
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_STATUS_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.PrivateEndpointConnections = append(account.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			account.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference_STATUS
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			account.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy_STATUS
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			account.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘SecondaryEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryEndpoints != nil {
			var secondaryEndpoints1 Endpoints_STATUS
			err := secondaryEndpoints1.PopulateFromARM(owner, *typedInput.Properties.SecondaryEndpoints)
			if err != nil {
				return err
			}
			secondaryEndpoints := secondaryEndpoints1
			account.SecondaryEndpoints = &secondaryEndpoints
		}
	}

	// Set property ‘SecondaryLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryLocation != nil {
			secondaryLocation := *typedInput.Properties.SecondaryLocation
			account.SecondaryLocation = &secondaryLocation
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		account.Sku = &sku
	}

	// Set property ‘StatusOfPrimary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StatusOfPrimary != nil {
			statusOfPrimary := *typedInput.Properties.StatusOfPrimary
			account.StatusOfPrimary = &statusOfPrimary
		}
	}

	// Set property ‘StatusOfSecondary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StatusOfSecondary != nil {
			statusOfSecondary := *typedInput.Properties.StatusOfSecondary
			account.StatusOfSecondary = &statusOfSecondary
		}
	}

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			account.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		account.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			account.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		account.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountSTATUS populates our StorageAccount_STATUS from the provided source StorageAccount_STATUS
func (account *StorageAccount_STATUS) AssignPropertiesFromStorageAccountSTATUS(source *alpha20210401s.StorageAccount_STATUS) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountPropertiesSTATUSAccessTier(*source.AccessTier)
		account.AccessTier = &accessTier
	} else {
		account.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		account.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		account.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		account.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		account.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		account.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		account.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication_STATUS
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS() to populate field AzureFilesIdentityBasedAuthentication")
		}
		account.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		account.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if source.BlobRestoreStatus != nil {
		var blobRestoreStatus BlobRestoreStatus_STATUS
		err := blobRestoreStatus.AssignPropertiesFromBlobRestoreStatusSTATUS(source.BlobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreStatusSTATUS() to populate field BlobRestoreStatus")
		}
		account.BlobRestoreStatus = &blobRestoreStatus
	} else {
		account.BlobRestoreStatus = nil
	}

	// Conditions
	account.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationTime
	account.CreationTime = genruntime.ClonePointerToString(source.CreationTime)

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain_STATUS
		err := customDomain.AssignPropertiesFromCustomDomainSTATUS(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomainSTATUS() to populate field CustomDomain")
		}
		account.CustomDomain = &customDomain
	} else {
		account.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_STATUS
		err := encryption.AssignPropertiesFromEncryptionSTATUS(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSTATUS() to populate field Encryption")
		}
		account.Encryption = &encryption
	} else {
		account.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignPropertiesFromExtendedLocationSTATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		account.ExtendedLocation = &extendedLocation
	} else {
		account.ExtendedLocation = nil
	}

	// FailoverInProgress
	if source.FailoverInProgress != nil {
		failoverInProgress := *source.FailoverInProgress
		account.FailoverInProgress = &failoverInProgress
	} else {
		account.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if source.GeoReplicationStats != nil {
		var geoReplicationStat GeoReplicationStats_STATUS
		err := geoReplicationStat.AssignPropertiesFromGeoReplicationStatsSTATUS(source.GeoReplicationStats)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromGeoReplicationStatsSTATUS() to populate field GeoReplicationStats")
		}
		account.GeoReplicationStats = &geoReplicationStat
	} else {
		account.GeoReplicationStats = nil
	}

	// Id
	account.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity Identity_STATUS
		err := identity.AssignPropertiesFromIdentitySTATUS(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentitySTATUS() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		account.IsHnsEnabled = &isHnsEnabled
	} else {
		account.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		account.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		account.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if source.KeyCreationTime != nil {
		var keyCreationTime KeyCreationTime_STATUS
		err := keyCreationTime.AssignPropertiesFromKeyCreationTimeSTATUS(source.KeyCreationTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyCreationTimeSTATUS() to populate field KeyCreationTime")
		}
		account.KeyCreationTime = &keyCreationTime
	} else {
		account.KeyCreationTime = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy_STATUS
		err := keyPolicy.AssignPropertiesFromKeyPolicySTATUS(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicySTATUS() to populate field KeyPolicy")
		}
		account.KeyPolicy = &keyPolicy
	} else {
		account.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		kind := StorageAccountSTATUSKind(*source.Kind)
		account.Kind = &kind
	} else {
		account.Kind = nil
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountPropertiesSTATUSLargeFileSharesState(*source.LargeFileSharesState)
		account.LargeFileSharesState = &largeFileSharesState
	} else {
		account.LargeFileSharesState = nil
	}

	// LastGeoFailoverTime
	account.LastGeoFailoverTime = genruntime.ClonePointerToString(source.LastGeoFailoverTime)

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountPropertiesSTATUSMinimumTlsVersion(*source.MinimumTlsVersion)
		account.MinimumTlsVersion = &minimumTlsVersion
	} else {
		account.MinimumTlsVersion = nil
	}

	// Name
	account.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet_STATUS
		err := networkAcl.AssignPropertiesFromNetworkRuleSetSTATUS(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSetSTATUS() to populate field NetworkAcls")
		}
		account.NetworkAcls = &networkAcl
	} else {
		account.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if source.PrimaryEndpoints != nil {
		var primaryEndpoint Endpoints_STATUS
		err := primaryEndpoint.AssignPropertiesFromEndpointsSTATUS(source.PrimaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEndpointsSTATUS() to populate field PrimaryEndpoints")
		}
		account.PrimaryEndpoints = &primaryEndpoint
	} else {
		account.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	account.PrimaryLocation = genruntime.ClonePointerToString(source.PrimaryLocation)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		account.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		account.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := StorageAccountPropertiesSTATUSProvisioningState(*source.ProvisioningState)
		account.ProvisioningState = &provisioningState
	} else {
		account.ProvisioningState = nil
	}

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference_STATUS
		err := routingPreference.AssignPropertiesFromRoutingPreferenceSTATUS(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreferenceSTATUS() to populate field RoutingPreference")
		}
		account.RoutingPreference = &routingPreference
	} else {
		account.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy_STATUS
		err := sasPolicy.AssignPropertiesFromSasPolicySTATUS(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicySTATUS() to populate field SasPolicy")
		}
		account.SasPolicy = &sasPolicy
	} else {
		account.SasPolicy = nil
	}

	// SecondaryEndpoints
	if source.SecondaryEndpoints != nil {
		var secondaryEndpoint Endpoints_STATUS
		err := secondaryEndpoint.AssignPropertiesFromEndpointsSTATUS(source.SecondaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEndpointsSTATUS() to populate field SecondaryEndpoints")
		}
		account.SecondaryEndpoints = &secondaryEndpoint
	} else {
		account.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	account.SecondaryLocation = genruntime.ClonePointerToString(source.SecondaryLocation)

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignPropertiesFromSkuSTATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuSTATUS() to populate field Sku")
		}
		account.Sku = &sku
	} else {
		account.Sku = nil
	}

	// StatusOfPrimary
	if source.StatusOfPrimary != nil {
		statusOfPrimary := StorageAccountPropertiesSTATUSStatusOfPrimary(*source.StatusOfPrimary)
		account.StatusOfPrimary = &statusOfPrimary
	} else {
		account.StatusOfPrimary = nil
	}

	// StatusOfSecondary
	if source.StatusOfSecondary != nil {
		statusOfSecondary := StorageAccountPropertiesSTATUSStatusOfSecondary(*source.StatusOfSecondary)
		account.StatusOfSecondary = &statusOfSecondary
	} else {
		account.StatusOfSecondary = nil
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		account.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		account.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	account.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountSTATUS populates the provided destination StorageAccount_STATUS from our StorageAccount_STATUS
func (account *StorageAccount_STATUS) AssignPropertiesToStorageAccountSTATUS(destination *alpha20210401s.StorageAccount_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if account.AccessTier != nil {
		accessTier := string(*account.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if account.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *account.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if account.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *account.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if account.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *account.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if account.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication alpha20210401s.AzureFilesIdentityBasedAuthentication_STATUS
		err := account.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if account.BlobRestoreStatus != nil {
		var blobRestoreStatus alpha20210401s.BlobRestoreStatus_STATUS
		err := account.BlobRestoreStatus.AssignPropertiesToBlobRestoreStatusSTATUS(&blobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreStatusSTATUS() to populate field BlobRestoreStatus")
		}
		destination.BlobRestoreStatus = &blobRestoreStatus
	} else {
		destination.BlobRestoreStatus = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(account.Conditions)

	// CreationTime
	destination.CreationTime = genruntime.ClonePointerToString(account.CreationTime)

	// CustomDomain
	if account.CustomDomain != nil {
		var customDomain alpha20210401s.CustomDomain_STATUS
		err := account.CustomDomain.AssignPropertiesToCustomDomainSTATUS(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomainSTATUS() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if account.Encryption != nil {
		var encryption alpha20210401s.Encryption_STATUS
		err := account.Encryption.AssignPropertiesToEncryptionSTATUS(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSTATUS() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if account.ExtendedLocation != nil {
		var extendedLocation alpha20210401s.ExtendedLocation_STATUS
		err := account.ExtendedLocation.AssignPropertiesToExtendedLocationSTATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FailoverInProgress
	if account.FailoverInProgress != nil {
		failoverInProgress := *account.FailoverInProgress
		destination.FailoverInProgress = &failoverInProgress
	} else {
		destination.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if account.GeoReplicationStats != nil {
		var geoReplicationStat alpha20210401s.GeoReplicationStats_STATUS
		err := account.GeoReplicationStats.AssignPropertiesToGeoReplicationStatsSTATUS(&geoReplicationStat)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToGeoReplicationStatsSTATUS() to populate field GeoReplicationStats")
		}
		destination.GeoReplicationStats = &geoReplicationStat
	} else {
		destination.GeoReplicationStats = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(account.Id)

	// Identity
	if account.Identity != nil {
		var identity alpha20210401s.Identity_STATUS
		err := account.Identity.AssignPropertiesToIdentitySTATUS(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentitySTATUS() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if account.IsHnsEnabled != nil {
		isHnsEnabled := *account.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if account.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *account.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if account.KeyCreationTime != nil {
		var keyCreationTime alpha20210401s.KeyCreationTime_STATUS
		err := account.KeyCreationTime.AssignPropertiesToKeyCreationTimeSTATUS(&keyCreationTime)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyCreationTimeSTATUS() to populate field KeyCreationTime")
		}
		destination.KeyCreationTime = &keyCreationTime
	} else {
		destination.KeyCreationTime = nil
	}

	// KeyPolicy
	if account.KeyPolicy != nil {
		var keyPolicy alpha20210401s.KeyPolicy_STATUS
		err := account.KeyPolicy.AssignPropertiesToKeyPolicySTATUS(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicySTATUS() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	if account.Kind != nil {
		kind := string(*account.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// LargeFileSharesState
	if account.LargeFileSharesState != nil {
		largeFileSharesState := string(*account.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// LastGeoFailoverTime
	destination.LastGeoFailoverTime = genruntime.ClonePointerToString(account.LastGeoFailoverTime)

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// MinimumTlsVersion
	if account.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*account.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(account.Name)

	// NetworkAcls
	if account.NetworkAcls != nil {
		var networkAcl alpha20210401s.NetworkRuleSet_STATUS
		err := account.NetworkAcls.AssignPropertiesToNetworkRuleSetSTATUS(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSetSTATUS() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if account.PrimaryEndpoints != nil {
		var primaryEndpoint alpha20210401s.Endpoints_STATUS
		err := account.PrimaryEndpoints.AssignPropertiesToEndpointsSTATUS(&primaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEndpointsSTATUS() to populate field PrimaryEndpoints")
		}
		destination.PrimaryEndpoints = &primaryEndpoint
	} else {
		destination.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	destination.PrimaryLocation = genruntime.ClonePointerToString(account.PrimaryLocation)

	// PrivateEndpointConnections
	if account.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]alpha20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded, len(account.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range account.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection alpha20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if account.ProvisioningState != nil {
		provisioningState := string(*account.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RoutingPreference
	if account.RoutingPreference != nil {
		var routingPreference alpha20210401s.RoutingPreference_STATUS
		err := account.RoutingPreference.AssignPropertiesToRoutingPreferenceSTATUS(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreferenceSTATUS() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if account.SasPolicy != nil {
		var sasPolicy alpha20210401s.SasPolicy_STATUS
		err := account.SasPolicy.AssignPropertiesToSasPolicySTATUS(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicySTATUS() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// SecondaryEndpoints
	if account.SecondaryEndpoints != nil {
		var secondaryEndpoint alpha20210401s.Endpoints_STATUS
		err := account.SecondaryEndpoints.AssignPropertiesToEndpointsSTATUS(&secondaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEndpointsSTATUS() to populate field SecondaryEndpoints")
		}
		destination.SecondaryEndpoints = &secondaryEndpoint
	} else {
		destination.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	destination.SecondaryLocation = genruntime.ClonePointerToString(account.SecondaryLocation)

	// Sku
	if account.Sku != nil {
		var sku alpha20210401s.Sku_STATUS
		err := account.Sku.AssignPropertiesToSkuSTATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuSTATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StatusOfPrimary
	if account.StatusOfPrimary != nil {
		statusOfPrimary := string(*account.StatusOfPrimary)
		destination.StatusOfPrimary = &statusOfPrimary
	} else {
		destination.StatusOfPrimary = nil
	}

	// StatusOfSecondary
	if account.StatusOfSecondary != nil {
		statusOfSecondary := string(*account.StatusOfSecondary)
		destination.StatusOfSecondary = &statusOfSecondary
	} else {
		destination.StatusOfSecondary = nil
	}

	// SupportsHttpsTrafficOnly
	if account.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *account.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(account.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccounts_Spec struct {
	AccessTier                            *StorageAccountPropertiesCreateParametersAccessTier `json:"accessTier,omitempty"`
	AllowBlobPublicAccess                 *bool                                               `json:"allowBlobPublicAccess,omitempty"`
	AllowCrossTenantReplication           *bool                                               `json:"allowCrossTenantReplication,omitempty"`
	AllowSharedKeyAccess                  *bool                                               `json:"allowSharedKeyAccess,omitempty"`
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication              `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	// +kubebuilder:validation:MaxLength=24
	// +kubebuilder:validation:MinLength=3
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName        string            `json:"azureName,omitempty"`
	CustomDomain     *CustomDomain     `json:"customDomain,omitempty"`
	Encryption       *Encryption       `json:"encryption,omitempty"`
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`
	Identity         *Identity         `json:"identity,omitempty"`
	IsHnsEnabled     *bool             `json:"isHnsEnabled,omitempty"`
	IsNfsV3Enabled   *bool             `json:"isNfsV3Enabled,omitempty"`
	KeyPolicy        *KeyPolicy        `json:"keyPolicy,omitempty"`

	// +kubebuilder:validation:Required
	Kind                 *StorageAccountsSpecKind                                      `json:"kind,omitempty"`
	LargeFileSharesState *StorageAccountPropertiesCreateParametersLargeFileSharesState `json:"largeFileSharesState,omitempty"`
	Location             *string                                                       `json:"location,omitempty"`
	MinimumTlsVersion    *StorageAccountPropertiesCreateParametersMinimumTlsVersion    `json:"minimumTlsVersion,omitempty"`
	NetworkAcls          *NetworkRuleSet                                               `json:"networkAcls,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *StorageAccountOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner             *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	RoutingPreference *RoutingPreference                 `json:"routingPreference,omitempty"`
	SasPolicy         *SasPolicy                         `json:"sasPolicy,omitempty"`

	// +kubebuilder:validation:Required
	Sku                      *Sku              `json:"sku,omitempty"`
	SupportsHttpsTrafficOnly *bool             `json:"supportsHttpsTrafficOnly,omitempty"`
	Tags                     map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccounts_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (accounts *StorageAccounts_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if accounts == nil {
		return nil, nil
	}
	result := &StorageAccounts_SpecARM{}

	// Set property ‘ExtendedLocation’:
	if accounts.ExtendedLocation != nil {
		extendedLocationARM, err := (*accounts.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := *extendedLocationARM.(*ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if accounts.Identity != nil {
		identityARM, err := (*accounts.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*IdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	if accounts.Kind != nil {
		kind := *accounts.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if accounts.Location != nil {
		location := *accounts.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if accounts.AccessTier != nil ||
		accounts.AllowBlobPublicAccess != nil ||
		accounts.AllowCrossTenantReplication != nil ||
		accounts.AllowSharedKeyAccess != nil ||
		accounts.AzureFilesIdentityBasedAuthentication != nil ||
		accounts.CustomDomain != nil ||
		accounts.Encryption != nil ||
		accounts.IsHnsEnabled != nil ||
		accounts.IsNfsV3Enabled != nil ||
		accounts.KeyPolicy != nil ||
		accounts.LargeFileSharesState != nil ||
		accounts.MinimumTlsVersion != nil ||
		accounts.NetworkAcls != nil ||
		accounts.RoutingPreference != nil ||
		accounts.SasPolicy != nil ||
		accounts.SupportsHttpsTrafficOnly != nil {
		result.Properties = &StorageAccountPropertiesCreateParametersARM{}
	}
	if accounts.AccessTier != nil {
		accessTier := *accounts.AccessTier
		result.Properties.AccessTier = &accessTier
	}
	if accounts.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *accounts.AllowBlobPublicAccess
		result.Properties.AllowBlobPublicAccess = &allowBlobPublicAccess
	}
	if accounts.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *accounts.AllowCrossTenantReplication
		result.Properties.AllowCrossTenantReplication = &allowCrossTenantReplication
	}
	if accounts.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *accounts.AllowSharedKeyAccess
		result.Properties.AllowSharedKeyAccess = &allowSharedKeyAccess
	}
	if accounts.AzureFilesIdentityBasedAuthentication != nil {
		azureFilesIdentityBasedAuthenticationARM, err := (*accounts.AzureFilesIdentityBasedAuthentication).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		azureFilesIdentityBasedAuthentication := *azureFilesIdentityBasedAuthenticationARM.(*AzureFilesIdentityBasedAuthenticationARM)
		result.Properties.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	}
	if accounts.CustomDomain != nil {
		customDomainARM, err := (*accounts.CustomDomain).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		customDomain := *customDomainARM.(*CustomDomainARM)
		result.Properties.CustomDomain = &customDomain
	}
	if accounts.Encryption != nil {
		encryptionARM, err := (*accounts.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := *encryptionARM.(*EncryptionARM)
		result.Properties.Encryption = &encryption
	}
	if accounts.IsHnsEnabled != nil {
		isHnsEnabled := *accounts.IsHnsEnabled
		result.Properties.IsHnsEnabled = &isHnsEnabled
	}
	if accounts.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *accounts.IsNfsV3Enabled
		result.Properties.IsNfsV3Enabled = &isNfsV3Enabled
	}
	if accounts.KeyPolicy != nil {
		keyPolicyARM, err := (*accounts.KeyPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyPolicy := *keyPolicyARM.(*KeyPolicyARM)
		result.Properties.KeyPolicy = &keyPolicy
	}
	if accounts.LargeFileSharesState != nil {
		largeFileSharesState := *accounts.LargeFileSharesState
		result.Properties.LargeFileSharesState = &largeFileSharesState
	}
	if accounts.MinimumTlsVersion != nil {
		minimumTlsVersion := *accounts.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}
	if accounts.NetworkAcls != nil {
		networkAclsARM, err := (*accounts.NetworkAcls).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkAcls := *networkAclsARM.(*NetworkRuleSetARM)
		result.Properties.NetworkAcls = &networkAcls
	}
	if accounts.RoutingPreference != nil {
		routingPreferenceARM, err := (*accounts.RoutingPreference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		routingPreference := *routingPreferenceARM.(*RoutingPreferenceARM)
		result.Properties.RoutingPreference = &routingPreference
	}
	if accounts.SasPolicy != nil {
		sasPolicyARM, err := (*accounts.SasPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sasPolicy := *sasPolicyARM.(*SasPolicyARM)
		result.Properties.SasPolicy = &sasPolicy
	}
	if accounts.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *accounts.SupportsHttpsTrafficOnly
		result.Properties.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	}

	// Set property ‘Sku’:
	if accounts.Sku != nil {
		skuARM, err := (*accounts.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*SkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if accounts.Tags != nil {
		result.Tags = make(map[string]string, len(accounts.Tags))
		for key, value := range accounts.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (accounts *StorageAccounts_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (accounts *StorageAccounts_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_SpecARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			accounts.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			accounts.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			accounts.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			accounts.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			accounts.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// Set property ‘AzureName’:
	accounts.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			accounts.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			accounts.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		accounts.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		accounts.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			accounts.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			accounts.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			accounts.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		accounts.Kind = &kind
	}

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			accounts.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		accounts.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			accounts.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			accounts.NetworkAcls = &networkAcls
		}
	}

	// no assignment for property ‘OperatorSpec’

	// Set property ‘Owner’:
	accounts.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			accounts.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			accounts.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		accounts.Sku = &sku
	}

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			accounts.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		accounts.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			accounts.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_Spec{}

// ConvertSpecFrom populates our StorageAccounts_Spec from the provided source
func (accounts *StorageAccounts_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210401s.StorageAccounts_Spec)
	if ok {
		// Populate our instance from source
		return accounts.AssignPropertiesFromStorageAccountsSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210401s.StorageAccounts_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = accounts.AssignPropertiesFromStorageAccountsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210401s.StorageAccounts_Spec)
	if ok {
		// Populate destination from our instance
		return accounts.AssignPropertiesToStorageAccountsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210401s.StorageAccounts_Spec{}
	err := accounts.AssignPropertiesToStorageAccountsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsSpec populates our StorageAccounts_Spec from the provided source StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) AssignPropertiesFromStorageAccountsSpec(source *alpha20210401s.StorageAccounts_Spec) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountPropertiesCreateParametersAccessTier(*source.AccessTier)
		accounts.AccessTier = &accessTier
	} else {
		accounts.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		accounts.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		accounts.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		accounts.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		accounts.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		accounts.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		accounts.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAzureFilesIdentityBasedAuthentication() to populate field AzureFilesIdentityBasedAuthentication")
		}
		accounts.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		accounts.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	accounts.AzureName = source.AzureName

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain
		err := customDomain.AssignPropertiesFromCustomDomain(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCustomDomain() to populate field CustomDomain")
		}
		accounts.CustomDomain = &customDomain
	} else {
		accounts.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption() to populate field Encryption")
		}
		accounts.Encryption = &encryption
	} else {
		accounts.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		accounts.ExtendedLocation = &extendedLocation
	} else {
		accounts.ExtendedLocation = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity
		err := identity.AssignPropertiesFromIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity() to populate field Identity")
		}
		accounts.Identity = &identity
	} else {
		accounts.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		accounts.IsHnsEnabled = &isHnsEnabled
	} else {
		accounts.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		accounts.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		accounts.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy
		err := keyPolicy.AssignPropertiesFromKeyPolicy(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyPolicy() to populate field KeyPolicy")
		}
		accounts.KeyPolicy = &keyPolicy
	} else {
		accounts.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		kind := StorageAccountsSpecKind(*source.Kind)
		accounts.Kind = &kind
	} else {
		accounts.Kind = nil
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountPropertiesCreateParametersLargeFileSharesState(*source.LargeFileSharesState)
		accounts.LargeFileSharesState = &largeFileSharesState
	} else {
		accounts.LargeFileSharesState = nil
	}

	// Location
	accounts.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountPropertiesCreateParametersMinimumTlsVersion(*source.MinimumTlsVersion)
		accounts.MinimumTlsVersion = &minimumTlsVersion
	} else {
		accounts.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet
		err := networkAcl.AssignPropertiesFromNetworkRuleSet(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSet() to populate field NetworkAcls")
		}
		accounts.NetworkAcls = &networkAcl
	} else {
		accounts.NetworkAcls = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec StorageAccountOperatorSpec
		err := operatorSpec.AssignPropertiesFromStorageAccountOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountOperatorSpec() to populate field OperatorSpec")
		}
		accounts.OperatorSpec = &operatorSpec
	} else {
		accounts.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		accounts.Owner = &owner
	} else {
		accounts.Owner = nil
	}

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference
		err := routingPreference.AssignPropertiesFromRoutingPreference(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRoutingPreference() to populate field RoutingPreference")
		}
		accounts.RoutingPreference = &routingPreference
	} else {
		accounts.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy
		err := sasPolicy.AssignPropertiesFromSasPolicy(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSasPolicy() to populate field SasPolicy")
		}
		accounts.SasPolicy = &sasPolicy
	} else {
		accounts.SasPolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		accounts.Sku = &sku
	} else {
		accounts.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		accounts.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		accounts.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	accounts.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsSpec populates the provided destination StorageAccounts_Spec from our StorageAccounts_Spec
func (accounts *StorageAccounts_Spec) AssignPropertiesToStorageAccountsSpec(destination *alpha20210401s.StorageAccounts_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if accounts.AccessTier != nil {
		accessTier := string(*accounts.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if accounts.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *accounts.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if accounts.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *accounts.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if accounts.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *accounts.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if accounts.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication alpha20210401s.AzureFilesIdentityBasedAuthentication
		err := accounts.AzureFilesIdentityBasedAuthentication.AssignPropertiesToAzureFilesIdentityBasedAuthentication(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAzureFilesIdentityBasedAuthentication() to populate field AzureFilesIdentityBasedAuthentication")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	destination.AzureName = accounts.AzureName

	// CustomDomain
	if accounts.CustomDomain != nil {
		var customDomain alpha20210401s.CustomDomain
		err := accounts.CustomDomain.AssignPropertiesToCustomDomain(&customDomain)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCustomDomain() to populate field CustomDomain")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if accounts.Encryption != nil {
		var encryption alpha20210401s.Encryption
		err := accounts.Encryption.AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if accounts.ExtendedLocation != nil {
		var extendedLocation alpha20210401s.ExtendedLocation
		err := accounts.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Identity
	if accounts.Identity != nil {
		var identity alpha20210401s.Identity
		err := accounts.Identity.AssignPropertiesToIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if accounts.IsHnsEnabled != nil {
		isHnsEnabled := *accounts.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if accounts.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *accounts.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if accounts.KeyPolicy != nil {
		var keyPolicy alpha20210401s.KeyPolicy
		err := accounts.KeyPolicy.AssignPropertiesToKeyPolicy(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyPolicy() to populate field KeyPolicy")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	if accounts.Kind != nil {
		kind := string(*accounts.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// LargeFileSharesState
	if accounts.LargeFileSharesState != nil {
		largeFileSharesState := string(*accounts.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(accounts.Location)

	// MinimumTlsVersion
	if accounts.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*accounts.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if accounts.NetworkAcls != nil {
		var networkAcl alpha20210401s.NetworkRuleSet
		err := accounts.NetworkAcls.AssignPropertiesToNetworkRuleSet(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSet() to populate field NetworkAcls")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// OperatorSpec
	if accounts.OperatorSpec != nil {
		var operatorSpec alpha20210401s.StorageAccountOperatorSpec
		err := accounts.OperatorSpec.AssignPropertiesToStorageAccountOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = accounts.OriginalVersion()

	// Owner
	if accounts.Owner != nil {
		owner := accounts.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RoutingPreference
	if accounts.RoutingPreference != nil {
		var routingPreference alpha20210401s.RoutingPreference
		err := accounts.RoutingPreference.AssignPropertiesToRoutingPreference(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRoutingPreference() to populate field RoutingPreference")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if accounts.SasPolicy != nil {
		var sasPolicy alpha20210401s.SasPolicy
		err := accounts.SasPolicy.AssignPropertiesToSasPolicy(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSasPolicy() to populate field SasPolicy")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// Sku
	if accounts.Sku != nil {
		var sku alpha20210401s.Sku
		err := accounts.Sku.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SupportsHttpsTrafficOnly
	if accounts.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *accounts.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(accounts.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (accounts *StorageAccounts_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (accounts *StorageAccounts_Spec) SetAzureName(azureName string) { accounts.AzureName = azureName }

// Deprecated version of AzureFilesIdentityBasedAuthentication. Use v1beta20210401.AzureFilesIdentityBasedAuthentication instead
type AzureFilesIdentityBasedAuthentication struct {
	ActiveDirectoryProperties *ActiveDirectoryProperties                                   `json:"activeDirectoryProperties,omitempty"`
	DefaultSharePermission    *AzureFilesIdentityBasedAuthenticationDefaultSharePermission `json:"defaultSharePermission,omitempty"`

	// +kubebuilder:validation:Required
	DirectoryServiceOptions *AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions `json:"directoryServiceOptions,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFilesIdentityBasedAuthentication{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (authentication *AzureFilesIdentityBasedAuthentication) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if authentication == nil {
		return nil, nil
	}
	result := &AzureFilesIdentityBasedAuthenticationARM{}

	// Set property ‘ActiveDirectoryProperties’:
	if authentication.ActiveDirectoryProperties != nil {
		activeDirectoryPropertiesARM, err := (*authentication.ActiveDirectoryProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		activeDirectoryProperties := *activeDirectoryPropertiesARM.(*ActiveDirectoryPropertiesARM)
		result.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := *authentication.DefaultSharePermission
		result.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	if authentication.DirectoryServiceOptions != nil {
		directoryServiceOptions := *authentication.DirectoryServiceOptions
		result.DirectoryServiceOptions = &directoryServiceOptions
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authentication *AzureFilesIdentityBasedAuthentication) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthenticationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authentication *AzureFilesIdentityBasedAuthentication) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthenticationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthenticationARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		authentication.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		authentication.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	if typedInput.DirectoryServiceOptions != nil {
		directoryServiceOptions := *typedInput.DirectoryServiceOptions
		authentication.DirectoryServiceOptions = &directoryServiceOptions
	}

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthentication populates our AzureFilesIdentityBasedAuthentication from the provided source AzureFilesIdentityBasedAuthentication
func (authentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source *alpha20210401s.AzureFilesIdentityBasedAuthentication) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryProperties(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryProperties() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthenticationDefaultSharePermission(*source.DefaultSharePermission)
		authentication.DefaultSharePermission = &defaultSharePermission
	} else {
		authentication.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		directoryServiceOption := AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions(*source.DirectoryServiceOptions)
		authentication.DirectoryServiceOptions = &directoryServiceOption
	} else {
		authentication.DirectoryServiceOptions = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthentication populates the provided destination AzureFilesIdentityBasedAuthentication from our AzureFilesIdentityBasedAuthentication
func (authentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesToAzureFilesIdentityBasedAuthentication(destination *alpha20210401s.AzureFilesIdentityBasedAuthentication) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty alpha20210401s.ActiveDirectoryProperties
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryProperties(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryProperties() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := string(*authentication.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if authentication.DirectoryServiceOptions != nil {
		directoryServiceOption := string(*authentication.DirectoryServiceOptions)
		destination.DirectoryServiceOptions = &directoryServiceOption
	} else {
		destination.DirectoryServiceOptions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AzureFilesIdentityBasedAuthentication_STATUS. Use v1beta20210401.AzureFilesIdentityBasedAuthentication_STATUS instead
type AzureFilesIdentityBasedAuthentication_STATUS struct {
	ActiveDirectoryProperties *ActiveDirectoryProperties_STATUS                                   `json:"activeDirectoryProperties,omitempty"`
	DefaultSharePermission    *AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission  `json:"defaultSharePermission,omitempty"`
	DirectoryServiceOptions   *AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions `json:"directoryServiceOptions,omitempty"`
}

var _ genruntime.FromARMConverter = &AzureFilesIdentityBasedAuthentication_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (authentication *AzureFilesIdentityBasedAuthentication_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthentication_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (authentication *AzureFilesIdentityBasedAuthentication_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthentication_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthentication_STATUSARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties_STATUS
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		authentication.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		authentication.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	if typedInput.DirectoryServiceOptions != nil {
		directoryServiceOptions := *typedInput.DirectoryServiceOptions
		authentication.DirectoryServiceOptions = &directoryServiceOptions
	}

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS populates our AzureFilesIdentityBasedAuthentication_STATUS from the provided source AzureFilesIdentityBasedAuthentication_STATUS
func (authentication *AzureFilesIdentityBasedAuthentication_STATUS) AssignPropertiesFromAzureFilesIdentityBasedAuthenticationSTATUS(source *alpha20210401s.AzureFilesIdentityBasedAuthentication_STATUS) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties_STATUS
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryPropertiesSTATUS(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromActiveDirectoryPropertiesSTATUS() to populate field ActiveDirectoryProperties")
		}
		authentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		authentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission(*source.DefaultSharePermission)
		authentication.DefaultSharePermission = &defaultSharePermission
	} else {
		authentication.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		directoryServiceOption := AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions(*source.DirectoryServiceOptions)
		authentication.DirectoryServiceOptions = &directoryServiceOption
	} else {
		authentication.DirectoryServiceOptions = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS populates the provided destination AzureFilesIdentityBasedAuthentication_STATUS from our AzureFilesIdentityBasedAuthentication_STATUS
func (authentication *AzureFilesIdentityBasedAuthentication_STATUS) AssignPropertiesToAzureFilesIdentityBasedAuthenticationSTATUS(destination *alpha20210401s.AzureFilesIdentityBasedAuthentication_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if authentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty alpha20210401s.ActiveDirectoryProperties_STATUS
		err := authentication.ActiveDirectoryProperties.AssignPropertiesToActiveDirectoryPropertiesSTATUS(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToActiveDirectoryPropertiesSTATUS() to populate field ActiveDirectoryProperties")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if authentication.DefaultSharePermission != nil {
		defaultSharePermission := string(*authentication.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if authentication.DirectoryServiceOptions != nil {
		directoryServiceOption := string(*authentication.DirectoryServiceOptions)
		destination.DirectoryServiceOptions = &directoryServiceOption
	} else {
		destination.DirectoryServiceOptions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BlobRestoreStatus_STATUS. Use v1beta20210401.BlobRestoreStatus_STATUS instead
type BlobRestoreStatus_STATUS struct {
	FailureReason *string                        `json:"failureReason,omitempty"`
	Parameters    *BlobRestoreParameters_STATUS  `json:"parameters,omitempty"`
	RestoreId     *string                        `json:"restoreId,omitempty"`
	Status        *BlobRestoreStatusSTATUSStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &BlobRestoreStatus_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (status *BlobRestoreStatus_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreStatus_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (status *BlobRestoreStatus_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreStatus_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreStatus_STATUSARM, got %T", armInput)
	}

	// Set property ‘FailureReason’:
	if typedInput.FailureReason != nil {
		failureReason := *typedInput.FailureReason
		status.FailureReason = &failureReason
	}

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 BlobRestoreParameters_STATUS
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		status.Parameters = &parameters
	}

	// Set property ‘RestoreId’:
	if typedInput.RestoreId != nil {
		restoreId := *typedInput.RestoreId
		status.RestoreId = &restoreId
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status1 := *typedInput.Status
		status.Status = &status1
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreStatusSTATUS populates our BlobRestoreStatus_STATUS from the provided source BlobRestoreStatus_STATUS
func (status *BlobRestoreStatus_STATUS) AssignPropertiesFromBlobRestoreStatusSTATUS(source *alpha20210401s.BlobRestoreStatus_STATUS) error {

	// FailureReason
	status.FailureReason = genruntime.ClonePointerToString(source.FailureReason)

	// Parameters
	if source.Parameters != nil {
		var parameter BlobRestoreParameters_STATUS
		err := parameter.AssignPropertiesFromBlobRestoreParametersSTATUS(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreParametersSTATUS() to populate field Parameters")
		}
		status.Parameters = &parameter
	} else {
		status.Parameters = nil
	}

	// RestoreId
	status.RestoreId = genruntime.ClonePointerToString(source.RestoreId)

	// Status
	if source.Status != nil {
		statusTemp := BlobRestoreStatusSTATUSStatus(*source.Status)
		status.Status = &statusTemp
	} else {
		status.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreStatusSTATUS populates the provided destination BlobRestoreStatus_STATUS from our BlobRestoreStatus_STATUS
func (status *BlobRestoreStatus_STATUS) AssignPropertiesToBlobRestoreStatusSTATUS(destination *alpha20210401s.BlobRestoreStatus_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FailureReason
	destination.FailureReason = genruntime.ClonePointerToString(status.FailureReason)

	// Parameters
	if status.Parameters != nil {
		var parameter alpha20210401s.BlobRestoreParameters_STATUS
		err := status.Parameters.AssignPropertiesToBlobRestoreParametersSTATUS(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreParametersSTATUS() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// RestoreId
	destination.RestoreId = genruntime.ClonePointerToString(status.RestoreId)

	// Status
	if status.Status != nil {
		statusTemp := string(*status.Status)
		destination.Status = &statusTemp
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CustomDomain. Use v1beta20210401.CustomDomain instead
type CustomDomain struct {
	// +kubebuilder:validation:Required
	Name             *string `json:"name,omitempty"`
	UseSubDomainName *bool   `json:"useSubDomainName,omitempty"`
}

var _ genruntime.ARMTransformer = &CustomDomain{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (domain *CustomDomain) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if domain == nil {
		return nil, nil
	}
	result := &CustomDomainARM{}

	// Set property ‘Name’:
	if domain.Name != nil {
		name := *domain.Name
		result.Name = &name
	}

	// Set property ‘UseSubDomainName’:
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		result.UseSubDomainName = &useSubDomainName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domain *CustomDomain) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomainARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domain *CustomDomain) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomainARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomainARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		domain.Name = &name
	}

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomain populates our CustomDomain from the provided source CustomDomain
func (domain *CustomDomain) AssignPropertiesFromCustomDomain(source *alpha20210401s.CustomDomain) error {

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomain populates the provided destination CustomDomain from our CustomDomain
func (domain *CustomDomain) AssignPropertiesToCustomDomain(destination *alpha20210401s.CustomDomain) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CustomDomain_STATUS. Use v1beta20210401.CustomDomain_STATUS instead
type CustomDomain_STATUS struct {
	Name             *string `json:"name,omitempty"`
	UseSubDomainName *bool   `json:"useSubDomainName,omitempty"`
}

var _ genruntime.FromARMConverter = &CustomDomain_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (domain *CustomDomain_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomain_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (domain *CustomDomain_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomain_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomain_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		domain.Name = &name
	}

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomainSTATUS populates our CustomDomain_STATUS from the provided source CustomDomain_STATUS
func (domain *CustomDomain_STATUS) AssignPropertiesFromCustomDomainSTATUS(source *alpha20210401s.CustomDomain_STATUS) error {

	// Name
	domain.Name = genruntime.ClonePointerToString(source.Name)

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		domain.UseSubDomainName = &useSubDomainName
	} else {
		domain.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomainSTATUS populates the provided destination CustomDomain_STATUS from our CustomDomain_STATUS
func (domain *CustomDomain_STATUS) AssignPropertiesToCustomDomainSTATUS(destination *alpha20210401s.CustomDomain_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(domain.Name)

	// UseSubDomainName
	if domain.UseSubDomainName != nil {
		useSubDomainName := *domain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Encryption. Use v1beta20210401.Encryption instead
type Encryption struct {
	Identity *EncryptionIdentity `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	KeySource                       *EncryptionKeySource `json:"keySource,omitempty"`
	Keyvaultproperties              *KeyVaultProperties  `json:"keyvaultproperties,omitempty"`
	RequireInfrastructureEncryption *bool                `json:"requireInfrastructureEncryption,omitempty"`
	Services                        *EncryptionServices  `json:"services,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	result := &EncryptionARM{}

	// Set property ‘Identity’:
	if encryption.Identity != nil {
		identityARM, err := (*encryption.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*EncryptionIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘KeySource’:
	if encryption.KeySource != nil {
		keySource := *encryption.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘Keyvaultproperties’:
	if encryption.Keyvaultproperties != nil {
		keyvaultpropertiesARM, err := (*encryption.Keyvaultproperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyvaultproperties := *keyvaultpropertiesARM.(*KeyVaultPropertiesARM)
		result.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		result.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if encryption.Services != nil {
		servicesARM, err := (*encryption.Services).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		services := *servicesARM.(*EncryptionServicesARM)
		result.Services = &services
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryption.Identity = &identity
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryption.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryption.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption populates our Encryption from the provided source Encryption
func (encryption *Encryption) AssignPropertiesFromEncryption(source *alpha20210401s.Encryption) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity
		err := identity.AssignPropertiesFromEncryptionIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentity() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties
		err := keyvaultproperty.AssignPropertiesFromKeyVaultProperties(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices
		err := service.AssignPropertiesFromEncryptionServices(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServices() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption populates the provided destination Encryption from our Encryption
func (encryption *Encryption) AssignPropertiesToEncryption(destination *alpha20210401s.Encryption) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryption.Identity != nil {
		var identity alpha20210401s.EncryptionIdentity
		err := encryption.Identity.AssignPropertiesToEncryptionIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty alpha20210401s.KeyVaultProperties
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultProperties(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service alpha20210401s.EncryptionServices
		err := encryption.Services.AssignPropertiesToEncryptionServices(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServices() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Encryption_STATUS. Use v1beta20210401.Encryption_STATUS instead
type Encryption_STATUS struct {
	Identity                        *EncryptionIdentity_STATUS `json:"identity,omitempty"`
	KeySource                       *EncryptionSTATUSKeySource `json:"keySource,omitempty"`
	Keyvaultproperties              *KeyVaultProperties_STATUS `json:"keyvaultproperties,omitempty"`
	RequireInfrastructureEncryption *bool                      `json:"requireInfrastructureEncryption,omitempty"`
	Services                        *EncryptionServices_STATUS `json:"services,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_STATUSARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity_STATUS
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryption.Identity = &identity
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryption.KeySource = &keySource
	}

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties_STATUS
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryption.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices_STATUS
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryption.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSTATUS populates our Encryption_STATUS from the provided source Encryption_STATUS
func (encryption *Encryption_STATUS) AssignPropertiesFromEncryptionSTATUS(source *alpha20210401s.Encryption_STATUS) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity_STATUS
		err := identity.AssignPropertiesFromEncryptionIdentitySTATUS(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionIdentitySTATUS() to populate field Identity")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionSTATUSKeySource(*source.KeySource)
		encryption.KeySource = &keySource
	} else {
		encryption.KeySource = nil
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties_STATUS
		err := keyvaultproperty.AssignPropertiesFromKeyVaultPropertiesSTATUS(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesSTATUS() to populate field Keyvaultproperties")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices_STATUS
		err := service.AssignPropertiesFromEncryptionServicesSTATUS(source.Services)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServicesSTATUS() to populate field Services")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionSTATUS populates the provided destination Encryption_STATUS from our Encryption_STATUS
func (encryption *Encryption_STATUS) AssignPropertiesToEncryptionSTATUS(destination *alpha20210401s.Encryption_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryption.Identity != nil {
		var identity alpha20210401s.EncryptionIdentity_STATUS
		err := encryption.Identity.AssignPropertiesToEncryptionIdentitySTATUS(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionIdentitySTATUS() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	if encryption.KeySource != nil {
		keySource := string(*encryption.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty alpha20210401s.KeyVaultProperties_STATUS
		err := encryption.Keyvaultproperties.AssignPropertiesToKeyVaultPropertiesSTATUS(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesSTATUS() to populate field Keyvaultproperties")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service alpha20210401s.EncryptionServices_STATUS
		err := encryption.Services.AssignPropertiesToEncryptionServicesSTATUS(&service)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServicesSTATUS() to populate field Services")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Endpoints_STATUS. Use v1beta20210401.Endpoints_STATUS instead
type Endpoints_STATUS struct {
	Blob               *string                                  `json:"blob,omitempty"`
	Dfs                *string                                  `json:"dfs,omitempty"`
	File               *string                                  `json:"file,omitempty"`
	InternetEndpoints  *StorageAccountInternetEndpoints_STATUS  `json:"internetEndpoints,omitempty"`
	MicrosoftEndpoints *StorageAccountMicrosoftEndpoints_STATUS `json:"microsoftEndpoints,omitempty"`
	Queue              *string                                  `json:"queue,omitempty"`
	Table              *string                                  `json:"table,omitempty"`
	Web                *string                                  `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &Endpoints_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoints *Endpoints_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Endpoints_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoints *Endpoints_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Endpoints_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Endpoints_STATUSARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		endpoints.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		endpoints.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		endpoints.File = &file
	}

	// Set property ‘InternetEndpoints’:
	if typedInput.InternetEndpoints != nil {
		var internetEndpoints1 StorageAccountInternetEndpoints_STATUS
		err := internetEndpoints1.PopulateFromARM(owner, *typedInput.InternetEndpoints)
		if err != nil {
			return err
		}
		internetEndpoints := internetEndpoints1
		endpoints.InternetEndpoints = &internetEndpoints
	}

	// Set property ‘MicrosoftEndpoints’:
	if typedInput.MicrosoftEndpoints != nil {
		var microsoftEndpoints1 StorageAccountMicrosoftEndpoints_STATUS
		err := microsoftEndpoints1.PopulateFromARM(owner, *typedInput.MicrosoftEndpoints)
		if err != nil {
			return err
		}
		microsoftEndpoints := microsoftEndpoints1
		endpoints.MicrosoftEndpoints = &microsoftEndpoints
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		queue := *typedInput.Queue
		endpoints.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		table := *typedInput.Table
		endpoints.Table = &table
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		endpoints.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromEndpointsSTATUS populates our Endpoints_STATUS from the provided source Endpoints_STATUS
func (endpoints *Endpoints_STATUS) AssignPropertiesFromEndpointsSTATUS(source *alpha20210401s.Endpoints_STATUS) error {

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// InternetEndpoints
	if source.InternetEndpoints != nil {
		var internetEndpoint StorageAccountInternetEndpoints_STATUS
		err := internetEndpoint.AssignPropertiesFromStorageAccountInternetEndpointsSTATUS(source.InternetEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountInternetEndpointsSTATUS() to populate field InternetEndpoints")
		}
		endpoints.InternetEndpoints = &internetEndpoint
	} else {
		endpoints.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if source.MicrosoftEndpoints != nil {
		var microsoftEndpoint StorageAccountMicrosoftEndpoints_STATUS
		err := microsoftEndpoint.AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS(source.MicrosoftEndpoints)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS() to populate field MicrosoftEndpoints")
		}
		endpoints.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		endpoints.MicrosoftEndpoints = nil
	}

	// Queue
	endpoints.Queue = genruntime.ClonePointerToString(source.Queue)

	// Table
	endpoints.Table = genruntime.ClonePointerToString(source.Table)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// No error
	return nil
}

// AssignPropertiesToEndpointsSTATUS populates the provided destination Endpoints_STATUS from our Endpoints_STATUS
func (endpoints *Endpoints_STATUS) AssignPropertiesToEndpointsSTATUS(destination *alpha20210401s.Endpoints_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// InternetEndpoints
	if endpoints.InternetEndpoints != nil {
		var internetEndpoint alpha20210401s.StorageAccountInternetEndpoints_STATUS
		err := endpoints.InternetEndpoints.AssignPropertiesToStorageAccountInternetEndpointsSTATUS(&internetEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountInternetEndpointsSTATUS() to populate field InternetEndpoints")
		}
		destination.InternetEndpoints = &internetEndpoint
	} else {
		destination.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if endpoints.MicrosoftEndpoints != nil {
		var microsoftEndpoint alpha20210401s.StorageAccountMicrosoftEndpoints_STATUS
		err := endpoints.MicrosoftEndpoints.AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS(&microsoftEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS() to populate field MicrosoftEndpoints")
		}
		destination.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		destination.MicrosoftEndpoints = nil
	}

	// Queue
	destination.Queue = genruntime.ClonePointerToString(endpoints.Queue)

	// Table
	destination.Table = genruntime.ClonePointerToString(endpoints.Table)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ExtendedLocation. Use v1beta20210401.ExtendedLocation instead
type ExtendedLocation struct {
	Name *string               `json:"name,omitempty"`
	Type *ExtendedLocationType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	result := &ExtendedLocationARM{}

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocationARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesFromExtendedLocation(source *alpha20210401s.ExtendedLocation) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesToExtendedLocation(destination *alpha20210401s.ExtendedLocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ExtendedLocation_STATUS. Use v1beta20210401.ExtendedLocation_STATUS instead
type ExtendedLocation_STATUS struct {
	Name *string                      `json:"name,omitempty"`
	Type *ExtendedLocationType_STATUS `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationSTATUS populates our ExtendedLocation_STATUS from the provided source ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignPropertiesFromExtendedLocationSTATUS(source *alpha20210401s.ExtendedLocation_STATUS) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_STATUS(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationSTATUS populates the provided destination ExtendedLocation_STATUS from our ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignPropertiesToExtendedLocationSTATUS(destination *alpha20210401s.ExtendedLocation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of GeoReplicationStats_STATUS. Use v1beta20210401.GeoReplicationStats_STATUS instead
type GeoReplicationStats_STATUS struct {
	CanFailover  *bool                            `json:"canFailover,omitempty"`
	LastSyncTime *string                          `json:"lastSyncTime,omitempty"`
	Status       *GeoReplicationStatsSTATUSStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &GeoReplicationStats_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (stats *GeoReplicationStats_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &GeoReplicationStats_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (stats *GeoReplicationStats_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(GeoReplicationStats_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected GeoReplicationStats_STATUSARM, got %T", armInput)
	}

	// Set property ‘CanFailover’:
	if typedInput.CanFailover != nil {
		canFailover := *typedInput.CanFailover
		stats.CanFailover = &canFailover
	}

	// Set property ‘LastSyncTime’:
	if typedInput.LastSyncTime != nil {
		lastSyncTime := *typedInput.LastSyncTime
		stats.LastSyncTime = &lastSyncTime
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		stats.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromGeoReplicationStatsSTATUS populates our GeoReplicationStats_STATUS from the provided source GeoReplicationStats_STATUS
func (stats *GeoReplicationStats_STATUS) AssignPropertiesFromGeoReplicationStatsSTATUS(source *alpha20210401s.GeoReplicationStats_STATUS) error {

	// CanFailover
	if source.CanFailover != nil {
		canFailover := *source.CanFailover
		stats.CanFailover = &canFailover
	} else {
		stats.CanFailover = nil
	}

	// LastSyncTime
	stats.LastSyncTime = genruntime.ClonePointerToString(source.LastSyncTime)

	// Status
	if source.Status != nil {
		status := GeoReplicationStatsSTATUSStatus(*source.Status)
		stats.Status = &status
	} else {
		stats.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToGeoReplicationStatsSTATUS populates the provided destination GeoReplicationStats_STATUS from our GeoReplicationStats_STATUS
func (stats *GeoReplicationStats_STATUS) AssignPropertiesToGeoReplicationStatsSTATUS(destination *alpha20210401s.GeoReplicationStats_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CanFailover
	if stats.CanFailover != nil {
		canFailover := *stats.CanFailover
		destination.CanFailover = &canFailover
	} else {
		destination.CanFailover = nil
	}

	// LastSyncTime
	destination.LastSyncTime = genruntime.ClonePointerToString(stats.LastSyncTime)

	// Status
	if stats.Status != nil {
		status := string(*stats.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Identity. Use v1beta20210401.Identity instead
type Identity struct {
	// +kubebuilder:validation:Required
	Type *IdentityType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Identity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &IdentityARM{}

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentity populates our Identity from the provided source Identity
func (identity *Identity) AssignPropertiesFromIdentity(source *alpha20210401s.Identity) error {

	// Type
	if source.Type != nil {
		typeVar := IdentityType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity populates the provided destination Identity from our Identity
func (identity *Identity) AssignPropertiesToIdentity(destination *alpha20210401s.Identity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Identity_STATUS. Use v1beta20210401.Identity_STATUS instead
type Identity_STATUS struct {
	PrincipalId            *string                                `json:"principalId,omitempty"`
	TenantId               *string                                `json:"tenantId,omitempty"`
	Type                   *IdentitySTATUSType                    `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentity_STATUS `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_STATUSARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]UserAssignedIdentity_STATUS, len(typedInput.UserAssignedIdentities))
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentity_STATUS
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentitySTATUS populates our Identity_STATUS from the provided source Identity_STATUS
func (identity *Identity_STATUS) AssignPropertiesFromIdentitySTATUS(source *alpha20210401s.Identity_STATUS) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentitySTATUSType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentity_STATUS, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentity_STATUS
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentitySTATUS(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentitySTATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentitySTATUS populates the provided destination Identity_STATUS from our Identity_STATUS
func (identity *Identity_STATUS) AssignPropertiesToIdentitySTATUS(destination *alpha20210401s.Identity_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]alpha20210401s.UserAssignedIdentity_STATUS, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity alpha20210401s.UserAssignedIdentity_STATUS
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentitySTATUS(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentitySTATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyCreationTime_STATUS. Use v1beta20210401.KeyCreationTime_STATUS instead
type KeyCreationTime_STATUS struct {
	Key1 *string `json:"key1,omitempty"`
	Key2 *string `json:"key2,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyCreationTime_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (time *KeyCreationTime_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyCreationTime_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (time *KeyCreationTime_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyCreationTime_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyCreationTime_STATUSARM, got %T", armInput)
	}

	// Set property ‘Key1’:
	if typedInput.Key1 != nil {
		key1 := *typedInput.Key1
		time.Key1 = &key1
	}

	// Set property ‘Key2’:
	if typedInput.Key2 != nil {
		key2 := *typedInput.Key2
		time.Key2 = &key2
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyCreationTimeSTATUS populates our KeyCreationTime_STATUS from the provided source KeyCreationTime_STATUS
func (time *KeyCreationTime_STATUS) AssignPropertiesFromKeyCreationTimeSTATUS(source *alpha20210401s.KeyCreationTime_STATUS) error {

	// Key1
	time.Key1 = genruntime.ClonePointerToString(source.Key1)

	// Key2
	time.Key2 = genruntime.ClonePointerToString(source.Key2)

	// No error
	return nil
}

// AssignPropertiesToKeyCreationTimeSTATUS populates the provided destination KeyCreationTime_STATUS from our KeyCreationTime_STATUS
func (time *KeyCreationTime_STATUS) AssignPropertiesToKeyCreationTimeSTATUS(destination *alpha20210401s.KeyCreationTime_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key1
	destination.Key1 = genruntime.ClonePointerToString(time.Key1)

	// Key2
	destination.Key2 = genruntime.ClonePointerToString(time.Key2)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyPolicy. Use v1beta20210401.KeyPolicy instead
type KeyPolicy struct {
	// +kubebuilder:validation:Required
	KeyExpirationPeriodInDays *int `json:"keyExpirationPeriodInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *KeyPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &KeyPolicyARM{}

	// Set property ‘KeyExpirationPeriodInDays’:
	if policy.KeyExpirationPeriodInDays != nil {
		keyExpirationPeriodInDays := *policy.KeyExpirationPeriodInDays
		result.KeyExpirationPeriodInDays = &keyExpirationPeriodInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *KeyPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *KeyPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicyARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	if typedInput.KeyExpirationPeriodInDays != nil {
		keyExpirationPeriodInDays := *typedInput.KeyExpirationPeriodInDays
		policy.KeyExpirationPeriodInDays = &keyExpirationPeriodInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicy populates our KeyPolicy from the provided source KeyPolicy
func (policy *KeyPolicy) AssignPropertiesFromKeyPolicy(source *alpha20210401s.KeyPolicy) error {

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(source.KeyExpirationPeriodInDays)

	// No error
	return nil
}

// AssignPropertiesToKeyPolicy populates the provided destination KeyPolicy from our KeyPolicy
func (policy *KeyPolicy) AssignPropertiesToKeyPolicy(destination *alpha20210401s.KeyPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(policy.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyPolicy_STATUS. Use v1beta20210401.KeyPolicy_STATUS instead
type KeyPolicy_STATUS struct {
	KeyExpirationPeriodInDays *int `json:"keyExpirationPeriodInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *KeyPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *KeyPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	if typedInput.KeyExpirationPeriodInDays != nil {
		keyExpirationPeriodInDays := *typedInput.KeyExpirationPeriodInDays
		policy.KeyExpirationPeriodInDays = &keyExpirationPeriodInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicySTATUS populates our KeyPolicy_STATUS from the provided source KeyPolicy_STATUS
func (policy *KeyPolicy_STATUS) AssignPropertiesFromKeyPolicySTATUS(source *alpha20210401s.KeyPolicy_STATUS) error {

	// KeyExpirationPeriodInDays
	policy.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(source.KeyExpirationPeriodInDays)

	// No error
	return nil
}

// AssignPropertiesToKeyPolicySTATUS populates the provided destination KeyPolicy_STATUS from our KeyPolicy_STATUS
func (policy *KeyPolicy_STATUS) AssignPropertiesToKeyPolicySTATUS(destination *alpha20210401s.KeyPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = genruntime.ClonePointerToInt(policy.KeyExpirationPeriodInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NetworkRuleSet. Use v1beta20210401.NetworkRuleSet instead
type NetworkRuleSet struct {
	Bypass *NetworkRuleSetBypass `json:"bypass,omitempty"`

	// +kubebuilder:validation:Required
	DefaultAction       *NetworkRuleSetDefaultAction `json:"defaultAction,omitempty"`
	IpRules             []IPRule                     `json:"ipRules,omitempty"`
	ResourceAccessRules []ResourceAccessRule         `json:"resourceAccessRules,omitempty"`
	VirtualNetworkRules []VirtualNetworkRule         `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkRuleSet{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ruleSet *NetworkRuleSet) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ruleSet == nil {
		return nil, nil
	}
	result := &NetworkRuleSetARM{}

	// Set property ‘Bypass’:
	if ruleSet.Bypass != nil {
		bypass := *ruleSet.Bypass
		result.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	if ruleSet.DefaultAction != nil {
		defaultAction := *ruleSet.DefaultAction
		result.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range ruleSet.IpRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.IpRules = append(result.IpRules, *itemARM.(*IPRuleARM))
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range ruleSet.ResourceAccessRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ResourceAccessRules = append(result.ResourceAccessRules, *itemARM.(*ResourceAccessRuleARM))
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range ruleSet.VirtualNetworkRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VirtualNetworkRules = append(result.VirtualNetworkRules, *itemARM.(*VirtualNetworkRuleARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSetARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSetARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSetARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		ruleSet.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		ruleSet.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.ResourceAccessRules = append(ruleSet.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.VirtualNetworkRules = append(ruleSet.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSet populates our NetworkRuleSet from the provided source NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesFromNetworkRuleSet(source *alpha20210401s.NetworkRuleSet) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSetBypass(*source.Bypass)
		ruleSet.Bypass = &bypass
	} else {
		ruleSet.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := NetworkRuleSetDefaultAction(*source.DefaultAction)
		ruleSet.DefaultAction = &defaultAction
	} else {
		ruleSet.DefaultAction = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule
			err := ipRule.AssignPropertiesFromIPRule(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRule(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRule() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRule() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSet populates the provided destination NetworkRuleSet from our NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesToNetworkRuleSet(destination *alpha20210401s.NetworkRuleSet) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if ruleSet.Bypass != nil {
		bypass := string(*ruleSet.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	if ruleSet.DefaultAction != nil {
		defaultAction := string(*ruleSet.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]alpha20210401s.IPRule, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule alpha20210401s.IPRule
			err := ipRuleItem.AssignPropertiesToIPRule(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]alpha20210401s.ResourceAccessRule, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule alpha20210401s.ResourceAccessRule
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRule(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRule() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]alpha20210401s.VirtualNetworkRule, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule alpha20210401s.VirtualNetworkRule
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRule() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NetworkRuleSet_STATUS. Use v1beta20210401.NetworkRuleSet_STATUS instead
type NetworkRuleSet_STATUS struct {
	Bypass              *NetworkRuleSetSTATUSBypass        `json:"bypass,omitempty"`
	DefaultAction       *NetworkRuleSetSTATUSDefaultAction `json:"defaultAction,omitempty"`
	IpRules             []IPRule_STATUS                    `json:"ipRules,omitempty"`
	ResourceAccessRules []ResourceAccessRule_STATUS        `json:"resourceAccessRules,omitempty"`
	VirtualNetworkRules []VirtualNetworkRule_STATUS        `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkRuleSet_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_STATUSARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		ruleSet.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		ruleSet.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.ResourceAccessRules = append(ruleSet.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.VirtualNetworkRules = append(ruleSet.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSetSTATUS populates our NetworkRuleSet_STATUS from the provided source NetworkRuleSet_STATUS
func (ruleSet *NetworkRuleSet_STATUS) AssignPropertiesFromNetworkRuleSetSTATUS(source *alpha20210401s.NetworkRuleSet_STATUS) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSetSTATUSBypass(*source.Bypass)
		ruleSet.Bypass = &bypass
	} else {
		ruleSet.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := NetworkRuleSetSTATUSDefaultAction(*source.DefaultAction)
		ruleSet.DefaultAction = &defaultAction
	} else {
		ruleSet.DefaultAction = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule_STATUS, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule_STATUS
			err := ipRule.AssignPropertiesFromIPRuleSTATUS(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRuleSTATUS() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// ResourceAccessRules
	if source.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]ResourceAccessRule_STATUS, len(source.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule ResourceAccessRule_STATUS
			err := resourceAccessRule.AssignPropertiesFromResourceAccessRuleSTATUS(&resourceAccessRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceAccessRuleSTATUS() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		ruleSet.ResourceAccessRules = resourceAccessRuleList
	} else {
		ruleSet.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_STATUS, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_STATUS
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRuleSTATUS(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRuleSTATUS() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		ruleSet.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		ruleSet.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSetSTATUS populates the provided destination NetworkRuleSet_STATUS from our NetworkRuleSet_STATUS
func (ruleSet *NetworkRuleSet_STATUS) AssignPropertiesToNetworkRuleSetSTATUS(destination *alpha20210401s.NetworkRuleSet_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if ruleSet.Bypass != nil {
		bypass := string(*ruleSet.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	if ruleSet.DefaultAction != nil {
		defaultAction := string(*ruleSet.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]alpha20210401s.IPRule_STATUS, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule alpha20210401s.IPRule_STATUS
			err := ipRuleItem.AssignPropertiesToIPRuleSTATUS(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRuleSTATUS() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// ResourceAccessRules
	if ruleSet.ResourceAccessRules != nil {
		resourceAccessRuleList := make([]alpha20210401s.ResourceAccessRule_STATUS, len(ruleSet.ResourceAccessRules))
		for resourceAccessRuleIndex, resourceAccessRuleItem := range ruleSet.ResourceAccessRules {
			// Shadow the loop variable to avoid aliasing
			resourceAccessRuleItem := resourceAccessRuleItem
			var resourceAccessRule alpha20210401s.ResourceAccessRule_STATUS
			err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRuleSTATUS(&resourceAccessRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceAccessRuleSTATUS() to populate field ResourceAccessRules")
			}
			resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
		}
		destination.ResourceAccessRules = resourceAccessRuleList
	} else {
		destination.ResourceAccessRules = nil
	}

	// VirtualNetworkRules
	if ruleSet.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]alpha20210401s.VirtualNetworkRule_STATUS, len(ruleSet.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range ruleSet.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule alpha20210401s.VirtualNetworkRule_STATUS
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRuleSTATUS(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRuleSTATUS() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateEndpointConnection_STATUS_SubResourceEmbedded. Use v1beta20210401.PrivateEndpointConnection_STATUS_SubResourceEmbedded instead
type PrivateEndpointConnection_STATUS_SubResourceEmbedded struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_STATUS_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_STATUS_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_STATUS_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded populates our PrivateEndpointConnection_STATUS_SubResourceEmbedded from the provided source PrivateEndpointConnection_STATUS_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionSTATUSSubResourceEmbedded(source *alpha20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded populates the provided destination PrivateEndpointConnection_STATUS_SubResourceEmbedded from our PrivateEndpointConnection_STATUS_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_STATUS_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionSTATUSSubResourceEmbedded(destination *alpha20210401s.PrivateEndpointConnection_STATUS_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RoutingPreference. Use v1beta20210401.RoutingPreference instead
type RoutingPreference struct {
	PublishInternetEndpoints  *bool                           `json:"publishInternetEndpoints,omitempty"`
	PublishMicrosoftEndpoints *bool                           `json:"publishMicrosoftEndpoints,omitempty"`
	RoutingChoice             *RoutingPreferenceRoutingChoice `json:"routingChoice,omitempty"`
}

var _ genruntime.ARMTransformer = &RoutingPreference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (preference *RoutingPreference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if preference == nil {
		return nil, nil
	}
	result := &RoutingPreferenceARM{}

	// Set property ‘PublishInternetEndpoints’:
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *preference.PublishInternetEndpoints
		result.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *preference.PublishMicrosoftEndpoints
		result.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if preference.RoutingChoice != nil {
		routingChoice := *preference.RoutingChoice
		result.RoutingChoice = &routingChoice
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (preference *RoutingPreference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (preference *RoutingPreference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreferenceARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		preference.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreference populates our RoutingPreference from the provided source RoutingPreference
func (preference *RoutingPreference) AssignPropertiesFromRoutingPreference(source *alpha20210401s.RoutingPreference) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreferenceRoutingChoice(*source.RoutingChoice)
		preference.RoutingChoice = &routingChoice
	} else {
		preference.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreference populates the provided destination RoutingPreference from our RoutingPreference
func (preference *RoutingPreference) AssignPropertiesToRoutingPreference(destination *alpha20210401s.RoutingPreference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if preference.RoutingChoice != nil {
		routingChoice := string(*preference.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RoutingPreference_STATUS. Use v1beta20210401.RoutingPreference_STATUS instead
type RoutingPreference_STATUS struct {
	PublishInternetEndpoints  *bool                                 `json:"publishInternetEndpoints,omitempty"`
	PublishMicrosoftEndpoints *bool                                 `json:"publishMicrosoftEndpoints,omitempty"`
	RoutingChoice             *RoutingPreferenceSTATUSRoutingChoice `json:"routingChoice,omitempty"`
}

var _ genruntime.FromARMConverter = &RoutingPreference_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (preference *RoutingPreference_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreference_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (preference *RoutingPreference_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreference_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreference_STATUSARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		preference.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreferenceSTATUS populates our RoutingPreference_STATUS from the provided source RoutingPreference_STATUS
func (preference *RoutingPreference_STATUS) AssignPropertiesFromRoutingPreferenceSTATUS(source *alpha20210401s.RoutingPreference_STATUS) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		preference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		preference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		preference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		preference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreferenceSTATUSRoutingChoice(*source.RoutingChoice)
		preference.RoutingChoice = &routingChoice
	} else {
		preference.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreferenceSTATUS populates the provided destination RoutingPreference_STATUS from our RoutingPreference_STATUS
func (preference *RoutingPreference_STATUS) AssignPropertiesToRoutingPreferenceSTATUS(destination *alpha20210401s.RoutingPreference_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if preference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *preference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if preference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *preference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if preference.RoutingChoice != nil {
		routingChoice := string(*preference.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SasPolicy. Use v1beta20210401.SasPolicy instead
type SasPolicy struct {
	// +kubebuilder:validation:Required
	ExpirationAction *SasPolicyExpirationAction `json:"expirationAction,omitempty"`

	// +kubebuilder:validation:Required
	SasExpirationPeriod *string `json:"sasExpirationPeriod,omitempty"`
}

var _ genruntime.ARMTransformer = &SasPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *SasPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &SasPolicyARM{}

	// Set property ‘ExpirationAction’:
	if policy.ExpirationAction != nil {
		expirationAction := *policy.ExpirationAction
		result.ExpirationAction = &expirationAction
	}

	// Set property ‘SasExpirationPeriod’:
	if policy.SasExpirationPeriod != nil {
		sasExpirationPeriod := *policy.SasExpirationPeriod
		result.SasExpirationPeriod = &sasExpirationPeriod
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *SasPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *SasPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicyARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	if typedInput.ExpirationAction != nil {
		expirationAction := *typedInput.ExpirationAction
		policy.ExpirationAction = &expirationAction
	}

	// Set property ‘SasExpirationPeriod’:
	if typedInput.SasExpirationPeriod != nil {
		sasExpirationPeriod := *typedInput.SasExpirationPeriod
		policy.SasExpirationPeriod = &sasExpirationPeriod
	}

	// No error
	return nil
}

// AssignPropertiesFromSasPolicy populates our SasPolicy from the provided source SasPolicy
func (policy *SasPolicy) AssignPropertiesFromSasPolicy(source *alpha20210401s.SasPolicy) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		expirationAction := SasPolicyExpirationAction(*source.ExpirationAction)
		policy.ExpirationAction = &expirationAction
	} else {
		policy.ExpirationAction = nil
	}

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.ClonePointerToString(source.SasExpirationPeriod)

	// No error
	return nil
}

// AssignPropertiesToSasPolicy populates the provided destination SasPolicy from our SasPolicy
func (policy *SasPolicy) AssignPropertiesToSasPolicy(destination *alpha20210401s.SasPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	if policy.ExpirationAction != nil {
		expirationAction := string(*policy.ExpirationAction)
		destination.ExpirationAction = &expirationAction
	} else {
		destination.ExpirationAction = nil
	}

	// SasExpirationPeriod
	destination.SasExpirationPeriod = genruntime.ClonePointerToString(policy.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SasPolicy_STATUS. Use v1beta20210401.SasPolicy_STATUS instead
type SasPolicy_STATUS struct {
	ExpirationAction    *SasPolicySTATUSExpirationAction `json:"expirationAction,omitempty"`
	SasExpirationPeriod *string                          `json:"sasExpirationPeriod,omitempty"`
}

var _ genruntime.FromARMConverter = &SasPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *SasPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *SasPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	if typedInput.ExpirationAction != nil {
		expirationAction := *typedInput.ExpirationAction
		policy.ExpirationAction = &expirationAction
	}

	// Set property ‘SasExpirationPeriod’:
	if typedInput.SasExpirationPeriod != nil {
		sasExpirationPeriod := *typedInput.SasExpirationPeriod
		policy.SasExpirationPeriod = &sasExpirationPeriod
	}

	// No error
	return nil
}

// AssignPropertiesFromSasPolicySTATUS populates our SasPolicy_STATUS from the provided source SasPolicy_STATUS
func (policy *SasPolicy_STATUS) AssignPropertiesFromSasPolicySTATUS(source *alpha20210401s.SasPolicy_STATUS) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		expirationAction := SasPolicySTATUSExpirationAction(*source.ExpirationAction)
		policy.ExpirationAction = &expirationAction
	} else {
		policy.ExpirationAction = nil
	}

	// SasExpirationPeriod
	policy.SasExpirationPeriod = genruntime.ClonePointerToString(source.SasExpirationPeriod)

	// No error
	return nil
}

// AssignPropertiesToSasPolicySTATUS populates the provided destination SasPolicy_STATUS from our SasPolicy_STATUS
func (policy *SasPolicy_STATUS) AssignPropertiesToSasPolicySTATUS(destination *alpha20210401s.SasPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	if policy.ExpirationAction != nil {
		expirationAction := string(*policy.ExpirationAction)
		destination.ExpirationAction = &expirationAction
	} else {
		destination.ExpirationAction = nil
	}

	// SasExpirationPeriod
	destination.SasExpirationPeriod = genruntime.ClonePointerToString(policy.SasExpirationPeriod)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku. Use v1beta20210401.Sku instead
type Sku struct {
	// +kubebuilder:validation:Required
	Name *SkuName `json:"name,omitempty"`
	Tier *SkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	result := &SkuARM{}

	// Set property ‘Name’:
	if sku.Name != nil {
		name := *sku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *alpha20210401s.Sku) error {

	// Name
	if source.Name != nil {
		name := SkuName(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := SkuTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *alpha20210401s.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku_STATUS. Use v1beta20210401.Sku_STATUS instead
type Sku_STATUS struct {
	Name *SkuName_STATUS `json:"name,omitempty"`
	Tier *Tier_STATUS    `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuSTATUS populates our Sku_STATUS from the provided source Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesFromSkuSTATUS(source *alpha20210401s.Sku_STATUS) error {

	// Name
	if source.Name != nil {
		name := SkuName_STATUS(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := Tier_STATUS(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuSTATUS populates the provided destination Sku_STATUS from our Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesToSkuSTATUS(destination *alpha20210401s.Sku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type StorageAccountOperatorSpec struct {
	// Secrets: configures where to place Azure generated secrets.
	Secrets *StorageAccountOperatorSecrets `json:"secrets,omitempty"`
}

// AssignPropertiesFromStorageAccountOperatorSpec populates our StorageAccountOperatorSpec from the provided source StorageAccountOperatorSpec
func (operator *StorageAccountOperatorSpec) AssignPropertiesFromStorageAccountOperatorSpec(source *alpha20210401s.StorageAccountOperatorSpec) error {

	// Secrets
	if source.Secrets != nil {
		var secret StorageAccountOperatorSecrets
		err := secret.AssignPropertiesFromStorageAccountOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountOperatorSpec populates the provided destination StorageAccountOperatorSpec from our StorageAccountOperatorSpec
func (operator *StorageAccountOperatorSpec) AssignPropertiesToStorageAccountOperatorSpec(destination *alpha20210401s.StorageAccountOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Secrets
	if operator.Secrets != nil {
		var secret alpha20210401s.StorageAccountOperatorSecrets
		err := operator.Secrets.AssignPropertiesToStorageAccountOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageAccountOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of StorageAccountPropertiesCreateParametersAccessTier. Use
// v1beta20210401.StorageAccountPropertiesCreateParametersAccessTier instead
// +kubebuilder:validation:Enum={"Cool","Hot"}
type StorageAccountPropertiesCreateParametersAccessTier string

const (
	StorageAccountPropertiesCreateParametersAccessTier_Cool = StorageAccountPropertiesCreateParametersAccessTier("Cool")
	StorageAccountPropertiesCreateParametersAccessTier_Hot  = StorageAccountPropertiesCreateParametersAccessTier("Hot")
)

// Deprecated version of StorageAccountPropertiesCreateParametersLargeFileSharesState. Use
// v1beta20210401.StorageAccountPropertiesCreateParametersLargeFileSharesState instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type StorageAccountPropertiesCreateParametersLargeFileSharesState string

const (
	StorageAccountPropertiesCreateParametersLargeFileSharesState_Disabled = StorageAccountPropertiesCreateParametersLargeFileSharesState("Disabled")
	StorageAccountPropertiesCreateParametersLargeFileSharesState_Enabled  = StorageAccountPropertiesCreateParametersLargeFileSharesState("Enabled")
)

// Deprecated version of StorageAccountPropertiesCreateParametersMinimumTlsVersion. Use
// v1beta20210401.StorageAccountPropertiesCreateParametersMinimumTlsVersion instead
// +kubebuilder:validation:Enum={"TLS1_0","TLS1_1","TLS1_2"}
type StorageAccountPropertiesCreateParametersMinimumTlsVersion string

const (
	StorageAccountPropertiesCreateParametersMinimumTlsVersion_TLS10 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_0")
	StorageAccountPropertiesCreateParametersMinimumTlsVersion_TLS11 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_1")
	StorageAccountPropertiesCreateParametersMinimumTlsVersion_TLS12 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_2")
)

// Deprecated version of StorageAccountPropertiesSTATUSAccessTier. Use
// v1beta20210401.StorageAccountPropertiesSTATUSAccessTier instead
type StorageAccountPropertiesSTATUSAccessTier string

const (
	StorageAccountPropertiesSTATUSAccessTier_Cool = StorageAccountPropertiesSTATUSAccessTier("Cool")
	StorageAccountPropertiesSTATUSAccessTier_Hot  = StorageAccountPropertiesSTATUSAccessTier("Hot")
)

// Deprecated version of StorageAccountPropertiesSTATUSLargeFileSharesState. Use
// v1beta20210401.StorageAccountPropertiesSTATUSLargeFileSharesState instead
type StorageAccountPropertiesSTATUSLargeFileSharesState string

const (
	StorageAccountPropertiesSTATUSLargeFileSharesState_Disabled = StorageAccountPropertiesSTATUSLargeFileSharesState("Disabled")
	StorageAccountPropertiesSTATUSLargeFileSharesState_Enabled  = StorageAccountPropertiesSTATUSLargeFileSharesState("Enabled")
)

// Deprecated version of StorageAccountPropertiesSTATUSMinimumTlsVersion. Use
// v1beta20210401.StorageAccountPropertiesSTATUSMinimumTlsVersion instead
type StorageAccountPropertiesSTATUSMinimumTlsVersion string

const (
	StorageAccountPropertiesSTATUSMinimumTlsVersion_TLS10 = StorageAccountPropertiesSTATUSMinimumTlsVersion("TLS1_0")
	StorageAccountPropertiesSTATUSMinimumTlsVersion_TLS11 = StorageAccountPropertiesSTATUSMinimumTlsVersion("TLS1_1")
	StorageAccountPropertiesSTATUSMinimumTlsVersion_TLS12 = StorageAccountPropertiesSTATUSMinimumTlsVersion("TLS1_2")
)

// Deprecated version of StorageAccountPropertiesSTATUSProvisioningState. Use
// v1beta20210401.StorageAccountPropertiesSTATUSProvisioningState instead
type StorageAccountPropertiesSTATUSProvisioningState string

const (
	StorageAccountPropertiesSTATUSProvisioningState_Creating     = StorageAccountPropertiesSTATUSProvisioningState("Creating")
	StorageAccountPropertiesSTATUSProvisioningState_ResolvingDNS = StorageAccountPropertiesSTATUSProvisioningState("ResolvingDNS")
	StorageAccountPropertiesSTATUSProvisioningState_Succeeded    = StorageAccountPropertiesSTATUSProvisioningState("Succeeded")
)

// Deprecated version of StorageAccountPropertiesSTATUSStatusOfPrimary. Use
// v1beta20210401.StorageAccountPropertiesSTATUSStatusOfPrimary instead
type StorageAccountPropertiesSTATUSStatusOfPrimary string

const (
	StorageAccountPropertiesSTATUSStatusOfPrimary_Available   = StorageAccountPropertiesSTATUSStatusOfPrimary("available")
	StorageAccountPropertiesSTATUSStatusOfPrimary_Unavailable = StorageAccountPropertiesSTATUSStatusOfPrimary("unavailable")
)

// Deprecated version of StorageAccountPropertiesSTATUSStatusOfSecondary. Use
// v1beta20210401.StorageAccountPropertiesSTATUSStatusOfSecondary instead
type StorageAccountPropertiesSTATUSStatusOfSecondary string

const (
	StorageAccountPropertiesSTATUSStatusOfSecondary_Available   = StorageAccountPropertiesSTATUSStatusOfSecondary("available")
	StorageAccountPropertiesSTATUSStatusOfSecondary_Unavailable = StorageAccountPropertiesSTATUSStatusOfSecondary("unavailable")
)

// Deprecated version of ActiveDirectoryProperties. Use v1beta20210401.ActiveDirectoryProperties instead
type ActiveDirectoryProperties struct {
	// +kubebuilder:validation:Required
	AzureStorageSid *string `json:"azureStorageSid,omitempty"`

	// +kubebuilder:validation:Required
	DomainGuid *string `json:"domainGuid,omitempty"`

	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName,omitempty"`

	// +kubebuilder:validation:Required
	DomainSid *string `json:"domainSid,omitempty"`

	// +kubebuilder:validation:Required
	ForestName *string `json:"forestName,omitempty"`

	// +kubebuilder:validation:Required
	NetBiosDomainName *string `json:"netBiosDomainName,omitempty"`
}

var _ genruntime.ARMTransformer = &ActiveDirectoryProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *ActiveDirectoryProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &ActiveDirectoryPropertiesARM{}

	// Set property ‘AzureStorageSid’:
	if properties.AzureStorageSid != nil {
		azureStorageSid := *properties.AzureStorageSid
		result.AzureStorageSid = &azureStorageSid
	}

	// Set property ‘DomainGuid’:
	if properties.DomainGuid != nil {
		domainGuid := *properties.DomainGuid
		result.DomainGuid = &domainGuid
	}

	// Set property ‘DomainName’:
	if properties.DomainName != nil {
		domainName := *properties.DomainName
		result.DomainName = &domainName
	}

	// Set property ‘DomainSid’:
	if properties.DomainSid != nil {
		domainSid := *properties.DomainSid
		result.DomainSid = &domainSid
	}

	// Set property ‘ForestName’:
	if properties.ForestName != nil {
		forestName := *properties.ForestName
		result.ForestName = &forestName
	}

	// Set property ‘NetBiosDomainName’:
	if properties.NetBiosDomainName != nil {
		netBiosDomainName := *properties.NetBiosDomainName
		result.NetBiosDomainName = &netBiosDomainName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ActiveDirectoryProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ActiveDirectoryProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryPropertiesARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	if typedInput.AzureStorageSid != nil {
		azureStorageSid := *typedInput.AzureStorageSid
		properties.AzureStorageSid = &azureStorageSid
	}

	// Set property ‘DomainGuid’:
	if typedInput.DomainGuid != nil {
		domainGuid := *typedInput.DomainGuid
		properties.DomainGuid = &domainGuid
	}

	// Set property ‘DomainName’:
	if typedInput.DomainName != nil {
		domainName := *typedInput.DomainName
		properties.DomainName = &domainName
	}

	// Set property ‘DomainSid’:
	if typedInput.DomainSid != nil {
		domainSid := *typedInput.DomainSid
		properties.DomainSid = &domainSid
	}

	// Set property ‘ForestName’:
	if typedInput.ForestName != nil {
		forestName := *typedInput.ForestName
		properties.ForestName = &forestName
	}

	// Set property ‘NetBiosDomainName’:
	if typedInput.NetBiosDomainName != nil {
		netBiosDomainName := *typedInput.NetBiosDomainName
		properties.NetBiosDomainName = &netBiosDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryProperties populates our ActiveDirectoryProperties from the provided source ActiveDirectoryProperties
func (properties *ActiveDirectoryProperties) AssignPropertiesFromActiveDirectoryProperties(source *alpha20210401s.ActiveDirectoryProperties) error {

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.ClonePointerToString(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.ClonePointerToString(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.ClonePointerToString(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.ClonePointerToString(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.ClonePointerToString(source.NetBiosDomainName)

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryProperties populates the provided destination ActiveDirectoryProperties from our ActiveDirectoryProperties
func (properties *ActiveDirectoryProperties) AssignPropertiesToActiveDirectoryProperties(destination *alpha20210401s.ActiveDirectoryProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	destination.AzureStorageSid = genruntime.ClonePointerToString(properties.AzureStorageSid)

	// DomainGuid
	destination.DomainGuid = genruntime.ClonePointerToString(properties.DomainGuid)

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(properties.DomainName)

	// DomainSid
	destination.DomainSid = genruntime.ClonePointerToString(properties.DomainSid)

	// ForestName
	destination.ForestName = genruntime.ClonePointerToString(properties.ForestName)

	// NetBiosDomainName
	destination.NetBiosDomainName = genruntime.ClonePointerToString(properties.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ActiveDirectoryProperties_STATUS. Use v1beta20210401.ActiveDirectoryProperties_STATUS instead
type ActiveDirectoryProperties_STATUS struct {
	AzureStorageSid   *string `json:"azureStorageSid,omitempty"`
	DomainGuid        *string `json:"domainGuid,omitempty"`
	DomainName        *string `json:"domainName,omitempty"`
	DomainSid         *string `json:"domainSid,omitempty"`
	ForestName        *string `json:"forestName,omitempty"`
	NetBiosDomainName *string `json:"netBiosDomainName,omitempty"`
}

var _ genruntime.FromARMConverter = &ActiveDirectoryProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ActiveDirectoryProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ActiveDirectoryProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	if typedInput.AzureStorageSid != nil {
		azureStorageSid := *typedInput.AzureStorageSid
		properties.AzureStorageSid = &azureStorageSid
	}

	// Set property ‘DomainGuid’:
	if typedInput.DomainGuid != nil {
		domainGuid := *typedInput.DomainGuid
		properties.DomainGuid = &domainGuid
	}

	// Set property ‘DomainName’:
	if typedInput.DomainName != nil {
		domainName := *typedInput.DomainName
		properties.DomainName = &domainName
	}

	// Set property ‘DomainSid’:
	if typedInput.DomainSid != nil {
		domainSid := *typedInput.DomainSid
		properties.DomainSid = &domainSid
	}

	// Set property ‘ForestName’:
	if typedInput.ForestName != nil {
		forestName := *typedInput.ForestName
		properties.ForestName = &forestName
	}

	// Set property ‘NetBiosDomainName’:
	if typedInput.NetBiosDomainName != nil {
		netBiosDomainName := *typedInput.NetBiosDomainName
		properties.NetBiosDomainName = &netBiosDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryPropertiesSTATUS populates our ActiveDirectoryProperties_STATUS from the provided source ActiveDirectoryProperties_STATUS
func (properties *ActiveDirectoryProperties_STATUS) AssignPropertiesFromActiveDirectoryPropertiesSTATUS(source *alpha20210401s.ActiveDirectoryProperties_STATUS) error {

	// AzureStorageSid
	properties.AzureStorageSid = genruntime.ClonePointerToString(source.AzureStorageSid)

	// DomainGuid
	properties.DomainGuid = genruntime.ClonePointerToString(source.DomainGuid)

	// DomainName
	properties.DomainName = genruntime.ClonePointerToString(source.DomainName)

	// DomainSid
	properties.DomainSid = genruntime.ClonePointerToString(source.DomainSid)

	// ForestName
	properties.ForestName = genruntime.ClonePointerToString(source.ForestName)

	// NetBiosDomainName
	properties.NetBiosDomainName = genruntime.ClonePointerToString(source.NetBiosDomainName)

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryPropertiesSTATUS populates the provided destination ActiveDirectoryProperties_STATUS from our ActiveDirectoryProperties_STATUS
func (properties *ActiveDirectoryProperties_STATUS) AssignPropertiesToActiveDirectoryPropertiesSTATUS(destination *alpha20210401s.ActiveDirectoryProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	destination.AzureStorageSid = genruntime.ClonePointerToString(properties.AzureStorageSid)

	// DomainGuid
	destination.DomainGuid = genruntime.ClonePointerToString(properties.DomainGuid)

	// DomainName
	destination.DomainName = genruntime.ClonePointerToString(properties.DomainName)

	// DomainSid
	destination.DomainSid = genruntime.ClonePointerToString(properties.DomainSid)

	// ForestName
	destination.ForestName = genruntime.ClonePointerToString(properties.ForestName)

	// NetBiosDomainName
	destination.NetBiosDomainName = genruntime.ClonePointerToString(properties.NetBiosDomainName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AzureFilesIdentityBasedAuthenticationDefaultSharePermission. Use
// v1beta20210401.AzureFilesIdentityBasedAuthenticationDefaultSharePermission instead
// +kubebuilder:validation:Enum={"None","StorageFileDataSmbShareContributor","StorageFileDataSmbShareElevatedContributor","StorageFileDataSmbShareOwner","StorageFileDataSmbShareReader"}
type AzureFilesIdentityBasedAuthenticationDefaultSharePermission string

const (
	AzureFilesIdentityBasedAuthenticationDefaultSharePermission_None                                       = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("None")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermission_StorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermission_StorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermission_StorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermission_StorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareReader")
)

// Deprecated version of AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions. Use
// v1beta20210401.AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions instead
// +kubebuilder:validation:Enum={"AADDS","AD","None"}
type AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions string

const (
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions_AADDS = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("AADDS")
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions_AD    = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("AD")
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions_None  = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("None")
)

// Deprecated version of AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission. Use
// v1beta20210401.AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission instead
type AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission string

const (
	AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission_None                                       = AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission("None")
	AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission_StorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission_StorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission_StorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission_StorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthenticationSTATUSDefaultSharePermission("StorageFileDataSmbShareReader")
)

// Deprecated version of AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions. Use
// v1beta20210401.AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions instead
type AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions string

const (
	AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions_AADDS = AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions("AADDS")
	AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions_AD    = AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions("AD")
	AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions_None  = AzureFilesIdentityBasedAuthenticationSTATUSDirectoryServiceOptions("None")
)

// Deprecated version of BlobRestoreParameters_STATUS. Use v1beta20210401.BlobRestoreParameters_STATUS instead
type BlobRestoreParameters_STATUS struct {
	BlobRanges    []BlobRestoreRange_STATUS `json:"blobRanges,omitempty"`
	TimeToRestore *string                   `json:"timeToRestore,omitempty"`
}

var _ genruntime.FromARMConverter = &BlobRestoreParameters_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *BlobRestoreParameters_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreParameters_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *BlobRestoreParameters_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreParameters_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreParameters_STATUSARM, got %T", armInput)
	}

	// Set property ‘BlobRanges’:
	for _, item := range typedInput.BlobRanges {
		var item1 BlobRestoreRange_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		parameters.BlobRanges = append(parameters.BlobRanges, item1)
	}

	// Set property ‘TimeToRestore’:
	if typedInput.TimeToRestore != nil {
		timeToRestore := *typedInput.TimeToRestore
		parameters.TimeToRestore = &timeToRestore
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreParametersSTATUS populates our BlobRestoreParameters_STATUS from the provided source BlobRestoreParameters_STATUS
func (parameters *BlobRestoreParameters_STATUS) AssignPropertiesFromBlobRestoreParametersSTATUS(source *alpha20210401s.BlobRestoreParameters_STATUS) error {

	// BlobRanges
	if source.BlobRanges != nil {
		blobRangeList := make([]BlobRestoreRange_STATUS, len(source.BlobRanges))
		for blobRangeIndex, blobRangeItem := range source.BlobRanges {
			// Shadow the loop variable to avoid aliasing
			blobRangeItem := blobRangeItem
			var blobRange BlobRestoreRange_STATUS
			err := blobRange.AssignPropertiesFromBlobRestoreRangeSTATUS(&blobRangeItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromBlobRestoreRangeSTATUS() to populate field BlobRanges")
			}
			blobRangeList[blobRangeIndex] = blobRange
		}
		parameters.BlobRanges = blobRangeList
	} else {
		parameters.BlobRanges = nil
	}

	// TimeToRestore
	parameters.TimeToRestore = genruntime.ClonePointerToString(source.TimeToRestore)

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreParametersSTATUS populates the provided destination BlobRestoreParameters_STATUS from our BlobRestoreParameters_STATUS
func (parameters *BlobRestoreParameters_STATUS) AssignPropertiesToBlobRestoreParametersSTATUS(destination *alpha20210401s.BlobRestoreParameters_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobRanges
	if parameters.BlobRanges != nil {
		blobRangeList := make([]alpha20210401s.BlobRestoreRange_STATUS, len(parameters.BlobRanges))
		for blobRangeIndex, blobRangeItem := range parameters.BlobRanges {
			// Shadow the loop variable to avoid aliasing
			blobRangeItem := blobRangeItem
			var blobRange alpha20210401s.BlobRestoreRange_STATUS
			err := blobRangeItem.AssignPropertiesToBlobRestoreRangeSTATUS(&blobRange)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToBlobRestoreRangeSTATUS() to populate field BlobRanges")
			}
			blobRangeList[blobRangeIndex] = blobRange
		}
		destination.BlobRanges = blobRangeList
	} else {
		destination.BlobRanges = nil
	}

	// TimeToRestore
	destination.TimeToRestore = genruntime.ClonePointerToString(parameters.TimeToRestore)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BlobRestoreStatusSTATUSStatus. Use v1beta20210401.BlobRestoreStatusSTATUSStatus instead
type BlobRestoreStatusSTATUSStatus string

const (
	BlobRestoreStatusSTATUSStatus_Complete   = BlobRestoreStatusSTATUSStatus("Complete")
	BlobRestoreStatusSTATUSStatus_Failed     = BlobRestoreStatusSTATUSStatus("Failed")
	BlobRestoreStatusSTATUSStatus_InProgress = BlobRestoreStatusSTATUSStatus("InProgress")
)

// Deprecated version of EncryptionIdentity. Use v1beta20210401.EncryptionIdentity instead
type EncryptionIdentity struct {
	UserAssignedIdentityReference *genruntime.ResourceReference `armReference:"UserAssignedIdentity" json:"userAssignedIdentityReference,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *EncryptionIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &EncryptionIdentityARM{}

	// Set property ‘UserAssignedIdentity’:
	if identity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*identity.UserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		userAssignedIdentityReference := userAssignedIdentityReferenceARMID
		result.UserAssignedIdentity = &userAssignedIdentityReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *EncryptionIdentity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *EncryptionIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(EncryptionIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentityARM, got %T", armInput)
	}

	// no assignment for property ‘UserAssignedIdentityReference’

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentity populates our EncryptionIdentity from the provided source EncryptionIdentity
func (identity *EncryptionIdentity) AssignPropertiesFromEncryptionIdentity(source *alpha20210401s.EncryptionIdentity) error {

	// UserAssignedIdentityReference
	if source.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := source.UserAssignedIdentityReference.Copy()
		identity.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		identity.UserAssignedIdentityReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentity populates the provided destination EncryptionIdentity from our EncryptionIdentity
func (identity *EncryptionIdentity) AssignPropertiesToEncryptionIdentity(destination *alpha20210401s.EncryptionIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentityReference
	if identity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := identity.UserAssignedIdentityReference.Copy()
		destination.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		destination.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionIdentity_STATUS. Use v1beta20210401.EncryptionIdentity_STATUS instead
type EncryptionIdentity_STATUS struct {
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionIdentity_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *EncryptionIdentity_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentity_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *EncryptionIdentity_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionIdentity_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentity_STATUSARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		identity.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentitySTATUS populates our EncryptionIdentity_STATUS from the provided source EncryptionIdentity_STATUS
func (identity *EncryptionIdentity_STATUS) AssignPropertiesFromEncryptionIdentitySTATUS(source *alpha20210401s.EncryptionIdentity_STATUS) error {

	// UserAssignedIdentity
	identity.UserAssignedIdentity = genruntime.ClonePointerToString(source.UserAssignedIdentity)

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentitySTATUS populates the provided destination EncryptionIdentity_STATUS from our EncryptionIdentity_STATUS
func (identity *EncryptionIdentity_STATUS) AssignPropertiesToEncryptionIdentitySTATUS(destination *alpha20210401s.EncryptionIdentity_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	destination.UserAssignedIdentity = genruntime.ClonePointerToString(identity.UserAssignedIdentity)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionKeySource. Use v1beta20210401.EncryptionKeySource instead
// +kubebuilder:validation:Enum={"Microsoft.Keyvault","Microsoft.Storage"}
type EncryptionKeySource string

const (
	EncryptionKeySource_MicrosoftKeyvault = EncryptionKeySource("Microsoft.Keyvault")
	EncryptionKeySource_MicrosoftStorage  = EncryptionKeySource("Microsoft.Storage")
)

// Deprecated version of EncryptionServices. Use v1beta20210401.EncryptionServices instead
type EncryptionServices struct {
	Blob  *EncryptionService `json:"blob,omitempty"`
	File  *EncryptionService `json:"file,omitempty"`
	Queue *EncryptionService `json:"queue,omitempty"`
	Table *EncryptionService `json:"table,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionServices{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (services *EncryptionServices) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if services == nil {
		return nil, nil
	}
	result := &EncryptionServicesARM{}

	// Set property ‘Blob’:
	if services.Blob != nil {
		blobARM, err := (*services.Blob).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		blob := *blobARM.(*EncryptionServiceARM)
		result.Blob = &blob
	}

	// Set property ‘File’:
	if services.File != nil {
		fileARM, err := (*services.File).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		file := *fileARM.(*EncryptionServiceARM)
		result.File = &file
	}

	// Set property ‘Queue’:
	if services.Queue != nil {
		queueARM, err := (*services.Queue).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		queue := *queueARM.(*EncryptionServiceARM)
		result.Queue = &queue
	}

	// Set property ‘Table’:
	if services.Table != nil {
		tableARM, err := (*services.Table).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		table := *tableARM.(*EncryptionServiceARM)
		result.Table = &table
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *EncryptionServices) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServicesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *EncryptionServices) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServicesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServicesARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		services.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		services.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		services.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		services.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServices populates our EncryptionServices from the provided source EncryptionServices
func (services *EncryptionServices) AssignPropertiesFromEncryptionServices(source *alpha20210401s.EncryptionServices) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService
		err := blob.AssignPropertiesFromEncryptionService(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService
		err := file.AssignPropertiesFromEncryptionService(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService
		err := queue.AssignPropertiesFromEncryptionService(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService
		err := table.AssignPropertiesFromEncryptionService(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionService() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServices populates the provided destination EncryptionServices from our EncryptionServices
func (services *EncryptionServices) AssignPropertiesToEncryptionServices(destination *alpha20210401s.EncryptionServices) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if services.Blob != nil {
		var blob alpha20210401s.EncryptionService
		err := services.Blob.AssignPropertiesToEncryptionService(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file alpha20210401s.EncryptionService
		err := services.File.AssignPropertiesToEncryptionService(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue alpha20210401s.EncryptionService
		err := services.Queue.AssignPropertiesToEncryptionService(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table alpha20210401s.EncryptionService
		err := services.Table.AssignPropertiesToEncryptionService(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionService() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionServices_STATUS. Use v1beta20210401.EncryptionServices_STATUS instead
type EncryptionServices_STATUS struct {
	Blob  *EncryptionService_STATUS `json:"blob,omitempty"`
	File  *EncryptionService_STATUS `json:"file,omitempty"`
	Queue *EncryptionService_STATUS `json:"queue,omitempty"`
	Table *EncryptionService_STATUS `json:"table,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionServices_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *EncryptionServices_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServices_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *EncryptionServices_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServices_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServices_STATUSARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService_STATUS
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		services.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService_STATUS
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		services.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService_STATUS
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		services.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService_STATUS
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		services.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServicesSTATUS populates our EncryptionServices_STATUS from the provided source EncryptionServices_STATUS
func (services *EncryptionServices_STATUS) AssignPropertiesFromEncryptionServicesSTATUS(source *alpha20210401s.EncryptionServices_STATUS) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService_STATUS
		err := blob.AssignPropertiesFromEncryptionServiceSTATUS(source.Blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field Blob")
		}
		services.Blob = &blob
	} else {
		services.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService_STATUS
		err := file.AssignPropertiesFromEncryptionServiceSTATUS(source.File)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field File")
		}
		services.File = &file
	} else {
		services.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService_STATUS
		err := queue.AssignPropertiesFromEncryptionServiceSTATUS(source.Queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field Queue")
		}
		services.Queue = &queue
	} else {
		services.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService_STATUS
		err := table.AssignPropertiesFromEncryptionServiceSTATUS(source.Table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionServiceSTATUS() to populate field Table")
		}
		services.Table = &table
	} else {
		services.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServicesSTATUS populates the provided destination EncryptionServices_STATUS from our EncryptionServices_STATUS
func (services *EncryptionServices_STATUS) AssignPropertiesToEncryptionServicesSTATUS(destination *alpha20210401s.EncryptionServices_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if services.Blob != nil {
		var blob alpha20210401s.EncryptionService_STATUS
		err := services.Blob.AssignPropertiesToEncryptionServiceSTATUS(&blob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field Blob")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if services.File != nil {
		var file alpha20210401s.EncryptionService_STATUS
		err := services.File.AssignPropertiesToEncryptionServiceSTATUS(&file)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field File")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if services.Queue != nil {
		var queue alpha20210401s.EncryptionService_STATUS
		err := services.Queue.AssignPropertiesToEncryptionServiceSTATUS(&queue)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field Queue")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if services.Table != nil {
		var table alpha20210401s.EncryptionService_STATUS
		err := services.Table.AssignPropertiesToEncryptionServiceSTATUS(&table)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionServiceSTATUS() to populate field Table")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionSTATUSKeySource. Use v1beta20210401.EncryptionSTATUSKeySource instead
type EncryptionSTATUSKeySource string

const (
	EncryptionSTATUSKeySource_MicrosoftKeyvault = EncryptionSTATUSKeySource("Microsoft.Keyvault")
	EncryptionSTATUSKeySource_MicrosoftStorage  = EncryptionSTATUSKeySource("Microsoft.Storage")
)

// Deprecated version of GeoReplicationStatsSTATUSStatus. Use v1beta20210401.GeoReplicationStatsSTATUSStatus instead
type GeoReplicationStatsSTATUSStatus string

const (
	GeoReplicationStatsSTATUSStatus_Bootstrap   = GeoReplicationStatsSTATUSStatus("Bootstrap")
	GeoReplicationStatsSTATUSStatus_Live        = GeoReplicationStatsSTATUSStatus("Live")
	GeoReplicationStatsSTATUSStatus_Unavailable = GeoReplicationStatsSTATUSStatus("Unavailable")
)

// Deprecated version of IPRule. Use v1beta20210401.IPRule instead
type IPRule struct {
	Action *IPRuleAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &IPRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *IPRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &IPRuleARM{}

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Value’:
	if rule.Value != nil {
		value := *rule.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		rule.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromIPRule populates our IPRule from the provided source IPRule
func (rule *IPRule) AssignPropertiesFromIPRule(source *alpha20210401s.IPRule) error {

	// Action
	if source.Action != nil {
		action := IPRuleAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRule populates the provided destination IPRule from our IPRule
func (rule *IPRule) AssignPropertiesToIPRule(destination *alpha20210401s.IPRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPRule_STATUS. Use v1beta20210401.IPRule_STATUS instead
type IPRule_STATUS struct {
	Action *IPRuleSTATUSAction `json:"action,omitempty"`
	Value  *string             `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &IPRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_STATUSARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		rule.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromIPRuleSTATUS populates our IPRule_STATUS from the provided source IPRule_STATUS
func (rule *IPRule_STATUS) AssignPropertiesFromIPRuleSTATUS(source *alpha20210401s.IPRule_STATUS) error {

	// Action
	if source.Action != nil {
		action := IPRuleSTATUSAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRuleSTATUS populates the provided destination IPRule_STATUS from our IPRule_STATUS
func (rule *IPRule_STATUS) AssignPropertiesToIPRuleSTATUS(destination *alpha20210401s.IPRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultProperties. Use v1beta20210401.KeyVaultProperties instead
type KeyVaultProperties struct {
	Keyname     *string `json:"keyname,omitempty"`
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`
	Keyversion  *string `json:"keyversion,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &KeyVaultPropertiesARM{}

	// Set property ‘Keyname’:
	if properties.Keyname != nil {
		keyname := *properties.Keyname
		result.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if properties.Keyvaulturi != nil {
		keyvaulturi := *properties.Keyvaulturi
		result.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if properties.Keyversion != nil {
		keyversion := *properties.Keyversion
		result.Keyversion = &keyversion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		properties.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		properties.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		properties.Keyversion = &keyversion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *alpha20210401s.KeyVaultProperties) error {

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *alpha20210401s.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultProperties_STATUS. Use v1beta20210401.KeyVaultProperties_STATUS instead
type KeyVaultProperties_STATUS struct {
	CurrentVersionedKeyIdentifier *string `json:"currentVersionedKeyIdentifier,omitempty"`
	Keyname                       *string `json:"keyname,omitempty"`
	Keyvaulturi                   *string `json:"keyvaulturi,omitempty"`
	Keyversion                    *string `json:"keyversion,omitempty"`
	LastKeyRotationTimestamp      *string `json:"lastKeyRotationTimestamp,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘CurrentVersionedKeyIdentifier’:
	if typedInput.CurrentVersionedKeyIdentifier != nil {
		currentVersionedKeyIdentifier := *typedInput.CurrentVersionedKeyIdentifier
		properties.CurrentVersionedKeyIdentifier = &currentVersionedKeyIdentifier
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		properties.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		properties.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		properties.Keyversion = &keyversion
	}

	// Set property ‘LastKeyRotationTimestamp’:
	if typedInput.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *typedInput.LastKeyRotationTimestamp
		properties.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesSTATUS populates our KeyVaultProperties_STATUS from the provided source KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignPropertiesFromKeyVaultPropertiesSTATUS(source *alpha20210401s.KeyVaultProperties_STATUS) error {

	// CurrentVersionedKeyIdentifier
	properties.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(source.CurrentVersionedKeyIdentifier)

	// Keyname
	properties.Keyname = genruntime.ClonePointerToString(source.Keyname)

	// Keyvaulturi
	properties.Keyvaulturi = genruntime.ClonePointerToString(source.Keyvaulturi)

	// Keyversion
	properties.Keyversion = genruntime.ClonePointerToString(source.Keyversion)

	// LastKeyRotationTimestamp
	properties.LastKeyRotationTimestamp = genruntime.ClonePointerToString(source.LastKeyRotationTimestamp)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesSTATUS populates the provided destination KeyVaultProperties_STATUS from our KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignPropertiesToKeyVaultPropertiesSTATUS(destination *alpha20210401s.KeyVaultProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CurrentVersionedKeyIdentifier
	destination.CurrentVersionedKeyIdentifier = genruntime.ClonePointerToString(properties.CurrentVersionedKeyIdentifier)

	// Keyname
	destination.Keyname = genruntime.ClonePointerToString(properties.Keyname)

	// Keyvaulturi
	destination.Keyvaulturi = genruntime.ClonePointerToString(properties.Keyvaulturi)

	// Keyversion
	destination.Keyversion = genruntime.ClonePointerToString(properties.Keyversion)

	// LastKeyRotationTimestamp
	destination.LastKeyRotationTimestamp = genruntime.ClonePointerToString(properties.LastKeyRotationTimestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NetworkRuleSetBypass. Use v1beta20210401.NetworkRuleSetBypass instead
// +kubebuilder:validation:Enum={"AzureServices","Logging","Metrics","None"}
type NetworkRuleSetBypass string

const (
	NetworkRuleSetBypass_AzureServices = NetworkRuleSetBypass("AzureServices")
	NetworkRuleSetBypass_Logging       = NetworkRuleSetBypass("Logging")
	NetworkRuleSetBypass_Metrics       = NetworkRuleSetBypass("Metrics")
	NetworkRuleSetBypass_None          = NetworkRuleSetBypass("None")
)

// Deprecated version of NetworkRuleSetDefaultAction. Use v1beta20210401.NetworkRuleSetDefaultAction instead
// +kubebuilder:validation:Enum={"Allow","Deny"}
type NetworkRuleSetDefaultAction string

const (
	NetworkRuleSetDefaultAction_Allow = NetworkRuleSetDefaultAction("Allow")
	NetworkRuleSetDefaultAction_Deny  = NetworkRuleSetDefaultAction("Deny")
)

// Deprecated version of NetworkRuleSetSTATUSBypass. Use v1beta20210401.NetworkRuleSetSTATUSBypass instead
type NetworkRuleSetSTATUSBypass string

const (
	NetworkRuleSetSTATUSBypass_AzureServices = NetworkRuleSetSTATUSBypass("AzureServices")
	NetworkRuleSetSTATUSBypass_Logging       = NetworkRuleSetSTATUSBypass("Logging")
	NetworkRuleSetSTATUSBypass_Metrics       = NetworkRuleSetSTATUSBypass("Metrics")
	NetworkRuleSetSTATUSBypass_None          = NetworkRuleSetSTATUSBypass("None")
)

// Deprecated version of NetworkRuleSetSTATUSDefaultAction. Use v1beta20210401.NetworkRuleSetSTATUSDefaultAction instead
type NetworkRuleSetSTATUSDefaultAction string

const (
	NetworkRuleSetSTATUSDefaultAction_Allow = NetworkRuleSetSTATUSDefaultAction("Allow")
	NetworkRuleSetSTATUSDefaultAction_Deny  = NetworkRuleSetSTATUSDefaultAction("Deny")
)

// Deprecated version of ResourceAccessRule. Use v1beta20210401.ResourceAccessRule instead
type ResourceAccessRule struct {
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
	TenantId          *string                       `json:"tenantId,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceAccessRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *ResourceAccessRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &ResourceAccessRuleARM{}

	// Set property ‘ResourceId’:
	if rule.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*rule.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}

	// Set property ‘TenantId’:
	if rule.TenantId != nil {
		tenantId := *rule.TenantId
		result.TenantId = &tenantId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ResourceAccessRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ResourceAccessRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRuleARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		rule.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRule populates our ResourceAccessRule from the provided source ResourceAccessRule
func (rule *ResourceAccessRule) AssignPropertiesFromResourceAccessRule(source *alpha20210401s.ResourceAccessRule) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		rule.ResourceReference = &resourceReference
	} else {
		rule.ResourceReference = nil
	}

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRule populates the provided destination ResourceAccessRule from our ResourceAccessRule
func (rule *ResourceAccessRule) AssignPropertiesToResourceAccessRule(destination *alpha20210401s.ResourceAccessRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if rule.ResourceReference != nil {
		resourceReference := rule.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ResourceAccessRule_STATUS. Use v1beta20210401.ResourceAccessRule_STATUS instead
type ResourceAccessRule_STATUS struct {
	ResourceId *string `json:"resourceId,omitempty"`
	TenantId   *string `json:"tenantId,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceAccessRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ResourceAccessRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRule_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ResourceAccessRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRule_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRule_STATUSARM, got %T", armInput)
	}

	// Set property ‘ResourceId’:
	if typedInput.ResourceId != nil {
		resourceId := *typedInput.ResourceId
		rule.ResourceId = &resourceId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		rule.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRuleSTATUS populates our ResourceAccessRule_STATUS from the provided source ResourceAccessRule_STATUS
func (rule *ResourceAccessRule_STATUS) AssignPropertiesFromResourceAccessRuleSTATUS(source *alpha20210401s.ResourceAccessRule_STATUS) error {

	// ResourceId
	rule.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// TenantId
	rule.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRuleSTATUS populates the provided destination ResourceAccessRule_STATUS from our ResourceAccessRule_STATUS
func (rule *ResourceAccessRule_STATUS) AssignPropertiesToResourceAccessRuleSTATUS(destination *alpha20210401s.ResourceAccessRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(rule.ResourceId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(rule.TenantId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RoutingPreferenceRoutingChoice. Use v1beta20210401.RoutingPreferenceRoutingChoice instead
// +kubebuilder:validation:Enum={"InternetRouting","MicrosoftRouting"}
type RoutingPreferenceRoutingChoice string

const (
	RoutingPreferenceRoutingChoice_InternetRouting  = RoutingPreferenceRoutingChoice("InternetRouting")
	RoutingPreferenceRoutingChoice_MicrosoftRouting = RoutingPreferenceRoutingChoice("MicrosoftRouting")
)

// Deprecated version of RoutingPreferenceSTATUSRoutingChoice. Use v1beta20210401.RoutingPreferenceSTATUSRoutingChoice
// instead
type RoutingPreferenceSTATUSRoutingChoice string

const (
	RoutingPreferenceSTATUSRoutingChoice_InternetRouting  = RoutingPreferenceSTATUSRoutingChoice("InternetRouting")
	RoutingPreferenceSTATUSRoutingChoice_MicrosoftRouting = RoutingPreferenceSTATUSRoutingChoice("MicrosoftRouting")
)

// Deprecated version of SasPolicyExpirationAction. Use v1beta20210401.SasPolicyExpirationAction instead
// +kubebuilder:validation:Enum={"Log"}
type SasPolicyExpirationAction string

const SasPolicyExpirationAction_Log = SasPolicyExpirationAction("Log")

// Deprecated version of SasPolicySTATUSExpirationAction. Use v1beta20210401.SasPolicySTATUSExpirationAction instead
type SasPolicySTATUSExpirationAction string

const SasPolicySTATUSExpirationAction_Log = SasPolicySTATUSExpirationAction("Log")

// Deprecated version of StorageAccountInternetEndpoints_STATUS. Use v1beta20210401.StorageAccountInternetEndpoints_STATUS instead
type StorageAccountInternetEndpoints_STATUS struct {
	Blob *string `json:"blob,omitempty"`
	Dfs  *string `json:"dfs,omitempty"`
	File *string `json:"file,omitempty"`
	Web  *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &StorageAccountInternetEndpoints_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoints *StorageAccountInternetEndpoints_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountInternetEndpoints_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoints *StorageAccountInternetEndpoints_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountInternetEndpoints_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountInternetEndpoints_STATUSARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		endpoints.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		endpoints.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		endpoints.File = &file
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		endpoints.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountInternetEndpointsSTATUS populates our StorageAccountInternetEndpoints_STATUS from the provided source StorageAccountInternetEndpoints_STATUS
func (endpoints *StorageAccountInternetEndpoints_STATUS) AssignPropertiesFromStorageAccountInternetEndpointsSTATUS(source *alpha20210401s.StorageAccountInternetEndpoints_STATUS) error {

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountInternetEndpointsSTATUS populates the provided destination StorageAccountInternetEndpoints_STATUS from our StorageAccountInternetEndpoints_STATUS
func (endpoints *StorageAccountInternetEndpoints_STATUS) AssignPropertiesToStorageAccountInternetEndpointsSTATUS(destination *alpha20210401s.StorageAccountInternetEndpoints_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of StorageAccountMicrosoftEndpoints_STATUS. Use v1beta20210401.StorageAccountMicrosoftEndpoints_STATUS instead
type StorageAccountMicrosoftEndpoints_STATUS struct {
	Blob  *string `json:"blob,omitempty"`
	Dfs   *string `json:"dfs,omitempty"`
	File  *string `json:"file,omitempty"`
	Queue *string `json:"queue,omitempty"`
	Table *string `json:"table,omitempty"`
	Web   *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &StorageAccountMicrosoftEndpoints_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoints *StorageAccountMicrosoftEndpoints_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountMicrosoftEndpoints_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoints *StorageAccountMicrosoftEndpoints_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountMicrosoftEndpoints_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountMicrosoftEndpoints_STATUSARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		endpoints.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		endpoints.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		endpoints.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		queue := *typedInput.Queue
		endpoints.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		table := *typedInput.Table
		endpoints.Table = &table
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		endpoints.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS populates our StorageAccountMicrosoftEndpoints_STATUS from the provided source StorageAccountMicrosoftEndpoints_STATUS
func (endpoints *StorageAccountMicrosoftEndpoints_STATUS) AssignPropertiesFromStorageAccountMicrosoftEndpointsSTATUS(source *alpha20210401s.StorageAccountMicrosoftEndpoints_STATUS) error {

	// Blob
	endpoints.Blob = genruntime.ClonePointerToString(source.Blob)

	// Dfs
	endpoints.Dfs = genruntime.ClonePointerToString(source.Dfs)

	// File
	endpoints.File = genruntime.ClonePointerToString(source.File)

	// Queue
	endpoints.Queue = genruntime.ClonePointerToString(source.Queue)

	// Table
	endpoints.Table = genruntime.ClonePointerToString(source.Table)

	// Web
	endpoints.Web = genruntime.ClonePointerToString(source.Web)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS populates the provided destination StorageAccountMicrosoftEndpoints_STATUS from our StorageAccountMicrosoftEndpoints_STATUS
func (endpoints *StorageAccountMicrosoftEndpoints_STATUS) AssignPropertiesToStorageAccountMicrosoftEndpointsSTATUS(destination *alpha20210401s.StorageAccountMicrosoftEndpoints_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	destination.Blob = genruntime.ClonePointerToString(endpoints.Blob)

	// Dfs
	destination.Dfs = genruntime.ClonePointerToString(endpoints.Dfs)

	// File
	destination.File = genruntime.ClonePointerToString(endpoints.File)

	// Queue
	destination.Queue = genruntime.ClonePointerToString(endpoints.Queue)

	// Table
	destination.Table = genruntime.ClonePointerToString(endpoints.Table)

	// Web
	destination.Web = genruntime.ClonePointerToString(endpoints.Web)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountOperatorSecrets struct {
	// BlobEndpoint: indicates where the BlobEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	BlobEndpoint *genruntime.SecretDestination `json:"blobEndpoint,omitempty"`

	// DfsEndpoint: indicates where the DfsEndpoint secret should be placed. If omitted, the secret will not be retrieved from
	// Azure.
	DfsEndpoint *genruntime.SecretDestination `json:"dfsEndpoint,omitempty"`

	// FileEndpoint: indicates where the FileEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	FileEndpoint *genruntime.SecretDestination `json:"fileEndpoint,omitempty"`

	// Key1: indicates where the Key1 secret should be placed. If omitted, the secret will not be retrieved from Azure.
	Key1 *genruntime.SecretDestination `json:"key1,omitempty"`

	// Key2: indicates where the Key2 secret should be placed. If omitted, the secret will not be retrieved from Azure.
	Key2 *genruntime.SecretDestination `json:"key2,omitempty"`

	// QueueEndpoint: indicates where the QueueEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	QueueEndpoint *genruntime.SecretDestination `json:"queueEndpoint,omitempty"`

	// TableEndpoint: indicates where the TableEndpoint secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	TableEndpoint *genruntime.SecretDestination `json:"tableEndpoint,omitempty"`

	// WebEndpoint: indicates where the WebEndpoint secret should be placed. If omitted, the secret will not be retrieved from
	// Azure.
	WebEndpoint *genruntime.SecretDestination `json:"webEndpoint,omitempty"`
}

// AssignPropertiesFromStorageAccountOperatorSecrets populates our StorageAccountOperatorSecrets from the provided source StorageAccountOperatorSecrets
func (secrets *StorageAccountOperatorSecrets) AssignPropertiesFromStorageAccountOperatorSecrets(source *alpha20210401s.StorageAccountOperatorSecrets) error {

	// BlobEndpoint
	if source.BlobEndpoint != nil {
		blobEndpoint := source.BlobEndpoint.Copy()
		secrets.BlobEndpoint = &blobEndpoint
	} else {
		secrets.BlobEndpoint = nil
	}

	// DfsEndpoint
	if source.DfsEndpoint != nil {
		dfsEndpoint := source.DfsEndpoint.Copy()
		secrets.DfsEndpoint = &dfsEndpoint
	} else {
		secrets.DfsEndpoint = nil
	}

	// FileEndpoint
	if source.FileEndpoint != nil {
		fileEndpoint := source.FileEndpoint.Copy()
		secrets.FileEndpoint = &fileEndpoint
	} else {
		secrets.FileEndpoint = nil
	}

	// Key1
	if source.Key1 != nil {
		key1 := source.Key1.Copy()
		secrets.Key1 = &key1
	} else {
		secrets.Key1 = nil
	}

	// Key2
	if source.Key2 != nil {
		key2 := source.Key2.Copy()
		secrets.Key2 = &key2
	} else {
		secrets.Key2 = nil
	}

	// QueueEndpoint
	if source.QueueEndpoint != nil {
		queueEndpoint := source.QueueEndpoint.Copy()
		secrets.QueueEndpoint = &queueEndpoint
	} else {
		secrets.QueueEndpoint = nil
	}

	// TableEndpoint
	if source.TableEndpoint != nil {
		tableEndpoint := source.TableEndpoint.Copy()
		secrets.TableEndpoint = &tableEndpoint
	} else {
		secrets.TableEndpoint = nil
	}

	// WebEndpoint
	if source.WebEndpoint != nil {
		webEndpoint := source.WebEndpoint.Copy()
		secrets.WebEndpoint = &webEndpoint
	} else {
		secrets.WebEndpoint = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountOperatorSecrets populates the provided destination StorageAccountOperatorSecrets from our StorageAccountOperatorSecrets
func (secrets *StorageAccountOperatorSecrets) AssignPropertiesToStorageAccountOperatorSecrets(destination *alpha20210401s.StorageAccountOperatorSecrets) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobEndpoint
	if secrets.BlobEndpoint != nil {
		blobEndpoint := secrets.BlobEndpoint.Copy()
		destination.BlobEndpoint = &blobEndpoint
	} else {
		destination.BlobEndpoint = nil
	}

	// DfsEndpoint
	if secrets.DfsEndpoint != nil {
		dfsEndpoint := secrets.DfsEndpoint.Copy()
		destination.DfsEndpoint = &dfsEndpoint
	} else {
		destination.DfsEndpoint = nil
	}

	// FileEndpoint
	if secrets.FileEndpoint != nil {
		fileEndpoint := secrets.FileEndpoint.Copy()
		destination.FileEndpoint = &fileEndpoint
	} else {
		destination.FileEndpoint = nil
	}

	// Key1
	if secrets.Key1 != nil {
		key1 := secrets.Key1.Copy()
		destination.Key1 = &key1
	} else {
		destination.Key1 = nil
	}

	// Key2
	if secrets.Key2 != nil {
		key2 := secrets.Key2.Copy()
		destination.Key2 = &key2
	} else {
		destination.Key2 = nil
	}

	// QueueEndpoint
	if secrets.QueueEndpoint != nil {
		queueEndpoint := secrets.QueueEndpoint.Copy()
		destination.QueueEndpoint = &queueEndpoint
	} else {
		destination.QueueEndpoint = nil
	}

	// TableEndpoint
	if secrets.TableEndpoint != nil {
		tableEndpoint := secrets.TableEndpoint.Copy()
		destination.TableEndpoint = &tableEndpoint
	} else {
		destination.TableEndpoint = nil
	}

	// WebEndpoint
	if secrets.WebEndpoint != nil {
		webEndpoint := secrets.WebEndpoint.Copy()
		destination.WebEndpoint = &webEndpoint
	} else {
		destination.WebEndpoint = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UserAssignedIdentity_STATUS. Use v1beta20210401.UserAssignedIdentity_STATUS instead
type UserAssignedIdentity_STATUS struct {
	ClientId    *string `json:"clientId,omitempty"`
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentity_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *UserAssignedIdentity_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentity_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *UserAssignedIdentity_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentity_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentity_STATUSARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identity.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentitySTATUS populates our UserAssignedIdentity_STATUS from the provided source UserAssignedIdentity_STATUS
func (identity *UserAssignedIdentity_STATUS) AssignPropertiesFromUserAssignedIdentitySTATUS(source *alpha20210401s.UserAssignedIdentity_STATUS) error {

	// ClientId
	identity.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentitySTATUS populates the provided destination UserAssignedIdentity_STATUS from our UserAssignedIdentity_STATUS
func (identity *UserAssignedIdentity_STATUS) AssignPropertiesToUserAssignedIdentitySTATUS(destination *alpha20210401s.UserAssignedIdentity_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identity.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkRule. Use v1beta20210401.VirtualNetworkRule instead
type VirtualNetworkRule struct {
	Action *VirtualNetworkRuleAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
	State     *VirtualNetworkRuleState      `json:"state,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *VirtualNetworkRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &VirtualNetworkRuleARM{}

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Id’:
	if rule.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*rule.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘State’:
	if rule.State != nil {
		state := *rule.State
		result.State = &state
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// no assignment for property ‘Reference’

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		rule.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule populates our VirtualNetworkRule from the provided source VirtualNetworkRule
func (rule *VirtualNetworkRule) AssignPropertiesFromVirtualNetworkRule(source *alpha20210401s.VirtualNetworkRule) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRuleAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		rule.Reference = &reference
	} else {
		rule.Reference = nil
	}

	// State
	if source.State != nil {
		state := VirtualNetworkRuleState(*source.State)
		rule.State = &state
	} else {
		rule.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule populates the provided destination VirtualNetworkRule from our VirtualNetworkRule
func (rule *VirtualNetworkRule) AssignPropertiesToVirtualNetworkRule(destination *alpha20210401s.VirtualNetworkRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Reference
	if rule.Reference != nil {
		reference := rule.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// State
	if rule.State != nil {
		state := string(*rule.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkRule_STATUS. Use v1beta20210401.VirtualNetworkRule_STATUS instead
type VirtualNetworkRule_STATUS struct {
	Action *VirtualNetworkRuleSTATUSAction `json:"action,omitempty"`
	Id     *string                         `json:"id,omitempty"`
	State  *VirtualNetworkRuleSTATUSState  `json:"state,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_STATUSARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		rule.Id = &id
	}

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		rule.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRuleSTATUS populates our VirtualNetworkRule_STATUS from the provided source VirtualNetworkRule_STATUS
func (rule *VirtualNetworkRule_STATUS) AssignPropertiesFromVirtualNetworkRuleSTATUS(source *alpha20210401s.VirtualNetworkRule_STATUS) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRuleSTATUSAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Id
	rule.Id = genruntime.ClonePointerToString(source.Id)

	// State
	if source.State != nil {
		state := VirtualNetworkRuleSTATUSState(*source.State)
		rule.State = &state
	} else {
		rule.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRuleSTATUS populates the provided destination VirtualNetworkRule_STATUS from our VirtualNetworkRule_STATUS
func (rule *VirtualNetworkRule_STATUS) AssignPropertiesToVirtualNetworkRuleSTATUS(destination *alpha20210401s.VirtualNetworkRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(rule.Id)

	// State
	if rule.State != nil {
		state := string(*rule.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BlobRestoreRange_STATUS. Use v1beta20210401.BlobRestoreRange_STATUS instead
type BlobRestoreRange_STATUS struct {
	EndRange   *string `json:"endRange,omitempty"`
	StartRange *string `json:"startRange,omitempty"`
}

var _ genruntime.FromARMConverter = &BlobRestoreRange_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (restoreRange *BlobRestoreRange_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreRange_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (restoreRange *BlobRestoreRange_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreRange_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreRange_STATUSARM, got %T", armInput)
	}

	// Set property ‘EndRange’:
	if typedInput.EndRange != nil {
		endRange := *typedInput.EndRange
		restoreRange.EndRange = &endRange
	}

	// Set property ‘StartRange’:
	if typedInput.StartRange != nil {
		startRange := *typedInput.StartRange
		restoreRange.StartRange = &startRange
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreRangeSTATUS populates our BlobRestoreRange_STATUS from the provided source BlobRestoreRange_STATUS
func (restoreRange *BlobRestoreRange_STATUS) AssignPropertiesFromBlobRestoreRangeSTATUS(source *alpha20210401s.BlobRestoreRange_STATUS) error {

	// EndRange
	restoreRange.EndRange = genruntime.ClonePointerToString(source.EndRange)

	// StartRange
	restoreRange.StartRange = genruntime.ClonePointerToString(source.StartRange)

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreRangeSTATUS populates the provided destination BlobRestoreRange_STATUS from our BlobRestoreRange_STATUS
func (restoreRange *BlobRestoreRange_STATUS) AssignPropertiesToBlobRestoreRangeSTATUS(destination *alpha20210401s.BlobRestoreRange_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndRange
	destination.EndRange = genruntime.ClonePointerToString(restoreRange.EndRange)

	// StartRange
	destination.StartRange = genruntime.ClonePointerToString(restoreRange.StartRange)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionService. Use v1beta20210401.EncryptionService instead
type EncryptionService struct {
	Enabled *bool                     `json:"enabled,omitempty"`
	KeyType *EncryptionServiceKeyType `json:"keyType,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionService{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (service *EncryptionService) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if service == nil {
		return nil, nil
	}
	result := &EncryptionServiceARM{}

	// Set property ‘Enabled’:
	if service.Enabled != nil {
		enabled := *service.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if service.KeyType != nil {
		keyType := *service.KeyType
		result.KeyType = &keyType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *EncryptionService) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServiceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *EncryptionService) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServiceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServiceARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		service.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		service.KeyType = &keyType
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionService populates our EncryptionService from the provided source EncryptionService
func (service *EncryptionService) AssignPropertiesFromEncryptionService(source *alpha20210401s.EncryptionService) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionServiceKeyType(*source.KeyType)
		service.KeyType = &keyType
	} else {
		service.KeyType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionService populates the provided destination EncryptionService from our EncryptionService
func (service *EncryptionService) AssignPropertiesToEncryptionService(destination *alpha20210401s.EncryptionService) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if service.KeyType != nil {
		keyType := string(*service.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionService_STATUS. Use v1beta20210401.EncryptionService_STATUS instead
type EncryptionService_STATUS struct {
	Enabled         *bool                           `json:"enabled,omitempty"`
	KeyType         *EncryptionServiceSTATUSKeyType `json:"keyType,omitempty"`
	LastEnabledTime *string                         `json:"lastEnabledTime,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionService_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (service *EncryptionService_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionService_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (service *EncryptionService_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionService_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionService_STATUSARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		service.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		service.KeyType = &keyType
	}

	// Set property ‘LastEnabledTime’:
	if typedInput.LastEnabledTime != nil {
		lastEnabledTime := *typedInput.LastEnabledTime
		service.LastEnabledTime = &lastEnabledTime
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServiceSTATUS populates our EncryptionService_STATUS from the provided source EncryptionService_STATUS
func (service *EncryptionService_STATUS) AssignPropertiesFromEncryptionServiceSTATUS(source *alpha20210401s.EncryptionService_STATUS) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		service.Enabled = &enabled
	} else {
		service.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionServiceSTATUSKeyType(*source.KeyType)
		service.KeyType = &keyType
	} else {
		service.KeyType = nil
	}

	// LastEnabledTime
	service.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// No error
	return nil
}

// AssignPropertiesToEncryptionServiceSTATUS populates the provided destination EncryptionService_STATUS from our EncryptionService_STATUS
func (service *EncryptionService_STATUS) AssignPropertiesToEncryptionServiceSTATUS(destination *alpha20210401s.EncryptionService_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if service.Enabled != nil {
		enabled := *service.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if service.KeyType != nil {
		keyType := string(*service.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(service.LastEnabledTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPRuleAction. Use v1beta20210401.IPRuleAction instead
// +kubebuilder:validation:Enum={"Allow"}
type IPRuleAction string

const IPRuleAction_Allow = IPRuleAction("Allow")

// Deprecated version of IPRuleSTATUSAction. Use v1beta20210401.IPRuleSTATUSAction instead
type IPRuleSTATUSAction string

const IPRuleSTATUSAction_Allow = IPRuleSTATUSAction("Allow")

// Deprecated version of VirtualNetworkRuleAction. Use v1beta20210401.VirtualNetworkRuleAction instead
// +kubebuilder:validation:Enum={"Allow"}
type VirtualNetworkRuleAction string

const VirtualNetworkRuleAction_Allow = VirtualNetworkRuleAction("Allow")

// Deprecated version of VirtualNetworkRuleState. Use v1beta20210401.VirtualNetworkRuleState instead
// +kubebuilder:validation:Enum={"Deprovisioning","Failed","NetworkSourceDeleted","Provisioning","Succeeded"}
type VirtualNetworkRuleState string

const (
	VirtualNetworkRuleState_Deprovisioning       = VirtualNetworkRuleState("Deprovisioning")
	VirtualNetworkRuleState_Failed               = VirtualNetworkRuleState("Failed")
	VirtualNetworkRuleState_NetworkSourceDeleted = VirtualNetworkRuleState("NetworkSourceDeleted")
	VirtualNetworkRuleState_Provisioning         = VirtualNetworkRuleState("Provisioning")
	VirtualNetworkRuleState_Succeeded            = VirtualNetworkRuleState("Succeeded")
)

// Deprecated version of VirtualNetworkRuleSTATUSAction. Use v1beta20210401.VirtualNetworkRuleSTATUSAction instead
type VirtualNetworkRuleSTATUSAction string

const VirtualNetworkRuleSTATUSAction_Allow = VirtualNetworkRuleSTATUSAction("Allow")

// Deprecated version of VirtualNetworkRuleSTATUSState. Use v1beta20210401.VirtualNetworkRuleSTATUSState instead
type VirtualNetworkRuleSTATUSState string

const (
	VirtualNetworkRuleSTATUSState_Deprovisioning       = VirtualNetworkRuleSTATUSState("Deprovisioning")
	VirtualNetworkRuleSTATUSState_Failed               = VirtualNetworkRuleSTATUSState("Failed")
	VirtualNetworkRuleSTATUSState_NetworkSourceDeleted = VirtualNetworkRuleSTATUSState("NetworkSourceDeleted")
	VirtualNetworkRuleSTATUSState_Provisioning         = VirtualNetworkRuleSTATUSState("Provisioning")
	VirtualNetworkRuleSTATUSState_Succeeded            = VirtualNetworkRuleSTATUSState("Succeeded")
)

// Deprecated version of EncryptionServiceKeyType. Use v1beta20210401.EncryptionServiceKeyType instead
// +kubebuilder:validation:Enum={"Account","Service"}
type EncryptionServiceKeyType string

const (
	EncryptionServiceKeyType_Account = EncryptionServiceKeyType("Account")
	EncryptionServiceKeyType_Service = EncryptionServiceKeyType("Service")
)

// Deprecated version of EncryptionServiceSTATUSKeyType. Use v1beta20210401.EncryptionServiceSTATUSKeyType instead
type EncryptionServiceSTATUSKeyType string

const (
	EncryptionServiceSTATUSKeyType_Account = EncryptionServiceSTATUSKeyType("Account")
	EncryptionServiceSTATUSKeyType_Service = EncryptionServiceSTATUSKeyType("Service")
)

func init() {
	SchemeBuilder.Register(&StorageAccount{}, &StorageAccountList{})
}
