// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_BlobServiceProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BlobServiceProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBlobServicePropertiesSTATUSARM, BlobServicePropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBlobServicePropertiesSTATUSARM runs a test to see if a specific instance of BlobServiceProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBlobServicePropertiesSTATUSARM(subject BlobServiceProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BlobServiceProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BlobServiceProperties_STATUSARM instances for property testing - lazily instantiated by
// BlobServicePropertiesSTATUSARMGenerator()
var blobServicePropertiesSTATUSARMGenerator gopter.Gen

// BlobServicePropertiesSTATUSARMGenerator returns a generator of BlobServiceProperties_STATUSARM instances for property testing.
// We first initialize blobServicePropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BlobServicePropertiesSTATUSARMGenerator() gopter.Gen {
	if blobServicePropertiesSTATUSARMGenerator != nil {
		return blobServicePropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSARM(generators)
	blobServicePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(BlobServiceProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForBlobServicePropertiesSTATUSARM(generators)
	blobServicePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(BlobServiceProperties_STATUSARM{}), generators)

	return blobServicePropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBlobServicePropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBlobServicePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(BlobServicePropertiesSTATUSPropertiesARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuSTATUSARMGenerator())
}

func Test_BlobServiceProperties_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BlobServiceProperties_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBlobServicePropertiesSTATUSPropertiesARM, BlobServicePropertiesSTATUSPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBlobServicePropertiesSTATUSPropertiesARM runs a test to see if a specific instance of BlobServiceProperties_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBlobServicePropertiesSTATUSPropertiesARM(subject BlobServiceProperties_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BlobServiceProperties_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BlobServiceProperties_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// BlobServicePropertiesSTATUSPropertiesARMGenerator()
var blobServicePropertiesSTATUSPropertiesARMGenerator gopter.Gen

// BlobServicePropertiesSTATUSPropertiesARMGenerator returns a generator of BlobServiceProperties_STATUS_PropertiesARM instances for property testing.
// We first initialize blobServicePropertiesSTATUSPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BlobServicePropertiesSTATUSPropertiesARMGenerator() gopter.Gen {
	if blobServicePropertiesSTATUSPropertiesARMGenerator != nil {
		return blobServicePropertiesSTATUSPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSPropertiesARM(generators)
	blobServicePropertiesSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(BlobServiceProperties_STATUS_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForBlobServicePropertiesSTATUSPropertiesARM(generators)
	blobServicePropertiesSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(BlobServiceProperties_STATUS_PropertiesARM{}), generators)

	return blobServicePropertiesSTATUSPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBlobServicePropertiesSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["AutomaticSnapshotPolicyEnabled"] = gen.PtrOf(gen.Bool())
	gens["DefaultServiceVersion"] = gen.PtrOf(gen.AlphaString())
	gens["IsVersioningEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForBlobServicePropertiesSTATUSPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBlobServicePropertiesSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["ChangeFeed"] = gen.PtrOf(ChangeFeedSTATUSARMGenerator())
	gens["ContainerDeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicySTATUSARMGenerator())
	gens["Cors"] = gen.PtrOf(CorsRulesSTATUSARMGenerator())
	gens["DeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicySTATUSARMGenerator())
	gens["LastAccessTimeTrackingPolicy"] = gen.PtrOf(LastAccessTimeTrackingPolicySTATUSARMGenerator())
	gens["RestorePolicy"] = gen.PtrOf(RestorePolicyPropertiesSTATUSARMGenerator())
}

func Test_Sku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuSTATUSARM, SkuSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuSTATUSARM runs a test to see if a specific instance of Sku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuSTATUSARM(subject Sku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUSARM instances for property testing - lazily instantiated by SkuSTATUSARMGenerator()
var skuSTATUSARMGenerator gopter.Gen

// SkuSTATUSARMGenerator returns a generator of Sku_STATUSARM instances for property testing.
func SkuSTATUSARMGenerator() gopter.Gen {
	if skuSTATUSARMGenerator != nil {
		return skuSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuSTATUSARM(generators)
	skuSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUSARM{}), generators)

	return skuSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		SkuName_STATUS_PremiumLRS,
		SkuName_STATUS_PremiumZRS,
		SkuName_STATUS_StandardGRS,
		SkuName_STATUS_StandardGZRS,
		SkuName_STATUS_StandardLRS,
		SkuName_STATUS_StandardRAGRS,
		SkuName_STATUS_StandardRAGZRS,
		SkuName_STATUS_StandardZRS))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(Tier_STATUS_Premium, Tier_STATUS_Standard))
}

func Test_ChangeFeed_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ChangeFeed_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForChangeFeedSTATUSARM, ChangeFeedSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForChangeFeedSTATUSARM runs a test to see if a specific instance of ChangeFeed_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForChangeFeedSTATUSARM(subject ChangeFeed_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ChangeFeed_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ChangeFeed_STATUSARM instances for property testing - lazily instantiated by
// ChangeFeedSTATUSARMGenerator()
var changeFeedSTATUSARMGenerator gopter.Gen

// ChangeFeedSTATUSARMGenerator returns a generator of ChangeFeed_STATUSARM instances for property testing.
func ChangeFeedSTATUSARMGenerator() gopter.Gen {
	if changeFeedSTATUSARMGenerator != nil {
		return changeFeedSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForChangeFeedSTATUSARM(generators)
	changeFeedSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ChangeFeed_STATUSARM{}), generators)

	return changeFeedSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForChangeFeedSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForChangeFeedSTATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

func Test_CorsRules_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRules_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRulesSTATUSARM, CorsRulesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRulesSTATUSARM runs a test to see if a specific instance of CorsRules_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRulesSTATUSARM(subject CorsRules_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRules_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRules_STATUSARM instances for property testing - lazily instantiated by CorsRulesSTATUSARMGenerator()
var corsRulesSTATUSARMGenerator gopter.Gen

// CorsRulesSTATUSARMGenerator returns a generator of CorsRules_STATUSARM instances for property testing.
func CorsRulesSTATUSARMGenerator() gopter.Gen {
	if corsRulesSTATUSARMGenerator != nil {
		return corsRulesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCorsRulesSTATUSARM(generators)
	corsRulesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(CorsRules_STATUSARM{}), generators)

	return corsRulesSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForCorsRulesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCorsRulesSTATUSARM(gens map[string]gopter.Gen) {
	gens["CorsRules"] = gen.SliceOf(CorsRuleSTATUSARMGenerator())
}

func Test_DeleteRetentionPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeleteRetentionPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeleteRetentionPolicySTATUSARM, DeleteRetentionPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeleteRetentionPolicySTATUSARM runs a test to see if a specific instance of DeleteRetentionPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeleteRetentionPolicySTATUSARM(subject DeleteRetentionPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeleteRetentionPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeleteRetentionPolicy_STATUSARM instances for property testing - lazily instantiated by
// DeleteRetentionPolicySTATUSARMGenerator()
var deleteRetentionPolicySTATUSARMGenerator gopter.Gen

// DeleteRetentionPolicySTATUSARMGenerator returns a generator of DeleteRetentionPolicy_STATUSARM instances for property testing.
func DeleteRetentionPolicySTATUSARMGenerator() gopter.Gen {
	if deleteRetentionPolicySTATUSARMGenerator != nil {
		return deleteRetentionPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeleteRetentionPolicySTATUSARM(generators)
	deleteRetentionPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeleteRetentionPolicy_STATUSARM{}), generators)

	return deleteRetentionPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeleteRetentionPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeleteRetentionPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_LastAccessTimeTrackingPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LastAccessTimeTrackingPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLastAccessTimeTrackingPolicySTATUSARM, LastAccessTimeTrackingPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLastAccessTimeTrackingPolicySTATUSARM runs a test to see if a specific instance of LastAccessTimeTrackingPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLastAccessTimeTrackingPolicySTATUSARM(subject LastAccessTimeTrackingPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LastAccessTimeTrackingPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LastAccessTimeTrackingPolicy_STATUSARM instances for property testing - lazily instantiated by
// LastAccessTimeTrackingPolicySTATUSARMGenerator()
var lastAccessTimeTrackingPolicySTATUSARMGenerator gopter.Gen

// LastAccessTimeTrackingPolicySTATUSARMGenerator returns a generator of LastAccessTimeTrackingPolicy_STATUSARM instances for property testing.
func LastAccessTimeTrackingPolicySTATUSARMGenerator() gopter.Gen {
	if lastAccessTimeTrackingPolicySTATUSARMGenerator != nil {
		return lastAccessTimeTrackingPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicySTATUSARM(generators)
	lastAccessTimeTrackingPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(LastAccessTimeTrackingPolicy_STATUSARM{}), generators)

	return lastAccessTimeTrackingPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["BlobType"] = gen.SliceOf(gen.AlphaString())
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(LastAccessTimeTrackingPolicySTATUSName_AccessTimeTracking))
	gens["TrackingGranularityInDays"] = gen.PtrOf(gen.Int())
}

func Test_RestorePolicyProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RestorePolicyProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRestorePolicyPropertiesSTATUSARM, RestorePolicyPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRestorePolicyPropertiesSTATUSARM runs a test to see if a specific instance of RestorePolicyProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRestorePolicyPropertiesSTATUSARM(subject RestorePolicyProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RestorePolicyProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RestorePolicyProperties_STATUSARM instances for property testing - lazily instantiated by
// RestorePolicyPropertiesSTATUSARMGenerator()
var restorePolicyPropertiesSTATUSARMGenerator gopter.Gen

// RestorePolicyPropertiesSTATUSARMGenerator returns a generator of RestorePolicyProperties_STATUSARM instances for property testing.
func RestorePolicyPropertiesSTATUSARMGenerator() gopter.Gen {
	if restorePolicyPropertiesSTATUSARMGenerator != nil {
		return restorePolicyPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRestorePolicyPropertiesSTATUSARM(generators)
	restorePolicyPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RestorePolicyProperties_STATUSARM{}), generators)

	return restorePolicyPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRestorePolicyPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRestorePolicyPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["LastEnabledTime"] = gen.PtrOf(gen.AlphaString())
	gens["MinRestoreTime"] = gen.PtrOf(gen.AlphaString())
}

func Test_CorsRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRuleSTATUSARM, CorsRuleSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRuleSTATUSARM runs a test to see if a specific instance of CorsRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRuleSTATUSARM(subject CorsRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRule_STATUSARM instances for property testing - lazily instantiated by CorsRuleSTATUSARMGenerator()
var corsRuleSTATUSARMGenerator gopter.Gen

// CorsRuleSTATUSARMGenerator returns a generator of CorsRule_STATUSARM instances for property testing.
func CorsRuleSTATUSARMGenerator() gopter.Gen {
	if corsRuleSTATUSARMGenerator != nil {
		return corsRuleSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsRuleSTATUSARM(generators)
	corsRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(CorsRule_STATUSARM{}), generators)

	return corsRuleSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsRuleSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.SliceOf(gen.OneConstOf(
		CorsRuleSTATUSAllowedMethods_DELETE,
		CorsRuleSTATUSAllowedMethods_GET,
		CorsRuleSTATUSAllowedMethods_HEAD,
		CorsRuleSTATUSAllowedMethods_MERGE,
		CorsRuleSTATUSAllowedMethods_OPTIONS,
		CorsRuleSTATUSAllowedMethods_POST,
		CorsRuleSTATUSAllowedMethods_PUT))
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.PtrOf(gen.Int())
}
