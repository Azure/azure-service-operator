// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagementPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySTATUSARM, ManagementPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySTATUSARM runs a test to see if a specific instance of ManagementPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySTATUSARM(subject ManagementPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicy_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicySTATUSARMGenerator()
var managementPolicySTATUSARMGenerator gopter.Gen

// ManagementPolicySTATUSARMGenerator returns a generator of ManagementPolicy_STATUSARM instances for property testing.
// We first initialize managementPolicySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicySTATUSARMGenerator() gopter.Gen {
	if managementPolicySTATUSARMGenerator != nil {
		return managementPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicySTATUSARM(generators)
	managementPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicy_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicySTATUSARM(generators)
	managementPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicy_STATUSARM{}), generators)

	return managementPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagementPolicyPropertiesSTATUSARMGenerator())
}

func Test_ManagementPolicyProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyPropertiesSTATUSARM, ManagementPolicyPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyPropertiesSTATUSARM runs a test to see if a specific instance of ManagementPolicyProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyPropertiesSTATUSARM(subject ManagementPolicyProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyProperties_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyPropertiesSTATUSARMGenerator()
var managementPolicyPropertiesSTATUSARMGenerator gopter.Gen

// ManagementPolicyPropertiesSTATUSARMGenerator returns a generator of ManagementPolicyProperties_STATUSARM instances for property testing.
// We first initialize managementPolicyPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyPropertiesSTATUSARMGenerator() gopter.Gen {
	if managementPolicyPropertiesSTATUSARMGenerator != nil {
		return managementPolicyPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyPropertiesSTATUSARM(generators)
	managementPolicyPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyPropertiesSTATUSARM(generators)
	managementPolicyPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyProperties_STATUSARM{}), generators)

	return managementPolicyPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicyPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Policy"] = gen.PtrOf(ManagementPolicySchemaSTATUSARMGenerator())
}

func Test_ManagementPolicySchema_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySchema_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySchemaSTATUSARM, ManagementPolicySchemaSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySchemaSTATUSARM runs a test to see if a specific instance of ManagementPolicySchema_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySchemaSTATUSARM(subject ManagementPolicySchema_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySchema_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySchema_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicySchemaSTATUSARMGenerator()
var managementPolicySchemaSTATUSARMGenerator gopter.Gen

// ManagementPolicySchemaSTATUSARMGenerator returns a generator of ManagementPolicySchema_STATUSARM instances for property testing.
func ManagementPolicySchemaSTATUSARMGenerator() gopter.Gen {
	if managementPolicySchemaSTATUSARMGenerator != nil {
		return managementPolicySchemaSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySchemaSTATUSARM(generators)
	managementPolicySchemaSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySchema_STATUSARM{}), generators)

	return managementPolicySchemaSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySchemaSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySchemaSTATUSARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(ManagementPolicyRuleSTATUSARMGenerator())
}

func Test_ManagementPolicyRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyRuleSTATUSARM, ManagementPolicyRuleSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyRuleSTATUSARM runs a test to see if a specific instance of ManagementPolicyRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyRuleSTATUSARM(subject ManagementPolicyRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyRule_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyRuleSTATUSARMGenerator()
var managementPolicyRuleSTATUSARMGenerator gopter.Gen

// ManagementPolicyRuleSTATUSARMGenerator returns a generator of ManagementPolicyRule_STATUSARM instances for property testing.
// We first initialize managementPolicyRuleSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyRuleSTATUSARMGenerator() gopter.Gen {
	if managementPolicyRuleSTATUSARMGenerator != nil {
		return managementPolicyRuleSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUSARM(generators)
	managementPolicyRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyRuleSTATUSARM(generators)
	managementPolicyRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyRule_STATUSARM{}), generators)

	return managementPolicyRuleSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagementPolicyRuleSTATUSType_Lifecycle))
}

// AddRelatedPropertyGeneratorsForManagementPolicyRuleSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Definition"] = gen.PtrOf(ManagementPolicyDefinitionSTATUSARMGenerator())
}

func Test_ManagementPolicyDefinition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyDefinition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyDefinitionSTATUSARM, ManagementPolicyDefinitionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyDefinitionSTATUSARM runs a test to see if a specific instance of ManagementPolicyDefinition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyDefinitionSTATUSARM(subject ManagementPolicyDefinition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyDefinition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyDefinition_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyDefinitionSTATUSARMGenerator()
var managementPolicyDefinitionSTATUSARMGenerator gopter.Gen

// ManagementPolicyDefinitionSTATUSARMGenerator returns a generator of ManagementPolicyDefinition_STATUSARM instances for property testing.
func ManagementPolicyDefinitionSTATUSARMGenerator() gopter.Gen {
	if managementPolicyDefinitionSTATUSARMGenerator != nil {
		return managementPolicyDefinitionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyDefinitionSTATUSARM(generators)
	managementPolicyDefinitionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyDefinition_STATUSARM{}), generators)

	return managementPolicyDefinitionSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyDefinitionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyDefinitionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.PtrOf(ManagementPolicyActionSTATUSARMGenerator())
	gens["Filters"] = gen.PtrOf(ManagementPolicyFilterSTATUSARMGenerator())
}

func Test_ManagementPolicyAction_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyAction_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyActionSTATUSARM, ManagementPolicyActionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyActionSTATUSARM runs a test to see if a specific instance of ManagementPolicyAction_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyActionSTATUSARM(subject ManagementPolicyAction_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyAction_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyAction_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyActionSTATUSARMGenerator()
var managementPolicyActionSTATUSARMGenerator gopter.Gen

// ManagementPolicyActionSTATUSARMGenerator returns a generator of ManagementPolicyAction_STATUSARM instances for property testing.
func ManagementPolicyActionSTATUSARMGenerator() gopter.Gen {
	if managementPolicyActionSTATUSARMGenerator != nil {
		return managementPolicyActionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyActionSTATUSARM(generators)
	managementPolicyActionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyAction_STATUSARM{}), generators)

	return managementPolicyActionSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyActionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyActionSTATUSARM(gens map[string]gopter.Gen) {
	gens["BaseBlob"] = gen.PtrOf(ManagementPolicyBaseBlobSTATUSARMGenerator())
	gens["Snapshot"] = gen.PtrOf(ManagementPolicySnapShotSTATUSARMGenerator())
	gens["Version"] = gen.PtrOf(ManagementPolicyVersionSTATUSARMGenerator())
}

func Test_ManagementPolicyFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyFilterSTATUSARM, ManagementPolicyFilterSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyFilterSTATUSARM runs a test to see if a specific instance of ManagementPolicyFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyFilterSTATUSARM(subject ManagementPolicyFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyFilter_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyFilterSTATUSARMGenerator()
var managementPolicyFilterSTATUSARMGenerator gopter.Gen

// ManagementPolicyFilterSTATUSARMGenerator returns a generator of ManagementPolicyFilter_STATUSARM instances for property testing.
// We first initialize managementPolicyFilterSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyFilterSTATUSARMGenerator() gopter.Gen {
	if managementPolicyFilterSTATUSARMGenerator != nil {
		return managementPolicyFilterSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUSARM(generators)
	managementPolicyFilterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyFilterSTATUSARM(generators)
	managementPolicyFilterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyFilter_STATUSARM{}), generators)

	return managementPolicyFilterSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyFilterSTATUSARM(gens map[string]gopter.Gen) {
	gens["BlobTypes"] = gen.SliceOf(gen.AlphaString())
	gens["PrefixMatch"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagementPolicyFilterSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyFilterSTATUSARM(gens map[string]gopter.Gen) {
	gens["BlobIndexMatch"] = gen.SliceOf(TagFilterSTATUSARMGenerator())
}

func Test_ManagementPolicyBaseBlob_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyBaseBlob_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyBaseBlobSTATUSARM, ManagementPolicyBaseBlobSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyBaseBlobSTATUSARM runs a test to see if a specific instance of ManagementPolicyBaseBlob_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyBaseBlobSTATUSARM(subject ManagementPolicyBaseBlob_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyBaseBlob_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyBaseBlob_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyBaseBlobSTATUSARMGenerator()
var managementPolicyBaseBlobSTATUSARMGenerator gopter.Gen

// ManagementPolicyBaseBlobSTATUSARMGenerator returns a generator of ManagementPolicyBaseBlob_STATUSARM instances for property testing.
// We first initialize managementPolicyBaseBlobSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagementPolicyBaseBlobSTATUSARMGenerator() gopter.Gen {
	if managementPolicyBaseBlobSTATUSARMGenerator != nil {
		return managementPolicyBaseBlobSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUSARM(generators)
	managementPolicyBaseBlobSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagementPolicyBaseBlobSTATUSARM(generators)
	managementPolicyBaseBlobSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyBaseBlob_STATUSARM{}), generators)

	return managementPolicyBaseBlobSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagementPolicyBaseBlobSTATUSARM(gens map[string]gopter.Gen) {
	gens["EnableAutoTierToHotFromCool"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagementPolicyBaseBlobSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyBaseBlobSTATUSARM(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterModificationSTATUSARMGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterModificationSTATUSARMGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterModificationSTATUSARMGenerator())
}

func Test_ManagementPolicySnapShot_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicySnapShot_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicySnapShotSTATUSARM, ManagementPolicySnapShotSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicySnapShotSTATUSARM runs a test to see if a specific instance of ManagementPolicySnapShot_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicySnapShotSTATUSARM(subject ManagementPolicySnapShot_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicySnapShot_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicySnapShot_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicySnapShotSTATUSARMGenerator()
var managementPolicySnapShotSTATUSARMGenerator gopter.Gen

// ManagementPolicySnapShotSTATUSARMGenerator returns a generator of ManagementPolicySnapShot_STATUSARM instances for property testing.
func ManagementPolicySnapShotSTATUSARMGenerator() gopter.Gen {
	if managementPolicySnapShotSTATUSARMGenerator != nil {
		return managementPolicySnapShotSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicySnapShotSTATUSARM(generators)
	managementPolicySnapShotSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicySnapShot_STATUSARM{}), generators)

	return managementPolicySnapShotSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicySnapShotSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicySnapShotSTATUSARM(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreationSTATUSARMGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreationSTATUSARMGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreationSTATUSARMGenerator())
}

func Test_ManagementPolicyVersion_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagementPolicyVersion_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagementPolicyVersionSTATUSARM, ManagementPolicyVersionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagementPolicyVersionSTATUSARM runs a test to see if a specific instance of ManagementPolicyVersion_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagementPolicyVersionSTATUSARM(subject ManagementPolicyVersion_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagementPolicyVersion_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagementPolicyVersion_STATUSARM instances for property testing - lazily instantiated by
// ManagementPolicyVersionSTATUSARMGenerator()
var managementPolicyVersionSTATUSARMGenerator gopter.Gen

// ManagementPolicyVersionSTATUSARMGenerator returns a generator of ManagementPolicyVersion_STATUSARM instances for property testing.
func ManagementPolicyVersionSTATUSARMGenerator() gopter.Gen {
	if managementPolicyVersionSTATUSARMGenerator != nil {
		return managementPolicyVersionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagementPolicyVersionSTATUSARM(generators)
	managementPolicyVersionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagementPolicyVersion_STATUSARM{}), generators)

	return managementPolicyVersionSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagementPolicyVersionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagementPolicyVersionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Delete"] = gen.PtrOf(DateAfterCreationSTATUSARMGenerator())
	gens["TierToArchive"] = gen.PtrOf(DateAfterCreationSTATUSARMGenerator())
	gens["TierToCool"] = gen.PtrOf(DateAfterCreationSTATUSARMGenerator())
}

func Test_TagFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TagFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTagFilterSTATUSARM, TagFilterSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTagFilterSTATUSARM runs a test to see if a specific instance of TagFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTagFilterSTATUSARM(subject TagFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TagFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TagFilter_STATUSARM instances for property testing - lazily instantiated by TagFilterSTATUSARMGenerator()
var tagFilterSTATUSARMGenerator gopter.Gen

// TagFilterSTATUSARMGenerator returns a generator of TagFilter_STATUSARM instances for property testing.
func TagFilterSTATUSARMGenerator() gopter.Gen {
	if tagFilterSTATUSARMGenerator != nil {
		return tagFilterSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTagFilterSTATUSARM(generators)
	tagFilterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(TagFilter_STATUSARM{}), generators)

	return tagFilterSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTagFilterSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTagFilterSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Op"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_DateAfterCreation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterCreation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterCreationSTATUSARM, DateAfterCreationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterCreationSTATUSARM runs a test to see if a specific instance of DateAfterCreation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterCreationSTATUSARM(subject DateAfterCreation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterCreation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterCreation_STATUSARM instances for property testing - lazily instantiated by
// DateAfterCreationSTATUSARMGenerator()
var dateAfterCreationSTATUSARMGenerator gopter.Gen

// DateAfterCreationSTATUSARMGenerator returns a generator of DateAfterCreation_STATUSARM instances for property testing.
func DateAfterCreationSTATUSARMGenerator() gopter.Gen {
	if dateAfterCreationSTATUSARMGenerator != nil {
		return dateAfterCreationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterCreationSTATUSARM(generators)
	dateAfterCreationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DateAfterCreation_STATUSARM{}), generators)

	return dateAfterCreationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterCreationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterCreationSTATUSARM(gens map[string]gopter.Gen) {
	gens["DaysAfterCreationGreaterThan"] = gen.PtrOf(gen.Float64())
}

func Test_DateAfterModification_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DateAfterModification_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDateAfterModificationSTATUSARM, DateAfterModificationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDateAfterModificationSTATUSARM runs a test to see if a specific instance of DateAfterModification_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDateAfterModificationSTATUSARM(subject DateAfterModification_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DateAfterModification_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DateAfterModification_STATUSARM instances for property testing - lazily instantiated by
// DateAfterModificationSTATUSARMGenerator()
var dateAfterModificationSTATUSARMGenerator gopter.Gen

// DateAfterModificationSTATUSARMGenerator returns a generator of DateAfterModification_STATUSARM instances for property testing.
func DateAfterModificationSTATUSARMGenerator() gopter.Gen {
	if dateAfterModificationSTATUSARMGenerator != nil {
		return dateAfterModificationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDateAfterModificationSTATUSARM(generators)
	dateAfterModificationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DateAfterModification_STATUSARM{}), generators)

	return dateAfterModificationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDateAfterModificationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDateAfterModificationSTATUSARM(gens map[string]gopter.Gen) {
	gens["DaysAfterLastAccessTimeGreaterThan"] = gen.PtrOf(gen.Float64())
	gens["DaysAfterModificationGreaterThan"] = gen.PtrOf(gen.Float64())
}
