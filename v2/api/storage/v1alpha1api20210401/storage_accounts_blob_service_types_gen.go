// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	alpha20210401s "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of StorageAccountsBlobService. Use v1beta20210401.StorageAccountsBlobService instead
type StorageAccountsBlobService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccountsBlobServices_Spec `json:"spec,omitempty"`
	Status            BlobServiceProperties_Status     `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsBlobService{}

// GetConditions returns the conditions of the resource
func (service *StorageAccountsBlobService) GetConditions() conditions.Conditions {
	return service.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (service *StorageAccountsBlobService) SetConditions(conditions conditions.Conditions) {
	service.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsBlobService{}

// ConvertFrom populates our StorageAccountsBlobService from the provided hub StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210401s.StorageAccountsBlobService

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = service.AssignPropertiesFromStorageAccountsBlobService(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to service")
	}

	return nil
}

// ConvertTo populates the provided hub StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210401s.StorageAccountsBlobService
	err := service.AssignPropertiesToStorageAccountsBlobService(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from service")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservice,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservices,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccountsblobservices.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &StorageAccountsBlobService{}

// Default applies defaults to the StorageAccountsBlobService resource
func (service *StorageAccountsBlobService) Default() {
	service.defaultImpl()
	var temp interface{} = service
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsBlobService resource
func (service *StorageAccountsBlobService) defaultImpl() {}

var _ genruntime.KubernetesResource = &StorageAccountsBlobService{}

// AzureName returns the Azure name of the resource (always "default")
func (service *StorageAccountsBlobService) AzureName() string {
	return "default"
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (service StorageAccountsBlobService) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (service *StorageAccountsBlobService) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (service *StorageAccountsBlobService) GetSpec() genruntime.ConvertibleSpec {
	return &service.Spec
}

// GetStatus returns the status of this resource
func (service *StorageAccountsBlobService) GetStatus() genruntime.ConvertibleStatus {
	return &service.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/blobServices"
func (service *StorageAccountsBlobService) GetType() string {
	return "Microsoft.Storage/storageAccounts/blobServices"
}

// NewEmptyStatus returns a new empty (blank) status
func (service *StorageAccountsBlobService) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BlobServiceProperties_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (service *StorageAccountsBlobService) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(service.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  service.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (service *StorageAccountsBlobService) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BlobServiceProperties_Status); ok {
		service.Status = *st
		return nil
	}

	// Convert status to required version
	var st BlobServiceProperties_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	service.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservice,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservices,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccountsblobservices.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &StorageAccountsBlobService{}

// ValidateCreate validates the creation of the resource
func (service *StorageAccountsBlobService) ValidateCreate() error {
	validations := service.createValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (service *StorageAccountsBlobService) ValidateDelete() error {
	validations := service.deleteValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (service *StorageAccountsBlobService) ValidateUpdate(old runtime.Object) error {
	validations := service.updateValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (service *StorageAccountsBlobService) createValidations() []func() error {
	return []func() error{service.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (service *StorageAccountsBlobService) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (service *StorageAccountsBlobService) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return service.validateResourceReferences()
		},
		service.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (service *StorageAccountsBlobService) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&service.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (service *StorageAccountsBlobService) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*StorageAccountsBlobService)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, service)
}

// AssignPropertiesFromStorageAccountsBlobService populates our StorageAccountsBlobService from the provided source StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignPropertiesFromStorageAccountsBlobService(source *alpha20210401s.StorageAccountsBlobService) error {

	// ObjectMeta
	service.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccountsBlobServices_Spec
	err := spec.AssignPropertiesFromStorageAccountsBlobServicesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsBlobServicesSpec() to populate field Spec")
	}
	service.Spec = spec

	// Status
	var status BlobServiceProperties_Status
	err = status.AssignPropertiesFromBlobServicePropertiesStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBlobServicePropertiesStatus() to populate field Status")
	}
	service.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobService populates the provided destination StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignPropertiesToStorageAccountsBlobService(destination *alpha20210401s.StorageAccountsBlobService) error {

	// ObjectMeta
	destination.ObjectMeta = *service.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210401s.StorageAccountsBlobServices_Spec
	err := service.Spec.AssignPropertiesToStorageAccountsBlobServicesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsBlobServicesSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210401s.BlobServiceProperties_Status
	err = service.Status.AssignPropertiesToBlobServicePropertiesStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBlobServicePropertiesStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (service *StorageAccountsBlobService) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: service.Spec.OriginalVersion(),
		Kind:    "StorageAccountsBlobService",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of StorageAccountsBlobService. Use v1beta20210401.StorageAccountsBlobService instead
type StorageAccountsBlobServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsBlobService `json:"items"`
}

// Deprecated version of BlobServiceProperties_Status. Use v1beta20210401.BlobServiceProperties_Status instead
type BlobServiceProperties_Status struct {
	AutomaticSnapshotPolicyEnabled *bool              `json:"automaticSnapshotPolicyEnabled,omitempty"`
	ChangeFeed                     *ChangeFeed_Status `json:"changeFeed,omitempty"`

	// Conditions: The observed state of the resource
	Conditions                     []conditions.Condition               `json:"conditions,omitempty"`
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy_Status        `json:"containerDeleteRetentionPolicy,omitempty"`
	Cors                           *CorsRules_Status                    `json:"cors,omitempty"`
	DefaultServiceVersion          *string                              `json:"defaultServiceVersion,omitempty"`
	DeleteRetentionPolicy          *DeleteRetentionPolicy_Status        `json:"deleteRetentionPolicy,omitempty"`
	Id                             *string                              `json:"id,omitempty"`
	IsVersioningEnabled            *bool                                `json:"isVersioningEnabled,omitempty"`
	LastAccessTimeTrackingPolicy   *LastAccessTimeTrackingPolicy_Status `json:"lastAccessTimeTrackingPolicy,omitempty"`
	Name                           *string                              `json:"name,omitempty"`
	RestorePolicy                  *RestorePolicyProperties_Status      `json:"restorePolicy,omitempty"`
	Sku                            *Sku_Status                          `json:"sku,omitempty"`
	Type                           *string                              `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BlobServiceProperties_Status{}

// ConvertStatusFrom populates our BlobServiceProperties_Status from the provided source
func (properties *BlobServiceProperties_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210401s.BlobServiceProperties_Status)
	if ok {
		// Populate our instance from source
		return properties.AssignPropertiesFromBlobServicePropertiesStatus(src)
	}

	// Convert to an intermediate form
	src = &alpha20210401s.BlobServiceProperties_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = properties.AssignPropertiesFromBlobServicePropertiesStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BlobServiceProperties_Status
func (properties *BlobServiceProperties_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210401s.BlobServiceProperties_Status)
	if ok {
		// Populate destination from our instance
		return properties.AssignPropertiesToBlobServicePropertiesStatus(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210401s.BlobServiceProperties_Status{}
	err := properties.AssignPropertiesToBlobServicePropertiesStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &BlobServiceProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *BlobServiceProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobServiceProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *BlobServiceProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobServiceProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobServiceProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘AutomaticSnapshotPolicyEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutomaticSnapshotPolicyEnabled != nil {
			automaticSnapshotPolicyEnabled := *typedInput.Properties.AutomaticSnapshotPolicyEnabled
			properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
		}
	}

	// Set property ‘ChangeFeed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ChangeFeed != nil {
			var changeFeed1 ChangeFeed_Status
			err := changeFeed1.PopulateFromARM(owner, *typedInput.Properties.ChangeFeed)
			if err != nil {
				return err
			}
			changeFeed := changeFeed1
			properties.ChangeFeed = &changeFeed
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ContainerDeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContainerDeleteRetentionPolicy != nil {
			var containerDeleteRetentionPolicy1 DeleteRetentionPolicy_Status
			err := containerDeleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.ContainerDeleteRetentionPolicy)
			if err != nil {
				return err
			}
			containerDeleteRetentionPolicy := containerDeleteRetentionPolicy1
			properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 CorsRules_Status
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			properties.Cors = &cors
		}
	}

	// Set property ‘DefaultServiceVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultServiceVersion != nil {
			defaultServiceVersion := *typedInput.Properties.DefaultServiceVersion
			properties.DefaultServiceVersion = &defaultServiceVersion
		}
	}

	// Set property ‘DeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeleteRetentionPolicy != nil {
			var deleteRetentionPolicy1 DeleteRetentionPolicy_Status
			err := deleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeleteRetentionPolicy)
			if err != nil {
				return err
			}
			deleteRetentionPolicy := deleteRetentionPolicy1
			properties.DeleteRetentionPolicy = &deleteRetentionPolicy
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		properties.Id = &id
	}

	// Set property ‘IsVersioningEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVersioningEnabled != nil {
			isVersioningEnabled := *typedInput.Properties.IsVersioningEnabled
			properties.IsVersioningEnabled = &isVersioningEnabled
		}
	}

	// Set property ‘LastAccessTimeTrackingPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastAccessTimeTrackingPolicy != nil {
			var lastAccessTimeTrackingPolicy1 LastAccessTimeTrackingPolicy_Status
			err := lastAccessTimeTrackingPolicy1.PopulateFromARM(owner, *typedInput.Properties.LastAccessTimeTrackingPolicy)
			if err != nil {
				return err
			}
			lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicy1
			properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		properties.Name = &name
	}

	// Set property ‘RestorePolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePolicy != nil {
			var restorePolicy1 RestorePolicyProperties_Status
			err := restorePolicy1.PopulateFromARM(owner, *typedInput.Properties.RestorePolicy)
			if err != nil {
				return err
			}
			restorePolicy := restorePolicy1
			properties.RestorePolicy = &restorePolicy
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		properties.Sku = &sku
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		properties.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobServicePropertiesStatus populates our BlobServiceProperties_Status from the provided source BlobServiceProperties_Status
func (properties *BlobServiceProperties_Status) AssignPropertiesFromBlobServicePropertiesStatus(source *alpha20210401s.BlobServiceProperties_Status) error {

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		properties.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed_Status
		err := changeFeed.AssignPropertiesFromChangeFeedStatus(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromChangeFeedStatus() to populate field ChangeFeed")
		}
		properties.ChangeFeed = &changeFeed
	} else {
		properties.ChangeFeed = nil
	}

	// Conditions
	properties.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy_Status
		err := containerDeleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicyStatus(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicyStatus() to populate field ContainerDeleteRetentionPolicy")
		}
		properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		properties.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules_Status
		err := cor.AssignPropertiesFromCorsRulesStatus(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCorsRulesStatus() to populate field Cors")
		}
		properties.Cors = &cor
	} else {
		properties.Cors = nil
	}

	// DefaultServiceVersion
	properties.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy_Status
		err := deleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicyStatus(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicyStatus() to populate field DeleteRetentionPolicy")
		}
		properties.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		properties.DeleteRetentionPolicy = nil
	}

	// Id
	properties.Id = genruntime.ClonePointerToString(source.Id)

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		properties.IsVersioningEnabled = &isVersioningEnabled
	} else {
		properties.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy_Status
		err := lastAccessTimeTrackingPolicy.AssignPropertiesFromLastAccessTimeTrackingPolicyStatus(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLastAccessTimeTrackingPolicyStatus() to populate field LastAccessTimeTrackingPolicy")
		}
		properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		properties.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	properties.Name = genruntime.ClonePointerToString(source.Name)

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties_Status
		err := restorePolicy.AssignPropertiesFromRestorePolicyPropertiesStatus(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRestorePolicyPropertiesStatus() to populate field RestorePolicy")
		}
		properties.RestorePolicy = &restorePolicy
	} else {
		properties.RestorePolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuStatus() to populate field Sku")
		}
		properties.Sku = &sku
	} else {
		properties.Sku = nil
	}

	// Type
	properties.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToBlobServicePropertiesStatus populates the provided destination BlobServiceProperties_Status from our BlobServiceProperties_Status
func (properties *BlobServiceProperties_Status) AssignPropertiesToBlobServicePropertiesStatus(destination *alpha20210401s.BlobServiceProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutomaticSnapshotPolicyEnabled
	if properties.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *properties.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if properties.ChangeFeed != nil {
		var changeFeed alpha20210401s.ChangeFeed_Status
		err := properties.ChangeFeed.AssignPropertiesToChangeFeedStatus(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToChangeFeedStatus() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(properties.Conditions)

	// ContainerDeleteRetentionPolicy
	if properties.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy alpha20210401s.DeleteRetentionPolicy_Status
		err := properties.ContainerDeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicyStatus(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicyStatus() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if properties.Cors != nil {
		var cor alpha20210401s.CorsRules_Status
		err := properties.Cors.AssignPropertiesToCorsRulesStatus(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCorsRulesStatus() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(properties.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if properties.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy alpha20210401s.DeleteRetentionPolicy_Status
		err := properties.DeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicyStatus(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicyStatus() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(properties.Id)

	// IsVersioningEnabled
	if properties.IsVersioningEnabled != nil {
		isVersioningEnabled := *properties.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if properties.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy alpha20210401s.LastAccessTimeTrackingPolicy_Status
		err := properties.LastAccessTimeTrackingPolicy.AssignPropertiesToLastAccessTimeTrackingPolicyStatus(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLastAccessTimeTrackingPolicyStatus() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(properties.Name)

	// RestorePolicy
	if properties.RestorePolicy != nil {
		var restorePolicy alpha20210401s.RestorePolicyProperties_Status
		err := properties.RestorePolicy.AssignPropertiesToRestorePolicyPropertiesStatus(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRestorePolicyPropertiesStatus() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Sku
	if properties.Sku != nil {
		var sku alpha20210401s.Sku_Status
		err := properties.Sku.AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(properties.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountsBlobServices_Spec struct {
	AutomaticSnapshotPolicyEnabled *bool                         `json:"automaticSnapshotPolicyEnabled,omitempty"`
	ChangeFeed                     *ChangeFeed                   `json:"changeFeed,omitempty"`
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy        `json:"containerDeleteRetentionPolicy,omitempty"`
	Cors                           *CorsRules                    `json:"cors,omitempty"`
	DefaultServiceVersion          *string                       `json:"defaultServiceVersion,omitempty"`
	DeleteRetentionPolicy          *DeleteRetentionPolicy        `json:"deleteRetentionPolicy,omitempty"`
	IsVersioningEnabled            *bool                         `json:"isVersioningEnabled,omitempty"`
	LastAccessTimeTrackingPolicy   *LastAccessTimeTrackingPolicy `json:"lastAccessTimeTrackingPolicy,omitempty"`
	Location                       *string                       `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a storage.azure.com/StorageAccount resource
	Owner         *genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner,omitempty" kind:"StorageAccount"`
	RestorePolicy *RestorePolicyProperties           `json:"restorePolicy,omitempty"`
	Tags          map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccountsBlobServices_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (services *StorageAccountsBlobServices_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if services == nil {
		return nil, nil
	}
	result := &StorageAccountsBlobServices_SpecARM{}

	// Set property ‘Location’:
	if services.Location != nil {
		location := *services.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if services.AutomaticSnapshotPolicyEnabled != nil ||
		services.ChangeFeed != nil ||
		services.ContainerDeleteRetentionPolicy != nil ||
		services.Cors != nil ||
		services.DefaultServiceVersion != nil ||
		services.DeleteRetentionPolicy != nil ||
		services.IsVersioningEnabled != nil ||
		services.LastAccessTimeTrackingPolicy != nil ||
		services.RestorePolicy != nil {
		result.Properties = &BlobServicePropertiesPropertiesARM{}
	}
	if services.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *services.AutomaticSnapshotPolicyEnabled
		result.Properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	}
	if services.ChangeFeed != nil {
		changeFeedARM, err := (*services.ChangeFeed).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		changeFeed := *changeFeedARM.(*ChangeFeedARM)
		result.Properties.ChangeFeed = &changeFeed
	}
	if services.ContainerDeleteRetentionPolicy != nil {
		containerDeleteRetentionPolicyARM, err := (*services.ContainerDeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		containerDeleteRetentionPolicy := *containerDeleteRetentionPolicyARM.(*DeleteRetentionPolicyARM)
		result.Properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	}
	if services.Cors != nil {
		corsARM, err := (*services.Cors).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cors := *corsARM.(*CorsRulesARM)
		result.Properties.Cors = &cors
	}
	if services.DefaultServiceVersion != nil {
		defaultServiceVersion := *services.DefaultServiceVersion
		result.Properties.DefaultServiceVersion = &defaultServiceVersion
	}
	if services.DeleteRetentionPolicy != nil {
		deleteRetentionPolicyARM, err := (*services.DeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deleteRetentionPolicy := *deleteRetentionPolicyARM.(*DeleteRetentionPolicyARM)
		result.Properties.DeleteRetentionPolicy = &deleteRetentionPolicy
	}
	if services.IsVersioningEnabled != nil {
		isVersioningEnabled := *services.IsVersioningEnabled
		result.Properties.IsVersioningEnabled = &isVersioningEnabled
	}
	if services.LastAccessTimeTrackingPolicy != nil {
		lastAccessTimeTrackingPolicyARM, err := (*services.LastAccessTimeTrackingPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		lastAccessTimeTrackingPolicy := *lastAccessTimeTrackingPolicyARM.(*LastAccessTimeTrackingPolicyARM)
		result.Properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	}
	if services.RestorePolicy != nil {
		restorePolicyARM, err := (*services.RestorePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		restorePolicy := *restorePolicyARM.(*RestorePolicyPropertiesARM)
		result.Properties.RestorePolicy = &restorePolicy
	}

	// Set property ‘Tags’:
	if services.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range services.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (services *StorageAccountsBlobServices_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsBlobServices_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (services *StorageAccountsBlobServices_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsBlobServices_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsBlobServices_SpecARM, got %T", armInput)
	}

	// Set property ‘AutomaticSnapshotPolicyEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutomaticSnapshotPolicyEnabled != nil {
			automaticSnapshotPolicyEnabled := *typedInput.Properties.AutomaticSnapshotPolicyEnabled
			services.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
		}
	}

	// Set property ‘ChangeFeed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ChangeFeed != nil {
			var changeFeed1 ChangeFeed
			err := changeFeed1.PopulateFromARM(owner, *typedInput.Properties.ChangeFeed)
			if err != nil {
				return err
			}
			changeFeed := changeFeed1
			services.ChangeFeed = &changeFeed
		}
	}

	// Set property ‘ContainerDeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContainerDeleteRetentionPolicy != nil {
			var containerDeleteRetentionPolicy1 DeleteRetentionPolicy
			err := containerDeleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.ContainerDeleteRetentionPolicy)
			if err != nil {
				return err
			}
			containerDeleteRetentionPolicy := containerDeleteRetentionPolicy1
			services.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 CorsRules
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			services.Cors = &cors
		}
	}

	// Set property ‘DefaultServiceVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultServiceVersion != nil {
			defaultServiceVersion := *typedInput.Properties.DefaultServiceVersion
			services.DefaultServiceVersion = &defaultServiceVersion
		}
	}

	// Set property ‘DeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeleteRetentionPolicy != nil {
			var deleteRetentionPolicy1 DeleteRetentionPolicy
			err := deleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeleteRetentionPolicy)
			if err != nil {
				return err
			}
			deleteRetentionPolicy := deleteRetentionPolicy1
			services.DeleteRetentionPolicy = &deleteRetentionPolicy
		}
	}

	// Set property ‘IsVersioningEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVersioningEnabled != nil {
			isVersioningEnabled := *typedInput.Properties.IsVersioningEnabled
			services.IsVersioningEnabled = &isVersioningEnabled
		}
	}

	// Set property ‘LastAccessTimeTrackingPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastAccessTimeTrackingPolicy != nil {
			var lastAccessTimeTrackingPolicy1 LastAccessTimeTrackingPolicy
			err := lastAccessTimeTrackingPolicy1.PopulateFromARM(owner, *typedInput.Properties.LastAccessTimeTrackingPolicy)
			if err != nil {
				return err
			}
			lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicy1
			services.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		services.Location = &location
	}

	// Set property ‘Owner’:
	services.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RestorePolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePolicy != nil {
			var restorePolicy1 RestorePolicyProperties
			err := restorePolicy1.PopulateFromARM(owner, *typedInput.Properties.RestorePolicy)
			if err != nil {
				return err
			}
			restorePolicy := restorePolicy1
			services.RestorePolicy = &restorePolicy
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		services.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			services.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccountsBlobServices_Spec{}

// ConvertSpecFrom populates our StorageAccountsBlobServices_Spec from the provided source
func (services *StorageAccountsBlobServices_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210401s.StorageAccountsBlobServices_Spec)
	if ok {
		// Populate our instance from source
		return services.AssignPropertiesFromStorageAccountsBlobServicesSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210401s.StorageAccountsBlobServices_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = services.AssignPropertiesFromStorageAccountsBlobServicesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccountsBlobServices_Spec
func (services *StorageAccountsBlobServices_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210401s.StorageAccountsBlobServices_Spec)
	if ok {
		// Populate destination from our instance
		return services.AssignPropertiesToStorageAccountsBlobServicesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210401s.StorageAccountsBlobServices_Spec{}
	err := services.AssignPropertiesToStorageAccountsBlobServicesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsBlobServicesSpec populates our StorageAccountsBlobServices_Spec from the provided source StorageAccountsBlobServices_Spec
func (services *StorageAccountsBlobServices_Spec) AssignPropertiesFromStorageAccountsBlobServicesSpec(source *alpha20210401s.StorageAccountsBlobServices_Spec) error {

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		services.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		services.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed
		err := changeFeed.AssignPropertiesFromChangeFeed(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromChangeFeed() to populate field ChangeFeed")
		}
		services.ChangeFeed = &changeFeed
	} else {
		services.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy
		err := containerDeleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		services.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		services.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules
		err := cor.AssignPropertiesFromCorsRules(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCorsRules() to populate field Cors")
		}
		services.Cors = &cor
	} else {
		services.Cors = nil
	}

	// DefaultServiceVersion
	services.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy
		err := deleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		services.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		services.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		services.IsVersioningEnabled = &isVersioningEnabled
	} else {
		services.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy
		err := lastAccessTimeTrackingPolicy.AssignPropertiesFromLastAccessTimeTrackingPolicy(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		services.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		services.LastAccessTimeTrackingPolicy = nil
	}

	// Location
	services.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		services.Owner = &owner
	} else {
		services.Owner = nil
	}

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties
		err := restorePolicy.AssignPropertiesFromRestorePolicyProperties(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRestorePolicyProperties() to populate field RestorePolicy")
		}
		services.RestorePolicy = &restorePolicy
	} else {
		services.RestorePolicy = nil
	}

	// Tags
	services.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobServicesSpec populates the provided destination StorageAccountsBlobServices_Spec from our StorageAccountsBlobServices_Spec
func (services *StorageAccountsBlobServices_Spec) AssignPropertiesToStorageAccountsBlobServicesSpec(destination *alpha20210401s.StorageAccountsBlobServices_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutomaticSnapshotPolicyEnabled
	if services.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *services.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if services.ChangeFeed != nil {
		var changeFeed alpha20210401s.ChangeFeed
		err := services.ChangeFeed.AssignPropertiesToChangeFeed(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToChangeFeed() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if services.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy alpha20210401s.DeleteRetentionPolicy
		err := services.ContainerDeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if services.Cors != nil {
		var cor alpha20210401s.CorsRules
		err := services.Cors.AssignPropertiesToCorsRules(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCorsRules() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(services.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if services.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy alpha20210401s.DeleteRetentionPolicy
		err := services.DeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if services.IsVersioningEnabled != nil {
		isVersioningEnabled := *services.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if services.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy alpha20210401s.LastAccessTimeTrackingPolicy
		err := services.LastAccessTimeTrackingPolicy.AssignPropertiesToLastAccessTimeTrackingPolicy(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLastAccessTimeTrackingPolicy() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(services.Location)

	// OriginalVersion
	destination.OriginalVersion = services.OriginalVersion()

	// Owner
	if services.Owner != nil {
		owner := services.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RestorePolicy
	if services.RestorePolicy != nil {
		var restorePolicy alpha20210401s.RestorePolicyProperties
		err := services.RestorePolicy.AssignPropertiesToRestorePolicyProperties(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRestorePolicyProperties() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(services.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (services *StorageAccountsBlobServices_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// Deprecated version of ChangeFeed. Use v1beta20210401.ChangeFeed instead
type ChangeFeed struct {
	Enabled *bool `json:"enabled,omitempty"`

	// +kubebuilder:validation:Maximum=146000
	// +kubebuilder:validation:Minimum=1
	RetentionInDays *int `json:"retentionInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &ChangeFeed{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (feed *ChangeFeed) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if feed == nil {
		return nil, nil
	}
	result := &ChangeFeedARM{}

	// Set property ‘Enabled’:
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if feed.RetentionInDays != nil {
		retentionInDays := *feed.RetentionInDays
		result.RetentionInDays = &retentionInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feed *ChangeFeed) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ChangeFeedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feed *ChangeFeed) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ChangeFeedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ChangeFeedARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		feed.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if typedInput.RetentionInDays != nil {
		retentionInDays := *typedInput.RetentionInDays
		feed.RetentionInDays = &retentionInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromChangeFeed populates our ChangeFeed from the provided source ChangeFeed
func (feed *ChangeFeed) AssignPropertiesFromChangeFeed(source *alpha20210401s.ChangeFeed) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	if source.RetentionInDays != nil {
		retentionInDay := *source.RetentionInDays
		feed.RetentionInDays = &retentionInDay
	} else {
		feed.RetentionInDays = nil
	}

	// No error
	return nil
}

// AssignPropertiesToChangeFeed populates the provided destination ChangeFeed from our ChangeFeed
func (feed *ChangeFeed) AssignPropertiesToChangeFeed(destination *alpha20210401s.ChangeFeed) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	if feed.RetentionInDays != nil {
		retentionInDay := *feed.RetentionInDays
		destination.RetentionInDays = &retentionInDay
	} else {
		destination.RetentionInDays = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ChangeFeed_Status. Use v1beta20210401.ChangeFeed_Status instead
type ChangeFeed_Status struct {
	Enabled         *bool `json:"enabled,omitempty"`
	RetentionInDays *int  `json:"retentionInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &ChangeFeed_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feed *ChangeFeed_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ChangeFeed_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feed *ChangeFeed_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ChangeFeed_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ChangeFeed_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		feed.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if typedInput.RetentionInDays != nil {
		retentionInDays := *typedInput.RetentionInDays
		feed.RetentionInDays = &retentionInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromChangeFeedStatus populates our ChangeFeed_Status from the provided source ChangeFeed_Status
func (feed *ChangeFeed_Status) AssignPropertiesFromChangeFeedStatus(source *alpha20210401s.ChangeFeed_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	feed.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// No error
	return nil
}

// AssignPropertiesToChangeFeedStatus populates the provided destination ChangeFeed_Status from our ChangeFeed_Status
func (feed *ChangeFeed_Status) AssignPropertiesToChangeFeedStatus(destination *alpha20210401s.ChangeFeed_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(feed.RetentionInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CorsRules. Use v1beta20210401.CorsRules instead
type CorsRules struct {
	CorsRules []CorsRule `json:"corsRules,omitempty"`
}

var _ genruntime.ARMTransformer = &CorsRules{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rules *CorsRules) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rules == nil {
		return nil, nil
	}
	result := &CorsRulesARM{}

	// Set property ‘CorsRules’:
	for _, item := range rules.CorsRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.CorsRules = append(result.CorsRules, *itemARM.(*CorsRuleARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *CorsRules) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRulesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *CorsRules) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRulesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRulesARM, got %T", armInput)
	}

	// Set property ‘CorsRules’:
	for _, item := range typedInput.CorsRules {
		var item1 CorsRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rules.CorsRules = append(rules.CorsRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsRules populates our CorsRules from the provided source CorsRules
func (rules *CorsRules) AssignPropertiesFromCorsRules(source *alpha20210401s.CorsRules) error {

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule
			err := corsRule.AssignPropertiesFromCorsRule(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCorsRule() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCorsRules populates the provided destination CorsRules from our CorsRules
func (rules *CorsRules) AssignPropertiesToCorsRules(destination *alpha20210401s.CorsRules) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]alpha20210401s.CorsRule, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule alpha20210401s.CorsRule
			err := corsRuleItem.AssignPropertiesToCorsRule(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCorsRule() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CorsRules_Status. Use v1beta20210401.CorsRules_Status instead
type CorsRules_Status struct {
	CorsRules []CorsRule_Status `json:"corsRules,omitempty"`
}

var _ genruntime.FromARMConverter = &CorsRules_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *CorsRules_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRules_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *CorsRules_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRules_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRules_StatusARM, got %T", armInput)
	}

	// Set property ‘CorsRules’:
	for _, item := range typedInput.CorsRules {
		var item1 CorsRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rules.CorsRules = append(rules.CorsRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsRulesStatus populates our CorsRules_Status from the provided source CorsRules_Status
func (rules *CorsRules_Status) AssignPropertiesFromCorsRulesStatus(source *alpha20210401s.CorsRules_Status) error {

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule_Status, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule_Status
			err := corsRule.AssignPropertiesFromCorsRuleStatus(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCorsRuleStatus() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCorsRulesStatus populates the provided destination CorsRules_Status from our CorsRules_Status
func (rules *CorsRules_Status) AssignPropertiesToCorsRulesStatus(destination *alpha20210401s.CorsRules_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]alpha20210401s.CorsRule_Status, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule alpha20210401s.CorsRule_Status
			err := corsRuleItem.AssignPropertiesToCorsRuleStatus(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCorsRuleStatus() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DeleteRetentionPolicy. Use v1beta20210401.DeleteRetentionPolicy instead
type DeleteRetentionPolicy struct {
	// +kubebuilder:validation:Maximum=365
	// +kubebuilder:validation:Minimum=1
	Days    *int  `json:"days,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.ARMTransformer = &DeleteRetentionPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *DeleteRetentionPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &DeleteRetentionPolicyARM{}

	// Set property ‘Days’:
	if policy.Days != nil {
		days := *policy.Days
		result.Days = &days
	}

	// Set property ‘Enabled’:
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		result.Enabled = &enabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *DeleteRetentionPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeleteRetentionPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *DeleteRetentionPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeleteRetentionPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeleteRetentionPolicyARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		policy.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignPropertiesFromDeleteRetentionPolicy populates our DeleteRetentionPolicy from the provided source DeleteRetentionPolicy
func (policy *DeleteRetentionPolicy) AssignPropertiesFromDeleteRetentionPolicy(source *alpha20210401s.DeleteRetentionPolicy) error {

	// Days
	if source.Days != nil {
		day := *source.Days
		policy.Days = &day
	} else {
		policy.Days = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDeleteRetentionPolicy populates the provided destination DeleteRetentionPolicy from our DeleteRetentionPolicy
func (policy *DeleteRetentionPolicy) AssignPropertiesToDeleteRetentionPolicy(destination *alpha20210401s.DeleteRetentionPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	if policy.Days != nil {
		day := *policy.Days
		destination.Days = &day
	} else {
		destination.Days = nil
	}

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DeleteRetentionPolicy_Status. Use v1beta20210401.DeleteRetentionPolicy_Status instead
type DeleteRetentionPolicy_Status struct {
	Days    *int  `json:"days,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.FromARMConverter = &DeleteRetentionPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *DeleteRetentionPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeleteRetentionPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *DeleteRetentionPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeleteRetentionPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeleteRetentionPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		policy.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignPropertiesFromDeleteRetentionPolicyStatus populates our DeleteRetentionPolicy_Status from the provided source DeleteRetentionPolicy_Status
func (policy *DeleteRetentionPolicy_Status) AssignPropertiesFromDeleteRetentionPolicyStatus(source *alpha20210401s.DeleteRetentionPolicy_Status) error {

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDeleteRetentionPolicyStatus populates the provided destination DeleteRetentionPolicy_Status from our DeleteRetentionPolicy_Status
func (policy *DeleteRetentionPolicy_Status) AssignPropertiesToDeleteRetentionPolicyStatus(destination *alpha20210401s.DeleteRetentionPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of LastAccessTimeTrackingPolicy. Use v1beta20210401.LastAccessTimeTrackingPolicy instead
type LastAccessTimeTrackingPolicy struct {
	BlobType []string `json:"blobType,omitempty"`

	// +kubebuilder:validation:Required
	Enable                    *bool                             `json:"enable,omitempty"`
	Name                      *LastAccessTimeTrackingPolicyName `json:"name,omitempty"`
	TrackingGranularityInDays *int                              `json:"trackingGranularityInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &LastAccessTimeTrackingPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *LastAccessTimeTrackingPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &LastAccessTimeTrackingPolicyARM{}

	// Set property ‘BlobType’:
	for _, item := range policy.BlobType {
		result.BlobType = append(result.BlobType, item)
	}

	// Set property ‘Enable’:
	if policy.Enable != nil {
		enable := *policy.Enable
		result.Enable = &enable
	}

	// Set property ‘Name’:
	if policy.Name != nil {
		name := *policy.Name
		result.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if policy.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *policy.TrackingGranularityInDays
		result.TrackingGranularityInDays = &trackingGranularityInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *LastAccessTimeTrackingPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LastAccessTimeTrackingPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *LastAccessTimeTrackingPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LastAccessTimeTrackingPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LastAccessTimeTrackingPolicyARM, got %T", armInput)
	}

	// Set property ‘BlobType’:
	for _, item := range typedInput.BlobType {
		policy.BlobType = append(policy.BlobType, item)
	}

	// Set property ‘Enable’:
	if typedInput.Enable != nil {
		enable := *typedInput.Enable
		policy.Enable = &enable
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if typedInput.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *typedInput.TrackingGranularityInDays
		policy.TrackingGranularityInDays = &trackingGranularityInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromLastAccessTimeTrackingPolicy populates our LastAccessTimeTrackingPolicy from the provided source LastAccessTimeTrackingPolicy
func (policy *LastAccessTimeTrackingPolicy) AssignPropertiesFromLastAccessTimeTrackingPolicy(source *alpha20210401s.LastAccessTimeTrackingPolicy) error {

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		enable := *source.Enable
		policy.Enable = &enable
	} else {
		policy.Enable = nil
	}

	// Name
	if source.Name != nil {
		name := LastAccessTimeTrackingPolicyName(*source.Name)
		policy.Name = &name
	} else {
		policy.Name = nil
	}

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// No error
	return nil
}

// AssignPropertiesToLastAccessTimeTrackingPolicy populates the provided destination LastAccessTimeTrackingPolicy from our LastAccessTimeTrackingPolicy
func (policy *LastAccessTimeTrackingPolicy) AssignPropertiesToLastAccessTimeTrackingPolicy(destination *alpha20210401s.LastAccessTimeTrackingPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	if policy.Enable != nil {
		enable := *policy.Enable
		destination.Enable = &enable
	} else {
		destination.Enable = nil
	}

	// Name
	if policy.Name != nil {
		name := string(*policy.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of LastAccessTimeTrackingPolicy_Status. Use v1beta20210401.LastAccessTimeTrackingPolicy_Status instead
type LastAccessTimeTrackingPolicy_Status struct {
	BlobType                  []string                                `json:"blobType,omitempty"`
	Enable                    *bool                                   `json:"enable,omitempty"`
	Name                      *LastAccessTimeTrackingPolicyStatusName `json:"name,omitempty"`
	TrackingGranularityInDays *int                                    `json:"trackingGranularityInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &LastAccessTimeTrackingPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *LastAccessTimeTrackingPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LastAccessTimeTrackingPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *LastAccessTimeTrackingPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LastAccessTimeTrackingPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LastAccessTimeTrackingPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘BlobType’:
	for _, item := range typedInput.BlobType {
		policy.BlobType = append(policy.BlobType, item)
	}

	// Set property ‘Enable’:
	if typedInput.Enable != nil {
		enable := *typedInput.Enable
		policy.Enable = &enable
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if typedInput.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *typedInput.TrackingGranularityInDays
		policy.TrackingGranularityInDays = &trackingGranularityInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromLastAccessTimeTrackingPolicyStatus populates our LastAccessTimeTrackingPolicy_Status from the provided source LastAccessTimeTrackingPolicy_Status
func (policy *LastAccessTimeTrackingPolicy_Status) AssignPropertiesFromLastAccessTimeTrackingPolicyStatus(source *alpha20210401s.LastAccessTimeTrackingPolicy_Status) error {

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		enable := *source.Enable
		policy.Enable = &enable
	} else {
		policy.Enable = nil
	}

	// Name
	if source.Name != nil {
		name := LastAccessTimeTrackingPolicyStatusName(*source.Name)
		policy.Name = &name
	} else {
		policy.Name = nil
	}

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// No error
	return nil
}

// AssignPropertiesToLastAccessTimeTrackingPolicyStatus populates the provided destination LastAccessTimeTrackingPolicy_Status from our LastAccessTimeTrackingPolicy_Status
func (policy *LastAccessTimeTrackingPolicy_Status) AssignPropertiesToLastAccessTimeTrackingPolicyStatus(destination *alpha20210401s.LastAccessTimeTrackingPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	if policy.Enable != nil {
		enable := *policy.Enable
		destination.Enable = &enable
	} else {
		destination.Enable = nil
	}

	// Name
	if policy.Name != nil {
		name := string(*policy.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RestorePolicyProperties. Use v1beta20210401.RestorePolicyProperties instead
type RestorePolicyProperties struct {
	// +kubebuilder:validation:Maximum=365
	// +kubebuilder:validation:Minimum=1
	Days *int `json:"days,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.ARMTransformer = &RestorePolicyProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *RestorePolicyProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &RestorePolicyPropertiesARM{}

	// Set property ‘Days’:
	if properties.Days != nil {
		days := *properties.Days
		result.Days = &days
	}

	// Set property ‘Enabled’:
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		result.Enabled = &enabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *RestorePolicyProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RestorePolicyPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *RestorePolicyProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RestorePolicyPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RestorePolicyPropertiesARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		properties.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		properties.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignPropertiesFromRestorePolicyProperties populates our RestorePolicyProperties from the provided source RestorePolicyProperties
func (properties *RestorePolicyProperties) AssignPropertiesFromRestorePolicyProperties(source *alpha20210401s.RestorePolicyProperties) error {

	// Days
	if source.Days != nil {
		day := *source.Days
		properties.Days = &day
	} else {
		properties.Days = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		properties.Enabled = &enabled
	} else {
		properties.Enabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRestorePolicyProperties populates the provided destination RestorePolicyProperties from our RestorePolicyProperties
func (properties *RestorePolicyProperties) AssignPropertiesToRestorePolicyProperties(destination *alpha20210401s.RestorePolicyProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	if properties.Days != nil {
		day := *properties.Days
		destination.Days = &day
	} else {
		destination.Days = nil
	}

	// Enabled
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RestorePolicyProperties_Status. Use v1beta20210401.RestorePolicyProperties_Status instead
type RestorePolicyProperties_Status struct {
	Days            *int    `json:"days,omitempty"`
	Enabled         *bool   `json:"enabled,omitempty"`
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`
	MinRestoreTime  *string `json:"minRestoreTime,omitempty"`
}

var _ genruntime.FromARMConverter = &RestorePolicyProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *RestorePolicyProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RestorePolicyProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *RestorePolicyProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RestorePolicyProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RestorePolicyProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		properties.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		properties.Enabled = &enabled
	}

	// Set property ‘LastEnabledTime’:
	if typedInput.LastEnabledTime != nil {
		lastEnabledTime := *typedInput.LastEnabledTime
		properties.LastEnabledTime = &lastEnabledTime
	}

	// Set property ‘MinRestoreTime’:
	if typedInput.MinRestoreTime != nil {
		minRestoreTime := *typedInput.MinRestoreTime
		properties.MinRestoreTime = &minRestoreTime
	}

	// No error
	return nil
}

// AssignPropertiesFromRestorePolicyPropertiesStatus populates our RestorePolicyProperties_Status from the provided source RestorePolicyProperties_Status
func (properties *RestorePolicyProperties_Status) AssignPropertiesFromRestorePolicyPropertiesStatus(source *alpha20210401s.RestorePolicyProperties_Status) error {

	// Days
	properties.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		properties.Enabled = &enabled
	} else {
		properties.Enabled = nil
	}

	// LastEnabledTime
	properties.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// MinRestoreTime
	properties.MinRestoreTime = genruntime.ClonePointerToString(source.MinRestoreTime)

	// No error
	return nil
}

// AssignPropertiesToRestorePolicyPropertiesStatus populates the provided destination RestorePolicyProperties_Status from our RestorePolicyProperties_Status
func (properties *RestorePolicyProperties_Status) AssignPropertiesToRestorePolicyPropertiesStatus(destination *alpha20210401s.RestorePolicyProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(properties.Days)

	// Enabled
	if properties.Enabled != nil {
		enabled := *properties.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(properties.LastEnabledTime)

	// MinRestoreTime
	destination.MinRestoreTime = genruntime.ClonePointerToString(properties.MinRestoreTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CorsRule. Use v1beta20210401.CorsRule instead
type CorsRule struct {
	// +kubebuilder:validation:Required
	AllowedHeaders []string `json:"allowedHeaders,omitempty"`

	// +kubebuilder:validation:Required
	AllowedMethods []CorsRuleAllowedMethods `json:"allowedMethods,omitempty"`

	// +kubebuilder:validation:Required
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`

	// +kubebuilder:validation:Required
	ExposedHeaders []string `json:"exposedHeaders,omitempty"`

	// +kubebuilder:validation:Required
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.ARMTransformer = &CorsRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *CorsRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &CorsRuleARM{}

	// Set property ‘AllowedHeaders’:
	for _, item := range rule.AllowedHeaders {
		result.AllowedHeaders = append(result.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range rule.AllowedMethods {
		result.AllowedMethods = append(result.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range rule.AllowedOrigins {
		result.AllowedOrigins = append(result.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range rule.ExposedHeaders {
		result.ExposedHeaders = append(result.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	if rule.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *rule.MaxAgeInSeconds
		result.MaxAgeInSeconds = &maxAgeInSeconds
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *CorsRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *CorsRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRuleARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	for _, item := range typedInput.AllowedHeaders {
		rule.AllowedHeaders = append(rule.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range typedInput.AllowedMethods {
		rule.AllowedMethods = append(rule.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		rule.AllowedOrigins = append(rule.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range typedInput.ExposedHeaders {
		rule.ExposedHeaders = append(rule.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		rule.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsRule populates our CorsRule from the provided source CorsRule
func (rule *CorsRule) AssignPropertiesFromCorsRule(source *alpha20210401s.CorsRule) error {

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	if source.AllowedMethods != nil {
		allowedMethodList := make([]CorsRuleAllowedMethods, len(source.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range source.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = CorsRuleAllowedMethods(allowedMethodItem)
		}
		rule.AllowedMethods = allowedMethodList
	} else {
		rule.AllowedMethods = nil
	}

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.ClonePointerToInt(source.MaxAgeInSeconds)

	// No error
	return nil
}

// AssignPropertiesToCorsRule populates the provided destination CorsRule from our CorsRule
func (rule *CorsRule) AssignPropertiesToCorsRule(destination *alpha20210401s.CorsRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	if rule.AllowedMethods != nil {
		allowedMethodList := make([]string, len(rule.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range rule.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = string(allowedMethodItem)
		}
		destination.AllowedMethods = allowedMethodList
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	destination.MaxAgeInSeconds = genruntime.ClonePointerToInt(rule.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CorsRule_Status. Use v1beta20210401.CorsRule_Status instead
type CorsRule_Status struct {
	AllowedHeaders  []string                       `json:"allowedHeaders,omitempty"`
	AllowedMethods  []CorsRuleStatusAllowedMethods `json:"allowedMethods,omitempty"`
	AllowedOrigins  []string                       `json:"allowedOrigins,omitempty"`
	ExposedHeaders  []string                       `json:"exposedHeaders,omitempty"`
	MaxAgeInSeconds *int                           `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.FromARMConverter = &CorsRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *CorsRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *CorsRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRule_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	for _, item := range typedInput.AllowedHeaders {
		rule.AllowedHeaders = append(rule.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range typedInput.AllowedMethods {
		rule.AllowedMethods = append(rule.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		rule.AllowedOrigins = append(rule.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range typedInput.ExposedHeaders {
		rule.ExposedHeaders = append(rule.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		rule.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsRuleStatus populates our CorsRule_Status from the provided source CorsRule_Status
func (rule *CorsRule_Status) AssignPropertiesFromCorsRuleStatus(source *alpha20210401s.CorsRule_Status) error {

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	if source.AllowedMethods != nil {
		allowedMethodList := make([]CorsRuleStatusAllowedMethods, len(source.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range source.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = CorsRuleStatusAllowedMethods(allowedMethodItem)
		}
		rule.AllowedMethods = allowedMethodList
	} else {
		rule.AllowedMethods = nil
	}

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.ClonePointerToInt(source.MaxAgeInSeconds)

	// No error
	return nil
}

// AssignPropertiesToCorsRuleStatus populates the provided destination CorsRule_Status from our CorsRule_Status
func (rule *CorsRule_Status) AssignPropertiesToCorsRuleStatus(destination *alpha20210401s.CorsRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	if rule.AllowedMethods != nil {
		allowedMethodList := make([]string, len(rule.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range rule.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = string(allowedMethodItem)
		}
		destination.AllowedMethods = allowedMethodList
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	destination.MaxAgeInSeconds = genruntime.ClonePointerToInt(rule.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of LastAccessTimeTrackingPolicyName. Use v1beta20210401.LastAccessTimeTrackingPolicyName instead
// +kubebuilder:validation:Enum={"AccessTimeTracking"}
type LastAccessTimeTrackingPolicyName string

const LastAccessTimeTrackingPolicyNameAccessTimeTracking = LastAccessTimeTrackingPolicyName("AccessTimeTracking")

// Deprecated version of CorsRuleAllowedMethods. Use v1beta20210401.CorsRuleAllowedMethods instead
// +kubebuilder:validation:Enum={"DELETE","GET","HEAD","MERGE","OPTIONS","POST","PUT"}
type CorsRuleAllowedMethods string

const (
	CorsRuleAllowedMethodsDELETE  = CorsRuleAllowedMethods("DELETE")
	CorsRuleAllowedMethodsGET     = CorsRuleAllowedMethods("GET")
	CorsRuleAllowedMethodsHEAD    = CorsRuleAllowedMethods("HEAD")
	CorsRuleAllowedMethodsMERGE   = CorsRuleAllowedMethods("MERGE")
	CorsRuleAllowedMethodsOPTIONS = CorsRuleAllowedMethods("OPTIONS")
	CorsRuleAllowedMethodsPOST    = CorsRuleAllowedMethods("POST")
	CorsRuleAllowedMethodsPUT     = CorsRuleAllowedMethods("PUT")
)

func init() {
	SchemeBuilder.Register(&StorageAccountsBlobService{}, &StorageAccountsBlobServiceList{})
}
