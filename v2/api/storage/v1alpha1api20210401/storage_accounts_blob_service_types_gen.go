// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /storage/resource-manager/Microsoft.Storage/stable/2021-04-01/blob.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}
type StorageAccountsBlobService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccountsBlobServices_SPEC `json:"spec,omitempty"`
	Status            BlobServiceProperties_Status     `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsBlobService{}

// GetConditions returns the conditions of the resource
func (service *StorageAccountsBlobService) GetConditions() conditions.Conditions {
	return service.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (service *StorageAccountsBlobService) SetConditions(conditions conditions.Conditions) {
	service.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsBlobService{}

// ConvertFrom populates our StorageAccountsBlobService from the provided hub StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210401storage.StorageAccountsBlobService)
	if !ok {
		return fmt.Errorf("expected storage:storage/v1alpha1api20210401storage/StorageAccountsBlobService but received %T instead", hub)
	}

	return service.AssignPropertiesFromStorageAccountsBlobService(source)
}

// ConvertTo populates the provided hub StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210401storage.StorageAccountsBlobService)
	if !ok {
		return fmt.Errorf("expected storage:storage/v1alpha1api20210401storage/StorageAccountsBlobService but received %T instead", hub)
	}

	return service.AssignPropertiesToStorageAccountsBlobService(destination)
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservice,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservices,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccountsblobservices.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &StorageAccountsBlobService{}

// Default applies defaults to the StorageAccountsBlobService resource
func (service *StorageAccountsBlobService) Default() {
	service.defaultImpl()
	var temp interface{} = service
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (service *StorageAccountsBlobService) defaultAzureName() {
	if service.Spec.AzureName == "" {
		service.Spec.AzureName = service.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsBlobService resource
func (service *StorageAccountsBlobService) defaultImpl() { service.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccountsBlobService{}

// AzureName returns the Azure name of the resource
func (service *StorageAccountsBlobService) AzureName() string {
	return service.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (service StorageAccountsBlobService) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (service *StorageAccountsBlobService) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (service *StorageAccountsBlobService) GetSpec() genruntime.ConvertibleSpec {
	return &service.Spec
}

// GetStatus returns the status of this resource
func (service *StorageAccountsBlobService) GetStatus() genruntime.ConvertibleStatus {
	return &service.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/blobServices"
func (service *StorageAccountsBlobService) GetType() string {
	return "Microsoft.Storage/storageAccounts/blobServices"
}

// NewEmptyStatus returns a new empty (blank) status
func (service *StorageAccountsBlobService) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BlobServiceProperties_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (service *StorageAccountsBlobService) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(service.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  service.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (service *StorageAccountsBlobService) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BlobServiceProperties_Status); ok {
		service.Status = *st
		return nil
	}

	// Convert status to required version
	var st BlobServiceProperties_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	service.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1alpha1api20210401-storageaccountsblobservice,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsblobservices,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccountsblobservices.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &StorageAccountsBlobService{}

// ValidateCreate validates the creation of the resource
func (service *StorageAccountsBlobService) ValidateCreate() error {
	validations := service.createValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (service *StorageAccountsBlobService) ValidateDelete() error {
	validations := service.deleteValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (service *StorageAccountsBlobService) ValidateUpdate(old runtime.Object) error {
	validations := service.updateValidations()
	var temp interface{} = service
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (service *StorageAccountsBlobService) createValidations() []func() error {
	return []func() error{service.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (service *StorageAccountsBlobService) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (service *StorageAccountsBlobService) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return service.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (service *StorageAccountsBlobService) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&service.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromStorageAccountsBlobService populates our StorageAccountsBlobService from the provided source StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignPropertiesFromStorageAccountsBlobService(source *v1alpha1api20210401storage.StorageAccountsBlobService) error {

	// ObjectMeta
	service.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccountsBlobServices_SPEC
	err := spec.AssignPropertiesFromStorageAccountsBlobServices_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsBlobServices_SPEC() to populate field Spec")
	}
	service.Spec = spec

	// Status
	var status BlobServiceProperties_Status
	err = status.AssignPropertiesFromBlobServiceProperties_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBlobServiceProperties_Status() to populate field Status")
	}
	service.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobService populates the provided destination StorageAccountsBlobService from our StorageAccountsBlobService
func (service *StorageAccountsBlobService) AssignPropertiesToStorageAccountsBlobService(destination *v1alpha1api20210401storage.StorageAccountsBlobService) error {

	// ObjectMeta
	destination.ObjectMeta = *service.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC
	err := service.Spec.AssignPropertiesToStorageAccountsBlobServices_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsBlobServices_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210401storage.BlobServiceProperties_Status
	err = service.Status.AssignPropertiesToBlobServiceProperties_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBlobServiceProperties_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (service *StorageAccountsBlobService) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: service.Spec.OriginalVersion(),
		Kind:    "StorageAccountsBlobService",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /storage/resource-manager/Microsoft.Storage/stable/2021-04-01/blob.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}
type StorageAccountsBlobServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsBlobService `json:"items"`
}

type BlobServiceProperties_Status struct {
	//AutomaticSnapshotPolicyEnabled: Deprecated in favor of isVersioningEnabled
	//property.
	AutomaticSnapshotPolicyEnabled *bool `json:"automaticSnapshotPolicyEnabled,omitempty"`

	//ChangeFeed: The blob service properties for change feed events.
	ChangeFeed *ChangeFeed_Status `json:"changeFeed,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//ContainerDeleteRetentionPolicy: The blob service properties for container soft
	//delete.
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy_Status `json:"containerDeleteRetentionPolicy,omitempty"`

	//Cors: Specifies CORS rules for the Blob service. You can include up to five
	//CorsRule elements in the request. If no CorsRule elements are included in the
	//request body, all CORS rules will be deleted, and CORS will be disabled for the
	//Blob service.
	Cors *CorsRules_Status `json:"cors,omitempty"`

	//DefaultServiceVersion: DefaultServiceVersion indicates the default version to
	//use for requests to the Blob service if an incoming request’s version is not
	//specified. Possible values include version 2008-10-27 and all more recent
	//versions.
	DefaultServiceVersion *string `json:"defaultServiceVersion,omitempty"`

	//DeleteRetentionPolicy: The blob service properties for blob soft delete.
	DeleteRetentionPolicy *DeleteRetentionPolicy_Status `json:"deleteRetentionPolicy,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//IsVersioningEnabled: Versioning is enabled if set to true.
	IsVersioningEnabled *bool `json:"isVersioningEnabled,omitempty"`

	//LastAccessTimeTrackingPolicy: The blob service property to configure last access
	//time based tracking policy.
	LastAccessTimeTrackingPolicy *LastAccessTimeTrackingPolicy_Status `json:"lastAccessTimeTrackingPolicy,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//RestorePolicy: The blob service properties for blob restore policy.
	RestorePolicy *RestorePolicyProperties_Status `json:"restorePolicy,omitempty"`

	//Sku: Sku name and tier.
	Sku *Sku_Status `json:"sku,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BlobServiceProperties_Status{}

// ConvertStatusFrom populates our BlobServiceProperties_Status from the provided source
func (properties *BlobServiceProperties_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210401storage.BlobServiceProperties_Status)
	if ok {
		// Populate our instance from source
		return properties.AssignPropertiesFromBlobServiceProperties_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.BlobServiceProperties_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = properties.AssignPropertiesFromBlobServiceProperties_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BlobServiceProperties_Status
func (properties *BlobServiceProperties_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210401storage.BlobServiceProperties_Status)
	if ok {
		// Populate destination from our instance
		return properties.AssignPropertiesToBlobServiceProperties_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.BlobServiceProperties_Status{}
	err := properties.AssignPropertiesToBlobServiceProperties_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &BlobServiceProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *BlobServiceProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobServiceProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *BlobServiceProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobServiceProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobServiceProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘AutomaticSnapshotPolicyEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutomaticSnapshotPolicyEnabled != nil {
			automaticSnapshotPolicyEnabled := *typedInput.Properties.AutomaticSnapshotPolicyEnabled
			properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
		}
	}

	// Set property ‘ChangeFeed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ChangeFeed != nil {
			var changeFeed1 ChangeFeed_Status
			err := changeFeed1.PopulateFromARM(owner, *typedInput.Properties.ChangeFeed)
			if err != nil {
				return err
			}
			changeFeed := changeFeed1
			properties.ChangeFeed = &changeFeed
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ContainerDeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContainerDeleteRetentionPolicy != nil {
			var containerDeleteRetentionPolicy1 DeleteRetentionPolicy_Status
			err := containerDeleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.ContainerDeleteRetentionPolicy)
			if err != nil {
				return err
			}
			containerDeleteRetentionPolicy := containerDeleteRetentionPolicy1
			properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 CorsRules_Status
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			properties.Cors = &cors
		}
	}

	// Set property ‘DefaultServiceVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultServiceVersion != nil {
			defaultServiceVersion := *typedInput.Properties.DefaultServiceVersion
			properties.DefaultServiceVersion = &defaultServiceVersion
		}
	}

	// Set property ‘DeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeleteRetentionPolicy != nil {
			var deleteRetentionPolicy1 DeleteRetentionPolicy_Status
			err := deleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeleteRetentionPolicy)
			if err != nil {
				return err
			}
			deleteRetentionPolicy := deleteRetentionPolicy1
			properties.DeleteRetentionPolicy = &deleteRetentionPolicy
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		properties.Id = &id
	}

	// Set property ‘IsVersioningEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVersioningEnabled != nil {
			isVersioningEnabled := *typedInput.Properties.IsVersioningEnabled
			properties.IsVersioningEnabled = &isVersioningEnabled
		}
	}

	// Set property ‘LastAccessTimeTrackingPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastAccessTimeTrackingPolicy != nil {
			var lastAccessTimeTrackingPolicy1 LastAccessTimeTrackingPolicy_Status
			err := lastAccessTimeTrackingPolicy1.PopulateFromARM(owner, *typedInput.Properties.LastAccessTimeTrackingPolicy)
			if err != nil {
				return err
			}
			lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicy1
			properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		properties.Name = &name
	}

	// Set property ‘RestorePolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePolicy != nil {
			var restorePolicy1 RestorePolicyProperties_Status
			err := restorePolicy1.PopulateFromARM(owner, *typedInput.Properties.RestorePolicy)
			if err != nil {
				return err
			}
			restorePolicy := restorePolicy1
			properties.RestorePolicy = &restorePolicy
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		properties.Sku = &sku
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		properties.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobServiceProperties_Status populates our BlobServiceProperties_Status from the provided source BlobServiceProperties_Status
func (properties *BlobServiceProperties_Status) AssignPropertiesFromBlobServiceProperties_Status(source *v1alpha1api20210401storage.BlobServiceProperties_Status) error {

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		properties.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed_Status
		err := changeFeed.AssignPropertiesFromChangeFeed_Status(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromChangeFeed_Status() to populate field ChangeFeed")
		}
		properties.ChangeFeed = &changeFeed
	} else {
		properties.ChangeFeed = nil
	}

	// Conditions
	properties.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy_Status
		err := containerDeleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy_Status(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy_Status() to populate field ContainerDeleteRetentionPolicy")
		}
		properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		properties.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules_Status
		err := cor.AssignPropertiesFromCorsRules_Status(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCorsRules_Status() to populate field Cors")
		}
		properties.Cors = &cor
	} else {
		properties.Cors = nil
	}

	// DefaultServiceVersion
	properties.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy_Status
		err := deleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy_Status(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy_Status() to populate field DeleteRetentionPolicy")
		}
		properties.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		properties.DeleteRetentionPolicy = nil
	}

	// Id
	properties.Id = genruntime.ClonePointerToString(source.Id)

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		properties.IsVersioningEnabled = &isVersioningEnabled
	} else {
		properties.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy_Status
		err := lastAccessTimeTrackingPolicy.AssignPropertiesFromLastAccessTimeTrackingPolicy_Status(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLastAccessTimeTrackingPolicy_Status() to populate field LastAccessTimeTrackingPolicy")
		}
		properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		properties.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	properties.Name = genruntime.ClonePointerToString(source.Name)

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties_Status
		err := restorePolicy.AssignPropertiesFromRestorePolicyProperties_Status(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRestorePolicyProperties_Status() to populate field RestorePolicy")
		}
		properties.RestorePolicy = &restorePolicy
	} else {
		properties.RestorePolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_Status() to populate field Sku")
		}
		properties.Sku = &sku
	} else {
		properties.Sku = nil
	}

	// Type
	properties.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToBlobServiceProperties_Status populates the provided destination BlobServiceProperties_Status from our BlobServiceProperties_Status
func (properties *BlobServiceProperties_Status) AssignPropertiesToBlobServiceProperties_Status(destination *v1alpha1api20210401storage.BlobServiceProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutomaticSnapshotPolicyEnabled
	if properties.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *properties.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// ChangeFeed
	if properties.ChangeFeed != nil {
		var changeFeed v1alpha1api20210401storage.ChangeFeed_Status
		err := properties.ChangeFeed.AssignPropertiesToChangeFeed_Status(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToChangeFeed_Status() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(properties.Conditions)

	// ContainerDeleteRetentionPolicy
	if properties.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy v1alpha1api20210401storage.DeleteRetentionPolicy_Status
		err := properties.ContainerDeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy_Status(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy_Status() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if properties.Cors != nil {
		var cor v1alpha1api20210401storage.CorsRules_Status
		err := properties.Cors.AssignPropertiesToCorsRules_Status(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCorsRules_Status() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(properties.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if properties.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy v1alpha1api20210401storage.DeleteRetentionPolicy_Status
		err := properties.DeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy_Status(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy_Status() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(properties.Id)

	// IsVersioningEnabled
	if properties.IsVersioningEnabled != nil {
		isVersioningEnabled := *properties.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if properties.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Status
		err := properties.LastAccessTimeTrackingPolicy.AssignPropertiesToLastAccessTimeTrackingPolicy_Status(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLastAccessTimeTrackingPolicy_Status() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(properties.Name)

	// RestorePolicy
	if properties.RestorePolicy != nil {
		var restorePolicy v1alpha1api20210401storage.RestorePolicyProperties_Status
		err := properties.RestorePolicy.AssignPropertiesToRestorePolicyProperties_Status(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRestorePolicyProperties_Status() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Sku
	if properties.Sku != nil {
		var sku v1alpha1api20210401storage.Sku_Status
		err := properties.Sku.AssignPropertiesToSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(properties.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountsBlobServices_SPEC struct {
	//AutomaticSnapshotPolicyEnabled: Deprecated in favor of isVersioningEnabled
	//property.
	AutomaticSnapshotPolicyEnabled *bool `json:"automaticSnapshotPolicyEnabled,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//ChangeFeed: The blob service properties for change feed events.
	ChangeFeed *ChangeFeed_Spec `json:"changeFeed,omitempty"`

	//ContainerDeleteRetentionPolicy: The blob service properties for container soft
	//delete.
	ContainerDeleteRetentionPolicy *DeleteRetentionPolicy_Spec `json:"containerDeleteRetentionPolicy,omitempty"`

	//Cors: Specifies CORS rules for the Blob service. You can include up to five
	//CorsRule elements in the request. If no CorsRule elements are included in the
	//request body, all CORS rules will be deleted, and CORS will be disabled for the
	//Blob service.
	Cors *CorsRules_Spec `json:"cors,omitempty"`

	//DefaultServiceVersion: DefaultServiceVersion indicates the default version to
	//use for requests to the Blob service if an incoming request’s version is not
	//specified. Possible values include version 2008-10-27 and all more recent
	//versions.
	DefaultServiceVersion *string `json:"defaultServiceVersion,omitempty"`

	//DeleteRetentionPolicy: The blob service properties for blob soft delete.
	DeleteRetentionPolicy *DeleteRetentionPolicy_Spec `json:"deleteRetentionPolicy,omitempty"`

	//IsVersioningEnabled: Versioning is enabled if set to true.
	IsVersioningEnabled *bool `json:"isVersioningEnabled,omitempty"`

	//LastAccessTimeTrackingPolicy: The blob service property to configure last access
	//time based tracking policy.
	LastAccessTimeTrackingPolicy *LastAccessTimeTrackingPolicy_Spec `json:"lastAccessTimeTrackingPolicy,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//RestorePolicy: The blob service properties for blob restore policy.
	RestorePolicy *RestorePolicyProperties_Spec `json:"restorePolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccountsBlobServices_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *StorageAccountsBlobServices_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result StorageAccountsBlobServices_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.AutomaticSnapshotPolicyEnabled != nil ||
		spec.ChangeFeed != nil ||
		spec.ContainerDeleteRetentionPolicy != nil ||
		spec.Cors != nil ||
		spec.DefaultServiceVersion != nil ||
		spec.DeleteRetentionPolicy != nil ||
		spec.IsVersioningEnabled != nil ||
		spec.LastAccessTimeTrackingPolicy != nil ||
		spec.RestorePolicy != nil {
		result.Properties = &StorageAccountsBlobServices_Properties_SPECARM{}
	}
	if spec.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *spec.AutomaticSnapshotPolicyEnabled
		result.Properties.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	}
	if spec.ChangeFeed != nil {
		changeFeedARM, err := (*spec.ChangeFeed).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		changeFeed := changeFeedARM.(ChangeFeed_SpecARM)
		result.Properties.ChangeFeed = &changeFeed
	}
	if spec.ContainerDeleteRetentionPolicy != nil {
		containerDeleteRetentionPolicyARM, err := (*spec.ContainerDeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		containerDeleteRetentionPolicy := containerDeleteRetentionPolicyARM.(DeleteRetentionPolicy_SpecARM)
		result.Properties.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	}
	if spec.Cors != nil {
		corsARM, err := (*spec.Cors).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cors := corsARM.(CorsRules_SpecARM)
		result.Properties.Cors = &cors
	}
	if spec.DefaultServiceVersion != nil {
		defaultServiceVersion := *spec.DefaultServiceVersion
		result.Properties.DefaultServiceVersion = &defaultServiceVersion
	}
	if spec.DeleteRetentionPolicy != nil {
		deleteRetentionPolicyARM, err := (*spec.DeleteRetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deleteRetentionPolicy := deleteRetentionPolicyARM.(DeleteRetentionPolicy_SpecARM)
		result.Properties.DeleteRetentionPolicy = &deleteRetentionPolicy
	}
	if spec.IsVersioningEnabled != nil {
		isVersioningEnabled := *spec.IsVersioningEnabled
		result.Properties.IsVersioningEnabled = &isVersioningEnabled
	}
	if spec.LastAccessTimeTrackingPolicy != nil {
		lastAccessTimeTrackingPolicyARM, err := (*spec.LastAccessTimeTrackingPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicyARM.(LastAccessTimeTrackingPolicy_SpecARM)
		result.Properties.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	}
	if spec.RestorePolicy != nil {
		restorePolicyARM, err := (*spec.RestorePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		restorePolicy := restorePolicyARM.(RestorePolicyProperties_SpecARM)
		result.Properties.RestorePolicy = &restorePolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *StorageAccountsBlobServices_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsBlobServices_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *StorageAccountsBlobServices_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsBlobServices_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsBlobServices_SPECARM, got %T", armInput)
	}

	// Set property ‘AutomaticSnapshotPolicyEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutomaticSnapshotPolicyEnabled != nil {
			automaticSnapshotPolicyEnabled := *typedInput.Properties.AutomaticSnapshotPolicyEnabled
			spec.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
		}
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ChangeFeed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ChangeFeed != nil {
			var changeFeed1 ChangeFeed_Spec
			err := changeFeed1.PopulateFromARM(owner, *typedInput.Properties.ChangeFeed)
			if err != nil {
				return err
			}
			changeFeed := changeFeed1
			spec.ChangeFeed = &changeFeed
		}
	}

	// Set property ‘ContainerDeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ContainerDeleteRetentionPolicy != nil {
			var containerDeleteRetentionPolicy1 DeleteRetentionPolicy_Spec
			err := containerDeleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.ContainerDeleteRetentionPolicy)
			if err != nil {
				return err
			}
			containerDeleteRetentionPolicy := containerDeleteRetentionPolicy1
			spec.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 CorsRules_Spec
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			spec.Cors = &cors
		}
	}

	// Set property ‘DefaultServiceVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultServiceVersion != nil {
			defaultServiceVersion := *typedInput.Properties.DefaultServiceVersion
			spec.DefaultServiceVersion = &defaultServiceVersion
		}
	}

	// Set property ‘DeleteRetentionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeleteRetentionPolicy != nil {
			var deleteRetentionPolicy1 DeleteRetentionPolicy_Spec
			err := deleteRetentionPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeleteRetentionPolicy)
			if err != nil {
				return err
			}
			deleteRetentionPolicy := deleteRetentionPolicy1
			spec.DeleteRetentionPolicy = &deleteRetentionPolicy
		}
	}

	// Set property ‘IsVersioningEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVersioningEnabled != nil {
			isVersioningEnabled := *typedInput.Properties.IsVersioningEnabled
			spec.IsVersioningEnabled = &isVersioningEnabled
		}
	}

	// Set property ‘LastAccessTimeTrackingPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastAccessTimeTrackingPolicy != nil {
			var lastAccessTimeTrackingPolicy1 LastAccessTimeTrackingPolicy_Spec
			err := lastAccessTimeTrackingPolicy1.PopulateFromARM(owner, *typedInput.Properties.LastAccessTimeTrackingPolicy)
			if err != nil {
				return err
			}
			lastAccessTimeTrackingPolicy := lastAccessTimeTrackingPolicy1
			spec.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RestorePolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePolicy != nil {
			var restorePolicy1 RestorePolicyProperties_Spec
			err := restorePolicy1.PopulateFromARM(owner, *typedInput.Properties.RestorePolicy)
			if err != nil {
				return err
			}
			restorePolicy := restorePolicy1
			spec.RestorePolicy = &restorePolicy
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccountsBlobServices_SPEC{}

// ConvertSpecFrom populates our StorageAccountsBlobServices_SPEC from the provided source
func (spec *StorageAccountsBlobServices_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromStorageAccountsBlobServices_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromStorageAccountsBlobServices_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccountsBlobServices_SPEC
func (spec *StorageAccountsBlobServices_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToStorageAccountsBlobServices_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC{}
	err := spec.AssignPropertiesToStorageAccountsBlobServices_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsBlobServices_SPEC populates our StorageAccountsBlobServices_SPEC from the provided source StorageAccountsBlobServices_SPEC
func (spec *StorageAccountsBlobServices_SPEC) AssignPropertiesFromStorageAccountsBlobServices_SPEC(source *v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC) error {

	// AutomaticSnapshotPolicyEnabled
	if source.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *source.AutomaticSnapshotPolicyEnabled
		spec.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		spec.AutomaticSnapshotPolicyEnabled = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// ChangeFeed
	if source.ChangeFeed != nil {
		var changeFeed ChangeFeed_Spec
		err := changeFeed.AssignPropertiesFromChangeFeed_Spec(source.ChangeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromChangeFeed_Spec() to populate field ChangeFeed")
		}
		spec.ChangeFeed = &changeFeed
	} else {
		spec.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if source.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy DeleteRetentionPolicy_Spec
		err := containerDeleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy_Spec(source.ContainerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy_Spec() to populate field ContainerDeleteRetentionPolicy")
		}
		spec.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		spec.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		var cor CorsRules_Spec
		err := cor.AssignPropertiesFromCorsRules_Spec(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCorsRules_Spec() to populate field Cors")
		}
		spec.Cors = &cor
	} else {
		spec.Cors = nil
	}

	// DefaultServiceVersion
	spec.DefaultServiceVersion = genruntime.ClonePointerToString(source.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if source.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy DeleteRetentionPolicy_Spec
		err := deleteRetentionPolicy.AssignPropertiesFromDeleteRetentionPolicy_Spec(source.DeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDeleteRetentionPolicy_Spec() to populate field DeleteRetentionPolicy")
		}
		spec.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		spec.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if source.IsVersioningEnabled != nil {
		isVersioningEnabled := *source.IsVersioningEnabled
		spec.IsVersioningEnabled = &isVersioningEnabled
	} else {
		spec.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if source.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy LastAccessTimeTrackingPolicy_Spec
		err := lastAccessTimeTrackingPolicy.AssignPropertiesFromLastAccessTimeTrackingPolicy_Spec(source.LastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLastAccessTimeTrackingPolicy_Spec() to populate field LastAccessTimeTrackingPolicy")
		}
		spec.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		spec.LastAccessTimeTrackingPolicy = nil
	}

	// Owner
	spec.Owner = source.Owner.Copy()

	// RestorePolicy
	if source.RestorePolicy != nil {
		var restorePolicy RestorePolicyProperties_Spec
		err := restorePolicy.AssignPropertiesFromRestorePolicyProperties_Spec(source.RestorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRestorePolicyProperties_Spec() to populate field RestorePolicy")
		}
		spec.RestorePolicy = &restorePolicy
	} else {
		spec.RestorePolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsBlobServices_SPEC populates the provided destination StorageAccountsBlobServices_SPEC from our StorageAccountsBlobServices_SPEC
func (spec *StorageAccountsBlobServices_SPEC) AssignPropertiesToStorageAccountsBlobServices_SPEC(destination *v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutomaticSnapshotPolicyEnabled
	if spec.AutomaticSnapshotPolicyEnabled != nil {
		automaticSnapshotPolicyEnabled := *spec.AutomaticSnapshotPolicyEnabled
		destination.AutomaticSnapshotPolicyEnabled = &automaticSnapshotPolicyEnabled
	} else {
		destination.AutomaticSnapshotPolicyEnabled = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// ChangeFeed
	if spec.ChangeFeed != nil {
		var changeFeed v1alpha1api20210401storage.ChangeFeed_Spec
		err := spec.ChangeFeed.AssignPropertiesToChangeFeed_Spec(&changeFeed)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToChangeFeed_Spec() to populate field ChangeFeed")
		}
		destination.ChangeFeed = &changeFeed
	} else {
		destination.ChangeFeed = nil
	}

	// ContainerDeleteRetentionPolicy
	if spec.ContainerDeleteRetentionPolicy != nil {
		var containerDeleteRetentionPolicy v1alpha1api20210401storage.DeleteRetentionPolicy_Spec
		err := spec.ContainerDeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy_Spec(&containerDeleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy_Spec() to populate field ContainerDeleteRetentionPolicy")
		}
		destination.ContainerDeleteRetentionPolicy = &containerDeleteRetentionPolicy
	} else {
		destination.ContainerDeleteRetentionPolicy = nil
	}

	// Cors
	if spec.Cors != nil {
		var cor v1alpha1api20210401storage.CorsRules_Spec
		err := spec.Cors.AssignPropertiesToCorsRules_Spec(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCorsRules_Spec() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DefaultServiceVersion
	destination.DefaultServiceVersion = genruntime.ClonePointerToString(spec.DefaultServiceVersion)

	// DeleteRetentionPolicy
	if spec.DeleteRetentionPolicy != nil {
		var deleteRetentionPolicy v1alpha1api20210401storage.DeleteRetentionPolicy_Spec
		err := spec.DeleteRetentionPolicy.AssignPropertiesToDeleteRetentionPolicy_Spec(&deleteRetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDeleteRetentionPolicy_Spec() to populate field DeleteRetentionPolicy")
		}
		destination.DeleteRetentionPolicy = &deleteRetentionPolicy
	} else {
		destination.DeleteRetentionPolicy = nil
	}

	// IsVersioningEnabled
	if spec.IsVersioningEnabled != nil {
		isVersioningEnabled := *spec.IsVersioningEnabled
		destination.IsVersioningEnabled = &isVersioningEnabled
	} else {
		destination.IsVersioningEnabled = nil
	}

	// LastAccessTimeTrackingPolicy
	if spec.LastAccessTimeTrackingPolicy != nil {
		var lastAccessTimeTrackingPolicy v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Spec
		err := spec.LastAccessTimeTrackingPolicy.AssignPropertiesToLastAccessTimeTrackingPolicy_Spec(&lastAccessTimeTrackingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLastAccessTimeTrackingPolicy_Spec() to populate field LastAccessTimeTrackingPolicy")
		}
		destination.LastAccessTimeTrackingPolicy = &lastAccessTimeTrackingPolicy
	} else {
		destination.LastAccessTimeTrackingPolicy = nil
	}

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// RestorePolicy
	if spec.RestorePolicy != nil {
		var restorePolicy v1alpha1api20210401storage.RestorePolicyProperties_Spec
		err := spec.RestorePolicy.AssignPropertiesToRestorePolicyProperties_Spec(&restorePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRestorePolicyProperties_Spec() to populate field RestorePolicy")
		}
		destination.RestorePolicy = &restorePolicy
	} else {
		destination.RestorePolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *StorageAccountsBlobServices_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *StorageAccountsBlobServices_SPEC) SetAzureName(azureName string) {
	spec.AzureName = azureName
}

type ChangeFeed_Spec struct {
	//Enabled: Indicates whether change feed event logging is enabled for the Blob
	//service.
	Enabled *bool `json:"enabled,omitempty"`

	// +kubebuilder:validation:Maximum=146000
	// +kubebuilder:validation:Minimum=1
	//RetentionInDays: Indicates the duration of changeFeed retention in days. Minimum
	//value is 1 day and maximum value is 146000 days (400 years). A null value
	//indicates an infinite retention of the change feed.
	RetentionInDays *int `json:"retentionInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &ChangeFeed_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (feed *ChangeFeed_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if feed == nil {
		return nil, nil
	}
	var result ChangeFeed_SpecARM

	// Set property ‘Enabled’:
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if feed.RetentionInDays != nil {
		retentionInDays := *feed.RetentionInDays
		result.RetentionInDays = &retentionInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feed *ChangeFeed_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ChangeFeed_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feed *ChangeFeed_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ChangeFeed_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ChangeFeed_SpecARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		feed.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if typedInput.RetentionInDays != nil {
		retentionInDays := *typedInput.RetentionInDays
		feed.RetentionInDays = &retentionInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromChangeFeed_Spec populates our ChangeFeed_Spec from the provided source ChangeFeed_Spec
func (feed *ChangeFeed_Spec) AssignPropertiesFromChangeFeed_Spec(source *v1alpha1api20210401storage.ChangeFeed_Spec) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	if source.RetentionInDays != nil {
		retentionInDay := *source.RetentionInDays
		feed.RetentionInDays = &retentionInDay
	} else {
		feed.RetentionInDays = nil
	}

	// No error
	return nil
}

// AssignPropertiesToChangeFeed_Spec populates the provided destination ChangeFeed_Spec from our ChangeFeed_Spec
func (feed *ChangeFeed_Spec) AssignPropertiesToChangeFeed_Spec(destination *v1alpha1api20210401storage.ChangeFeed_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	if feed.RetentionInDays != nil {
		retentionInDay := *feed.RetentionInDays
		destination.RetentionInDays = &retentionInDay
	} else {
		destination.RetentionInDays = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ChangeFeed_Status struct {
	//Enabled: Indicates whether change feed event logging is enabled for the Blob
	//service.
	Enabled *bool `json:"enabled,omitempty"`

	//RetentionInDays: Indicates the duration of changeFeed retention in days. Minimum
	//value is 1 day and maximum value is 146000 days (400 years). A null value
	//indicates an infinite retention of the change feed.
	RetentionInDays *int `json:"retentionInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &ChangeFeed_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feed *ChangeFeed_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ChangeFeed_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feed *ChangeFeed_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ChangeFeed_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ChangeFeed_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		feed.Enabled = &enabled
	}

	// Set property ‘RetentionInDays’:
	if typedInput.RetentionInDays != nil {
		retentionInDays := *typedInput.RetentionInDays
		feed.RetentionInDays = &retentionInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromChangeFeed_Status populates our ChangeFeed_Status from the provided source ChangeFeed_Status
func (feed *ChangeFeed_Status) AssignPropertiesFromChangeFeed_Status(source *v1alpha1api20210401storage.ChangeFeed_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		feed.Enabled = &enabled
	} else {
		feed.Enabled = nil
	}

	// RetentionInDays
	feed.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// No error
	return nil
}

// AssignPropertiesToChangeFeed_Status populates the provided destination ChangeFeed_Status from our ChangeFeed_Status
func (feed *ChangeFeed_Status) AssignPropertiesToChangeFeed_Status(destination *v1alpha1api20210401storage.ChangeFeed_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if feed.Enabled != nil {
		enabled := *feed.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(feed.RetentionInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRules_Spec struct {
	//CorsRules: The List of CORS rules. You can include up to five CorsRule elements
	//in the request.
	CorsRules []CorsRule_Spec `json:"corsRules,omitempty"`
}

var _ genruntime.ARMTransformer = &CorsRules_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rules *CorsRules_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rules == nil {
		return nil, nil
	}
	var result CorsRules_SpecARM

	// Set property ‘CorsRules’:
	for _, item := range rules.CorsRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.CorsRules = append(result.CorsRules, itemARM.(CorsRule_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *CorsRules_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRules_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *CorsRules_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRules_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRules_SpecARM, got %T", armInput)
	}

	// Set property ‘CorsRules’:
	for _, item := range typedInput.CorsRules {
		var item1 CorsRule_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rules.CorsRules = append(rules.CorsRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsRules_Spec populates our CorsRules_Spec from the provided source CorsRules_Spec
func (rules *CorsRules_Spec) AssignPropertiesFromCorsRules_Spec(source *v1alpha1api20210401storage.CorsRules_Spec) error {

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule_Spec, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule_Spec
			err := corsRule.AssignPropertiesFromCorsRule_Spec(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCorsRule_Spec() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCorsRules_Spec populates the provided destination CorsRules_Spec from our CorsRules_Spec
func (rules *CorsRules_Spec) AssignPropertiesToCorsRules_Spec(destination *v1alpha1api20210401storage.CorsRules_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]v1alpha1api20210401storage.CorsRule_Spec, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule v1alpha1api20210401storage.CorsRule_Spec
			err := corsRuleItem.AssignPropertiesToCorsRule_Spec(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCorsRule_Spec() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRules_Status struct {
	//CorsRules: The List of CORS rules. You can include up to five CorsRule elements
	//in the request.
	CorsRules []CorsRule_Status `json:"corsRules,omitempty"`
}

var _ genruntime.FromARMConverter = &CorsRules_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *CorsRules_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRules_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *CorsRules_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRules_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRules_StatusARM, got %T", armInput)
	}

	// Set property ‘CorsRules’:
	for _, item := range typedInput.CorsRules {
		var item1 CorsRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rules.CorsRules = append(rules.CorsRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsRules_Status populates our CorsRules_Status from the provided source CorsRules_Status
func (rules *CorsRules_Status) AssignPropertiesFromCorsRules_Status(source *v1alpha1api20210401storage.CorsRules_Status) error {

	// CorsRules
	if source.CorsRules != nil {
		corsRuleList := make([]CorsRule_Status, len(source.CorsRules))
		for corsRuleIndex, corsRuleItem := range source.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule CorsRule_Status
			err := corsRule.AssignPropertiesFromCorsRule_Status(&corsRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCorsRule_Status() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		rules.CorsRules = corsRuleList
	} else {
		rules.CorsRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCorsRules_Status populates the provided destination CorsRules_Status from our CorsRules_Status
func (rules *CorsRules_Status) AssignPropertiesToCorsRules_Status(destination *v1alpha1api20210401storage.CorsRules_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CorsRules
	if rules.CorsRules != nil {
		corsRuleList := make([]v1alpha1api20210401storage.CorsRule_Status, len(rules.CorsRules))
		for corsRuleIndex, corsRuleItem := range rules.CorsRules {
			// Shadow the loop variable to avoid aliasing
			corsRuleItem := corsRuleItem
			var corsRule v1alpha1api20210401storage.CorsRule_Status
			err := corsRuleItem.AssignPropertiesToCorsRule_Status(&corsRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCorsRule_Status() to populate field CorsRules")
			}
			corsRuleList[corsRuleIndex] = corsRule
		}
		destination.CorsRules = corsRuleList
	} else {
		destination.CorsRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeleteRetentionPolicy_Spec struct {
	// +kubebuilder:validation:Maximum=365
	// +kubebuilder:validation:Minimum=1
	//Days: Indicates the number of days that the deleted item should be retained. The
	//minimum specified value can be 1 and the maximum value can be 365.
	Days *int `json:"days,omitempty"`

	//Enabled: Indicates whether DeleteRetentionPolicy is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.ARMTransformer = &DeleteRetentionPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *DeleteRetentionPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result DeleteRetentionPolicy_SpecARM

	// Set property ‘Days’:
	if policy.Days != nil {
		days := *policy.Days
		result.Days = &days
	}

	// Set property ‘Enabled’:
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		result.Enabled = &enabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *DeleteRetentionPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeleteRetentionPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *DeleteRetentionPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeleteRetentionPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeleteRetentionPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		policy.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignPropertiesFromDeleteRetentionPolicy_Spec populates our DeleteRetentionPolicy_Spec from the provided source DeleteRetentionPolicy_Spec
func (policy *DeleteRetentionPolicy_Spec) AssignPropertiesFromDeleteRetentionPolicy_Spec(source *v1alpha1api20210401storage.DeleteRetentionPolicy_Spec) error {

	// Days
	if source.Days != nil {
		day := *source.Days
		policy.Days = &day
	} else {
		policy.Days = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDeleteRetentionPolicy_Spec populates the provided destination DeleteRetentionPolicy_Spec from our DeleteRetentionPolicy_Spec
func (policy *DeleteRetentionPolicy_Spec) AssignPropertiesToDeleteRetentionPolicy_Spec(destination *v1alpha1api20210401storage.DeleteRetentionPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	if policy.Days != nil {
		day := *policy.Days
		destination.Days = &day
	} else {
		destination.Days = nil
	}

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeleteRetentionPolicy_Status struct {
	//Days: Indicates the number of days that the deleted item should be retained. The
	//minimum specified value can be 1 and the maximum value can be 365.
	Days *int `json:"days,omitempty"`

	//Enabled: Indicates whether DeleteRetentionPolicy is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.FromARMConverter = &DeleteRetentionPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *DeleteRetentionPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeleteRetentionPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *DeleteRetentionPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeleteRetentionPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeleteRetentionPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		policy.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignPropertiesFromDeleteRetentionPolicy_Status populates our DeleteRetentionPolicy_Status from the provided source DeleteRetentionPolicy_Status
func (policy *DeleteRetentionPolicy_Status) AssignPropertiesFromDeleteRetentionPolicy_Status(source *v1alpha1api20210401storage.DeleteRetentionPolicy_Status) error {

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		policy.Enabled = &enabled
	} else {
		policy.Enabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDeleteRetentionPolicy_Status populates the provided destination DeleteRetentionPolicy_Status from our DeleteRetentionPolicy_Status
func (policy *DeleteRetentionPolicy_Status) AssignPropertiesToDeleteRetentionPolicy_Status(destination *v1alpha1api20210401storage.DeleteRetentionPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// Enabled
	if policy.Enabled != nil {
		enabled := *policy.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LastAccessTimeTrackingPolicy_Spec struct {
	//BlobType: An array of predefined supported blob types. Only blockBlob is the
	//supported value. This field is currently read only
	BlobType []string `json:"blobType,omitempty"`

	// +kubebuilder:validation:Required
	//Enable: When set to true last access time based tracking is enabled.
	Enable bool `json:"enable"`

	//Name: Name of the policy. The valid value is AccessTimeTracking. This field is
	//currently read only
	Name *LastAccessTimeTrackingPolicy_Name_Spec `json:"name,omitempty"`

	//TrackingGranularityInDays: The field specifies blob object tracking granularity
	//in days, typically how often the blob object should be tracked.This field is
	//currently read only with value as 1
	TrackingGranularityInDays *int `json:"trackingGranularityInDays,omitempty"`
}

var _ genruntime.ARMTransformer = &LastAccessTimeTrackingPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *LastAccessTimeTrackingPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result LastAccessTimeTrackingPolicy_SpecARM

	// Set property ‘BlobType’:
	for _, item := range policy.BlobType {
		result.BlobType = append(result.BlobType, item)
	}

	// Set property ‘Enable’:
	result.Enable = policy.Enable

	// Set property ‘Name’:
	if policy.Name != nil {
		name := *policy.Name
		result.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if policy.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *policy.TrackingGranularityInDays
		result.TrackingGranularityInDays = &trackingGranularityInDays
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *LastAccessTimeTrackingPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LastAccessTimeTrackingPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *LastAccessTimeTrackingPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LastAccessTimeTrackingPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LastAccessTimeTrackingPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘BlobType’:
	for _, item := range typedInput.BlobType {
		policy.BlobType = append(policy.BlobType, item)
	}

	// Set property ‘Enable’:
	policy.Enable = typedInput.Enable

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if typedInput.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *typedInput.TrackingGranularityInDays
		policy.TrackingGranularityInDays = &trackingGranularityInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromLastAccessTimeTrackingPolicy_Spec populates our LastAccessTimeTrackingPolicy_Spec from the provided source LastAccessTimeTrackingPolicy_Spec
func (policy *LastAccessTimeTrackingPolicy_Spec) AssignPropertiesFromLastAccessTimeTrackingPolicy_Spec(source *v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Spec) error {

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		policy.Enable = *source.Enable
	} else {
		policy.Enable = false
	}

	// Name
	if source.Name != nil {
		name := LastAccessTimeTrackingPolicy_Name_Spec(*source.Name)
		policy.Name = &name
	} else {
		policy.Name = nil
	}

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// No error
	return nil
}

// AssignPropertiesToLastAccessTimeTrackingPolicy_Spec populates the provided destination LastAccessTimeTrackingPolicy_Spec from our LastAccessTimeTrackingPolicy_Spec
func (policy *LastAccessTimeTrackingPolicy_Spec) AssignPropertiesToLastAccessTimeTrackingPolicy_Spec(destination *v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	enable := policy.Enable
	destination.Enable = &enable

	// Name
	if policy.Name != nil {
		name := string(*policy.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LastAccessTimeTrackingPolicy_Status struct {
	//BlobType: An array of predefined supported blob types. Only blockBlob is the
	//supported value. This field is currently read only
	BlobType []string `json:"blobType,omitempty"`

	// +kubebuilder:validation:Required
	//Enable: When set to true last access time based tracking is enabled.
	Enable bool `json:"enable"`

	//Name: Name of the policy. The valid value is AccessTimeTracking. This field is
	//currently read only
	Name *LastAccessTimeTrackingPolicy_Name_Status `json:"name,omitempty"`

	//TrackingGranularityInDays: The field specifies blob object tracking granularity
	//in days, typically how often the blob object should be tracked.This field is
	//currently read only with value as 1
	TrackingGranularityInDays *int `json:"trackingGranularityInDays,omitempty"`
}

var _ genruntime.FromARMConverter = &LastAccessTimeTrackingPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *LastAccessTimeTrackingPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LastAccessTimeTrackingPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *LastAccessTimeTrackingPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LastAccessTimeTrackingPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LastAccessTimeTrackingPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘BlobType’:
	for _, item := range typedInput.BlobType {
		policy.BlobType = append(policy.BlobType, item)
	}

	// Set property ‘Enable’:
	policy.Enable = typedInput.Enable

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘TrackingGranularityInDays’:
	if typedInput.TrackingGranularityInDays != nil {
		trackingGranularityInDays := *typedInput.TrackingGranularityInDays
		policy.TrackingGranularityInDays = &trackingGranularityInDays
	}

	// No error
	return nil
}

// AssignPropertiesFromLastAccessTimeTrackingPolicy_Status populates our LastAccessTimeTrackingPolicy_Status from the provided source LastAccessTimeTrackingPolicy_Status
func (policy *LastAccessTimeTrackingPolicy_Status) AssignPropertiesFromLastAccessTimeTrackingPolicy_Status(source *v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Status) error {

	// BlobType
	policy.BlobType = genruntime.CloneSliceOfString(source.BlobType)

	// Enable
	if source.Enable != nil {
		policy.Enable = *source.Enable
	} else {
		policy.Enable = false
	}

	// Name
	if source.Name != nil {
		name := LastAccessTimeTrackingPolicy_Name_Status(*source.Name)
		policy.Name = &name
	} else {
		policy.Name = nil
	}

	// TrackingGranularityInDays
	policy.TrackingGranularityInDays = genruntime.ClonePointerToInt(source.TrackingGranularityInDays)

	// No error
	return nil
}

// AssignPropertiesToLastAccessTimeTrackingPolicy_Status populates the provided destination LastAccessTimeTrackingPolicy_Status from our LastAccessTimeTrackingPolicy_Status
func (policy *LastAccessTimeTrackingPolicy_Status) AssignPropertiesToLastAccessTimeTrackingPolicy_Status(destination *v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobType
	destination.BlobType = genruntime.CloneSliceOfString(policy.BlobType)

	// Enable
	enable := policy.Enable
	destination.Enable = &enable

	// Name
	if policy.Name != nil {
		name := string(*policy.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// TrackingGranularityInDays
	destination.TrackingGranularityInDays = genruntime.ClonePointerToInt(policy.TrackingGranularityInDays)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RestorePolicyProperties_Spec struct {
	// +kubebuilder:validation:Maximum=365
	// +kubebuilder:validation:Minimum=1
	//Days: how long this blob can be restored. It should be great than zero and less
	//than DeleteRetentionPolicy.days.
	Days *int `json:"days,omitempty"`

	// +kubebuilder:validation:Required
	//Enabled: Blob restore is enabled if set to true.
	Enabled bool `json:"enabled"`
}

var _ genruntime.ARMTransformer = &RestorePolicyProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *RestorePolicyProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result RestorePolicyProperties_SpecARM

	// Set property ‘Days’:
	if properties.Days != nil {
		days := *properties.Days
		result.Days = &days
	}

	// Set property ‘Enabled’:
	result.Enabled = properties.Enabled
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *RestorePolicyProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RestorePolicyProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *RestorePolicyProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RestorePolicyProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RestorePolicyProperties_SpecARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		properties.Days = &days
	}

	// Set property ‘Enabled’:
	properties.Enabled = typedInput.Enabled

	// No error
	return nil
}

// AssignPropertiesFromRestorePolicyProperties_Spec populates our RestorePolicyProperties_Spec from the provided source RestorePolicyProperties_Spec
func (properties *RestorePolicyProperties_Spec) AssignPropertiesFromRestorePolicyProperties_Spec(source *v1alpha1api20210401storage.RestorePolicyProperties_Spec) error {

	// Days
	if source.Days != nil {
		day := *source.Days
		properties.Days = &day
	} else {
		properties.Days = nil
	}

	// Enabled
	if source.Enabled != nil {
		properties.Enabled = *source.Enabled
	} else {
		properties.Enabled = false
	}

	// No error
	return nil
}

// AssignPropertiesToRestorePolicyProperties_Spec populates the provided destination RestorePolicyProperties_Spec from our RestorePolicyProperties_Spec
func (properties *RestorePolicyProperties_Spec) AssignPropertiesToRestorePolicyProperties_Spec(destination *v1alpha1api20210401storage.RestorePolicyProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	if properties.Days != nil {
		day := *properties.Days
		destination.Days = &day
	} else {
		destination.Days = nil
	}

	// Enabled
	enabled := properties.Enabled
	destination.Enabled = &enabled

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RestorePolicyProperties_Status struct {
	//Days: how long this blob can be restored. It should be great than zero and less
	//than DeleteRetentionPolicy.days.
	Days *int `json:"days,omitempty"`

	// +kubebuilder:validation:Required
	//Enabled: Blob restore is enabled if set to true.
	Enabled bool `json:"enabled"`

	//LastEnabledTime: Deprecated in favor of minRestoreTime property.
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`

	//MinRestoreTime: Returns the minimum date and time that the restore can be
	//started.
	MinRestoreTime *string `json:"minRestoreTime,omitempty"`
}

var _ genruntime.FromARMConverter = &RestorePolicyProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *RestorePolicyProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RestorePolicyProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *RestorePolicyProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RestorePolicyProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RestorePolicyProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		properties.Days = &days
	}

	// Set property ‘Enabled’:
	properties.Enabled = typedInput.Enabled

	// Set property ‘LastEnabledTime’:
	if typedInput.LastEnabledTime != nil {
		lastEnabledTime := *typedInput.LastEnabledTime
		properties.LastEnabledTime = &lastEnabledTime
	}

	// Set property ‘MinRestoreTime’:
	if typedInput.MinRestoreTime != nil {
		minRestoreTime := *typedInput.MinRestoreTime
		properties.MinRestoreTime = &minRestoreTime
	}

	// No error
	return nil
}

// AssignPropertiesFromRestorePolicyProperties_Status populates our RestorePolicyProperties_Status from the provided source RestorePolicyProperties_Status
func (properties *RestorePolicyProperties_Status) AssignPropertiesFromRestorePolicyProperties_Status(source *v1alpha1api20210401storage.RestorePolicyProperties_Status) error {

	// Days
	properties.Days = genruntime.ClonePointerToInt(source.Days)

	// Enabled
	if source.Enabled != nil {
		properties.Enabled = *source.Enabled
	} else {
		properties.Enabled = false
	}

	// LastEnabledTime
	properties.LastEnabledTime = genruntime.ClonePointerToString(source.LastEnabledTime)

	// MinRestoreTime
	properties.MinRestoreTime = genruntime.ClonePointerToString(source.MinRestoreTime)

	// No error
	return nil
}

// AssignPropertiesToRestorePolicyProperties_Status populates the provided destination RestorePolicyProperties_Status from our RestorePolicyProperties_Status
func (properties *RestorePolicyProperties_Status) AssignPropertiesToRestorePolicyProperties_Status(destination *v1alpha1api20210401storage.RestorePolicyProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(properties.Days)

	// Enabled
	enabled := properties.Enabled
	destination.Enabled = &enabled

	// LastEnabledTime
	destination.LastEnabledTime = genruntime.ClonePointerToString(properties.LastEnabledTime)

	// MinRestoreTime
	destination.MinRestoreTime = genruntime.ClonePointerToString(properties.MinRestoreTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRule_Spec struct {
	// +kubebuilder:validation:Required
	//AllowedHeaders: Required if CorsRule element is present. A list of headers
	//allowed to be part of the cross-origin request.
	AllowedHeaders []string `json:"allowedHeaders"`

	// +kubebuilder:validation:Required
	//AllowedMethods: Required if CorsRule element is present. A list of HTTP methods
	//that are allowed to be executed by the origin.
	AllowedMethods []CorsRule_AllowedMethods_Spec `json:"allowedMethods"`

	// +kubebuilder:validation:Required
	//AllowedOrigins: Required if CorsRule element is present. A list of origin
	//domains that will be allowed via CORS, or "*" to allow all domains
	AllowedOrigins []string `json:"allowedOrigins"`

	// +kubebuilder:validation:Required
	//ExposedHeaders: Required if CorsRule element is present. A list of response
	//headers to expose to CORS clients.
	ExposedHeaders []string `json:"exposedHeaders"`

	// +kubebuilder:validation:Required
	//MaxAgeInSeconds: Required if CorsRule element is present. The number of seconds
	//that the client/browser should cache a preflight response.
	MaxAgeInSeconds int `json:"maxAgeInSeconds"`
}

var _ genruntime.ARMTransformer = &CorsRule_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *CorsRule_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	var result CorsRule_SpecARM

	// Set property ‘AllowedHeaders’:
	for _, item := range rule.AllowedHeaders {
		result.AllowedHeaders = append(result.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range rule.AllowedMethods {
		result.AllowedMethods = append(result.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range rule.AllowedOrigins {
		result.AllowedOrigins = append(result.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range rule.ExposedHeaders {
		result.ExposedHeaders = append(result.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	result.MaxAgeInSeconds = rule.MaxAgeInSeconds
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *CorsRule_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRule_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *CorsRule_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRule_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRule_SpecARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	for _, item := range typedInput.AllowedHeaders {
		rule.AllowedHeaders = append(rule.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range typedInput.AllowedMethods {
		rule.AllowedMethods = append(rule.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		rule.AllowedOrigins = append(rule.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range typedInput.ExposedHeaders {
		rule.ExposedHeaders = append(rule.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	rule.MaxAgeInSeconds = typedInput.MaxAgeInSeconds

	// No error
	return nil
}

// AssignPropertiesFromCorsRule_Spec populates our CorsRule_Spec from the provided source CorsRule_Spec
func (rule *CorsRule_Spec) AssignPropertiesFromCorsRule_Spec(source *v1alpha1api20210401storage.CorsRule_Spec) error {

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	if source.AllowedMethods != nil {
		allowedMethodList := make([]CorsRule_AllowedMethods_Spec, len(source.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range source.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = CorsRule_AllowedMethods_Spec(allowedMethodItem)
		}
		rule.AllowedMethods = allowedMethodList
	} else {
		rule.AllowedMethods = nil
	}

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.GetOptionalIntValue(source.MaxAgeInSeconds)

	// No error
	return nil
}

// AssignPropertiesToCorsRule_Spec populates the provided destination CorsRule_Spec from our CorsRule_Spec
func (rule *CorsRule_Spec) AssignPropertiesToCorsRule_Spec(destination *v1alpha1api20210401storage.CorsRule_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	if rule.AllowedMethods != nil {
		allowedMethodList := make([]string, len(rule.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range rule.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = string(allowedMethodItem)
		}
		destination.AllowedMethods = allowedMethodList
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	maxAgeInSecond := rule.MaxAgeInSeconds
	destination.MaxAgeInSeconds = &maxAgeInSecond

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsRule_Status struct {
	// +kubebuilder:validation:Required
	//AllowedHeaders: Required if CorsRule element is present. A list of headers
	//allowed to be part of the cross-origin request.
	AllowedHeaders []string `json:"allowedHeaders"`

	// +kubebuilder:validation:Required
	//AllowedMethods: Required if CorsRule element is present. A list of HTTP methods
	//that are allowed to be executed by the origin.
	AllowedMethods []CorsRule_AllowedMethods_Status `json:"allowedMethods"`

	// +kubebuilder:validation:Required
	//AllowedOrigins: Required if CorsRule element is present. A list of origin
	//domains that will be allowed via CORS, or "*" to allow all domains
	AllowedOrigins []string `json:"allowedOrigins"`

	// +kubebuilder:validation:Required
	//ExposedHeaders: Required if CorsRule element is present. A list of response
	//headers to expose to CORS clients.
	ExposedHeaders []string `json:"exposedHeaders"`

	// +kubebuilder:validation:Required
	//MaxAgeInSeconds: Required if CorsRule element is present. The number of seconds
	//that the client/browser should cache a preflight response.
	MaxAgeInSeconds int `json:"maxAgeInSeconds"`
}

var _ genruntime.FromARMConverter = &CorsRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *CorsRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *CorsRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsRule_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	for _, item := range typedInput.AllowedHeaders {
		rule.AllowedHeaders = append(rule.AllowedHeaders, item)
	}

	// Set property ‘AllowedMethods’:
	for _, item := range typedInput.AllowedMethods {
		rule.AllowedMethods = append(rule.AllowedMethods, item)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		rule.AllowedOrigins = append(rule.AllowedOrigins, item)
	}

	// Set property ‘ExposedHeaders’:
	for _, item := range typedInput.ExposedHeaders {
		rule.ExposedHeaders = append(rule.ExposedHeaders, item)
	}

	// Set property ‘MaxAgeInSeconds’:
	rule.MaxAgeInSeconds = typedInput.MaxAgeInSeconds

	// No error
	return nil
}

// AssignPropertiesFromCorsRule_Status populates our CorsRule_Status from the provided source CorsRule_Status
func (rule *CorsRule_Status) AssignPropertiesFromCorsRule_Status(source *v1alpha1api20210401storage.CorsRule_Status) error {

	// AllowedHeaders
	rule.AllowedHeaders = genruntime.CloneSliceOfString(source.AllowedHeaders)

	// AllowedMethods
	if source.AllowedMethods != nil {
		allowedMethodList := make([]CorsRule_AllowedMethods_Status, len(source.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range source.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = CorsRule_AllowedMethods_Status(allowedMethodItem)
		}
		rule.AllowedMethods = allowedMethodList
	} else {
		rule.AllowedMethods = nil
	}

	// AllowedOrigins
	rule.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// ExposedHeaders
	rule.ExposedHeaders = genruntime.CloneSliceOfString(source.ExposedHeaders)

	// MaxAgeInSeconds
	rule.MaxAgeInSeconds = genruntime.GetOptionalIntValue(source.MaxAgeInSeconds)

	// No error
	return nil
}

// AssignPropertiesToCorsRule_Status populates the provided destination CorsRule_Status from our CorsRule_Status
func (rule *CorsRule_Status) AssignPropertiesToCorsRule_Status(destination *v1alpha1api20210401storage.CorsRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.CloneSliceOfString(rule.AllowedHeaders)

	// AllowedMethods
	if rule.AllowedMethods != nil {
		allowedMethodList := make([]string, len(rule.AllowedMethods))
		for allowedMethodIndex, allowedMethodItem := range rule.AllowedMethods {
			// Shadow the loop variable to avoid aliasing
			allowedMethodItem := allowedMethodItem
			allowedMethodList[allowedMethodIndex] = string(allowedMethodItem)
		}
		destination.AllowedMethods = allowedMethodList
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(rule.AllowedOrigins)

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.CloneSliceOfString(rule.ExposedHeaders)

	// MaxAgeInSeconds
	maxAgeInSecond := rule.MaxAgeInSeconds
	destination.MaxAgeInSeconds = &maxAgeInSecond

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AccessTimeTracking"}
type LastAccessTimeTrackingPolicy_Name_Spec string

const LastAccessTimeTrackingPolicy_Name_SpecAccessTimeTracking = LastAccessTimeTrackingPolicy_Name_Spec("AccessTimeTracking")

// +kubebuilder:validation:Enum={"DELETE","GET","HEAD","MERGE","OPTIONS","POST","PUT"}
type CorsRule_AllowedMethods_Spec string

const (
	CorsRule_AllowedMethods_SpecDELETE  = CorsRule_AllowedMethods_Spec("DELETE")
	CorsRule_AllowedMethods_SpecGET     = CorsRule_AllowedMethods_Spec("GET")
	CorsRule_AllowedMethods_SpecHEAD    = CorsRule_AllowedMethods_Spec("HEAD")
	CorsRule_AllowedMethods_SpecMERGE   = CorsRule_AllowedMethods_Spec("MERGE")
	CorsRule_AllowedMethods_SpecOPTIONS = CorsRule_AllowedMethods_Spec("OPTIONS")
	CorsRule_AllowedMethods_SpecPOST    = CorsRule_AllowedMethods_Spec("POST")
	CorsRule_AllowedMethods_SpecPUT     = CorsRule_AllowedMethods_Spec("PUT")
)

func init() {
	SchemeBuilder.Register(&StorageAccountsBlobService{}, &StorageAccountsBlobServiceList{})
}
