// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Deprecated version of StorageAccountsManagementPolicy. Use v1beta20210401.StorageAccountsManagementPolicy instead
type StorageAccountsManagementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccountsManagementPolicies_Spec `json:"spec,omitempty"`
	Status            ManagementPolicy_Status                `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsManagementPolicy{}

// GetConditions returns the conditions of the resource
func (policy *StorageAccountsManagementPolicy) GetConditions() conditions.Conditions {
	return policy.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (policy *StorageAccountsManagementPolicy) SetConditions(conditions conditions.Conditions) {
	policy.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsManagementPolicy{}

// ConvertFrom populates our StorageAccountsManagementPolicy from the provided hub StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source v1alpha1api20210401storage.StorageAccountsManagementPolicy

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = policy.AssignPropertiesFromStorageAccountsManagementPolicy(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to policy")
	}

	return nil
}

// ConvertTo populates the provided hub StorageAccountsManagementPolicy from our StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination v1alpha1api20210401storage.StorageAccountsManagementPolicy
	err := policy.AssignPropertiesToStorageAccountsManagementPolicy(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from policy")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1alpha1api20210401-storageaccountsmanagementpolicy,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsmanagementpolicies,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccountsmanagementpolicies.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &StorageAccountsManagementPolicy{}

// Default applies defaults to the StorageAccountsManagementPolicy resource
func (policy *StorageAccountsManagementPolicy) Default() {
	policy.defaultImpl()
	var temp interface{} = policy
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsManagementPolicy resource
func (policy *StorageAccountsManagementPolicy) defaultImpl() {}

var _ genruntime.KubernetesResource = &StorageAccountsManagementPolicy{}

// AzureName returns the Azure name of the resource (always "default")
func (policy *StorageAccountsManagementPolicy) AzureName() string {
	return "default"
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (policy StorageAccountsManagementPolicy) GetAPIVersion() string {
	return "2021-04-01"
}

// GetResourceKind returns the kind of the resource
func (policy *StorageAccountsManagementPolicy) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (policy *StorageAccountsManagementPolicy) GetSpec() genruntime.ConvertibleSpec {
	return &policy.Spec
}

// GetStatus returns the status of this resource
func (policy *StorageAccountsManagementPolicy) GetStatus() genruntime.ConvertibleStatus {
	return &policy.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/managementPolicies"
func (policy *StorageAccountsManagementPolicy) GetType() string {
	return "Microsoft.Storage/storageAccounts/managementPolicies"
}

// NewEmptyStatus returns a new empty (blank) status
func (policy *StorageAccountsManagementPolicy) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ManagementPolicy_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (policy *StorageAccountsManagementPolicy) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(policy.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  policy.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (policy *StorageAccountsManagementPolicy) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ManagementPolicy_Status); ok {
		policy.Status = *st
		return nil
	}

	// Convert status to required version
	var st ManagementPolicy_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	policy.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1alpha1api20210401-storageaccountsmanagementpolicy,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsmanagementpolicies,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccountsmanagementpolicies.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &StorageAccountsManagementPolicy{}

// ValidateCreate validates the creation of the resource
func (policy *StorageAccountsManagementPolicy) ValidateCreate() error {
	validations := policy.createValidations()
	var temp interface{} = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (policy *StorageAccountsManagementPolicy) ValidateDelete() error {
	validations := policy.deleteValidations()
	var temp interface{} = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (policy *StorageAccountsManagementPolicy) ValidateUpdate(old runtime.Object) error {
	validations := policy.updateValidations()
	var temp interface{} = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (policy *StorageAccountsManagementPolicy) createValidations() []func() error {
	return []func() error{policy.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (policy *StorageAccountsManagementPolicy) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (policy *StorageAccountsManagementPolicy) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return policy.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (policy *StorageAccountsManagementPolicy) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&policy.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromStorageAccountsManagementPolicy populates our StorageAccountsManagementPolicy from the provided source StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) AssignPropertiesFromStorageAccountsManagementPolicy(source *v1alpha1api20210401storage.StorageAccountsManagementPolicy) error {

	// ObjectMeta
	policy.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccountsManagementPolicies_Spec
	err := spec.AssignPropertiesFromStorageAccountsManagementPoliciesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromStorageAccountsManagementPoliciesSpec() to populate field Spec")
	}
	policy.Spec = spec

	// Status
	var status ManagementPolicy_Status
	err = status.AssignPropertiesFromManagementPolicyStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyStatus() to populate field Status")
	}
	policy.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsManagementPolicy populates the provided destination StorageAccountsManagementPolicy from our StorageAccountsManagementPolicy
func (policy *StorageAccountsManagementPolicy) AssignPropertiesToStorageAccountsManagementPolicy(destination *v1alpha1api20210401storage.StorageAccountsManagementPolicy) error {

	// ObjectMeta
	destination.ObjectMeta = *policy.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210401storage.StorageAccountsManagementPolicies_Spec
	err := policy.Spec.AssignPropertiesToStorageAccountsManagementPoliciesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToStorageAccountsManagementPoliciesSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210401storage.ManagementPolicy_Status
	err = policy.Status.AssignPropertiesToManagementPolicyStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (policy *StorageAccountsManagementPolicy) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: policy.Spec.OriginalVersion(),
		Kind:    "StorageAccountsManagementPolicy",
	}
}

// +kubebuilder:object:root=true
//Deprecated version of StorageAccountsManagementPolicy. Use v1beta20210401.StorageAccountsManagementPolicy instead
type StorageAccountsManagementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsManagementPolicy `json:"items"`
}

//Deprecated version of ManagementPolicy_Status. Use v1beta20210401.ManagementPolicy_Status instead
type ManagementPolicy_Status struct {
	//Conditions: The observed state of the resource
	Conditions       []conditions.Condition         `json:"conditions,omitempty"`
	Id               *string                        `json:"id,omitempty"`
	LastModifiedTime *string                        `json:"lastModifiedTime,omitempty"`
	Name             *string                        `json:"name,omitempty"`
	Policy           *ManagementPolicySchema_Status `json:"policy,omitempty"`
	Type             *string                        `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ManagementPolicy_Status{}

// ConvertStatusFrom populates our ManagementPolicy_Status from the provided source
func (policy *ManagementPolicy_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210401storage.ManagementPolicy_Status)
	if ok {
		// Populate our instance from source
		return policy.AssignPropertiesFromManagementPolicyStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.ManagementPolicy_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = policy.AssignPropertiesFromManagementPolicyStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ManagementPolicy_Status
func (policy *ManagementPolicy_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210401storage.ManagementPolicy_Status)
	if ok {
		// Populate destination from our instance
		return policy.AssignPropertiesToManagementPolicyStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.ManagementPolicy_Status{}
	err := policy.AssignPropertiesToManagementPolicyStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ManagementPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ManagementPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ManagementPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicy_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		policy.Id = &id
	}

	// Set property ‘LastModifiedTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastModifiedTime != nil {
			lastModifiedTime := *typedInput.Properties.LastModifiedTime
			policy.LastModifiedTime = &lastModifiedTime
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property ‘Policy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Policy != nil {
			var policy2 ManagementPolicySchema_Status
			err := policy2.PopulateFromARM(owner, *typedInput.Properties.Policy)
			if err != nil {
				return err
			}
			policy1 := policy2
			policy.Policy = &policy1
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		policy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyStatus populates our ManagementPolicy_Status from the provided source ManagementPolicy_Status
func (policy *ManagementPolicy_Status) AssignPropertiesFromManagementPolicyStatus(source *v1alpha1api20210401storage.ManagementPolicy_Status) error {

	// Conditions
	policy.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	policy.Id = genruntime.ClonePointerToString(source.Id)

	// LastModifiedTime
	policy.LastModifiedTime = genruntime.ClonePointerToString(source.LastModifiedTime)

	// Name
	policy.Name = genruntime.ClonePointerToString(source.Name)

	// Policy
	if source.Policy != nil {
		var policyLocal ManagementPolicySchema_Status
		err := policyLocal.AssignPropertiesFromManagementPolicySchemaStatus(source.Policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicySchemaStatus() to populate field Policy")
		}
		policy.Policy = &policyLocal
	} else {
		policy.Policy = nil
	}

	// Type
	policy.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyStatus populates the provided destination ManagementPolicy_Status from our ManagementPolicy_Status
func (policy *ManagementPolicy_Status) AssignPropertiesToManagementPolicyStatus(destination *v1alpha1api20210401storage.ManagementPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(policy.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(policy.Id)

	// LastModifiedTime
	destination.LastModifiedTime = genruntime.ClonePointerToString(policy.LastModifiedTime)

	// Name
	destination.Name = genruntime.ClonePointerToString(policy.Name)

	// Policy
	if policy.Policy != nil {
		var policyLocal v1alpha1api20210401storage.ManagementPolicySchema_Status
		err := policy.Policy.AssignPropertiesToManagementPolicySchemaStatus(&policyLocal)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicySchemaStatus() to populate field Policy")
		}
		destination.Policy = &policyLocal
	} else {
		destination.Policy = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(policy.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageAccountsManagementPolicies_Spec struct {
	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a storage.azure.com/StorageAccount resource
	Owner *genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner,omitempty" kind:"StorageAccount"`

	// +kubebuilder:validation:Required
	Policy *ManagementPolicySchema `json:"policy,omitempty"`
	Tags   map[string]string       `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccountsManagementPolicies_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policies *StorageAccountsManagementPolicies_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policies == nil {
		return nil, nil
	}
	var result StorageAccountsManagementPolicies_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if policies.Policy != nil {
		result.Properties = &ManagementPolicyPropertiesARM{}
	}
	if policies.Policy != nil {
		policyARM, err := (*policies.Policy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		policy := policyARM.(ManagementPolicySchemaARM)
		result.Properties.Policy = &policy
	}

	// Set property ‘Tags’:
	if policies.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range policies.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policies *StorageAccountsManagementPolicies_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountsManagementPolicies_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policies *StorageAccountsManagementPolicies_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountsManagementPolicies_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountsManagementPolicies_SpecARM, got %T", armInput)
	}

	// Set property ‘Owner’:
	policies.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Policy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Policy != nil {
			var policy1 ManagementPolicySchema
			err := policy1.PopulateFromARM(owner, *typedInput.Properties.Policy)
			if err != nil {
				return err
			}
			policy := policy1
			policies.Policy = &policy
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		policies.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			policies.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccountsManagementPolicies_Spec{}

// ConvertSpecFrom populates our StorageAccountsManagementPolicies_Spec from the provided source
func (policies *StorageAccountsManagementPolicies_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210401storage.StorageAccountsManagementPolicies_Spec)
	if ok {
		// Populate our instance from source
		return policies.AssignPropertiesFromStorageAccountsManagementPoliciesSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.StorageAccountsManagementPolicies_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = policies.AssignPropertiesFromStorageAccountsManagementPoliciesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccountsManagementPolicies_Spec
func (policies *StorageAccountsManagementPolicies_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210401storage.StorageAccountsManagementPolicies_Spec)
	if ok {
		// Populate destination from our instance
		return policies.AssignPropertiesToStorageAccountsManagementPoliciesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.StorageAccountsManagementPolicies_Spec{}
	err := policies.AssignPropertiesToStorageAccountsManagementPoliciesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsManagementPoliciesSpec populates our StorageAccountsManagementPolicies_Spec from the provided source StorageAccountsManagementPolicies_Spec
func (policies *StorageAccountsManagementPolicies_Spec) AssignPropertiesFromStorageAccountsManagementPoliciesSpec(source *v1alpha1api20210401storage.StorageAccountsManagementPolicies_Spec) error {

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		policies.Owner = &owner
	} else {
		policies.Owner = nil
	}

	// Policy
	if source.Policy != nil {
		var policy ManagementPolicySchema
		err := policy.AssignPropertiesFromManagementPolicySchema(source.Policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicySchema() to populate field Policy")
		}
		policies.Policy = &policy
	} else {
		policies.Policy = nil
	}

	// Tags
	policies.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsManagementPoliciesSpec populates the provided destination StorageAccountsManagementPolicies_Spec from our StorageAccountsManagementPolicies_Spec
func (policies *StorageAccountsManagementPolicies_Spec) AssignPropertiesToStorageAccountsManagementPoliciesSpec(destination *v1alpha1api20210401storage.StorageAccountsManagementPolicies_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// OriginalVersion
	destination.OriginalVersion = policies.OriginalVersion()

	// Owner
	if policies.Owner != nil {
		owner := policies.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Policy
	if policies.Policy != nil {
		var policy v1alpha1api20210401storage.ManagementPolicySchema
		err := policies.Policy.AssignPropertiesToManagementPolicySchema(&policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicySchema() to populate field Policy")
		}
		destination.Policy = &policy
	} else {
		destination.Policy = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(policies.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (policies *StorageAccountsManagementPolicies_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

//Deprecated version of ManagementPolicySchema. Use v1beta20210401.ManagementPolicySchema instead
type ManagementPolicySchema struct {
	// +kubebuilder:validation:Required
	Rules []ManagementPolicyRule `json:"rules,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicySchema{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (schema *ManagementPolicySchema) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if schema == nil {
		return nil, nil
	}
	var result ManagementPolicySchemaARM

	// Set property ‘Rules’:
	for _, item := range schema.Rules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Rules = append(result.Rules, itemARM.(ManagementPolicyRuleARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (schema *ManagementPolicySchema) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySchemaARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (schema *ManagementPolicySchema) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySchemaARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySchemaARM, got %T", armInput)
	}

	// Set property ‘Rules’:
	for _, item := range typedInput.Rules {
		var item1 ManagementPolicyRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		schema.Rules = append(schema.Rules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicySchema populates our ManagementPolicySchema from the provided source ManagementPolicySchema
func (schema *ManagementPolicySchema) AssignPropertiesFromManagementPolicySchema(source *v1alpha1api20210401storage.ManagementPolicySchema) error {

	// Rules
	if source.Rules != nil {
		ruleList := make([]ManagementPolicyRule, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule ManagementPolicyRule
			err := rule.AssignPropertiesFromManagementPolicyRule(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		schema.Rules = ruleList
	} else {
		schema.Rules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicySchema populates the provided destination ManagementPolicySchema from our ManagementPolicySchema
func (schema *ManagementPolicySchema) AssignPropertiesToManagementPolicySchema(destination *v1alpha1api20210401storage.ManagementPolicySchema) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Rules
	if schema.Rules != nil {
		ruleList := make([]v1alpha1api20210401storage.ManagementPolicyRule, len(schema.Rules))
		for ruleIndex, ruleItem := range schema.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v1alpha1api20210401storage.ManagementPolicyRule
			err := ruleItem.AssignPropertiesToManagementPolicyRule(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicySchema_Status. Use v1beta20210401.ManagementPolicySchema_Status instead
type ManagementPolicySchema_Status struct {
	Rules []ManagementPolicyRule_Status `json:"rules,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicySchema_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (schema *ManagementPolicySchema_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySchema_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (schema *ManagementPolicySchema_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySchema_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySchema_StatusARM, got %T", armInput)
	}

	// Set property ‘Rules’:
	for _, item := range typedInput.Rules {
		var item1 ManagementPolicyRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		schema.Rules = append(schema.Rules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicySchemaStatus populates our ManagementPolicySchema_Status from the provided source ManagementPolicySchema_Status
func (schema *ManagementPolicySchema_Status) AssignPropertiesFromManagementPolicySchemaStatus(source *v1alpha1api20210401storage.ManagementPolicySchema_Status) error {

	// Rules
	if source.Rules != nil {
		ruleList := make([]ManagementPolicyRule_Status, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule ManagementPolicyRule_Status
			err := rule.AssignPropertiesFromManagementPolicyRuleStatus(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyRuleStatus() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		schema.Rules = ruleList
	} else {
		schema.Rules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicySchemaStatus populates the provided destination ManagementPolicySchema_Status from our ManagementPolicySchema_Status
func (schema *ManagementPolicySchema_Status) AssignPropertiesToManagementPolicySchemaStatus(destination *v1alpha1api20210401storage.ManagementPolicySchema_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Rules
	if schema.Rules != nil {
		ruleList := make([]v1alpha1api20210401storage.ManagementPolicyRule_Status, len(schema.Rules))
		for ruleIndex, ruleItem := range schema.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v1alpha1api20210401storage.ManagementPolicyRule_Status
			err := ruleItem.AssignPropertiesToManagementPolicyRuleStatus(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyRuleStatus() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyRule. Use v1beta20210401.ManagementPolicyRule instead
type ManagementPolicyRule struct {
	// +kubebuilder:validation:Required
	Definition *ManagementPolicyDefinition `json:"definition,omitempty"`
	Enabled    *bool                       `json:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	Type *ManagementPolicyRuleType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *ManagementPolicyRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	var result ManagementPolicyRuleARM

	// Set property ‘Definition’:
	if rule.Definition != nil {
		definitionARM, err := (*rule.Definition).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		definition := definitionARM.(ManagementPolicyDefinitionARM)
		result.Definition = &definition
	}

	// Set property ‘Enabled’:
	if rule.Enabled != nil {
		enabled := *rule.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘Name’:
	if rule.Name != nil {
		name := *rule.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if rule.Type != nil {
		typeVar := *rule.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ManagementPolicyRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ManagementPolicyRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyRuleARM, got %T", armInput)
	}

	// Set property ‘Definition’:
	if typedInput.Definition != nil {
		var definition1 ManagementPolicyDefinition
		err := definition1.PopulateFromARM(owner, *typedInput.Definition)
		if err != nil {
			return err
		}
		definition := definition1
		rule.Definition = &definition
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		rule.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		rule.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyRule populates our ManagementPolicyRule from the provided source ManagementPolicyRule
func (rule *ManagementPolicyRule) AssignPropertiesFromManagementPolicyRule(source *v1alpha1api20210401storage.ManagementPolicyRule) error {

	// Definition
	if source.Definition != nil {
		var definition ManagementPolicyDefinition
		err := definition.AssignPropertiesFromManagementPolicyDefinition(source.Definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyDefinition() to populate field Definition")
		}
		rule.Definition = &definition
	} else {
		rule.Definition = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		rule.Enabled = &enabled
	} else {
		rule.Enabled = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ManagementPolicyRuleType(*source.Type)
		rule.Type = &typeVar
	} else {
		rule.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyRule populates the provided destination ManagementPolicyRule from our ManagementPolicyRule
func (rule *ManagementPolicyRule) AssignPropertiesToManagementPolicyRule(destination *v1alpha1api20210401storage.ManagementPolicyRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Definition
	if rule.Definition != nil {
		var definition v1alpha1api20210401storage.ManagementPolicyDefinition
		err := rule.Definition.AssignPropertiesToManagementPolicyDefinition(&definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyDefinition() to populate field Definition")
		}
		destination.Definition = &definition
	} else {
		destination.Definition = nil
	}

	// Enabled
	if rule.Enabled != nil {
		enabled := *rule.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Type
	if rule.Type != nil {
		typeVar := string(*rule.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyRule_Status. Use v1beta20210401.ManagementPolicyRule_Status instead
type ManagementPolicyRule_Status struct {
	Definition *ManagementPolicyDefinition_Status `json:"definition,omitempty"`
	Enabled    *bool                              `json:"enabled,omitempty"`
	Name       *string                            `json:"name,omitempty"`
	Type       *ManagementPolicyRuleStatusType    `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *ManagementPolicyRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *ManagementPolicyRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Definition’:
	if typedInput.Definition != nil {
		var definition1 ManagementPolicyDefinition_Status
		err := definition1.PopulateFromARM(owner, *typedInput.Definition)
		if err != nil {
			return err
		}
		definition := definition1
		rule.Definition = &definition
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		rule.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		rule.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyRuleStatus populates our ManagementPolicyRule_Status from the provided source ManagementPolicyRule_Status
func (rule *ManagementPolicyRule_Status) AssignPropertiesFromManagementPolicyRuleStatus(source *v1alpha1api20210401storage.ManagementPolicyRule_Status) error {

	// Definition
	if source.Definition != nil {
		var definition ManagementPolicyDefinition_Status
		err := definition.AssignPropertiesFromManagementPolicyDefinitionStatus(source.Definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyDefinitionStatus() to populate field Definition")
		}
		rule.Definition = &definition
	} else {
		rule.Definition = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		rule.Enabled = &enabled
	} else {
		rule.Enabled = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ManagementPolicyRuleStatusType(*source.Type)
		rule.Type = &typeVar
	} else {
		rule.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyRuleStatus populates the provided destination ManagementPolicyRule_Status from our ManagementPolicyRule_Status
func (rule *ManagementPolicyRule_Status) AssignPropertiesToManagementPolicyRuleStatus(destination *v1alpha1api20210401storage.ManagementPolicyRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Definition
	if rule.Definition != nil {
		var definition v1alpha1api20210401storage.ManagementPolicyDefinition_Status
		err := rule.Definition.AssignPropertiesToManagementPolicyDefinitionStatus(&definition)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyDefinitionStatus() to populate field Definition")
		}
		destination.Definition = &definition
	} else {
		destination.Definition = nil
	}

	// Enabled
	if rule.Enabled != nil {
		enabled := *rule.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Type
	if rule.Type != nil {
		typeVar := string(*rule.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyDefinition. Use v1beta20210401.ManagementPolicyDefinition instead
type ManagementPolicyDefinition struct {
	// +kubebuilder:validation:Required
	Actions *ManagementPolicyAction `json:"actions,omitempty"`
	Filters *ManagementPolicyFilter `json:"filters,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyDefinition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (definition *ManagementPolicyDefinition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if definition == nil {
		return nil, nil
	}
	var result ManagementPolicyDefinitionARM

	// Set property ‘Actions’:
	if definition.Actions != nil {
		actionsARM, err := (*definition.Actions).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		actions := actionsARM.(ManagementPolicyActionARM)
		result.Actions = &actions
	}

	// Set property ‘Filters’:
	if definition.Filters != nil {
		filtersARM, err := (*definition.Filters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		filters := filtersARM.(ManagementPolicyFilterARM)
		result.Filters = &filters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (definition *ManagementPolicyDefinition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyDefinitionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (definition *ManagementPolicyDefinition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyDefinitionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyDefinitionARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	if typedInput.Actions != nil {
		var actions1 ManagementPolicyAction
		err := actions1.PopulateFromARM(owner, *typedInput.Actions)
		if err != nil {
			return err
		}
		actions := actions1
		definition.Actions = &actions
	}

	// Set property ‘Filters’:
	if typedInput.Filters != nil {
		var filters1 ManagementPolicyFilter
		err := filters1.PopulateFromARM(owner, *typedInput.Filters)
		if err != nil {
			return err
		}
		filters := filters1
		definition.Filters = &filters
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyDefinition populates our ManagementPolicyDefinition from the provided source ManagementPolicyDefinition
func (definition *ManagementPolicyDefinition) AssignPropertiesFromManagementPolicyDefinition(source *v1alpha1api20210401storage.ManagementPolicyDefinition) error {

	// Actions
	if source.Actions != nil {
		var action ManagementPolicyAction
		err := action.AssignPropertiesFromManagementPolicyAction(source.Actions)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyAction() to populate field Actions")
		}
		definition.Actions = &action
	} else {
		definition.Actions = nil
	}

	// Filters
	if source.Filters != nil {
		var filter ManagementPolicyFilter
		err := filter.AssignPropertiesFromManagementPolicyFilter(source.Filters)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyFilter() to populate field Filters")
		}
		definition.Filters = &filter
	} else {
		definition.Filters = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyDefinition populates the provided destination ManagementPolicyDefinition from our ManagementPolicyDefinition
func (definition *ManagementPolicyDefinition) AssignPropertiesToManagementPolicyDefinition(destination *v1alpha1api20210401storage.ManagementPolicyDefinition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	if definition.Actions != nil {
		var action v1alpha1api20210401storage.ManagementPolicyAction
		err := definition.Actions.AssignPropertiesToManagementPolicyAction(&action)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyAction() to populate field Actions")
		}
		destination.Actions = &action
	} else {
		destination.Actions = nil
	}

	// Filters
	if definition.Filters != nil {
		var filter v1alpha1api20210401storage.ManagementPolicyFilter
		err := definition.Filters.AssignPropertiesToManagementPolicyFilter(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyFilter() to populate field Filters")
		}
		destination.Filters = &filter
	} else {
		destination.Filters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyDefinition_Status. Use v1beta20210401.ManagementPolicyDefinition_Status instead
type ManagementPolicyDefinition_Status struct {
	Actions *ManagementPolicyAction_Status `json:"actions,omitempty"`
	Filters *ManagementPolicyFilter_Status `json:"filters,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyDefinition_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (definition *ManagementPolicyDefinition_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyDefinition_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (definition *ManagementPolicyDefinition_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyDefinition_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyDefinition_StatusARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	if typedInput.Actions != nil {
		var actions1 ManagementPolicyAction_Status
		err := actions1.PopulateFromARM(owner, *typedInput.Actions)
		if err != nil {
			return err
		}
		actions := actions1
		definition.Actions = &actions
	}

	// Set property ‘Filters’:
	if typedInput.Filters != nil {
		var filters1 ManagementPolicyFilter_Status
		err := filters1.PopulateFromARM(owner, *typedInput.Filters)
		if err != nil {
			return err
		}
		filters := filters1
		definition.Filters = &filters
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyDefinitionStatus populates our ManagementPolicyDefinition_Status from the provided source ManagementPolicyDefinition_Status
func (definition *ManagementPolicyDefinition_Status) AssignPropertiesFromManagementPolicyDefinitionStatus(source *v1alpha1api20210401storage.ManagementPolicyDefinition_Status) error {

	// Actions
	if source.Actions != nil {
		var action ManagementPolicyAction_Status
		err := action.AssignPropertiesFromManagementPolicyActionStatus(source.Actions)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyActionStatus() to populate field Actions")
		}
		definition.Actions = &action
	} else {
		definition.Actions = nil
	}

	// Filters
	if source.Filters != nil {
		var filter ManagementPolicyFilter_Status
		err := filter.AssignPropertiesFromManagementPolicyFilterStatus(source.Filters)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyFilterStatus() to populate field Filters")
		}
		definition.Filters = &filter
	} else {
		definition.Filters = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyDefinitionStatus populates the provided destination ManagementPolicyDefinition_Status from our ManagementPolicyDefinition_Status
func (definition *ManagementPolicyDefinition_Status) AssignPropertiesToManagementPolicyDefinitionStatus(destination *v1alpha1api20210401storage.ManagementPolicyDefinition_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	if definition.Actions != nil {
		var action v1alpha1api20210401storage.ManagementPolicyAction_Status
		err := definition.Actions.AssignPropertiesToManagementPolicyActionStatus(&action)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyActionStatus() to populate field Actions")
		}
		destination.Actions = &action
	} else {
		destination.Actions = nil
	}

	// Filters
	if definition.Filters != nil {
		var filter v1alpha1api20210401storage.ManagementPolicyFilter_Status
		err := definition.Filters.AssignPropertiesToManagementPolicyFilterStatus(&filter)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyFilterStatus() to populate field Filters")
		}
		destination.Filters = &filter
	} else {
		destination.Filters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyAction. Use v1beta20210401.ManagementPolicyAction instead
type ManagementPolicyAction struct {
	BaseBlob *ManagementPolicyBaseBlob `json:"baseBlob,omitempty"`
	Snapshot *ManagementPolicySnapShot `json:"snapshot,omitempty"`
	Version  *ManagementPolicyVersion  `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *ManagementPolicyAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	var result ManagementPolicyActionARM

	// Set property ‘BaseBlob’:
	if action.BaseBlob != nil {
		baseBlobARM, err := (*action.BaseBlob).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		baseBlob := baseBlobARM.(ManagementPolicyBaseBlobARM)
		result.BaseBlob = &baseBlob
	}

	// Set property ‘Snapshot’:
	if action.Snapshot != nil {
		snapshotARM, err := (*action.Snapshot).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		snapshot := snapshotARM.(ManagementPolicySnapShotARM)
		result.Snapshot = &snapshot
	}

	// Set property ‘Version’:
	if action.Version != nil {
		versionARM, err := (*action.Version).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		version := versionARM.(ManagementPolicyVersionARM)
		result.Version = &version
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *ManagementPolicyAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyActionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *ManagementPolicyAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyActionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyActionARM, got %T", armInput)
	}

	// Set property ‘BaseBlob’:
	if typedInput.BaseBlob != nil {
		var baseBlob1 ManagementPolicyBaseBlob
		err := baseBlob1.PopulateFromARM(owner, *typedInput.BaseBlob)
		if err != nil {
			return err
		}
		baseBlob := baseBlob1
		action.BaseBlob = &baseBlob
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 ManagementPolicySnapShot
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		action.Snapshot = &snapshot
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		var version1 ManagementPolicyVersion
		err := version1.PopulateFromARM(owner, *typedInput.Version)
		if err != nil {
			return err
		}
		version := version1
		action.Version = &version
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyAction populates our ManagementPolicyAction from the provided source ManagementPolicyAction
func (action *ManagementPolicyAction) AssignPropertiesFromManagementPolicyAction(source *v1alpha1api20210401storage.ManagementPolicyAction) error {

	// BaseBlob
	if source.BaseBlob != nil {
		var baseBlob ManagementPolicyBaseBlob
		err := baseBlob.AssignPropertiesFromManagementPolicyBaseBlob(source.BaseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyBaseBlob() to populate field BaseBlob")
		}
		action.BaseBlob = &baseBlob
	} else {
		action.BaseBlob = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot ManagementPolicySnapShot
		err := snapshot.AssignPropertiesFromManagementPolicySnapShot(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicySnapShot() to populate field Snapshot")
		}
		action.Snapshot = &snapshot
	} else {
		action.Snapshot = nil
	}

	// Version
	if source.Version != nil {
		var version ManagementPolicyVersion
		err := version.AssignPropertiesFromManagementPolicyVersion(source.Version)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyVersion() to populate field Version")
		}
		action.Version = &version
	} else {
		action.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyAction populates the provided destination ManagementPolicyAction from our ManagementPolicyAction
func (action *ManagementPolicyAction) AssignPropertiesToManagementPolicyAction(destination *v1alpha1api20210401storage.ManagementPolicyAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BaseBlob
	if action.BaseBlob != nil {
		var baseBlob v1alpha1api20210401storage.ManagementPolicyBaseBlob
		err := action.BaseBlob.AssignPropertiesToManagementPolicyBaseBlob(&baseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyBaseBlob() to populate field BaseBlob")
		}
		destination.BaseBlob = &baseBlob
	} else {
		destination.BaseBlob = nil
	}

	// Snapshot
	if action.Snapshot != nil {
		var snapshot v1alpha1api20210401storage.ManagementPolicySnapShot
		err := action.Snapshot.AssignPropertiesToManagementPolicySnapShot(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicySnapShot() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// Version
	if action.Version != nil {
		var version v1alpha1api20210401storage.ManagementPolicyVersion
		err := action.Version.AssignPropertiesToManagementPolicyVersion(&version)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyVersion() to populate field Version")
		}
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyAction_Status. Use v1beta20210401.ManagementPolicyAction_Status instead
type ManagementPolicyAction_Status struct {
	BaseBlob *ManagementPolicyBaseBlob_Status `json:"baseBlob,omitempty"`
	Snapshot *ManagementPolicySnapShot_Status `json:"snapshot,omitempty"`
	Version  *ManagementPolicyVersion_Status  `json:"version,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyAction_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *ManagementPolicyAction_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyAction_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *ManagementPolicyAction_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyAction_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyAction_StatusARM, got %T", armInput)
	}

	// Set property ‘BaseBlob’:
	if typedInput.BaseBlob != nil {
		var baseBlob1 ManagementPolicyBaseBlob_Status
		err := baseBlob1.PopulateFromARM(owner, *typedInput.BaseBlob)
		if err != nil {
			return err
		}
		baseBlob := baseBlob1
		action.BaseBlob = &baseBlob
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 ManagementPolicySnapShot_Status
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		action.Snapshot = &snapshot
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		var version1 ManagementPolicyVersion_Status
		err := version1.PopulateFromARM(owner, *typedInput.Version)
		if err != nil {
			return err
		}
		version := version1
		action.Version = &version
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyActionStatus populates our ManagementPolicyAction_Status from the provided source ManagementPolicyAction_Status
func (action *ManagementPolicyAction_Status) AssignPropertiesFromManagementPolicyActionStatus(source *v1alpha1api20210401storage.ManagementPolicyAction_Status) error {

	// BaseBlob
	if source.BaseBlob != nil {
		var baseBlob ManagementPolicyBaseBlob_Status
		err := baseBlob.AssignPropertiesFromManagementPolicyBaseBlobStatus(source.BaseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyBaseBlobStatus() to populate field BaseBlob")
		}
		action.BaseBlob = &baseBlob
	} else {
		action.BaseBlob = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot ManagementPolicySnapShot_Status
		err := snapshot.AssignPropertiesFromManagementPolicySnapShotStatus(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicySnapShotStatus() to populate field Snapshot")
		}
		action.Snapshot = &snapshot
	} else {
		action.Snapshot = nil
	}

	// Version
	if source.Version != nil {
		var version ManagementPolicyVersion_Status
		err := version.AssignPropertiesFromManagementPolicyVersionStatus(source.Version)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagementPolicyVersionStatus() to populate field Version")
		}
		action.Version = &version
	} else {
		action.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyActionStatus populates the provided destination ManagementPolicyAction_Status from our ManagementPolicyAction_Status
func (action *ManagementPolicyAction_Status) AssignPropertiesToManagementPolicyActionStatus(destination *v1alpha1api20210401storage.ManagementPolicyAction_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BaseBlob
	if action.BaseBlob != nil {
		var baseBlob v1alpha1api20210401storage.ManagementPolicyBaseBlob_Status
		err := action.BaseBlob.AssignPropertiesToManagementPolicyBaseBlobStatus(&baseBlob)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyBaseBlobStatus() to populate field BaseBlob")
		}
		destination.BaseBlob = &baseBlob
	} else {
		destination.BaseBlob = nil
	}

	// Snapshot
	if action.Snapshot != nil {
		var snapshot v1alpha1api20210401storage.ManagementPolicySnapShot_Status
		err := action.Snapshot.AssignPropertiesToManagementPolicySnapShotStatus(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicySnapShotStatus() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// Version
	if action.Version != nil {
		var version v1alpha1api20210401storage.ManagementPolicyVersion_Status
		err := action.Version.AssignPropertiesToManagementPolicyVersionStatus(&version)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagementPolicyVersionStatus() to populate field Version")
		}
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyFilter. Use v1beta20210401.ManagementPolicyFilter instead
type ManagementPolicyFilter struct {
	BlobIndexMatch []TagFilter `json:"blobIndexMatch,omitempty"`

	// +kubebuilder:validation:Required
	BlobTypes   []string `json:"blobTypes,omitempty"`
	PrefixMatch []string `json:"prefixMatch,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *ManagementPolicyFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	var result ManagementPolicyFilterARM

	// Set property ‘BlobIndexMatch’:
	for _, item := range filter.BlobIndexMatch {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.BlobIndexMatch = append(result.BlobIndexMatch, itemARM.(TagFilterARM))
	}

	// Set property ‘BlobTypes’:
	for _, item := range filter.BlobTypes {
		result.BlobTypes = append(result.BlobTypes, item)
	}

	// Set property ‘PrefixMatch’:
	for _, item := range filter.PrefixMatch {
		result.PrefixMatch = append(result.PrefixMatch, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *ManagementPolicyFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *ManagementPolicyFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyFilterARM, got %T", armInput)
	}

	// Set property ‘BlobIndexMatch’:
	for _, item := range typedInput.BlobIndexMatch {
		var item1 TagFilter
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.BlobIndexMatch = append(filter.BlobIndexMatch, item1)
	}

	// Set property ‘BlobTypes’:
	for _, item := range typedInput.BlobTypes {
		filter.BlobTypes = append(filter.BlobTypes, item)
	}

	// Set property ‘PrefixMatch’:
	for _, item := range typedInput.PrefixMatch {
		filter.PrefixMatch = append(filter.PrefixMatch, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyFilter populates our ManagementPolicyFilter from the provided source ManagementPolicyFilter
func (filter *ManagementPolicyFilter) AssignPropertiesFromManagementPolicyFilter(source *v1alpha1api20210401storage.ManagementPolicyFilter) error {

	// BlobIndexMatch
	if source.BlobIndexMatch != nil {
		blobIndexMatchList := make([]TagFilter, len(source.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range source.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch TagFilter
			err := blobIndexMatch.AssignPropertiesFromTagFilter(&blobIndexMatchItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromTagFilter() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		filter.BlobIndexMatch = blobIndexMatchList
	} else {
		filter.BlobIndexMatch = nil
	}

	// BlobTypes
	filter.BlobTypes = genruntime.CloneSliceOfString(source.BlobTypes)

	// PrefixMatch
	filter.PrefixMatch = genruntime.CloneSliceOfString(source.PrefixMatch)

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyFilter populates the provided destination ManagementPolicyFilter from our ManagementPolicyFilter
func (filter *ManagementPolicyFilter) AssignPropertiesToManagementPolicyFilter(destination *v1alpha1api20210401storage.ManagementPolicyFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobIndexMatch
	if filter.BlobIndexMatch != nil {
		blobIndexMatchList := make([]v1alpha1api20210401storage.TagFilter, len(filter.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range filter.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch v1alpha1api20210401storage.TagFilter
			err := blobIndexMatchItem.AssignPropertiesToTagFilter(&blobIndexMatch)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToTagFilter() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		destination.BlobIndexMatch = blobIndexMatchList
	} else {
		destination.BlobIndexMatch = nil
	}

	// BlobTypes
	destination.BlobTypes = genruntime.CloneSliceOfString(filter.BlobTypes)

	// PrefixMatch
	destination.PrefixMatch = genruntime.CloneSliceOfString(filter.PrefixMatch)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyFilter_Status. Use v1beta20210401.ManagementPolicyFilter_Status instead
type ManagementPolicyFilter_Status struct {
	BlobIndexMatch []TagFilter_Status `json:"blobIndexMatch,omitempty"`
	BlobTypes      []string           `json:"blobTypes,omitempty"`
	PrefixMatch    []string           `json:"prefixMatch,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyFilter_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *ManagementPolicyFilter_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *ManagementPolicyFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘BlobIndexMatch’:
	for _, item := range typedInput.BlobIndexMatch {
		var item1 TagFilter_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		filter.BlobIndexMatch = append(filter.BlobIndexMatch, item1)
	}

	// Set property ‘BlobTypes’:
	for _, item := range typedInput.BlobTypes {
		filter.BlobTypes = append(filter.BlobTypes, item)
	}

	// Set property ‘PrefixMatch’:
	for _, item := range typedInput.PrefixMatch {
		filter.PrefixMatch = append(filter.PrefixMatch, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyFilterStatus populates our ManagementPolicyFilter_Status from the provided source ManagementPolicyFilter_Status
func (filter *ManagementPolicyFilter_Status) AssignPropertiesFromManagementPolicyFilterStatus(source *v1alpha1api20210401storage.ManagementPolicyFilter_Status) error {

	// BlobIndexMatch
	if source.BlobIndexMatch != nil {
		blobIndexMatchList := make([]TagFilter_Status, len(source.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range source.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch TagFilter_Status
			err := blobIndexMatch.AssignPropertiesFromTagFilterStatus(&blobIndexMatchItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromTagFilterStatus() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		filter.BlobIndexMatch = blobIndexMatchList
	} else {
		filter.BlobIndexMatch = nil
	}

	// BlobTypes
	filter.BlobTypes = genruntime.CloneSliceOfString(source.BlobTypes)

	// PrefixMatch
	filter.PrefixMatch = genruntime.CloneSliceOfString(source.PrefixMatch)

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyFilterStatus populates the provided destination ManagementPolicyFilter_Status from our ManagementPolicyFilter_Status
func (filter *ManagementPolicyFilter_Status) AssignPropertiesToManagementPolicyFilterStatus(destination *v1alpha1api20210401storage.ManagementPolicyFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobIndexMatch
	if filter.BlobIndexMatch != nil {
		blobIndexMatchList := make([]v1alpha1api20210401storage.TagFilter_Status, len(filter.BlobIndexMatch))
		for blobIndexMatchIndex, blobIndexMatchItem := range filter.BlobIndexMatch {
			// Shadow the loop variable to avoid aliasing
			blobIndexMatchItem := blobIndexMatchItem
			var blobIndexMatch v1alpha1api20210401storage.TagFilter_Status
			err := blobIndexMatchItem.AssignPropertiesToTagFilterStatus(&blobIndexMatch)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToTagFilterStatus() to populate field BlobIndexMatch")
			}
			blobIndexMatchList[blobIndexMatchIndex] = blobIndexMatch
		}
		destination.BlobIndexMatch = blobIndexMatchList
	} else {
		destination.BlobIndexMatch = nil
	}

	// BlobTypes
	destination.BlobTypes = genruntime.CloneSliceOfString(filter.BlobTypes)

	// PrefixMatch
	destination.PrefixMatch = genruntime.CloneSliceOfString(filter.PrefixMatch)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyBaseBlob. Use v1beta20210401.ManagementPolicyBaseBlob instead
type ManagementPolicyBaseBlob struct {
	Delete                      *DateAfterModification `json:"delete,omitempty"`
	EnableAutoTierToHotFromCool *bool                  `json:"enableAutoTierToHotFromCool,omitempty"`
	TierToArchive               *DateAfterModification `json:"tierToArchive,omitempty"`
	TierToCool                  *DateAfterModification `json:"tierToCool,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyBaseBlob{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (blob *ManagementPolicyBaseBlob) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if blob == nil {
		return nil, nil
	}
	var result ManagementPolicyBaseBlobARM

	// Set property ‘Delete’:
	if blob.Delete != nil {
		deleteARM, err := (*blob.Delete).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		delete := deleteARM.(DateAfterModificationARM)
		result.Delete = &delete
	}

	// Set property ‘EnableAutoTierToHotFromCool’:
	if blob.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *blob.EnableAutoTierToHotFromCool
		result.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	}

	// Set property ‘TierToArchive’:
	if blob.TierToArchive != nil {
		tierToArchiveARM, err := (*blob.TierToArchive).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToArchive := tierToArchiveARM.(DateAfterModificationARM)
		result.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if blob.TierToCool != nil {
		tierToCoolARM, err := (*blob.TierToCool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToCool := tierToCoolARM.(DateAfterModificationARM)
		result.TierToCool = &tierToCool
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (blob *ManagementPolicyBaseBlob) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyBaseBlobARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (blob *ManagementPolicyBaseBlob) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyBaseBlobARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyBaseBlobARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterModification
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		blob.Delete = &delete
	}

	// Set property ‘EnableAutoTierToHotFromCool’:
	if typedInput.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *typedInput.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterModification
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		blob.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterModification
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		blob.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyBaseBlob populates our ManagementPolicyBaseBlob from the provided source ManagementPolicyBaseBlob
func (blob *ManagementPolicyBaseBlob) AssignPropertiesFromManagementPolicyBaseBlob(source *v1alpha1api20210401storage.ManagementPolicyBaseBlob) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterModification
		err := delete.AssignPropertiesFromDateAfterModification(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterModification() to populate field Delete")
		}
		blob.Delete = &delete
	} else {
		blob.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if source.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *source.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		blob.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterModification
		err := tierToArchive.AssignPropertiesFromDateAfterModification(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterModification() to populate field TierToArchive")
		}
		blob.TierToArchive = &tierToArchive
	} else {
		blob.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterModification
		err := tierToCool.AssignPropertiesFromDateAfterModification(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterModification() to populate field TierToCool")
		}
		blob.TierToCool = &tierToCool
	} else {
		blob.TierToCool = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyBaseBlob populates the provided destination ManagementPolicyBaseBlob from our ManagementPolicyBaseBlob
func (blob *ManagementPolicyBaseBlob) AssignPropertiesToManagementPolicyBaseBlob(destination *v1alpha1api20210401storage.ManagementPolicyBaseBlob) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if blob.Delete != nil {
		var delete v1alpha1api20210401storage.DateAfterModification
		err := blob.Delete.AssignPropertiesToDateAfterModification(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterModification() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if blob.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *blob.EnableAutoTierToHotFromCool
		destination.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		destination.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if blob.TierToArchive != nil {
		var tierToArchive v1alpha1api20210401storage.DateAfterModification
		err := blob.TierToArchive.AssignPropertiesToDateAfterModification(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterModification() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if blob.TierToCool != nil {
		var tierToCool v1alpha1api20210401storage.DateAfterModification
		err := blob.TierToCool.AssignPropertiesToDateAfterModification(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterModification() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyBaseBlob_Status. Use v1beta20210401.ManagementPolicyBaseBlob_Status instead
type ManagementPolicyBaseBlob_Status struct {
	Delete                      *DateAfterModification_Status `json:"delete,omitempty"`
	EnableAutoTierToHotFromCool *bool                         `json:"enableAutoTierToHotFromCool,omitempty"`
	TierToArchive               *DateAfterModification_Status `json:"tierToArchive,omitempty"`
	TierToCool                  *DateAfterModification_Status `json:"tierToCool,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyBaseBlob_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (blob *ManagementPolicyBaseBlob_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyBaseBlob_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (blob *ManagementPolicyBaseBlob_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyBaseBlob_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyBaseBlob_StatusARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterModification_Status
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		blob.Delete = &delete
	}

	// Set property ‘EnableAutoTierToHotFromCool’:
	if typedInput.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *typedInput.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterModification_Status
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		blob.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterModification_Status
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		blob.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyBaseBlobStatus populates our ManagementPolicyBaseBlob_Status from the provided source ManagementPolicyBaseBlob_Status
func (blob *ManagementPolicyBaseBlob_Status) AssignPropertiesFromManagementPolicyBaseBlobStatus(source *v1alpha1api20210401storage.ManagementPolicyBaseBlob_Status) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterModification_Status
		err := delete.AssignPropertiesFromDateAfterModificationStatus(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterModificationStatus() to populate field Delete")
		}
		blob.Delete = &delete
	} else {
		blob.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if source.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *source.EnableAutoTierToHotFromCool
		blob.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		blob.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterModification_Status
		err := tierToArchive.AssignPropertiesFromDateAfterModificationStatus(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterModificationStatus() to populate field TierToArchive")
		}
		blob.TierToArchive = &tierToArchive
	} else {
		blob.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterModification_Status
		err := tierToCool.AssignPropertiesFromDateAfterModificationStatus(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterModificationStatus() to populate field TierToCool")
		}
		blob.TierToCool = &tierToCool
	} else {
		blob.TierToCool = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyBaseBlobStatus populates the provided destination ManagementPolicyBaseBlob_Status from our ManagementPolicyBaseBlob_Status
func (blob *ManagementPolicyBaseBlob_Status) AssignPropertiesToManagementPolicyBaseBlobStatus(destination *v1alpha1api20210401storage.ManagementPolicyBaseBlob_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if blob.Delete != nil {
		var delete v1alpha1api20210401storage.DateAfterModification_Status
		err := blob.Delete.AssignPropertiesToDateAfterModificationStatus(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterModificationStatus() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// EnableAutoTierToHotFromCool
	if blob.EnableAutoTierToHotFromCool != nil {
		enableAutoTierToHotFromCool := *blob.EnableAutoTierToHotFromCool
		destination.EnableAutoTierToHotFromCool = &enableAutoTierToHotFromCool
	} else {
		destination.EnableAutoTierToHotFromCool = nil
	}

	// TierToArchive
	if blob.TierToArchive != nil {
		var tierToArchive v1alpha1api20210401storage.DateAfterModification_Status
		err := blob.TierToArchive.AssignPropertiesToDateAfterModificationStatus(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterModificationStatus() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if blob.TierToCool != nil {
		var tierToCool v1alpha1api20210401storage.DateAfterModification_Status
		err := blob.TierToCool.AssignPropertiesToDateAfterModificationStatus(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterModificationStatus() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicySnapShot. Use v1beta20210401.ManagementPolicySnapShot instead
type ManagementPolicySnapShot struct {
	Delete        *DateAfterCreation `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation `json:"tierToCool,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicySnapShot{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (shot *ManagementPolicySnapShot) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if shot == nil {
		return nil, nil
	}
	var result ManagementPolicySnapShotARM

	// Set property ‘Delete’:
	if shot.Delete != nil {
		deleteARM, err := (*shot.Delete).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		delete := deleteARM.(DateAfterCreationARM)
		result.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if shot.TierToArchive != nil {
		tierToArchiveARM, err := (*shot.TierToArchive).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToArchive := tierToArchiveARM.(DateAfterCreationARM)
		result.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if shot.TierToCool != nil {
		tierToCoolARM, err := (*shot.TierToCool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToCool := tierToCoolARM.(DateAfterCreationARM)
		result.TierToCool = &tierToCool
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (shot *ManagementPolicySnapShot) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySnapShotARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (shot *ManagementPolicySnapShot) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySnapShotARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySnapShotARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		shot.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		shot.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		shot.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicySnapShot populates our ManagementPolicySnapShot from the provided source ManagementPolicySnapShot
func (shot *ManagementPolicySnapShot) AssignPropertiesFromManagementPolicySnapShot(source *v1alpha1api20210401storage.ManagementPolicySnapShot) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation
		err := delete.AssignPropertiesFromDateAfterCreation(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreation() to populate field Delete")
		}
		shot.Delete = &delete
	} else {
		shot.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation
		err := tierToArchive.AssignPropertiesFromDateAfterCreation(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreation() to populate field TierToArchive")
		}
		shot.TierToArchive = &tierToArchive
	} else {
		shot.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation
		err := tierToCool.AssignPropertiesFromDateAfterCreation(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreation() to populate field TierToCool")
		}
		shot.TierToCool = &tierToCool
	} else {
		shot.TierToCool = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicySnapShot populates the provided destination ManagementPolicySnapShot from our ManagementPolicySnapShot
func (shot *ManagementPolicySnapShot) AssignPropertiesToManagementPolicySnapShot(destination *v1alpha1api20210401storage.ManagementPolicySnapShot) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if shot.Delete != nil {
		var delete v1alpha1api20210401storage.DateAfterCreation
		err := shot.Delete.AssignPropertiesToDateAfterCreation(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreation() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if shot.TierToArchive != nil {
		var tierToArchive v1alpha1api20210401storage.DateAfterCreation
		err := shot.TierToArchive.AssignPropertiesToDateAfterCreation(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreation() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if shot.TierToCool != nil {
		var tierToCool v1alpha1api20210401storage.DateAfterCreation
		err := shot.TierToCool.AssignPropertiesToDateAfterCreation(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreation() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicySnapShot_Status. Use v1beta20210401.ManagementPolicySnapShot_Status instead
type ManagementPolicySnapShot_Status struct {
	Delete        *DateAfterCreation_Status `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation_Status `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation_Status `json:"tierToCool,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicySnapShot_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (shot *ManagementPolicySnapShot_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicySnapShot_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (shot *ManagementPolicySnapShot_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicySnapShot_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicySnapShot_StatusARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation_Status
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		shot.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation_Status
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		shot.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation_Status
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		shot.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicySnapShotStatus populates our ManagementPolicySnapShot_Status from the provided source ManagementPolicySnapShot_Status
func (shot *ManagementPolicySnapShot_Status) AssignPropertiesFromManagementPolicySnapShotStatus(source *v1alpha1api20210401storage.ManagementPolicySnapShot_Status) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation_Status
		err := delete.AssignPropertiesFromDateAfterCreationStatus(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreationStatus() to populate field Delete")
		}
		shot.Delete = &delete
	} else {
		shot.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation_Status
		err := tierToArchive.AssignPropertiesFromDateAfterCreationStatus(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreationStatus() to populate field TierToArchive")
		}
		shot.TierToArchive = &tierToArchive
	} else {
		shot.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation_Status
		err := tierToCool.AssignPropertiesFromDateAfterCreationStatus(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreationStatus() to populate field TierToCool")
		}
		shot.TierToCool = &tierToCool
	} else {
		shot.TierToCool = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicySnapShotStatus populates the provided destination ManagementPolicySnapShot_Status from our ManagementPolicySnapShot_Status
func (shot *ManagementPolicySnapShot_Status) AssignPropertiesToManagementPolicySnapShotStatus(destination *v1alpha1api20210401storage.ManagementPolicySnapShot_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if shot.Delete != nil {
		var delete v1alpha1api20210401storage.DateAfterCreation_Status
		err := shot.Delete.AssignPropertiesToDateAfterCreationStatus(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreationStatus() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if shot.TierToArchive != nil {
		var tierToArchive v1alpha1api20210401storage.DateAfterCreation_Status
		err := shot.TierToArchive.AssignPropertiesToDateAfterCreationStatus(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreationStatus() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if shot.TierToCool != nil {
		var tierToCool v1alpha1api20210401storage.DateAfterCreation_Status
		err := shot.TierToCool.AssignPropertiesToDateAfterCreationStatus(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreationStatus() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyVersion. Use v1beta20210401.ManagementPolicyVersion instead
type ManagementPolicyVersion struct {
	Delete        *DateAfterCreation `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation `json:"tierToCool,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagementPolicyVersion{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (version *ManagementPolicyVersion) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if version == nil {
		return nil, nil
	}
	var result ManagementPolicyVersionARM

	// Set property ‘Delete’:
	if version.Delete != nil {
		deleteARM, err := (*version.Delete).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		delete := deleteARM.(DateAfterCreationARM)
		result.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if version.TierToArchive != nil {
		tierToArchiveARM, err := (*version.TierToArchive).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToArchive := tierToArchiveARM.(DateAfterCreationARM)
		result.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if version.TierToCool != nil {
		tierToCoolARM, err := (*version.TierToCool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tierToCool := tierToCoolARM.(DateAfterCreationARM)
		result.TierToCool = &tierToCool
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (version *ManagementPolicyVersion) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyVersionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (version *ManagementPolicyVersion) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyVersionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyVersionARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		version.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		version.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		version.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyVersion populates our ManagementPolicyVersion from the provided source ManagementPolicyVersion
func (version *ManagementPolicyVersion) AssignPropertiesFromManagementPolicyVersion(source *v1alpha1api20210401storage.ManagementPolicyVersion) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation
		err := delete.AssignPropertiesFromDateAfterCreation(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreation() to populate field Delete")
		}
		version.Delete = &delete
	} else {
		version.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation
		err := tierToArchive.AssignPropertiesFromDateAfterCreation(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreation() to populate field TierToArchive")
		}
		version.TierToArchive = &tierToArchive
	} else {
		version.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation
		err := tierToCool.AssignPropertiesFromDateAfterCreation(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreation() to populate field TierToCool")
		}
		version.TierToCool = &tierToCool
	} else {
		version.TierToCool = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyVersion populates the provided destination ManagementPolicyVersion from our ManagementPolicyVersion
func (version *ManagementPolicyVersion) AssignPropertiesToManagementPolicyVersion(destination *v1alpha1api20210401storage.ManagementPolicyVersion) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if version.Delete != nil {
		var delete v1alpha1api20210401storage.DateAfterCreation
		err := version.Delete.AssignPropertiesToDateAfterCreation(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreation() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if version.TierToArchive != nil {
		var tierToArchive v1alpha1api20210401storage.DateAfterCreation
		err := version.TierToArchive.AssignPropertiesToDateAfterCreation(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreation() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if version.TierToCool != nil {
		var tierToCool v1alpha1api20210401storage.DateAfterCreation
		err := version.TierToCool.AssignPropertiesToDateAfterCreation(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreation() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ManagementPolicyVersion_Status. Use v1beta20210401.ManagementPolicyVersion_Status instead
type ManagementPolicyVersion_Status struct {
	Delete        *DateAfterCreation_Status `json:"delete,omitempty"`
	TierToArchive *DateAfterCreation_Status `json:"tierToArchive,omitempty"`
	TierToCool    *DateAfterCreation_Status `json:"tierToCool,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagementPolicyVersion_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (version *ManagementPolicyVersion_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagementPolicyVersion_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (version *ManagementPolicyVersion_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagementPolicyVersion_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagementPolicyVersion_StatusARM, got %T", armInput)
	}

	// Set property ‘Delete’:
	if typedInput.Delete != nil {
		var delete1 DateAfterCreation_Status
		err := delete1.PopulateFromARM(owner, *typedInput.Delete)
		if err != nil {
			return err
		}
		delete := delete1
		version.Delete = &delete
	}

	// Set property ‘TierToArchive’:
	if typedInput.TierToArchive != nil {
		var tierToArchive1 DateAfterCreation_Status
		err := tierToArchive1.PopulateFromARM(owner, *typedInput.TierToArchive)
		if err != nil {
			return err
		}
		tierToArchive := tierToArchive1
		version.TierToArchive = &tierToArchive
	}

	// Set property ‘TierToCool’:
	if typedInput.TierToCool != nil {
		var tierToCool1 DateAfterCreation_Status
		err := tierToCool1.PopulateFromARM(owner, *typedInput.TierToCool)
		if err != nil {
			return err
		}
		tierToCool := tierToCool1
		version.TierToCool = &tierToCool
	}

	// No error
	return nil
}

// AssignPropertiesFromManagementPolicyVersionStatus populates our ManagementPolicyVersion_Status from the provided source ManagementPolicyVersion_Status
func (version *ManagementPolicyVersion_Status) AssignPropertiesFromManagementPolicyVersionStatus(source *v1alpha1api20210401storage.ManagementPolicyVersion_Status) error {

	// Delete
	if source.Delete != nil {
		var delete DateAfterCreation_Status
		err := delete.AssignPropertiesFromDateAfterCreationStatus(source.Delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreationStatus() to populate field Delete")
		}
		version.Delete = &delete
	} else {
		version.Delete = nil
	}

	// TierToArchive
	if source.TierToArchive != nil {
		var tierToArchive DateAfterCreation_Status
		err := tierToArchive.AssignPropertiesFromDateAfterCreationStatus(source.TierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreationStatus() to populate field TierToArchive")
		}
		version.TierToArchive = &tierToArchive
	} else {
		version.TierToArchive = nil
	}

	// TierToCool
	if source.TierToCool != nil {
		var tierToCool DateAfterCreation_Status
		err := tierToCool.AssignPropertiesFromDateAfterCreationStatus(source.TierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDateAfterCreationStatus() to populate field TierToCool")
		}
		version.TierToCool = &tierToCool
	} else {
		version.TierToCool = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagementPolicyVersionStatus populates the provided destination ManagementPolicyVersion_Status from our ManagementPolicyVersion_Status
func (version *ManagementPolicyVersion_Status) AssignPropertiesToManagementPolicyVersionStatus(destination *v1alpha1api20210401storage.ManagementPolicyVersion_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Delete
	if version.Delete != nil {
		var delete v1alpha1api20210401storage.DateAfterCreation_Status
		err := version.Delete.AssignPropertiesToDateAfterCreationStatus(&delete)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreationStatus() to populate field Delete")
		}
		destination.Delete = &delete
	} else {
		destination.Delete = nil
	}

	// TierToArchive
	if version.TierToArchive != nil {
		var tierToArchive v1alpha1api20210401storage.DateAfterCreation_Status
		err := version.TierToArchive.AssignPropertiesToDateAfterCreationStatus(&tierToArchive)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreationStatus() to populate field TierToArchive")
		}
		destination.TierToArchive = &tierToArchive
	} else {
		destination.TierToArchive = nil
	}

	// TierToCool
	if version.TierToCool != nil {
		var tierToCool v1alpha1api20210401storage.DateAfterCreation_Status
		err := version.TierToCool.AssignPropertiesToDateAfterCreationStatus(&tierToCool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDateAfterCreationStatus() to populate field TierToCool")
		}
		destination.TierToCool = &tierToCool
	} else {
		destination.TierToCool = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of TagFilter. Use v1beta20210401.TagFilter instead
type TagFilter struct {
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=128
	// +kubebuilder:validation:MinLength=1
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	Op *string `json:"op,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=256
	// +kubebuilder:validation:MinLength=0
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &TagFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *TagFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	var result TagFilterARM

	// Set property ‘Name’:
	if filter.Name != nil {
		name := *filter.Name
		result.Name = &name
	}

	// Set property ‘Op’:
	if filter.Op != nil {
		op := *filter.Op
		result.Op = &op
	}

	// Set property ‘Value’:
	if filter.Value != nil {
		value := *filter.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *TagFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TagFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *TagFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TagFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TagFilterARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		filter.Name = &name
	}

	// Set property ‘Op’:
	if typedInput.Op != nil {
		op := *typedInput.Op
		filter.Op = &op
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		filter.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromTagFilter populates our TagFilter from the provided source TagFilter
func (filter *TagFilter) AssignPropertiesFromTagFilter(source *v1alpha1api20210401storage.TagFilter) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		filter.Name = &name
	} else {
		filter.Name = nil
	}

	// Op
	filter.Op = genruntime.ClonePointerToString(source.Op)

	// Value
	if source.Value != nil {
		value := *source.Value
		filter.Value = &value
	} else {
		filter.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToTagFilter populates the provided destination TagFilter from our TagFilter
func (filter *TagFilter) AssignPropertiesToTagFilter(destination *v1alpha1api20210401storage.TagFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if filter.Name != nil {
		name := *filter.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Op
	destination.Op = genruntime.ClonePointerToString(filter.Op)

	// Value
	if filter.Value != nil {
		value := *filter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of TagFilter_Status. Use v1beta20210401.TagFilter_Status instead
type TagFilter_Status struct {
	Name  *string `json:"name,omitempty"`
	Op    *string `json:"op,omitempty"`
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &TagFilter_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *TagFilter_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TagFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *TagFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TagFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TagFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		filter.Name = &name
	}

	// Set property ‘Op’:
	if typedInput.Op != nil {
		op := *typedInput.Op
		filter.Op = &op
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		filter.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromTagFilterStatus populates our TagFilter_Status from the provided source TagFilter_Status
func (filter *TagFilter_Status) AssignPropertiesFromTagFilterStatus(source *v1alpha1api20210401storage.TagFilter_Status) error {

	// Name
	filter.Name = genruntime.ClonePointerToString(source.Name)

	// Op
	filter.Op = genruntime.ClonePointerToString(source.Op)

	// Value
	filter.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToTagFilterStatus populates the provided destination TagFilter_Status from our TagFilter_Status
func (filter *TagFilter_Status) AssignPropertiesToTagFilterStatus(destination *v1alpha1api20210401storage.TagFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(filter.Name)

	// Op
	destination.Op = genruntime.ClonePointerToString(filter.Op)

	// Value
	destination.Value = genruntime.ClonePointerToString(filter.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of DateAfterCreation. Use v1beta20210401.DateAfterCreation instead
type DateAfterCreation struct {
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:MultipleOf=1
	DaysAfterCreationGreaterThan *int `json:"daysAfterCreationGreaterThan,omitempty"`
}

var _ genruntime.ARMTransformer = &DateAfterCreation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (creation *DateAfterCreation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if creation == nil {
		return nil, nil
	}
	var result DateAfterCreationARM

	// Set property ‘DaysAfterCreationGreaterThan’:
	if creation.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *creation.DaysAfterCreationGreaterThan
		result.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (creation *DateAfterCreation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterCreationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (creation *DateAfterCreation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterCreationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterCreationARM, got %T", armInput)
	}

	// Set property ‘DaysAfterCreationGreaterThan’:
	if typedInput.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *typedInput.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	}

	// No error
	return nil
}

// AssignPropertiesFromDateAfterCreation populates our DateAfterCreation from the provided source DateAfterCreation
func (creation *DateAfterCreation) AssignPropertiesFromDateAfterCreation(source *v1alpha1api20210401storage.DateAfterCreation) error {

	// DaysAfterCreationGreaterThan
	if source.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *source.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		creation.DaysAfterCreationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDateAfterCreation populates the provided destination DateAfterCreation from our DateAfterCreation
func (creation *DateAfterCreation) AssignPropertiesToDateAfterCreation(destination *v1alpha1api20210401storage.DateAfterCreation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterCreationGreaterThan
	if creation.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *creation.DaysAfterCreationGreaterThan
		destination.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		destination.DaysAfterCreationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of DateAfterCreation_Status. Use v1beta20210401.DateAfterCreation_Status instead
type DateAfterCreation_Status struct {
	DaysAfterCreationGreaterThan *float64 `json:"daysAfterCreationGreaterThan,omitempty"`
}

var _ genruntime.FromARMConverter = &DateAfterCreation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (creation *DateAfterCreation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterCreation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (creation *DateAfterCreation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterCreation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterCreation_StatusARM, got %T", armInput)
	}

	// Set property ‘DaysAfterCreationGreaterThan’:
	if typedInput.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *typedInput.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	}

	// No error
	return nil
}

// AssignPropertiesFromDateAfterCreationStatus populates our DateAfterCreation_Status from the provided source DateAfterCreation_Status
func (creation *DateAfterCreation_Status) AssignPropertiesFromDateAfterCreationStatus(source *v1alpha1api20210401storage.DateAfterCreation_Status) error {

	// DaysAfterCreationGreaterThan
	if source.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *source.DaysAfterCreationGreaterThan
		creation.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		creation.DaysAfterCreationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDateAfterCreationStatus populates the provided destination DateAfterCreation_Status from our DateAfterCreation_Status
func (creation *DateAfterCreation_Status) AssignPropertiesToDateAfterCreationStatus(destination *v1alpha1api20210401storage.DateAfterCreation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterCreationGreaterThan
	if creation.DaysAfterCreationGreaterThan != nil {
		daysAfterCreationGreaterThan := *creation.DaysAfterCreationGreaterThan
		destination.DaysAfterCreationGreaterThan = &daysAfterCreationGreaterThan
	} else {
		destination.DaysAfterCreationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of DateAfterModification. Use v1beta20210401.DateAfterModification instead
type DateAfterModification struct {
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:MultipleOf=1
	DaysAfterLastAccessTimeGreaterThan *int `json:"daysAfterLastAccessTimeGreaterThan,omitempty"`

	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:MultipleOf=1
	DaysAfterModificationGreaterThan *int `json:"daysAfterModificationGreaterThan,omitempty"`
}

var _ genruntime.ARMTransformer = &DateAfterModification{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (modification *DateAfterModification) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if modification == nil {
		return nil, nil
	}
	var result DateAfterModificationARM

	// Set property ‘DaysAfterLastAccessTimeGreaterThan’:
	if modification.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *modification.DaysAfterLastAccessTimeGreaterThan
		result.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	}

	// Set property ‘DaysAfterModificationGreaterThan’:
	if modification.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *modification.DaysAfterModificationGreaterThan
		result.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (modification *DateAfterModification) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterModificationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (modification *DateAfterModification) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterModificationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterModificationARM, got %T", armInput)
	}

	// Set property ‘DaysAfterLastAccessTimeGreaterThan’:
	if typedInput.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *typedInput.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	}

	// Set property ‘DaysAfterModificationGreaterThan’:
	if typedInput.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *typedInput.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	}

	// No error
	return nil
}

// AssignPropertiesFromDateAfterModification populates our DateAfterModification from the provided source DateAfterModification
func (modification *DateAfterModification) AssignPropertiesFromDateAfterModification(source *v1alpha1api20210401storage.DateAfterModification) error {

	// DaysAfterLastAccessTimeGreaterThan
	if source.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *source.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		modification.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if source.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *source.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		modification.DaysAfterModificationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDateAfterModification populates the provided destination DateAfterModification from our DateAfterModification
func (modification *DateAfterModification) AssignPropertiesToDateAfterModification(destination *v1alpha1api20210401storage.DateAfterModification) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterLastAccessTimeGreaterThan
	if modification.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *modification.DaysAfterLastAccessTimeGreaterThan
		destination.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		destination.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if modification.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *modification.DaysAfterModificationGreaterThan
		destination.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		destination.DaysAfterModificationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of DateAfterModification_Status. Use v1beta20210401.DateAfterModification_Status instead
type DateAfterModification_Status struct {
	DaysAfterLastAccessTimeGreaterThan *float64 `json:"daysAfterLastAccessTimeGreaterThan,omitempty"`
	DaysAfterModificationGreaterThan   *float64 `json:"daysAfterModificationGreaterThan,omitempty"`
}

var _ genruntime.FromARMConverter = &DateAfterModification_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (modification *DateAfterModification_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DateAfterModification_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (modification *DateAfterModification_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DateAfterModification_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DateAfterModification_StatusARM, got %T", armInput)
	}

	// Set property ‘DaysAfterLastAccessTimeGreaterThan’:
	if typedInput.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *typedInput.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	}

	// Set property ‘DaysAfterModificationGreaterThan’:
	if typedInput.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *typedInput.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	}

	// No error
	return nil
}

// AssignPropertiesFromDateAfterModificationStatus populates our DateAfterModification_Status from the provided source DateAfterModification_Status
func (modification *DateAfterModification_Status) AssignPropertiesFromDateAfterModificationStatus(source *v1alpha1api20210401storage.DateAfterModification_Status) error {

	// DaysAfterLastAccessTimeGreaterThan
	if source.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *source.DaysAfterLastAccessTimeGreaterThan
		modification.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		modification.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if source.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *source.DaysAfterModificationGreaterThan
		modification.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		modification.DaysAfterModificationGreaterThan = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDateAfterModificationStatus populates the provided destination DateAfterModification_Status from our DateAfterModification_Status
func (modification *DateAfterModification_Status) AssignPropertiesToDateAfterModificationStatus(destination *v1alpha1api20210401storage.DateAfterModification_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DaysAfterLastAccessTimeGreaterThan
	if modification.DaysAfterLastAccessTimeGreaterThan != nil {
		daysAfterLastAccessTimeGreaterThan := *modification.DaysAfterLastAccessTimeGreaterThan
		destination.DaysAfterLastAccessTimeGreaterThan = &daysAfterLastAccessTimeGreaterThan
	} else {
		destination.DaysAfterLastAccessTimeGreaterThan = nil
	}

	// DaysAfterModificationGreaterThan
	if modification.DaysAfterModificationGreaterThan != nil {
		daysAfterModificationGreaterThan := *modification.DaysAfterModificationGreaterThan
		destination.DaysAfterModificationGreaterThan = &daysAfterModificationGreaterThan
	} else {
		destination.DaysAfterModificationGreaterThan = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&StorageAccountsManagementPolicy{}, &StorageAccountsManagementPolicyList{})
}
