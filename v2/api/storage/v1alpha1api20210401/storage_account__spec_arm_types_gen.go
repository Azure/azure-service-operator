// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type StorageAccount_SpecARM struct {
	AzureName string `json:"azureName"`

	//ExtendedLocation: Optional. Set the extended location of the resource. If not
	//set, the storage account will be created in Azure main region. Otherwise it will
	//be created in the specified extended location
	ExtendedLocation *ExtendedLocationARM `json:"extendedLocation,omitempty"`

	//Identity: The identity of the resource.
	Identity *IdentityARM `json:"identity,omitempty"`

	//Kind: Required. Indicates the type of storage account.
	Kind StorageAccount_SpecKind `json:"kind"`

	//Location: Required. Gets or sets the location of the resource. This will be one
	//of the supported and registered Azure Geo Regions (e.g. West US, East US,
	//Southeast Asia, etc.). The geo region of a resource cannot be changed once it is
	//created, but if an identical geo region is specified on update, the request will
	//succeed.
	Location string `json:"location"`
	Name     string `json:"name"`

	//Properties: The parameters used to create the storage account.
	Properties *StorageAccountPropertiesARM `json:"properties,omitempty"`

	//Sku: Required. Gets or sets the SKU name.
	Sku SkuARM `json:"sku"`

	//Tags: Gets or sets a list of key value pairs that describe the resource. These
	//tags can be used for viewing and grouping this resource (across resource
	//groups). A maximum of 15 tags can be provided for a resource. Each tag must have
	//a key with a length no greater than 128 characters and a value with a length no
	//greater than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &StorageAccount_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01"
func (account StorageAccount_SpecARM) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetName returns the Name of the resource
func (account StorageAccount_SpecARM) GetName() string {
	return account.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts"
func (account StorageAccount_SpecARM) GetType() string {
	return "Microsoft.Storage/storageAccounts"
}

type ExtendedLocationARM struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType `json:"type,omitempty"`
}

type IdentityARM struct {
	//Type: The identity type.
	Type IdentityType `json:"type"`
}

type SkuARM struct {
	Name SkuName `json:"name"`
	Tier *Tier   `json:"tier,omitempty"`
}

type StorageAccountPropertiesARM struct {
	//AccessTier: Required for storage accounts where kind = BlobStorage. The access
	//tier used for billing.
	AccessTier *StorageAccountPropertiesAccessTier `json:"accessTier,omitempty"`

	//AllowBlobPublicAccess: Allow or disallow public access to all blobs or
	//containers in the storage account. The default interpretation is true for this
	//property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	//AllowCrossTenantReplication: Allow or disallow cross AAD tenant object
	//replication. The default interpretation is true for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	//AllowSharedKeyAccess: Indicates whether the storage account permits requests to
	//be authorized with the account access key via Shared Key. If false, then all
	//requests, including shared access signatures, must be authorized with Azure
	//Active Directory (Azure AD). The default value is null, which is equivalent to
	//true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	//AzureFilesIdentityBasedAuthentication: Provides the identity based
	//authentication settings for Azure Files.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthenticationARM `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	//CustomDomain: User domain assigned to the storage account. Name is the CNAME
	//source. Only one custom domain is supported per storage account at this time. To
	//clear the existing custom domain, use an empty string for the custom domain name
	//property.
	CustomDomain *CustomDomainARM `json:"customDomain,omitempty"`

	//Encryption: Not applicable. Azure Storage encryption is enabled for all storage
	//accounts and cannot be disabled.
	Encryption *EncryptionARM `json:"encryption,omitempty"`

	//IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	//IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	//KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicyARM `json:"keyPolicy,omitempty"`

	//LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be
	//disabled once it is enabled.
	LargeFileSharesState *StorageAccountPropertiesLargeFileSharesState `json:"largeFileSharesState,omitempty"`

	//MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to
	//storage. The default interpretation is TLS 1.0 for this property.
	MinimumTlsVersion *StorageAccountPropertiesMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSetARM `json:"networkAcls,omitempty"`

	//RoutingPreference: Maintains information about the network routing choice opted
	//by the user for data transfer
	RoutingPreference *RoutingPreferenceARM `json:"routingPreference,omitempty"`

	//SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicyARM `json:"sasPolicy,omitempty"`

	//SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets
	//to true. The default value is true since API version 2019-04-01.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`
}

// +kubebuilder:validation:Enum={"BlobStorage","BlockBlobStorage","FileStorage","Storage","StorageV2"}
type StorageAccount_SpecKind string

const (
	StorageAccount_SpecKindBlobStorage      = StorageAccount_SpecKind("BlobStorage")
	StorageAccount_SpecKindBlockBlobStorage = StorageAccount_SpecKind("BlockBlobStorage")
	StorageAccount_SpecKindFileStorage      = StorageAccount_SpecKind("FileStorage")
	StorageAccount_SpecKindStorage          = StorageAccount_SpecKind("Storage")
	StorageAccount_SpecKindStorageV2        = StorageAccount_SpecKind("StorageV2")
)

type AzureFilesIdentityBasedAuthenticationARM struct {
	//ActiveDirectoryProperties: Required if choose AD.
	ActiveDirectoryProperties *ActiveDirectoryPropertiesARM `json:"activeDirectoryProperties,omitempty"`

	//DefaultSharePermission: Default share permission for users using Kerberos
	//authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthenticationDefaultSharePermission `json:"defaultSharePermission,omitempty"`

	//DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions `json:"directoryServiceOptions"`
}

type CustomDomainARM struct {
	//Name: Gets or sets the custom domain name assigned to the storage account. Name
	//is the CNAME source.
	Name string `json:"name"`

	//UseSubDomainName: Indicates whether indirect CName validation is enabled.
	//Default value is false. This should only be set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

type EncryptionARM struct {
	//Identity: The identity to be used with service-side encryption at rest.
	Identity *EncryptionIdentityARM `json:"identity,omitempty"`

	//KeySource: The encryption keySource (provider). Possible values
	//(case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
	KeySource EncryptionKeySource `json:"keySource"`

	//Keyvaultproperties: Properties provided by key vault.
	Keyvaultproperties *KeyVaultPropertiesARM `json:"keyvaultproperties,omitempty"`

	//RequireInfrastructureEncryption: A boolean indicating whether or not the service
	//applies a secondary layer of encryption with platform managed keys for data at
	//rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	//Services: List of services which support encryption.
	Services *EncryptionServicesARM `json:"services,omitempty"`
}

// +kubebuilder:validation:Enum={"EdgeZone"}
type ExtendedLocationType string

const ExtendedLocationTypeEdgeZone = ExtendedLocationType("EdgeZone")

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned,UserAssigned","UserAssigned"}
type IdentityType string

const (
	IdentityTypeNone                       = IdentityType("None")
	IdentityTypeSystemAssigned             = IdentityType("SystemAssigned")
	IdentityTypeSystemAssignedUserAssigned = IdentityType("SystemAssigned,UserAssigned")
	IdentityTypeUserAssigned               = IdentityType("UserAssigned")
)

type KeyPolicyARM struct {
	//KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays int `json:"keyExpirationPeriodInDays"`
}

type NetworkRuleSetARM struct {
	//Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
	//Possible values are any combination of Logging|Metrics|AzureServices (For
	//example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSetBypass `json:"bypass,omitempty"`

	//DefaultAction: Specifies the default action of allow or deny when no other rules
	//match.
	DefaultAction NetworkRuleSetDefaultAction `json:"defaultAction"`

	//IpRules: Sets the IP ACL rules
	IpRules []IPRuleARM `json:"ipRules,omitempty"`

	//ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRuleARM `json:"resourceAccessRules,omitempty"`

	//VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRuleARM `json:"virtualNetworkRules,omitempty"`
}

type RoutingPreferenceARM struct {
	//PublishInternetEndpoints: A boolean flag which indicates whether internet
	//routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	//PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft
	//routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	//RoutingChoice: Routing Choice defines the kind of network routing opted by the
	//user.
	RoutingChoice *RoutingPreferenceRoutingChoice `json:"routingChoice,omitempty"`
}

type SasPolicyARM struct {
	//ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction SasPolicyExpirationAction `json:"expirationAction"`

	//SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod string `json:"sasExpirationPeriod"`
}

// +kubebuilder:validation:Enum={"Premium_LRS","Premium_ZRS","Standard_GRS","Standard_GZRS","Standard_LRS","Standard_RAGRS","Standard_RAGZRS","Standard_ZRS"}
type SkuName string

const (
	SkuNamePremium_LRS     = SkuName("Premium_LRS")
	SkuNamePremium_ZRS     = SkuName("Premium_ZRS")
	SkuNameStandard_GRS    = SkuName("Standard_GRS")
	SkuNameStandard_GZRS   = SkuName("Standard_GZRS")
	SkuNameStandard_LRS    = SkuName("Standard_LRS")
	SkuNameStandard_RAGRS  = SkuName("Standard_RAGRS")
	SkuNameStandard_RAGZRS = SkuName("Standard_RAGZRS")
	SkuNameStandard_ZRS    = SkuName("Standard_ZRS")
)

// +kubebuilder:validation:Enum={"Premium","Standard"}
type Tier string

const (
	TierPremium  = Tier("Premium")
	TierStandard = Tier("Standard")
)

type ActiveDirectoryPropertiesARM struct {
	//AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid string `json:"azureStorageSid"`

	//DomainGuid: Specifies the domain GUID.
	DomainGuid string `json:"domainGuid"`

	//DomainName: Specifies the primary domain that the AD DNS server is authoritative
	//for.
	DomainName string `json:"domainName"`

	//DomainSid: Specifies the security identifier (SID).
	DomainSid string `json:"domainSid"`

	//ForestName: Specifies the Active Directory forest to get.
	ForestName string `json:"forestName"`

	//NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName string `json:"netBiosDomainName"`
}

type EncryptionIdentityARM struct {
	//UserAssignedIdentity: Resource identifier of the UserAssigned identity to be
	//associated with server-side encryption on the storage account.
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

type EncryptionServicesARM struct {
	//Blob: The encryption function of the blob storage service.
	Blob *EncryptionServiceARM `json:"blob,omitempty"`

	//File: The encryption function of the file storage service.
	File *EncryptionServiceARM `json:"file,omitempty"`

	//Queue: The encryption function of the queue storage service.
	Queue *EncryptionServiceARM `json:"queue,omitempty"`

	//Table: The encryption function of the table storage service.
	Table *EncryptionServiceARM `json:"table,omitempty"`
}

type IPRuleARM struct {
	//Action: The action of IP ACL rule.
	Action *IPRuleAction `json:"action,omitempty"`

	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

type KeyVaultPropertiesARM struct {
	//Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	//Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	//Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`
}

type ResourceAccessRuleARM struct {
	//ResourceId: Resource Id
	ResourceId *string `json:"resourceId,omitempty"`

	//TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

type VirtualNetworkRuleARM struct {
	//Action: The action of virtual network rule.
	Action *VirtualNetworkRuleAction `json:"action,omitempty"`

	//Id: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Id string `json:"id"`

	//State: Gets the state of virtual network rule.
	State *VirtualNetworkRuleState `json:"state,omitempty"`
}

type EncryptionServiceARM struct {
	//Enabled: A boolean indicating whether or not the service encrypts the data as it
	//is stored.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyType: Encryption key type to be used for the encryption service. 'Account'
	//key type implies that an account-scoped encryption key will be used. 'Service'
	//key type implies that a default service key is used.
	KeyType *EncryptionServiceKeyType `json:"keyType,omitempty"`
}
