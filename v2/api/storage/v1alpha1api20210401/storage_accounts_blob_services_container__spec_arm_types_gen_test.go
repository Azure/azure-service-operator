// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsBlobServicesContainer_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobServicesContainer_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobServicesContainer_SpecARM, StorageAccountsBlobServicesContainer_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobServicesContainer_SpecARM runs a test to see if a specific instance of StorageAccountsBlobServicesContainer_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobServicesContainer_SpecARM(subject StorageAccountsBlobServicesContainer_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobServicesContainer_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobServicesContainer_SpecARM instances for property testing - lazily instantiated by
// StorageAccountsBlobServicesContainer_SpecARMGenerator()
var storageAccountsBlobServicesContainer_SpecARMGenerator gopter.Gen

// StorageAccountsBlobServicesContainer_SpecARMGenerator returns a generator of StorageAccountsBlobServicesContainer_SpecARM instances for property testing.
// We first initialize storageAccountsBlobServicesContainer_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsBlobServicesContainer_SpecARMGenerator() gopter.Gen {
	if storageAccountsBlobServicesContainer_SpecARMGenerator != nil {
		return storageAccountsBlobServicesContainer_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_SpecARM(generators)
	storageAccountsBlobServicesContainer_SpecARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainer_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_SpecARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainer_SpecARM(generators)
	storageAccountsBlobServicesContainer_SpecARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainer_SpecARM{}), generators)

	return storageAccountsBlobServicesContainer_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainer_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainer_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerPropertiesARMGenerator())
}

func Test_ContainerPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPropertiesARM, ContainerPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPropertiesARM runs a test to see if a specific instance of ContainerPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPropertiesARM(subject ContainerPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerPropertiesARM instances for property testing - lazily instantiated by
// ContainerPropertiesARMGenerator()
var containerPropertiesARMGenerator gopter.Gen

// ContainerPropertiesARMGenerator returns a generator of ContainerPropertiesARM instances for property testing.
// We first initialize containerPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerPropertiesARMGenerator() gopter.Gen {
	if containerPropertiesARMGenerator != nil {
		return containerPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesARM(generators)
	containerPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForContainerPropertiesARM(generators)
	containerPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerPropertiesARM{}), generators)

	return containerPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPropertiesARM(gens map[string]gopter.Gen) {
	gens["DefaultEncryptionScope"] = gen.PtrOf(gen.AlphaString())
	gens["Deleted"] = gen.PtrOf(gen.Bool())
	gens["DeletedTime"] = gen.PtrOf(gen.AlphaString())
	gens["DenyEncryptionScopeOverride"] = gen.PtrOf(gen.Bool())
	gens["HasImmutabilityPolicy"] = gen.PtrOf(gen.Bool())
	gens["HasLegalHold"] = gen.PtrOf(gen.Bool())
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
	gens["LeaseDuration"] = gen.PtrOf(gen.OneConstOf(ContainerProperties_LeaseDurationFixed, ContainerProperties_LeaseDurationInfinite))
	gens["LeaseState"] = gen.PtrOf(gen.OneConstOf(
		ContainerProperties_LeaseStateAvailable,
		ContainerProperties_LeaseStateBreaking,
		ContainerProperties_LeaseStateBroken,
		ContainerProperties_LeaseStateExpired,
		ContainerProperties_LeaseStateLeased))
	gens["LeaseStatus"] = gen.PtrOf(gen.OneConstOf(ContainerProperties_LeaseStatusLocked, ContainerProperties_LeaseStatusUnlocked))
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["PublicAccess"] = gen.PtrOf(gen.OneConstOf(ContainerProperties_PublicAccessBlob, ContainerProperties_PublicAccessContainer, ContainerProperties_PublicAccessNone))
	gens["RemainingRetentionDays"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerPropertiesARM(gens map[string]gopter.Gen) {
	gens["ImmutabilityPolicy"] = gen.PtrOf(ImmutabilityPolicyPropertiesARMGenerator())
	gens["ImmutableStorageWithVersioning"] = gen.PtrOf(ImmutableStorageWithVersioningARMGenerator())
	gens["LegalHold"] = gen.PtrOf(LegalHoldPropertiesARMGenerator())
}

func Test_ImmutabilityPolicyPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutabilityPolicyPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutabilityPolicyPropertiesARM, ImmutabilityPolicyPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutabilityPolicyPropertiesARM runs a test to see if a specific instance of ImmutabilityPolicyPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutabilityPolicyPropertiesARM(subject ImmutabilityPolicyPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutabilityPolicyPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutabilityPolicyPropertiesARM instances for property testing - lazily instantiated by
// ImmutabilityPolicyPropertiesARMGenerator()
var immutabilityPolicyPropertiesARMGenerator gopter.Gen

// ImmutabilityPolicyPropertiesARMGenerator returns a generator of ImmutabilityPolicyPropertiesARM instances for property testing.
// We first initialize immutabilityPolicyPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ImmutabilityPolicyPropertiesARMGenerator() gopter.Gen {
	if immutabilityPolicyPropertiesARMGenerator != nil {
		return immutabilityPolicyPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyPropertiesARM(generators)
	immutabilityPolicyPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForImmutabilityPolicyPropertiesARM(generators)
	immutabilityPolicyPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyPropertiesARM{}), generators)

	return immutabilityPolicyPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutabilityPolicyPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutabilityPolicyPropertiesARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForImmutabilityPolicyPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImmutabilityPolicyPropertiesARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ImmutabilityPolicyPropertyARMGenerator())
	gens["UpdateHistory"] = gen.SliceOf(UpdateHistoryPropertyARMGenerator())
}

func Test_ImmutableStorageWithVersioningARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutableStorageWithVersioningARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutableStorageWithVersioningARM, ImmutableStorageWithVersioningARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutableStorageWithVersioningARM runs a test to see if a specific instance of ImmutableStorageWithVersioningARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutableStorageWithVersioningARM(subject ImmutableStorageWithVersioningARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutableStorageWithVersioningARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutableStorageWithVersioningARM instances for property testing - lazily instantiated by
// ImmutableStorageWithVersioningARMGenerator()
var immutableStorageWithVersioningARMGenerator gopter.Gen

// ImmutableStorageWithVersioningARMGenerator returns a generator of ImmutableStorageWithVersioningARM instances for property testing.
func ImmutableStorageWithVersioningARMGenerator() gopter.Gen {
	if immutableStorageWithVersioningARMGenerator != nil {
		return immutableStorageWithVersioningARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutableStorageWithVersioningARM(generators)
	immutableStorageWithVersioningARMGenerator = gen.Struct(reflect.TypeOf(ImmutableStorageWithVersioningARM{}), generators)

	return immutableStorageWithVersioningARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutableStorageWithVersioningARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutableStorageWithVersioningARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MigrationState"] = gen.PtrOf(gen.OneConstOf(ImmutableStorageWithVersioning_MigrationStateCompleted, ImmutableStorageWithVersioning_MigrationStateInProgress))
	gens["TimeStamp"] = gen.PtrOf(gen.AlphaString())
}

func Test_LegalHoldPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LegalHoldPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLegalHoldPropertiesARM, LegalHoldPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLegalHoldPropertiesARM runs a test to see if a specific instance of LegalHoldPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLegalHoldPropertiesARM(subject LegalHoldPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LegalHoldPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LegalHoldPropertiesARM instances for property testing - lazily instantiated by
// LegalHoldPropertiesARMGenerator()
var legalHoldPropertiesARMGenerator gopter.Gen

// LegalHoldPropertiesARMGenerator returns a generator of LegalHoldPropertiesARM instances for property testing.
// We first initialize legalHoldPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LegalHoldPropertiesARMGenerator() gopter.Gen {
	if legalHoldPropertiesARMGenerator != nil {
		return legalHoldPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLegalHoldPropertiesARM(generators)
	legalHoldPropertiesARMGenerator = gen.Struct(reflect.TypeOf(LegalHoldPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLegalHoldPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForLegalHoldPropertiesARM(generators)
	legalHoldPropertiesARMGenerator = gen.Struct(reflect.TypeOf(LegalHoldPropertiesARM{}), generators)

	return legalHoldPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForLegalHoldPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLegalHoldPropertiesARM(gens map[string]gopter.Gen) {
	gens["HasLegalHold"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForLegalHoldPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLegalHoldPropertiesARM(gens map[string]gopter.Gen) {
	gens["Tags"] = gen.SliceOf(TagPropertyARMGenerator())
}

func Test_ImmutabilityPolicyPropertyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutabilityPolicyPropertyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutabilityPolicyPropertyARM, ImmutabilityPolicyPropertyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutabilityPolicyPropertyARM runs a test to see if a specific instance of ImmutabilityPolicyPropertyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutabilityPolicyPropertyARM(subject ImmutabilityPolicyPropertyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutabilityPolicyPropertyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutabilityPolicyPropertyARM instances for property testing - lazily instantiated by
// ImmutabilityPolicyPropertyARMGenerator()
var immutabilityPolicyPropertyARMGenerator gopter.Gen

// ImmutabilityPolicyPropertyARMGenerator returns a generator of ImmutabilityPolicyPropertyARM instances for property testing.
func ImmutabilityPolicyPropertyARMGenerator() gopter.Gen {
	if immutabilityPolicyPropertyARMGenerator != nil {
		return immutabilityPolicyPropertyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyPropertyARM(generators)
	immutabilityPolicyPropertyARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyPropertyARM{}), generators)

	return immutabilityPolicyPropertyARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutabilityPolicyPropertyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutabilityPolicyPropertyARM(gens map[string]gopter.Gen) {
	gens["AllowProtectedAppendWrites"] = gen.PtrOf(gen.Bool())
	gens["ImmutabilityPeriodSinceCreationInDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(ImmutabilityPolicyProperty_StateLocked, ImmutabilityPolicyProperty_StateUnlocked))
}

func Test_TagPropertyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TagPropertyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTagPropertyARM, TagPropertyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTagPropertyARM runs a test to see if a specific instance of TagPropertyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTagPropertyARM(subject TagPropertyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TagPropertyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TagPropertyARM instances for property testing - lazily instantiated by TagPropertyARMGenerator()
var tagPropertyARMGenerator gopter.Gen

// TagPropertyARMGenerator returns a generator of TagPropertyARM instances for property testing.
func TagPropertyARMGenerator() gopter.Gen {
	if tagPropertyARMGenerator != nil {
		return tagPropertyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTagPropertyARM(generators)
	tagPropertyARMGenerator = gen.Struct(reflect.TypeOf(TagPropertyARM{}), generators)

	return tagPropertyARMGenerator
}

// AddIndependentPropertyGeneratorsForTagPropertyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTagPropertyARM(gens map[string]gopter.Gen) {
	gens["ObjectIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Upn"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpdateHistoryPropertyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateHistoryPropertyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateHistoryPropertyARM, UpdateHistoryPropertyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateHistoryPropertyARM runs a test to see if a specific instance of UpdateHistoryPropertyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateHistoryPropertyARM(subject UpdateHistoryPropertyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateHistoryPropertyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateHistoryPropertyARM instances for property testing - lazily instantiated by
// UpdateHistoryPropertyARMGenerator()
var updateHistoryPropertyARMGenerator gopter.Gen

// UpdateHistoryPropertyARMGenerator returns a generator of UpdateHistoryPropertyARM instances for property testing.
func UpdateHistoryPropertyARMGenerator() gopter.Gen {
	if updateHistoryPropertyARMGenerator != nil {
		return updateHistoryPropertyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateHistoryPropertyARM(generators)
	updateHistoryPropertyARMGenerator = gen.Struct(reflect.TypeOf(UpdateHistoryPropertyARM{}), generators)

	return updateHistoryPropertyARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateHistoryPropertyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateHistoryPropertyARM(gens map[string]gopter.Gen) {
	gens["ImmutabilityPeriodSinceCreationInDays"] = gen.PtrOf(gen.Int())
	gens["ObjectIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Update"] = gen.PtrOf(gen.OneConstOf(UpdateHistoryProperty_UpdateExtend, UpdateHistoryProperty_UpdateLock, UpdateHistoryProperty_UpdatePut))
	gens["Upn"] = gen.PtrOf(gen.AlphaString())
}
