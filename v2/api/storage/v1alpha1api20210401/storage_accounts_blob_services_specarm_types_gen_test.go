// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsBlobServices_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobServices_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobServices_SPECARM, StorageAccountsBlobServices_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobServices_SPECARM runs a test to see if a specific instance of StorageAccountsBlobServices_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobServices_SPECARM(subject StorageAccountsBlobServices_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobServices_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobServices_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsBlobServices_SPECARMGenerator()
var storageAccountsBlobServices_specarmGenerator gopter.Gen

// StorageAccountsBlobServices_SPECARMGenerator returns a generator of StorageAccountsBlobServices_SPECARM instances for property testing.
// We first initialize storageAccountsBlobServices_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsBlobServices_SPECARMGenerator() gopter.Gen {
	if storageAccountsBlobServices_specarmGenerator != nil {
		return storageAccountsBlobServices_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPECARM(generators)
	storageAccountsBlobServices_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServices_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPECARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_SPECARM(generators)
	storageAccountsBlobServices_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServices_SPECARM{}), generators)

	return storageAccountsBlobServices_specarmGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageAccountsBlobServices_Properties_SPECARMGenerator())
}

func Test_StorageAccountsBlobServices_Properties_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobServices_Properties_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobServices_Properties_SPECARM, StorageAccountsBlobServices_Properties_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobServices_Properties_SPECARM runs a test to see if a specific instance of StorageAccountsBlobServices_Properties_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobServices_Properties_SPECARM(subject StorageAccountsBlobServices_Properties_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobServices_Properties_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobServices_Properties_SPECARM instances for property testing - lazily instantiated by
//StorageAccountsBlobServices_Properties_SPECARMGenerator()
var storageAccountsBlobServices_properties_specarmGenerator gopter.Gen

// StorageAccountsBlobServices_Properties_SPECARMGenerator returns a generator of StorageAccountsBlobServices_Properties_SPECARM instances for property testing.
// We first initialize storageAccountsBlobServices_properties_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsBlobServices_Properties_SPECARMGenerator() gopter.Gen {
	if storageAccountsBlobServices_properties_specarmGenerator != nil {
		return storageAccountsBlobServices_properties_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_Properties_SPECARM(generators)
	storageAccountsBlobServices_properties_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServices_Properties_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_Properties_SPECARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_Properties_SPECARM(generators)
	storageAccountsBlobServices_properties_specarmGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServices_Properties_SPECARM{}), generators)

	return storageAccountsBlobServices_properties_specarmGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_Properties_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_Properties_SPECARM(gens map[string]gopter.Gen) {
	gens["AutomaticSnapshotPolicyEnabled"] = gen.PtrOf(gen.Bool())
	gens["DefaultServiceVersion"] = gen.PtrOf(gen.AlphaString())
	gens["IsVersioningEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_Properties_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_Properties_SPECARM(gens map[string]gopter.Gen) {
	gens["ChangeFeed"] = gen.PtrOf(ChangeFeed_SpecARMGenerator())
	gens["ContainerDeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_SpecARMGenerator())
	gens["Cors"] = gen.PtrOf(CorsRules_SpecARMGenerator())
	gens["DeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_SpecARMGenerator())
	gens["LastAccessTimeTrackingPolicy"] = gen.PtrOf(LastAccessTimeTrackingPolicy_SpecARMGenerator())
	gens["RestorePolicy"] = gen.PtrOf(RestorePolicyProperties_SpecARMGenerator())
}

func Test_ChangeFeed_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ChangeFeed_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForChangeFeed_SpecARM, ChangeFeed_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForChangeFeed_SpecARM runs a test to see if a specific instance of ChangeFeed_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForChangeFeed_SpecARM(subject ChangeFeed_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ChangeFeed_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ChangeFeed_SpecARM instances for property testing - lazily instantiated by ChangeFeed_SpecARMGenerator()
var changeFeed_specARMGenerator gopter.Gen

// ChangeFeed_SpecARMGenerator returns a generator of ChangeFeed_SpecARM instances for property testing.
func ChangeFeed_SpecARMGenerator() gopter.Gen {
	if changeFeed_specARMGenerator != nil {
		return changeFeed_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForChangeFeed_SpecARM(generators)
	changeFeed_specARMGenerator = gen.Struct(reflect.TypeOf(ChangeFeed_SpecARM{}), generators)

	return changeFeed_specARMGenerator
}

// AddIndependentPropertyGeneratorsForChangeFeed_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForChangeFeed_SpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

func Test_CorsRules_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRules_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRules_SpecARM, CorsRules_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRules_SpecARM runs a test to see if a specific instance of CorsRules_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRules_SpecARM(subject CorsRules_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRules_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRules_SpecARM instances for property testing - lazily instantiated by CorsRules_SpecARMGenerator()
var corsRules_specARMGenerator gopter.Gen

// CorsRules_SpecARMGenerator returns a generator of CorsRules_SpecARM instances for property testing.
func CorsRules_SpecARMGenerator() gopter.Gen {
	if corsRules_specARMGenerator != nil {
		return corsRules_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCorsRules_SpecARM(generators)
	corsRules_specARMGenerator = gen.Struct(reflect.TypeOf(CorsRules_SpecARM{}), generators)

	return corsRules_specARMGenerator
}

// AddRelatedPropertyGeneratorsForCorsRules_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCorsRules_SpecARM(gens map[string]gopter.Gen) {
	gens["CorsRules"] = gen.SliceOf(CorsRule_SpecARMGenerator())
}

func Test_DeleteRetentionPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeleteRetentionPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeleteRetentionPolicy_SpecARM, DeleteRetentionPolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeleteRetentionPolicy_SpecARM runs a test to see if a specific instance of DeleteRetentionPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeleteRetentionPolicy_SpecARM(subject DeleteRetentionPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeleteRetentionPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeleteRetentionPolicy_SpecARM instances for property testing - lazily instantiated by
//DeleteRetentionPolicy_SpecARMGenerator()
var deleteRetentionPolicy_specARMGenerator gopter.Gen

// DeleteRetentionPolicy_SpecARMGenerator returns a generator of DeleteRetentionPolicy_SpecARM instances for property testing.
func DeleteRetentionPolicy_SpecARMGenerator() gopter.Gen {
	if deleteRetentionPolicy_specARMGenerator != nil {
		return deleteRetentionPolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_SpecARM(generators)
	deleteRetentionPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(DeleteRetentionPolicy_SpecARM{}), generators)

	return deleteRetentionPolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_LastAccessTimeTrackingPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LastAccessTimeTrackingPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLastAccessTimeTrackingPolicy_SpecARM, LastAccessTimeTrackingPolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLastAccessTimeTrackingPolicy_SpecARM runs a test to see if a specific instance of LastAccessTimeTrackingPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLastAccessTimeTrackingPolicy_SpecARM(subject LastAccessTimeTrackingPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LastAccessTimeTrackingPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LastAccessTimeTrackingPolicy_SpecARM instances for property testing - lazily instantiated by
//LastAccessTimeTrackingPolicy_SpecARMGenerator()
var lastAccessTimeTrackingPolicy_specARMGenerator gopter.Gen

// LastAccessTimeTrackingPolicy_SpecARMGenerator returns a generator of LastAccessTimeTrackingPolicy_SpecARM instances for property testing.
func LastAccessTimeTrackingPolicy_SpecARMGenerator() gopter.Gen {
	if lastAccessTimeTrackingPolicy_specARMGenerator != nil {
		return lastAccessTimeTrackingPolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_SpecARM(generators)
	lastAccessTimeTrackingPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(LastAccessTimeTrackingPolicy_SpecARM{}), generators)

	return lastAccessTimeTrackingPolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["BlobType"] = gen.SliceOf(gen.AlphaString())
	gens["Enable"] = gen.Bool()
	gens["Name"] = gen.PtrOf(gen.OneConstOf(LastAccessTimeTrackingPolicy_Name_SpecAccessTimeTracking))
	gens["TrackingGranularityInDays"] = gen.PtrOf(gen.Int())
}

func Test_RestorePolicyProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RestorePolicyProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRestorePolicyProperties_SpecARM, RestorePolicyProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRestorePolicyProperties_SpecARM runs a test to see if a specific instance of RestorePolicyProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRestorePolicyProperties_SpecARM(subject RestorePolicyProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RestorePolicyProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RestorePolicyProperties_SpecARM instances for property testing - lazily instantiated by
//RestorePolicyProperties_SpecARMGenerator()
var restorePolicyProperties_specARMGenerator gopter.Gen

// RestorePolicyProperties_SpecARMGenerator returns a generator of RestorePolicyProperties_SpecARM instances for property testing.
func RestorePolicyProperties_SpecARMGenerator() gopter.Gen {
	if restorePolicyProperties_specARMGenerator != nil {
		return restorePolicyProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRestorePolicyProperties_SpecARM(generators)
	restorePolicyProperties_specARMGenerator = gen.Struct(reflect.TypeOf(RestorePolicyProperties_SpecARM{}), generators)

	return restorePolicyProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRestorePolicyProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRestorePolicyProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.Bool()
}

func Test_CorsRule_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRule_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRule_SpecARM, CorsRule_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRule_SpecARM runs a test to see if a specific instance of CorsRule_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRule_SpecARM(subject CorsRule_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRule_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRule_SpecARM instances for property testing - lazily instantiated by CorsRule_SpecARMGenerator()
var corsRule_specARMGenerator gopter.Gen

// CorsRule_SpecARMGenerator returns a generator of CorsRule_SpecARM instances for property testing.
func CorsRule_SpecARMGenerator() gopter.Gen {
	if corsRule_specARMGenerator != nil {
		return corsRule_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsRule_SpecARM(generators)
	corsRule_specARMGenerator = gen.Struct(reflect.TypeOf(CorsRule_SpecARM{}), generators)

	return corsRule_specARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsRule_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsRule_SpecARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.SliceOf(gen.OneConstOf(
		CorsRule_AllowedMethods_SpecDELETE,
		CorsRule_AllowedMethods_SpecGET,
		CorsRule_AllowedMethods_SpecHEAD,
		CorsRule_AllowedMethods_SpecMERGE,
		CorsRule_AllowedMethods_SpecOPTIONS,
		CorsRule_AllowedMethods_SpecPOST,
		CorsRule_AllowedMethods_SpecPUT))
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.Int()
}
