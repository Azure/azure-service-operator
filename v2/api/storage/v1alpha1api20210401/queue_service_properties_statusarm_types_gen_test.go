// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_QueueServiceProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueServiceProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueueServiceProperties_STATUSARM, QueueServiceProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueueServiceProperties_STATUSARM runs a test to see if a specific instance of QueueServiceProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueueServiceProperties_STATUSARM(subject QueueServiceProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueServiceProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueServiceProperties_STATUSARM instances for property testing - lazily instantiated by
// QueueServiceProperties_STATUSARMGenerator()
var queueServiceProperties_STATUSARMGenerator gopter.Gen

// QueueServiceProperties_STATUSARMGenerator returns a generator of QueueServiceProperties_STATUSARM instances for property testing.
// We first initialize queueServiceProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func QueueServiceProperties_STATUSARMGenerator() gopter.Gen {
	if queueServiceProperties_STATUSARMGenerator != nil {
		return queueServiceProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueueServiceProperties_STATUSARM(generators)
	queueServiceProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(QueueServiceProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueueServiceProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForQueueServiceProperties_STATUSARM(generators)
	queueServiceProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(QueueServiceProperties_STATUSARM{}), generators)

	return queueServiceProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForQueueServiceProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQueueServiceProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForQueueServiceProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQueueServiceProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(QueueServiceProperties_Properties_STATUSARMGenerator())
}

func Test_QueueServiceProperties_Properties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueueServiceProperties_Properties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueueServiceProperties_Properties_STATUSARM, QueueServiceProperties_Properties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueueServiceProperties_Properties_STATUSARM runs a test to see if a specific instance of QueueServiceProperties_Properties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueueServiceProperties_Properties_STATUSARM(subject QueueServiceProperties_Properties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueueServiceProperties_Properties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueueServiceProperties_Properties_STATUSARM instances for property testing - lazily instantiated by
// QueueServiceProperties_Properties_STATUSARMGenerator()
var queueServiceProperties_Properties_STATUSARMGenerator gopter.Gen

// QueueServiceProperties_Properties_STATUSARMGenerator returns a generator of QueueServiceProperties_Properties_STATUSARM instances for property testing.
func QueueServiceProperties_Properties_STATUSARMGenerator() gopter.Gen {
	if queueServiceProperties_Properties_STATUSARMGenerator != nil {
		return queueServiceProperties_Properties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForQueueServiceProperties_Properties_STATUSARM(generators)
	queueServiceProperties_Properties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(QueueServiceProperties_Properties_STATUSARM{}), generators)

	return queueServiceProperties_Properties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForQueueServiceProperties_Properties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForQueueServiceProperties_Properties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(CorsRules_STATUSARMGenerator())
}
