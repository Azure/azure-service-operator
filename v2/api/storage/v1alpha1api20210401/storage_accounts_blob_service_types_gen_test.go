// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_StorageAccountsBlobService_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from StorageAccountsBlobService to hub returns original",
		prop.ForAll(RunResourceConversionTestForStorageAccountsBlobService, StorageAccountsBlobServiceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForStorageAccountsBlobService tests if a specific instance of StorageAccountsBlobService round trips to the hub storage version and back losslessly
func RunResourceConversionTestForStorageAccountsBlobService(subject StorageAccountsBlobService) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20210401storage.StorageAccountsBlobService
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual StorageAccountsBlobService
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_StorageAccountsBlobService_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from StorageAccountsBlobService to StorageAccountsBlobService via AssignPropertiesToStorageAccountsBlobService & AssignPropertiesFromStorageAccountsBlobService returns original",
		prop.ForAll(RunPropertyAssignmentTestForStorageAccountsBlobService, StorageAccountsBlobServiceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForStorageAccountsBlobService tests if a specific instance of StorageAccountsBlobService can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForStorageAccountsBlobService(subject StorageAccountsBlobService) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.StorageAccountsBlobService
	err := copied.AssignPropertiesToStorageAccountsBlobService(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual StorageAccountsBlobService
	err = actual.AssignPropertiesFromStorageAccountsBlobService(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_StorageAccountsBlobService_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobService via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobService, StorageAccountsBlobServiceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobService runs a test to see if a specific instance of StorageAccountsBlobService round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobService(subject StorageAccountsBlobService) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobService
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobService instances for property testing - lazily instantiated by
//StorageAccountsBlobServiceGenerator()
var storageAccountsBlobServiceGenerator gopter.Gen

// StorageAccountsBlobServiceGenerator returns a generator of StorageAccountsBlobService instances for property testing.
func StorageAccountsBlobServiceGenerator() gopter.Gen {
	if storageAccountsBlobServiceGenerator != nil {
		return storageAccountsBlobServiceGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobService(generators)
	storageAccountsBlobServiceGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobService{}), generators)

	return storageAccountsBlobServiceGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobService is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobService(gens map[string]gopter.Gen) {
	gens["Spec"] = StorageAccountsBlobServices_SPECGenerator()
	gens["Status"] = BlobServiceProperties_StatusGenerator()
}

func Test_BlobServiceProperties_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from BlobServiceProperties_Status to BlobServiceProperties_Status via AssignPropertiesToBlobServiceProperties_Status & AssignPropertiesFromBlobServiceProperties_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForBlobServiceProperties_Status, BlobServiceProperties_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForBlobServiceProperties_Status tests if a specific instance of BlobServiceProperties_Status can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForBlobServiceProperties_Status(subject BlobServiceProperties_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.BlobServiceProperties_Status
	err := copied.AssignPropertiesToBlobServiceProperties_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual BlobServiceProperties_Status
	err = actual.AssignPropertiesFromBlobServiceProperties_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_BlobServiceProperties_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BlobServiceProperties_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBlobServiceProperties_Status, BlobServiceProperties_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBlobServiceProperties_Status runs a test to see if a specific instance of BlobServiceProperties_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForBlobServiceProperties_Status(subject BlobServiceProperties_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BlobServiceProperties_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BlobServiceProperties_Status instances for property testing - lazily instantiated by
//BlobServiceProperties_StatusGenerator()
var blobServiceProperties_statusGenerator gopter.Gen

// BlobServiceProperties_StatusGenerator returns a generator of BlobServiceProperties_Status instances for property testing.
// We first initialize blobServiceProperties_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BlobServiceProperties_StatusGenerator() gopter.Gen {
	if blobServiceProperties_statusGenerator != nil {
		return blobServiceProperties_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobServiceProperties_Status(generators)
	blobServiceProperties_statusGenerator = gen.Struct(reflect.TypeOf(BlobServiceProperties_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobServiceProperties_Status(generators)
	AddRelatedPropertyGeneratorsForBlobServiceProperties_Status(generators)
	blobServiceProperties_statusGenerator = gen.Struct(reflect.TypeOf(BlobServiceProperties_Status{}), generators)

	return blobServiceProperties_statusGenerator
}

// AddIndependentPropertyGeneratorsForBlobServiceProperties_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBlobServiceProperties_Status(gens map[string]gopter.Gen) {
	gens["AutomaticSnapshotPolicyEnabled"] = gen.PtrOf(gen.Bool())
	gens["DefaultServiceVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsVersioningEnabled"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBlobServiceProperties_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBlobServiceProperties_Status(gens map[string]gopter.Gen) {
	gens["ChangeFeed"] = gen.PtrOf(ChangeFeed_StatusGenerator())
	gens["ContainerDeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_StatusGenerator())
	gens["Cors"] = gen.PtrOf(CorsRules_StatusGenerator())
	gens["DeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_StatusGenerator())
	gens["LastAccessTimeTrackingPolicy"] = gen.PtrOf(LastAccessTimeTrackingPolicy_StatusGenerator())
	gens["RestorePolicy"] = gen.PtrOf(RestorePolicyProperties_StatusGenerator())
	gens["Sku"] = gen.PtrOf(Sku_StatusGenerator())
}

func Test_StorageAccountsBlobServices_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from StorageAccountsBlobServices_SPEC to StorageAccountsBlobServices_SPEC via AssignPropertiesToStorageAccountsBlobServices_SPEC & AssignPropertiesFromStorageAccountsBlobServices_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForStorageAccountsBlobServices_SPEC, StorageAccountsBlobServices_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForStorageAccountsBlobServices_SPEC tests if a specific instance of StorageAccountsBlobServices_SPEC can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForStorageAccountsBlobServices_SPEC(subject StorageAccountsBlobServices_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.StorageAccountsBlobServices_SPEC
	err := copied.AssignPropertiesToStorageAccountsBlobServices_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual StorageAccountsBlobServices_SPEC
	err = actual.AssignPropertiesFromStorageAccountsBlobServices_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_StorageAccountsBlobServices_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobServices_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobServices_SPEC, StorageAccountsBlobServices_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobServices_SPEC runs a test to see if a specific instance of StorageAccountsBlobServices_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobServices_SPEC(subject StorageAccountsBlobServices_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobServices_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobServices_SPEC instances for property testing - lazily instantiated by
//StorageAccountsBlobServices_SPECGenerator()
var storageAccountsBlobServices_specGenerator gopter.Gen

// StorageAccountsBlobServices_SPECGenerator returns a generator of StorageAccountsBlobServices_SPEC instances for property testing.
// We first initialize storageAccountsBlobServices_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsBlobServices_SPECGenerator() gopter.Gen {
	if storageAccountsBlobServices_specGenerator != nil {
		return storageAccountsBlobServices_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPEC(generators)
	storageAccountsBlobServices_specGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServices_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPEC(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_SPEC(generators)
	storageAccountsBlobServices_specGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServices_SPEC{}), generators)

	return storageAccountsBlobServices_specGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsBlobServices_SPEC(gens map[string]gopter.Gen) {
	gens["AutomaticSnapshotPolicyEnabled"] = gen.PtrOf(gen.Bool())
	gens["AzureName"] = gen.AlphaString()
	gens["DefaultServiceVersion"] = gen.PtrOf(gen.AlphaString())
	gens["IsVersioningEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobServices_SPEC(gens map[string]gopter.Gen) {
	gens["ChangeFeed"] = gen.PtrOf(ChangeFeed_SpecGenerator())
	gens["ContainerDeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_SpecGenerator())
	gens["Cors"] = gen.PtrOf(CorsRules_SpecGenerator())
	gens["DeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_SpecGenerator())
	gens["LastAccessTimeTrackingPolicy"] = gen.PtrOf(LastAccessTimeTrackingPolicy_SpecGenerator())
	gens["RestorePolicy"] = gen.PtrOf(RestorePolicyProperties_SpecGenerator())
}

func Test_ChangeFeed_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ChangeFeed_Spec to ChangeFeed_Spec via AssignPropertiesToChangeFeed_Spec & AssignPropertiesFromChangeFeed_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForChangeFeed_Spec, ChangeFeed_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForChangeFeed_Spec tests if a specific instance of ChangeFeed_Spec can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForChangeFeed_Spec(subject ChangeFeed_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.ChangeFeed_Spec
	err := copied.AssignPropertiesToChangeFeed_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ChangeFeed_Spec
	err = actual.AssignPropertiesFromChangeFeed_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ChangeFeed_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ChangeFeed_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForChangeFeed_Spec, ChangeFeed_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForChangeFeed_Spec runs a test to see if a specific instance of ChangeFeed_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForChangeFeed_Spec(subject ChangeFeed_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ChangeFeed_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ChangeFeed_Spec instances for property testing - lazily instantiated by ChangeFeed_SpecGenerator()
var changeFeed_specGenerator gopter.Gen

// ChangeFeed_SpecGenerator returns a generator of ChangeFeed_Spec instances for property testing.
func ChangeFeed_SpecGenerator() gopter.Gen {
	if changeFeed_specGenerator != nil {
		return changeFeed_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForChangeFeed_Spec(generators)
	changeFeed_specGenerator = gen.Struct(reflect.TypeOf(ChangeFeed_Spec{}), generators)

	return changeFeed_specGenerator
}

// AddIndependentPropertyGeneratorsForChangeFeed_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForChangeFeed_Spec(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

func Test_ChangeFeed_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ChangeFeed_Status to ChangeFeed_Status via AssignPropertiesToChangeFeed_Status & AssignPropertiesFromChangeFeed_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForChangeFeed_Status, ChangeFeed_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForChangeFeed_Status tests if a specific instance of ChangeFeed_Status can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForChangeFeed_Status(subject ChangeFeed_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.ChangeFeed_Status
	err := copied.AssignPropertiesToChangeFeed_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ChangeFeed_Status
	err = actual.AssignPropertiesFromChangeFeed_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ChangeFeed_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ChangeFeed_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForChangeFeed_Status, ChangeFeed_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForChangeFeed_Status runs a test to see if a specific instance of ChangeFeed_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForChangeFeed_Status(subject ChangeFeed_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ChangeFeed_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ChangeFeed_Status instances for property testing - lazily instantiated by ChangeFeed_StatusGenerator()
var changeFeed_statusGenerator gopter.Gen

// ChangeFeed_StatusGenerator returns a generator of ChangeFeed_Status instances for property testing.
func ChangeFeed_StatusGenerator() gopter.Gen {
	if changeFeed_statusGenerator != nil {
		return changeFeed_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForChangeFeed_Status(generators)
	changeFeed_statusGenerator = gen.Struct(reflect.TypeOf(ChangeFeed_Status{}), generators)

	return changeFeed_statusGenerator
}

// AddIndependentPropertyGeneratorsForChangeFeed_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForChangeFeed_Status(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

func Test_CorsRules_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CorsRules_Spec to CorsRules_Spec via AssignPropertiesToCorsRules_Spec & AssignPropertiesFromCorsRules_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForCorsRules_Spec, CorsRules_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCorsRules_Spec tests if a specific instance of CorsRules_Spec can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForCorsRules_Spec(subject CorsRules_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.CorsRules_Spec
	err := copied.AssignPropertiesToCorsRules_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CorsRules_Spec
	err = actual.AssignPropertiesFromCorsRules_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CorsRules_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRules_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRules_Spec, CorsRules_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRules_Spec runs a test to see if a specific instance of CorsRules_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRules_Spec(subject CorsRules_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRules_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRules_Spec instances for property testing - lazily instantiated by CorsRules_SpecGenerator()
var corsRules_specGenerator gopter.Gen

// CorsRules_SpecGenerator returns a generator of CorsRules_Spec instances for property testing.
func CorsRules_SpecGenerator() gopter.Gen {
	if corsRules_specGenerator != nil {
		return corsRules_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCorsRules_Spec(generators)
	corsRules_specGenerator = gen.Struct(reflect.TypeOf(CorsRules_Spec{}), generators)

	return corsRules_specGenerator
}

// AddRelatedPropertyGeneratorsForCorsRules_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCorsRules_Spec(gens map[string]gopter.Gen) {
	gens["CorsRules"] = gen.SliceOf(CorsRule_SpecGenerator())
}

func Test_CorsRules_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CorsRules_Status to CorsRules_Status via AssignPropertiesToCorsRules_Status & AssignPropertiesFromCorsRules_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForCorsRules_Status, CorsRules_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCorsRules_Status tests if a specific instance of CorsRules_Status can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForCorsRules_Status(subject CorsRules_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.CorsRules_Status
	err := copied.AssignPropertiesToCorsRules_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CorsRules_Status
	err = actual.AssignPropertiesFromCorsRules_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CorsRules_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRules_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRules_Status, CorsRules_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRules_Status runs a test to see if a specific instance of CorsRules_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRules_Status(subject CorsRules_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRules_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRules_Status instances for property testing - lazily instantiated by CorsRules_StatusGenerator()
var corsRules_statusGenerator gopter.Gen

// CorsRules_StatusGenerator returns a generator of CorsRules_Status instances for property testing.
func CorsRules_StatusGenerator() gopter.Gen {
	if corsRules_statusGenerator != nil {
		return corsRules_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCorsRules_Status(generators)
	corsRules_statusGenerator = gen.Struct(reflect.TypeOf(CorsRules_Status{}), generators)

	return corsRules_statusGenerator
}

// AddRelatedPropertyGeneratorsForCorsRules_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCorsRules_Status(gens map[string]gopter.Gen) {
	gens["CorsRules"] = gen.SliceOf(CorsRule_StatusGenerator())
}

func Test_DeleteRetentionPolicy_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DeleteRetentionPolicy_Spec to DeleteRetentionPolicy_Spec via AssignPropertiesToDeleteRetentionPolicy_Spec & AssignPropertiesFromDeleteRetentionPolicy_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForDeleteRetentionPolicy_Spec, DeleteRetentionPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDeleteRetentionPolicy_Spec tests if a specific instance of DeleteRetentionPolicy_Spec can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForDeleteRetentionPolicy_Spec(subject DeleteRetentionPolicy_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.DeleteRetentionPolicy_Spec
	err := copied.AssignPropertiesToDeleteRetentionPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DeleteRetentionPolicy_Spec
	err = actual.AssignPropertiesFromDeleteRetentionPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DeleteRetentionPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeleteRetentionPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeleteRetentionPolicy_Spec, DeleteRetentionPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeleteRetentionPolicy_Spec runs a test to see if a specific instance of DeleteRetentionPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDeleteRetentionPolicy_Spec(subject DeleteRetentionPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeleteRetentionPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeleteRetentionPolicy_Spec instances for property testing - lazily instantiated by
//DeleteRetentionPolicy_SpecGenerator()
var deleteRetentionPolicy_specGenerator gopter.Gen

// DeleteRetentionPolicy_SpecGenerator returns a generator of DeleteRetentionPolicy_Spec instances for property testing.
func DeleteRetentionPolicy_SpecGenerator() gopter.Gen {
	if deleteRetentionPolicy_specGenerator != nil {
		return deleteRetentionPolicy_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_Spec(generators)
	deleteRetentionPolicy_specGenerator = gen.Struct(reflect.TypeOf(DeleteRetentionPolicy_Spec{}), generators)

	return deleteRetentionPolicy_specGenerator
}

// AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_Spec(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_DeleteRetentionPolicy_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DeleteRetentionPolicy_Status to DeleteRetentionPolicy_Status via AssignPropertiesToDeleteRetentionPolicy_Status & AssignPropertiesFromDeleteRetentionPolicy_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForDeleteRetentionPolicy_Status, DeleteRetentionPolicy_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDeleteRetentionPolicy_Status tests if a specific instance of DeleteRetentionPolicy_Status can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForDeleteRetentionPolicy_Status(subject DeleteRetentionPolicy_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.DeleteRetentionPolicy_Status
	err := copied.AssignPropertiesToDeleteRetentionPolicy_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DeleteRetentionPolicy_Status
	err = actual.AssignPropertiesFromDeleteRetentionPolicy_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DeleteRetentionPolicy_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeleteRetentionPolicy_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeleteRetentionPolicy_Status, DeleteRetentionPolicy_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeleteRetentionPolicy_Status runs a test to see if a specific instance of DeleteRetentionPolicy_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDeleteRetentionPolicy_Status(subject DeleteRetentionPolicy_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeleteRetentionPolicy_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeleteRetentionPolicy_Status instances for property testing - lazily instantiated by
//DeleteRetentionPolicy_StatusGenerator()
var deleteRetentionPolicy_statusGenerator gopter.Gen

// DeleteRetentionPolicy_StatusGenerator returns a generator of DeleteRetentionPolicy_Status instances for property testing.
func DeleteRetentionPolicy_StatusGenerator() gopter.Gen {
	if deleteRetentionPolicy_statusGenerator != nil {
		return deleteRetentionPolicy_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_Status(generators)
	deleteRetentionPolicy_statusGenerator = gen.Struct(reflect.TypeOf(DeleteRetentionPolicy_Status{}), generators)

	return deleteRetentionPolicy_statusGenerator
}

// AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_Status(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_LastAccessTimeTrackingPolicy_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from LastAccessTimeTrackingPolicy_Spec to LastAccessTimeTrackingPolicy_Spec via AssignPropertiesToLastAccessTimeTrackingPolicy_Spec & AssignPropertiesFromLastAccessTimeTrackingPolicy_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForLastAccessTimeTrackingPolicy_Spec, LastAccessTimeTrackingPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLastAccessTimeTrackingPolicy_Spec tests if a specific instance of LastAccessTimeTrackingPolicy_Spec can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForLastAccessTimeTrackingPolicy_Spec(subject LastAccessTimeTrackingPolicy_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Spec
	err := copied.AssignPropertiesToLastAccessTimeTrackingPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual LastAccessTimeTrackingPolicy_Spec
	err = actual.AssignPropertiesFromLastAccessTimeTrackingPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_LastAccessTimeTrackingPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LastAccessTimeTrackingPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLastAccessTimeTrackingPolicy_Spec, LastAccessTimeTrackingPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLastAccessTimeTrackingPolicy_Spec runs a test to see if a specific instance of LastAccessTimeTrackingPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForLastAccessTimeTrackingPolicy_Spec(subject LastAccessTimeTrackingPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LastAccessTimeTrackingPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LastAccessTimeTrackingPolicy_Spec instances for property testing - lazily instantiated by
//LastAccessTimeTrackingPolicy_SpecGenerator()
var lastAccessTimeTrackingPolicy_specGenerator gopter.Gen

// LastAccessTimeTrackingPolicy_SpecGenerator returns a generator of LastAccessTimeTrackingPolicy_Spec instances for property testing.
func LastAccessTimeTrackingPolicy_SpecGenerator() gopter.Gen {
	if lastAccessTimeTrackingPolicy_specGenerator != nil {
		return lastAccessTimeTrackingPolicy_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_Spec(generators)
	lastAccessTimeTrackingPolicy_specGenerator = gen.Struct(reflect.TypeOf(LastAccessTimeTrackingPolicy_Spec{}), generators)

	return lastAccessTimeTrackingPolicy_specGenerator
}

// AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_Spec(gens map[string]gopter.Gen) {
	gens["BlobType"] = gen.SliceOf(gen.AlphaString())
	gens["Enable"] = gen.Bool()
	gens["Name"] = gen.PtrOf(gen.OneConstOf(LastAccessTimeTrackingPolicy_Name_SpecAccessTimeTracking))
	gens["TrackingGranularityInDays"] = gen.PtrOf(gen.Int())
}

func Test_LastAccessTimeTrackingPolicy_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from LastAccessTimeTrackingPolicy_Status to LastAccessTimeTrackingPolicy_Status via AssignPropertiesToLastAccessTimeTrackingPolicy_Status & AssignPropertiesFromLastAccessTimeTrackingPolicy_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForLastAccessTimeTrackingPolicy_Status, LastAccessTimeTrackingPolicy_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLastAccessTimeTrackingPolicy_Status tests if a specific instance of LastAccessTimeTrackingPolicy_Status can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForLastAccessTimeTrackingPolicy_Status(subject LastAccessTimeTrackingPolicy_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.LastAccessTimeTrackingPolicy_Status
	err := copied.AssignPropertiesToLastAccessTimeTrackingPolicy_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual LastAccessTimeTrackingPolicy_Status
	err = actual.AssignPropertiesFromLastAccessTimeTrackingPolicy_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_LastAccessTimeTrackingPolicy_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LastAccessTimeTrackingPolicy_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLastAccessTimeTrackingPolicy_Status, LastAccessTimeTrackingPolicy_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLastAccessTimeTrackingPolicy_Status runs a test to see if a specific instance of LastAccessTimeTrackingPolicy_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForLastAccessTimeTrackingPolicy_Status(subject LastAccessTimeTrackingPolicy_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LastAccessTimeTrackingPolicy_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LastAccessTimeTrackingPolicy_Status instances for property testing - lazily instantiated by
//LastAccessTimeTrackingPolicy_StatusGenerator()
var lastAccessTimeTrackingPolicy_statusGenerator gopter.Gen

// LastAccessTimeTrackingPolicy_StatusGenerator returns a generator of LastAccessTimeTrackingPolicy_Status instances for property testing.
func LastAccessTimeTrackingPolicy_StatusGenerator() gopter.Gen {
	if lastAccessTimeTrackingPolicy_statusGenerator != nil {
		return lastAccessTimeTrackingPolicy_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_Status(generators)
	lastAccessTimeTrackingPolicy_statusGenerator = gen.Struct(reflect.TypeOf(LastAccessTimeTrackingPolicy_Status{}), generators)

	return lastAccessTimeTrackingPolicy_statusGenerator
}

// AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_Status(gens map[string]gopter.Gen) {
	gens["BlobType"] = gen.SliceOf(gen.AlphaString())
	gens["Enable"] = gen.Bool()
	gens["Name"] = gen.PtrOf(gen.OneConstOf(LastAccessTimeTrackingPolicy_Name_StatusAccessTimeTracking))
	gens["TrackingGranularityInDays"] = gen.PtrOf(gen.Int())
}

func Test_RestorePolicyProperties_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RestorePolicyProperties_Spec to RestorePolicyProperties_Spec via AssignPropertiesToRestorePolicyProperties_Spec & AssignPropertiesFromRestorePolicyProperties_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForRestorePolicyProperties_Spec, RestorePolicyProperties_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRestorePolicyProperties_Spec tests if a specific instance of RestorePolicyProperties_Spec can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForRestorePolicyProperties_Spec(subject RestorePolicyProperties_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.RestorePolicyProperties_Spec
	err := copied.AssignPropertiesToRestorePolicyProperties_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RestorePolicyProperties_Spec
	err = actual.AssignPropertiesFromRestorePolicyProperties_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RestorePolicyProperties_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RestorePolicyProperties_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRestorePolicyProperties_Spec, RestorePolicyProperties_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRestorePolicyProperties_Spec runs a test to see if a specific instance of RestorePolicyProperties_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForRestorePolicyProperties_Spec(subject RestorePolicyProperties_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RestorePolicyProperties_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RestorePolicyProperties_Spec instances for property testing - lazily instantiated by
//RestorePolicyProperties_SpecGenerator()
var restorePolicyProperties_specGenerator gopter.Gen

// RestorePolicyProperties_SpecGenerator returns a generator of RestorePolicyProperties_Spec instances for property testing.
func RestorePolicyProperties_SpecGenerator() gopter.Gen {
	if restorePolicyProperties_specGenerator != nil {
		return restorePolicyProperties_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRestorePolicyProperties_Spec(generators)
	restorePolicyProperties_specGenerator = gen.Struct(reflect.TypeOf(RestorePolicyProperties_Spec{}), generators)

	return restorePolicyProperties_specGenerator
}

// AddIndependentPropertyGeneratorsForRestorePolicyProperties_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRestorePolicyProperties_Spec(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.Bool()
}

func Test_RestorePolicyProperties_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RestorePolicyProperties_Status to RestorePolicyProperties_Status via AssignPropertiesToRestorePolicyProperties_Status & AssignPropertiesFromRestorePolicyProperties_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForRestorePolicyProperties_Status, RestorePolicyProperties_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRestorePolicyProperties_Status tests if a specific instance of RestorePolicyProperties_Status can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForRestorePolicyProperties_Status(subject RestorePolicyProperties_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.RestorePolicyProperties_Status
	err := copied.AssignPropertiesToRestorePolicyProperties_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RestorePolicyProperties_Status
	err = actual.AssignPropertiesFromRestorePolicyProperties_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RestorePolicyProperties_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RestorePolicyProperties_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRestorePolicyProperties_Status, RestorePolicyProperties_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRestorePolicyProperties_Status runs a test to see if a specific instance of RestorePolicyProperties_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForRestorePolicyProperties_Status(subject RestorePolicyProperties_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RestorePolicyProperties_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RestorePolicyProperties_Status instances for property testing - lazily instantiated by
//RestorePolicyProperties_StatusGenerator()
var restorePolicyProperties_statusGenerator gopter.Gen

// RestorePolicyProperties_StatusGenerator returns a generator of RestorePolicyProperties_Status instances for property testing.
func RestorePolicyProperties_StatusGenerator() gopter.Gen {
	if restorePolicyProperties_statusGenerator != nil {
		return restorePolicyProperties_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRestorePolicyProperties_Status(generators)
	restorePolicyProperties_statusGenerator = gen.Struct(reflect.TypeOf(RestorePolicyProperties_Status{}), generators)

	return restorePolicyProperties_statusGenerator
}

// AddIndependentPropertyGeneratorsForRestorePolicyProperties_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRestorePolicyProperties_Status(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.Bool()
	gens["LastEnabledTime"] = gen.PtrOf(gen.AlphaString())
	gens["MinRestoreTime"] = gen.PtrOf(gen.AlphaString())
}

func Test_CorsRule_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CorsRule_Spec to CorsRule_Spec via AssignPropertiesToCorsRule_Spec & AssignPropertiesFromCorsRule_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForCorsRule_Spec, CorsRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCorsRule_Spec tests if a specific instance of CorsRule_Spec can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForCorsRule_Spec(subject CorsRule_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.CorsRule_Spec
	err := copied.AssignPropertiesToCorsRule_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CorsRule_Spec
	err = actual.AssignPropertiesFromCorsRule_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CorsRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRule_Spec, CorsRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRule_Spec runs a test to see if a specific instance of CorsRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRule_Spec(subject CorsRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRule_Spec instances for property testing - lazily instantiated by CorsRule_SpecGenerator()
var corsRule_specGenerator gopter.Gen

// CorsRule_SpecGenerator returns a generator of CorsRule_Spec instances for property testing.
func CorsRule_SpecGenerator() gopter.Gen {
	if corsRule_specGenerator != nil {
		return corsRule_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsRule_Spec(generators)
	corsRule_specGenerator = gen.Struct(reflect.TypeOf(CorsRule_Spec{}), generators)

	return corsRule_specGenerator
}

// AddIndependentPropertyGeneratorsForCorsRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsRule_Spec(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.SliceOf(gen.OneConstOf(
		CorsRule_AllowedMethods_SpecDELETE,
		CorsRule_AllowedMethods_SpecGET,
		CorsRule_AllowedMethods_SpecHEAD,
		CorsRule_AllowedMethods_SpecMERGE,
		CorsRule_AllowedMethods_SpecOPTIONS,
		CorsRule_AllowedMethods_SpecPOST,
		CorsRule_AllowedMethods_SpecPUT))
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.Int()
}

func Test_CorsRule_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CorsRule_Status to CorsRule_Status via AssignPropertiesToCorsRule_Status & AssignPropertiesFromCorsRule_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForCorsRule_Status, CorsRule_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCorsRule_Status tests if a specific instance of CorsRule_Status can be assigned to v1alpha1api20210401storage and back losslessly
func RunPropertyAssignmentTestForCorsRule_Status(subject CorsRule_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210401storage.CorsRule_Status
	err := copied.AssignPropertiesToCorsRule_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CorsRule_Status
	err = actual.AssignPropertiesFromCorsRule_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CorsRule_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRule_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRule_Status, CorsRule_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRule_Status runs a test to see if a specific instance of CorsRule_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRule_Status(subject CorsRule_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRule_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRule_Status instances for property testing - lazily instantiated by CorsRule_StatusGenerator()
var corsRule_statusGenerator gopter.Gen

// CorsRule_StatusGenerator returns a generator of CorsRule_Status instances for property testing.
func CorsRule_StatusGenerator() gopter.Gen {
	if corsRule_statusGenerator != nil {
		return corsRule_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsRule_Status(generators)
	corsRule_statusGenerator = gen.Struct(reflect.TypeOf(CorsRule_Status{}), generators)

	return corsRule_statusGenerator
}

// AddIndependentPropertyGeneratorsForCorsRule_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsRule_Status(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.SliceOf(gen.OneConstOf(
		CorsRule_AllowedMethods_StatusDELETE,
		CorsRule_AllowedMethods_StatusGET,
		CorsRule_AllowedMethods_StatusHEAD,
		CorsRule_AllowedMethods_StatusMERGE,
		CorsRule_AllowedMethods_StatusOPTIONS,
		CorsRule_AllowedMethods_StatusPOST,
		CorsRule_AllowedMethods_StatusPUT))
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.Int()
}
