// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_BlobContainer_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BlobContainer_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBlobContainer_StatusARM, BlobContainer_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBlobContainer_StatusARM runs a test to see if a specific instance of BlobContainer_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBlobContainer_StatusARM(subject BlobContainer_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BlobContainer_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BlobContainer_StatusARM instances for property testing - lazily instantiated by
//BlobContainer_StatusARMGenerator()
var blobContainer_statusARMGenerator gopter.Gen

// BlobContainer_StatusARMGenerator returns a generator of BlobContainer_StatusARM instances for property testing.
// We first initialize blobContainer_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BlobContainer_StatusARMGenerator() gopter.Gen {
	if blobContainer_statusARMGenerator != nil {
		return blobContainer_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobContainer_StatusARM(generators)
	blobContainer_statusARMGenerator = gen.Struct(reflect.TypeOf(BlobContainer_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBlobContainer_StatusARM(generators)
	AddRelatedPropertyGeneratorsForBlobContainer_StatusARM(generators)
	blobContainer_statusARMGenerator = gen.Struct(reflect.TypeOf(BlobContainer_StatusARM{}), generators)

	return blobContainer_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForBlobContainer_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBlobContainer_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBlobContainer_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBlobContainer_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerProperties_StatusARMGenerator())
}

func Test_ContainerProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProperties_StatusARM, ContainerProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProperties_StatusARM runs a test to see if a specific instance of ContainerProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProperties_StatusARM(subject ContainerProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_StatusARM instances for property testing - lazily instantiated by
//ContainerProperties_StatusARMGenerator()
var containerProperties_statusARMGenerator gopter.Gen

// ContainerProperties_StatusARMGenerator returns a generator of ContainerProperties_StatusARM instances for property testing.
// We first initialize containerProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProperties_StatusARMGenerator() gopter.Gen {
	if containerProperties_statusARMGenerator != nil {
		return containerProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_StatusARM(generators)
	containerProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerProperties_StatusARM(generators)
	containerProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_StatusARM{}), generators)

	return containerProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["DefaultEncryptionScope"] = gen.PtrOf(gen.AlphaString())
	gens["Deleted"] = gen.PtrOf(gen.Bool())
	gens["DeletedTime"] = gen.PtrOf(gen.AlphaString())
	gens["DenyEncryptionScopeOverride"] = gen.PtrOf(gen.Bool())
	gens["HasImmutabilityPolicy"] = gen.PtrOf(gen.Bool())
	gens["HasLegalHold"] = gen.PtrOf(gen.Bool())
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
	gens["LeaseDuration"] = gen.PtrOf(gen.AlphaString())
	gens["LeaseState"] = gen.PtrOf(gen.AlphaString())
	gens["LeaseStatus"] = gen.PtrOf(gen.AlphaString())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["PublicAccess"] = gen.PtrOf(gen.AlphaString())
	gens["RemainingRetentionDays"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["ImmutabilityPolicy"] = gen.PtrOf(ImmutabilityPolicyProperties_StatusARMGenerator())
	gens["ImmutableStorageWithVersioning"] = gen.PtrOf(ImmutableStorageWithVersioning_StatusARMGenerator())
	gens["LegalHold"] = gen.PtrOf(LegalHoldProperties_StatusARMGenerator())
}

func Test_ImmutabilityPolicyProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutabilityPolicyProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutabilityPolicyProperties_StatusARM, ImmutabilityPolicyProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutabilityPolicyProperties_StatusARM runs a test to see if a specific instance of ImmutabilityPolicyProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutabilityPolicyProperties_StatusARM(subject ImmutabilityPolicyProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutabilityPolicyProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutabilityPolicyProperties_StatusARM instances for property testing - lazily instantiated by
//ImmutabilityPolicyProperties_StatusARMGenerator()
var immutabilityPolicyProperties_statusARMGenerator gopter.Gen

// ImmutabilityPolicyProperties_StatusARMGenerator returns a generator of ImmutabilityPolicyProperties_StatusARM instances for property testing.
// We first initialize immutabilityPolicyProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ImmutabilityPolicyProperties_StatusARMGenerator() gopter.Gen {
	if immutabilityPolicyProperties_statusARMGenerator != nil {
		return immutabilityPolicyProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_StatusARM(generators)
	immutabilityPolicyProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForImmutabilityPolicyProperties_StatusARM(generators)
	immutabilityPolicyProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyProperties_StatusARM{}), generators)

	return immutabilityPolicyProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForImmutabilityPolicyProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImmutabilityPolicyProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ImmutabilityPolicyProperty_StatusARMGenerator())
	gens["UpdateHistory"] = gen.SliceOf(UpdateHistoryProperty_StatusARMGenerator())
}

func Test_ImmutableStorageWithVersioning_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutableStorageWithVersioning_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutableStorageWithVersioning_StatusARM, ImmutableStorageWithVersioning_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutableStorageWithVersioning_StatusARM runs a test to see if a specific instance of ImmutableStorageWithVersioning_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutableStorageWithVersioning_StatusARM(subject ImmutableStorageWithVersioning_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutableStorageWithVersioning_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutableStorageWithVersioning_StatusARM instances for property testing - lazily instantiated by
//ImmutableStorageWithVersioning_StatusARMGenerator()
var immutableStorageWithVersioning_statusARMGenerator gopter.Gen

// ImmutableStorageWithVersioning_StatusARMGenerator returns a generator of ImmutableStorageWithVersioning_StatusARM instances for property testing.
func ImmutableStorageWithVersioning_StatusARMGenerator() gopter.Gen {
	if immutableStorageWithVersioning_statusARMGenerator != nil {
		return immutableStorageWithVersioning_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_StatusARM(generators)
	immutableStorageWithVersioning_statusARMGenerator = gen.Struct(reflect.TypeOf(ImmutableStorageWithVersioning_StatusARM{}), generators)

	return immutableStorageWithVersioning_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_StatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MigrationState"] = gen.PtrOf(gen.AlphaString())
	gens["TimeStamp"] = gen.PtrOf(gen.AlphaString())
}

func Test_LegalHoldProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LegalHoldProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLegalHoldProperties_StatusARM, LegalHoldProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLegalHoldProperties_StatusARM runs a test to see if a specific instance of LegalHoldProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLegalHoldProperties_StatusARM(subject LegalHoldProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LegalHoldProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LegalHoldProperties_StatusARM instances for property testing - lazily instantiated by
//LegalHoldProperties_StatusARMGenerator()
var legalHoldProperties_statusARMGenerator gopter.Gen

// LegalHoldProperties_StatusARMGenerator returns a generator of LegalHoldProperties_StatusARM instances for property testing.
// We first initialize legalHoldProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LegalHoldProperties_StatusARMGenerator() gopter.Gen {
	if legalHoldProperties_statusARMGenerator != nil {
		return legalHoldProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLegalHoldProperties_StatusARM(generators)
	legalHoldProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(LegalHoldProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLegalHoldProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForLegalHoldProperties_StatusARM(generators)
	legalHoldProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(LegalHoldProperties_StatusARM{}), generators)

	return legalHoldProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForLegalHoldProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLegalHoldProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["HasLegalHold"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForLegalHoldProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLegalHoldProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Tags"] = gen.SliceOf(TagProperty_StatusARMGenerator())
}

func Test_ImmutabilityPolicyProperty_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutabilityPolicyProperty_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutabilityPolicyProperty_StatusARM, ImmutabilityPolicyProperty_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutabilityPolicyProperty_StatusARM runs a test to see if a specific instance of ImmutabilityPolicyProperty_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutabilityPolicyProperty_StatusARM(subject ImmutabilityPolicyProperty_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutabilityPolicyProperty_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutabilityPolicyProperty_StatusARM instances for property testing - lazily instantiated by
//ImmutabilityPolicyProperty_StatusARMGenerator()
var immutabilityPolicyProperty_statusARMGenerator gopter.Gen

// ImmutabilityPolicyProperty_StatusARMGenerator returns a generator of ImmutabilityPolicyProperty_StatusARM instances for property testing.
func ImmutabilityPolicyProperty_StatusARMGenerator() gopter.Gen {
	if immutabilityPolicyProperty_statusARMGenerator != nil {
		return immutabilityPolicyProperty_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyProperty_StatusARM(generators)
	immutabilityPolicyProperty_statusARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyProperty_StatusARM{}), generators)

	return immutabilityPolicyProperty_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutabilityPolicyProperty_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutabilityPolicyProperty_StatusARM(gens map[string]gopter.Gen) {
	gens["AllowProtectedAppendWrites"] = gen.PtrOf(gen.Bool())
	gens["ImmutabilityPeriodSinceCreationInDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

func Test_TagProperty_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TagProperty_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTagProperty_StatusARM, TagProperty_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTagProperty_StatusARM runs a test to see if a specific instance of TagProperty_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTagProperty_StatusARM(subject TagProperty_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TagProperty_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TagProperty_StatusARM instances for property testing - lazily instantiated by
//TagProperty_StatusARMGenerator()
var tagProperty_statusARMGenerator gopter.Gen

// TagProperty_StatusARMGenerator returns a generator of TagProperty_StatusARM instances for property testing.
func TagProperty_StatusARMGenerator() gopter.Gen {
	if tagProperty_statusARMGenerator != nil {
		return tagProperty_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTagProperty_StatusARM(generators)
	tagProperty_statusARMGenerator = gen.Struct(reflect.TypeOf(TagProperty_StatusARM{}), generators)

	return tagProperty_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForTagProperty_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTagProperty_StatusARM(gens map[string]gopter.Gen) {
	gens["ObjectIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Upn"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpdateHistoryProperty_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateHistoryProperty_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateHistoryProperty_StatusARM, UpdateHistoryProperty_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateHistoryProperty_StatusARM runs a test to see if a specific instance of UpdateHistoryProperty_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateHistoryProperty_StatusARM(subject UpdateHistoryProperty_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateHistoryProperty_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateHistoryProperty_StatusARM instances for property testing - lazily instantiated by
//UpdateHistoryProperty_StatusARMGenerator()
var updateHistoryProperty_statusARMGenerator gopter.Gen

// UpdateHistoryProperty_StatusARMGenerator returns a generator of UpdateHistoryProperty_StatusARM instances for property testing.
func UpdateHistoryProperty_StatusARMGenerator() gopter.Gen {
	if updateHistoryProperty_statusARMGenerator != nil {
		return updateHistoryProperty_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateHistoryProperty_StatusARM(generators)
	updateHistoryProperty_statusARMGenerator = gen.Struct(reflect.TypeOf(UpdateHistoryProperty_StatusARM{}), generators)

	return updateHistoryProperty_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateHistoryProperty_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateHistoryProperty_StatusARM(gens map[string]gopter.Gen) {
	gens["ImmutabilityPeriodSinceCreationInDays"] = gen.PtrOf(gen.Int())
	gens["ObjectIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Update"] = gen.PtrOf(gen.AlphaString())
	gens["Upn"] = gen.PtrOf(gen.AlphaString())
}
