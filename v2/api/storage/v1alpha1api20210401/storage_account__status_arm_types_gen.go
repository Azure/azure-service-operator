// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

type StorageAccount_StatusARM struct {
	//ExtendedLocation: The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation_StatusARM `json:"extendedLocation,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Identity: The identity of the resource.
	Identity *Identity_StatusARM `json:"identity,omitempty"`

	//Kind: Gets the Kind.
	Kind *StorageAccountStatusKind `json:"kind,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//Properties: Properties of the storage account.
	Properties *StorageAccountProperties_StatusARM `json:"properties,omitempty"`

	//Sku: Gets the SKU.
	Sku *Sku_StatusARM `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

type ExtendedLocation_StatusARM struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

type Identity_StatusARM struct {
	//PrincipalId: The principal ID of resource identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant ID of resource.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The identity type.
	Type IdentityStatusType `json:"type"`

	//UserAssignedIdentities: Gets or sets a list of key value pairs that describe the set of User Assigned identities that
	//will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned
	//identity is permitted here.
	UserAssignedIdentities map[string]UserAssignedIdentity_StatusARM `json:"userAssignedIdentities,omitempty"`
}

type StorageAccountProperties_StatusARM struct {
	//AccessTier: Required for storage accounts where kind = BlobStorage. The access tier used for billing.
	AccessTier *StorageAccountPropertiesStatusAccessTier `json:"accessTier,omitempty"`

	//AllowBlobPublicAccess: Allow or disallow public access to all blobs or containers in the storage account. The default
	//interpretation is true for this property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	//AllowCrossTenantReplication: Allow or disallow cross AAD tenant object replication. The default interpretation is true
	//for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	//AllowSharedKeyAccess: Indicates whether the storage account permits requests to be authorized with the account access
	//key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure
	//Active Directory (Azure AD). The default value is null, which is equivalent to true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	//AzureFilesIdentityBasedAuthentication: Provides the identity based authentication settings for Azure Files.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_StatusARM `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	//BlobRestoreStatus: Blob restore status
	BlobRestoreStatus *BlobRestoreStatus_StatusARM `json:"blobRestoreStatus,omitempty"`

	//CreationTime: Gets the creation date and time of the storage account in UTC.
	CreationTime *string `json:"creationTime,omitempty"`

	//CustomDomain: Gets the custom domain the user assigned to this storage account.
	CustomDomain *CustomDomain_StatusARM `json:"customDomain,omitempty"`

	//Encryption: Gets the encryption settings on the account. If unspecified, the account is unencrypted.
	Encryption *Encryption_StatusARM `json:"encryption,omitempty"`

	//FailoverInProgress: If the failover is in progress, the value will be true, otherwise, it will be null.
	FailoverInProgress *bool `json:"failoverInProgress,omitempty"`

	//GeoReplicationStats: Geo Replication Stats
	GeoReplicationStats *GeoReplicationStats_StatusARM `json:"geoReplicationStats,omitempty"`

	//IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	//IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	//KeyCreationTime: Storage account keys creation time.
	KeyCreationTime *KeyCreationTime_StatusARM `json:"keyCreationTime,omitempty"`

	//KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy_StatusARM `json:"keyPolicy,omitempty"`

	//LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
	LargeFileSharesState *StorageAccountPropertiesStatusLargeFileSharesState `json:"largeFileSharesState,omitempty"`

	//LastGeoFailoverTime: Gets the timestamp of the most recent instance of a failover to the secondary location. Only the
	//most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only
	//available if the accountType is Standard_GRS or Standard_RAGRS.
	LastGeoFailoverTime *string `json:"lastGeoFailoverTime,omitempty"`

	//MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS
	//1.0 for this property.
	MinimumTlsVersion *StorageAccountPropertiesStatusMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet_StatusARM `json:"networkAcls,omitempty"`

	//PrimaryEndpoints: Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that
	//Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
	PrimaryEndpoints *Endpoints_StatusARM `json:"primaryEndpoints,omitempty"`

	//PrimaryLocation: Gets the location of the primary data center for the storage account.
	PrimaryLocation *string `json:"primaryLocation,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connection associated with the specified storage account
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbeddedARM `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Gets the status of the storage account at the time the operation was called.
	ProvisioningState *StorageAccountPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//RoutingPreference: Maintains information about the network routing choice opted by the user for data transfer
	RoutingPreference *RoutingPreference_StatusARM `json:"routingPreference,omitempty"`

	//SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy_StatusARM `json:"sasPolicy,omitempty"`

	//SecondaryEndpoints: Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the
	//secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
	SecondaryEndpoints *Endpoints_StatusARM `json:"secondaryEndpoints,omitempty"`

	//SecondaryLocation: Gets the location of the geo-replicated secondary for the storage account. Only available if the
	//accountType is Standard_GRS or Standard_RAGRS.
	SecondaryLocation *string `json:"secondaryLocation,omitempty"`

	//StatusOfPrimary: Gets the status indicating whether the primary location of the storage account is available or
	//unavailable.
	StatusOfPrimary *StorageAccountPropertiesStatusStatusOfPrimary `json:"statusOfPrimary,omitempty"`

	//StatusOfSecondary: Gets the status indicating whether the secondary location of the storage account is available or
	//unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
	StatusOfSecondary *StorageAccountPropertiesStatusStatusOfSecondary `json:"statusOfSecondary,omitempty"`

	//SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets to true.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`
}

type StorageAccountStatusKind string

const (
	StorageAccountStatusKindBlobStorage      = StorageAccountStatusKind("BlobStorage")
	StorageAccountStatusKindBlockBlobStorage = StorageAccountStatusKind("BlockBlobStorage")
	StorageAccountStatusKindFileStorage      = StorageAccountStatusKind("FileStorage")
	StorageAccountStatusKindStorage          = StorageAccountStatusKind("Storage")
	StorageAccountStatusKindStorageV2        = StorageAccountStatusKind("StorageV2")
)

type AzureFilesIdentityBasedAuthentication_StatusARM struct {
	//ActiveDirectoryProperties: Required if choose AD.
	ActiveDirectoryProperties *ActiveDirectoryProperties_StatusARM `json:"activeDirectoryProperties,omitempty"`

	//DefaultSharePermission: Default share permission for users using Kerberos authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission `json:"defaultSharePermission,omitempty"`

	//DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions `json:"directoryServiceOptions"`
}

type BlobRestoreStatus_StatusARM struct {
	//FailureReason: Failure reason when blob restore is failed.
	FailureReason *string `json:"failureReason,omitempty"`

	//Parameters: Blob restore request parameters.
	Parameters *BlobRestoreParameters_StatusARM `json:"parameters,omitempty"`

	//RestoreId: Id for tracking blob restore request.
	RestoreId *string `json:"restoreId,omitempty"`

	//Status: The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing.
	//- Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
	Status *BlobRestoreStatusStatusStatus `json:"status,omitempty"`
}

type CustomDomain_StatusARM struct {
	//Name: Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
	Name string `json:"name"`

	//UseSubDomainName: Indicates whether indirect CName validation is enabled. Default value is false. This should only be
	//set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

type Encryption_StatusARM struct {
	//Identity: The identity to be used with service-side encryption at rest.
	Identity *EncryptionIdentity_StatusARM `json:"identity,omitempty"`

	//KeySource: The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage,
	//Microsoft.Keyvault
	KeySource EncryptionStatusKeySource `json:"keySource"`

	//Keyvaultproperties: Properties provided by key vault.
	Keyvaultproperties *KeyVaultProperties_StatusARM `json:"keyvaultproperties,omitempty"`

	//RequireInfrastructureEncryption: A boolean indicating whether or not the service applies a secondary layer of encryption
	//with platform managed keys for data at rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	//Services: List of services which support encryption.
	Services *EncryptionServices_StatusARM `json:"services,omitempty"`
}

type Endpoints_StatusARM struct {
	//Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	//Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	//File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	//InternetEndpoints: Gets the internet routing storage endpoints
	InternetEndpoints *StorageAccountInternetEndpoints_StatusARM `json:"internetEndpoints,omitempty"`

	//MicrosoftEndpoints: Gets the microsoft routing storage endpoints.
	MicrosoftEndpoints *StorageAccountMicrosoftEndpoints_StatusARM `json:"microsoftEndpoints,omitempty"`

	//Queue: Gets the queue endpoint.
	Queue *string `json:"queue,omitempty"`

	//Table: Gets the table endpoint.
	Table *string `json:"table,omitempty"`

	//Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

type ExtendedLocationType_Status string

const ExtendedLocationType_StatusEdgeZone = ExtendedLocationType_Status("EdgeZone")

type GeoReplicationStats_StatusARM struct {
	//CanFailover: A boolean flag which indicates whether or not account failover is supported for the account.
	CanFailover *bool `json:"canFailover,omitempty"`

	//LastSyncTime: All primary writes preceding this UTC date/time value are guaranteed to be available for read operations.
	//Primary writes following this point in time may or may not be available for reads. Element may be default value if value
	//of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
	LastSyncTime *string `json:"lastSyncTime,omitempty"`

	//Status: The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is
	//active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary
	//location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the
	//secondary location is temporarily unavailable.
	Status *GeoReplicationStatsStatusStatus `json:"status,omitempty"`
}

type IdentityStatusType string

const (
	IdentityStatusTypeNone                       = IdentityStatusType("None")
	IdentityStatusTypeSystemAssigned             = IdentityStatusType("SystemAssigned")
	IdentityStatusTypeSystemAssignedUserAssigned = IdentityStatusType("SystemAssigned,UserAssigned")
	IdentityStatusTypeUserAssigned               = IdentityStatusType("UserAssigned")
)

type KeyCreationTime_StatusARM struct {
	Key1 *string `json:"key1,omitempty"`
	Key2 *string `json:"key2,omitempty"`
}

type KeyPolicy_StatusARM struct {
	//KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays int `json:"keyExpirationPeriodInDays"`
}

type NetworkRuleSet_StatusARM struct {
	//Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of
	//Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSetStatusBypass `json:"bypass,omitempty"`

	//DefaultAction: Specifies the default action of allow or deny when no other rules match.
	DefaultAction NetworkRuleSetStatusDefaultAction `json:"defaultAction"`

	//IpRules: Sets the IP ACL rules
	IpRules []IPRule_StatusARM `json:"ipRules,omitempty"`

	//ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule_StatusARM `json:"resourceAccessRules,omitempty"`

	//VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule_StatusARM `json:"virtualNetworkRules,omitempty"`
}

type PrivateEndpointConnection_Status_SubResourceEmbeddedARM struct {
	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

type RoutingPreference_StatusARM struct {
	//PublishInternetEndpoints: A boolean flag which indicates whether internet routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	//PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	//RoutingChoice: Routing Choice defines the kind of network routing opted by the user.
	RoutingChoice *RoutingPreferenceStatusRoutingChoice `json:"routingChoice,omitempty"`
}

type SasPolicy_StatusARM struct {
	//ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction SasPolicyStatusExpirationAction `json:"expirationAction"`

	//SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod string `json:"sasExpirationPeriod"`
}

type UserAssignedIdentity_StatusARM struct {
	//ClientId: The client ID of the identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal ID of the identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

type ActiveDirectoryProperties_StatusARM struct {
	//AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid string `json:"azureStorageSid"`

	//DomainGuid: Specifies the domain GUID.
	DomainGuid string `json:"domainGuid"`

	//DomainName: Specifies the primary domain that the AD DNS server is authoritative for.
	DomainName string `json:"domainName"`

	//DomainSid: Specifies the security identifier (SID).
	DomainSid string `json:"domainSid"`

	//ForestName: Specifies the Active Directory forest to get.
	ForestName string `json:"forestName"`

	//NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName string `json:"netBiosDomainName"`
}

type BlobRestoreParameters_StatusARM struct {
	//BlobRanges: Blob ranges to restore.
	BlobRanges []BlobRestoreRange_StatusARM `json:"blobRanges"`

	//TimeToRestore: Restore blob to the specified time.
	TimeToRestore string `json:"timeToRestore"`
}

type EncryptionIdentity_StatusARM struct {
	//UserAssignedIdentity: Resource identifier of the UserAssigned identity to be associated with server-side encryption on
	//the storage account.
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

type EncryptionServices_StatusARM struct {
	//Blob: The encryption function of the blob storage service.
	Blob *EncryptionService_StatusARM `json:"blob,omitempty"`

	//File: The encryption function of the file storage service.
	File *EncryptionService_StatusARM `json:"file,omitempty"`

	//Queue: The encryption function of the queue storage service.
	Queue *EncryptionService_StatusARM `json:"queue,omitempty"`

	//Table: The encryption function of the table storage service.
	Table *EncryptionService_StatusARM `json:"table,omitempty"`
}

type IPRule_StatusARM struct {
	//Action: The action of IP ACL rule.
	Action *IPRuleStatusAction `json:"action,omitempty"`

	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

type KeyVaultProperties_StatusARM struct {
	//CurrentVersionedKeyIdentifier: The object identifier of the current versioned Key Vault Key in use.
	CurrentVersionedKeyIdentifier *string `json:"currentVersionedKeyIdentifier,omitempty"`

	//Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	//Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	//Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`

	//LastKeyRotationTimestamp: Timestamp of last rotation of the Key Vault Key.
	LastKeyRotationTimestamp *string `json:"lastKeyRotationTimestamp,omitempty"`
}

type ResourceAccessRule_StatusARM struct {
	//ResourceId: Resource Id
	ResourceId *string `json:"resourceId,omitempty"`

	//TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

type StorageAccountInternetEndpoints_StatusARM struct {
	//Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	//Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	//File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	//Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

type StorageAccountMicrosoftEndpoints_StatusARM struct {
	//Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	//Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	//File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	//Queue: Gets the queue endpoint.
	Queue *string `json:"queue,omitempty"`

	//Table: Gets the table endpoint.
	Table *string `json:"table,omitempty"`

	//Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

type VirtualNetworkRule_StatusARM struct {
	//Action: The action of virtual network rule.
	Action *VirtualNetworkRuleStatusAction `json:"action,omitempty"`

	//Id: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Id string `json:"id"`

	//State: Gets the state of virtual network rule.
	State *VirtualNetworkRuleStatusState `json:"state,omitempty"`
}

type BlobRestoreRange_StatusARM struct {
	//EndRange: Blob end range. This is exclusive. Empty means account end.
	EndRange string `json:"endRange"`

	//StartRange: Blob start range. This is inclusive. Empty means account start.
	StartRange string `json:"startRange"`
}

type EncryptionService_StatusARM struct {
	//Enabled: A boolean indicating whether or not the service encrypts the data as it is stored.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyType: Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped
	//encryption key will be used. 'Service' key type implies that a default service key is used.
	KeyType *EncryptionServiceStatusKeyType `json:"keyType,omitempty"`

	//LastEnabledTime: Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned
	//when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a
	//rough estimate.
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`
}
