// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

type StorageAccount_StatusARM struct {
	//ExtendedLocation: Optional. Set the extended location of the resource. If not
	//set, the storage account will be created in Azure main region. Otherwise it will
	//be created in the specified extended location
	ExtendedLocation *ExtendedLocation_StatusARM `json:"extendedLocation,omitempty"`

	//Identity: The identity of the resource.
	Identity *Identity_StatusARM `json:"identity,omitempty"`

	//Kind: Required. Indicates the type of storage account.
	Kind *StorageAccount_Kind_Status `json:"kind,omitempty"`

	//Location: Required. Gets or sets the location of the resource. This will be one
	//of the supported and registered Azure Geo Regions (e.g. West US, East US,
	//Southeast Asia, etc.). The geo region of a resource cannot be changed once it is
	//created, but if an identical geo region is specified on update, the request will
	//succeed.
	Location *string `json:"location,omitempty"`

	//Properties: The parameters used to create the storage account.
	Properties *StorageAccountProperties_StatusARM `json:"properties,omitempty"`

	//Sku: Required. Gets or sets the SKU name.
	Sku *Sku_StatusARM `json:"sku,omitempty"`

	//Tags: Gets or sets a list of key value pairs that describe the resource. These
	//tags can be used for viewing and grouping this resource (across resource
	//groups). A maximum of 15 tags can be provided for a resource. Each tag must have
	//a key with a length no greater than 128 characters and a value with a length no
	//greater than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

type ExtendedLocation_StatusARM struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

type Identity_StatusARM struct {
	//PrincipalId: The principal ID of resource identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant ID of resource.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The identity type.
	Type Identity_Type_Status `json:"type"`

	//UserAssignedIdentities: Gets or sets a list of key value pairs that describe the
	//set of User Assigned identities that will be used with this storage account. The
	//key is the ARM resource identifier of the identity. Only 1 User Assigned
	//identity is permitted here.
	UserAssignedIdentities map[string]UserAssignedIdentity_StatusARM `json:"userAssignedIdentities,omitempty"`
}

type StorageAccountProperties_StatusARM struct {
	//AccessTier: Required for storage accounts where kind = BlobStorage. The access
	//tier used for billing.
	AccessTier *StorageAccountProperties_AccessTier_Status `json:"accessTier,omitempty"`

	//AllowBlobPublicAccess: Allow or disallow public access to all blobs or
	//containers in the storage account. The default interpretation is true for this
	//property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	//AllowCrossTenantReplication: Allow or disallow cross AAD tenant object
	//replication. The default interpretation is true for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	//AllowSharedKeyAccess: Indicates whether the storage account permits requests to
	//be authorized with the account access key via Shared Key. If false, then all
	//requests, including shared access signatures, must be authorized with Azure
	//Active Directory (Azure AD). The default value is null, which is equivalent to
	//true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	//AzureFilesIdentityBasedAuthentication: Provides the identity based
	//authentication settings for Azure Files.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_StatusARM `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	//CustomDomain: User domain assigned to the storage account. Name is the CNAME
	//source. Only one custom domain is supported per storage account at this time. To
	//clear the existing custom domain, use an empty string for the custom domain name
	//property.
	CustomDomain *CustomDomain_StatusARM `json:"customDomain,omitempty"`

	//Encryption: Not applicable. Azure Storage encryption is enabled for all storage
	//accounts and cannot be disabled.
	Encryption *Encryption_StatusARM `json:"encryption,omitempty"`

	//IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	//IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	//KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy_StatusARM `json:"keyPolicy,omitempty"`

	//LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be
	//disabled once it is enabled.
	LargeFileSharesState *StorageAccountProperties_LargeFileSharesState_Status `json:"largeFileSharesState,omitempty"`

	//MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to
	//storage. The default interpretation is TLS 1.0 for this property.
	MinimumTlsVersion *StorageAccountProperties_MinimumTlsVersion_Status `json:"minimumTlsVersion,omitempty"`

	//NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet_StatusARM `json:"networkAcls,omitempty"`

	//RoutingPreference: Maintains information about the network routing choice opted
	//by the user for data transfer
	RoutingPreference *RoutingPreference_StatusARM `json:"routingPreference,omitempty"`

	//SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy_StatusARM `json:"sasPolicy,omitempty"`

	//SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets
	//to true. The default value is true since API version 2019-04-01.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`
}

type StorageAccount_Kind_Status string

const (
	StorageAccount_Kind_StatusBlobStorage      = StorageAccount_Kind_Status("BlobStorage")
	StorageAccount_Kind_StatusBlockBlobStorage = StorageAccount_Kind_Status("BlockBlobStorage")
	StorageAccount_Kind_StatusFileStorage      = StorageAccount_Kind_Status("FileStorage")
	StorageAccount_Kind_StatusStorage          = StorageAccount_Kind_Status("Storage")
	StorageAccount_Kind_StatusStorageV2        = StorageAccount_Kind_Status("StorageV2")
)

type AzureFilesIdentityBasedAuthentication_StatusARM struct {
	//ActiveDirectoryProperties: Required if choose AD.
	ActiveDirectoryProperties *ActiveDirectoryProperties_StatusARM `json:"activeDirectoryProperties,omitempty"`

	//DefaultSharePermission: Default share permission for users using Kerberos
	//authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthentication_DefaultSharePermission_Status `json:"defaultSharePermission,omitempty"`

	//DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions AzureFilesIdentityBasedAuthentication_DirectoryServiceOptions_Status `json:"directoryServiceOptions"`
}

type CustomDomain_StatusARM struct {
	//Name: Gets or sets the custom domain name assigned to the storage account. Name
	//is the CNAME source.
	Name string `json:"name"`

	//UseSubDomainName: Indicates whether indirect CName validation is enabled.
	//Default value is false. This should only be set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

type Encryption_StatusARM struct {
	//Identity: The identity to be used with service-side encryption at rest.
	Identity *EncryptionIdentity_StatusARM `json:"identity,omitempty"`

	//KeySource: The encryption keySource (provider). Possible values
	//(case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
	KeySource Encryption_KeySource_Status `json:"keySource"`

	//Keyvaultproperties: Properties provided by key vault.
	Keyvaultproperties *KeyVaultProperties_StatusARM `json:"keyvaultproperties,omitempty"`

	//RequireInfrastructureEncryption: A boolean indicating whether or not the service
	//applies a secondary layer of encryption with platform managed keys for data at
	//rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	//Services: List of services which support encryption.
	Services *EncryptionServices_StatusARM `json:"services,omitempty"`
}

type ExtendedLocationType_Status string

const ExtendedLocationType_StatusEdgeZone = ExtendedLocationType_Status("EdgeZone")

type Identity_Type_Status string

const (
	Identity_Type_StatusNone                       = Identity_Type_Status("None")
	Identity_Type_StatusSystemAssigned             = Identity_Type_Status("SystemAssigned")
	Identity_Type_StatusSystemAssignedUserAssigned = Identity_Type_Status("SystemAssigned,UserAssigned")
	Identity_Type_StatusUserAssigned               = Identity_Type_Status("UserAssigned")
)

type KeyPolicy_StatusARM struct {
	//KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays int `json:"keyExpirationPeriodInDays"`
}

type NetworkRuleSet_StatusARM struct {
	//Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
	//Possible values are any combination of Logging|Metrics|AzureServices (For
	//example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSet_Bypass_Status `json:"bypass,omitempty"`

	//DefaultAction: Specifies the default action of allow or deny when no other rules
	//match.
	DefaultAction NetworkRuleSet_DefaultAction_Status `json:"defaultAction"`

	//IpRules: Sets the IP ACL rules
	IpRules []IPRule_StatusARM `json:"ipRules,omitempty"`

	//ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule_StatusARM `json:"resourceAccessRules,omitempty"`

	//VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule_StatusARM `json:"virtualNetworkRules,omitempty"`
}

type RoutingPreference_StatusARM struct {
	//PublishInternetEndpoints: A boolean flag which indicates whether internet
	//routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	//PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft
	//routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	//RoutingChoice: Routing Choice defines the kind of network routing opted by the
	//user.
	RoutingChoice *RoutingPreference_RoutingChoice_Status `json:"routingChoice,omitempty"`
}

type SasPolicy_StatusARM struct {
	//ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction SasPolicy_ExpirationAction_Status `json:"expirationAction"`

	//SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod string `json:"sasExpirationPeriod"`
}

type UserAssignedIdentity_StatusARM struct {
	//ClientId: The client ID of the identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal ID of the identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

type ActiveDirectoryProperties_StatusARM struct {
	//AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid string `json:"azureStorageSid"`

	//DomainGuid: Specifies the domain GUID.
	DomainGuid string `json:"domainGuid"`

	//DomainName: Specifies the primary domain that the AD DNS server is authoritative
	//for.
	DomainName string `json:"domainName"`

	//DomainSid: Specifies the security identifier (SID).
	DomainSid string `json:"domainSid"`

	//ForestName: Specifies the Active Directory forest to get.
	ForestName string `json:"forestName"`

	//NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName string `json:"netBiosDomainName"`
}

type EncryptionIdentity_StatusARM struct {
	//UserAssignedIdentity: Resource identifier of the UserAssigned identity to be
	//associated with server-side encryption on the storage account.
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

type EncryptionServices_StatusARM struct {
	//Blob: The encryption function of the blob storage service.
	Blob *EncryptionService_StatusARM `json:"blob,omitempty"`

	//File: The encryption function of the file storage service.
	File *EncryptionService_StatusARM `json:"file,omitempty"`

	//Queue: The encryption function of the queue storage service.
	Queue *EncryptionService_StatusARM `json:"queue,omitempty"`

	//Table: The encryption function of the table storage service.
	Table *EncryptionService_StatusARM `json:"table,omitempty"`
}

type IPRule_StatusARM struct {
	//Action: The action of IP ACL rule.
	Action *IPRule_Action_Status `json:"action,omitempty"`

	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

type KeyVaultProperties_StatusARM struct {
	//CurrentVersionedKeyIdentifier: The object identifier of the current versioned
	//Key Vault Key in use.
	CurrentVersionedKeyIdentifier *string `json:"currentVersionedKeyIdentifier,omitempty"`

	//Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	//Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	//Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`

	//LastKeyRotationTimestamp: Timestamp of last rotation of the Key Vault Key.
	LastKeyRotationTimestamp *string `json:"lastKeyRotationTimestamp,omitempty"`
}

type ResourceAccessRule_StatusARM struct {
	//ResourceId: Resource Id
	ResourceId *string `json:"resourceId,omitempty"`

	//TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

type VirtualNetworkRule_StatusARM struct {
	//Action: The action of virtual network rule.
	Action *VirtualNetworkRule_Action_Status `json:"action,omitempty"`

	//Id: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Id string `json:"id"`

	//State: Gets the state of virtual network rule.
	State *VirtualNetworkRule_State_Status `json:"state,omitempty"`
}

type EncryptionService_StatusARM struct {
	//Enabled: A boolean indicating whether or not the service encrypts the data as it
	//is stored.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyType: Encryption key type to be used for the encryption service. 'Account'
	//key type implies that an account-scoped encryption key will be used. 'Service'
	//key type implies that a default service key is used.
	KeyType *EncryptionService_KeyType_Status `json:"keyType,omitempty"`

	//LastEnabledTime: Gets a rough estimate of the date/time when the encryption was
	//last enabled by the user. Only returned when encryption is enabled. There might
	//be some unencrypted blobs which were written after this time, as it is just a
	//rough estimate.
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`
}
