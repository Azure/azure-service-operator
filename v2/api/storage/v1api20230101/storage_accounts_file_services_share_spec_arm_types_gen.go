// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type StorageAccountsFileServicesShare_Spec_ARM struct {
	Name string `json:"name,omitempty"`

	// Properties: Properties of the file share.
	Properties *FileShareProperties_ARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &StorageAccountsFileServicesShare_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-01-01"
func (share StorageAccountsFileServicesShare_Spec_ARM) GetAPIVersion() string {
	return "2023-01-01"
}

// GetName returns the Name of the resource
func (share *StorageAccountsFileServicesShare_Spec_ARM) GetName() string {
	return share.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/fileServices/shares"
func (share *StorageAccountsFileServicesShare_Spec_ARM) GetType() string {
	return "Microsoft.Storage/storageAccounts/fileServices/shares"
}

// The properties of the file share.
type FileShareProperties_ARM struct {
	// AccessTier: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and
	// Cool. FileStorage account can choose Premium.
	AccessTier *FileShareProperties_AccessTier_ARM `json:"accessTier,omitempty"`

	// EnabledProtocols: The authentication protocol that is used for the file share. Can only be specified when creating a
	// share.
	EnabledProtocols *FileShareProperties_EnabledProtocols_ARM `json:"enabledProtocols,omitempty"`

	// Metadata: A name-value pair to associate with the share as metadata.
	Metadata map[string]string `json:"metadata"`

	// RootSquash: The property is for NFS share only. The default is NoRootSquash.
	RootSquash *FileShareProperties_RootSquash_ARM `json:"rootSquash,omitempty"`

	// ShareQuota: The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).
	// For Large File Shares, the maximum size is 102400.
	ShareQuota *int `json:"shareQuota,omitempty"`

	// SignedIdentifiers: List of stored access policies specified on the share.
	SignedIdentifiers []SignedIdentifier_ARM `json:"signedIdentifiers"`
}

// +kubebuilder:validation:Enum={"Cool","Hot","Premium","TransactionOptimized"}
type FileShareProperties_AccessTier_ARM string

const (
	FileShareProperties_AccessTier_ARM_Cool                 = FileShareProperties_AccessTier_ARM("Cool")
	FileShareProperties_AccessTier_ARM_Hot                  = FileShareProperties_AccessTier_ARM("Hot")
	FileShareProperties_AccessTier_ARM_Premium              = FileShareProperties_AccessTier_ARM("Premium")
	FileShareProperties_AccessTier_ARM_TransactionOptimized = FileShareProperties_AccessTier_ARM("TransactionOptimized")
)

// Mapping from string to FileShareProperties_AccessTier_ARM
var fileShareProperties_AccessTier_ARM_Values = map[string]FileShareProperties_AccessTier_ARM{
	"cool":                 FileShareProperties_AccessTier_ARM_Cool,
	"hot":                  FileShareProperties_AccessTier_ARM_Hot,
	"premium":              FileShareProperties_AccessTier_ARM_Premium,
	"transactionoptimized": FileShareProperties_AccessTier_ARM_TransactionOptimized,
}

// +kubebuilder:validation:Enum={"NFS","SMB"}
type FileShareProperties_EnabledProtocols_ARM string

const (
	FileShareProperties_EnabledProtocols_ARM_NFS = FileShareProperties_EnabledProtocols_ARM("NFS")
	FileShareProperties_EnabledProtocols_ARM_SMB = FileShareProperties_EnabledProtocols_ARM("SMB")
)

// Mapping from string to FileShareProperties_EnabledProtocols_ARM
var fileShareProperties_EnabledProtocols_ARM_Values = map[string]FileShareProperties_EnabledProtocols_ARM{
	"nfs": FileShareProperties_EnabledProtocols_ARM_NFS,
	"smb": FileShareProperties_EnabledProtocols_ARM_SMB,
}

// +kubebuilder:validation:Enum={"AllSquash","NoRootSquash","RootSquash"}
type FileShareProperties_RootSquash_ARM string

const (
	FileShareProperties_RootSquash_ARM_AllSquash    = FileShareProperties_RootSquash_ARM("AllSquash")
	FileShareProperties_RootSquash_ARM_NoRootSquash = FileShareProperties_RootSquash_ARM("NoRootSquash")
	FileShareProperties_RootSquash_ARM_RootSquash   = FileShareProperties_RootSquash_ARM("RootSquash")
)

// Mapping from string to FileShareProperties_RootSquash_ARM
var fileShareProperties_RootSquash_ARM_Values = map[string]FileShareProperties_RootSquash_ARM{
	"allsquash":    FileShareProperties_RootSquash_ARM_AllSquash,
	"norootsquash": FileShareProperties_RootSquash_ARM_NoRootSquash,
	"rootsquash":   FileShareProperties_RootSquash_ARM_RootSquash,
}

type SignedIdentifier_ARM struct {
	// AccessPolicy: Access policy
	AccessPolicy *AccessPolicy_ARM `json:"accessPolicy,omitempty"`
	Id           *string           `json:"id,omitempty"`
}

type AccessPolicy_ARM struct {
	// ExpiryTime: Expiry time of the access policy
	ExpiryTime *string `json:"expiryTime,omitempty"`

	// Permission: List of abbreviated permissions.
	Permission *string `json:"permission,omitempty"`

	// StartTime: Start time of the access policy
	StartTime *string `json:"startTime,omitempty"`
}
