// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ChangeFeed_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ChangeFeed_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForChangeFeed_ARM, ChangeFeed_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForChangeFeed_ARM runs a test to see if a specific instance of ChangeFeed_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForChangeFeed_ARM(subject ChangeFeed_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ChangeFeed_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ChangeFeed_ARM instances for property testing - lazily instantiated by ChangeFeed_ARMGenerator()
var changeFeed_ARMGenerator gopter.Gen

// ChangeFeed_ARMGenerator returns a generator of ChangeFeed_ARM instances for property testing.
func ChangeFeed_ARMGenerator() gopter.Gen {
	if changeFeed_ARMGenerator != nil {
		return changeFeed_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForChangeFeed_ARM(generators)
	changeFeed_ARMGenerator = gen.Struct(reflect.TypeOf(ChangeFeed_ARM{}), generators)

	return changeFeed_ARMGenerator
}

// AddIndependentPropertyGeneratorsForChangeFeed_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForChangeFeed_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
}

func Test_CorsRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRule_ARM, CorsRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRule_ARM runs a test to see if a specific instance of CorsRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRule_ARM(subject CorsRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRule_ARM instances for property testing - lazily instantiated by CorsRule_ARMGenerator()
var corsRule_ARMGenerator gopter.Gen

// CorsRule_ARMGenerator returns a generator of CorsRule_ARM instances for property testing.
func CorsRule_ARMGenerator() gopter.Gen {
	if corsRule_ARMGenerator != nil {
		return corsRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsRule_ARM(generators)
	corsRule_ARMGenerator = gen.Struct(reflect.TypeOf(CorsRule_ARM{}), generators)

	return corsRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsRule_ARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.SliceOf(gen.OneConstOf(
		CorsRule_AllowedMethods_CONNECT,
		CorsRule_AllowedMethods_DELETE,
		CorsRule_AllowedMethods_GET,
		CorsRule_AllowedMethods_HEAD,
		CorsRule_AllowedMethods_MERGE,
		CorsRule_AllowedMethods_OPTIONS,
		CorsRule_AllowedMethods_PATCH,
		CorsRule_AllowedMethods_POST,
		CorsRule_AllowedMethods_PUT,
		CorsRule_AllowedMethods_TRACE))
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.SliceOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.PtrOf(gen.Int())
}

func Test_CorsRules_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsRules_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsRules_ARM, CorsRules_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsRules_ARM runs a test to see if a specific instance of CorsRules_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsRules_ARM(subject CorsRules_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsRules_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsRules_ARM instances for property testing - lazily instantiated by CorsRules_ARMGenerator()
var corsRules_ARMGenerator gopter.Gen

// CorsRules_ARMGenerator returns a generator of CorsRules_ARM instances for property testing.
func CorsRules_ARMGenerator() gopter.Gen {
	if corsRules_ARMGenerator != nil {
		return corsRules_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCorsRules_ARM(generators)
	corsRules_ARMGenerator = gen.Struct(reflect.TypeOf(CorsRules_ARM{}), generators)

	return corsRules_ARMGenerator
}

// AddRelatedPropertyGeneratorsForCorsRules_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCorsRules_ARM(gens map[string]gopter.Gen) {
	gens["CorsRules"] = gen.SliceOf(CorsRule_ARMGenerator())
}

func Test_DeleteRetentionPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeleteRetentionPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeleteRetentionPolicy_ARM, DeleteRetentionPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeleteRetentionPolicy_ARM runs a test to see if a specific instance of DeleteRetentionPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeleteRetentionPolicy_ARM(subject DeleteRetentionPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeleteRetentionPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeleteRetentionPolicy_ARM instances for property testing - lazily instantiated by
// DeleteRetentionPolicy_ARMGenerator()
var deleteRetentionPolicy_ARMGenerator gopter.Gen

// DeleteRetentionPolicy_ARMGenerator returns a generator of DeleteRetentionPolicy_ARM instances for property testing.
func DeleteRetentionPolicy_ARMGenerator() gopter.Gen {
	if deleteRetentionPolicy_ARMGenerator != nil {
		return deleteRetentionPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_ARM(generators)
	deleteRetentionPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(DeleteRetentionPolicy_ARM{}), generators)

	return deleteRetentionPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeleteRetentionPolicy_ARM(gens map[string]gopter.Gen) {
	gens["AllowPermanentDelete"] = gen.PtrOf(gen.Bool())
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_LastAccessTimeTrackingPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LastAccessTimeTrackingPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLastAccessTimeTrackingPolicy_ARM, LastAccessTimeTrackingPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLastAccessTimeTrackingPolicy_ARM runs a test to see if a specific instance of LastAccessTimeTrackingPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLastAccessTimeTrackingPolicy_ARM(subject LastAccessTimeTrackingPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LastAccessTimeTrackingPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LastAccessTimeTrackingPolicy_ARM instances for property testing - lazily instantiated by
// LastAccessTimeTrackingPolicy_ARMGenerator()
var lastAccessTimeTrackingPolicy_ARMGenerator gopter.Gen

// LastAccessTimeTrackingPolicy_ARMGenerator returns a generator of LastAccessTimeTrackingPolicy_ARM instances for property testing.
func LastAccessTimeTrackingPolicy_ARMGenerator() gopter.Gen {
	if lastAccessTimeTrackingPolicy_ARMGenerator != nil {
		return lastAccessTimeTrackingPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_ARM(generators)
	lastAccessTimeTrackingPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(LastAccessTimeTrackingPolicy_ARM{}), generators)

	return lastAccessTimeTrackingPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLastAccessTimeTrackingPolicy_ARM(gens map[string]gopter.Gen) {
	gens["BlobType"] = gen.SliceOf(gen.AlphaString())
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(LastAccessTimeTrackingPolicy_Name_AccessTimeTracking))
	gens["TrackingGranularityInDays"] = gen.PtrOf(gen.Int())
}

func Test_RestorePolicyProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RestorePolicyProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRestorePolicyProperties_ARM, RestorePolicyProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRestorePolicyProperties_ARM runs a test to see if a specific instance of RestorePolicyProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRestorePolicyProperties_ARM(subject RestorePolicyProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RestorePolicyProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RestorePolicyProperties_ARM instances for property testing - lazily instantiated by
// RestorePolicyProperties_ARMGenerator()
var restorePolicyProperties_ARMGenerator gopter.Gen

// RestorePolicyProperties_ARMGenerator returns a generator of RestorePolicyProperties_ARM instances for property testing.
func RestorePolicyProperties_ARMGenerator() gopter.Gen {
	if restorePolicyProperties_ARMGenerator != nil {
		return restorePolicyProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRestorePolicyProperties_ARM(generators)
	restorePolicyProperties_ARMGenerator = gen.Struct(reflect.TypeOf(RestorePolicyProperties_ARM{}), generators)

	return restorePolicyProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRestorePolicyProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRestorePolicyProperties_ARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_StorageAccounts_BlobService_Properties_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccounts_BlobService_Properties_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccounts_BlobService_Properties_Spec_ARM, StorageAccounts_BlobService_Properties_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccounts_BlobService_Properties_Spec_ARM runs a test to see if a specific instance of StorageAccounts_BlobService_Properties_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccounts_BlobService_Properties_Spec_ARM(subject StorageAccounts_BlobService_Properties_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccounts_BlobService_Properties_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccounts_BlobService_Properties_Spec_ARM instances for property testing - lazily instantiated by
// StorageAccounts_BlobService_Properties_Spec_ARMGenerator()
var storageAccounts_BlobService_Properties_Spec_ARMGenerator gopter.Gen

// StorageAccounts_BlobService_Properties_Spec_ARMGenerator returns a generator of StorageAccounts_BlobService_Properties_Spec_ARM instances for property testing.
// We first initialize storageAccounts_BlobService_Properties_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccounts_BlobService_Properties_Spec_ARMGenerator() gopter.Gen {
	if storageAccounts_BlobService_Properties_Spec_ARMGenerator != nil {
		return storageAccounts_BlobService_Properties_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Properties_Spec_ARM(generators)
	storageAccounts_BlobService_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_BlobService_Properties_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Properties_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccounts_BlobService_Properties_Spec_ARM(generators)
	storageAccounts_BlobService_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_BlobService_Properties_Spec_ARM{}), generators)

	return storageAccounts_BlobService_Properties_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Properties_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["AutomaticSnapshotPolicyEnabled"] = gen.PtrOf(gen.Bool())
	gens["DefaultServiceVersion"] = gen.PtrOf(gen.AlphaString())
	gens["IsVersioningEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForStorageAccounts_BlobService_Properties_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccounts_BlobService_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ChangeFeed"] = gen.PtrOf(ChangeFeed_ARMGenerator())
	gens["ContainerDeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_ARMGenerator())
	gens["Cors"] = gen.PtrOf(CorsRules_ARMGenerator())
	gens["DeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_ARMGenerator())
	gens["LastAccessTimeTrackingPolicy"] = gen.PtrOf(LastAccessTimeTrackingPolicy_ARMGenerator())
	gens["RestorePolicy"] = gen.PtrOf(RestorePolicyProperties_ARMGenerator())
}

func Test_StorageAccounts_BlobService_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccounts_BlobService_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccounts_BlobService_Spec_ARM, StorageAccounts_BlobService_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccounts_BlobService_Spec_ARM runs a test to see if a specific instance of StorageAccounts_BlobService_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccounts_BlobService_Spec_ARM(subject StorageAccounts_BlobService_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccounts_BlobService_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccounts_BlobService_Spec_ARM instances for property testing - lazily instantiated by
// StorageAccounts_BlobService_Spec_ARMGenerator()
var storageAccounts_BlobService_Spec_ARMGenerator gopter.Gen

// StorageAccounts_BlobService_Spec_ARMGenerator returns a generator of StorageAccounts_BlobService_Spec_ARM instances for property testing.
// We first initialize storageAccounts_BlobService_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccounts_BlobService_Spec_ARMGenerator() gopter.Gen {
	if storageAccounts_BlobService_Spec_ARMGenerator != nil {
		return storageAccounts_BlobService_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Spec_ARM(generators)
	storageAccounts_BlobService_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_BlobService_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccounts_BlobService_Spec_ARM(generators)
	storageAccounts_BlobService_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_BlobService_Spec_ARM{}), generators)

	return storageAccounts_BlobService_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccounts_BlobService_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccounts_BlobService_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccounts_BlobService_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageAccounts_BlobService_Properties_Spec_ARMGenerator())
}
