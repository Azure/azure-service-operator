// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ContainerProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProperties_STATUS_ARM, ContainerProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProperties_STATUS_ARM runs a test to see if a specific instance of ContainerProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProperties_STATUS_ARM(subject ContainerProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerProperties_STATUS_ARMGenerator()
var containerProperties_STATUS_ARMGenerator gopter.Gen

// ContainerProperties_STATUS_ARMGenerator returns a generator of ContainerProperties_STATUS_ARM instances for property testing.
// We first initialize containerProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProperties_STATUS_ARMGenerator() gopter.Gen {
	if containerProperties_STATUS_ARMGenerator != nil {
		return containerProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM(generators)
	containerProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerProperties_STATUS_ARM(generators)
	containerProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_ARM{}), generators)

	return containerProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultEncryptionScope"] = gen.PtrOf(gen.AlphaString())
	gens["Deleted"] = gen.PtrOf(gen.Bool())
	gens["DeletedTime"] = gen.PtrOf(gen.AlphaString())
	gens["DenyEncryptionScopeOverride"] = gen.PtrOf(gen.Bool())
	gens["EnableNfsV3AllSquash"] = gen.PtrOf(gen.Bool())
	gens["EnableNfsV3RootSquash"] = gen.PtrOf(gen.Bool())
	gens["HasImmutabilityPolicy"] = gen.PtrOf(gen.Bool())
	gens["HasLegalHold"] = gen.PtrOf(gen.Bool())
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
	gens["LeaseDuration"] = gen.PtrOf(gen.OneConstOf(ContainerProperties_LeaseDuration_STATUS_ARM_Fixed, ContainerProperties_LeaseDuration_STATUS_ARM_Infinite))
	gens["LeaseState"] = gen.PtrOf(gen.OneConstOf(
		ContainerProperties_LeaseState_STATUS_ARM_Available,
		ContainerProperties_LeaseState_STATUS_ARM_Breaking,
		ContainerProperties_LeaseState_STATUS_ARM_Broken,
		ContainerProperties_LeaseState_STATUS_ARM_Expired,
		ContainerProperties_LeaseState_STATUS_ARM_Leased))
	gens["LeaseStatus"] = gen.PtrOf(gen.OneConstOf(ContainerProperties_LeaseStatus_STATUS_ARM_Locked, ContainerProperties_LeaseStatus_STATUS_ARM_Unlocked))
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["PublicAccess"] = gen.PtrOf(gen.OneConstOf(ContainerProperties_PublicAccess_STATUS_ARM_Blob, ContainerProperties_PublicAccess_STATUS_ARM_Container, ContainerProperties_PublicAccess_STATUS_ARM_None))
	gens["RemainingRetentionDays"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ImmutabilityPolicy"] = gen.PtrOf(ImmutabilityPolicyProperties_STATUS_ARMGenerator())
	gens["ImmutableStorageWithVersioning"] = gen.PtrOf(ImmutableStorageWithVersioning_STATUS_ARMGenerator())
	gens["LegalHold"] = gen.PtrOf(LegalHoldProperties_STATUS_ARMGenerator())
}

func Test_ImmutabilityPolicyProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutabilityPolicyProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutabilityPolicyProperties_STATUS_ARM, ImmutabilityPolicyProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutabilityPolicyProperties_STATUS_ARM runs a test to see if a specific instance of ImmutabilityPolicyProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutabilityPolicyProperties_STATUS_ARM(subject ImmutabilityPolicyProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutabilityPolicyProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutabilityPolicyProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ImmutabilityPolicyProperties_STATUS_ARMGenerator()
var immutabilityPolicyProperties_STATUS_ARMGenerator gopter.Gen

// ImmutabilityPolicyProperties_STATUS_ARMGenerator returns a generator of ImmutabilityPolicyProperties_STATUS_ARM instances for property testing.
// We first initialize immutabilityPolicyProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ImmutabilityPolicyProperties_STATUS_ARMGenerator() gopter.Gen {
	if immutabilityPolicyProperties_STATUS_ARMGenerator != nil {
		return immutabilityPolicyProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_STATUS_ARM(generators)
	immutabilityPolicyProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForImmutabilityPolicyProperties_STATUS_ARM(generators)
	immutabilityPolicyProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyProperties_STATUS_ARM{}), generators)

	return immutabilityPolicyProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutabilityPolicyProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForImmutabilityPolicyProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImmutabilityPolicyProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ImmutabilityPolicyProperty_STATUS_ARMGenerator())
	gens["UpdateHistory"] = gen.SliceOf(UpdateHistoryProperty_STATUS_ARMGenerator())
}

func Test_ImmutabilityPolicyProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutabilityPolicyProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutabilityPolicyProperty_STATUS_ARM, ImmutabilityPolicyProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutabilityPolicyProperty_STATUS_ARM runs a test to see if a specific instance of ImmutabilityPolicyProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutabilityPolicyProperty_STATUS_ARM(subject ImmutabilityPolicyProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutabilityPolicyProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutabilityPolicyProperty_STATUS_ARM instances for property testing - lazily instantiated by
// ImmutabilityPolicyProperty_STATUS_ARMGenerator()
var immutabilityPolicyProperty_STATUS_ARMGenerator gopter.Gen

// ImmutabilityPolicyProperty_STATUS_ARMGenerator returns a generator of ImmutabilityPolicyProperty_STATUS_ARM instances for property testing.
func ImmutabilityPolicyProperty_STATUS_ARMGenerator() gopter.Gen {
	if immutabilityPolicyProperty_STATUS_ARMGenerator != nil {
		return immutabilityPolicyProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilityPolicyProperty_STATUS_ARM(generators)
	immutabilityPolicyProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilityPolicyProperty_STATUS_ARM{}), generators)

	return immutabilityPolicyProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutabilityPolicyProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutabilityPolicyProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowProtectedAppendWrites"] = gen.PtrOf(gen.Bool())
	gens["AllowProtectedAppendWritesAll"] = gen.PtrOf(gen.Bool())
	gens["ImmutabilityPeriodSinceCreationInDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(ImmutabilityPolicyProperty_State_STATUS_ARM_Locked, ImmutabilityPolicyProperty_State_STATUS_ARM_Unlocked))
}

func Test_ImmutableStorageWithVersioning_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutableStorageWithVersioning_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutableStorageWithVersioning_STATUS_ARM, ImmutableStorageWithVersioning_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutableStorageWithVersioning_STATUS_ARM runs a test to see if a specific instance of ImmutableStorageWithVersioning_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutableStorageWithVersioning_STATUS_ARM(subject ImmutableStorageWithVersioning_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutableStorageWithVersioning_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutableStorageWithVersioning_STATUS_ARM instances for property testing - lazily instantiated by
// ImmutableStorageWithVersioning_STATUS_ARMGenerator()
var immutableStorageWithVersioning_STATUS_ARMGenerator gopter.Gen

// ImmutableStorageWithVersioning_STATUS_ARMGenerator returns a generator of ImmutableStorageWithVersioning_STATUS_ARM instances for property testing.
func ImmutableStorageWithVersioning_STATUS_ARMGenerator() gopter.Gen {
	if immutableStorageWithVersioning_STATUS_ARMGenerator != nil {
		return immutableStorageWithVersioning_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_STATUS_ARM(generators)
	immutableStorageWithVersioning_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ImmutableStorageWithVersioning_STATUS_ARM{}), generators)

	return immutableStorageWithVersioning_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutableStorageWithVersioning_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MigrationState"] = gen.PtrOf(gen.OneConstOf(ImmutableStorageWithVersioning_MigrationState_STATUS_ARM_Completed, ImmutableStorageWithVersioning_MigrationState_STATUS_ARM_InProgress))
	gens["TimeStamp"] = gen.PtrOf(gen.AlphaString())
}

func Test_LegalHoldProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LegalHoldProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLegalHoldProperties_STATUS_ARM, LegalHoldProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLegalHoldProperties_STATUS_ARM runs a test to see if a specific instance of LegalHoldProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLegalHoldProperties_STATUS_ARM(subject LegalHoldProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LegalHoldProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LegalHoldProperties_STATUS_ARM instances for property testing - lazily instantiated by
// LegalHoldProperties_STATUS_ARMGenerator()
var legalHoldProperties_STATUS_ARMGenerator gopter.Gen

// LegalHoldProperties_STATUS_ARMGenerator returns a generator of LegalHoldProperties_STATUS_ARM instances for property testing.
// We first initialize legalHoldProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LegalHoldProperties_STATUS_ARMGenerator() gopter.Gen {
	if legalHoldProperties_STATUS_ARMGenerator != nil {
		return legalHoldProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLegalHoldProperties_STATUS_ARM(generators)
	legalHoldProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LegalHoldProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLegalHoldProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForLegalHoldProperties_STATUS_ARM(generators)
	legalHoldProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LegalHoldProperties_STATUS_ARM{}), generators)

	return legalHoldProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLegalHoldProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLegalHoldProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HasLegalHold"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForLegalHoldProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLegalHoldProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProtectedAppendWritesHistory"] = gen.PtrOf(ProtectedAppendWritesHistory_STATUS_ARMGenerator())
	gens["Tags"] = gen.SliceOf(TagProperty_STATUS_ARMGenerator())
}

func Test_ProtectedAppendWritesHistory_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProtectedAppendWritesHistory_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProtectedAppendWritesHistory_STATUS_ARM, ProtectedAppendWritesHistory_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProtectedAppendWritesHistory_STATUS_ARM runs a test to see if a specific instance of ProtectedAppendWritesHistory_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProtectedAppendWritesHistory_STATUS_ARM(subject ProtectedAppendWritesHistory_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProtectedAppendWritesHistory_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProtectedAppendWritesHistory_STATUS_ARM instances for property testing - lazily instantiated by
// ProtectedAppendWritesHistory_STATUS_ARMGenerator()
var protectedAppendWritesHistory_STATUS_ARMGenerator gopter.Gen

// ProtectedAppendWritesHistory_STATUS_ARMGenerator returns a generator of ProtectedAppendWritesHistory_STATUS_ARM instances for property testing.
func ProtectedAppendWritesHistory_STATUS_ARMGenerator() gopter.Gen {
	if protectedAppendWritesHistory_STATUS_ARMGenerator != nil {
		return protectedAppendWritesHistory_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProtectedAppendWritesHistory_STATUS_ARM(generators)
	protectedAppendWritesHistory_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ProtectedAppendWritesHistory_STATUS_ARM{}), generators)

	return protectedAppendWritesHistory_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForProtectedAppendWritesHistory_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProtectedAppendWritesHistory_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowProtectedAppendWritesAll"] = gen.PtrOf(gen.Bool())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
}

func Test_StorageAccountsBlobServicesContainer_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountsBlobServicesContainer_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountsBlobServicesContainer_STATUS_ARM, StorageAccountsBlobServicesContainer_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountsBlobServicesContainer_STATUS_ARM runs a test to see if a specific instance of StorageAccountsBlobServicesContainer_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountsBlobServicesContainer_STATUS_ARM(subject StorageAccountsBlobServicesContainer_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountsBlobServicesContainer_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountsBlobServicesContainer_STATUS_ARM instances for property testing - lazily instantiated by
// StorageAccountsBlobServicesContainer_STATUS_ARMGenerator()
var storageAccountsBlobServicesContainer_STATUS_ARMGenerator gopter.Gen

// StorageAccountsBlobServicesContainer_STATUS_ARMGenerator returns a generator of StorageAccountsBlobServicesContainer_STATUS_ARM instances for property testing.
// We first initialize storageAccountsBlobServicesContainer_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccountsBlobServicesContainer_STATUS_ARMGenerator() gopter.Gen {
	if storageAccountsBlobServicesContainer_STATUS_ARMGenerator != nil {
		return storageAccountsBlobServicesContainer_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_STATUS_ARM(generators)
	storageAccountsBlobServicesContainer_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainer_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainer_STATUS_ARM(generators)
	storageAccountsBlobServicesContainer_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountsBlobServicesContainer_STATUS_ARM{}), generators)

	return storageAccountsBlobServicesContainer_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccountsBlobServicesContainer_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainer_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountsBlobServicesContainer_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerProperties_STATUS_ARMGenerator())
}

func Test_TagProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TagProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTagProperty_STATUS_ARM, TagProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTagProperty_STATUS_ARM runs a test to see if a specific instance of TagProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTagProperty_STATUS_ARM(subject TagProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TagProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TagProperty_STATUS_ARM instances for property testing - lazily instantiated by
// TagProperty_STATUS_ARMGenerator()
var tagProperty_STATUS_ARMGenerator gopter.Gen

// TagProperty_STATUS_ARMGenerator returns a generator of TagProperty_STATUS_ARM instances for property testing.
func TagProperty_STATUS_ARMGenerator() gopter.Gen {
	if tagProperty_STATUS_ARMGenerator != nil {
		return tagProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTagProperty_STATUS_ARM(generators)
	tagProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TagProperty_STATUS_ARM{}), generators)

	return tagProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForTagProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTagProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ObjectIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Upn"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpdateHistoryProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateHistoryProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateHistoryProperty_STATUS_ARM, UpdateHistoryProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateHistoryProperty_STATUS_ARM runs a test to see if a specific instance of UpdateHistoryProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateHistoryProperty_STATUS_ARM(subject UpdateHistoryProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateHistoryProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateHistoryProperty_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateHistoryProperty_STATUS_ARMGenerator()
var updateHistoryProperty_STATUS_ARMGenerator gopter.Gen

// UpdateHistoryProperty_STATUS_ARMGenerator returns a generator of UpdateHistoryProperty_STATUS_ARM instances for property testing.
func UpdateHistoryProperty_STATUS_ARMGenerator() gopter.Gen {
	if updateHistoryProperty_STATUS_ARMGenerator != nil {
		return updateHistoryProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateHistoryProperty_STATUS_ARM(generators)
	updateHistoryProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateHistoryProperty_STATUS_ARM{}), generators)

	return updateHistoryProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateHistoryProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateHistoryProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowProtectedAppendWrites"] = gen.PtrOf(gen.Bool())
	gens["AllowProtectedAppendWritesAll"] = gen.PtrOf(gen.Bool())
	gens["ImmutabilityPeriodSinceCreationInDays"] = gen.PtrOf(gen.Int())
	gens["ObjectIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Update"] = gen.PtrOf(gen.OneConstOf(UpdateHistoryProperty_Update_STATUS_ARM_Extend, UpdateHistoryProperty_Update_STATUS_ARM_Lock, UpdateHistoryProperty_Update_STATUS_ARM_Put))
	gens["Upn"] = gen.PtrOf(gen.AlphaString())
}
