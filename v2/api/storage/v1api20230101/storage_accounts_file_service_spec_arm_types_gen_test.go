// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Multichannel_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Multichannel_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMultichannel_ARM, Multichannel_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMultichannel_ARM runs a test to see if a specific instance of Multichannel_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMultichannel_ARM(subject Multichannel_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Multichannel_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Multichannel_ARM instances for property testing - lazily instantiated by Multichannel_ARMGenerator()
var multichannel_ARMGenerator gopter.Gen

// Multichannel_ARMGenerator returns a generator of Multichannel_ARM instances for property testing.
func Multichannel_ARMGenerator() gopter.Gen {
	if multichannel_ARMGenerator != nil {
		return multichannel_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMultichannel_ARM(generators)
	multichannel_ARMGenerator = gen.Struct(reflect.TypeOf(Multichannel_ARM{}), generators)

	return multichannel_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMultichannel_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMultichannel_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ProtocolSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProtocolSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProtocolSettings_ARM, ProtocolSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProtocolSettings_ARM runs a test to see if a specific instance of ProtocolSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProtocolSettings_ARM(subject ProtocolSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProtocolSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProtocolSettings_ARM instances for property testing - lazily instantiated by
// ProtocolSettings_ARMGenerator()
var protocolSettings_ARMGenerator gopter.Gen

// ProtocolSettings_ARMGenerator returns a generator of ProtocolSettings_ARM instances for property testing.
func ProtocolSettings_ARMGenerator() gopter.Gen {
	if protocolSettings_ARMGenerator != nil {
		return protocolSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForProtocolSettings_ARM(generators)
	protocolSettings_ARMGenerator = gen.Struct(reflect.TypeOf(ProtocolSettings_ARM{}), generators)

	return protocolSettings_ARMGenerator
}

// AddRelatedPropertyGeneratorsForProtocolSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProtocolSettings_ARM(gens map[string]gopter.Gen) {
	gens["Smb"] = gen.PtrOf(SmbSetting_ARMGenerator())
}

func Test_SmbSetting_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SmbSetting_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSmbSetting_ARM, SmbSetting_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSmbSetting_ARM runs a test to see if a specific instance of SmbSetting_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSmbSetting_ARM(subject SmbSetting_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SmbSetting_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SmbSetting_ARM instances for property testing - lazily instantiated by SmbSetting_ARMGenerator()
var smbSetting_ARMGenerator gopter.Gen

// SmbSetting_ARMGenerator returns a generator of SmbSetting_ARM instances for property testing.
// We first initialize smbSetting_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SmbSetting_ARMGenerator() gopter.Gen {
	if smbSetting_ARMGenerator != nil {
		return smbSetting_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSmbSetting_ARM(generators)
	smbSetting_ARMGenerator = gen.Struct(reflect.TypeOf(SmbSetting_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSmbSetting_ARM(generators)
	AddRelatedPropertyGeneratorsForSmbSetting_ARM(generators)
	smbSetting_ARMGenerator = gen.Struct(reflect.TypeOf(SmbSetting_ARM{}), generators)

	return smbSetting_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSmbSetting_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSmbSetting_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationMethods"] = gen.PtrOf(gen.AlphaString())
	gens["ChannelEncryption"] = gen.PtrOf(gen.AlphaString())
	gens["KerberosTicketEncryption"] = gen.PtrOf(gen.AlphaString())
	gens["Versions"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSmbSetting_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSmbSetting_ARM(gens map[string]gopter.Gen) {
	gens["Multichannel"] = gen.PtrOf(Multichannel_ARMGenerator())
}

func Test_StorageAccounts_FileService_Properties_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccounts_FileService_Properties_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccounts_FileService_Properties_Spec_ARM, StorageAccounts_FileService_Properties_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccounts_FileService_Properties_Spec_ARM runs a test to see if a specific instance of StorageAccounts_FileService_Properties_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccounts_FileService_Properties_Spec_ARM(subject StorageAccounts_FileService_Properties_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccounts_FileService_Properties_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccounts_FileService_Properties_Spec_ARM instances for property testing - lazily instantiated by
// StorageAccounts_FileService_Properties_Spec_ARMGenerator()
var storageAccounts_FileService_Properties_Spec_ARMGenerator gopter.Gen

// StorageAccounts_FileService_Properties_Spec_ARMGenerator returns a generator of StorageAccounts_FileService_Properties_Spec_ARM instances for property testing.
func StorageAccounts_FileService_Properties_Spec_ARMGenerator() gopter.Gen {
	if storageAccounts_FileService_Properties_Spec_ARMGenerator != nil {
		return storageAccounts_FileService_Properties_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Properties_Spec_ARM(generators)
	storageAccounts_FileService_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_FileService_Properties_Spec_ARM{}), generators)

	return storageAccounts_FileService_Properties_Spec_ARMGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Properties_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(CorsRules_ARMGenerator())
	gens["ProtocolSettings"] = gen.PtrOf(ProtocolSettings_ARMGenerator())
	gens["ShareDeleteRetentionPolicy"] = gen.PtrOf(DeleteRetentionPolicy_ARMGenerator())
}

func Test_StorageAccounts_FileService_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccounts_FileService_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccounts_FileService_Spec_ARM, StorageAccounts_FileService_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccounts_FileService_Spec_ARM runs a test to see if a specific instance of StorageAccounts_FileService_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccounts_FileService_Spec_ARM(subject StorageAccounts_FileService_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccounts_FileService_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccounts_FileService_Spec_ARM instances for property testing - lazily instantiated by
// StorageAccounts_FileService_Spec_ARMGenerator()
var storageAccounts_FileService_Spec_ARMGenerator gopter.Gen

// StorageAccounts_FileService_Spec_ARMGenerator returns a generator of StorageAccounts_FileService_Spec_ARM instances for property testing.
// We first initialize storageAccounts_FileService_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageAccounts_FileService_Spec_ARMGenerator() gopter.Gen {
	if storageAccounts_FileService_Spec_ARMGenerator != nil {
		return storageAccounts_FileService_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_FileService_Spec_ARM(generators)
	storageAccounts_FileService_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_FileService_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageAccounts_FileService_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Spec_ARM(generators)
	storageAccounts_FileService_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccounts_FileService_Spec_ARM{}), generators)

	return storageAccounts_FileService_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageAccounts_FileService_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageAccounts_FileService_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccounts_FileService_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageAccounts_FileService_Properties_Spec_ARMGenerator())
}
