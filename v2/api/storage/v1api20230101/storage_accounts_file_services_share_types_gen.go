// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import (
	"fmt"
	storage "github.com/Azure/azure-service-operator/v2/api/storage/v1api20230101/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /storage/resource-manager/Microsoft.Storage/stable/2023-01-01/file.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}
type StorageAccountsFileServicesShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_FileServices_Share_Spec   `json:"spec,omitempty"`
	Status            StorageAccounts_FileServices_Share_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccountsFileServicesShare{}

// GetConditions returns the conditions of the resource
func (share *StorageAccountsFileServicesShare) GetConditions() conditions.Conditions {
	return share.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (share *StorageAccountsFileServicesShare) SetConditions(conditions conditions.Conditions) {
	share.Status.Conditions = conditions
}

var _ conversion.Convertible = &StorageAccountsFileServicesShare{}

// ConvertFrom populates our StorageAccountsFileServicesShare from the provided hub StorageAccountsFileServicesShare
func (share *StorageAccountsFileServicesShare) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.StorageAccountsFileServicesShare)
	if !ok {
		return fmt.Errorf("expected storage/v1api20230101/storage/StorageAccountsFileServicesShare but received %T instead", hub)
	}

	return share.AssignProperties_From_StorageAccountsFileServicesShare(source)
}

// ConvertTo populates the provided hub StorageAccountsFileServicesShare from our StorageAccountsFileServicesShare
func (share *StorageAccountsFileServicesShare) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.StorageAccountsFileServicesShare)
	if !ok {
		return fmt.Errorf("expected storage/v1api20230101/storage/StorageAccountsFileServicesShare but received %T instead", hub)
	}

	return share.AssignProperties_To_StorageAccountsFileServicesShare(destination)
}

// +kubebuilder:webhook:path=/mutate-storage-azure-com-v1api20230101-storageaccountsfileservicesshare,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsfileservicesshares,verbs=create;update,versions=v1api20230101,name=default.v1api20230101.storageaccountsfileservicesshares.storage.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &StorageAccountsFileServicesShare{}

// Default applies defaults to the StorageAccountsFileServicesShare resource
func (share *StorageAccountsFileServicesShare) Default() {
	share.defaultImpl()
	var temp any = share
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (share *StorageAccountsFileServicesShare) defaultAzureName() {
	if share.Spec.AzureName == "" {
		share.Spec.AzureName = share.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccountsFileServicesShare resource
func (share *StorageAccountsFileServicesShare) defaultImpl() { share.defaultAzureName() }

var _ genruntime.ImportableResource = &StorageAccountsFileServicesShare{}

// InitializeSpec initializes the spec for this resource from the given status
func (share *StorageAccountsFileServicesShare) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*StorageAccounts_FileServices_Share_STATUS); ok {
		return share.Spec.Initialize_From_StorageAccounts_FileServices_Share_STATUS(s)
	}

	return fmt.Errorf("expected Status of type StorageAccounts_FileServices_Share_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &StorageAccountsFileServicesShare{}

// AzureName returns the Azure name of the resource
func (share *StorageAccountsFileServicesShare) AzureName() string {
	return share.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-01-01"
func (share StorageAccountsFileServicesShare) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (share *StorageAccountsFileServicesShare) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (share *StorageAccountsFileServicesShare) GetSpec() genruntime.ConvertibleSpec {
	return &share.Spec
}

// GetStatus returns the status of this resource
func (share *StorageAccountsFileServicesShare) GetStatus() genruntime.ConvertibleStatus {
	return &share.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (share *StorageAccountsFileServicesShare) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts/fileServices/shares"
func (share *StorageAccountsFileServicesShare) GetType() string {
	return "Microsoft.Storage/storageAccounts/fileServices/shares"
}

// NewEmptyStatus returns a new empty (blank) status
func (share *StorageAccountsFileServicesShare) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &StorageAccounts_FileServices_Share_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (share *StorageAccountsFileServicesShare) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(share.Spec)
	return share.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (share *StorageAccountsFileServicesShare) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccounts_FileServices_Share_STATUS); ok {
		share.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccounts_FileServices_Share_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	share.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-storage-azure-com-v1api20230101-storageaccountsfileservicesshare,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=storage.azure.com,resources=storageaccountsfileservicesshares,verbs=create;update,versions=v1api20230101,name=validate.v1api20230101.storageaccountsfileservicesshares.storage.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &StorageAccountsFileServicesShare{}

// ValidateCreate validates the creation of the resource
func (share *StorageAccountsFileServicesShare) ValidateCreate() (admission.Warnings, error) {
	validations := share.createValidations()
	var temp any = share
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (share *StorageAccountsFileServicesShare) ValidateDelete() (admission.Warnings, error) {
	validations := share.deleteValidations()
	var temp any = share
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (share *StorageAccountsFileServicesShare) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := share.updateValidations()
	var temp any = share
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (share *StorageAccountsFileServicesShare) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){share.validateResourceReferences, share.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (share *StorageAccountsFileServicesShare) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (share *StorageAccountsFileServicesShare) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return share.validateResourceReferences()
		},
		share.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return share.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (share *StorageAccountsFileServicesShare) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(share)
}

// validateResourceReferences validates all resource references
func (share *StorageAccountsFileServicesShare) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&share.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (share *StorageAccountsFileServicesShare) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*StorageAccountsFileServicesShare)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, share)
}

// AssignProperties_From_StorageAccountsFileServicesShare populates our StorageAccountsFileServicesShare from the provided source StorageAccountsFileServicesShare
func (share *StorageAccountsFileServicesShare) AssignProperties_From_StorageAccountsFileServicesShare(source *storage.StorageAccountsFileServicesShare) error {

	// ObjectMeta
	share.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec StorageAccounts_FileServices_Share_Spec
	err := spec.AssignProperties_From_StorageAccounts_FileServices_Share_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_StorageAccounts_FileServices_Share_Spec() to populate field Spec")
	}
	share.Spec = spec

	// Status
	var status StorageAccounts_FileServices_Share_STATUS
	err = status.AssignProperties_From_StorageAccounts_FileServices_Share_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_StorageAccounts_FileServices_Share_STATUS() to populate field Status")
	}
	share.Status = status

	// No error
	return nil
}

// AssignProperties_To_StorageAccountsFileServicesShare populates the provided destination StorageAccountsFileServicesShare from our StorageAccountsFileServicesShare
func (share *StorageAccountsFileServicesShare) AssignProperties_To_StorageAccountsFileServicesShare(destination *storage.StorageAccountsFileServicesShare) error {

	// ObjectMeta
	destination.ObjectMeta = *share.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.StorageAccounts_FileServices_Share_Spec
	err := share.Spec.AssignProperties_To_StorageAccounts_FileServices_Share_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_StorageAccounts_FileServices_Share_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.StorageAccounts_FileServices_Share_STATUS
	err = share.Status.AssignProperties_To_StorageAccounts_FileServices_Share_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_StorageAccounts_FileServices_Share_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (share *StorageAccountsFileServicesShare) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: share.Spec.OriginalVersion(),
		Kind:    "StorageAccountsFileServicesShare",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /storage/resource-manager/Microsoft.Storage/stable/2023-01-01/file.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}
type StorageAccountsFileServicesShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccountsFileServicesShare `json:"items"`
}

type StorageAccounts_FileServices_Share_Spec struct {
	// AccessTier: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and
	// Cool. FileStorage account can choose Premium.
	AccessTier *FileShareProperties_AccessTier `json:"accessTier,omitempty"`

	// +kubebuilder:validation:MaxLength=63
	// +kubebuilder:validation:MinLength=3
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// EnabledProtocols: The authentication protocol that is used for the file share. Can only be specified when creating a
	// share.
	EnabledProtocols *FileShareProperties_EnabledProtocols `json:"enabledProtocols,omitempty"`

	// Metadata: A name-value pair to associate with the share as metadata.
	Metadata map[string]string `json:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a storage.azure.com/StorageAccountsFileService resource
	Owner *genruntime.KnownResourceReference `group:"storage.azure.com" json:"owner,omitempty" kind:"StorageAccountsFileService"`

	// RootSquash: The property is for NFS share only. The default is NoRootSquash.
	RootSquash *FileShareProperties_RootSquash `json:"rootSquash,omitempty"`

	// +kubebuilder:validation:Maximum=102400
	// +kubebuilder:validation:Minimum=1
	// ShareQuota: The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).
	// For Large File Shares, the maximum size is 102400.
	ShareQuota *int `json:"shareQuota,omitempty"`

	// SignedIdentifiers: List of stored access policies specified on the share.
	SignedIdentifiers []SignedIdentifier `json:"signedIdentifiers,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccounts_FileServices_Share_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (share *StorageAccounts_FileServices_Share_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if share == nil {
		return nil, nil
	}
	result := &StorageAccounts_FileServices_Share_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if share.AccessTier != nil ||
		share.EnabledProtocols != nil ||
		share.Metadata != nil ||
		share.RootSquash != nil ||
		share.ShareQuota != nil ||
		share.SignedIdentifiers != nil {
		result.Properties = &FileShareProperties_ARM{}
	}
	if share.AccessTier != nil {
		accessTier := *share.AccessTier
		result.Properties.AccessTier = &accessTier
	}
	if share.EnabledProtocols != nil {
		enabledProtocols := *share.EnabledProtocols
		result.Properties.EnabledProtocols = &enabledProtocols
	}
	if share.Metadata != nil {
		result.Properties.Metadata = make(map[string]string, len(share.Metadata))
		for key, value := range share.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	if share.RootSquash != nil {
		rootSquash := *share.RootSquash
		result.Properties.RootSquash = &rootSquash
	}
	if share.ShareQuota != nil {
		shareQuota := *share.ShareQuota
		result.Properties.ShareQuota = &shareQuota
	}
	for _, item := range share.SignedIdentifiers {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.SignedIdentifiers = append(result.Properties.SignedIdentifiers, *item_ARM.(*SignedIdentifier_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (share *StorageAccounts_FileServices_Share_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_FileServices_Share_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (share *StorageAccounts_FileServices_Share_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_FileServices_Share_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_FileServices_Share_Spec_ARM, got %T", armInput)
	}

	// Set property "AccessTier":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			share.AccessTier = &accessTier
		}
	}

	// Set property "AzureName":
	share.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "EnabledProtocols":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnabledProtocols != nil {
			enabledProtocols := *typedInput.Properties.EnabledProtocols
			share.EnabledProtocols = &enabledProtocols
		}
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			share.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				share.Metadata[key] = value
			}
		}
	}

	// Set property "Owner":
	share.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "RootSquash":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RootSquash != nil {
			rootSquash := *typedInput.Properties.RootSquash
			share.RootSquash = &rootSquash
		}
	}

	// Set property "ShareQuota":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ShareQuota != nil {
			shareQuota := *typedInput.Properties.ShareQuota
			share.ShareQuota = &shareQuota
		}
	}

	// Set property "SignedIdentifiers":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SignedIdentifiers {
			var item1 SignedIdentifier
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			share.SignedIdentifiers = append(share.SignedIdentifiers, item1)
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_FileServices_Share_Spec{}

// ConvertSpecFrom populates our StorageAccounts_FileServices_Share_Spec from the provided source
func (share *StorageAccounts_FileServices_Share_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.StorageAccounts_FileServices_Share_Spec)
	if ok {
		// Populate our instance from source
		return share.AssignProperties_From_StorageAccounts_FileServices_Share_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.StorageAccounts_FileServices_Share_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = share.AssignProperties_From_StorageAccounts_FileServices_Share_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_FileServices_Share_Spec
func (share *StorageAccounts_FileServices_Share_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.StorageAccounts_FileServices_Share_Spec)
	if ok {
		// Populate destination from our instance
		return share.AssignProperties_To_StorageAccounts_FileServices_Share_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.StorageAccounts_FileServices_Share_Spec{}
	err := share.AssignProperties_To_StorageAccounts_FileServices_Share_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_StorageAccounts_FileServices_Share_Spec populates our StorageAccounts_FileServices_Share_Spec from the provided source StorageAccounts_FileServices_Share_Spec
func (share *StorageAccounts_FileServices_Share_Spec) AssignProperties_From_StorageAccounts_FileServices_Share_Spec(source *storage.StorageAccounts_FileServices_Share_Spec) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := *source.AccessTier
		accessTierTemp := genruntime.ToEnum(accessTier, fileShareProperties_AccessTier_Values)
		share.AccessTier = &accessTierTemp
	} else {
		share.AccessTier = nil
	}

	// AzureName
	share.AzureName = source.AzureName

	// EnabledProtocols
	if source.EnabledProtocols != nil {
		enabledProtocol := *source.EnabledProtocols
		enabledProtocolTemp := genruntime.ToEnum(enabledProtocol, fileShareProperties_EnabledProtocols_Values)
		share.EnabledProtocols = &enabledProtocolTemp
	} else {
		share.EnabledProtocols = nil
	}

	// Metadata
	share.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		share.Owner = &owner
	} else {
		share.Owner = nil
	}

	// RootSquash
	if source.RootSquash != nil {
		rootSquash := *source.RootSquash
		rootSquashTemp := genruntime.ToEnum(rootSquash, fileShareProperties_RootSquash_Values)
		share.RootSquash = &rootSquashTemp
	} else {
		share.RootSquash = nil
	}

	// ShareQuota
	if source.ShareQuota != nil {
		shareQuota := *source.ShareQuota
		share.ShareQuota = &shareQuota
	} else {
		share.ShareQuota = nil
	}

	// SignedIdentifiers
	if source.SignedIdentifiers != nil {
		signedIdentifierList := make([]SignedIdentifier, len(source.SignedIdentifiers))
		for signedIdentifierIndex, signedIdentifierItem := range source.SignedIdentifiers {
			// Shadow the loop variable to avoid aliasing
			signedIdentifierItem := signedIdentifierItem
			var signedIdentifier SignedIdentifier
			err := signedIdentifier.AssignProperties_From_SignedIdentifier(&signedIdentifierItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SignedIdentifier() to populate field SignedIdentifiers")
			}
			signedIdentifierList[signedIdentifierIndex] = signedIdentifier
		}
		share.SignedIdentifiers = signedIdentifierList
	} else {
		share.SignedIdentifiers = nil
	}

	// No error
	return nil
}

// AssignProperties_To_StorageAccounts_FileServices_Share_Spec populates the provided destination StorageAccounts_FileServices_Share_Spec from our StorageAccounts_FileServices_Share_Spec
func (share *StorageAccounts_FileServices_Share_Spec) AssignProperties_To_StorageAccounts_FileServices_Share_Spec(destination *storage.StorageAccounts_FileServices_Share_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if share.AccessTier != nil {
		accessTier := string(*share.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AzureName
	destination.AzureName = share.AzureName

	// EnabledProtocols
	if share.EnabledProtocols != nil {
		enabledProtocol := string(*share.EnabledProtocols)
		destination.EnabledProtocols = &enabledProtocol
	} else {
		destination.EnabledProtocols = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(share.Metadata)

	// OriginalVersion
	destination.OriginalVersion = share.OriginalVersion()

	// Owner
	if share.Owner != nil {
		owner := share.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RootSquash
	if share.RootSquash != nil {
		rootSquash := string(*share.RootSquash)
		destination.RootSquash = &rootSquash
	} else {
		destination.RootSquash = nil
	}

	// ShareQuota
	if share.ShareQuota != nil {
		shareQuota := *share.ShareQuota
		destination.ShareQuota = &shareQuota
	} else {
		destination.ShareQuota = nil
	}

	// SignedIdentifiers
	if share.SignedIdentifiers != nil {
		signedIdentifierList := make([]storage.SignedIdentifier, len(share.SignedIdentifiers))
		for signedIdentifierIndex, signedIdentifierItem := range share.SignedIdentifiers {
			// Shadow the loop variable to avoid aliasing
			signedIdentifierItem := signedIdentifierItem
			var signedIdentifier storage.SignedIdentifier
			err := signedIdentifierItem.AssignProperties_To_SignedIdentifier(&signedIdentifier)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SignedIdentifier() to populate field SignedIdentifiers")
			}
			signedIdentifierList[signedIdentifierIndex] = signedIdentifier
		}
		destination.SignedIdentifiers = signedIdentifierList
	} else {
		destination.SignedIdentifiers = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_StorageAccounts_FileServices_Share_STATUS populates our StorageAccounts_FileServices_Share_Spec from the provided source StorageAccounts_FileServices_Share_STATUS
func (share *StorageAccounts_FileServices_Share_Spec) Initialize_From_StorageAccounts_FileServices_Share_STATUS(source *StorageAccounts_FileServices_Share_STATUS) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := genruntime.ToEnum(string(*source.AccessTier), fileShareProperties_AccessTier_Values)
		share.AccessTier = &accessTier
	} else {
		share.AccessTier = nil
	}

	// EnabledProtocols
	if source.EnabledProtocols != nil {
		enabledProtocol := genruntime.ToEnum(string(*source.EnabledProtocols), fileShareProperties_EnabledProtocols_Values)
		share.EnabledProtocols = &enabledProtocol
	} else {
		share.EnabledProtocols = nil
	}

	// Metadata
	share.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// RootSquash
	if source.RootSquash != nil {
		rootSquash := genruntime.ToEnum(string(*source.RootSquash), fileShareProperties_RootSquash_Values)
		share.RootSquash = &rootSquash
	} else {
		share.RootSquash = nil
	}

	// ShareQuota
	if source.ShareQuota != nil {
		shareQuota := *source.ShareQuota
		share.ShareQuota = &shareQuota
	} else {
		share.ShareQuota = nil
	}

	// SignedIdentifiers
	if source.SignedIdentifiers != nil {
		signedIdentifierList := make([]SignedIdentifier, len(source.SignedIdentifiers))
		for signedIdentifierIndex, signedIdentifierItem := range source.SignedIdentifiers {
			// Shadow the loop variable to avoid aliasing
			signedIdentifierItem := signedIdentifierItem
			var signedIdentifier SignedIdentifier
			err := signedIdentifier.Initialize_From_SignedIdentifier_STATUS(&signedIdentifierItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_SignedIdentifier_STATUS() to populate field SignedIdentifiers")
			}
			signedIdentifierList[signedIdentifierIndex] = signedIdentifier
		}
		share.SignedIdentifiers = signedIdentifierList
	} else {
		share.SignedIdentifiers = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (share *StorageAccounts_FileServices_Share_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (share *StorageAccounts_FileServices_Share_Spec) SetAzureName(azureName string) {
	share.AzureName = azureName
}

type StorageAccounts_FileServices_Share_STATUS struct {
	// AccessTier: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and
	// Cool. FileStorage account can choose Premium.
	AccessTier *FileShareProperties_AccessTier_STATUS `json:"accessTier,omitempty"`

	// AccessTierChangeTime: Indicates the last modification time for share access tier.
	AccessTierChangeTime *string `json:"accessTierChangeTime,omitempty"`

	// AccessTierStatus: Indicates if there is a pending transition for access tier.
	AccessTierStatus *string `json:"accessTierStatus,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Deleted: Indicates whether the share was deleted.
	Deleted *bool `json:"deleted,omitempty"`

	// DeletedTime: The deleted time if the share was deleted.
	DeletedTime *string `json:"deletedTime,omitempty"`

	// EnabledProtocols: The authentication protocol that is used for the file share. Can only be specified when creating a
	// share.
	EnabledProtocols *FileShareProperties_EnabledProtocols_STATUS `json:"enabledProtocols,omitempty"`

	// Etag: Resource Etag.
	Etag *string `json:"etag,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// LastModifiedTime: Returns the date and time the share was last modified.
	LastModifiedTime *string `json:"lastModifiedTime,omitempty"`

	// LeaseDuration: Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
	LeaseDuration *FileShareProperties_LeaseDuration_STATUS `json:"leaseDuration,omitempty"`

	// LeaseState: Lease state of the share.
	LeaseState *FileShareProperties_LeaseState_STATUS `json:"leaseState,omitempty"`

	// LeaseStatus: The lease status of the share.
	LeaseStatus *FileShareProperties_LeaseStatus_STATUS `json:"leaseStatus,omitempty"`

	// Metadata: A name-value pair to associate with the share as metadata.
	Metadata map[string]string `json:"metadata,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// RemainingRetentionDays: Remaining retention days for share that was soft deleted.
	RemainingRetentionDays *int `json:"remainingRetentionDays,omitempty"`

	// RootSquash: The property is for NFS share only. The default is NoRootSquash.
	RootSquash *FileShareProperties_RootSquash_STATUS `json:"rootSquash,omitempty"`

	// ShareQuota: The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).
	// For Large File Shares, the maximum size is 102400.
	ShareQuota *int `json:"shareQuota,omitempty"`

	// ShareUsageBytes: The approximate size of the data stored on the share. Note that this value may not include all recently
	// created or recently resized files.
	ShareUsageBytes *int `json:"shareUsageBytes,omitempty"`

	// SignedIdentifiers: List of stored access policies specified on the share.
	SignedIdentifiers []SignedIdentifier_STATUS `json:"signedIdentifiers,omitempty"`

	// SnapshotTime: Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
	SnapshotTime *string `json:"snapshotTime,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	// Version: The version of the share.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccounts_FileServices_Share_STATUS{}

// ConvertStatusFrom populates our StorageAccounts_FileServices_Share_STATUS from the provided source
func (share *StorageAccounts_FileServices_Share_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.StorageAccounts_FileServices_Share_STATUS)
	if ok {
		// Populate our instance from source
		return share.AssignProperties_From_StorageAccounts_FileServices_Share_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.StorageAccounts_FileServices_Share_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = share.AssignProperties_From_StorageAccounts_FileServices_Share_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccounts_FileServices_Share_STATUS
func (share *StorageAccounts_FileServices_Share_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.StorageAccounts_FileServices_Share_STATUS)
	if ok {
		// Populate destination from our instance
		return share.AssignProperties_To_StorageAccounts_FileServices_Share_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.StorageAccounts_FileServices_Share_STATUS{}
	err := share.AssignProperties_To_StorageAccounts_FileServices_Share_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccounts_FileServices_Share_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (share *StorageAccounts_FileServices_Share_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_FileServices_Share_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (share *StorageAccounts_FileServices_Share_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_FileServices_Share_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_FileServices_Share_STATUS_ARM, got %T", armInput)
	}

	// Set property "AccessTier":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			share.AccessTier = &accessTier
		}
	}

	// Set property "AccessTierChangeTime":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTierChangeTime != nil {
			accessTierChangeTime := *typedInput.Properties.AccessTierChangeTime
			share.AccessTierChangeTime = &accessTierChangeTime
		}
	}

	// Set property "AccessTierStatus":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTierStatus != nil {
			accessTierStatus := *typedInput.Properties.AccessTierStatus
			share.AccessTierStatus = &accessTierStatus
		}
	}

	// no assignment for property "Conditions"

	// Set property "Deleted":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Deleted != nil {
			deleted := *typedInput.Properties.Deleted
			share.Deleted = &deleted
		}
	}

	// Set property "DeletedTime":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeletedTime != nil {
			deletedTime := *typedInput.Properties.DeletedTime
			share.DeletedTime = &deletedTime
		}
	}

	// Set property "EnabledProtocols":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnabledProtocols != nil {
			enabledProtocols := *typedInput.Properties.EnabledProtocols
			share.EnabledProtocols = &enabledProtocols
		}
	}

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		share.Etag = &etag
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		share.Id = &id
	}

	// Set property "LastModifiedTime":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastModifiedTime != nil {
			lastModifiedTime := *typedInput.Properties.LastModifiedTime
			share.LastModifiedTime = &lastModifiedTime
		}
	}

	// Set property "LeaseDuration":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseDuration != nil {
			leaseDuration := *typedInput.Properties.LeaseDuration
			share.LeaseDuration = &leaseDuration
		}
	}

	// Set property "LeaseState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseState != nil {
			leaseState := *typedInput.Properties.LeaseState
			share.LeaseState = &leaseState
		}
	}

	// Set property "LeaseStatus":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LeaseStatus != nil {
			leaseStatus := *typedInput.Properties.LeaseStatus
			share.LeaseStatus = &leaseStatus
		}
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			share.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				share.Metadata[key] = value
			}
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		share.Name = &name
	}

	// Set property "RemainingRetentionDays":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RemainingRetentionDays != nil {
			remainingRetentionDays := *typedInput.Properties.RemainingRetentionDays
			share.RemainingRetentionDays = &remainingRetentionDays
		}
	}

	// Set property "RootSquash":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RootSquash != nil {
			rootSquash := *typedInput.Properties.RootSquash
			share.RootSquash = &rootSquash
		}
	}

	// Set property "ShareQuota":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ShareQuota != nil {
			shareQuota := *typedInput.Properties.ShareQuota
			share.ShareQuota = &shareQuota
		}
	}

	// Set property "ShareUsageBytes":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ShareUsageBytes != nil {
			shareUsageBytes := *typedInput.Properties.ShareUsageBytes
			share.ShareUsageBytes = &shareUsageBytes
		}
	}

	// Set property "SignedIdentifiers":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SignedIdentifiers {
			var item1 SignedIdentifier_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			share.SignedIdentifiers = append(share.SignedIdentifiers, item1)
		}
	}

	// Set property "SnapshotTime":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SnapshotTime != nil {
			snapshotTime := *typedInput.Properties.SnapshotTime
			share.SnapshotTime = &snapshotTime
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		share.Type = &typeVar
	}

	// Set property "Version":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			share.Version = &version
		}
	}

	// No error
	return nil
}

// AssignProperties_From_StorageAccounts_FileServices_Share_STATUS populates our StorageAccounts_FileServices_Share_STATUS from the provided source StorageAccounts_FileServices_Share_STATUS
func (share *StorageAccounts_FileServices_Share_STATUS) AssignProperties_From_StorageAccounts_FileServices_Share_STATUS(source *storage.StorageAccounts_FileServices_Share_STATUS) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := *source.AccessTier
		accessTierTemp := genruntime.ToEnum(accessTier, fileShareProperties_AccessTier_STATUS_Values)
		share.AccessTier = &accessTierTemp
	} else {
		share.AccessTier = nil
	}

	// AccessTierChangeTime
	share.AccessTierChangeTime = genruntime.ClonePointerToString(source.AccessTierChangeTime)

	// AccessTierStatus
	share.AccessTierStatus = genruntime.ClonePointerToString(source.AccessTierStatus)

	// Conditions
	share.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Deleted
	if source.Deleted != nil {
		deleted := *source.Deleted
		share.Deleted = &deleted
	} else {
		share.Deleted = nil
	}

	// DeletedTime
	share.DeletedTime = genruntime.ClonePointerToString(source.DeletedTime)

	// EnabledProtocols
	if source.EnabledProtocols != nil {
		enabledProtocol := *source.EnabledProtocols
		enabledProtocolTemp := genruntime.ToEnum(enabledProtocol, fileShareProperties_EnabledProtocols_STATUS_Values)
		share.EnabledProtocols = &enabledProtocolTemp
	} else {
		share.EnabledProtocols = nil
	}

	// Etag
	share.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	share.Id = genruntime.ClonePointerToString(source.Id)

	// LastModifiedTime
	share.LastModifiedTime = genruntime.ClonePointerToString(source.LastModifiedTime)

	// LeaseDuration
	if source.LeaseDuration != nil {
		leaseDuration := *source.LeaseDuration
		leaseDurationTemp := genruntime.ToEnum(leaseDuration, fileShareProperties_LeaseDuration_STATUS_Values)
		share.LeaseDuration = &leaseDurationTemp
	} else {
		share.LeaseDuration = nil
	}

	// LeaseState
	if source.LeaseState != nil {
		leaseState := *source.LeaseState
		leaseStateTemp := genruntime.ToEnum(leaseState, fileShareProperties_LeaseState_STATUS_Values)
		share.LeaseState = &leaseStateTemp
	} else {
		share.LeaseState = nil
	}

	// LeaseStatus
	if source.LeaseStatus != nil {
		leaseStatus := *source.LeaseStatus
		leaseStatusTemp := genruntime.ToEnum(leaseStatus, fileShareProperties_LeaseStatus_STATUS_Values)
		share.LeaseStatus = &leaseStatusTemp
	} else {
		share.LeaseStatus = nil
	}

	// Metadata
	share.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// Name
	share.Name = genruntime.ClonePointerToString(source.Name)

	// RemainingRetentionDays
	share.RemainingRetentionDays = genruntime.ClonePointerToInt(source.RemainingRetentionDays)

	// RootSquash
	if source.RootSquash != nil {
		rootSquash := *source.RootSquash
		rootSquashTemp := genruntime.ToEnum(rootSquash, fileShareProperties_RootSquash_STATUS_Values)
		share.RootSquash = &rootSquashTemp
	} else {
		share.RootSquash = nil
	}

	// ShareQuota
	share.ShareQuota = genruntime.ClonePointerToInt(source.ShareQuota)

	// ShareUsageBytes
	share.ShareUsageBytes = genruntime.ClonePointerToInt(source.ShareUsageBytes)

	// SignedIdentifiers
	if source.SignedIdentifiers != nil {
		signedIdentifierList := make([]SignedIdentifier_STATUS, len(source.SignedIdentifiers))
		for signedIdentifierIndex, signedIdentifierItem := range source.SignedIdentifiers {
			// Shadow the loop variable to avoid aliasing
			signedIdentifierItem := signedIdentifierItem
			var signedIdentifier SignedIdentifier_STATUS
			err := signedIdentifier.AssignProperties_From_SignedIdentifier_STATUS(&signedIdentifierItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SignedIdentifier_STATUS() to populate field SignedIdentifiers")
			}
			signedIdentifierList[signedIdentifierIndex] = signedIdentifier
		}
		share.SignedIdentifiers = signedIdentifierList
	} else {
		share.SignedIdentifiers = nil
	}

	// SnapshotTime
	share.SnapshotTime = genruntime.ClonePointerToString(source.SnapshotTime)

	// Type
	share.Type = genruntime.ClonePointerToString(source.Type)

	// Version
	share.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignProperties_To_StorageAccounts_FileServices_Share_STATUS populates the provided destination StorageAccounts_FileServices_Share_STATUS from our StorageAccounts_FileServices_Share_STATUS
func (share *StorageAccounts_FileServices_Share_STATUS) AssignProperties_To_StorageAccounts_FileServices_Share_STATUS(destination *storage.StorageAccounts_FileServices_Share_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if share.AccessTier != nil {
		accessTier := string(*share.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AccessTierChangeTime
	destination.AccessTierChangeTime = genruntime.ClonePointerToString(share.AccessTierChangeTime)

	// AccessTierStatus
	destination.AccessTierStatus = genruntime.ClonePointerToString(share.AccessTierStatus)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(share.Conditions)

	// Deleted
	if share.Deleted != nil {
		deleted := *share.Deleted
		destination.Deleted = &deleted
	} else {
		destination.Deleted = nil
	}

	// DeletedTime
	destination.DeletedTime = genruntime.ClonePointerToString(share.DeletedTime)

	// EnabledProtocols
	if share.EnabledProtocols != nil {
		enabledProtocol := string(*share.EnabledProtocols)
		destination.EnabledProtocols = &enabledProtocol
	} else {
		destination.EnabledProtocols = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(share.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(share.Id)

	// LastModifiedTime
	destination.LastModifiedTime = genruntime.ClonePointerToString(share.LastModifiedTime)

	// LeaseDuration
	if share.LeaseDuration != nil {
		leaseDuration := string(*share.LeaseDuration)
		destination.LeaseDuration = &leaseDuration
	} else {
		destination.LeaseDuration = nil
	}

	// LeaseState
	if share.LeaseState != nil {
		leaseState := string(*share.LeaseState)
		destination.LeaseState = &leaseState
	} else {
		destination.LeaseState = nil
	}

	// LeaseStatus
	if share.LeaseStatus != nil {
		leaseStatus := string(*share.LeaseStatus)
		destination.LeaseStatus = &leaseStatus
	} else {
		destination.LeaseStatus = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(share.Metadata)

	// Name
	destination.Name = genruntime.ClonePointerToString(share.Name)

	// RemainingRetentionDays
	destination.RemainingRetentionDays = genruntime.ClonePointerToInt(share.RemainingRetentionDays)

	// RootSquash
	if share.RootSquash != nil {
		rootSquash := string(*share.RootSquash)
		destination.RootSquash = &rootSquash
	} else {
		destination.RootSquash = nil
	}

	// ShareQuota
	destination.ShareQuota = genruntime.ClonePointerToInt(share.ShareQuota)

	// ShareUsageBytes
	destination.ShareUsageBytes = genruntime.ClonePointerToInt(share.ShareUsageBytes)

	// SignedIdentifiers
	if share.SignedIdentifiers != nil {
		signedIdentifierList := make([]storage.SignedIdentifier_STATUS, len(share.SignedIdentifiers))
		for signedIdentifierIndex, signedIdentifierItem := range share.SignedIdentifiers {
			// Shadow the loop variable to avoid aliasing
			signedIdentifierItem := signedIdentifierItem
			var signedIdentifier storage.SignedIdentifier_STATUS
			err := signedIdentifierItem.AssignProperties_To_SignedIdentifier_STATUS(&signedIdentifier)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SignedIdentifier_STATUS() to populate field SignedIdentifiers")
			}
			signedIdentifierList[signedIdentifierIndex] = signedIdentifier
		}
		destination.SignedIdentifiers = signedIdentifierList
	} else {
		destination.SignedIdentifiers = nil
	}

	// SnapshotTime
	destination.SnapshotTime = genruntime.ClonePointerToString(share.SnapshotTime)

	// Type
	destination.Type = genruntime.ClonePointerToString(share.Type)

	// Version
	destination.Version = genruntime.ClonePointerToString(share.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Cool","Hot","Premium","TransactionOptimized"}
type FileShareProperties_AccessTier string

const (
	FileShareProperties_AccessTier_Cool                 = FileShareProperties_AccessTier("Cool")
	FileShareProperties_AccessTier_Hot                  = FileShareProperties_AccessTier("Hot")
	FileShareProperties_AccessTier_Premium              = FileShareProperties_AccessTier("Premium")
	FileShareProperties_AccessTier_TransactionOptimized = FileShareProperties_AccessTier("TransactionOptimized")
)

// Mapping from string to FileShareProperties_AccessTier
var fileShareProperties_AccessTier_Values = map[string]FileShareProperties_AccessTier{
	"cool":                 FileShareProperties_AccessTier_Cool,
	"hot":                  FileShareProperties_AccessTier_Hot,
	"premium":              FileShareProperties_AccessTier_Premium,
	"transactionoptimized": FileShareProperties_AccessTier_TransactionOptimized,
}

type FileShareProperties_AccessTier_STATUS string

const (
	FileShareProperties_AccessTier_STATUS_Cool                 = FileShareProperties_AccessTier_STATUS("Cool")
	FileShareProperties_AccessTier_STATUS_Hot                  = FileShareProperties_AccessTier_STATUS("Hot")
	FileShareProperties_AccessTier_STATUS_Premium              = FileShareProperties_AccessTier_STATUS("Premium")
	FileShareProperties_AccessTier_STATUS_TransactionOptimized = FileShareProperties_AccessTier_STATUS("TransactionOptimized")
)

// Mapping from string to FileShareProperties_AccessTier_STATUS
var fileShareProperties_AccessTier_STATUS_Values = map[string]FileShareProperties_AccessTier_STATUS{
	"cool":                 FileShareProperties_AccessTier_STATUS_Cool,
	"hot":                  FileShareProperties_AccessTier_STATUS_Hot,
	"premium":              FileShareProperties_AccessTier_STATUS_Premium,
	"transactionoptimized": FileShareProperties_AccessTier_STATUS_TransactionOptimized,
}

// +kubebuilder:validation:Enum={"NFS","SMB"}
type FileShareProperties_EnabledProtocols string

const (
	FileShareProperties_EnabledProtocols_NFS = FileShareProperties_EnabledProtocols("NFS")
	FileShareProperties_EnabledProtocols_SMB = FileShareProperties_EnabledProtocols("SMB")
)

// Mapping from string to FileShareProperties_EnabledProtocols
var fileShareProperties_EnabledProtocols_Values = map[string]FileShareProperties_EnabledProtocols{
	"nfs": FileShareProperties_EnabledProtocols_NFS,
	"smb": FileShareProperties_EnabledProtocols_SMB,
}

type FileShareProperties_EnabledProtocols_STATUS string

const (
	FileShareProperties_EnabledProtocols_STATUS_NFS = FileShareProperties_EnabledProtocols_STATUS("NFS")
	FileShareProperties_EnabledProtocols_STATUS_SMB = FileShareProperties_EnabledProtocols_STATUS("SMB")
)

// Mapping from string to FileShareProperties_EnabledProtocols_STATUS
var fileShareProperties_EnabledProtocols_STATUS_Values = map[string]FileShareProperties_EnabledProtocols_STATUS{
	"nfs": FileShareProperties_EnabledProtocols_STATUS_NFS,
	"smb": FileShareProperties_EnabledProtocols_STATUS_SMB,
}

type FileShareProperties_LeaseDuration_STATUS string

const (
	FileShareProperties_LeaseDuration_STATUS_Fixed    = FileShareProperties_LeaseDuration_STATUS("Fixed")
	FileShareProperties_LeaseDuration_STATUS_Infinite = FileShareProperties_LeaseDuration_STATUS("Infinite")
)

// Mapping from string to FileShareProperties_LeaseDuration_STATUS
var fileShareProperties_LeaseDuration_STATUS_Values = map[string]FileShareProperties_LeaseDuration_STATUS{
	"fixed":    FileShareProperties_LeaseDuration_STATUS_Fixed,
	"infinite": FileShareProperties_LeaseDuration_STATUS_Infinite,
}

type FileShareProperties_LeaseState_STATUS string

const (
	FileShareProperties_LeaseState_STATUS_Available = FileShareProperties_LeaseState_STATUS("Available")
	FileShareProperties_LeaseState_STATUS_Breaking  = FileShareProperties_LeaseState_STATUS("Breaking")
	FileShareProperties_LeaseState_STATUS_Broken    = FileShareProperties_LeaseState_STATUS("Broken")
	FileShareProperties_LeaseState_STATUS_Expired   = FileShareProperties_LeaseState_STATUS("Expired")
	FileShareProperties_LeaseState_STATUS_Leased    = FileShareProperties_LeaseState_STATUS("Leased")
)

// Mapping from string to FileShareProperties_LeaseState_STATUS
var fileShareProperties_LeaseState_STATUS_Values = map[string]FileShareProperties_LeaseState_STATUS{
	"available": FileShareProperties_LeaseState_STATUS_Available,
	"breaking":  FileShareProperties_LeaseState_STATUS_Breaking,
	"broken":    FileShareProperties_LeaseState_STATUS_Broken,
	"expired":   FileShareProperties_LeaseState_STATUS_Expired,
	"leased":    FileShareProperties_LeaseState_STATUS_Leased,
}

type FileShareProperties_LeaseStatus_STATUS string

const (
	FileShareProperties_LeaseStatus_STATUS_Locked   = FileShareProperties_LeaseStatus_STATUS("Locked")
	FileShareProperties_LeaseStatus_STATUS_Unlocked = FileShareProperties_LeaseStatus_STATUS("Unlocked")
)

// Mapping from string to FileShareProperties_LeaseStatus_STATUS
var fileShareProperties_LeaseStatus_STATUS_Values = map[string]FileShareProperties_LeaseStatus_STATUS{
	"locked":   FileShareProperties_LeaseStatus_STATUS_Locked,
	"unlocked": FileShareProperties_LeaseStatus_STATUS_Unlocked,
}

// +kubebuilder:validation:Enum={"AllSquash","NoRootSquash","RootSquash"}
type FileShareProperties_RootSquash string

const (
	FileShareProperties_RootSquash_AllSquash    = FileShareProperties_RootSquash("AllSquash")
	FileShareProperties_RootSquash_NoRootSquash = FileShareProperties_RootSquash("NoRootSquash")
	FileShareProperties_RootSquash_RootSquash   = FileShareProperties_RootSquash("RootSquash")
)

// Mapping from string to FileShareProperties_RootSquash
var fileShareProperties_RootSquash_Values = map[string]FileShareProperties_RootSquash{
	"allsquash":    FileShareProperties_RootSquash_AllSquash,
	"norootsquash": FileShareProperties_RootSquash_NoRootSquash,
	"rootsquash":   FileShareProperties_RootSquash_RootSquash,
}

type FileShareProperties_RootSquash_STATUS string

const (
	FileShareProperties_RootSquash_STATUS_AllSquash    = FileShareProperties_RootSquash_STATUS("AllSquash")
	FileShareProperties_RootSquash_STATUS_NoRootSquash = FileShareProperties_RootSquash_STATUS("NoRootSquash")
	FileShareProperties_RootSquash_STATUS_RootSquash   = FileShareProperties_RootSquash_STATUS("RootSquash")
)

// Mapping from string to FileShareProperties_RootSquash_STATUS
var fileShareProperties_RootSquash_STATUS_Values = map[string]FileShareProperties_RootSquash_STATUS{
	"allsquash":    FileShareProperties_RootSquash_STATUS_AllSquash,
	"norootsquash": FileShareProperties_RootSquash_STATUS_NoRootSquash,
	"rootsquash":   FileShareProperties_RootSquash_STATUS_RootSquash,
}

type SignedIdentifier struct {
	// AccessPolicy: Access policy
	AccessPolicy *AccessPolicy `json:"accessPolicy,omitempty"`

	// Reference: An unique identifier of the stored access policy.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &SignedIdentifier{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identifier *SignedIdentifier) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identifier == nil {
		return nil, nil
	}
	result := &SignedIdentifier_ARM{}

	// Set property "AccessPolicy":
	if identifier.AccessPolicy != nil {
		accessPolicy_ARM, err := (*identifier.AccessPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		accessPolicy := *accessPolicy_ARM.(*AccessPolicy_ARM)
		result.AccessPolicy = &accessPolicy
	}

	// Set property "Id":
	if identifier.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.Lookup(*identifier.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identifier *SignedIdentifier) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignedIdentifier_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identifier *SignedIdentifier) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignedIdentifier_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignedIdentifier_ARM, got %T", armInput)
	}

	// Set property "AccessPolicy":
	if typedInput.AccessPolicy != nil {
		var accessPolicy1 AccessPolicy
		err := accessPolicy1.PopulateFromARM(owner, *typedInput.AccessPolicy)
		if err != nil {
			return err
		}
		accessPolicy := accessPolicy1
		identifier.AccessPolicy = &accessPolicy
	}

	// no assignment for property "Reference"

	// No error
	return nil
}

// AssignProperties_From_SignedIdentifier populates our SignedIdentifier from the provided source SignedIdentifier
func (identifier *SignedIdentifier) AssignProperties_From_SignedIdentifier(source *storage.SignedIdentifier) error {

	// AccessPolicy
	if source.AccessPolicy != nil {
		var accessPolicy AccessPolicy
		err := accessPolicy.AssignProperties_From_AccessPolicy(source.AccessPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AccessPolicy() to populate field AccessPolicy")
		}
		identifier.AccessPolicy = &accessPolicy
	} else {
		identifier.AccessPolicy = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		identifier.Reference = &reference
	} else {
		identifier.Reference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SignedIdentifier populates the provided destination SignedIdentifier from our SignedIdentifier
func (identifier *SignedIdentifier) AssignProperties_To_SignedIdentifier(destination *storage.SignedIdentifier) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessPolicy
	if identifier.AccessPolicy != nil {
		var accessPolicy storage.AccessPolicy
		err := identifier.AccessPolicy.AssignProperties_To_AccessPolicy(&accessPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AccessPolicy() to populate field AccessPolicy")
		}
		destination.AccessPolicy = &accessPolicy
	} else {
		destination.AccessPolicy = nil
	}

	// Reference
	if identifier.Reference != nil {
		reference := identifier.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SignedIdentifier_STATUS populates our SignedIdentifier from the provided source SignedIdentifier_STATUS
func (identifier *SignedIdentifier) Initialize_From_SignedIdentifier_STATUS(source *SignedIdentifier_STATUS) error {

	// AccessPolicy
	if source.AccessPolicy != nil {
		var accessPolicy AccessPolicy
		err := accessPolicy.Initialize_From_AccessPolicy_STATUS(source.AccessPolicy)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_AccessPolicy_STATUS() to populate field AccessPolicy")
		}
		identifier.AccessPolicy = &accessPolicy
	} else {
		identifier.AccessPolicy = nil
	}

	// Reference
	if source.Id != nil {
		reference := genruntime.CreateResourceReferenceFromARMID(*source.Id)
		identifier.Reference = &reference
	} else {
		identifier.Reference = nil
	}

	// No error
	return nil
}

type SignedIdentifier_STATUS struct {
	// AccessPolicy: Access policy
	AccessPolicy *AccessPolicy_STATUS `json:"accessPolicy,omitempty"`

	// Id: An unique identifier of the stored access policy.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SignedIdentifier_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identifier *SignedIdentifier_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignedIdentifier_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identifier *SignedIdentifier_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignedIdentifier_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignedIdentifier_STATUS_ARM, got %T", armInput)
	}

	// Set property "AccessPolicy":
	if typedInput.AccessPolicy != nil {
		var accessPolicy1 AccessPolicy_STATUS
		err := accessPolicy1.PopulateFromARM(owner, *typedInput.AccessPolicy)
		if err != nil {
			return err
		}
		accessPolicy := accessPolicy1
		identifier.AccessPolicy = &accessPolicy
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		identifier.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_SignedIdentifier_STATUS populates our SignedIdentifier_STATUS from the provided source SignedIdentifier_STATUS
func (identifier *SignedIdentifier_STATUS) AssignProperties_From_SignedIdentifier_STATUS(source *storage.SignedIdentifier_STATUS) error {

	// AccessPolicy
	if source.AccessPolicy != nil {
		var accessPolicy AccessPolicy_STATUS
		err := accessPolicy.AssignProperties_From_AccessPolicy_STATUS(source.AccessPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AccessPolicy_STATUS() to populate field AccessPolicy")
		}
		identifier.AccessPolicy = &accessPolicy
	} else {
		identifier.AccessPolicy = nil
	}

	// Id
	identifier.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_SignedIdentifier_STATUS populates the provided destination SignedIdentifier_STATUS from our SignedIdentifier_STATUS
func (identifier *SignedIdentifier_STATUS) AssignProperties_To_SignedIdentifier_STATUS(destination *storage.SignedIdentifier_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessPolicy
	if identifier.AccessPolicy != nil {
		var accessPolicy storage.AccessPolicy_STATUS
		err := identifier.AccessPolicy.AssignProperties_To_AccessPolicy_STATUS(&accessPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AccessPolicy_STATUS() to populate field AccessPolicy")
		}
		destination.AccessPolicy = &accessPolicy
	} else {
		destination.AccessPolicy = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(identifier.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AccessPolicy struct {
	// ExpiryTime: Expiry time of the access policy
	ExpiryTime *string `json:"expiryTime,omitempty"`

	// Permission: List of abbreviated permissions.
	Permission *string `json:"permission,omitempty"`

	// StartTime: Start time of the access policy
	StartTime *string `json:"startTime,omitempty"`
}

var _ genruntime.ARMTransformer = &AccessPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *AccessPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &AccessPolicy_ARM{}

	// Set property "ExpiryTime":
	if policy.ExpiryTime != nil {
		expiryTime := *policy.ExpiryTime
		result.ExpiryTime = &expiryTime
	}

	// Set property "Permission":
	if policy.Permission != nil {
		permission := *policy.Permission
		result.Permission = &permission
	}

	// Set property "StartTime":
	if policy.StartTime != nil {
		startTime := *policy.StartTime
		result.StartTime = &startTime
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *AccessPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AccessPolicy_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *AccessPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AccessPolicy_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AccessPolicy_ARM, got %T", armInput)
	}

	// Set property "ExpiryTime":
	if typedInput.ExpiryTime != nil {
		expiryTime := *typedInput.ExpiryTime
		policy.ExpiryTime = &expiryTime
	}

	// Set property "Permission":
	if typedInput.Permission != nil {
		permission := *typedInput.Permission
		policy.Permission = &permission
	}

	// Set property "StartTime":
	if typedInput.StartTime != nil {
		startTime := *typedInput.StartTime
		policy.StartTime = &startTime
	}

	// No error
	return nil
}

// AssignProperties_From_AccessPolicy populates our AccessPolicy from the provided source AccessPolicy
func (policy *AccessPolicy) AssignProperties_From_AccessPolicy(source *storage.AccessPolicy) error {

	// ExpiryTime
	policy.ExpiryTime = genruntime.ClonePointerToString(source.ExpiryTime)

	// Permission
	policy.Permission = genruntime.ClonePointerToString(source.Permission)

	// StartTime
	policy.StartTime = genruntime.ClonePointerToString(source.StartTime)

	// No error
	return nil
}

// AssignProperties_To_AccessPolicy populates the provided destination AccessPolicy from our AccessPolicy
func (policy *AccessPolicy) AssignProperties_To_AccessPolicy(destination *storage.AccessPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpiryTime
	destination.ExpiryTime = genruntime.ClonePointerToString(policy.ExpiryTime)

	// Permission
	destination.Permission = genruntime.ClonePointerToString(policy.Permission)

	// StartTime
	destination.StartTime = genruntime.ClonePointerToString(policy.StartTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_AccessPolicy_STATUS populates our AccessPolicy from the provided source AccessPolicy_STATUS
func (policy *AccessPolicy) Initialize_From_AccessPolicy_STATUS(source *AccessPolicy_STATUS) error {

	// ExpiryTime
	policy.ExpiryTime = genruntime.ClonePointerToString(source.ExpiryTime)

	// Permission
	policy.Permission = genruntime.ClonePointerToString(source.Permission)

	// StartTime
	policy.StartTime = genruntime.ClonePointerToString(source.StartTime)

	// No error
	return nil
}

type AccessPolicy_STATUS struct {
	// ExpiryTime: Expiry time of the access policy
	ExpiryTime *string `json:"expiryTime,omitempty"`

	// Permission: List of abbreviated permissions.
	Permission *string `json:"permission,omitempty"`

	// StartTime: Start time of the access policy
	StartTime *string `json:"startTime,omitempty"`
}

var _ genruntime.FromARMConverter = &AccessPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *AccessPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AccessPolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *AccessPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AccessPolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AccessPolicy_STATUS_ARM, got %T", armInput)
	}

	// Set property "ExpiryTime":
	if typedInput.ExpiryTime != nil {
		expiryTime := *typedInput.ExpiryTime
		policy.ExpiryTime = &expiryTime
	}

	// Set property "Permission":
	if typedInput.Permission != nil {
		permission := *typedInput.Permission
		policy.Permission = &permission
	}

	// Set property "StartTime":
	if typedInput.StartTime != nil {
		startTime := *typedInput.StartTime
		policy.StartTime = &startTime
	}

	// No error
	return nil
}

// AssignProperties_From_AccessPolicy_STATUS populates our AccessPolicy_STATUS from the provided source AccessPolicy_STATUS
func (policy *AccessPolicy_STATUS) AssignProperties_From_AccessPolicy_STATUS(source *storage.AccessPolicy_STATUS) error {

	// ExpiryTime
	policy.ExpiryTime = genruntime.ClonePointerToString(source.ExpiryTime)

	// Permission
	policy.Permission = genruntime.ClonePointerToString(source.Permission)

	// StartTime
	policy.StartTime = genruntime.ClonePointerToString(source.StartTime)

	// No error
	return nil
}

// AssignProperties_To_AccessPolicy_STATUS populates the provided destination AccessPolicy_STATUS from our AccessPolicy_STATUS
func (policy *AccessPolicy_STATUS) AssignProperties_To_AccessPolicy_STATUS(destination *storage.AccessPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpiryTime
	destination.ExpiryTime = genruntime.ClonePointerToString(policy.ExpiryTime)

	// Permission
	destination.Permission = genruntime.ClonePointerToString(policy.Permission)

	// StartTime
	destination.StartTime = genruntime.ClonePointerToString(policy.StartTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&StorageAccountsFileServicesShare{}, &StorageAccountsFileServicesShareList{})
}
