// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200202

import (
	"fmt"
	v20200202s "github.com/Azure/azure-service-operator/v2/api/insights/v1beta20200202storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2020-02-02/Microsoft.Insights.Application.json#/resourceDefinitions/components
type Component struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Components_Spec                     `json:"spec,omitempty"`
	Status            ApplicationInsightsComponent_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Component{}

// GetConditions returns the conditions of the resource
func (component *Component) GetConditions() conditions.Conditions {
	return component.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (component *Component) SetConditions(conditions conditions.Conditions) {
	component.Status.Conditions = conditions
}

var _ conversion.Convertible = &Component{}

// ConvertFrom populates our Component from the provided hub Component
func (component *Component) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200202s.Component)
	if !ok {
		return fmt.Errorf("expected insights/v1beta20200202storage/Component but received %T instead", hub)
	}

	return component.AssignProperties_From_Component(source)
}

// ConvertTo populates the provided hub Component from our Component
func (component *Component) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200202s.Component)
	if !ok {
		return fmt.Errorf("expected insights/v1beta20200202storage/Component but received %T instead", hub)
	}

	return component.AssignProperties_To_Component(destination)
}

// +kubebuilder:webhook:path=/mutate-insights-azure-com-v1beta20200202-component,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=components,verbs=create;update,versions=v1beta20200202,name=default.v1beta20200202.components.insights.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Component{}

// Default applies defaults to the Component resource
func (component *Component) Default() {
	component.defaultImpl()
	var temp interface{} = component
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (component *Component) defaultAzureName() {
	if component.Spec.AzureName == "" {
		component.Spec.AzureName = component.Name
	}
}

// defaultImpl applies the code generated defaults to the Component resource
func (component *Component) defaultImpl() { component.defaultAzureName() }

var _ genruntime.KubernetesResource = &Component{}

// AzureName returns the Azure name of the resource
func (component *Component) AzureName() string {
	return component.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-02-02"
func (component Component) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (component *Component) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (component *Component) GetSpec() genruntime.ConvertibleSpec {
	return &component.Spec
}

// GetStatus returns the status of this resource
func (component *Component) GetStatus() genruntime.ConvertibleStatus {
	return &component.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/components"
func (component *Component) GetType() string {
	return "Microsoft.Insights/components"
}

// NewEmptyStatus returns a new empty (blank) status
func (component *Component) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ApplicationInsightsComponent_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (component *Component) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(component.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  component.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (component *Component) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ApplicationInsightsComponent_STATUS); ok {
		component.Status = *st
		return nil
	}

	// Convert status to required version
	var st ApplicationInsightsComponent_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	component.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-insights-azure-com-v1beta20200202-component,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=components,verbs=create;update,versions=v1beta20200202,name=validate.v1beta20200202.components.insights.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Component{}

// ValidateCreate validates the creation of the resource
func (component *Component) ValidateCreate() error {
	validations := component.createValidations()
	var temp interface{} = component
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (component *Component) ValidateDelete() error {
	validations := component.deleteValidations()
	var temp interface{} = component
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (component *Component) ValidateUpdate(old runtime.Object) error {
	validations := component.updateValidations()
	var temp interface{} = component
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (component *Component) createValidations() []func() error {
	return []func() error{component.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (component *Component) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (component *Component) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return component.validateResourceReferences()
		},
		component.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (component *Component) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&component.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (component *Component) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Component)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, component)
}

// AssignProperties_From_Component populates our Component from the provided source Component
func (component *Component) AssignProperties_From_Component(source *v20200202s.Component) error {

	// ObjectMeta
	component.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Components_Spec
	err := spec.AssignProperties_From_Components_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Components_Spec() to populate field Spec")
	}
	component.Spec = spec

	// Status
	var status ApplicationInsightsComponent_STATUS
	err = status.AssignProperties_From_ApplicationInsightsComponent_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ApplicationInsightsComponent_STATUS() to populate field Status")
	}
	component.Status = status

	// No error
	return nil
}

// AssignProperties_To_Component populates the provided destination Component from our Component
func (component *Component) AssignProperties_To_Component(destination *v20200202s.Component) error {

	// ObjectMeta
	destination.ObjectMeta = *component.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200202s.Components_Spec
	err := component.Spec.AssignProperties_To_Components_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Components_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200202s.ApplicationInsightsComponent_STATUS
	err = component.Status.AssignProperties_To_ApplicationInsightsComponent_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ApplicationInsightsComponent_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (component *Component) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: component.Spec.OriginalVersion(),
		Kind:    "Component",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2020-02-02/Microsoft.Insights.Application.json#/resourceDefinitions/components
type ComponentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Component `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-02-02"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-02-02")

type ApplicationInsightsComponent_STATUS struct {
	// AppId: Application Insights Unique ID for your Application.
	AppId *string `json:"AppId,omitempty"`

	// ApplicationId: The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.
	ApplicationId *string `json:"ApplicationId,omitempty"`

	// Application_Type: Type of application being monitored.
	Application_Type *ApplicationInsightsComponentProperties_STATUS_Application_Type `json:"Application_Type,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ConnectionString: Application Insights component connection string.
	ConnectionString *string `json:"ConnectionString,omitempty"`

	// CreationDate: Creation Date for the Application Insights component, in ISO 8601 format.
	CreationDate *string `json:"CreationDate,omitempty"`

	// DisableIpMasking: Disable IP masking.
	DisableIpMasking *bool `json:"DisableIpMasking,omitempty"`

	// DisableLocalAuth: Disable Non-AAD based Auth.
	DisableLocalAuth *bool `json:"DisableLocalAuth,omitempty"`

	// Etag: Resource etag
	Etag *string `json:"etag,omitempty"`

	// Flow_Type: Used by the Application Insights system to determine what kind of flow this component was created by. This is
	// to be set to 'Bluefield' when creating/updating a component via the REST API.
	Flow_Type *ApplicationInsightsComponentProperties_STATUS_Flow_Type `json:"Flow_Type,omitempty"`

	// ForceCustomerStorageForProfiler: Force users to create their own storage account for profiler and debugger.
	ForceCustomerStorageForProfiler *bool `json:"ForceCustomerStorageForProfiler,omitempty"`

	// HockeyAppId: The unique application ID created when a new application is added to HockeyApp, used for communications
	// with HockeyApp.
	HockeyAppId *string `json:"HockeyAppId,omitempty"`

	// HockeyAppToken: Token used to authenticate communications with between Application Insights and HockeyApp.
	HockeyAppToken *string `json:"HockeyAppToken,omitempty"`

	// Id: Azure resource Id
	Id *string `json:"id,omitempty"`

	// ImmediatePurgeDataOn30Days: Purge data immediately after 30 days.
	ImmediatePurgeDataOn30Days *bool `json:"ImmediatePurgeDataOn30Days,omitempty"`

	// IngestionMode: Indicates the flow of the ingestion.
	IngestionMode *ApplicationInsightsComponentProperties_STATUS_IngestionMode `json:"IngestionMode,omitempty"`

	// InstrumentationKey: Application Insights Instrumentation key. A read-only value that applications can use to identify
	// the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of
	// each new Application Insights component.
	InstrumentationKey *string `json:"InstrumentationKey,omitempty"`

	// Kind: The kind of application that this component refers to, used to customize UI. This value is a freeform string,
	// values should typically be one of the following: web, ios, other, store, java, phone.
	Kind *string `json:"kind,omitempty"`

	// LaMigrationDate: The date which the component got migrated to LA, in ISO 8601 format.
	LaMigrationDate *string `json:"LaMigrationDate,omitempty"`

	// Location: Resource location
	Location *string `json:"location,omitempty"`

	// Name: Azure resource name
	Name *string `json:"name,omitempty"`

	// PrivateLinkScopedResources: List of linked private link scope resources.
	PrivateLinkScopedResources []PrivateLinkScopedResource_STATUS `json:"PrivateLinkScopedResources,omitempty"`

	// PropertiesName: Application name.
	PropertiesName *string `json:"properties_name,omitempty"`

	// ProvisioningState: Current state of this component: whether or not is has been provisioned within the resource group it
	// is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying,
	// Canceled, and Failed.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// PublicNetworkAccessForIngestion: The network access type for accessing Application Insights ingestion.
	PublicNetworkAccessForIngestion *PublicNetworkAccessType_STATUS `json:"publicNetworkAccessForIngestion,omitempty"`

	// PublicNetworkAccessForQuery: The network access type for accessing Application Insights query.
	PublicNetworkAccessForQuery *PublicNetworkAccessType_STATUS `json:"publicNetworkAccessForQuery,omitempty"`

	// Request_Source: Describes what tool created this Application Insights component. Customers using this API should set
	// this to the default 'rest'.
	Request_Source *ApplicationInsightsComponentProperties_STATUS_Request_Source `json:"Request_Source,omitempty"`

	// RetentionInDays: Retention period in days.
	RetentionInDays *int `json:"RetentionInDays,omitempty"`

	// SamplingPercentage: Percentage of the data produced by the application being monitored that is being sampled for
	// Application Insights telemetry.
	SamplingPercentage *float64 `json:"SamplingPercentage,omitempty"`

	// Tags: Resource tags
	Tags *v1.JSON `json:"tags,omitempty"`

	// TenantId: Azure Tenant Id.
	TenantId *string `json:"TenantId,omitempty"`

	// Type: Azure resource type
	Type *string `json:"type,omitempty"`

	// WorkspaceResourceId: Resource Id of the log analytics workspace which the data will be ingested to. This property is
	// required to create an application with this API version. Applications from older versions will not have this property.
	WorkspaceResourceId *string `json:"WorkspaceResourceId,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ApplicationInsightsComponent_STATUS{}

// ConvertStatusFrom populates our ApplicationInsightsComponent_STATUS from the provided source
func (component *ApplicationInsightsComponent_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200202s.ApplicationInsightsComponent_STATUS)
	if ok {
		// Populate our instance from source
		return component.AssignProperties_From_ApplicationInsightsComponent_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20200202s.ApplicationInsightsComponent_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = component.AssignProperties_From_ApplicationInsightsComponent_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ApplicationInsightsComponent_STATUS
func (component *ApplicationInsightsComponent_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200202s.ApplicationInsightsComponent_STATUS)
	if ok {
		// Populate destination from our instance
		return component.AssignProperties_To_ApplicationInsightsComponent_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20200202s.ApplicationInsightsComponent_STATUS{}
	err := component.AssignProperties_To_ApplicationInsightsComponent_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ApplicationInsightsComponent_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (component *ApplicationInsightsComponent_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApplicationInsightsComponent_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (component *ApplicationInsightsComponent_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApplicationInsightsComponent_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApplicationInsightsComponent_STATUSARM, got %T", armInput)
	}

	// Set property ‘AppId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AppId != nil {
			appId := *typedInput.Properties.AppId
			component.AppId = &appId
		}
	}

	// Set property ‘ApplicationId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApplicationId != nil {
			applicationId := *typedInput.Properties.ApplicationId
			component.ApplicationId = &applicationId
		}
	}

	// Set property ‘Application_Type’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Application_Type != nil {
			application_Type := *typedInput.Properties.Application_Type
			component.Application_Type = &application_Type
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ConnectionString’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConnectionString != nil {
			connectionString := *typedInput.Properties.ConnectionString
			component.ConnectionString = &connectionString
		}
	}

	// Set property ‘CreationDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationDate != nil {
			creationDate := *typedInput.Properties.CreationDate
			component.CreationDate = &creationDate
		}
	}

	// Set property ‘DisableIpMasking’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableIpMasking != nil {
			disableIpMasking := *typedInput.Properties.DisableIpMasking
			component.DisableIpMasking = &disableIpMasking
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			component.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		component.Etag = &etag
	}

	// Set property ‘Flow_Type’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Flow_Type != nil {
			flow_Type := *typedInput.Properties.Flow_Type
			component.Flow_Type = &flow_Type
		}
	}

	// Set property ‘ForceCustomerStorageForProfiler’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForceCustomerStorageForProfiler != nil {
			forceCustomerStorageForProfiler := *typedInput.Properties.ForceCustomerStorageForProfiler
			component.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
		}
	}

	// Set property ‘HockeyAppId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HockeyAppId != nil {
			hockeyAppId := *typedInput.Properties.HockeyAppId
			component.HockeyAppId = &hockeyAppId
		}
	}

	// Set property ‘HockeyAppToken’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HockeyAppToken != nil {
			hockeyAppToken := *typedInput.Properties.HockeyAppToken
			component.HockeyAppToken = &hockeyAppToken
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		component.Id = &id
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmediatePurgeDataOn30Days != nil {
			immediatePurgeDataOn30Days := *typedInput.Properties.ImmediatePurgeDataOn30Days
			component.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
		}
	}

	// Set property ‘IngestionMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IngestionMode != nil {
			ingestionMode := *typedInput.Properties.IngestionMode
			component.IngestionMode = &ingestionMode
		}
	}

	// Set property ‘InstrumentationKey’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InstrumentationKey != nil {
			instrumentationKey := *typedInput.Properties.InstrumentationKey
			component.InstrumentationKey = &instrumentationKey
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		component.Kind = &kind
	}

	// Set property ‘LaMigrationDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LaMigrationDate != nil {
			laMigrationDate := *typedInput.Properties.LaMigrationDate
			component.LaMigrationDate = &laMigrationDate
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		component.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		component.Name = &name
	}

	// Set property ‘PrivateLinkScopedResources’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateLinkScopedResources {
			var item1 PrivateLinkScopedResource_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			component.PrivateLinkScopedResources = append(component.PrivateLinkScopedResources, item1)
		}
	}

	// Set property ‘PropertiesName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Name != nil {
			propertiesName := *typedInput.Properties.Name
			component.PropertiesName = &propertiesName
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			component.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccessForIngestion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForIngestion != nil {
			publicNetworkAccessForIngestion := *typedInput.Properties.PublicNetworkAccessForIngestion
			component.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
		}
	}

	// Set property ‘PublicNetworkAccessForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForQuery != nil {
			publicNetworkAccessForQuery := *typedInput.Properties.PublicNetworkAccessForQuery
			component.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
		}
	}

	// Set property ‘Request_Source’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request_Source != nil {
			request_Source := *typedInput.Properties.Request_Source
			component.Request_Source = &request_Source
		}
	}

	// Set property ‘RetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionInDays != nil {
			retentionInDays := *typedInput.Properties.RetentionInDays
			component.RetentionInDays = &retentionInDays
		}
	}

	// Set property ‘SamplingPercentage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SamplingPercentage != nil {
			samplingPercentage := *typedInput.Properties.SamplingPercentage
			component.SamplingPercentage = &samplingPercentage
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		tags := *(*typedInput.Tags).DeepCopy()
		component.Tags = &tags
	}

	// Set property ‘TenantId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TenantId != nil {
			tenantId := *typedInput.Properties.TenantId
			component.TenantId = &tenantId
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		component.Type = &typeVar
	}

	// Set property ‘WorkspaceResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WorkspaceResourceId != nil {
			workspaceResourceId := *typedInput.Properties.WorkspaceResourceId
			component.WorkspaceResourceId = &workspaceResourceId
		}
	}

	// No error
	return nil
}

// AssignProperties_From_ApplicationInsightsComponent_STATUS populates our ApplicationInsightsComponent_STATUS from the provided source ApplicationInsightsComponent_STATUS
func (component *ApplicationInsightsComponent_STATUS) AssignProperties_From_ApplicationInsightsComponent_STATUS(source *v20200202s.ApplicationInsightsComponent_STATUS) error {

	// AppId
	component.AppId = genruntime.ClonePointerToString(source.AppId)

	// ApplicationId
	component.ApplicationId = genruntime.ClonePointerToString(source.ApplicationId)

	// Application_Type
	if source.Application_Type != nil {
		application_Type := ApplicationInsightsComponentProperties_STATUS_Application_Type(*source.Application_Type)
		component.Application_Type = &application_Type
	} else {
		component.Application_Type = nil
	}

	// Conditions
	component.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ConnectionString
	component.ConnectionString = genruntime.ClonePointerToString(source.ConnectionString)

	// CreationDate
	component.CreationDate = genruntime.ClonePointerToString(source.CreationDate)

	// DisableIpMasking
	if source.DisableIpMasking != nil {
		disableIpMasking := *source.DisableIpMasking
		component.DisableIpMasking = &disableIpMasking
	} else {
		component.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		component.DisableLocalAuth = &disableLocalAuth
	} else {
		component.DisableLocalAuth = nil
	}

	// Etag
	component.Etag = genruntime.ClonePointerToString(source.Etag)

	// Flow_Type
	if source.Flow_Type != nil {
		flow_Type := ApplicationInsightsComponentProperties_STATUS_Flow_Type(*source.Flow_Type)
		component.Flow_Type = &flow_Type
	} else {
		component.Flow_Type = nil
	}

	// ForceCustomerStorageForProfiler
	if source.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *source.ForceCustomerStorageForProfiler
		component.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		component.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	component.HockeyAppId = genruntime.ClonePointerToString(source.HockeyAppId)

	// HockeyAppToken
	component.HockeyAppToken = genruntime.ClonePointerToString(source.HockeyAppToken)

	// Id
	component.Id = genruntime.ClonePointerToString(source.Id)

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		component.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		component.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	if source.IngestionMode != nil {
		ingestionMode := ApplicationInsightsComponentProperties_STATUS_IngestionMode(*source.IngestionMode)
		component.IngestionMode = &ingestionMode
	} else {
		component.IngestionMode = nil
	}

	// InstrumentationKey
	component.InstrumentationKey = genruntime.ClonePointerToString(source.InstrumentationKey)

	// Kind
	component.Kind = genruntime.ClonePointerToString(source.Kind)

	// LaMigrationDate
	component.LaMigrationDate = genruntime.ClonePointerToString(source.LaMigrationDate)

	// Location
	component.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	component.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateLinkScopedResources
	if source.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]PrivateLinkScopedResource_STATUS, len(source.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range source.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource PrivateLinkScopedResource_STATUS
			err := privateLinkScopedResource.AssignProperties_From_PrivateLinkScopedResource_STATUS(&privateLinkScopedResourceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateLinkScopedResource_STATUS() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		component.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		component.PrivateLinkScopedResources = nil
	}

	// PropertiesName
	component.PropertiesName = genruntime.ClonePointerToString(source.PropertiesName)

	// ProvisioningState
	component.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccessForIngestion
	if source.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := PublicNetworkAccessType_STATUS(*source.PublicNetworkAccessForIngestion)
		component.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		component.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if source.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := PublicNetworkAccessType_STATUS(*source.PublicNetworkAccessForQuery)
		component.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		component.PublicNetworkAccessForQuery = nil
	}

	// Request_Source
	if source.Request_Source != nil {
		request_Source := ApplicationInsightsComponentProperties_STATUS_Request_Source(*source.Request_Source)
		component.Request_Source = &request_Source
	} else {
		component.Request_Source = nil
	}

	// RetentionInDays
	component.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// SamplingPercentage
	if source.SamplingPercentage != nil {
		samplingPercentage := *source.SamplingPercentage
		component.SamplingPercentage = &samplingPercentage
	} else {
		component.SamplingPercentage = nil
	}

	// Tags
	if source.Tags != nil {
		tag := *source.Tags.DeepCopy()
		component.Tags = &tag
	} else {
		component.Tags = nil
	}

	// TenantId
	component.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	component.Type = genruntime.ClonePointerToString(source.Type)

	// WorkspaceResourceId
	component.WorkspaceResourceId = genruntime.ClonePointerToString(source.WorkspaceResourceId)

	// No error
	return nil
}

// AssignProperties_To_ApplicationInsightsComponent_STATUS populates the provided destination ApplicationInsightsComponent_STATUS from our ApplicationInsightsComponent_STATUS
func (component *ApplicationInsightsComponent_STATUS) AssignProperties_To_ApplicationInsightsComponent_STATUS(destination *v20200202s.ApplicationInsightsComponent_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AppId
	destination.AppId = genruntime.ClonePointerToString(component.AppId)

	// ApplicationId
	destination.ApplicationId = genruntime.ClonePointerToString(component.ApplicationId)

	// Application_Type
	if component.Application_Type != nil {
		application_Type := string(*component.Application_Type)
		destination.Application_Type = &application_Type
	} else {
		destination.Application_Type = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(component.Conditions)

	// ConnectionString
	destination.ConnectionString = genruntime.ClonePointerToString(component.ConnectionString)

	// CreationDate
	destination.CreationDate = genruntime.ClonePointerToString(component.CreationDate)

	// DisableIpMasking
	if component.DisableIpMasking != nil {
		disableIpMasking := *component.DisableIpMasking
		destination.DisableIpMasking = &disableIpMasking
	} else {
		destination.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if component.DisableLocalAuth != nil {
		disableLocalAuth := *component.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(component.Etag)

	// Flow_Type
	if component.Flow_Type != nil {
		flow_Type := string(*component.Flow_Type)
		destination.Flow_Type = &flow_Type
	} else {
		destination.Flow_Type = nil
	}

	// ForceCustomerStorageForProfiler
	if component.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *component.ForceCustomerStorageForProfiler
		destination.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		destination.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	destination.HockeyAppId = genruntime.ClonePointerToString(component.HockeyAppId)

	// HockeyAppToken
	destination.HockeyAppToken = genruntime.ClonePointerToString(component.HockeyAppToken)

	// Id
	destination.Id = genruntime.ClonePointerToString(component.Id)

	// ImmediatePurgeDataOn30Days
	if component.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *component.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	if component.IngestionMode != nil {
		ingestionMode := string(*component.IngestionMode)
		destination.IngestionMode = &ingestionMode
	} else {
		destination.IngestionMode = nil
	}

	// InstrumentationKey
	destination.InstrumentationKey = genruntime.ClonePointerToString(component.InstrumentationKey)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(component.Kind)

	// LaMigrationDate
	destination.LaMigrationDate = genruntime.ClonePointerToString(component.LaMigrationDate)

	// Location
	destination.Location = genruntime.ClonePointerToString(component.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(component.Name)

	// PrivateLinkScopedResources
	if component.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]v20200202s.PrivateLinkScopedResource_STATUS, len(component.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range component.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource v20200202s.PrivateLinkScopedResource_STATUS
			err := privateLinkScopedResourceItem.AssignProperties_To_PrivateLinkScopedResource_STATUS(&privateLinkScopedResource)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateLinkScopedResource_STATUS() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		destination.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		destination.PrivateLinkScopedResources = nil
	}

	// PropertiesName
	destination.PropertiesName = genruntime.ClonePointerToString(component.PropertiesName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(component.ProvisioningState)

	// PublicNetworkAccessForIngestion
	if component.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := string(*component.PublicNetworkAccessForIngestion)
		destination.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		destination.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if component.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := string(*component.PublicNetworkAccessForQuery)
		destination.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		destination.PublicNetworkAccessForQuery = nil
	}

	// Request_Source
	if component.Request_Source != nil {
		request_Source := string(*component.Request_Source)
		destination.Request_Source = &request_Source
	} else {
		destination.Request_Source = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(component.RetentionInDays)

	// SamplingPercentage
	if component.SamplingPercentage != nil {
		samplingPercentage := *component.SamplingPercentage
		destination.SamplingPercentage = &samplingPercentage
	} else {
		destination.SamplingPercentage = nil
	}

	// Tags
	if component.Tags != nil {
		tag := *component.Tags.DeepCopy()
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(component.TenantId)

	// Type
	destination.Type = genruntime.ClonePointerToString(component.Type)

	// WorkspaceResourceId
	destination.WorkspaceResourceId = genruntime.ClonePointerToString(component.WorkspaceResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Components_Spec struct {
	// +kubebuilder:validation:Required
	// Application_Type: Type of application being monitored.
	Application_Type *ApplicationInsightsComponentProperties_Application_Type `json:"Application_Type,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// DisableIpMasking: Disable IP masking.
	DisableIpMasking *bool `json:"DisableIpMasking,omitempty"`

	// DisableLocalAuth: Disable Non-AAD based Auth.
	DisableLocalAuth *bool `json:"DisableLocalAuth,omitempty"`

	// Etag: Resource etag
	Etag *string `json:"etag,omitempty"`

	// Flow_Type: Used by the Application Insights system to determine what kind of flow this component was created by. This is
	// to be set to 'Bluefield' when creating/updating a component via the REST API.
	Flow_Type *ApplicationInsightsComponentProperties_Flow_Type `json:"Flow_Type,omitempty"`

	// ForceCustomerStorageForProfiler: Force users to create their own storage account for profiler and debugger.
	ForceCustomerStorageForProfiler *bool `json:"ForceCustomerStorageForProfiler,omitempty"`

	// HockeyAppId: The unique application ID created when a new application is added to HockeyApp, used for communications
	// with HockeyApp.
	HockeyAppId *string `json:"HockeyAppId,omitempty"`

	// ImmediatePurgeDataOn30Days: Purge data immediately after 30 days.
	ImmediatePurgeDataOn30Days *bool `json:"ImmediatePurgeDataOn30Days,omitempty"`

	// IngestionMode: Indicates the flow of the ingestion.
	IngestionMode *ApplicationInsightsComponentProperties_IngestionMode `json:"IngestionMode,omitempty"`

	// +kubebuilder:validation:Required
	// Kind: The kind of application that this component refers to, used to customize UI. This value is a freeform string,
	// values should typically be one of the following: web, ios, other, store, java, phone.
	Kind *string `json:"kind,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// PublicNetworkAccessForIngestion: The network access type for accessing Application Insights ingestion.
	PublicNetworkAccessForIngestion *ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion `json:"publicNetworkAccessForIngestion,omitempty"`

	// PublicNetworkAccessForQuery: The network access type for accessing Application Insights query.
	PublicNetworkAccessForQuery *ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery `json:"publicNetworkAccessForQuery,omitempty"`

	// Request_Source: Describes what tool created this Application Insights component. Customers using this API should set
	// this to the default 'rest'.
	Request_Source *ApplicationInsightsComponentProperties_Request_Source `json:"Request_Source,omitempty"`

	// RetentionInDays: Retention period in days.
	RetentionInDays *int `json:"RetentionInDays,omitempty"`

	// SamplingPercentage: Percentage of the data produced by the application being monitored that is being sampled for
	// Application Insights telemetry.
	SamplingPercentage *float64 `json:"SamplingPercentage,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// WorkspaceResourceReference: Resource Id of the log analytics workspace which the data will be ingested to. This property
	// is required to create an application with this API version. Applications from older versions will not have this property.
	WorkspaceResourceReference *genruntime.ResourceReference `armReference:"WorkspaceResourceId" json:"workspaceResourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &Components_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (components *Components_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if components == nil {
		return nil, nil
	}
	result := &Components_SpecARM{}

	// Set property ‘Etag’:
	if components.Etag != nil {
		etag := *components.Etag
		result.Etag = &etag
	}

	// Set property ‘Kind’:
	if components.Kind != nil {
		kind := *components.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if components.Location != nil {
		location := *components.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if components.Application_Type != nil ||
		components.DisableIpMasking != nil ||
		components.DisableLocalAuth != nil ||
		components.Flow_Type != nil ||
		components.ForceCustomerStorageForProfiler != nil ||
		components.HockeyAppId != nil ||
		components.ImmediatePurgeDataOn30Days != nil ||
		components.IngestionMode != nil ||
		components.PublicNetworkAccessForIngestion != nil ||
		components.PublicNetworkAccessForQuery != nil ||
		components.Request_Source != nil ||
		components.RetentionInDays != nil ||
		components.SamplingPercentage != nil ||
		components.WorkspaceResourceReference != nil {
		result.Properties = &ApplicationInsightsComponentPropertiesARM{}
	}
	if components.Application_Type != nil {
		application_Type := *components.Application_Type
		result.Properties.Application_Type = &application_Type
	}
	if components.DisableIpMasking != nil {
		disableIpMasking := *components.DisableIpMasking
		result.Properties.DisableIpMasking = &disableIpMasking
	}
	if components.DisableLocalAuth != nil {
		disableLocalAuth := *components.DisableLocalAuth
		result.Properties.DisableLocalAuth = &disableLocalAuth
	}
	if components.Flow_Type != nil {
		flow_Type := *components.Flow_Type
		result.Properties.Flow_Type = &flow_Type
	}
	if components.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *components.ForceCustomerStorageForProfiler
		result.Properties.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	}
	if components.HockeyAppId != nil {
		hockeyAppId := *components.HockeyAppId
		result.Properties.HockeyAppId = &hockeyAppId
	}
	if components.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Days := *components.ImmediatePurgeDataOn30Days
		result.Properties.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
	}
	if components.IngestionMode != nil {
		ingestionMode := *components.IngestionMode
		result.Properties.IngestionMode = &ingestionMode
	}
	if components.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := *components.PublicNetworkAccessForIngestion
		result.Properties.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	}
	if components.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := *components.PublicNetworkAccessForQuery
		result.Properties.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	}
	if components.Request_Source != nil {
		request_Source := *components.Request_Source
		result.Properties.Request_Source = &request_Source
	}
	if components.RetentionInDays != nil {
		retentionInDays := *components.RetentionInDays
		result.Properties.RetentionInDays = &retentionInDays
	}
	if components.SamplingPercentage != nil {
		samplingPercentage := *components.SamplingPercentage
		result.Properties.SamplingPercentage = &samplingPercentage
	}
	if components.WorkspaceResourceReference != nil {
		workspaceResourceIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*components.WorkspaceResourceReference)
		if err != nil {
			return nil, err
		}
		workspaceResourceId := workspaceResourceIdARMID
		result.Properties.WorkspaceResourceId = &workspaceResourceId
	}

	// Set property ‘Tags’:
	if components.Tags != nil {
		result.Tags = make(map[string]string, len(components.Tags))
		for key, value := range components.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (components *Components_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Components_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (components *Components_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Components_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Components_SpecARM, got %T", armInput)
	}

	// Set property ‘Application_Type’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Application_Type != nil {
			application_Type := *typedInput.Properties.Application_Type
			components.Application_Type = &application_Type
		}
	}

	// Set property ‘AzureName’:
	components.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DisableIpMasking’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableIpMasking != nil {
			disableIpMasking := *typedInput.Properties.DisableIpMasking
			components.DisableIpMasking = &disableIpMasking
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			components.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		components.Etag = &etag
	}

	// Set property ‘Flow_Type’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Flow_Type != nil {
			flow_Type := *typedInput.Properties.Flow_Type
			components.Flow_Type = &flow_Type
		}
	}

	// Set property ‘ForceCustomerStorageForProfiler’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForceCustomerStorageForProfiler != nil {
			forceCustomerStorageForProfiler := *typedInput.Properties.ForceCustomerStorageForProfiler
			components.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
		}
	}

	// Set property ‘HockeyAppId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HockeyAppId != nil {
			hockeyAppId := *typedInput.Properties.HockeyAppId
			components.HockeyAppId = &hockeyAppId
		}
	}

	// Set property ‘ImmediatePurgeDataOn30Days’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ImmediatePurgeDataOn30Days != nil {
			immediatePurgeDataOn30Days := *typedInput.Properties.ImmediatePurgeDataOn30Days
			components.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Days
		}
	}

	// Set property ‘IngestionMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IngestionMode != nil {
			ingestionMode := *typedInput.Properties.IngestionMode
			components.IngestionMode = &ingestionMode
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		components.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		components.Location = &location
	}

	// Set property ‘Owner’:
	components.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccessForIngestion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForIngestion != nil {
			publicNetworkAccessForIngestion := *typedInput.Properties.PublicNetworkAccessForIngestion
			components.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
		}
	}

	// Set property ‘PublicNetworkAccessForQuery’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccessForQuery != nil {
			publicNetworkAccessForQuery := *typedInput.Properties.PublicNetworkAccessForQuery
			components.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
		}
	}

	// Set property ‘Request_Source’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request_Source != nil {
			request_Source := *typedInput.Properties.Request_Source
			components.Request_Source = &request_Source
		}
	}

	// Set property ‘RetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetentionInDays != nil {
			retentionInDays := *typedInput.Properties.RetentionInDays
			components.RetentionInDays = &retentionInDays
		}
	}

	// Set property ‘SamplingPercentage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SamplingPercentage != nil {
			samplingPercentage := *typedInput.Properties.SamplingPercentage
			components.SamplingPercentage = &samplingPercentage
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		components.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			components.Tags[key] = value
		}
	}

	// no assignment for property ‘WorkspaceResourceReference’

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Components_Spec{}

// ConvertSpecFrom populates our Components_Spec from the provided source
func (components *Components_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200202s.Components_Spec)
	if ok {
		// Populate our instance from source
		return components.AssignProperties_From_Components_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200202s.Components_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = components.AssignProperties_From_Components_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Components_Spec
func (components *Components_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200202s.Components_Spec)
	if ok {
		// Populate destination from our instance
		return components.AssignProperties_To_Components_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200202s.Components_Spec{}
	err := components.AssignProperties_To_Components_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Components_Spec populates our Components_Spec from the provided source Components_Spec
func (components *Components_Spec) AssignProperties_From_Components_Spec(source *v20200202s.Components_Spec) error {

	// Application_Type
	if source.Application_Type != nil {
		application_Type := ApplicationInsightsComponentProperties_Application_Type(*source.Application_Type)
		components.Application_Type = &application_Type
	} else {
		components.Application_Type = nil
	}

	// AzureName
	components.AzureName = source.AzureName

	// DisableIpMasking
	if source.DisableIpMasking != nil {
		disableIpMasking := *source.DisableIpMasking
		components.DisableIpMasking = &disableIpMasking
	} else {
		components.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		components.DisableLocalAuth = &disableLocalAuth
	} else {
		components.DisableLocalAuth = nil
	}

	// Etag
	components.Etag = genruntime.ClonePointerToString(source.Etag)

	// Flow_Type
	if source.Flow_Type != nil {
		flow_Type := ApplicationInsightsComponentProperties_Flow_Type(*source.Flow_Type)
		components.Flow_Type = &flow_Type
	} else {
		components.Flow_Type = nil
	}

	// ForceCustomerStorageForProfiler
	if source.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *source.ForceCustomerStorageForProfiler
		components.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		components.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	components.HockeyAppId = genruntime.ClonePointerToString(source.HockeyAppId)

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		components.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		components.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	if source.IngestionMode != nil {
		ingestionMode := ApplicationInsightsComponentProperties_IngestionMode(*source.IngestionMode)
		components.IngestionMode = &ingestionMode
	} else {
		components.IngestionMode = nil
	}

	// Kind
	components.Kind = genruntime.ClonePointerToString(source.Kind)

	// Location
	components.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		components.Owner = &owner
	} else {
		components.Owner = nil
	}

	// PublicNetworkAccessForIngestion
	if source.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion(*source.PublicNetworkAccessForIngestion)
		components.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		components.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if source.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery(*source.PublicNetworkAccessForQuery)
		components.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		components.PublicNetworkAccessForQuery = nil
	}

	// Request_Source
	if source.Request_Source != nil {
		request_Source := ApplicationInsightsComponentProperties_Request_Source(*source.Request_Source)
		components.Request_Source = &request_Source
	} else {
		components.Request_Source = nil
	}

	// RetentionInDays
	components.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// SamplingPercentage
	if source.SamplingPercentage != nil {
		samplingPercentage := *source.SamplingPercentage
		components.SamplingPercentage = &samplingPercentage
	} else {
		components.SamplingPercentage = nil
	}

	// Tags
	components.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// WorkspaceResourceReference
	if source.WorkspaceResourceReference != nil {
		workspaceResourceReference := source.WorkspaceResourceReference.Copy()
		components.WorkspaceResourceReference = &workspaceResourceReference
	} else {
		components.WorkspaceResourceReference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Components_Spec populates the provided destination Components_Spec from our Components_Spec
func (components *Components_Spec) AssignProperties_To_Components_Spec(destination *v20200202s.Components_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Application_Type
	if components.Application_Type != nil {
		application_Type := string(*components.Application_Type)
		destination.Application_Type = &application_Type
	} else {
		destination.Application_Type = nil
	}

	// AzureName
	destination.AzureName = components.AzureName

	// DisableIpMasking
	if components.DisableIpMasking != nil {
		disableIpMasking := *components.DisableIpMasking
		destination.DisableIpMasking = &disableIpMasking
	} else {
		destination.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if components.DisableLocalAuth != nil {
		disableLocalAuth := *components.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(components.Etag)

	// Flow_Type
	if components.Flow_Type != nil {
		flow_Type := string(*components.Flow_Type)
		destination.Flow_Type = &flow_Type
	} else {
		destination.Flow_Type = nil
	}

	// ForceCustomerStorageForProfiler
	if components.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *components.ForceCustomerStorageForProfiler
		destination.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		destination.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	destination.HockeyAppId = genruntime.ClonePointerToString(components.HockeyAppId)

	// ImmediatePurgeDataOn30Days
	if components.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *components.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	if components.IngestionMode != nil {
		ingestionMode := string(*components.IngestionMode)
		destination.IngestionMode = &ingestionMode
	} else {
		destination.IngestionMode = nil
	}

	// Kind
	destination.Kind = genruntime.ClonePointerToString(components.Kind)

	// Location
	destination.Location = genruntime.ClonePointerToString(components.Location)

	// OriginalVersion
	destination.OriginalVersion = components.OriginalVersion()

	// Owner
	if components.Owner != nil {
		owner := components.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccessForIngestion
	if components.PublicNetworkAccessForIngestion != nil {
		publicNetworkAccessForIngestion := string(*components.PublicNetworkAccessForIngestion)
		destination.PublicNetworkAccessForIngestion = &publicNetworkAccessForIngestion
	} else {
		destination.PublicNetworkAccessForIngestion = nil
	}

	// PublicNetworkAccessForQuery
	if components.PublicNetworkAccessForQuery != nil {
		publicNetworkAccessForQuery := string(*components.PublicNetworkAccessForQuery)
		destination.PublicNetworkAccessForQuery = &publicNetworkAccessForQuery
	} else {
		destination.PublicNetworkAccessForQuery = nil
	}

	// Request_Source
	if components.Request_Source != nil {
		request_Source := string(*components.Request_Source)
		destination.Request_Source = &request_Source
	} else {
		destination.Request_Source = nil
	}

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(components.RetentionInDays)

	// SamplingPercentage
	if components.SamplingPercentage != nil {
		samplingPercentage := *components.SamplingPercentage
		destination.SamplingPercentage = &samplingPercentage
	} else {
		destination.SamplingPercentage = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(components.Tags)

	// WorkspaceResourceReference
	if components.WorkspaceResourceReference != nil {
		workspaceResourceReference := components.WorkspaceResourceReference.Copy()
		destination.WorkspaceResourceReference = &workspaceResourceReference
	} else {
		destination.WorkspaceResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (components *Components_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (components *Components_Spec) SetAzureName(azureName string) { components.AzureName = azureName }

// +kubebuilder:validation:Enum={"other","web"}
type ApplicationInsightsComponentProperties_Application_Type string

const (
	ApplicationInsightsComponentProperties_Application_Type_Other = ApplicationInsightsComponentProperties_Application_Type("other")
	ApplicationInsightsComponentProperties_Application_Type_Web   = ApplicationInsightsComponentProperties_Application_Type("web")
)

// +kubebuilder:validation:Enum={"Bluefield"}
type ApplicationInsightsComponentProperties_Flow_Type string

const ApplicationInsightsComponentProperties_Flow_Type_Bluefield = ApplicationInsightsComponentProperties_Flow_Type("Bluefield")

// +kubebuilder:validation:Enum={"ApplicationInsights","ApplicationInsightsWithDiagnosticSettings","LogAnalytics"}
type ApplicationInsightsComponentProperties_IngestionMode string

const (
	ApplicationInsightsComponentProperties_IngestionMode_ApplicationInsights                       = ApplicationInsightsComponentProperties_IngestionMode("ApplicationInsights")
	ApplicationInsightsComponentProperties_IngestionMode_ApplicationInsightsWithDiagnosticSettings = ApplicationInsightsComponentProperties_IngestionMode("ApplicationInsightsWithDiagnosticSettings")
	ApplicationInsightsComponentProperties_IngestionMode_LogAnalytics                              = ApplicationInsightsComponentProperties_IngestionMode("LogAnalytics")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion string

const (
	ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion_Disabled = ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion("Disabled")
	ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion_Enabled  = ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery string

const (
	ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery_Disabled = ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery("Disabled")
	ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery_Enabled  = ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery("Enabled")
)

// +kubebuilder:validation:Enum={"rest"}
type ApplicationInsightsComponentProperties_Request_Source string

const ApplicationInsightsComponentProperties_Request_Source_Rest = ApplicationInsightsComponentProperties_Request_Source("rest")

type PrivateLinkScopedResource_STATUS struct {
	// ResourceId: The full resource Id of the private link scope resource.
	ResourceId *string `json:"ResourceId,omitempty"`

	// ScopeId: The private link scope unique Identifier.
	ScopeId *string `json:"ScopeId,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateLinkScopedResource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *PrivateLinkScopedResource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateLinkScopedResource_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *PrivateLinkScopedResource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateLinkScopedResource_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateLinkScopedResource_STATUSARM, got %T", armInput)
	}

	// Set property ‘ResourceId’:
	if typedInput.ResourceId != nil {
		resourceId := *typedInput.ResourceId
		resource.ResourceId = &resourceId
	}

	// Set property ‘ScopeId’:
	if typedInput.ScopeId != nil {
		scopeId := *typedInput.ScopeId
		resource.ScopeId = &scopeId
	}

	// No error
	return nil
}

// AssignProperties_From_PrivateLinkScopedResource_STATUS populates our PrivateLinkScopedResource_STATUS from the provided source PrivateLinkScopedResource_STATUS
func (resource *PrivateLinkScopedResource_STATUS) AssignProperties_From_PrivateLinkScopedResource_STATUS(source *v20200202s.PrivateLinkScopedResource_STATUS) error {

	// ResourceId
	resource.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// ScopeId
	resource.ScopeId = genruntime.ClonePointerToString(source.ScopeId)

	// No error
	return nil
}

// AssignProperties_To_PrivateLinkScopedResource_STATUS populates the provided destination PrivateLinkScopedResource_STATUS from our PrivateLinkScopedResource_STATUS
func (resource *PrivateLinkScopedResource_STATUS) AssignProperties_To_PrivateLinkScopedResource_STATUS(destination *v20200202s.PrivateLinkScopedResource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(resource.ResourceId)

	// ScopeId
	destination.ScopeId = genruntime.ClonePointerToString(resource.ScopeId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Component{}, &ComponentList{})
}
