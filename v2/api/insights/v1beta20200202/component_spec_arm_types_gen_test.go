// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200202

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Component_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Component_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComponent_Spec_ARM, Component_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComponent_Spec_ARM runs a test to see if a specific instance of Component_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComponent_Spec_ARM(subject Component_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Component_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Component_Spec_ARM instances for property testing - lazily instantiated by Component_Spec_ARMGenerator()
var component_Spec_ARMGenerator gopter.Gen

// Component_Spec_ARMGenerator returns a generator of Component_Spec_ARM instances for property testing.
// We first initialize component_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Component_Spec_ARMGenerator() gopter.Gen {
	if component_Spec_ARMGenerator != nil {
		return component_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComponent_Spec_ARM(generators)
	component_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Component_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComponent_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForComponent_Spec_ARM(generators)
	component_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Component_Spec_ARM{}), generators)

	return component_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComponent_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComponent_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComponent_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComponent_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationInsightsComponentProperties_ARMGenerator())
}

func Test_ApplicationInsightsComponentProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationInsightsComponentProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationInsightsComponentProperties_ARM, ApplicationInsightsComponentProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationInsightsComponentProperties_ARM runs a test to see if a specific instance of ApplicationInsightsComponentProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationInsightsComponentProperties_ARM(subject ApplicationInsightsComponentProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationInsightsComponentProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationInsightsComponentProperties_ARM instances for property testing - lazily instantiated by
// ApplicationInsightsComponentProperties_ARMGenerator()
var applicationInsightsComponentProperties_ARMGenerator gopter.Gen

// ApplicationInsightsComponentProperties_ARMGenerator returns a generator of ApplicationInsightsComponentProperties_ARM instances for property testing.
func ApplicationInsightsComponentProperties_ARMGenerator() gopter.Gen {
	if applicationInsightsComponentProperties_ARMGenerator != nil {
		return applicationInsightsComponentProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentProperties_ARM(generators)
	applicationInsightsComponentProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponentProperties_ARM{}), generators)

	return applicationInsightsComponentProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationInsightsComponentProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationInsightsComponentProperties_ARM(gens map[string]gopter.Gen) {
	gens["Application_Type"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentProperties_Application_Type_Other, ApplicationInsightsComponentProperties_Application_Type_Web))
	gens["DisableIpMasking"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["Flow_Type"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentProperties_Flow_Type_Bluefield))
	gens["ForceCustomerStorageForProfiler"] = gen.PtrOf(gen.Bool())
	gens["HockeyAppId"] = gen.PtrOf(gen.AlphaString())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
	gens["IngestionMode"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentProperties_IngestionMode_ApplicationInsights, ApplicationInsightsComponentProperties_IngestionMode_ApplicationInsightsWithDiagnosticSettings, ApplicationInsightsComponentProperties_IngestionMode_LogAnalytics))
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion_Disabled, ApplicationInsightsComponentProperties_PublicNetworkAccessForIngestion_Enabled))
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery_Disabled, ApplicationInsightsComponentProperties_PublicNetworkAccessForQuery_Enabled))
	gens["Request_Source"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentProperties_Request_Source_Rest))
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
	gens["SamplingPercentage"] = gen.PtrOf(gen.Float64())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}
