// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_WebTest_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTest_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTest_STATUSARM, WebTest_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTest_STATUSARM runs a test to see if a specific instance of WebTest_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTest_STATUSARM(subject WebTest_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTest_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTest_STATUSARM instances for property testing - lazily instantiated by WebTest_STATUSARMGenerator()
var webTest_STATUSARMGenerator gopter.Gen

// WebTest_STATUSARMGenerator returns a generator of WebTest_STATUSARM instances for property testing.
// We first initialize webTest_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTest_STATUSARMGenerator() gopter.Gen {
	if webTest_STATUSARMGenerator != nil {
		return webTest_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTest_STATUSARM(generators)
	webTest_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTest_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTest_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForWebTest_STATUSARM(generators)
	webTest_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTest_STATUSARM{}), generators)

	return webTest_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTest_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTest_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTest_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTest_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WebTestProperties_STATUSARMGenerator())
}

func Test_WebTestProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_STATUSARM, WebTestProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_STATUSARM runs a test to see if a specific instance of WebTestProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_STATUSARM(subject WebTestProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUSARM instances for property testing - lazily instantiated by
// WebTestProperties_STATUSARMGenerator()
var webTestProperties_STATUSARMGenerator gopter.Gen

// WebTestProperties_STATUSARMGenerator returns a generator of WebTestProperties_STATUSARM instances for property testing.
// We first initialize webTestProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_STATUSARMGenerator() gopter.Gen {
	if webTestProperties_STATUSARMGenerator != nil {
		return webTestProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM(generators)
	webTestProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_STATUSARM(generators)
	webTestProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUSARM{}), generators)

	return webTestProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(
		WebTestProperties_STATUS_Kind_Basic,
		WebTestProperties_STATUS_Kind_Multistep,
		WebTestProperties_STATUS_Kind_Ping,
		WebTestProperties_STATUS_Kind_Standard))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestProperties_STATUS_ConfigurationARMGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocation_STATUSARMGenerator())
	gens["Request"] = gen.PtrOf(WebTestProperties_STATUS_RequestARMGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestProperties_STATUS_ValidationRulesARMGenerator())
}

func Test_WebTestGeolocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocation_STATUSARM, WebTestGeolocation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocation_STATUSARM runs a test to see if a specific instance of WebTestGeolocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocation_STATUSARM(subject WebTestGeolocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_STATUSARM instances for property testing - lazily instantiated by
// WebTestGeolocation_STATUSARMGenerator()
var webTestGeolocation_STATUSARMGenerator gopter.Gen

// WebTestGeolocation_STATUSARMGenerator returns a generator of WebTestGeolocation_STATUSARM instances for property testing.
func WebTestGeolocation_STATUSARMGenerator() gopter.Gen {
	if webTestGeolocation_STATUSARMGenerator != nil {
		return webTestGeolocation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocation_STATUSARM(generators)
	webTestGeolocation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_STATUSARM{}), generators)

	return webTestGeolocation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_STATUS_ConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_ConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_STATUS_ConfigurationARM, WebTestProperties_STATUS_ConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_STATUS_ConfigurationARM runs a test to see if a specific instance of WebTestProperties_STATUS_ConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_STATUS_ConfigurationARM(subject WebTestProperties_STATUS_ConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_ConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_ConfigurationARM instances for property testing - lazily instantiated by
// WebTestProperties_STATUS_ConfigurationARMGenerator()
var webTestProperties_STATUS_ConfigurationARMGenerator gopter.Gen

// WebTestProperties_STATUS_ConfigurationARMGenerator returns a generator of WebTestProperties_STATUS_ConfigurationARM instances for property testing.
func WebTestProperties_STATUS_ConfigurationARMGenerator() gopter.Gen {
	if webTestProperties_STATUS_ConfigurationARMGenerator != nil {
		return webTestProperties_STATUS_ConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ConfigurationARM(generators)
	webTestProperties_STATUS_ConfigurationARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_ConfigurationARM{}), generators)

	return webTestProperties_STATUS_ConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ConfigurationARM(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_STATUS_RequestARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_RequestARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_STATUS_RequestARM, WebTestProperties_STATUS_RequestARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_STATUS_RequestARM runs a test to see if a specific instance of WebTestProperties_STATUS_RequestARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_STATUS_RequestARM(subject WebTestProperties_STATUS_RequestARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_RequestARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_RequestARM instances for property testing - lazily instantiated by
// WebTestProperties_STATUS_RequestARMGenerator()
var webTestProperties_STATUS_RequestARMGenerator gopter.Gen

// WebTestProperties_STATUS_RequestARMGenerator returns a generator of WebTestProperties_STATUS_RequestARM instances for property testing.
// We first initialize webTestProperties_STATUS_RequestARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_STATUS_RequestARMGenerator() gopter.Gen {
	if webTestProperties_STATUS_RequestARMGenerator != nil {
		return webTestProperties_STATUS_RequestARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_RequestARM(generators)
	webTestProperties_STATUS_RequestARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_RequestARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_RequestARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_STATUS_RequestARM(generators)
	webTestProperties_STATUS_RequestARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_RequestARM{}), generators)

	return webTestProperties_STATUS_RequestARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_RequestARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_RequestARM(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_STATUS_RequestARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_STATUS_RequestARM(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderField_STATUSARMGenerator())
}

func Test_WebTestProperties_STATUS_ValidationRulesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_ValidationRulesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_STATUS_ValidationRulesARM, WebTestProperties_STATUS_ValidationRulesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_STATUS_ValidationRulesARM runs a test to see if a specific instance of WebTestProperties_STATUS_ValidationRulesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_STATUS_ValidationRulesARM(subject WebTestProperties_STATUS_ValidationRulesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_ValidationRulesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_ValidationRulesARM instances for property testing - lazily instantiated by
// WebTestProperties_STATUS_ValidationRulesARMGenerator()
var webTestProperties_STATUS_ValidationRulesARMGenerator gopter.Gen

// WebTestProperties_STATUS_ValidationRulesARMGenerator returns a generator of WebTestProperties_STATUS_ValidationRulesARM instances for property testing.
// We first initialize webTestProperties_STATUS_ValidationRulesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_STATUS_ValidationRulesARMGenerator() gopter.Gen {
	if webTestProperties_STATUS_ValidationRulesARMGenerator != nil {
		return webTestProperties_STATUS_ValidationRulesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ValidationRulesARM(generators)
	webTestProperties_STATUS_ValidationRulesARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_ValidationRulesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ValidationRulesARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_STATUS_ValidationRulesARM(generators)
	webTestProperties_STATUS_ValidationRulesARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_ValidationRulesARM{}), generators)

	return webTestProperties_STATUS_ValidationRulesARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ValidationRulesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ValidationRulesARM(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_STATUS_ValidationRulesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_STATUS_ValidationRulesARM(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator())
}

func Test_HeaderField_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderField_STATUSARM, HeaderField_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderField_STATUSARM runs a test to see if a specific instance of HeaderField_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderField_STATUSARM(subject HeaderField_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_STATUSARM instances for property testing - lazily instantiated by
// HeaderField_STATUSARMGenerator()
var headerField_STATUSARMGenerator gopter.Gen

// HeaderField_STATUSARMGenerator returns a generator of HeaderField_STATUSARM instances for property testing.
func HeaderField_STATUSARMGenerator() gopter.Gen {
	if headerField_STATUSARMGenerator != nil {
		return headerField_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderField_STATUSARM(generators)
	headerField_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HeaderField_STATUSARM{}), generators)

	return headerField_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderField_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderField_STATUSARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_STATUS_ValidationRules_ContentValidationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_ValidationRules_ContentValidationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_STATUS_ValidationRules_ContentValidationARM, WebTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_STATUS_ValidationRules_ContentValidationARM runs a test to see if a specific instance of WebTestProperties_STATUS_ValidationRules_ContentValidationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_STATUS_ValidationRules_ContentValidationARM(subject WebTestProperties_STATUS_ValidationRules_ContentValidationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_ValidationRules_ContentValidationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_ValidationRules_ContentValidationARM instances for property testing - lazily
// instantiated by WebTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator()
var webTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator gopter.Gen

// WebTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator returns a generator of WebTestProperties_STATUS_ValidationRules_ContentValidationARM instances for property testing.
func WebTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator() gopter.Gen {
	if webTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator != nil {
		return webTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ValidationRules_ContentValidationARM(generators)
	webTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_ValidationRules_ContentValidationARM{}), generators)

	return webTestProperties_STATUS_ValidationRules_ContentValidationARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ValidationRules_ContentValidationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_STATUS_ValidationRules_ContentValidationARM(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}
