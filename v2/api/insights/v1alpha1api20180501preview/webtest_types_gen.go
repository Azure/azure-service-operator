// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
type Webtest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Webtests_SPEC  `json:"spec,omitempty"`
	Status            WebTest_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Webtest{}

// GetConditions returns the conditions of the resource
func (webtest *Webtest) GetConditions() conditions.Conditions {
	return webtest.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (webtest *Webtest) SetConditions(conditions conditions.Conditions) {
	webtest.Status.Conditions = conditions
}

var _ conversion.Convertible = &Webtest{}

// ConvertFrom populates our Webtest from the provided hub Webtest
func (webtest *Webtest) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20180501previewstorage.Webtest)
	if !ok {
		return fmt.Errorf("expected storage:insights/v1alpha1api20180501previewstorage/Webtest but received %T instead", hub)
	}

	return webtest.AssignPropertiesFromWebtest(source)
}

// ConvertTo populates the provided hub Webtest from our Webtest
func (webtest *Webtest) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20180501previewstorage.Webtest)
	if !ok {
		return fmt.Errorf("expected storage:insights/v1alpha1api20180501previewstorage/Webtest but received %T instead", hub)
	}

	return webtest.AssignPropertiesToWebtest(destination)
}

// +kubebuilder:webhook:path=/mutate-insights-azure-com-v1alpha1api20180501preview-webtest,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=webtests,verbs=create;update,versions=v1alpha1api20180501preview,name=default.v1alpha1api20180501preview.webtests.insights.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Webtest{}

// Default applies defaults to the Webtest resource
func (webtest *Webtest) Default() {
	webtest.defaultImpl()
	var temp interface{} = webtest
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (webtest *Webtest) defaultAzureName() {
	if webtest.Spec.AzureName == "" {
		webtest.Spec.AzureName = webtest.Name
	}
}

// defaultImpl applies the code generated defaults to the Webtest resource
func (webtest *Webtest) defaultImpl() { webtest.defaultAzureName() }

var _ genruntime.KubernetesResource = &Webtest{}

// AzureName returns the Azure name of the resource
func (webtest *Webtest) AzureName() string {
	return webtest.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-05-01"
func (webtest Webtest) GetAPIVersion() string {
	return "2018-05-01"
}

// GetResourceKind returns the kind of the resource
func (webtest *Webtest) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (webtest *Webtest) GetSpec() genruntime.ConvertibleSpec {
	return &webtest.Spec
}

// GetStatus returns the status of this resource
func (webtest *Webtest) GetStatus() genruntime.ConvertibleStatus {
	return &webtest.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (webtest *Webtest) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (webtest *Webtest) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &WebTest_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (webtest *Webtest) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(webtest.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  webtest.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (webtest *Webtest) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*WebTest_Status); ok {
		webtest.Status = *st
		return nil
	}

	// Convert status to required version
	var st WebTest_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	webtest.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-insights-azure-com-v1alpha1api20180501preview-webtest,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=webtests,verbs=create;update,versions=v1alpha1api20180501preview,name=validate.v1alpha1api20180501preview.webtests.insights.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Webtest{}

// ValidateCreate validates the creation of the resource
func (webtest *Webtest) ValidateCreate() error {
	validations := webtest.createValidations()
	var temp interface{} = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (webtest *Webtest) ValidateDelete() error {
	validations := webtest.deleteValidations()
	var temp interface{} = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (webtest *Webtest) ValidateUpdate(old runtime.Object) error {
	validations := webtest.updateValidations()
	var temp interface{} = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (webtest *Webtest) createValidations() []func() error {
	return []func() error{webtest.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (webtest *Webtest) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (webtest *Webtest) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return webtest.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (webtest *Webtest) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&webtest.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromWebtest populates our Webtest from the provided source Webtest
func (webtest *Webtest) AssignPropertiesFromWebtest(source *v1alpha1api20180501previewstorage.Webtest) error {

	// ObjectMeta
	webtest.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Webtests_SPEC
	err := spec.AssignPropertiesFromWebtestsSPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWebtestsSPEC() to populate field Spec")
	}
	webtest.Spec = spec

	// Status
	var status WebTest_Status
	err = status.AssignPropertiesFromWebTestStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWebTestStatus() to populate field Status")
	}
	webtest.Status = status

	// No error
	return nil
}

// AssignPropertiesToWebtest populates the provided destination Webtest from our Webtest
func (webtest *Webtest) AssignPropertiesToWebtest(destination *v1alpha1api20180501previewstorage.Webtest) error {

	// ObjectMeta
	destination.ObjectMeta = *webtest.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20180501previewstorage.Webtests_SPEC
	err := webtest.Spec.AssignPropertiesToWebtestsSPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWebtestsSPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20180501previewstorage.WebTest_Status
	err = webtest.Status.AssignPropertiesToWebTestStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWebTestStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (webtest *Webtest) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: webtest.Spec.OriginalVersion(),
		Kind:    "Webtest",
	}
}

// +kubebuilder:object:root=true
type WebtestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Webtest `json:"items"`
}

// +kubebuilder:validation:Enum={"2018-05-01"}
type TheVersion string

const TheVersionFixedApiVersion = TheVersion("2018-05-01")

type WebTest_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Configuration: An XML configuration specification for a WebTest.
	Configuration *WebTestProperties_Status_Configuration `json:"Configuration,omitempty"`

	//Description: User defined description for this WebTest.
	Description *string `json:"Description,omitempty"`

	//Enabled: Is the test actively being monitored.
	Enabled *bool `json:"Enabled,omitempty"`

	//Frequency: Interval in seconds between test runs for this WebTest. Default value
	//is 300.
	Frequency *int `json:"Frequency,omitempty"`

	//Id: Azure resource Id
	Id *string `json:"id,omitempty"`

	//Kind: The kind of web test this is, valid choices are ping, multistep, basic,
	//and standard.
	Kind *WebTestPropertiesStatusKind `json:"Kind,omitempty"`

	//Location: Resource location
	Location *string `json:"location,omitempty"`

	//Locations: A list of where to physically run the tests from to give global
	//coverage for accessibility of your application.
	Locations []WebTestGeolocation_Status `json:"Locations,omitempty"`

	//Name: Azure resource name
	Name *string `json:"name,omitempty"`

	//PropertiesName: User defined name if this WebTest.
	PropertiesName *string `json:"properties_name,omitempty"`

	//ProvisioningState: Current state of this component, whether or not is has been
	//provisioned within the resource group it is defined. Users cannot change this
	//value but are able to read from it. Values will include Succeeded, Deploying,
	//Canceled, and Failed.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Request: The collection of request properties
	Request *WebTestProperties_Status_Request `json:"Request,omitempty"`

	//RetryEnabled: Allow for retries should this WebTest fail.
	RetryEnabled *bool `json:"RetryEnabled,omitempty"`

	//SyntheticMonitorId: Unique ID of this WebTest. This is typically the same value
	//as the Name field.
	SyntheticMonitorId *string `json:"SyntheticMonitorId,omitempty"`

	//Tags: Resource tags
	Tags *v1.JSON `json:"tags,omitempty"`

	//Timeout: Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout *int `json:"Timeout,omitempty"`

	//Type: Azure resource type
	Type *string `json:"type,omitempty"`

	//ValidationRules: The collection of validation rule properties
	ValidationRules *WebTestProperties_Status_ValidationRules `json:"ValidationRules,omitempty"`
}

var _ genruntime.ConvertibleStatus = &WebTest_Status{}

// ConvertStatusFrom populates our WebTest_Status from the provided source
func (test *WebTest_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20180501previewstorage.WebTest_Status)
	if ok {
		// Populate our instance from source
		return test.AssignPropertiesFromWebTestStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20180501previewstorage.WebTest_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = test.AssignPropertiesFromWebTestStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our WebTest_Status
func (test *WebTest_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20180501previewstorage.WebTest_Status)
	if ok {
		// Populate destination from our instance
		return test.AssignPropertiesToWebTestStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20180501previewstorage.WebTest_Status{}
	err := test.AssignPropertiesToWebTestStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &WebTest_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (test *WebTest_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTest_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (test *WebTest_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTest_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTest_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Configuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Configuration != nil {
			var configuration1 WebTestProperties_Status_Configuration
			err := configuration1.PopulateFromARM(owner, *typedInput.Properties.Configuration)
			if err != nil {
				return err
			}
			configuration := configuration1
			test.Configuration = &configuration
		}
	}

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			test.Description = &description
		}
	}

	// Set property ‘Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			test.Enabled = &enabled
		}
	}

	// Set property ‘Frequency’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Frequency != nil {
			frequency := *typedInput.Properties.Frequency
			test.Frequency = &frequency
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		test.Id = &id
	}

	// Set property ‘Kind’:
	// copying flattened property:
	if typedInput.Properties != nil {
		test.Kind = &typedInput.Properties.Kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		test.Location = &location
	}

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 WebTestGeolocation_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			test.Locations = append(test.Locations, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		test.Name = &name
	}

	// Set property ‘PropertiesName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		test.PropertiesName = &typedInput.Properties.Name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			test.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Request’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request != nil {
			var request1 WebTestProperties_Status_Request
			err := request1.PopulateFromARM(owner, *typedInput.Properties.Request)
			if err != nil {
				return err
			}
			request := request1
			test.Request = &request
		}
	}

	// Set property ‘RetryEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryEnabled != nil {
			retryEnabled := *typedInput.Properties.RetryEnabled
			test.RetryEnabled = &retryEnabled
		}
	}

	// Set property ‘SyntheticMonitorId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		test.SyntheticMonitorId = &typedInput.Properties.SyntheticMonitorId
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		tags := *(*typedInput.Tags).DeepCopy()
		test.Tags = &tags
	}

	// Set property ‘Timeout’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Timeout != nil {
			timeout := *typedInput.Properties.Timeout
			test.Timeout = &timeout
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		test.Type = &typeVar
	}

	// Set property ‘ValidationRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ValidationRules != nil {
			var validationRules1 WebTestProperties_Status_ValidationRules
			err := validationRules1.PopulateFromARM(owner, *typedInput.Properties.ValidationRules)
			if err != nil {
				return err
			}
			validationRules := validationRules1
			test.ValidationRules = &validationRules
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestStatus populates our WebTest_Status from the provided source WebTest_Status
func (test *WebTest_Status) AssignPropertiesFromWebTestStatus(source *v1alpha1api20180501previewstorage.WebTest_Status) error {

	// Conditions
	test.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestProperties_Status_Configuration
		err := configuration.AssignPropertiesFromWebTestPropertiesStatusConfiguration(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesStatusConfiguration() to populate field Configuration")
		}
		test.Configuration = &configuration
	} else {
		test.Configuration = nil
	}

	// Description
	test.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		test.Enabled = &enabled
	} else {
		test.Enabled = nil
	}

	// Frequency
	test.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Id
	test.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	if source.Kind != nil {
		kind := WebTestPropertiesStatusKind(*source.Kind)
		test.Kind = &kind
	} else {
		test.Kind = nil
	}

	// Location
	test.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation_Status, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation_Status
			err := location.AssignPropertiesFromWebTestGeolocationStatus(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromWebTestGeolocationStatus() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		test.Locations = locationList
	} else {
		test.Locations = nil
	}

	// Name
	test.Name = genruntime.ClonePointerToString(source.Name)

	// PropertiesName
	test.PropertiesName = genruntime.ClonePointerToString(source.PropertiesName)

	// ProvisioningState
	test.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Request
	if source.Request != nil {
		var request WebTestProperties_Status_Request
		err := request.AssignPropertiesFromWebTestPropertiesStatusRequest(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesStatusRequest() to populate field Request")
		}
		test.Request = &request
	} else {
		test.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		test.RetryEnabled = &retryEnabled
	} else {
		test.RetryEnabled = nil
	}

	// SyntheticMonitorId
	test.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	if source.Tags != nil {
		tag := *source.Tags.DeepCopy()
		test.Tags = &tag
	} else {
		test.Tags = nil
	}

	// Timeout
	test.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// Type
	test.Type = genruntime.ClonePointerToString(source.Type)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestProperties_Status_ValidationRules
		err := validationRule.AssignPropertiesFromWebTestPropertiesStatusValidationRules(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesStatusValidationRules() to populate field ValidationRules")
		}
		test.ValidationRules = &validationRule
	} else {
		test.ValidationRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestStatus populates the provided destination WebTest_Status from our WebTest_Status
func (test *WebTest_Status) AssignPropertiesToWebTestStatus(destination *v1alpha1api20180501previewstorage.WebTest_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(test.Conditions)

	// Configuration
	if test.Configuration != nil {
		var configuration v1alpha1api20180501previewstorage.WebTestProperties_Status_Configuration
		err := test.Configuration.AssignPropertiesToWebTestPropertiesStatusConfiguration(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesStatusConfiguration() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(test.Description)

	// Enabled
	if test.Enabled != nil {
		enabled := *test.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(test.Frequency)

	// Id
	destination.Id = genruntime.ClonePointerToString(test.Id)

	// Kind
	if test.Kind != nil {
		kind := string(*test.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(test.Location)

	// Locations
	if test.Locations != nil {
		locationList := make([]v1alpha1api20180501previewstorage.WebTestGeolocation_Status, len(test.Locations))
		for locationIndex, locationItem := range test.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1alpha1api20180501previewstorage.WebTestGeolocation_Status
			err := locationItem.AssignPropertiesToWebTestGeolocationStatus(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToWebTestGeolocationStatus() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(test.Name)

	// PropertiesName
	destination.PropertiesName = genruntime.ClonePointerToString(test.PropertiesName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(test.ProvisioningState)

	// Request
	if test.Request != nil {
		var request v1alpha1api20180501previewstorage.WebTestProperties_Status_Request
		err := test.Request.AssignPropertiesToWebTestPropertiesStatusRequest(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesStatusRequest() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if test.RetryEnabled != nil {
		retryEnabled := *test.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(test.SyntheticMonitorId)

	// Tags
	if test.Tags != nil {
		tag := *test.Tags.DeepCopy()
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(test.Timeout)

	// Type
	destination.Type = genruntime.ClonePointerToString(test.Type)

	// ValidationRules
	if test.ValidationRules != nil {
		var validationRule v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules
		err := test.ValidationRules.AssignPropertiesToWebTestPropertiesStatusValidationRules(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesStatusValidationRules() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Webtests_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Configuration: An XML configuration specification for a WebTest.
	Configuration *WebTestProperties_Spec_Configuration `json:"Configuration,omitempty"`

	//Description: User defined description for this WebTest.
	Description *string `json:"Description,omitempty"`

	//Enabled: Is the test actively being monitored.
	Enabled *bool `json:"Enabled,omitempty"`

	//Frequency: Interval in seconds between test runs for this WebTest. Default value
	//is 300.
	Frequency *int `json:"Frequency,omitempty"`

	//Kind: The kind of web test this is, valid choices are ping, multistep, basic,
	//and standard.
	Kind *WebTestPropertiesSpecKind `json:"Kind,omitempty"`

	// +kubebuilder:validation:Required
	//Location: Resource location
	Location string `json:"location"`

	//Locations: A list of where to physically run the tests from to give global
	//coverage for accessibility of your application.
	Locations []WebTestGeolocation_Spec `json:"Locations,omitempty"`

	//Name: User defined name if this WebTest.
	Name *string `json:"Name,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Request: The collection of request properties
	Request *WebTestProperties_Spec_Request `json:"Request,omitempty"`

	//RetryEnabled: Allow for retries should this WebTest fail.
	RetryEnabled *bool `json:"RetryEnabled,omitempty"`

	//SyntheticMonitorId: Unique ID of this WebTest. This is typically the same value
	//as the Name field.
	SyntheticMonitorId *string `json:"SyntheticMonitorId,omitempty"`

	//Tags: Resource tags
	Tags *v1.JSON `json:"tags,omitempty"`

	//Timeout: Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout *int `json:"Timeout,omitempty"`

	//ValidationRules: The collection of validation rule properties
	ValidationRules *WebTestProperties_Spec_ValidationRules `json:"ValidationRules,omitempty"`
}

var _ genruntime.ARMTransformer = &Webtests_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *Webtests_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result Webtests_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Location’:
	result.Location = spec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.Configuration != nil ||
		spec.Description != nil ||
		spec.Enabled != nil ||
		spec.Frequency != nil ||
		spec.Kind != nil ||
		spec.Locations != nil ||
		spec.Name != nil ||
		spec.Request != nil ||
		spec.RetryEnabled != nil ||
		spec.SyntheticMonitorId != nil ||
		spec.Timeout != nil ||
		spec.ValidationRules != nil {
		result.Properties = &WebTestProperties_SpecARM{}
	}
	if spec.Configuration != nil {
		configurationARM, err := (*spec.Configuration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		configuration := configurationARM.(WebTestProperties_Spec_ConfigurationARM)
		result.Properties.Configuration = &configuration
	}
	if spec.Description != nil {
		description := *spec.Description
		result.Properties.Description = &description
	}
	if spec.Enabled != nil {
		enabled := *spec.Enabled
		result.Properties.Enabled = &enabled
	}
	if spec.Frequency != nil {
		frequency := *spec.Frequency
		result.Properties.Frequency = &frequency
	}
	if spec.Kind != nil {
		result.Properties.Kind = *spec.Kind
	}
	for _, item := range spec.Locations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Locations = append(result.Properties.Locations, itemARM.(WebTestGeolocation_SpecARM))
	}
	if spec.Name != nil {
		result.Properties.Name = *spec.Name
	}
	if spec.Request != nil {
		requestARM, err := (*spec.Request).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		request := requestARM.(WebTestProperties_Spec_RequestARM)
		result.Properties.Request = &request
	}
	if spec.RetryEnabled != nil {
		retryEnabled := *spec.RetryEnabled
		result.Properties.RetryEnabled = &retryEnabled
	}
	if spec.SyntheticMonitorId != nil {
		result.Properties.SyntheticMonitorId = *spec.SyntheticMonitorId
	}
	if spec.Timeout != nil {
		timeout := *spec.Timeout
		result.Properties.Timeout = &timeout
	}
	if spec.ValidationRules != nil {
		validationRulesARM, err := (*spec.ValidationRules).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		validationRules := validationRulesARM.(WebTestProperties_Spec_ValidationRulesARM)
		result.Properties.ValidationRules = &validationRules
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		tags := *(*spec.Tags).DeepCopy()
		result.Tags = &tags
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *Webtests_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Webtests_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *Webtests_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Webtests_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Webtests_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Configuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Configuration != nil {
			var configuration1 WebTestProperties_Spec_Configuration
			err := configuration1.PopulateFromARM(owner, *typedInput.Properties.Configuration)
			if err != nil {
				return err
			}
			configuration := configuration1
			spec.Configuration = &configuration
		}
	}

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			spec.Description = &description
		}
	}

	// Set property ‘Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			spec.Enabled = &enabled
		}
	}

	// Set property ‘Frequency’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Frequency != nil {
			frequency := *typedInput.Properties.Frequency
			spec.Frequency = &frequency
		}
	}

	// Set property ‘Kind’:
	// copying flattened property:
	if typedInput.Properties != nil {
		spec.Kind = &typedInput.Properties.Kind
	}

	// Set property ‘Location’:
	spec.Location = typedInput.Location

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 WebTestGeolocation_Spec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			spec.Locations = append(spec.Locations, item1)
		}
	}

	// Set property ‘Name’:
	// copying flattened property:
	if typedInput.Properties != nil {
		spec.Name = &typedInput.Properties.Name
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Request’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request != nil {
			var request1 WebTestProperties_Spec_Request
			err := request1.PopulateFromARM(owner, *typedInput.Properties.Request)
			if err != nil {
				return err
			}
			request := request1
			spec.Request = &request
		}
	}

	// Set property ‘RetryEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryEnabled != nil {
			retryEnabled := *typedInput.Properties.RetryEnabled
			spec.RetryEnabled = &retryEnabled
		}
	}

	// Set property ‘SyntheticMonitorId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		spec.SyntheticMonitorId = &typedInput.Properties.SyntheticMonitorId
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		tags := *(*typedInput.Tags).DeepCopy()
		spec.Tags = &tags
	}

	// Set property ‘Timeout’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Timeout != nil {
			timeout := *typedInput.Properties.Timeout
			spec.Timeout = &timeout
		}
	}

	// Set property ‘ValidationRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ValidationRules != nil {
			var validationRules1 WebTestProperties_Spec_ValidationRules
			err := validationRules1.PopulateFromARM(owner, *typedInput.Properties.ValidationRules)
			if err != nil {
				return err
			}
			validationRules := validationRules1
			spec.ValidationRules = &validationRules
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Webtests_SPEC{}

// ConvertSpecFrom populates our Webtests_SPEC from the provided source
func (spec *Webtests_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20180501previewstorage.Webtests_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromWebtestsSPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20180501previewstorage.Webtests_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromWebtestsSPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Webtests_SPEC
func (spec *Webtests_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20180501previewstorage.Webtests_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToWebtestsSPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20180501previewstorage.Webtests_SPEC{}
	err := spec.AssignPropertiesToWebtestsSPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromWebtestsSPEC populates our Webtests_SPEC from the provided source Webtests_SPEC
func (spec *Webtests_SPEC) AssignPropertiesFromWebtestsSPEC(source *v1alpha1api20180501previewstorage.Webtests_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestProperties_Spec_Configuration
		err := configuration.AssignPropertiesFromWebTestPropertiesSpecConfiguration(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesSpecConfiguration() to populate field Configuration")
		}
		spec.Configuration = &configuration
	} else {
		spec.Configuration = nil
	}

	// Description
	spec.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		spec.Enabled = &enabled
	} else {
		spec.Enabled = nil
	}

	// Frequency
	spec.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Kind
	if source.Kind != nil {
		kind := WebTestPropertiesSpecKind(*source.Kind)
		spec.Kind = &kind
	} else {
		spec.Kind = nil
	}

	// Location
	spec.Location = genruntime.GetOptionalStringValue(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation_Spec, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation_Spec
			err := location.AssignPropertiesFromWebTestGeolocationSpec(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromWebTestGeolocationSpec() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		spec.Locations = locationList
	} else {
		spec.Locations = nil
	}

	// Name
	spec.Name = genruntime.ClonePointerToString(source.Name)

	// Owner
	spec.Owner = source.Owner.Copy()

	// Request
	if source.Request != nil {
		var request WebTestProperties_Spec_Request
		err := request.AssignPropertiesFromWebTestPropertiesSpecRequest(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesSpecRequest() to populate field Request")
		}
		spec.Request = &request
	} else {
		spec.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		spec.RetryEnabled = &retryEnabled
	} else {
		spec.RetryEnabled = nil
	}

	// SyntheticMonitorId
	spec.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	if source.Tags != nil {
		tag := *source.Tags.DeepCopy()
		spec.Tags = &tag
	} else {
		spec.Tags = nil
	}

	// Timeout
	spec.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestProperties_Spec_ValidationRules
		err := validationRule.AssignPropertiesFromWebTestPropertiesSpecValidationRules(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesSpecValidationRules() to populate field ValidationRules")
		}
		spec.ValidationRules = &validationRule
	} else {
		spec.ValidationRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebtestsSPEC populates the provided destination Webtests_SPEC from our Webtests_SPEC
func (spec *Webtests_SPEC) AssignPropertiesToWebtestsSPEC(destination *v1alpha1api20180501previewstorage.Webtests_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// Configuration
	if spec.Configuration != nil {
		var configuration v1alpha1api20180501previewstorage.WebTestProperties_Spec_Configuration
		err := spec.Configuration.AssignPropertiesToWebTestPropertiesSpecConfiguration(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesSpecConfiguration() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(spec.Description)

	// Enabled
	if spec.Enabled != nil {
		enabled := *spec.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(spec.Frequency)

	// Kind
	if spec.Kind != nil {
		kind := string(*spec.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	location := spec.Location
	destination.Location = &location

	// Locations
	if spec.Locations != nil {
		locationList := make([]v1alpha1api20180501previewstorage.WebTestGeolocation_Spec, len(spec.Locations))
		for locationIndex, locationItem := range spec.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var locationLocal v1alpha1api20180501previewstorage.WebTestGeolocation_Spec
			err := locationItem.AssignPropertiesToWebTestGeolocationSpec(&locationLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToWebTestGeolocationSpec() to populate field Locations")
			}
			locationList[locationIndex] = locationLocal
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(spec.Name)

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// Request
	if spec.Request != nil {
		var request v1alpha1api20180501previewstorage.WebTestProperties_Spec_Request
		err := spec.Request.AssignPropertiesToWebTestPropertiesSpecRequest(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesSpecRequest() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if spec.RetryEnabled != nil {
		retryEnabled := *spec.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(spec.SyntheticMonitorId)

	// Tags
	if spec.Tags != nil {
		tag := *spec.Tags.DeepCopy()
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(spec.Timeout)

	// ValidationRules
	if spec.ValidationRules != nil {
		var validationRule v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules
		err := spec.ValidationRules.AssignPropertiesToWebTestPropertiesSpecValidationRules(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesSpecValidationRules() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *Webtests_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *Webtests_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type WebTestGeolocation_Spec struct {
	//Id: Location ID for the WebTest to run from.
	Id *string `json:"Id,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestGeolocation_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (geolocation *WebTestGeolocation_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if geolocation == nil {
		return nil, nil
	}
	var result WebTestGeolocation_SpecARM

	// Set property ‘Id’:
	if geolocation.Id != nil {
		id := *geolocation.Id
		result.Id = &id
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (geolocation *WebTestGeolocation_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestGeolocation_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (geolocation *WebTestGeolocation_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestGeolocation_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestGeolocation_SpecARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		geolocation.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestGeolocationSpec populates our WebTestGeolocation_Spec from the provided source WebTestGeolocation_Spec
func (geolocation *WebTestGeolocation_Spec) AssignPropertiesFromWebTestGeolocationSpec(source *v1alpha1api20180501previewstorage.WebTestGeolocation_Spec) error {

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToWebTestGeolocationSpec populates the provided destination WebTestGeolocation_Spec from our WebTestGeolocation_Spec
func (geolocation *WebTestGeolocation_Spec) AssignPropertiesToWebTestGeolocationSpec(destination *v1alpha1api20180501previewstorage.WebTestGeolocation_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestGeolocation_Status struct {
	//Id: Location ID for the WebTest to run from.
	Id *string `json:"Id,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestGeolocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (geolocation *WebTestGeolocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestGeolocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (geolocation *WebTestGeolocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestGeolocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestGeolocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		geolocation.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestGeolocationStatus populates our WebTestGeolocation_Status from the provided source WebTestGeolocation_Status
func (geolocation *WebTestGeolocation_Status) AssignPropertiesFromWebTestGeolocationStatus(source *v1alpha1api20180501previewstorage.WebTestGeolocation_Status) error {

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToWebTestGeolocationStatus populates the provided destination WebTestGeolocation_Status from our WebTestGeolocation_Status
func (geolocation *WebTestGeolocation_Status) AssignPropertiesToWebTestGeolocationStatus(destination *v1alpha1api20180501previewstorage.WebTestGeolocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"basic","multistep","ping","standard"}
type WebTestPropertiesSpecKind string

const (
	WebTestPropertiesSpecKindBasic     = WebTestPropertiesSpecKind("basic")
	WebTestPropertiesSpecKindMultistep = WebTestPropertiesSpecKind("multistep")
	WebTestPropertiesSpecKindPing      = WebTestPropertiesSpecKind("ping")
	WebTestPropertiesSpecKindStandard  = WebTestPropertiesSpecKind("standard")
)

type WebTestProperties_Spec_Configuration struct {
	//WebTest: The XML specification of a WebTest to run against an application.
	WebTest *string `json:"WebTest,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_Spec_Configuration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *WebTestProperties_Spec_Configuration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result WebTestProperties_Spec_ConfigurationARM

	// Set property ‘WebTest’:
	if configuration.WebTest != nil {
		webTest := *configuration.WebTest
		result.WebTest = &webTest
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WebTestProperties_Spec_Configuration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Spec_ConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WebTestProperties_Spec_Configuration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Spec_ConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Spec_ConfigurationARM, got %T", armInput)
	}

	// Set property ‘WebTest’:
	if typedInput.WebTest != nil {
		webTest := *typedInput.WebTest
		configuration.WebTest = &webTest
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesSpecConfiguration populates our WebTestProperties_Spec_Configuration from the provided source WebTestProperties_Spec_Configuration
func (configuration *WebTestProperties_Spec_Configuration) AssignPropertiesFromWebTestPropertiesSpecConfiguration(source *v1alpha1api20180501previewstorage.WebTestProperties_Spec_Configuration) error {

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesSpecConfiguration populates the provided destination WebTestProperties_Spec_Configuration from our WebTestProperties_Spec_Configuration
func (configuration *WebTestProperties_Spec_Configuration) AssignPropertiesToWebTestPropertiesSpecConfiguration(destination *v1alpha1api20180501previewstorage.WebTestProperties_Spec_Configuration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_Spec_Request struct {
	//FollowRedirects: Follow redirects for this web test.
	FollowRedirects *bool `json:"FollowRedirects,omitempty"`

	//Headers: List of headers and their values to add to the WebTest call.
	Headers []HeaderField_Spec `json:"Headers,omitempty"`

	//HttpVerb: Http verb to use for this web test.
	HttpVerb *string `json:"HttpVerb,omitempty"`

	//ParseDependentRequests: Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `json:"ParseDependentRequests,omitempty"`

	//RequestBody: Base64 encoded string body to send with this web test.
	RequestBody *string `json:"RequestBody,omitempty"`

	//RequestUrl: Url location to test.
	RequestUrl *string `json:"RequestUrl,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_Spec_Request{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (request *WebTestProperties_Spec_Request) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if request == nil {
		return nil, nil
	}
	var result WebTestProperties_Spec_RequestARM

	// Set property ‘FollowRedirects’:
	if request.FollowRedirects != nil {
		followRedirects := *request.FollowRedirects
		result.FollowRedirects = &followRedirects
	}

	// Set property ‘Headers’:
	for _, item := range request.Headers {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Headers = append(result.Headers, itemARM.(HeaderField_SpecARM))
	}

	// Set property ‘HttpVerb’:
	if request.HttpVerb != nil {
		httpVerb := *request.HttpVerb
		result.HttpVerb = &httpVerb
	}

	// Set property ‘ParseDependentRequests’:
	if request.ParseDependentRequests != nil {
		parseDependentRequests := *request.ParseDependentRequests
		result.ParseDependentRequests = &parseDependentRequests
	}

	// Set property ‘RequestBody’:
	if request.RequestBody != nil {
		requestBody := *request.RequestBody
		result.RequestBody = &requestBody
	}

	// Set property ‘RequestUrl’:
	if request.RequestUrl != nil {
		requestUrl := *request.RequestUrl
		result.RequestUrl = &requestUrl
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (request *WebTestProperties_Spec_Request) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Spec_RequestARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (request *WebTestProperties_Spec_Request) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Spec_RequestARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Spec_RequestARM, got %T", armInput)
	}

	// Set property ‘FollowRedirects’:
	if typedInput.FollowRedirects != nil {
		followRedirects := *typedInput.FollowRedirects
		request.FollowRedirects = &followRedirects
	}

	// Set property ‘Headers’:
	for _, item := range typedInput.Headers {
		var item1 HeaderField_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		request.Headers = append(request.Headers, item1)
	}

	// Set property ‘HttpVerb’:
	if typedInput.HttpVerb != nil {
		httpVerb := *typedInput.HttpVerb
		request.HttpVerb = &httpVerb
	}

	// Set property ‘ParseDependentRequests’:
	if typedInput.ParseDependentRequests != nil {
		parseDependentRequests := *typedInput.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequests
	}

	// Set property ‘RequestBody’:
	if typedInput.RequestBody != nil {
		requestBody := *typedInput.RequestBody
		request.RequestBody = &requestBody
	}

	// Set property ‘RequestUrl’:
	if typedInput.RequestUrl != nil {
		requestUrl := *typedInput.RequestUrl
		request.RequestUrl = &requestUrl
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesSpecRequest populates our WebTestProperties_Spec_Request from the provided source WebTestProperties_Spec_Request
func (request *WebTestProperties_Spec_Request) AssignPropertiesFromWebTestPropertiesSpecRequest(source *v1alpha1api20180501previewstorage.WebTestProperties_Spec_Request) error {

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField_Spec, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField_Spec
			err := header.AssignPropertiesFromHeaderFieldSpec(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromHeaderFieldSpec() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesSpecRequest populates the provided destination WebTestProperties_Spec_Request from our WebTestProperties_Spec_Request
func (request *WebTestProperties_Spec_Request) AssignPropertiesToWebTestPropertiesSpecRequest(destination *v1alpha1api20180501previewstorage.WebTestProperties_Spec_Request) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v1alpha1api20180501previewstorage.HeaderField_Spec, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v1alpha1api20180501previewstorage.HeaderField_Spec
			err := headerItem.AssignPropertiesToHeaderFieldSpec(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToHeaderFieldSpec() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_Spec_ValidationRules struct {
	//ContentValidation: The collection of content validation properties
	ContentValidation *WebTestProperties_Spec_ValidationRules_ContentValidation `json:"ContentValidation,omitempty"`

	//ExpectedHttpStatusCode: Validate that the WebTest returns the http status code
	//provided.
	ExpectedHttpStatusCode *int `json:"ExpectedHttpStatusCode,omitempty"`

	//IgnoreHttpsStatusCode: When set, validation will ignore the status code.
	IgnoreHttpsStatusCode *bool `json:"IgnoreHttpsStatusCode,omitempty"`

	//SSLCertRemainingLifetimeCheck: A number of days to check still remain before the
	//the existing SSL cert expires.  Value must be positive and the SSLCheck must be
	//set to true.
	SSLCertRemainingLifetimeCheck *int `json:"SSLCertRemainingLifetimeCheck,omitempty"`

	//SSLCheck: Checks to see if the SSL cert is still valid.
	SSLCheck *bool `json:"SSLCheck,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_Spec_ValidationRules{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rules *WebTestProperties_Spec_ValidationRules) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rules == nil {
		return nil, nil
	}
	var result WebTestProperties_Spec_ValidationRulesARM

	// Set property ‘ContentValidation’:
	if rules.ContentValidation != nil {
		contentValidationARM, err := (*rules.ContentValidation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		contentValidation := contentValidationARM.(WebTestProperties_Spec_ValidationRules_ContentValidationARM)
		result.ContentValidation = &contentValidation
	}

	// Set property ‘ExpectedHttpStatusCode’:
	if rules.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *rules.ExpectedHttpStatusCode
		result.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property ‘IgnoreHttpsStatusCode’:
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		result.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property ‘SSLCertRemainingLifetimeCheck’:
	if rules.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *rules.SSLCertRemainingLifetimeCheck
		result.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property ‘SSLCheck’:
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		result.SSLCheck = &sslCheck
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *WebTestProperties_Spec_ValidationRules) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Spec_ValidationRulesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *WebTestProperties_Spec_ValidationRules) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Spec_ValidationRulesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Spec_ValidationRulesARM, got %T", armInput)
	}

	// Set property ‘ContentValidation’:
	if typedInput.ContentValidation != nil {
		var contentValidation1 WebTestProperties_Spec_ValidationRules_ContentValidation
		err := contentValidation1.PopulateFromARM(owner, *typedInput.ContentValidation)
		if err != nil {
			return err
		}
		contentValidation := contentValidation1
		rules.ContentValidation = &contentValidation
	}

	// Set property ‘ExpectedHttpStatusCode’:
	if typedInput.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *typedInput.ExpectedHttpStatusCode
		rules.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property ‘IgnoreHttpsStatusCode’:
	if typedInput.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *typedInput.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property ‘SSLCertRemainingLifetimeCheck’:
	if typedInput.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *typedInput.SSLCertRemainingLifetimeCheck
		rules.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property ‘SSLCheck’:
	if typedInput.SSLCheck != nil {
		sslCheck := *typedInput.SSLCheck
		rules.SSLCheck = &sslCheck
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesSpecValidationRules populates our WebTestProperties_Spec_ValidationRules from the provided source WebTestProperties_Spec_ValidationRules
func (rules *WebTestProperties_Spec_ValidationRules) AssignPropertiesFromWebTestPropertiesSpecValidationRules(source *v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules) error {

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestProperties_Spec_ValidationRules_ContentValidation
		err := contentValidation.AssignPropertiesFromWebTestPropertiesSpecValidationRulesContentValidation(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesSpecValidationRulesContentValidation() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesSpecValidationRules populates the provided destination WebTestProperties_Spec_ValidationRules from our WebTestProperties_Spec_ValidationRules
func (rules *WebTestProperties_Spec_ValidationRules) AssignPropertiesToWebTestPropertiesSpecValidationRules(destination *v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules_ContentValidation
		err := rules.ContentValidation.AssignPropertiesToWebTestPropertiesSpecValidationRulesContentValidation(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesSpecValidationRulesContentValidation() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_Status_Configuration struct {
	//WebTest: The XML specification of a WebTest to run against an application.
	WebTest *string `json:"WebTest,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_Status_Configuration{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WebTestProperties_Status_Configuration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Status_ConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WebTestProperties_Status_Configuration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Status_ConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Status_ConfigurationARM, got %T", armInput)
	}

	// Set property ‘WebTest’:
	if typedInput.WebTest != nil {
		webTest := *typedInput.WebTest
		configuration.WebTest = &webTest
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesStatusConfiguration populates our WebTestProperties_Status_Configuration from the provided source WebTestProperties_Status_Configuration
func (configuration *WebTestProperties_Status_Configuration) AssignPropertiesFromWebTestPropertiesStatusConfiguration(source *v1alpha1api20180501previewstorage.WebTestProperties_Status_Configuration) error {

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesStatusConfiguration populates the provided destination WebTestProperties_Status_Configuration from our WebTestProperties_Status_Configuration
func (configuration *WebTestProperties_Status_Configuration) AssignPropertiesToWebTestPropertiesStatusConfiguration(destination *v1alpha1api20180501previewstorage.WebTestProperties_Status_Configuration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_Status_Request struct {
	//FollowRedirects: Follow redirects for this web test.
	FollowRedirects *bool `json:"FollowRedirects,omitempty"`

	//Headers: List of headers and their values to add to the WebTest call.
	Headers []HeaderField_Status `json:"Headers,omitempty"`

	//HttpVerb: Http verb to use for this web test.
	HttpVerb *string `json:"HttpVerb,omitempty"`

	//ParseDependentRequests: Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `json:"ParseDependentRequests,omitempty"`

	//RequestBody: Base64 encoded string body to send with this web test.
	RequestBody *string `json:"RequestBody,omitempty"`

	//RequestUrl: Url location to test.
	RequestUrl *string `json:"RequestUrl,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_Status_Request{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (request *WebTestProperties_Status_Request) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Status_RequestARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (request *WebTestProperties_Status_Request) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Status_RequestARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Status_RequestARM, got %T", armInput)
	}

	// Set property ‘FollowRedirects’:
	if typedInput.FollowRedirects != nil {
		followRedirects := *typedInput.FollowRedirects
		request.FollowRedirects = &followRedirects
	}

	// Set property ‘Headers’:
	for _, item := range typedInput.Headers {
		var item1 HeaderField_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		request.Headers = append(request.Headers, item1)
	}

	// Set property ‘HttpVerb’:
	if typedInput.HttpVerb != nil {
		httpVerb := *typedInput.HttpVerb
		request.HttpVerb = &httpVerb
	}

	// Set property ‘ParseDependentRequests’:
	if typedInput.ParseDependentRequests != nil {
		parseDependentRequests := *typedInput.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequests
	}

	// Set property ‘RequestBody’:
	if typedInput.RequestBody != nil {
		requestBody := *typedInput.RequestBody
		request.RequestBody = &requestBody
	}

	// Set property ‘RequestUrl’:
	if typedInput.RequestUrl != nil {
		requestUrl := *typedInput.RequestUrl
		request.RequestUrl = &requestUrl
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesStatusRequest populates our WebTestProperties_Status_Request from the provided source WebTestProperties_Status_Request
func (request *WebTestProperties_Status_Request) AssignPropertiesFromWebTestPropertiesStatusRequest(source *v1alpha1api20180501previewstorage.WebTestProperties_Status_Request) error {

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField_Status, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField_Status
			err := header.AssignPropertiesFromHeaderFieldStatus(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromHeaderFieldStatus() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesStatusRequest populates the provided destination WebTestProperties_Status_Request from our WebTestProperties_Status_Request
func (request *WebTestProperties_Status_Request) AssignPropertiesToWebTestPropertiesStatusRequest(destination *v1alpha1api20180501previewstorage.WebTestProperties_Status_Request) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v1alpha1api20180501previewstorage.HeaderField_Status, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v1alpha1api20180501previewstorage.HeaderField_Status
			err := headerItem.AssignPropertiesToHeaderFieldStatus(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToHeaderFieldStatus() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_Status_ValidationRules struct {
	//ContentValidation: The collection of content validation properties
	ContentValidation *WebTestProperties_Status_ValidationRules_ContentValidation `json:"ContentValidation,omitempty"`

	//ExpectedHttpStatusCode: Validate that the WebTest returns the http status code
	//provided.
	ExpectedHttpStatusCode *int `json:"ExpectedHttpStatusCode,omitempty"`

	//IgnoreHttpsStatusCode: When set, validation will ignore the status code.
	IgnoreHttpsStatusCode *bool `json:"IgnoreHttpsStatusCode,omitempty"`

	//SSLCertRemainingLifetimeCheck: A number of days to check still remain before the
	//the existing SSL cert expires.  Value must be positive and the SSLCheck must be
	//set to true.
	SSLCertRemainingLifetimeCheck *int `json:"SSLCertRemainingLifetimeCheck,omitempty"`

	//SSLCheck: Checks to see if the SSL cert is still valid.
	SSLCheck *bool `json:"SSLCheck,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_Status_ValidationRules{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *WebTestProperties_Status_ValidationRules) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Status_ValidationRulesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *WebTestProperties_Status_ValidationRules) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Status_ValidationRulesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Status_ValidationRulesARM, got %T", armInput)
	}

	// Set property ‘ContentValidation’:
	if typedInput.ContentValidation != nil {
		var contentValidation1 WebTestProperties_Status_ValidationRules_ContentValidation
		err := contentValidation1.PopulateFromARM(owner, *typedInput.ContentValidation)
		if err != nil {
			return err
		}
		contentValidation := contentValidation1
		rules.ContentValidation = &contentValidation
	}

	// Set property ‘ExpectedHttpStatusCode’:
	if typedInput.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *typedInput.ExpectedHttpStatusCode
		rules.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property ‘IgnoreHttpsStatusCode’:
	if typedInput.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *typedInput.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property ‘SSLCertRemainingLifetimeCheck’:
	if typedInput.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *typedInput.SSLCertRemainingLifetimeCheck
		rules.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property ‘SSLCheck’:
	if typedInput.SSLCheck != nil {
		sslCheck := *typedInput.SSLCheck
		rules.SSLCheck = &sslCheck
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesStatusValidationRules populates our WebTestProperties_Status_ValidationRules from the provided source WebTestProperties_Status_ValidationRules
func (rules *WebTestProperties_Status_ValidationRules) AssignPropertiesFromWebTestPropertiesStatusValidationRules(source *v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules) error {

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestProperties_Status_ValidationRules_ContentValidation
		err := contentValidation.AssignPropertiesFromWebTestPropertiesStatusValidationRulesContentValidation(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesStatusValidationRulesContentValidation() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesStatusValidationRules populates the provided destination WebTestProperties_Status_ValidationRules from our WebTestProperties_Status_ValidationRules
func (rules *WebTestProperties_Status_ValidationRules) AssignPropertiesToWebTestPropertiesStatusValidationRules(destination *v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules_ContentValidation
		err := rules.ContentValidation.AssignPropertiesToWebTestPropertiesStatusValidationRulesContentValidation(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesStatusValidationRulesContentValidation() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HeaderField_Spec struct {
	//Key: The name of the header.
	Key *string `json:"key,omitempty"`

	//Value: The value of the header.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &HeaderField_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (field *HeaderField_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if field == nil {
		return nil, nil
	}
	var result HeaderField_SpecARM

	// Set property ‘Key’:
	if field.Key != nil {
		key := *field.Key
		result.Key = &key
	}

	// Set property ‘Value’:
	if field.Value != nil {
		value := *field.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (field *HeaderField_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderField_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (field *HeaderField_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderField_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderField_SpecARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		field.Key = &key
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		field.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromHeaderFieldSpec populates our HeaderField_Spec from the provided source HeaderField_Spec
func (field *HeaderField_Spec) AssignPropertiesFromHeaderFieldSpec(source *v1alpha1api20180501previewstorage.HeaderField_Spec) error {

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToHeaderFieldSpec populates the provided destination HeaderField_Spec from our HeaderField_Spec
func (field *HeaderField_Spec) AssignPropertiesToHeaderFieldSpec(destination *v1alpha1api20180501previewstorage.HeaderField_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HeaderField_Status struct {
	//Key: The name of the header.
	Key *string `json:"key,omitempty"`

	//Value: The value of the header.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &HeaderField_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (field *HeaderField_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderField_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (field *HeaderField_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderField_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderField_StatusARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		field.Key = &key
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		field.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromHeaderFieldStatus populates our HeaderField_Status from the provided source HeaderField_Status
func (field *HeaderField_Status) AssignPropertiesFromHeaderFieldStatus(source *v1alpha1api20180501previewstorage.HeaderField_Status) error {

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToHeaderFieldStatus populates the provided destination HeaderField_Status from our HeaderField_Status
func (field *HeaderField_Status) AssignPropertiesToHeaderFieldStatus(destination *v1alpha1api20180501previewstorage.HeaderField_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_Spec_ValidationRules_ContentValidation struct {
	//ContentMatch: Content to look for in the return of the WebTest.  Must not be
	//null or empty.
	ContentMatch *string `json:"ContentMatch,omitempty"`

	//IgnoreCase: When set, this value makes the ContentMatch validation case
	//insensitive.
	IgnoreCase *bool `json:"IgnoreCase,omitempty"`

	//PassIfTextFound: When true, validation will pass if there is a match for the
	//ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `json:"PassIfTextFound,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_Spec_ValidationRules_ContentValidation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (validation *WebTestProperties_Spec_ValidationRules_ContentValidation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if validation == nil {
		return nil, nil
	}
	var result WebTestProperties_Spec_ValidationRules_ContentValidationARM

	// Set property ‘ContentMatch’:
	if validation.ContentMatch != nil {
		contentMatch := *validation.ContentMatch
		result.ContentMatch = &contentMatch
	}

	// Set property ‘IgnoreCase’:
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		result.IgnoreCase = &ignoreCase
	}

	// Set property ‘PassIfTextFound’:
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		result.PassIfTextFound = &passIfTextFound
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (validation *WebTestProperties_Spec_ValidationRules_ContentValidation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Spec_ValidationRules_ContentValidationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (validation *WebTestProperties_Spec_ValidationRules_ContentValidation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Spec_ValidationRules_ContentValidationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Spec_ValidationRules_ContentValidationARM, got %T", armInput)
	}

	// Set property ‘ContentMatch’:
	if typedInput.ContentMatch != nil {
		contentMatch := *typedInput.ContentMatch
		validation.ContentMatch = &contentMatch
	}

	// Set property ‘IgnoreCase’:
	if typedInput.IgnoreCase != nil {
		ignoreCase := *typedInput.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	}

	// Set property ‘PassIfTextFound’:
	if typedInput.PassIfTextFound != nil {
		passIfTextFound := *typedInput.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesSpecValidationRulesContentValidation populates our WebTestProperties_Spec_ValidationRules_ContentValidation from the provided source WebTestProperties_Spec_ValidationRules_ContentValidation
func (validation *WebTestProperties_Spec_ValidationRules_ContentValidation) AssignPropertiesFromWebTestPropertiesSpecValidationRulesContentValidation(source *v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules_ContentValidation) error {

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesSpecValidationRulesContentValidation populates the provided destination WebTestProperties_Spec_ValidationRules_ContentValidation from our WebTestProperties_Spec_ValidationRules_ContentValidation
func (validation *WebTestProperties_Spec_ValidationRules_ContentValidation) AssignPropertiesToWebTestPropertiesSpecValidationRulesContentValidation(destination *v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules_ContentValidation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_Status_ValidationRules_ContentValidation struct {
	//ContentMatch: Content to look for in the return of the WebTest.  Must not be
	//null or empty.
	ContentMatch *string `json:"ContentMatch,omitempty"`

	//IgnoreCase: When set, this value makes the ContentMatch validation case
	//insensitive.
	IgnoreCase *bool `json:"IgnoreCase,omitempty"`

	//PassIfTextFound: When true, validation will pass if there is a match for the
	//ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `json:"PassIfTextFound,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_Status_ValidationRules_ContentValidation{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (validation *WebTestProperties_Status_ValidationRules_ContentValidation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Status_ValidationRules_ContentValidationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (validation *WebTestProperties_Status_ValidationRules_ContentValidation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Status_ValidationRules_ContentValidationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Status_ValidationRules_ContentValidationARM, got %T", armInput)
	}

	// Set property ‘ContentMatch’:
	if typedInput.ContentMatch != nil {
		contentMatch := *typedInput.ContentMatch
		validation.ContentMatch = &contentMatch
	}

	// Set property ‘IgnoreCase’:
	if typedInput.IgnoreCase != nil {
		ignoreCase := *typedInput.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	}

	// Set property ‘PassIfTextFound’:
	if typedInput.PassIfTextFound != nil {
		passIfTextFound := *typedInput.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesStatusValidationRulesContentValidation populates our WebTestProperties_Status_ValidationRules_ContentValidation from the provided source WebTestProperties_Status_ValidationRules_ContentValidation
func (validation *WebTestProperties_Status_ValidationRules_ContentValidation) AssignPropertiesFromWebTestPropertiesStatusValidationRulesContentValidation(source *v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules_ContentValidation) error {

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesStatusValidationRulesContentValidation populates the provided destination WebTestProperties_Status_ValidationRules_ContentValidation from our WebTestProperties_Status_ValidationRules_ContentValidation
func (validation *WebTestProperties_Status_ValidationRules_ContentValidation) AssignPropertiesToWebTestPropertiesStatusValidationRulesContentValidation(destination *v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules_ContentValidation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Webtest{}, &WebtestList{})
}
