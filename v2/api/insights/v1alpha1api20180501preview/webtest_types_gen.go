// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /applicationinsights/resource-manager/Microsoft.Insights/preview/2018-05-01-preview/webTests_API.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}
type Webtest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Webtest_Spec   `json:"spec,omitempty"`
	Status            WebTest_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Webtest{}

// GetConditions returns the conditions of the resource
func (webtest *Webtest) GetConditions() conditions.Conditions {
	return webtest.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (webtest *Webtest) SetConditions(conditions conditions.Conditions) {
	webtest.Status.Conditions = conditions
}

var _ conversion.Convertible = &Webtest{}

// ConvertFrom populates our Webtest from the provided hub Webtest
func (webtest *Webtest) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20180501previewstorage.Webtest)
	if !ok {
		return fmt.Errorf("expected storage:insights/v1alpha1api20180501previewstorage/Webtest but received %T instead", hub)
	}

	return webtest.AssignPropertiesFromWebtest(source)
}

// ConvertTo populates the provided hub Webtest from our Webtest
func (webtest *Webtest) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20180501previewstorage.Webtest)
	if !ok {
		return fmt.Errorf("expected storage:insights/v1alpha1api20180501previewstorage/Webtest but received %T instead", hub)
	}

	return webtest.AssignPropertiesToWebtest(destination)
}

// +kubebuilder:webhook:path=/mutate-insights-azure-com-v1alpha1api20180501preview-webtest,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=webtests,verbs=create;update,versions=v1alpha1api20180501preview,name=default.v1alpha1api20180501preview.webtests.insights.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Webtest{}

// Default applies defaults to the Webtest resource
func (webtest *Webtest) Default() {
	webtest.defaultImpl()
	var temp interface{} = webtest
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (webtest *Webtest) defaultAzureName() {
	if webtest.Spec.AzureName == "" {
		webtest.Spec.AzureName = webtest.Name
	}
}

// defaultImpl applies the code generated defaults to the Webtest resource
func (webtest *Webtest) defaultImpl() { webtest.defaultAzureName() }

var _ genruntime.KubernetesResource = &Webtest{}

// AzureName returns the Azure name of the resource
func (webtest *Webtest) AzureName() string {
	return webtest.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-05-01-preview"
func (webtest Webtest) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (webtest *Webtest) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (webtest *Webtest) GetSpec() genruntime.ConvertibleSpec {
	return &webtest.Spec
}

// GetStatus returns the status of this resource
func (webtest *Webtest) GetStatus() genruntime.ConvertibleStatus {
	return &webtest.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/webtests"
func (webtest *Webtest) GetType() string {
	return "Microsoft.Insights/webtests"
}

// NewEmptyStatus returns a new empty (blank) status
func (webtest *Webtest) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &WebTest_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (webtest *Webtest) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(webtest.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  webtest.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (webtest *Webtest) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*WebTest_Status); ok {
		webtest.Status = *st
		return nil
	}

	// Convert status to required version
	var st WebTest_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	webtest.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-insights-azure-com-v1alpha1api20180501preview-webtest,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=webtests,verbs=create;update,versions=v1alpha1api20180501preview,name=validate.v1alpha1api20180501preview.webtests.insights.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Webtest{}

// ValidateCreate validates the creation of the resource
func (webtest *Webtest) ValidateCreate() error {
	validations := webtest.createValidations()
	var temp interface{} = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (webtest *Webtest) ValidateDelete() error {
	validations := webtest.deleteValidations()
	var temp interface{} = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (webtest *Webtest) ValidateUpdate(old runtime.Object) error {
	validations := webtest.updateValidations()
	var temp interface{} = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (webtest *Webtest) createValidations() []func() error {
	return []func() error{webtest.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (webtest *Webtest) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (webtest *Webtest) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return webtest.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (webtest *Webtest) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&webtest.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromWebtest populates our Webtest from the provided source Webtest
func (webtest *Webtest) AssignPropertiesFromWebtest(source *v1alpha1api20180501previewstorage.Webtest) error {

	// ObjectMeta
	webtest.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Webtest_Spec
	err := spec.AssignPropertiesFromWebtest_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWebtest_Spec() to populate field Spec")
	}
	webtest.Spec = spec

	// Status
	var status WebTest_Status
	err = status.AssignPropertiesFromWebTest_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromWebTest_Status() to populate field Status")
	}
	webtest.Status = status

	// No error
	return nil
}

// AssignPropertiesToWebtest populates the provided destination Webtest from our Webtest
func (webtest *Webtest) AssignPropertiesToWebtest(destination *v1alpha1api20180501previewstorage.Webtest) error {

	// ObjectMeta
	destination.ObjectMeta = *webtest.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20180501previewstorage.Webtest_Spec
	err := webtest.Spec.AssignPropertiesToWebtest_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWebtest_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20180501previewstorage.WebTest_Status
	err = webtest.Status.AssignPropertiesToWebTest_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToWebTest_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (webtest *Webtest) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: webtest.Spec.OriginalVersion(),
		Kind:    "Webtest",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /applicationinsights/resource-manager/Microsoft.Insights/preview/2018-05-01-preview/webTests_API.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}
type WebtestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Webtest `json:"items"`
}

// +kubebuilder:validation:Enum={"2018-05-01-preview"}
type APIVersion string

const APIVersionValue = APIVersion("2018-05-01-preview")

type WebTest_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Configuration: An XML configuration specification for a WebTest.
	Configuration *WebTestProperties_StatusConfiguration `json:"Configuration,omitempty"`

	//Description: User defined description for this WebTest.
	Description *string `json:"Description,omitempty"`

	//Enabled: Is the test actively being monitored.
	Enabled *bool `json:"Enabled,omitempty"`

	//Frequency: Interval in seconds between test runs for this WebTest. Default value
	//is 300.
	Frequency *int `json:"Frequency,omitempty"`

	//Id: Azure resource Id
	Id *string `json:"id,omitempty"`

	//Kind: The kind of web test this is, valid choices are ping, multistep, basic,
	//and standard.
	Kind *string `json:"Kind,omitempty"`

	//Location: Resource location
	Location *string `json:"location,omitempty"`

	//Locations: A list of where to physically run the tests from to give global
	//coverage for accessibility of your application.
	Locations []WebTestGeolocation_Status `json:"Locations,omitempty"`

	//Name: Azure resource name
	Name *string `json:"name,omitempty"`

	//PropertiesName: User defined name if this WebTest.
	PropertiesName *string `json:"properties_name,omitempty"`

	//ProvisioningState: Current state of this component, whether or not is has been
	//provisioned within the resource group it is defined. Users cannot change this
	//value but are able to read from it. Values will include Succeeded, Deploying,
	//Canceled, and Failed.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Request: The collection of request properties
	Request *WebTestProperties_StatusRequest `json:"Request,omitempty"`

	//RetryEnabled: Allow for retries should this WebTest fail.
	RetryEnabled *bool `json:"RetryEnabled,omitempty"`

	//SyntheticMonitorId: Unique ID of this WebTest. This is typically the same value
	//as the Name field.
	SyntheticMonitorId *string `json:"SyntheticMonitorId,omitempty"`

	//Tags: Resource tags
	Tags *v1.JSON `json:"tags,omitempty"`

	//Timeout: Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout *int `json:"Timeout,omitempty"`

	//Type: Azure resource type
	Type *string `json:"type,omitempty"`

	//ValidationRules: The collection of validation rule properties
	ValidationRules *WebTestProperties_StatusValidationRules `json:"ValidationRules,omitempty"`
}

var _ genruntime.ConvertibleStatus = &WebTest_Status{}

// ConvertStatusFrom populates our WebTest_Status from the provided source
func (test *WebTest_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20180501previewstorage.WebTest_Status)
	if ok {
		// Populate our instance from source
		return test.AssignPropertiesFromWebTest_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20180501previewstorage.WebTest_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = test.AssignPropertiesFromWebTest_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our WebTest_Status
func (test *WebTest_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20180501previewstorage.WebTest_Status)
	if ok {
		// Populate destination from our instance
		return test.AssignPropertiesToWebTest_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20180501previewstorage.WebTest_Status{}
	err := test.AssignPropertiesToWebTest_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &WebTest_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (test *WebTest_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTest_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (test *WebTest_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTest_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTest_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Configuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Configuration != nil {
			var configuration1 WebTestProperties_StatusConfiguration
			err := configuration1.PopulateFromARM(owner, *typedInput.Properties.Configuration)
			if err != nil {
				return err
			}
			configuration := configuration1
			test.Configuration = &configuration
		}
	}

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			test.Description = &description
		}
	}

	// Set property ‘Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			test.Enabled = &enabled
		}
	}

	// Set property ‘Frequency’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Frequency != nil {
			frequency := *typedInput.Properties.Frequency
			test.Frequency = &frequency
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		test.Id = &id
	}

	// Set property ‘Kind’:
	// copying flattened property:
	if typedInput.Properties != nil {
		test.Kind = &typedInput.Properties.Kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		test.Location = &location
	}

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 WebTestGeolocation_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			test.Locations = append(test.Locations, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		test.Name = &name
	}

	// Set property ‘PropertiesName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		test.PropertiesName = &typedInput.Properties.Name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			test.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Request’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request != nil {
			var request1 WebTestProperties_StatusRequest
			err := request1.PopulateFromARM(owner, *typedInput.Properties.Request)
			if err != nil {
				return err
			}
			request := request1
			test.Request = &request
		}
	}

	// Set property ‘RetryEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryEnabled != nil {
			retryEnabled := *typedInput.Properties.RetryEnabled
			test.RetryEnabled = &retryEnabled
		}
	}

	// Set property ‘SyntheticMonitorId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		test.SyntheticMonitorId = &typedInput.Properties.SyntheticMonitorId
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		tags := *(*typedInput.Tags).DeepCopy()
		test.Tags = &tags
	}

	// Set property ‘Timeout’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Timeout != nil {
			timeout := *typedInput.Properties.Timeout
			test.Timeout = &timeout
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		test.Type = &typeVar
	}

	// Set property ‘ValidationRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ValidationRules != nil {
			var validationRules1 WebTestProperties_StatusValidationRules
			err := validationRules1.PopulateFromARM(owner, *typedInput.Properties.ValidationRules)
			if err != nil {
				return err
			}
			validationRules := validationRules1
			test.ValidationRules = &validationRules
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTest_Status populates our WebTest_Status from the provided source WebTest_Status
func (test *WebTest_Status) AssignPropertiesFromWebTest_Status(source *v1alpha1api20180501previewstorage.WebTest_Status) error {

	// Conditions
	test.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestProperties_StatusConfiguration
		err := configuration.AssignPropertiesFromWebTestProperties_StatusConfiguration(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestProperties_StatusConfiguration() to populate field Configuration")
		}
		test.Configuration = &configuration
	} else {
		test.Configuration = nil
	}

	// Description
	test.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		test.Enabled = &enabled
	} else {
		test.Enabled = nil
	}

	// Frequency
	test.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Id
	test.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	test.Kind = genruntime.ClonePointerToString(source.Kind)

	// Location
	test.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation_Status, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation_Status
			err := location.AssignPropertiesFromWebTestGeolocation_Status(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromWebTestGeolocation_Status() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		test.Locations = locationList
	} else {
		test.Locations = nil
	}

	// Name
	test.Name = genruntime.ClonePointerToString(source.Name)

	// PropertiesName
	test.PropertiesName = genruntime.ClonePointerToString(source.PropertiesName)

	// ProvisioningState
	test.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Request
	if source.Request != nil {
		var request WebTestProperties_StatusRequest
		err := request.AssignPropertiesFromWebTestProperties_StatusRequest(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestProperties_StatusRequest() to populate field Request")
		}
		test.Request = &request
	} else {
		test.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		test.RetryEnabled = &retryEnabled
	} else {
		test.RetryEnabled = nil
	}

	// SyntheticMonitorId
	test.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	if source.Tags != nil {
		tag := *source.Tags.DeepCopy()
		test.Tags = &tag
	} else {
		test.Tags = nil
	}

	// Timeout
	test.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// Type
	test.Type = genruntime.ClonePointerToString(source.Type)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestProperties_StatusValidationRules
		err := validationRule.AssignPropertiesFromWebTestProperties_StatusValidationRules(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestProperties_StatusValidationRules() to populate field ValidationRules")
		}
		test.ValidationRules = &validationRule
	} else {
		test.ValidationRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTest_Status populates the provided destination WebTest_Status from our WebTest_Status
func (test *WebTest_Status) AssignPropertiesToWebTest_Status(destination *v1alpha1api20180501previewstorage.WebTest_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(test.Conditions)

	// Configuration
	if test.Configuration != nil {
		var configuration v1alpha1api20180501previewstorage.WebTestProperties_StatusConfiguration
		err := test.Configuration.AssignPropertiesToWebTestProperties_StatusConfiguration(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestProperties_StatusConfiguration() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(test.Description)

	// Enabled
	if test.Enabled != nil {
		enabled := *test.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(test.Frequency)

	// Id
	destination.Id = genruntime.ClonePointerToString(test.Id)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(test.Kind)

	// Location
	destination.Location = genruntime.ClonePointerToString(test.Location)

	// Locations
	if test.Locations != nil {
		locationList := make([]v1alpha1api20180501previewstorage.WebTestGeolocation_Status, len(test.Locations))
		for locationIndex, locationItem := range test.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1alpha1api20180501previewstorage.WebTestGeolocation_Status
			err := locationItem.AssignPropertiesToWebTestGeolocation_Status(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToWebTestGeolocation_Status() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(test.Name)

	// PropertiesName
	destination.PropertiesName = genruntime.ClonePointerToString(test.PropertiesName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(test.ProvisioningState)

	// Request
	if test.Request != nil {
		var request v1alpha1api20180501previewstorage.WebTestProperties_StatusRequest
		err := test.Request.AssignPropertiesToWebTestProperties_StatusRequest(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestProperties_StatusRequest() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if test.RetryEnabled != nil {
		retryEnabled := *test.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(test.SyntheticMonitorId)

	// Tags
	if test.Tags != nil {
		tag := *test.Tags.DeepCopy()
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(test.Timeout)

	// Type
	destination.Type = genruntime.ClonePointerToString(test.Type)

	// ValidationRules
	if test.ValidationRules != nil {
		var validationRule v1alpha1api20180501previewstorage.WebTestProperties_StatusValidationRules
		err := test.ValidationRules.AssignPropertiesToWebTestProperties_StatusValidationRules(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestProperties_StatusValidationRules() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Webtest_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Configuration: An XML configuration specification for a WebTest.
	Configuration *WebTestPropertiesConfiguration `json:"Configuration,omitempty"`

	//Description: User defined description for this WebTest.
	Description *string `json:"Description,omitempty"`

	//Enabled: Is the test actively being monitored.
	Enabled *bool `json:"Enabled,omitempty"`

	//Frequency: Interval in seconds between test runs for this WebTest. Default value
	//is 300.
	Frequency *int `json:"Frequency,omitempty"`

	//Kind: The kind of web test this is, valid choices are ping, multistep, basic,
	//and standard.
	Kind *WebTestPropertiesKind `json:"Kind,omitempty"`

	// +kubebuilder:validation:Required
	//Location: Resource location
	Location string `json:"location"`

	//Locations: A list of where to physically run the tests from to give global
	//coverage for accessibility of your application.
	Locations []WebTestGeolocation `json:"Locations,omitempty"`

	//Name: User defined name if this WebTest.
	Name *string `json:"Name,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Request: The collection of request properties
	Request *WebTestPropertiesRequest `json:"Request,omitempty"`

	//RetryEnabled: Allow for retries should this WebTest fail.
	RetryEnabled *bool `json:"RetryEnabled,omitempty"`

	//SyntheticMonitorId: Unique ID of this WebTest. This is typically the same value
	//as the Name field.
	SyntheticMonitorId *string `json:"SyntheticMonitorId,omitempty"`

	//Tags: Resource tags
	Tags *v1.JSON `json:"tags,omitempty"`

	//Timeout: Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout *int `json:"Timeout,omitempty"`

	//ValidationRules: The collection of validation rule properties
	ValidationRules *WebTestPropertiesValidationRules `json:"ValidationRules,omitempty"`
}

var _ genruntime.ARMTransformer = &Webtest_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (webtest *Webtest_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if webtest == nil {
		return nil, nil
	}
	var result Webtest_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = webtest.AzureName

	// Set property ‘Location’:
	result.Location = webtest.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if webtest.Configuration != nil ||
		webtest.Description != nil ||
		webtest.Enabled != nil ||
		webtest.Frequency != nil ||
		webtest.Kind != nil ||
		webtest.Locations != nil ||
		webtest.Name != nil ||
		webtest.Request != nil ||
		webtest.RetryEnabled != nil ||
		webtest.SyntheticMonitorId != nil ||
		webtest.Timeout != nil ||
		webtest.ValidationRules != nil {
		result.Properties = &WebTestPropertiesARM{}
	}
	if webtest.Configuration != nil {
		configurationARM, err := (*webtest.Configuration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		configuration := configurationARM.(WebTestPropertiesConfigurationARM)
		result.Properties.Configuration = &configuration
	}
	if webtest.Description != nil {
		description := *webtest.Description
		result.Properties.Description = &description
	}
	if webtest.Enabled != nil {
		enabled := *webtest.Enabled
		result.Properties.Enabled = &enabled
	}
	if webtest.Frequency != nil {
		frequency := *webtest.Frequency
		result.Properties.Frequency = &frequency
	}
	if webtest.Kind != nil {
		result.Properties.Kind = *webtest.Kind
	}
	for _, item := range webtest.Locations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Locations = append(result.Properties.Locations, itemARM.(WebTestGeolocationARM))
	}
	if webtest.Name != nil {
		result.Properties.Name = *webtest.Name
	}
	if webtest.Request != nil {
		requestARM, err := (*webtest.Request).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		request := requestARM.(WebTestPropertiesRequestARM)
		result.Properties.Request = &request
	}
	if webtest.RetryEnabled != nil {
		retryEnabled := *webtest.RetryEnabled
		result.Properties.RetryEnabled = &retryEnabled
	}
	if webtest.SyntheticMonitorId != nil {
		result.Properties.SyntheticMonitorId = *webtest.SyntheticMonitorId
	}
	if webtest.Timeout != nil {
		timeout := *webtest.Timeout
		result.Properties.Timeout = &timeout
	}
	if webtest.ValidationRules != nil {
		validationRulesARM, err := (*webtest.ValidationRules).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		validationRules := validationRulesARM.(WebTestPropertiesValidationRulesARM)
		result.Properties.ValidationRules = &validationRules
	}

	// Set property ‘Tags’:
	if webtest.Tags != nil {
		tags := *(*webtest.Tags).DeepCopy()
		result.Tags = &tags
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (webtest *Webtest_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Webtest_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (webtest *Webtest_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Webtest_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Webtest_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	webtest.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Configuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Configuration != nil {
			var configuration1 WebTestPropertiesConfiguration
			err := configuration1.PopulateFromARM(owner, *typedInput.Properties.Configuration)
			if err != nil {
				return err
			}
			configuration := configuration1
			webtest.Configuration = &configuration
		}
	}

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			webtest.Description = &description
		}
	}

	// Set property ‘Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			webtest.Enabled = &enabled
		}
	}

	// Set property ‘Frequency’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Frequency != nil {
			frequency := *typedInput.Properties.Frequency
			webtest.Frequency = &frequency
		}
	}

	// Set property ‘Kind’:
	// copying flattened property:
	if typedInput.Properties != nil {
		webtest.Kind = &typedInput.Properties.Kind
	}

	// Set property ‘Location’:
	webtest.Location = typedInput.Location

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 WebTestGeolocation
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			webtest.Locations = append(webtest.Locations, item1)
		}
	}

	// Set property ‘Name’:
	// copying flattened property:
	if typedInput.Properties != nil {
		webtest.Name = &typedInput.Properties.Name
	}

	// Set property ‘Owner’:
	webtest.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Request’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request != nil {
			var request1 WebTestPropertiesRequest
			err := request1.PopulateFromARM(owner, *typedInput.Properties.Request)
			if err != nil {
				return err
			}
			request := request1
			webtest.Request = &request
		}
	}

	// Set property ‘RetryEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryEnabled != nil {
			retryEnabled := *typedInput.Properties.RetryEnabled
			webtest.RetryEnabled = &retryEnabled
		}
	}

	// Set property ‘SyntheticMonitorId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		webtest.SyntheticMonitorId = &typedInput.Properties.SyntheticMonitorId
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		tags := *(*typedInput.Tags).DeepCopy()
		webtest.Tags = &tags
	}

	// Set property ‘Timeout’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Timeout != nil {
			timeout := *typedInput.Properties.Timeout
			webtest.Timeout = &timeout
		}
	}

	// Set property ‘ValidationRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ValidationRules != nil {
			var validationRules1 WebTestPropertiesValidationRules
			err := validationRules1.PopulateFromARM(owner, *typedInput.Properties.ValidationRules)
			if err != nil {
				return err
			}
			validationRules := validationRules1
			webtest.ValidationRules = &validationRules
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Webtest_Spec{}

// ConvertSpecFrom populates our Webtest_Spec from the provided source
func (webtest *Webtest_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20180501previewstorage.Webtest_Spec)
	if ok {
		// Populate our instance from source
		return webtest.AssignPropertiesFromWebtest_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20180501previewstorage.Webtest_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = webtest.AssignPropertiesFromWebtest_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Webtest_Spec
func (webtest *Webtest_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20180501previewstorage.Webtest_Spec)
	if ok {
		// Populate destination from our instance
		return webtest.AssignPropertiesToWebtest_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20180501previewstorage.Webtest_Spec{}
	err := webtest.AssignPropertiesToWebtest_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromWebtest_Spec populates our Webtest_Spec from the provided source Webtest_Spec
func (webtest *Webtest_Spec) AssignPropertiesFromWebtest_Spec(source *v1alpha1api20180501previewstorage.Webtest_Spec) error {

	// AzureName
	webtest.AzureName = source.AzureName

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestPropertiesConfiguration
		err := configuration.AssignPropertiesFromWebTestPropertiesConfiguration(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesConfiguration() to populate field Configuration")
		}
		webtest.Configuration = &configuration
	} else {
		webtest.Configuration = nil
	}

	// Description
	webtest.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		webtest.Enabled = &enabled
	} else {
		webtest.Enabled = nil
	}

	// Frequency
	webtest.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Kind
	if source.Kind != nil {
		kind := WebTestPropertiesKind(*source.Kind)
		webtest.Kind = &kind
	} else {
		webtest.Kind = nil
	}

	// Location
	webtest.Location = genruntime.GetOptionalStringValue(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation
			err := location.AssignPropertiesFromWebTestGeolocation(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromWebTestGeolocation() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		webtest.Locations = locationList
	} else {
		webtest.Locations = nil
	}

	// Name
	webtest.Name = genruntime.ClonePointerToString(source.Name)

	// Owner
	webtest.Owner = source.Owner.Copy()

	// Request
	if source.Request != nil {
		var request WebTestPropertiesRequest
		err := request.AssignPropertiesFromWebTestPropertiesRequest(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesRequest() to populate field Request")
		}
		webtest.Request = &request
	} else {
		webtest.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		webtest.RetryEnabled = &retryEnabled
	} else {
		webtest.RetryEnabled = nil
	}

	// SyntheticMonitorId
	webtest.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	if source.Tags != nil {
		tag := *source.Tags.DeepCopy()
		webtest.Tags = &tag
	} else {
		webtest.Tags = nil
	}

	// Timeout
	webtest.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestPropertiesValidationRules
		err := validationRule.AssignPropertiesFromWebTestPropertiesValidationRules(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesValidationRules() to populate field ValidationRules")
		}
		webtest.ValidationRules = &validationRule
	} else {
		webtest.ValidationRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebtest_Spec populates the provided destination Webtest_Spec from our Webtest_Spec
func (webtest *Webtest_Spec) AssignPropertiesToWebtest_Spec(destination *v1alpha1api20180501previewstorage.Webtest_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = webtest.AzureName

	// Configuration
	if webtest.Configuration != nil {
		var configuration v1alpha1api20180501previewstorage.WebTestPropertiesConfiguration
		err := webtest.Configuration.AssignPropertiesToWebTestPropertiesConfiguration(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesConfiguration() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(webtest.Description)

	// Enabled
	if webtest.Enabled != nil {
		enabled := *webtest.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(webtest.Frequency)

	// Kind
	if webtest.Kind != nil {
		kind := string(*webtest.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	location := webtest.Location
	destination.Location = &location

	// Locations
	if webtest.Locations != nil {
		locationList := make([]v1alpha1api20180501previewstorage.WebTestGeolocation, len(webtest.Locations))
		for locationIndex, locationItem := range webtest.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var locationLocal v1alpha1api20180501previewstorage.WebTestGeolocation
			err := locationItem.AssignPropertiesToWebTestGeolocation(&locationLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToWebTestGeolocation() to populate field Locations")
			}
			locationList[locationIndex] = locationLocal
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(webtest.Name)

	// OriginalVersion
	destination.OriginalVersion = webtest.OriginalVersion()

	// Owner
	destination.Owner = webtest.Owner.Copy()

	// Request
	if webtest.Request != nil {
		var request v1alpha1api20180501previewstorage.WebTestPropertiesRequest
		err := webtest.Request.AssignPropertiesToWebTestPropertiesRequest(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesRequest() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if webtest.RetryEnabled != nil {
		retryEnabled := *webtest.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(webtest.SyntheticMonitorId)

	// Tags
	if webtest.Tags != nil {
		tag := *webtest.Tags.DeepCopy()
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(webtest.Timeout)

	// ValidationRules
	if webtest.ValidationRules != nil {
		var validationRule v1alpha1api20180501previewstorage.WebTestPropertiesValidationRules
		err := webtest.ValidationRules.AssignPropertiesToWebTestPropertiesValidationRules(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesValidationRules() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (webtest *Webtest_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (webtest *Webtest_Spec) SetAzureName(azureName string) { webtest.AzureName = azureName }

type WebTestGeolocation struct {
	//Id: Location ID for the WebTest to run from.
	Id *string `json:"Id,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestGeolocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (geolocation *WebTestGeolocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if geolocation == nil {
		return nil, nil
	}
	var result WebTestGeolocationARM

	// Set property ‘Id’:
	if geolocation.Id != nil {
		id := *geolocation.Id
		result.Id = &id
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (geolocation *WebTestGeolocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestGeolocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (geolocation *WebTestGeolocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestGeolocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestGeolocationARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		geolocation.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestGeolocation populates our WebTestGeolocation from the provided source WebTestGeolocation
func (geolocation *WebTestGeolocation) AssignPropertiesFromWebTestGeolocation(source *v1alpha1api20180501previewstorage.WebTestGeolocation) error {

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToWebTestGeolocation populates the provided destination WebTestGeolocation from our WebTestGeolocation
func (geolocation *WebTestGeolocation) AssignPropertiesToWebTestGeolocation(destination *v1alpha1api20180501previewstorage.WebTestGeolocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestGeolocation_Status struct {
	//Id: Location ID for the WebTest to run from.
	Id *string `json:"Id,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestGeolocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (geolocation *WebTestGeolocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestGeolocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (geolocation *WebTestGeolocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestGeolocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestGeolocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		geolocation.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestGeolocation_Status populates our WebTestGeolocation_Status from the provided source WebTestGeolocation_Status
func (geolocation *WebTestGeolocation_Status) AssignPropertiesFromWebTestGeolocation_Status(source *v1alpha1api20180501previewstorage.WebTestGeolocation_Status) error {

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToWebTestGeolocation_Status populates the provided destination WebTestGeolocation_Status from our WebTestGeolocation_Status
func (geolocation *WebTestGeolocation_Status) AssignPropertiesToWebTestGeolocation_Status(destination *v1alpha1api20180501previewstorage.WebTestGeolocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestPropertiesConfiguration struct {
	//WebTest: The XML specification of a WebTest to run against an application.
	WebTest *string `json:"WebTest,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestPropertiesConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *WebTestPropertiesConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result WebTestPropertiesConfigurationARM

	// Set property ‘WebTest’:
	if configuration.WebTest != nil {
		webTest := *configuration.WebTest
		result.WebTest = &webTest
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WebTestPropertiesConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestPropertiesConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WebTestPropertiesConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestPropertiesConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestPropertiesConfigurationARM, got %T", armInput)
	}

	// Set property ‘WebTest’:
	if typedInput.WebTest != nil {
		webTest := *typedInput.WebTest
		configuration.WebTest = &webTest
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesConfiguration populates our WebTestPropertiesConfiguration from the provided source WebTestPropertiesConfiguration
func (configuration *WebTestPropertiesConfiguration) AssignPropertiesFromWebTestPropertiesConfiguration(source *v1alpha1api20180501previewstorage.WebTestPropertiesConfiguration) error {

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesConfiguration populates the provided destination WebTestPropertiesConfiguration from our WebTestPropertiesConfiguration
func (configuration *WebTestPropertiesConfiguration) AssignPropertiesToWebTestPropertiesConfiguration(destination *v1alpha1api20180501previewstorage.WebTestPropertiesConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"basic","multistep","ping","standard"}
type WebTestPropertiesKind string

const (
	WebTestPropertiesKindBasic     = WebTestPropertiesKind("basic")
	WebTestPropertiesKindMultistep = WebTestPropertiesKind("multistep")
	WebTestPropertiesKindPing      = WebTestPropertiesKind("ping")
	WebTestPropertiesKindStandard  = WebTestPropertiesKind("standard")
)

type WebTestPropertiesRequest struct {
	//FollowRedirects: Follow redirects for this web test.
	FollowRedirects *bool `json:"FollowRedirects,omitempty"`

	//Headers: List of headers and their values to add to the WebTest call.
	Headers []HeaderField `json:"Headers,omitempty"`

	//HttpVerb: Http verb to use for this web test.
	HttpVerb *string `json:"HttpVerb,omitempty"`

	//ParseDependentRequests: Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `json:"ParseDependentRequests,omitempty"`

	//RequestBody: Base64 encoded string body to send with this web test.
	RequestBody *string `json:"RequestBody,omitempty"`

	//RequestUrl: Url location to test.
	RequestUrl *string `json:"RequestUrl,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestPropertiesRequest{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (request *WebTestPropertiesRequest) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if request == nil {
		return nil, nil
	}
	var result WebTestPropertiesRequestARM

	// Set property ‘FollowRedirects’:
	if request.FollowRedirects != nil {
		followRedirects := *request.FollowRedirects
		result.FollowRedirects = &followRedirects
	}

	// Set property ‘Headers’:
	for _, item := range request.Headers {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Headers = append(result.Headers, itemARM.(HeaderFieldARM))
	}

	// Set property ‘HttpVerb’:
	if request.HttpVerb != nil {
		httpVerb := *request.HttpVerb
		result.HttpVerb = &httpVerb
	}

	// Set property ‘ParseDependentRequests’:
	if request.ParseDependentRequests != nil {
		parseDependentRequests := *request.ParseDependentRequests
		result.ParseDependentRequests = &parseDependentRequests
	}

	// Set property ‘RequestBody’:
	if request.RequestBody != nil {
		requestBody := *request.RequestBody
		result.RequestBody = &requestBody
	}

	// Set property ‘RequestUrl’:
	if request.RequestUrl != nil {
		requestUrl := *request.RequestUrl
		result.RequestUrl = &requestUrl
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (request *WebTestPropertiesRequest) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestPropertiesRequestARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (request *WebTestPropertiesRequest) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestPropertiesRequestARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestPropertiesRequestARM, got %T", armInput)
	}

	// Set property ‘FollowRedirects’:
	if typedInput.FollowRedirects != nil {
		followRedirects := *typedInput.FollowRedirects
		request.FollowRedirects = &followRedirects
	}

	// Set property ‘Headers’:
	for _, item := range typedInput.Headers {
		var item1 HeaderField
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		request.Headers = append(request.Headers, item1)
	}

	// Set property ‘HttpVerb’:
	if typedInput.HttpVerb != nil {
		httpVerb := *typedInput.HttpVerb
		request.HttpVerb = &httpVerb
	}

	// Set property ‘ParseDependentRequests’:
	if typedInput.ParseDependentRequests != nil {
		parseDependentRequests := *typedInput.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequests
	}

	// Set property ‘RequestBody’:
	if typedInput.RequestBody != nil {
		requestBody := *typedInput.RequestBody
		request.RequestBody = &requestBody
	}

	// Set property ‘RequestUrl’:
	if typedInput.RequestUrl != nil {
		requestUrl := *typedInput.RequestUrl
		request.RequestUrl = &requestUrl
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesRequest populates our WebTestPropertiesRequest from the provided source WebTestPropertiesRequest
func (request *WebTestPropertiesRequest) AssignPropertiesFromWebTestPropertiesRequest(source *v1alpha1api20180501previewstorage.WebTestPropertiesRequest) error {

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField
			err := header.AssignPropertiesFromHeaderField(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromHeaderField() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesRequest populates the provided destination WebTestPropertiesRequest from our WebTestPropertiesRequest
func (request *WebTestPropertiesRequest) AssignPropertiesToWebTestPropertiesRequest(destination *v1alpha1api20180501previewstorage.WebTestPropertiesRequest) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v1alpha1api20180501previewstorage.HeaderField, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v1alpha1api20180501previewstorage.HeaderField
			err := headerItem.AssignPropertiesToHeaderField(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToHeaderField() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestPropertiesValidationRules struct {
	//ContentValidation: The collection of content validation properties
	ContentValidation *WebTestPropertiesValidationRulesContentValidation `json:"ContentValidation,omitempty"`

	//ExpectedHttpStatusCode: Validate that the WebTest returns the http status code
	//provided.
	ExpectedHttpStatusCode *int `json:"ExpectedHttpStatusCode,omitempty"`

	//IgnoreHttpsStatusCode: When set, validation will ignore the status code.
	IgnoreHttpsStatusCode *bool `json:"IgnoreHttpsStatusCode,omitempty"`

	//SSLCertRemainingLifetimeCheck: A number of days to check still remain before the
	//the existing SSL cert expires.  Value must be positive and the SSLCheck must be
	//set to true.
	SSLCertRemainingLifetimeCheck *int `json:"SSLCertRemainingLifetimeCheck,omitempty"`

	//SSLCheck: Checks to see if the SSL cert is still valid.
	SSLCheck *bool `json:"SSLCheck,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestPropertiesValidationRules{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rules *WebTestPropertiesValidationRules) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rules == nil {
		return nil, nil
	}
	var result WebTestPropertiesValidationRulesARM

	// Set property ‘ContentValidation’:
	if rules.ContentValidation != nil {
		contentValidationARM, err := (*rules.ContentValidation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		contentValidation := contentValidationARM.(WebTestPropertiesValidationRulesContentValidationARM)
		result.ContentValidation = &contentValidation
	}

	// Set property ‘ExpectedHttpStatusCode’:
	if rules.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *rules.ExpectedHttpStatusCode
		result.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property ‘IgnoreHttpsStatusCode’:
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		result.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property ‘SSLCertRemainingLifetimeCheck’:
	if rules.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *rules.SSLCertRemainingLifetimeCheck
		result.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property ‘SSLCheck’:
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		result.SSLCheck = &sslCheck
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *WebTestPropertiesValidationRules) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestPropertiesValidationRulesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *WebTestPropertiesValidationRules) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestPropertiesValidationRulesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestPropertiesValidationRulesARM, got %T", armInput)
	}

	// Set property ‘ContentValidation’:
	if typedInput.ContentValidation != nil {
		var contentValidation1 WebTestPropertiesValidationRulesContentValidation
		err := contentValidation1.PopulateFromARM(owner, *typedInput.ContentValidation)
		if err != nil {
			return err
		}
		contentValidation := contentValidation1
		rules.ContentValidation = &contentValidation
	}

	// Set property ‘ExpectedHttpStatusCode’:
	if typedInput.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *typedInput.ExpectedHttpStatusCode
		rules.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property ‘IgnoreHttpsStatusCode’:
	if typedInput.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *typedInput.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property ‘SSLCertRemainingLifetimeCheck’:
	if typedInput.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *typedInput.SSLCertRemainingLifetimeCheck
		rules.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property ‘SSLCheck’:
	if typedInput.SSLCheck != nil {
		sslCheck := *typedInput.SSLCheck
		rules.SSLCheck = &sslCheck
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesValidationRules populates our WebTestPropertiesValidationRules from the provided source WebTestPropertiesValidationRules
func (rules *WebTestPropertiesValidationRules) AssignPropertiesFromWebTestPropertiesValidationRules(source *v1alpha1api20180501previewstorage.WebTestPropertiesValidationRules) error {

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestPropertiesValidationRulesContentValidation
		err := contentValidation.AssignPropertiesFromWebTestPropertiesValidationRulesContentValidation(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestPropertiesValidationRulesContentValidation() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesValidationRules populates the provided destination WebTestPropertiesValidationRules from our WebTestPropertiesValidationRules
func (rules *WebTestPropertiesValidationRules) AssignPropertiesToWebTestPropertiesValidationRules(destination *v1alpha1api20180501previewstorage.WebTestPropertiesValidationRules) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v1alpha1api20180501previewstorage.WebTestPropertiesValidationRulesContentValidation
		err := rules.ContentValidation.AssignPropertiesToWebTestPropertiesValidationRulesContentValidation(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestPropertiesValidationRulesContentValidation() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_StatusConfiguration struct {
	//WebTest: The XML specification of a WebTest to run against an application.
	WebTest *string `json:"WebTest,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_StatusConfiguration{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WebTestProperties_StatusConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_StatusConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WebTestProperties_StatusConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_StatusConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_StatusConfigurationARM, got %T", armInput)
	}

	// Set property ‘WebTest’:
	if typedInput.WebTest != nil {
		webTest := *typedInput.WebTest
		configuration.WebTest = &webTest
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestProperties_StatusConfiguration populates our WebTestProperties_StatusConfiguration from the provided source WebTestProperties_StatusConfiguration
func (configuration *WebTestProperties_StatusConfiguration) AssignPropertiesFromWebTestProperties_StatusConfiguration(source *v1alpha1api20180501previewstorage.WebTestProperties_StatusConfiguration) error {

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// No error
	return nil
}

// AssignPropertiesToWebTestProperties_StatusConfiguration populates the provided destination WebTestProperties_StatusConfiguration from our WebTestProperties_StatusConfiguration
func (configuration *WebTestProperties_StatusConfiguration) AssignPropertiesToWebTestProperties_StatusConfiguration(destination *v1alpha1api20180501previewstorage.WebTestProperties_StatusConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_StatusRequest struct {
	//FollowRedirects: Follow redirects for this web test.
	FollowRedirects *bool `json:"FollowRedirects,omitempty"`

	//Headers: List of headers and their values to add to the WebTest call.
	Headers []HeaderField_Status `json:"Headers,omitempty"`

	//HttpVerb: Http verb to use for this web test.
	HttpVerb *string `json:"HttpVerb,omitempty"`

	//ParseDependentRequests: Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `json:"ParseDependentRequests,omitempty"`

	//RequestBody: Base64 encoded string body to send with this web test.
	RequestBody *string `json:"RequestBody,omitempty"`

	//RequestUrl: Url location to test.
	RequestUrl *string `json:"RequestUrl,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_StatusRequest{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (request *WebTestProperties_StatusRequest) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_StatusRequestARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (request *WebTestProperties_StatusRequest) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_StatusRequestARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_StatusRequestARM, got %T", armInput)
	}

	// Set property ‘FollowRedirects’:
	if typedInput.FollowRedirects != nil {
		followRedirects := *typedInput.FollowRedirects
		request.FollowRedirects = &followRedirects
	}

	// Set property ‘Headers’:
	for _, item := range typedInput.Headers {
		var item1 HeaderField_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		request.Headers = append(request.Headers, item1)
	}

	// Set property ‘HttpVerb’:
	if typedInput.HttpVerb != nil {
		httpVerb := *typedInput.HttpVerb
		request.HttpVerb = &httpVerb
	}

	// Set property ‘ParseDependentRequests’:
	if typedInput.ParseDependentRequests != nil {
		parseDependentRequests := *typedInput.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequests
	}

	// Set property ‘RequestBody’:
	if typedInput.RequestBody != nil {
		requestBody := *typedInput.RequestBody
		request.RequestBody = &requestBody
	}

	// Set property ‘RequestUrl’:
	if typedInput.RequestUrl != nil {
		requestUrl := *typedInput.RequestUrl
		request.RequestUrl = &requestUrl
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestProperties_StatusRequest populates our WebTestProperties_StatusRequest from the provided source WebTestProperties_StatusRequest
func (request *WebTestProperties_StatusRequest) AssignPropertiesFromWebTestProperties_StatusRequest(source *v1alpha1api20180501previewstorage.WebTestProperties_StatusRequest) error {

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField_Status, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField_Status
			err := header.AssignPropertiesFromHeaderField_Status(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromHeaderField_Status() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// No error
	return nil
}

// AssignPropertiesToWebTestProperties_StatusRequest populates the provided destination WebTestProperties_StatusRequest from our WebTestProperties_StatusRequest
func (request *WebTestProperties_StatusRequest) AssignPropertiesToWebTestProperties_StatusRequest(destination *v1alpha1api20180501previewstorage.WebTestProperties_StatusRequest) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v1alpha1api20180501previewstorage.HeaderField_Status, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v1alpha1api20180501previewstorage.HeaderField_Status
			err := headerItem.AssignPropertiesToHeaderField_Status(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToHeaderField_Status() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_StatusValidationRules struct {
	//ContentValidation: The collection of content validation properties
	ContentValidation *WebTestProperties_StatusValidationRulesContentValidation `json:"ContentValidation,omitempty"`

	//ExpectedHttpStatusCode: Validate that the WebTest returns the http status code
	//provided.
	ExpectedHttpStatusCode *int `json:"ExpectedHttpStatusCode,omitempty"`

	//IgnoreHttpsStatusCode: When set, validation will ignore the status code.
	IgnoreHttpsStatusCode *bool `json:"IgnoreHttpsStatusCode,omitempty"`

	//SSLCertRemainingLifetimeCheck: A number of days to check still remain before the
	//the existing SSL cert expires.  Value must be positive and the SSLCheck must be
	//set to true.
	SSLCertRemainingLifetimeCheck *int `json:"SSLCertRemainingLifetimeCheck,omitempty"`

	//SSLCheck: Checks to see if the SSL cert is still valid.
	SSLCheck *bool `json:"SSLCheck,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_StatusValidationRules{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *WebTestProperties_StatusValidationRules) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_StatusValidationRulesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *WebTestProperties_StatusValidationRules) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_StatusValidationRulesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_StatusValidationRulesARM, got %T", armInput)
	}

	// Set property ‘ContentValidation’:
	if typedInput.ContentValidation != nil {
		var contentValidation1 WebTestProperties_StatusValidationRulesContentValidation
		err := contentValidation1.PopulateFromARM(owner, *typedInput.ContentValidation)
		if err != nil {
			return err
		}
		contentValidation := contentValidation1
		rules.ContentValidation = &contentValidation
	}

	// Set property ‘ExpectedHttpStatusCode’:
	if typedInput.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *typedInput.ExpectedHttpStatusCode
		rules.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property ‘IgnoreHttpsStatusCode’:
	if typedInput.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *typedInput.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property ‘SSLCertRemainingLifetimeCheck’:
	if typedInput.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *typedInput.SSLCertRemainingLifetimeCheck
		rules.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property ‘SSLCheck’:
	if typedInput.SSLCheck != nil {
		sslCheck := *typedInput.SSLCheck
		rules.SSLCheck = &sslCheck
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestProperties_StatusValidationRules populates our WebTestProperties_StatusValidationRules from the provided source WebTestProperties_StatusValidationRules
func (rules *WebTestProperties_StatusValidationRules) AssignPropertiesFromWebTestProperties_StatusValidationRules(source *v1alpha1api20180501previewstorage.WebTestProperties_StatusValidationRules) error {

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestProperties_StatusValidationRulesContentValidation
		err := contentValidation.AssignPropertiesFromWebTestProperties_StatusValidationRulesContentValidation(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWebTestProperties_StatusValidationRulesContentValidation() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestProperties_StatusValidationRules populates the provided destination WebTestProperties_StatusValidationRules from our WebTestProperties_StatusValidationRules
func (rules *WebTestProperties_StatusValidationRules) AssignPropertiesToWebTestProperties_StatusValidationRules(destination *v1alpha1api20180501previewstorage.WebTestProperties_StatusValidationRules) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v1alpha1api20180501previewstorage.WebTestProperties_StatusValidationRulesContentValidation
		err := rules.ContentValidation.AssignPropertiesToWebTestProperties_StatusValidationRulesContentValidation(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWebTestProperties_StatusValidationRulesContentValidation() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HeaderField struct {
	//Key: The name of the header.
	Key *string `json:"key,omitempty"`

	//Value: The value of the header.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &HeaderField{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (field *HeaderField) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if field == nil {
		return nil, nil
	}
	var result HeaderFieldARM

	// Set property ‘Key’:
	if field.Key != nil {
		key := *field.Key
		result.Key = &key
	}

	// Set property ‘Value’:
	if field.Value != nil {
		value := *field.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (field *HeaderField) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderFieldARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (field *HeaderField) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderFieldARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderFieldARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		field.Key = &key
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		field.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromHeaderField populates our HeaderField from the provided source HeaderField
func (field *HeaderField) AssignPropertiesFromHeaderField(source *v1alpha1api20180501previewstorage.HeaderField) error {

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToHeaderField populates the provided destination HeaderField from our HeaderField
func (field *HeaderField) AssignPropertiesToHeaderField(destination *v1alpha1api20180501previewstorage.HeaderField) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HeaderField_Status struct {
	//Key: The name of the header.
	Key *string `json:"key,omitempty"`

	//Value: The value of the header.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &HeaderField_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (field *HeaderField_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderField_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (field *HeaderField_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderField_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderField_StatusARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		field.Key = &key
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		field.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromHeaderField_Status populates our HeaderField_Status from the provided source HeaderField_Status
func (field *HeaderField_Status) AssignPropertiesFromHeaderField_Status(source *v1alpha1api20180501previewstorage.HeaderField_Status) error {

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToHeaderField_Status populates the provided destination HeaderField_Status from our HeaderField_Status
func (field *HeaderField_Status) AssignPropertiesToHeaderField_Status(destination *v1alpha1api20180501previewstorage.HeaderField_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestPropertiesValidationRulesContentValidation struct {
	//ContentMatch: Content to look for in the return of the WebTest.  Must not be
	//null or empty.
	ContentMatch *string `json:"ContentMatch,omitempty"`

	//IgnoreCase: When set, this value makes the ContentMatch validation case
	//insensitive.
	IgnoreCase *bool `json:"IgnoreCase,omitempty"`

	//PassIfTextFound: When true, validation will pass if there is a match for the
	//ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `json:"PassIfTextFound,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestPropertiesValidationRulesContentValidation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (validation *WebTestPropertiesValidationRulesContentValidation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if validation == nil {
		return nil, nil
	}
	var result WebTestPropertiesValidationRulesContentValidationARM

	// Set property ‘ContentMatch’:
	if validation.ContentMatch != nil {
		contentMatch := *validation.ContentMatch
		result.ContentMatch = &contentMatch
	}

	// Set property ‘IgnoreCase’:
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		result.IgnoreCase = &ignoreCase
	}

	// Set property ‘PassIfTextFound’:
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		result.PassIfTextFound = &passIfTextFound
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (validation *WebTestPropertiesValidationRulesContentValidation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestPropertiesValidationRulesContentValidationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (validation *WebTestPropertiesValidationRulesContentValidation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestPropertiesValidationRulesContentValidationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestPropertiesValidationRulesContentValidationARM, got %T", armInput)
	}

	// Set property ‘ContentMatch’:
	if typedInput.ContentMatch != nil {
		contentMatch := *typedInput.ContentMatch
		validation.ContentMatch = &contentMatch
	}

	// Set property ‘IgnoreCase’:
	if typedInput.IgnoreCase != nil {
		ignoreCase := *typedInput.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	}

	// Set property ‘PassIfTextFound’:
	if typedInput.PassIfTextFound != nil {
		passIfTextFound := *typedInput.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestPropertiesValidationRulesContentValidation populates our WebTestPropertiesValidationRulesContentValidation from the provided source WebTestPropertiesValidationRulesContentValidation
func (validation *WebTestPropertiesValidationRulesContentValidation) AssignPropertiesFromWebTestPropertiesValidationRulesContentValidation(source *v1alpha1api20180501previewstorage.WebTestPropertiesValidationRulesContentValidation) error {

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestPropertiesValidationRulesContentValidation populates the provided destination WebTestPropertiesValidationRulesContentValidation from our WebTestPropertiesValidationRulesContentValidation
func (validation *WebTestPropertiesValidationRulesContentValidation) AssignPropertiesToWebTestPropertiesValidationRulesContentValidation(destination *v1alpha1api20180501previewstorage.WebTestPropertiesValidationRulesContentValidation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WebTestProperties_StatusValidationRulesContentValidation struct {
	//ContentMatch: Content to look for in the return of the WebTest.  Must not be
	//null or empty.
	ContentMatch *string `json:"ContentMatch,omitempty"`

	//IgnoreCase: When set, this value makes the ContentMatch validation case
	//insensitive.
	IgnoreCase *bool `json:"IgnoreCase,omitempty"`

	//PassIfTextFound: When true, validation will pass if there is a match for the
	//ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `json:"PassIfTextFound,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_StatusValidationRulesContentValidation{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (validation *WebTestProperties_StatusValidationRulesContentValidation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_StatusValidationRulesContentValidationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (validation *WebTestProperties_StatusValidationRulesContentValidation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_StatusValidationRulesContentValidationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_StatusValidationRulesContentValidationARM, got %T", armInput)
	}

	// Set property ‘ContentMatch’:
	if typedInput.ContentMatch != nil {
		contentMatch := *typedInput.ContentMatch
		validation.ContentMatch = &contentMatch
	}

	// Set property ‘IgnoreCase’:
	if typedInput.IgnoreCase != nil {
		ignoreCase := *typedInput.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	}

	// Set property ‘PassIfTextFound’:
	if typedInput.PassIfTextFound != nil {
		passIfTextFound := *typedInput.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	}

	// No error
	return nil
}

// AssignPropertiesFromWebTestProperties_StatusValidationRulesContentValidation populates our WebTestProperties_StatusValidationRulesContentValidation from the provided source WebTestProperties_StatusValidationRulesContentValidation
func (validation *WebTestProperties_StatusValidationRulesContentValidation) AssignPropertiesFromWebTestProperties_StatusValidationRulesContentValidation(source *v1alpha1api20180501previewstorage.WebTestProperties_StatusValidationRulesContentValidation) error {

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebTestProperties_StatusValidationRulesContentValidation populates the provided destination WebTestProperties_StatusValidationRulesContentValidation from our WebTestProperties_StatusValidationRulesContentValidation
func (validation *WebTestProperties_StatusValidationRulesContentValidation) AssignPropertiesToWebTestProperties_StatusValidationRulesContentValidation(destination *v1alpha1api20180501previewstorage.WebTestProperties_StatusValidationRulesContentValidation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Webtest{}, &WebtestList{})
}
