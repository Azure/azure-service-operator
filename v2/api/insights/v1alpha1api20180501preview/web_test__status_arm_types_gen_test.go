// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_WebTest_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTest_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTest_StatusARM, WebTest_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTest_StatusARM runs a test to see if a specific instance of WebTest_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTest_StatusARM(subject WebTest_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTest_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTest_StatusARM instances for property testing - lazily instantiated by WebTest_StatusARMGenerator()
var webTest_statusARMGenerator gopter.Gen

// WebTest_StatusARMGenerator returns a generator of WebTest_StatusARM instances for property testing.
// We first initialize webTest_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTest_StatusARMGenerator() gopter.Gen {
	if webTest_statusARMGenerator != nil {
		return webTest_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTest_StatusARM(generators)
	webTest_statusARMGenerator = gen.Struct(reflect.TypeOf(WebTest_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTest_StatusARM(generators)
	AddRelatedPropertyGeneratorsForWebTest_StatusARM(generators)
	webTest_statusARMGenerator = gen.Struct(reflect.TypeOf(WebTest_StatusARM{}), generators)

	return webTest_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTest_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTest_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTest_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTest_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WebTestProperties_StatusARMGenerator())
}

func Test_WebTestProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_StatusARM, WebTestProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_StatusARM runs a test to see if a specific instance of WebTestProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_StatusARM(subject WebTestProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_StatusARM instances for property testing - lazily instantiated by
//WebTestProperties_StatusARMGenerator()
var webTestProperties_statusARMGenerator gopter.Gen

// WebTestProperties_StatusARMGenerator returns a generator of WebTestProperties_StatusARM instances for property testing.
// We first initialize webTestProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_StatusARMGenerator() gopter.Gen {
	if webTestProperties_statusARMGenerator != nil {
		return webTestProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusARM(generators)
	webTestProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_StatusARM(generators)
	webTestProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusARM{}), generators)

	return webTestProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Kind"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.AlphaString()
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestProperties_StatusConfigurationARMGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocation_StatusARMGenerator())
	gens["Request"] = gen.PtrOf(WebTestProperties_StatusRequestARMGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestProperties_StatusValidationRulesARMGenerator())
}

func Test_WebTestGeolocation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocation_StatusARM, WebTestGeolocation_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocation_StatusARM runs a test to see if a specific instance of WebTestGeolocation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocation_StatusARM(subject WebTestGeolocation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_StatusARM instances for property testing - lazily instantiated by
//WebTestGeolocation_StatusARMGenerator()
var webTestGeolocation_statusARMGenerator gopter.Gen

// WebTestGeolocation_StatusARMGenerator returns a generator of WebTestGeolocation_StatusARM instances for property testing.
func WebTestGeolocation_StatusARMGenerator() gopter.Gen {
	if webTestGeolocation_statusARMGenerator != nil {
		return webTestGeolocation_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocation_StatusARM(generators)
	webTestGeolocation_statusARMGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_StatusARM{}), generators)

	return webTestGeolocation_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocation_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocation_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_StatusConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_StatusConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_StatusConfigurationARM, WebTestProperties_StatusConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_StatusConfigurationARM runs a test to see if a specific instance of WebTestProperties_StatusConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_StatusConfigurationARM(subject WebTestProperties_StatusConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_StatusConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_StatusConfigurationARM instances for property testing - lazily instantiated by
//WebTestProperties_StatusConfigurationARMGenerator()
var webTestProperties_statusConfigurationARMGenerator gopter.Gen

// WebTestProperties_StatusConfigurationARMGenerator returns a generator of WebTestProperties_StatusConfigurationARM instances for property testing.
func WebTestProperties_StatusConfigurationARMGenerator() gopter.Gen {
	if webTestProperties_statusConfigurationARMGenerator != nil {
		return webTestProperties_statusConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusConfigurationARM(generators)
	webTestProperties_statusConfigurationARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusConfigurationARM{}), generators)

	return webTestProperties_statusConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_StatusConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_StatusConfigurationARM(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_StatusRequestARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_StatusRequestARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_StatusRequestARM, WebTestProperties_StatusRequestARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_StatusRequestARM runs a test to see if a specific instance of WebTestProperties_StatusRequestARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_StatusRequestARM(subject WebTestProperties_StatusRequestARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_StatusRequestARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_StatusRequestARM instances for property testing - lazily instantiated by
//WebTestProperties_StatusRequestARMGenerator()
var webTestProperties_statusRequestARMGenerator gopter.Gen

// WebTestProperties_StatusRequestARMGenerator returns a generator of WebTestProperties_StatusRequestARM instances for property testing.
// We first initialize webTestProperties_statusRequestARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_StatusRequestARMGenerator() gopter.Gen {
	if webTestProperties_statusRequestARMGenerator != nil {
		return webTestProperties_statusRequestARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusRequestARM(generators)
	webTestProperties_statusRequestARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusRequestARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusRequestARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_StatusRequestARM(generators)
	webTestProperties_statusRequestARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusRequestARM{}), generators)

	return webTestProperties_statusRequestARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_StatusRequestARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_StatusRequestARM(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_StatusRequestARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_StatusRequestARM(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderField_StatusARMGenerator())
}

func Test_WebTestProperties_StatusValidationRulesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_StatusValidationRulesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_StatusValidationRulesARM, WebTestProperties_StatusValidationRulesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_StatusValidationRulesARM runs a test to see if a specific instance of WebTestProperties_StatusValidationRulesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_StatusValidationRulesARM(subject WebTestProperties_StatusValidationRulesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_StatusValidationRulesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_StatusValidationRulesARM instances for property testing - lazily instantiated by
//WebTestProperties_StatusValidationRulesARMGenerator()
var webTestProperties_statusValidationRulesARMGenerator gopter.Gen

// WebTestProperties_StatusValidationRulesARMGenerator returns a generator of WebTestProperties_StatusValidationRulesARM instances for property testing.
// We first initialize webTestProperties_statusValidationRulesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_StatusValidationRulesARMGenerator() gopter.Gen {
	if webTestProperties_statusValidationRulesARMGenerator != nil {
		return webTestProperties_statusValidationRulesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusValidationRulesARM(generators)
	webTestProperties_statusValidationRulesARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusValidationRulesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusValidationRulesARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_StatusValidationRulesARM(generators)
	webTestProperties_statusValidationRulesARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusValidationRulesARM{}), generators)

	return webTestProperties_statusValidationRulesARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_StatusValidationRulesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_StatusValidationRulesARM(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_StatusValidationRulesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_StatusValidationRulesARM(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestProperties_StatusValidationRulesContentValidationARMGenerator())
}

func Test_HeaderField_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderField_StatusARM, HeaderField_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderField_StatusARM runs a test to see if a specific instance of HeaderField_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderField_StatusARM(subject HeaderField_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_StatusARM instances for property testing - lazily instantiated by
//HeaderField_StatusARMGenerator()
var headerField_statusARMGenerator gopter.Gen

// HeaderField_StatusARMGenerator returns a generator of HeaderField_StatusARM instances for property testing.
func HeaderField_StatusARMGenerator() gopter.Gen {
	if headerField_statusARMGenerator != nil {
		return headerField_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderField_StatusARM(generators)
	headerField_statusARMGenerator = gen.Struct(reflect.TypeOf(HeaderField_StatusARM{}), generators)

	return headerField_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderField_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderField_StatusARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_StatusValidationRulesContentValidationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_StatusValidationRulesContentValidationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_StatusValidationRulesContentValidationARM, WebTestProperties_StatusValidationRulesContentValidationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_StatusValidationRulesContentValidationARM runs a test to see if a specific instance of WebTestProperties_StatusValidationRulesContentValidationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_StatusValidationRulesContentValidationARM(subject WebTestProperties_StatusValidationRulesContentValidationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_StatusValidationRulesContentValidationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_StatusValidationRulesContentValidationARM instances for property testing - lazily
//instantiated by WebTestProperties_StatusValidationRulesContentValidationARMGenerator()
var webTestProperties_statusValidationRulesContentValidationARMGenerator gopter.Gen

// WebTestProperties_StatusValidationRulesContentValidationARMGenerator returns a generator of WebTestProperties_StatusValidationRulesContentValidationARM instances for property testing.
func WebTestProperties_StatusValidationRulesContentValidationARMGenerator() gopter.Gen {
	if webTestProperties_statusValidationRulesContentValidationARMGenerator != nil {
		return webTestProperties_statusValidationRulesContentValidationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_StatusValidationRulesContentValidationARM(generators)
	webTestProperties_statusValidationRulesContentValidationARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusValidationRulesContentValidationARM{}), generators)

	return webTestProperties_statusValidationRulesContentValidationARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_StatusValidationRulesContentValidationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_StatusValidationRulesContentValidationARM(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}
