// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_WebTest_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTest_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestStatusARM, WebTestStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestStatusARM runs a test to see if a specific instance of WebTest_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestStatusARM(subject WebTest_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTest_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTest_StatusARM instances for property testing - lazily instantiated by WebTestStatusARMGenerator()
var webTestStatusARMGenerator gopter.Gen

// WebTestStatusARMGenerator returns a generator of WebTest_StatusARM instances for property testing.
// We first initialize webTestStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestStatusARMGenerator() gopter.Gen {
	if webTestStatusARMGenerator != nil {
		return webTestStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestStatusARM(generators)
	webTestStatusARMGenerator = gen.Struct(reflect.TypeOf(WebTest_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestStatusARM(generators)
	AddRelatedPropertyGeneratorsForWebTestStatusARM(generators)
	webTestStatusARMGenerator = gen.Struct(reflect.TypeOf(WebTest_StatusARM{}), generators)

	return webTestStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WebTestPropertiesStatusARMGenerator())
}

func Test_WebTestProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusARM, WebTestPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusARM runs a test to see if a specific instance of WebTestProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusARM(subject WebTestProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_StatusARM instances for property testing - lazily instantiated by
//WebTestPropertiesStatusARMGenerator()
var webTestPropertiesStatusARMGenerator gopter.Gen

// WebTestPropertiesStatusARMGenerator returns a generator of WebTestProperties_StatusARM instances for property testing.
// We first initialize webTestPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesStatusARMGenerator() gopter.Gen {
	if webTestPropertiesStatusARMGenerator != nil {
		return webTestPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusARM(generators)
	webTestPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesStatusARM(generators)
	webTestPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_StatusARM{}), generators)

	return webTestPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Kind"] = gen.OneConstOf(
		WebTestPropertiesStatusKindBasic,
		WebTestPropertiesStatusKindMultistep,
		WebTestPropertiesStatusKindPing,
		WebTestPropertiesStatusKindStandard)
	gens["Name"] = gen.AlphaString()
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.AlphaString()
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestPropertiesStatusConfigurationARMGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocationStatusARMGenerator())
	gens["Request"] = gen.PtrOf(WebTestPropertiesStatusRequestARMGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestPropertiesStatusValidationRulesARMGenerator())
}

func Test_WebTestGeolocation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocationStatusARM, WebTestGeolocationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocationStatusARM runs a test to see if a specific instance of WebTestGeolocation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocationStatusARM(subject WebTestGeolocation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_StatusARM instances for property testing - lazily instantiated by
//WebTestGeolocationStatusARMGenerator()
var webTestGeolocationStatusARMGenerator gopter.Gen

// WebTestGeolocationStatusARMGenerator returns a generator of WebTestGeolocation_StatusARM instances for property testing.
func WebTestGeolocationStatusARMGenerator() gopter.Gen {
	if webTestGeolocationStatusARMGenerator != nil {
		return webTestGeolocationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocationStatusARM(generators)
	webTestGeolocationStatusARMGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_StatusARM{}), generators)

	return webTestGeolocationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocationStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Status_ConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_ConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusConfigurationARM, WebTestPropertiesStatusConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusConfigurationARM runs a test to see if a specific instance of WebTestProperties_Status_ConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusConfigurationARM(subject WebTestProperties_Status_ConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_ConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_ConfigurationARM instances for property testing - lazily instantiated by
//WebTestPropertiesStatusConfigurationARMGenerator()
var webTestPropertiesStatusConfigurationARMGenerator gopter.Gen

// WebTestPropertiesStatusConfigurationARMGenerator returns a generator of WebTestProperties_Status_ConfigurationARM instances for property testing.
func WebTestPropertiesStatusConfigurationARMGenerator() gopter.Gen {
	if webTestPropertiesStatusConfigurationARMGenerator != nil {
		return webTestPropertiesStatusConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusConfigurationARM(generators)
	webTestPropertiesStatusConfigurationARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_ConfigurationARM{}), generators)

	return webTestPropertiesStatusConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusConfigurationARM(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Status_RequestARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_RequestARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusRequestARM, WebTestPropertiesStatusRequestARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusRequestARM runs a test to see if a specific instance of WebTestProperties_Status_RequestARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusRequestARM(subject WebTestProperties_Status_RequestARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_RequestARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_RequestARM instances for property testing - lazily instantiated by
//WebTestPropertiesStatusRequestARMGenerator()
var webTestPropertiesStatusRequestARMGenerator gopter.Gen

// WebTestPropertiesStatusRequestARMGenerator returns a generator of WebTestProperties_Status_RequestARM instances for property testing.
// We first initialize webTestPropertiesStatusRequestARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesStatusRequestARMGenerator() gopter.Gen {
	if webTestPropertiesStatusRequestARMGenerator != nil {
		return webTestPropertiesStatusRequestARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequestARM(generators)
	webTestPropertiesStatusRequestARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_RequestARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequestARM(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesStatusRequestARM(generators)
	webTestPropertiesStatusRequestARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_RequestARM{}), generators)

	return webTestPropertiesStatusRequestARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequestARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequestARM(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesStatusRequestARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesStatusRequestARM(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderFieldStatusARMGenerator())
}

func Test_WebTestProperties_Status_ValidationRulesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_ValidationRulesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesARM, WebTestPropertiesStatusValidationRulesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesARM runs a test to see if a specific instance of WebTestProperties_Status_ValidationRulesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesARM(subject WebTestProperties_Status_ValidationRulesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_ValidationRulesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_ValidationRulesARM instances for property testing - lazily instantiated by
//WebTestPropertiesStatusValidationRulesARMGenerator()
var webTestPropertiesStatusValidationRulesARMGenerator gopter.Gen

// WebTestPropertiesStatusValidationRulesARMGenerator returns a generator of WebTestProperties_Status_ValidationRulesARM instances for property testing.
// We first initialize webTestPropertiesStatusValidationRulesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesStatusValidationRulesARMGenerator() gopter.Gen {
	if webTestPropertiesStatusValidationRulesARMGenerator != nil {
		return webTestPropertiesStatusValidationRulesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesARM(generators)
	webTestPropertiesStatusValidationRulesARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_ValidationRulesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesARM(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesStatusValidationRulesARM(generators)
	webTestPropertiesStatusValidationRulesARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_ValidationRulesARM{}), generators)

	return webTestPropertiesStatusValidationRulesARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesARM(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesStatusValidationRulesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesStatusValidationRulesARM(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestPropertiesStatusValidationRulesContentValidationARMGenerator())
}

func Test_HeaderField_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderFieldStatusARM, HeaderFieldStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderFieldStatusARM runs a test to see if a specific instance of HeaderField_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderFieldStatusARM(subject HeaderField_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_StatusARM instances for property testing - lazily instantiated by
//HeaderFieldStatusARMGenerator()
var headerFieldStatusARMGenerator gopter.Gen

// HeaderFieldStatusARMGenerator returns a generator of HeaderField_StatusARM instances for property testing.
func HeaderFieldStatusARMGenerator() gopter.Gen {
	if headerFieldStatusARMGenerator != nil {
		return headerFieldStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderFieldStatusARM(generators)
	headerFieldStatusARMGenerator = gen.Struct(reflect.TypeOf(HeaderField_StatusARM{}), generators)

	return headerFieldStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderFieldStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderFieldStatusARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Status_ValidationRules_ContentValidationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_ValidationRules_ContentValidationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesContentValidationARM, WebTestPropertiesStatusValidationRulesContentValidationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesContentValidationARM runs a test to see if a specific instance of WebTestProperties_Status_ValidationRules_ContentValidationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesContentValidationARM(subject WebTestProperties_Status_ValidationRules_ContentValidationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_ValidationRules_ContentValidationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_ValidationRules_ContentValidationARM instances for property testing - lazily
//instantiated by WebTestPropertiesStatusValidationRulesContentValidationARMGenerator()
var webTestPropertiesStatusValidationRulesContentValidationARMGenerator gopter.Gen

// WebTestPropertiesStatusValidationRulesContentValidationARMGenerator returns a generator of WebTestProperties_Status_ValidationRules_ContentValidationARM instances for property testing.
func WebTestPropertiesStatusValidationRulesContentValidationARMGenerator() gopter.Gen {
	if webTestPropertiesStatusValidationRulesContentValidationARMGenerator != nil {
		return webTestPropertiesStatusValidationRulesContentValidationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesContentValidationARM(generators)
	webTestPropertiesStatusValidationRulesContentValidationARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_ValidationRules_ContentValidationARM{}), generators)

	return webTestPropertiesStatusValidationRulesContentValidationARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesContentValidationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesContentValidationARM(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}
