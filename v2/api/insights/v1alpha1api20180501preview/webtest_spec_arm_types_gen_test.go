// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Webtest_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Webtest_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebtest_Spec_ARM, Webtest_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebtest_Spec_ARM runs a test to see if a specific instance of Webtest_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebtest_Spec_ARM(subject Webtest_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Webtest_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Webtest_Spec_ARM instances for property testing - lazily instantiated by Webtest_Spec_ARMGenerator()
var webtest_Spec_ARMGenerator gopter.Gen

// Webtest_Spec_ARMGenerator returns a generator of Webtest_Spec_ARM instances for property testing.
// We first initialize webtest_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Webtest_Spec_ARMGenerator() gopter.Gen {
	if webtest_Spec_ARMGenerator != nil {
		return webtest_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtest_Spec_ARM(generators)
	webtest_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Webtest_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtest_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForWebtest_Spec_ARM(generators)
	webtest_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Webtest_Spec_ARM{}), generators)

	return webtest_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebtest_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebtest_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebtest_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebtest_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WebTestProperties_ARMGenerator())
}

func Test_WebTestProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_ARM, WebTestProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_ARM runs a test to see if a specific instance of WebTestProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_ARM(subject WebTestProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_ARM instances for property testing - lazily instantiated by
// WebTestProperties_ARMGenerator()
var webTestProperties_ARMGenerator gopter.Gen

// WebTestProperties_ARMGenerator returns a generator of WebTestProperties_ARM instances for property testing.
// We first initialize webTestProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_ARMGenerator() gopter.Gen {
	if webTestProperties_ARMGenerator != nil {
		return webTestProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ARM(generators)
	webTestProperties_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_ARM(generators)
	webTestProperties_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ARM{}), generators)

	return webTestProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_ARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(
		WebTestProperties_Kind_Basic,
		WebTestProperties_Kind_Multistep,
		WebTestProperties_Kind_Ping,
		WebTestProperties_Kind_Standard))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_ARM(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestProperties_Configuration_ARMGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocation_ARMGenerator())
	gens["Request"] = gen.PtrOf(WebTestProperties_Request_ARMGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestProperties_ValidationRules_ARMGenerator())
}

func Test_WebTestGeolocation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocation_ARM, WebTestGeolocation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocation_ARM runs a test to see if a specific instance of WebTestGeolocation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocation_ARM(subject WebTestGeolocation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_ARM instances for property testing - lazily instantiated by
// WebTestGeolocation_ARMGenerator()
var webTestGeolocation_ARMGenerator gopter.Gen

// WebTestGeolocation_ARMGenerator returns a generator of WebTestGeolocation_ARM instances for property testing.
func WebTestGeolocation_ARMGenerator() gopter.Gen {
	if webTestGeolocation_ARMGenerator != nil {
		return webTestGeolocation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocation_ARM(generators)
	webTestGeolocation_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_ARM{}), generators)

	return webTestGeolocation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocation_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Configuration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Configuration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_Configuration_ARM, WebTestProperties_Configuration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_Configuration_ARM runs a test to see if a specific instance of WebTestProperties_Configuration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_Configuration_ARM(subject WebTestProperties_Configuration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Configuration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Configuration_ARM instances for property testing - lazily instantiated by
// WebTestProperties_Configuration_ARMGenerator()
var webTestProperties_Configuration_ARMGenerator gopter.Gen

// WebTestProperties_Configuration_ARMGenerator returns a generator of WebTestProperties_Configuration_ARM instances for property testing.
func WebTestProperties_Configuration_ARMGenerator() gopter.Gen {
	if webTestProperties_Configuration_ARMGenerator != nil {
		return webTestProperties_Configuration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_Configuration_ARM(generators)
	webTestProperties_Configuration_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Configuration_ARM{}), generators)

	return webTestProperties_Configuration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_Configuration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_Configuration_ARM(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Request_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Request_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_Request_ARM, WebTestProperties_Request_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_Request_ARM runs a test to see if a specific instance of WebTestProperties_Request_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_Request_ARM(subject WebTestProperties_Request_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Request_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Request_ARM instances for property testing - lazily instantiated by
// WebTestProperties_Request_ARMGenerator()
var webTestProperties_Request_ARMGenerator gopter.Gen

// WebTestProperties_Request_ARMGenerator returns a generator of WebTestProperties_Request_ARM instances for property testing.
// We first initialize webTestProperties_Request_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_Request_ARMGenerator() gopter.Gen {
	if webTestProperties_Request_ARMGenerator != nil {
		return webTestProperties_Request_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_Request_ARM(generators)
	webTestProperties_Request_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Request_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_Request_ARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_Request_ARM(generators)
	webTestProperties_Request_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Request_ARM{}), generators)

	return webTestProperties_Request_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_Request_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_Request_ARM(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_Request_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_Request_ARM(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderField_ARMGenerator())
}

func Test_WebTestProperties_ValidationRules_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_ValidationRules_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_ValidationRules_ARM, WebTestProperties_ValidationRules_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_ValidationRules_ARM runs a test to see if a specific instance of WebTestProperties_ValidationRules_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_ValidationRules_ARM(subject WebTestProperties_ValidationRules_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_ValidationRules_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_ValidationRules_ARM instances for property testing - lazily instantiated by
// WebTestProperties_ValidationRules_ARMGenerator()
var webTestProperties_ValidationRules_ARMGenerator gopter.Gen

// WebTestProperties_ValidationRules_ARMGenerator returns a generator of WebTestProperties_ValidationRules_ARM instances for property testing.
// We first initialize webTestProperties_ValidationRules_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_ValidationRules_ARMGenerator() gopter.Gen {
	if webTestProperties_ValidationRules_ARMGenerator != nil {
		return webTestProperties_ValidationRules_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ARM(generators)
	webTestProperties_ValidationRules_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ValidationRules_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_ValidationRules_ARM(generators)
	webTestProperties_ValidationRules_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ValidationRules_ARM{}), generators)

	return webTestProperties_ValidationRules_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ARM(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_ValidationRules_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_ValidationRules_ARM(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestProperties_ValidationRules_ContentValidation_ARMGenerator())
}

func Test_HeaderField_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderField_ARM, HeaderField_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderField_ARM runs a test to see if a specific instance of HeaderField_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderField_ARM(subject HeaderField_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_ARM instances for property testing - lazily instantiated by HeaderField_ARMGenerator()
var headerField_ARMGenerator gopter.Gen

// HeaderField_ARMGenerator returns a generator of HeaderField_ARM instances for property testing.
func HeaderField_ARMGenerator() gopter.Gen {
	if headerField_ARMGenerator != nil {
		return headerField_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderField_ARM(generators)
	headerField_ARMGenerator = gen.Struct(reflect.TypeOf(HeaderField_ARM{}), generators)

	return headerField_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderField_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderField_ARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_ValidationRules_ContentValidation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_ValidationRules_ContentValidation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_ValidationRules_ContentValidation_ARM, WebTestProperties_ValidationRules_ContentValidation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_ValidationRules_ContentValidation_ARM runs a test to see if a specific instance of WebTestProperties_ValidationRules_ContentValidation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_ValidationRules_ContentValidation_ARM(subject WebTestProperties_ValidationRules_ContentValidation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_ValidationRules_ContentValidation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_ValidationRules_ContentValidation_ARM instances for property testing - lazily
// instantiated by WebTestProperties_ValidationRules_ContentValidation_ARMGenerator()
var webTestProperties_ValidationRules_ContentValidation_ARMGenerator gopter.Gen

// WebTestProperties_ValidationRules_ContentValidation_ARMGenerator returns a generator of WebTestProperties_ValidationRules_ContentValidation_ARM instances for property testing.
func WebTestProperties_ValidationRules_ContentValidation_ARMGenerator() gopter.Gen {
	if webTestProperties_ValidationRules_ContentValidation_ARMGenerator != nil {
		return webTestProperties_ValidationRules_ContentValidation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ContentValidation_ARM(generators)
	webTestProperties_ValidationRules_ContentValidation_ARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ValidationRules_ContentValidation_ARM{}), generators)

	return webTestProperties_ValidationRules_ContentValidation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ContentValidation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ContentValidation_ARM(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}
