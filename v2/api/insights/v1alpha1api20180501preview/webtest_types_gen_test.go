// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"encoding/json"
	alpha20180501ps "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501previewstorage"
	v20180501ps "github.com/Azure/azure-service-operator/v2/api/insights/v1beta20180501previewstorage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Webtest_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Webtest to hub returns original",
		prop.ForAll(RunResourceConversionTestForWebtest, WebtestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForWebtest tests if a specific instance of Webtest round trips to the hub storage version and back losslessly
func RunResourceConversionTestForWebtest(subject Webtest) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20180501ps.Webtest
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual Webtest
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Webtest_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Webtest to Webtest via AssignPropertiesToWebtest & AssignPropertiesFromWebtest returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebtest, WebtestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebtest tests if a specific instance of Webtest can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebtest(subject Webtest) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.Webtest
	err := copied.AssignPropertiesToWebtest(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Webtest
	err = actual.AssignPropertiesFromWebtest(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Webtest_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Webtest via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebtest, WebtestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebtest runs a test to see if a specific instance of Webtest round trips to JSON and back losslessly
func RunJSONSerializationTestForWebtest(subject Webtest) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Webtest
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Webtest instances for property testing - lazily instantiated by WebtestGenerator()
var webtestGenerator gopter.Gen

// WebtestGenerator returns a generator of Webtest instances for property testing.
func WebtestGenerator() gopter.Gen {
	if webtestGenerator != nil {
		return webtestGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForWebtest(generators)
	webtestGenerator = gen.Struct(reflect.TypeOf(Webtest{}), generators)

	return webtestGenerator
}

// AddRelatedPropertyGeneratorsForWebtest is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebtest(gens map[string]gopter.Gen) {
	gens["Spec"] = WebtestsSpecGenerator()
	gens["Status"] = WebTestSTATUSGenerator()
}

func Test_WebTest_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTest_STATUS to WebTest_STATUS via AssignPropertiesToWebTestSTATUS & AssignPropertiesFromWebTestSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestSTATUS, WebTestSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestSTATUS tests if a specific instance of WebTest_STATUS can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestSTATUS(subject WebTest_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTest_STATUS
	err := copied.AssignPropertiesToWebTestSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTest_STATUS
	err = actual.AssignPropertiesFromWebTestSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTest_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTest_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestSTATUS, WebTestSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestSTATUS runs a test to see if a specific instance of WebTest_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestSTATUS(subject WebTest_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTest_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTest_STATUS instances for property testing - lazily instantiated by WebTestSTATUSGenerator()
var webTestSTATUSGenerator gopter.Gen

// WebTestSTATUSGenerator returns a generator of WebTest_STATUS instances for property testing.
// We first initialize webTestSTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestSTATUSGenerator() gopter.Gen {
	if webTestSTATUSGenerator != nil {
		return webTestSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestSTATUS(generators)
	webTestSTATUSGenerator = gen.Struct(reflect.TypeOf(WebTest_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestSTATUS(generators)
	AddRelatedPropertyGeneratorsForWebTestSTATUS(generators)
	webTestSTATUSGenerator = gen.Struct(reflect.TypeOf(WebTest_STATUS{}), generators)

	return webTestSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForWebTestSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestSTATUS(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(
		WebTestPropertiesSTATUSKind_Basic,
		WebTestPropertiesSTATUSKind_Multistep,
		WebTestPropertiesSTATUSKind_Ping,
		WebTestPropertiesSTATUSKind_Standard))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PropertiesName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.Int())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestSTATUS(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestPropertiesSTATUSConfigurationGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocationSTATUSGenerator())
	gens["Request"] = gen.PtrOf(WebTestPropertiesSTATUSRequestGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestPropertiesSTATUSValidationRulesGenerator())
}

func Test_Webtests_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Webtests_Spec to Webtests_Spec via AssignPropertiesToWebtestsSpec & AssignPropertiesFromWebtestsSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebtestsSpec, WebtestsSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebtestsSpec tests if a specific instance of Webtests_Spec can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebtestsSpec(subject Webtests_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.Webtests_Spec
	err := copied.AssignPropertiesToWebtestsSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Webtests_Spec
	err = actual.AssignPropertiesFromWebtestsSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Webtests_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Webtests_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebtestsSpec, WebtestsSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebtestsSpec runs a test to see if a specific instance of Webtests_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForWebtestsSpec(subject Webtests_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Webtests_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Webtests_Spec instances for property testing - lazily instantiated by WebtestsSpecGenerator()
var webtestsSpecGenerator gopter.Gen

// WebtestsSpecGenerator returns a generator of Webtests_Spec instances for property testing.
// We first initialize webtestsSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebtestsSpecGenerator() gopter.Gen {
	if webtestsSpecGenerator != nil {
		return webtestsSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtestsSpec(generators)
	webtestsSpecGenerator = gen.Struct(reflect.TypeOf(Webtests_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtestsSpec(generators)
	AddRelatedPropertyGeneratorsForWebtestsSpec(generators)
	webtestsSpecGenerator = gen.Struct(reflect.TypeOf(Webtests_Spec{}), generators)

	return webtestsSpecGenerator
}

// AddIndependentPropertyGeneratorsForWebtestsSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebtestsSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(
		WebTestPropertiesKind_Basic,
		WebTestPropertiesKind_Multistep,
		WebTestPropertiesKind_Ping,
		WebTestPropertiesKind_Standard))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWebtestsSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebtestsSpec(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestPropertiesConfigurationGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocationGenerator())
	gens["Request"] = gen.PtrOf(WebTestPropertiesRequestGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestPropertiesValidationRulesGenerator())
}

func Test_WebTestGeolocation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestGeolocation to WebTestGeolocation via AssignPropertiesToWebTestGeolocation & AssignPropertiesFromWebTestGeolocation returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestGeolocation, WebTestGeolocationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestGeolocation tests if a specific instance of WebTestGeolocation can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestGeolocation(subject WebTestGeolocation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestGeolocation
	err := copied.AssignPropertiesToWebTestGeolocation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestGeolocation
	err = actual.AssignPropertiesFromWebTestGeolocation(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestGeolocation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocation, WebTestGeolocationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocation runs a test to see if a specific instance of WebTestGeolocation round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocation(subject WebTestGeolocation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation instances for property testing - lazily instantiated by WebTestGeolocationGenerator()
var webTestGeolocationGenerator gopter.Gen

// WebTestGeolocationGenerator returns a generator of WebTestGeolocation instances for property testing.
func WebTestGeolocationGenerator() gopter.Gen {
	if webTestGeolocationGenerator != nil {
		return webTestGeolocationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocation(generators)
	webTestGeolocationGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation{}), generators)

	return webTestGeolocationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocation(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestGeolocation_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestGeolocation_STATUS to WebTestGeolocation_STATUS via AssignPropertiesToWebTestGeolocationSTATUS & AssignPropertiesFromWebTestGeolocationSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestGeolocationSTATUS, WebTestGeolocationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestGeolocationSTATUS tests if a specific instance of WebTestGeolocation_STATUS can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestGeolocationSTATUS(subject WebTestGeolocation_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestGeolocation_STATUS
	err := copied.AssignPropertiesToWebTestGeolocationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestGeolocation_STATUS
	err = actual.AssignPropertiesFromWebTestGeolocationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestGeolocation_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocationSTATUS, WebTestGeolocationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocationSTATUS runs a test to see if a specific instance of WebTestGeolocation_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocationSTATUS(subject WebTestGeolocation_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_STATUS instances for property testing - lazily instantiated by
// WebTestGeolocationSTATUSGenerator()
var webTestGeolocationSTATUSGenerator gopter.Gen

// WebTestGeolocationSTATUSGenerator returns a generator of WebTestGeolocation_STATUS instances for property testing.
func WebTestGeolocationSTATUSGenerator() gopter.Gen {
	if webTestGeolocationSTATUSGenerator != nil {
		return webTestGeolocationSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocationSTATUS(generators)
	webTestGeolocationSTATUSGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_STATUS{}), generators)

	return webTestGeolocationSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocationSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocationSTATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_STATUS_Configuration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_STATUS_Configuration to WebTestProperties_STATUS_Configuration via AssignPropertiesToWebTestPropertiesSTATUSConfiguration & AssignPropertiesFromWebTestPropertiesSTATUSConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSTATUSConfiguration, WebTestPropertiesSTATUSConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSTATUSConfiguration tests if a specific instance of WebTestProperties_STATUS_Configuration can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSTATUSConfiguration(subject WebTestProperties_STATUS_Configuration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestProperties_STATUS_Configuration
	err := copied.AssignPropertiesToWebTestPropertiesSTATUSConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_STATUS_Configuration
	err = actual.AssignPropertiesFromWebTestPropertiesSTATUSConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_STATUS_Configuration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_Configuration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSTATUSConfiguration, WebTestPropertiesSTATUSConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSTATUSConfiguration runs a test to see if a specific instance of WebTestProperties_STATUS_Configuration round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSTATUSConfiguration(subject WebTestProperties_STATUS_Configuration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_Configuration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_Configuration instances for property testing - lazily instantiated by
// WebTestPropertiesSTATUSConfigurationGenerator()
var webTestPropertiesSTATUSConfigurationGenerator gopter.Gen

// WebTestPropertiesSTATUSConfigurationGenerator returns a generator of WebTestProperties_STATUS_Configuration instances for property testing.
func WebTestPropertiesSTATUSConfigurationGenerator() gopter.Gen {
	if webTestPropertiesSTATUSConfigurationGenerator != nil {
		return webTestPropertiesSTATUSConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSConfiguration(generators)
	webTestPropertiesSTATUSConfigurationGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_Configuration{}), generators)

	return webTestPropertiesSTATUSConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSConfiguration(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_STATUS_Request_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_STATUS_Request to WebTestProperties_STATUS_Request via AssignPropertiesToWebTestPropertiesSTATUSRequest & AssignPropertiesFromWebTestPropertiesSTATUSRequest returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSTATUSRequest, WebTestPropertiesSTATUSRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSTATUSRequest tests if a specific instance of WebTestProperties_STATUS_Request can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSTATUSRequest(subject WebTestProperties_STATUS_Request) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestProperties_STATUS_Request
	err := copied.AssignPropertiesToWebTestPropertiesSTATUSRequest(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_STATUS_Request
	err = actual.AssignPropertiesFromWebTestPropertiesSTATUSRequest(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_STATUS_Request_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_Request via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSTATUSRequest, WebTestPropertiesSTATUSRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSTATUSRequest runs a test to see if a specific instance of WebTestProperties_STATUS_Request round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSTATUSRequest(subject WebTestProperties_STATUS_Request) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_Request
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_Request instances for property testing - lazily instantiated by
// WebTestPropertiesSTATUSRequestGenerator()
var webTestPropertiesSTATUSRequestGenerator gopter.Gen

// WebTestPropertiesSTATUSRequestGenerator returns a generator of WebTestProperties_STATUS_Request instances for property testing.
// We first initialize webTestPropertiesSTATUSRequestGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesSTATUSRequestGenerator() gopter.Gen {
	if webTestPropertiesSTATUSRequestGenerator != nil {
		return webTestPropertiesSTATUSRequestGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSRequest(generators)
	webTestPropertiesSTATUSRequestGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_Request{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSRequest(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesSTATUSRequest(generators)
	webTestPropertiesSTATUSRequestGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_Request{}), generators)

	return webTestPropertiesSTATUSRequestGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSRequest is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSRequest(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesSTATUSRequest is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesSTATUSRequest(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderFieldSTATUSGenerator())
}

func Test_WebTestProperties_STATUS_ValidationRules_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_STATUS_ValidationRules to WebTestProperties_STATUS_ValidationRules via AssignPropertiesToWebTestPropertiesSTATUSValidationRules & AssignPropertiesFromWebTestPropertiesSTATUSValidationRules returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSTATUSValidationRules, WebTestPropertiesSTATUSValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSTATUSValidationRules tests if a specific instance of WebTestProperties_STATUS_ValidationRules can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSTATUSValidationRules(subject WebTestProperties_STATUS_ValidationRules) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestProperties_STATUS_ValidationRules
	err := copied.AssignPropertiesToWebTestPropertiesSTATUSValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_STATUS_ValidationRules
	err = actual.AssignPropertiesFromWebTestPropertiesSTATUSValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_STATUS_ValidationRules_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_ValidationRules via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSTATUSValidationRules, WebTestPropertiesSTATUSValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSTATUSValidationRules runs a test to see if a specific instance of WebTestProperties_STATUS_ValidationRules round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSTATUSValidationRules(subject WebTestProperties_STATUS_ValidationRules) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_ValidationRules
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_ValidationRules instances for property testing - lazily instantiated by
// WebTestPropertiesSTATUSValidationRulesGenerator()
var webTestPropertiesSTATUSValidationRulesGenerator gopter.Gen

// WebTestPropertiesSTATUSValidationRulesGenerator returns a generator of WebTestProperties_STATUS_ValidationRules instances for property testing.
// We first initialize webTestPropertiesSTATUSValidationRulesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesSTATUSValidationRulesGenerator() gopter.Gen {
	if webTestPropertiesSTATUSValidationRulesGenerator != nil {
		return webTestPropertiesSTATUSValidationRulesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSValidationRules(generators)
	webTestPropertiesSTATUSValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_ValidationRules{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSValidationRules(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesSTATUSValidationRules(generators)
	webTestPropertiesSTATUSValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_ValidationRules{}), generators)

	return webTestPropertiesSTATUSValidationRulesGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSValidationRules is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSValidationRules(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesSTATUSValidationRules is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesSTATUSValidationRules(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestPropertiesSTATUSValidationRulesContentValidationGenerator())
}

func Test_WebTestPropertiesConfiguration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestPropertiesConfiguration to WebTestPropertiesConfiguration via AssignPropertiesToWebTestPropertiesConfiguration & AssignPropertiesFromWebTestPropertiesConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesConfiguration, WebTestPropertiesConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesConfiguration tests if a specific instance of WebTestPropertiesConfiguration can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesConfiguration(subject WebTestPropertiesConfiguration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestPropertiesConfiguration
	err := copied.AssignPropertiesToWebTestPropertiesConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestPropertiesConfiguration
	err = actual.AssignPropertiesFromWebTestPropertiesConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestPropertiesConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestPropertiesConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesConfiguration, WebTestPropertiesConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesConfiguration runs a test to see if a specific instance of WebTestPropertiesConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesConfiguration(subject WebTestPropertiesConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestPropertiesConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestPropertiesConfiguration instances for property testing - lazily instantiated by
// WebTestPropertiesConfigurationGenerator()
var webTestPropertiesConfigurationGenerator gopter.Gen

// WebTestPropertiesConfigurationGenerator returns a generator of WebTestPropertiesConfiguration instances for property testing.
func WebTestPropertiesConfigurationGenerator() gopter.Gen {
	if webTestPropertiesConfigurationGenerator != nil {
		return webTestPropertiesConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesConfiguration(generators)
	webTestPropertiesConfigurationGenerator = gen.Struct(reflect.TypeOf(WebTestPropertiesConfiguration{}), generators)

	return webTestPropertiesConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesConfiguration(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestPropertiesRequest_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestPropertiesRequest to WebTestPropertiesRequest via AssignPropertiesToWebTestPropertiesRequest & AssignPropertiesFromWebTestPropertiesRequest returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesRequest, WebTestPropertiesRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesRequest tests if a specific instance of WebTestPropertiesRequest can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesRequest(subject WebTestPropertiesRequest) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestPropertiesRequest
	err := copied.AssignPropertiesToWebTestPropertiesRequest(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestPropertiesRequest
	err = actual.AssignPropertiesFromWebTestPropertiesRequest(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestPropertiesRequest_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestPropertiesRequest via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesRequest, WebTestPropertiesRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesRequest runs a test to see if a specific instance of WebTestPropertiesRequest round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesRequest(subject WebTestPropertiesRequest) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestPropertiesRequest
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestPropertiesRequest instances for property testing - lazily instantiated by
// WebTestPropertiesRequestGenerator()
var webTestPropertiesRequestGenerator gopter.Gen

// WebTestPropertiesRequestGenerator returns a generator of WebTestPropertiesRequest instances for property testing.
// We first initialize webTestPropertiesRequestGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesRequestGenerator() gopter.Gen {
	if webTestPropertiesRequestGenerator != nil {
		return webTestPropertiesRequestGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesRequest(generators)
	webTestPropertiesRequestGenerator = gen.Struct(reflect.TypeOf(WebTestPropertiesRequest{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesRequest(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesRequest(generators)
	webTestPropertiesRequestGenerator = gen.Struct(reflect.TypeOf(WebTestPropertiesRequest{}), generators)

	return webTestPropertiesRequestGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesRequest is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesRequest(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesRequest is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesRequest(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderFieldGenerator())
}

func Test_WebTestPropertiesValidationRules_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestPropertiesValidationRules to WebTestPropertiesValidationRules via AssignPropertiesToWebTestPropertiesValidationRules & AssignPropertiesFromWebTestPropertiesValidationRules returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesValidationRules, WebTestPropertiesValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesValidationRules tests if a specific instance of WebTestPropertiesValidationRules can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesValidationRules(subject WebTestPropertiesValidationRules) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestPropertiesValidationRules
	err := copied.AssignPropertiesToWebTestPropertiesValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestPropertiesValidationRules
	err = actual.AssignPropertiesFromWebTestPropertiesValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestPropertiesValidationRules_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestPropertiesValidationRules via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesValidationRules, WebTestPropertiesValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesValidationRules runs a test to see if a specific instance of WebTestPropertiesValidationRules round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesValidationRules(subject WebTestPropertiesValidationRules) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestPropertiesValidationRules
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestPropertiesValidationRules instances for property testing - lazily instantiated by
// WebTestPropertiesValidationRulesGenerator()
var webTestPropertiesValidationRulesGenerator gopter.Gen

// WebTestPropertiesValidationRulesGenerator returns a generator of WebTestPropertiesValidationRules instances for property testing.
// We first initialize webTestPropertiesValidationRulesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesValidationRulesGenerator() gopter.Gen {
	if webTestPropertiesValidationRulesGenerator != nil {
		return webTestPropertiesValidationRulesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesValidationRules(generators)
	webTestPropertiesValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestPropertiesValidationRules{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesValidationRules(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesValidationRules(generators)
	webTestPropertiesValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestPropertiesValidationRules{}), generators)

	return webTestPropertiesValidationRulesGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesValidationRules is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesValidationRules(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesValidationRules is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesValidationRules(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestPropertiesValidationRulesContentValidationGenerator())
}

func Test_HeaderField_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HeaderField to HeaderField via AssignPropertiesToHeaderField & AssignPropertiesFromHeaderField returns original",
		prop.ForAll(RunPropertyAssignmentTestForHeaderField, HeaderFieldGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHeaderField tests if a specific instance of HeaderField can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForHeaderField(subject HeaderField) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.HeaderField
	err := copied.AssignPropertiesToHeaderField(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HeaderField
	err = actual.AssignPropertiesFromHeaderField(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HeaderField_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderField, HeaderFieldGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderField runs a test to see if a specific instance of HeaderField round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderField(subject HeaderField) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField instances for property testing - lazily instantiated by HeaderFieldGenerator()
var headerFieldGenerator gopter.Gen

// HeaderFieldGenerator returns a generator of HeaderField instances for property testing.
func HeaderFieldGenerator() gopter.Gen {
	if headerFieldGenerator != nil {
		return headerFieldGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderField(generators)
	headerFieldGenerator = gen.Struct(reflect.TypeOf(HeaderField{}), generators)

	return headerFieldGenerator
}

// AddIndependentPropertyGeneratorsForHeaderField is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderField(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HeaderField_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HeaderField_STATUS to HeaderField_STATUS via AssignPropertiesToHeaderFieldSTATUS & AssignPropertiesFromHeaderFieldSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForHeaderFieldSTATUS, HeaderFieldSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHeaderFieldSTATUS tests if a specific instance of HeaderField_STATUS can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForHeaderFieldSTATUS(subject HeaderField_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.HeaderField_STATUS
	err := copied.AssignPropertiesToHeaderFieldSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HeaderField_STATUS
	err = actual.AssignPropertiesFromHeaderFieldSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HeaderField_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderFieldSTATUS, HeaderFieldSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderFieldSTATUS runs a test to see if a specific instance of HeaderField_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderFieldSTATUS(subject HeaderField_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_STATUS instances for property testing - lazily instantiated by HeaderFieldSTATUSGenerator()
var headerFieldSTATUSGenerator gopter.Gen

// HeaderFieldSTATUSGenerator returns a generator of HeaderField_STATUS instances for property testing.
func HeaderFieldSTATUSGenerator() gopter.Gen {
	if headerFieldSTATUSGenerator != nil {
		return headerFieldSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderFieldSTATUS(generators)
	headerFieldSTATUSGenerator = gen.Struct(reflect.TypeOf(HeaderField_STATUS{}), generators)

	return headerFieldSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForHeaderFieldSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderFieldSTATUS(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_STATUS_ValidationRules_ContentValidation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_STATUS_ValidationRules_ContentValidation to WebTestProperties_STATUS_ValidationRules_ContentValidation via AssignPropertiesToWebTestPropertiesSTATUSValidationRulesContentValidation & AssignPropertiesFromWebTestPropertiesSTATUSValidationRulesContentValidation returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSTATUSValidationRulesContentValidation, WebTestPropertiesSTATUSValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSTATUSValidationRulesContentValidation tests if a specific instance of WebTestProperties_STATUS_ValidationRules_ContentValidation can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSTATUSValidationRulesContentValidation(subject WebTestProperties_STATUS_ValidationRules_ContentValidation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestProperties_STATUS_ValidationRules_ContentValidation
	err := copied.AssignPropertiesToWebTestPropertiesSTATUSValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_STATUS_ValidationRules_ContentValidation
	err = actual.AssignPropertiesFromWebTestPropertiesSTATUSValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_STATUS_ValidationRules_ContentValidation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUS_ValidationRules_ContentValidation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSTATUSValidationRulesContentValidation, WebTestPropertiesSTATUSValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSTATUSValidationRulesContentValidation runs a test to see if a specific instance of WebTestProperties_STATUS_ValidationRules_ContentValidation round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSTATUSValidationRulesContentValidation(subject WebTestProperties_STATUS_ValidationRules_ContentValidation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUS_ValidationRules_ContentValidation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUS_ValidationRules_ContentValidation instances for property testing - lazily
// instantiated by WebTestPropertiesSTATUSValidationRulesContentValidationGenerator()
var webTestPropertiesSTATUSValidationRulesContentValidationGenerator gopter.Gen

// WebTestPropertiesSTATUSValidationRulesContentValidationGenerator returns a generator of WebTestProperties_STATUS_ValidationRules_ContentValidation instances for property testing.
func WebTestPropertiesSTATUSValidationRulesContentValidationGenerator() gopter.Gen {
	if webTestPropertiesSTATUSValidationRulesContentValidationGenerator != nil {
		return webTestPropertiesSTATUSValidationRulesContentValidationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSValidationRulesContentValidation(generators)
	webTestPropertiesSTATUSValidationRulesContentValidationGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUS_ValidationRules_ContentValidation{}), generators)

	return webTestPropertiesSTATUSValidationRulesContentValidationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSValidationRulesContentValidation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSTATUSValidationRulesContentValidation(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}

func Test_WebTestPropertiesValidationRulesContentValidation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestPropertiesValidationRulesContentValidation to WebTestPropertiesValidationRulesContentValidation via AssignPropertiesToWebTestPropertiesValidationRulesContentValidation & AssignPropertiesFromWebTestPropertiesValidationRulesContentValidation returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesValidationRulesContentValidation, WebTestPropertiesValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesValidationRulesContentValidation tests if a specific instance of WebTestPropertiesValidationRulesContentValidation can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesValidationRulesContentValidation(subject WebTestPropertiesValidationRulesContentValidation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20180501ps.WebTestPropertiesValidationRulesContentValidation
	err := copied.AssignPropertiesToWebTestPropertiesValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestPropertiesValidationRulesContentValidation
	err = actual.AssignPropertiesFromWebTestPropertiesValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestPropertiesValidationRulesContentValidation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestPropertiesValidationRulesContentValidation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesValidationRulesContentValidation, WebTestPropertiesValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesValidationRulesContentValidation runs a test to see if a specific instance of WebTestPropertiesValidationRulesContentValidation round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesValidationRulesContentValidation(subject WebTestPropertiesValidationRulesContentValidation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestPropertiesValidationRulesContentValidation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestPropertiesValidationRulesContentValidation instances for property testing - lazily instantiated
// by WebTestPropertiesValidationRulesContentValidationGenerator()
var webTestPropertiesValidationRulesContentValidationGenerator gopter.Gen

// WebTestPropertiesValidationRulesContentValidationGenerator returns a generator of WebTestPropertiesValidationRulesContentValidation instances for property testing.
func WebTestPropertiesValidationRulesContentValidationGenerator() gopter.Gen {
	if webTestPropertiesValidationRulesContentValidationGenerator != nil {
		return webTestPropertiesValidationRulesContentValidationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesValidationRulesContentValidation(generators)
	webTestPropertiesValidationRulesContentValidationGenerator = gen.Struct(reflect.TypeOf(WebTestPropertiesValidationRulesContentValidation{}), generators)

	return webTestPropertiesValidationRulesContentValidationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesValidationRulesContentValidation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesValidationRulesContentValidation(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}
