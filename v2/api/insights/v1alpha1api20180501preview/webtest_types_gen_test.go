// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501preview

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501previewstorage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Webtest_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Webtest to hub returns original",
		prop.ForAll(RunResourceConversionTestForWebtest, WebtestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForWebtest tests if a specific instance of Webtest round trips to the hub storage version and back losslessly
func RunResourceConversionTestForWebtest(subject Webtest) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20180501previewstorage.Webtest
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual Webtest
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Webtest_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Webtest to Webtest via AssignPropertiesToWebtest & AssignPropertiesFromWebtest returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebtest, WebtestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebtest tests if a specific instance of Webtest can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebtest(subject Webtest) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.Webtest
	err := copied.AssignPropertiesToWebtest(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Webtest
	err = actual.AssignPropertiesFromWebtest(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Webtest_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Webtest via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebtest, WebtestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebtest runs a test to see if a specific instance of Webtest round trips to JSON and back losslessly
func RunJSONSerializationTestForWebtest(subject Webtest) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Webtest
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Webtest instances for property testing - lazily instantiated by WebtestGenerator()
var webtestGenerator gopter.Gen

// WebtestGenerator returns a generator of Webtest instances for property testing.
func WebtestGenerator() gopter.Gen {
	if webtestGenerator != nil {
		return webtestGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForWebtest(generators)
	webtestGenerator = gen.Struct(reflect.TypeOf(Webtest{}), generators)

	return webtestGenerator
}

// AddRelatedPropertyGeneratorsForWebtest is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebtest(gens map[string]gopter.Gen) {
	gens["Spec"] = WebtestsSPECGenerator()
	gens["Status"] = WebTestStatusGenerator()
}

func Test_WebTest_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTest_Status to WebTest_Status via AssignPropertiesToWebTestStatus & AssignPropertiesFromWebTestStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestStatus, WebTestStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestStatus tests if a specific instance of WebTest_Status can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestStatus(subject WebTest_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTest_Status
	err := copied.AssignPropertiesToWebTestStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTest_Status
	err = actual.AssignPropertiesFromWebTestStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTest_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTest_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestStatus, WebTestStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestStatus runs a test to see if a specific instance of WebTest_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestStatus(subject WebTest_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTest_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTest_Status instances for property testing - lazily instantiated by WebTestStatusGenerator()
var webTestStatusGenerator gopter.Gen

// WebTestStatusGenerator returns a generator of WebTest_Status instances for property testing.
// We first initialize webTestStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestStatusGenerator() gopter.Gen {
	if webTestStatusGenerator != nil {
		return webTestStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestStatus(generators)
	webTestStatusGenerator = gen.Struct(reflect.TypeOf(WebTest_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestStatus(generators)
	AddRelatedPropertyGeneratorsForWebTestStatus(generators)
	webTestStatusGenerator = gen.Struct(reflect.TypeOf(WebTest_Status{}), generators)

	return webTestStatusGenerator
}

// AddIndependentPropertyGeneratorsForWebTestStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestStatus(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(
		WebTestPropertiesStatusKindBasic,
		WebTestPropertiesStatusKindMultistep,
		WebTestPropertiesStatusKindPing,
		WebTestPropertiesStatusKindStandard))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PropertiesName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.Int())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestStatus(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestPropertiesStatusConfigurationGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocationStatusGenerator())
	gens["Request"] = gen.PtrOf(WebTestPropertiesStatusRequestGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestPropertiesStatusValidationRulesGenerator())
}

func Test_Webtests_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Webtests_SPEC to Webtests_SPEC via AssignPropertiesToWebtestsSPEC & AssignPropertiesFromWebtestsSPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebtestsSPEC, WebtestsSPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebtestsSPEC tests if a specific instance of Webtests_SPEC can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebtestsSPEC(subject Webtests_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.Webtests_SPEC
	err := copied.AssignPropertiesToWebtestsSPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Webtests_SPEC
	err = actual.AssignPropertiesFromWebtestsSPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Webtests_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Webtests_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebtestsSPEC, WebtestsSPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebtestsSPEC runs a test to see if a specific instance of Webtests_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForWebtestsSPEC(subject Webtests_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Webtests_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Webtests_SPEC instances for property testing - lazily instantiated by WebtestsSPECGenerator()
var webtestsSPECGenerator gopter.Gen

// WebtestsSPECGenerator returns a generator of Webtests_SPEC instances for property testing.
// We first initialize webtestsSPECGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebtestsSPECGenerator() gopter.Gen {
	if webtestsSPECGenerator != nil {
		return webtestsSPECGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtestsSPEC(generators)
	webtestsSPECGenerator = gen.Struct(reflect.TypeOf(Webtests_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtestsSPEC(generators)
	AddRelatedPropertyGeneratorsForWebtestsSPEC(generators)
	webtestsSPECGenerator = gen.Struct(reflect.TypeOf(Webtests_SPEC{}), generators)

	return webtestsSPECGenerator
}

// AddIndependentPropertyGeneratorsForWebtestsSPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebtestsSPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(
		WebTestPropertiesSpecKindBasic,
		WebTestPropertiesSpecKindMultistep,
		WebTestPropertiesSpecKindPing,
		WebTestPropertiesSpecKindStandard))
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWebtestsSPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebtestsSPEC(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestPropertiesSpecConfigurationGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocationSpecGenerator())
	gens["Request"] = gen.PtrOf(WebTestPropertiesSpecRequestGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestPropertiesSpecValidationRulesGenerator())
}

func Test_WebTestGeolocation_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestGeolocation_Spec to WebTestGeolocation_Spec via AssignPropertiesToWebTestGeolocationSpec & AssignPropertiesFromWebTestGeolocationSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestGeolocationSpec, WebTestGeolocationSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestGeolocationSpec tests if a specific instance of WebTestGeolocation_Spec can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestGeolocationSpec(subject WebTestGeolocation_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestGeolocation_Spec
	err := copied.AssignPropertiesToWebTestGeolocationSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestGeolocation_Spec
	err = actual.AssignPropertiesFromWebTestGeolocationSpec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestGeolocation_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocationSpec, WebTestGeolocationSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocationSpec runs a test to see if a specific instance of WebTestGeolocation_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocationSpec(subject WebTestGeolocation_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_Spec instances for property testing - lazily instantiated by
//WebTestGeolocationSpecGenerator()
var webTestGeolocationSpecGenerator gopter.Gen

// WebTestGeolocationSpecGenerator returns a generator of WebTestGeolocation_Spec instances for property testing.
func WebTestGeolocationSpecGenerator() gopter.Gen {
	if webTestGeolocationSpecGenerator != nil {
		return webTestGeolocationSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocationSpec(generators)
	webTestGeolocationSpecGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_Spec{}), generators)

	return webTestGeolocationSpecGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocationSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocationSpec(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestGeolocation_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestGeolocation_Status to WebTestGeolocation_Status via AssignPropertiesToWebTestGeolocationStatus & AssignPropertiesFromWebTestGeolocationStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestGeolocationStatus, WebTestGeolocationStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestGeolocationStatus tests if a specific instance of WebTestGeolocation_Status can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestGeolocationStatus(subject WebTestGeolocation_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestGeolocation_Status
	err := copied.AssignPropertiesToWebTestGeolocationStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestGeolocation_Status
	err = actual.AssignPropertiesFromWebTestGeolocationStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestGeolocation_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocationStatus, WebTestGeolocationStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocationStatus runs a test to see if a specific instance of WebTestGeolocation_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocationStatus(subject WebTestGeolocation_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_Status instances for property testing - lazily instantiated by
//WebTestGeolocationStatusGenerator()
var webTestGeolocationStatusGenerator gopter.Gen

// WebTestGeolocationStatusGenerator returns a generator of WebTestGeolocation_Status instances for property testing.
func WebTestGeolocationStatusGenerator() gopter.Gen {
	if webTestGeolocationStatusGenerator != nil {
		return webTestGeolocationStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocationStatus(generators)
	webTestGeolocationStatusGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_Status{}), generators)

	return webTestGeolocationStatusGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocationStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocationStatus(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Spec_Configuration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Spec_Configuration to WebTestProperties_Spec_Configuration via AssignPropertiesToWebTestPropertiesSpecConfiguration & AssignPropertiesFromWebTestPropertiesSpecConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSpecConfiguration, WebTestPropertiesSpecConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSpecConfiguration tests if a specific instance of WebTestProperties_Spec_Configuration can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSpecConfiguration(subject WebTestProperties_Spec_Configuration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Spec_Configuration
	err := copied.AssignPropertiesToWebTestPropertiesSpecConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Spec_Configuration
	err = actual.AssignPropertiesFromWebTestPropertiesSpecConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Spec_Configuration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Spec_Configuration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSpecConfiguration, WebTestPropertiesSpecConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSpecConfiguration runs a test to see if a specific instance of WebTestProperties_Spec_Configuration round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSpecConfiguration(subject WebTestProperties_Spec_Configuration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Spec_Configuration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Spec_Configuration instances for property testing - lazily instantiated by
//WebTestPropertiesSpecConfigurationGenerator()
var webTestPropertiesSpecConfigurationGenerator gopter.Gen

// WebTestPropertiesSpecConfigurationGenerator returns a generator of WebTestProperties_Spec_Configuration instances for property testing.
func WebTestPropertiesSpecConfigurationGenerator() gopter.Gen {
	if webTestPropertiesSpecConfigurationGenerator != nil {
		return webTestPropertiesSpecConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSpecConfiguration(generators)
	webTestPropertiesSpecConfigurationGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Spec_Configuration{}), generators)

	return webTestPropertiesSpecConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSpecConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSpecConfiguration(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Spec_Request_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Spec_Request to WebTestProperties_Spec_Request via AssignPropertiesToWebTestPropertiesSpecRequest & AssignPropertiesFromWebTestPropertiesSpecRequest returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSpecRequest, WebTestPropertiesSpecRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSpecRequest tests if a specific instance of WebTestProperties_Spec_Request can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSpecRequest(subject WebTestProperties_Spec_Request) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Spec_Request
	err := copied.AssignPropertiesToWebTestPropertiesSpecRequest(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Spec_Request
	err = actual.AssignPropertiesFromWebTestPropertiesSpecRequest(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Spec_Request_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Spec_Request via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSpecRequest, WebTestPropertiesSpecRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSpecRequest runs a test to see if a specific instance of WebTestProperties_Spec_Request round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSpecRequest(subject WebTestProperties_Spec_Request) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Spec_Request
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Spec_Request instances for property testing - lazily instantiated by
//WebTestPropertiesSpecRequestGenerator()
var webTestPropertiesSpecRequestGenerator gopter.Gen

// WebTestPropertiesSpecRequestGenerator returns a generator of WebTestProperties_Spec_Request instances for property testing.
// We first initialize webTestPropertiesSpecRequestGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesSpecRequestGenerator() gopter.Gen {
	if webTestPropertiesSpecRequestGenerator != nil {
		return webTestPropertiesSpecRequestGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSpecRequest(generators)
	webTestPropertiesSpecRequestGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Spec_Request{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSpecRequest(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesSpecRequest(generators)
	webTestPropertiesSpecRequestGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Spec_Request{}), generators)

	return webTestPropertiesSpecRequestGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSpecRequest is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSpecRequest(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesSpecRequest is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesSpecRequest(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderFieldSpecGenerator())
}

func Test_WebTestProperties_Spec_ValidationRules_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Spec_ValidationRules to WebTestProperties_Spec_ValidationRules via AssignPropertiesToWebTestPropertiesSpecValidationRules & AssignPropertiesFromWebTestPropertiesSpecValidationRules returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSpecValidationRules, WebTestPropertiesSpecValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSpecValidationRules tests if a specific instance of WebTestProperties_Spec_ValidationRules can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSpecValidationRules(subject WebTestProperties_Spec_ValidationRules) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules
	err := copied.AssignPropertiesToWebTestPropertiesSpecValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Spec_ValidationRules
	err = actual.AssignPropertiesFromWebTestPropertiesSpecValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Spec_ValidationRules_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Spec_ValidationRules via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSpecValidationRules, WebTestPropertiesSpecValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSpecValidationRules runs a test to see if a specific instance of WebTestProperties_Spec_ValidationRules round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSpecValidationRules(subject WebTestProperties_Spec_ValidationRules) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Spec_ValidationRules
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Spec_ValidationRules instances for property testing - lazily instantiated by
//WebTestPropertiesSpecValidationRulesGenerator()
var webTestPropertiesSpecValidationRulesGenerator gopter.Gen

// WebTestPropertiesSpecValidationRulesGenerator returns a generator of WebTestProperties_Spec_ValidationRules instances for property testing.
// We first initialize webTestPropertiesSpecValidationRulesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesSpecValidationRulesGenerator() gopter.Gen {
	if webTestPropertiesSpecValidationRulesGenerator != nil {
		return webTestPropertiesSpecValidationRulesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSpecValidationRules(generators)
	webTestPropertiesSpecValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Spec_ValidationRules{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSpecValidationRules(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesSpecValidationRules(generators)
	webTestPropertiesSpecValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Spec_ValidationRules{}), generators)

	return webTestPropertiesSpecValidationRulesGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSpecValidationRules is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSpecValidationRules(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesSpecValidationRules is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesSpecValidationRules(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestPropertiesSpecValidationRulesContentValidationGenerator())
}

func Test_WebTestProperties_Status_Configuration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Status_Configuration to WebTestProperties_Status_Configuration via AssignPropertiesToWebTestPropertiesStatusConfiguration & AssignPropertiesFromWebTestPropertiesStatusConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesStatusConfiguration, WebTestPropertiesStatusConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesStatusConfiguration tests if a specific instance of WebTestProperties_Status_Configuration can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesStatusConfiguration(subject WebTestProperties_Status_Configuration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Status_Configuration
	err := copied.AssignPropertiesToWebTestPropertiesStatusConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Status_Configuration
	err = actual.AssignPropertiesFromWebTestPropertiesStatusConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Status_Configuration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_Configuration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusConfiguration, WebTestPropertiesStatusConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusConfiguration runs a test to see if a specific instance of WebTestProperties_Status_Configuration round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusConfiguration(subject WebTestProperties_Status_Configuration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_Configuration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_Configuration instances for property testing - lazily instantiated by
//WebTestPropertiesStatusConfigurationGenerator()
var webTestPropertiesStatusConfigurationGenerator gopter.Gen

// WebTestPropertiesStatusConfigurationGenerator returns a generator of WebTestProperties_Status_Configuration instances for property testing.
func WebTestPropertiesStatusConfigurationGenerator() gopter.Gen {
	if webTestPropertiesStatusConfigurationGenerator != nil {
		return webTestPropertiesStatusConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusConfiguration(generators)
	webTestPropertiesStatusConfigurationGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_Configuration{}), generators)

	return webTestPropertiesStatusConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusConfiguration(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Status_Request_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Status_Request to WebTestProperties_Status_Request via AssignPropertiesToWebTestPropertiesStatusRequest & AssignPropertiesFromWebTestPropertiesStatusRequest returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesStatusRequest, WebTestPropertiesStatusRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesStatusRequest tests if a specific instance of WebTestProperties_Status_Request can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesStatusRequest(subject WebTestProperties_Status_Request) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Status_Request
	err := copied.AssignPropertiesToWebTestPropertiesStatusRequest(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Status_Request
	err = actual.AssignPropertiesFromWebTestPropertiesStatusRequest(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Status_Request_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_Request via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusRequest, WebTestPropertiesStatusRequestGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusRequest runs a test to see if a specific instance of WebTestProperties_Status_Request round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusRequest(subject WebTestProperties_Status_Request) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_Request
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_Request instances for property testing - lazily instantiated by
//WebTestPropertiesStatusRequestGenerator()
var webTestPropertiesStatusRequestGenerator gopter.Gen

// WebTestPropertiesStatusRequestGenerator returns a generator of WebTestProperties_Status_Request instances for property testing.
// We first initialize webTestPropertiesStatusRequestGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesStatusRequestGenerator() gopter.Gen {
	if webTestPropertiesStatusRequestGenerator != nil {
		return webTestPropertiesStatusRequestGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequest(generators)
	webTestPropertiesStatusRequestGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_Request{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequest(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesStatusRequest(generators)
	webTestPropertiesStatusRequestGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_Request{}), generators)

	return webTestPropertiesStatusRequestGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequest is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusRequest(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesStatusRequest is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesStatusRequest(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderFieldStatusGenerator())
}

func Test_WebTestProperties_Status_ValidationRules_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Status_ValidationRules to WebTestProperties_Status_ValidationRules via AssignPropertiesToWebTestPropertiesStatusValidationRules & AssignPropertiesFromWebTestPropertiesStatusValidationRules returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesStatusValidationRules, WebTestPropertiesStatusValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesStatusValidationRules tests if a specific instance of WebTestProperties_Status_ValidationRules can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesStatusValidationRules(subject WebTestProperties_Status_ValidationRules) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules
	err := copied.AssignPropertiesToWebTestPropertiesStatusValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Status_ValidationRules
	err = actual.AssignPropertiesFromWebTestPropertiesStatusValidationRules(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Status_ValidationRules_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_ValidationRules via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusValidationRules, WebTestPropertiesStatusValidationRulesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusValidationRules runs a test to see if a specific instance of WebTestProperties_Status_ValidationRules round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusValidationRules(subject WebTestProperties_Status_ValidationRules) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_ValidationRules
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_ValidationRules instances for property testing - lazily instantiated by
//WebTestPropertiesStatusValidationRulesGenerator()
var webTestPropertiesStatusValidationRulesGenerator gopter.Gen

// WebTestPropertiesStatusValidationRulesGenerator returns a generator of WebTestProperties_Status_ValidationRules instances for property testing.
// We first initialize webTestPropertiesStatusValidationRulesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestPropertiesStatusValidationRulesGenerator() gopter.Gen {
	if webTestPropertiesStatusValidationRulesGenerator != nil {
		return webTestPropertiesStatusValidationRulesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRules(generators)
	webTestPropertiesStatusValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_ValidationRules{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRules(generators)
	AddRelatedPropertyGeneratorsForWebTestPropertiesStatusValidationRules(generators)
	webTestPropertiesStatusValidationRulesGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_ValidationRules{}), generators)

	return webTestPropertiesStatusValidationRulesGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRules is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRules(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestPropertiesStatusValidationRules is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestPropertiesStatusValidationRules(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestPropertiesStatusValidationRulesContentValidationGenerator())
}

func Test_HeaderField_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HeaderField_Spec to HeaderField_Spec via AssignPropertiesToHeaderFieldSpec & AssignPropertiesFromHeaderFieldSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForHeaderFieldSpec, HeaderFieldSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHeaderFieldSpec tests if a specific instance of HeaderField_Spec can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForHeaderFieldSpec(subject HeaderField_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.HeaderField_Spec
	err := copied.AssignPropertiesToHeaderFieldSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HeaderField_Spec
	err = actual.AssignPropertiesFromHeaderFieldSpec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HeaderField_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderFieldSpec, HeaderFieldSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderFieldSpec runs a test to see if a specific instance of HeaderField_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderFieldSpec(subject HeaderField_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_Spec instances for property testing - lazily instantiated by HeaderFieldSpecGenerator()
var headerFieldSpecGenerator gopter.Gen

// HeaderFieldSpecGenerator returns a generator of HeaderField_Spec instances for property testing.
func HeaderFieldSpecGenerator() gopter.Gen {
	if headerFieldSpecGenerator != nil {
		return headerFieldSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderFieldSpec(generators)
	headerFieldSpecGenerator = gen.Struct(reflect.TypeOf(HeaderField_Spec{}), generators)

	return headerFieldSpecGenerator
}

// AddIndependentPropertyGeneratorsForHeaderFieldSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderFieldSpec(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HeaderField_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HeaderField_Status to HeaderField_Status via AssignPropertiesToHeaderFieldStatus & AssignPropertiesFromHeaderFieldStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForHeaderFieldStatus, HeaderFieldStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHeaderFieldStatus tests if a specific instance of HeaderField_Status can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForHeaderFieldStatus(subject HeaderField_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.HeaderField_Status
	err := copied.AssignPropertiesToHeaderFieldStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HeaderField_Status
	err = actual.AssignPropertiesFromHeaderFieldStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HeaderField_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderFieldStatus, HeaderFieldStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderFieldStatus runs a test to see if a specific instance of HeaderField_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderFieldStatus(subject HeaderField_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_Status instances for property testing - lazily instantiated by HeaderFieldStatusGenerator()
var headerFieldStatusGenerator gopter.Gen

// HeaderFieldStatusGenerator returns a generator of HeaderField_Status instances for property testing.
func HeaderFieldStatusGenerator() gopter.Gen {
	if headerFieldStatusGenerator != nil {
		return headerFieldStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderFieldStatus(generators)
	headerFieldStatusGenerator = gen.Struct(reflect.TypeOf(HeaderField_Status{}), generators)

	return headerFieldStatusGenerator
}

// AddIndependentPropertyGeneratorsForHeaderFieldStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderFieldStatus(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Spec_ValidationRules_ContentValidation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Spec_ValidationRules_ContentValidation to WebTestProperties_Spec_ValidationRules_ContentValidation via AssignPropertiesToWebTestPropertiesSpecValidationRulesContentValidation & AssignPropertiesFromWebTestPropertiesSpecValidationRulesContentValidation returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesSpecValidationRulesContentValidation, WebTestPropertiesSpecValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesSpecValidationRulesContentValidation tests if a specific instance of WebTestProperties_Spec_ValidationRules_ContentValidation can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesSpecValidationRulesContentValidation(subject WebTestProperties_Spec_ValidationRules_ContentValidation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Spec_ValidationRules_ContentValidation
	err := copied.AssignPropertiesToWebTestPropertiesSpecValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Spec_ValidationRules_ContentValidation
	err = actual.AssignPropertiesFromWebTestPropertiesSpecValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Spec_ValidationRules_ContentValidation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Spec_ValidationRules_ContentValidation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesSpecValidationRulesContentValidation, WebTestPropertiesSpecValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesSpecValidationRulesContentValidation runs a test to see if a specific instance of WebTestProperties_Spec_ValidationRules_ContentValidation round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesSpecValidationRulesContentValidation(subject WebTestProperties_Spec_ValidationRules_ContentValidation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Spec_ValidationRules_ContentValidation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Spec_ValidationRules_ContentValidation instances for property testing - lazily
//instantiated by WebTestPropertiesSpecValidationRulesContentValidationGenerator()
var webTestPropertiesSpecValidationRulesContentValidationGenerator gopter.Gen

// WebTestPropertiesSpecValidationRulesContentValidationGenerator returns a generator of WebTestProperties_Spec_ValidationRules_ContentValidation instances for property testing.
func WebTestPropertiesSpecValidationRulesContentValidationGenerator() gopter.Gen {
	if webTestPropertiesSpecValidationRulesContentValidationGenerator != nil {
		return webTestPropertiesSpecValidationRulesContentValidationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesSpecValidationRulesContentValidation(generators)
	webTestPropertiesSpecValidationRulesContentValidationGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Spec_ValidationRules_ContentValidation{}), generators)

	return webTestPropertiesSpecValidationRulesContentValidationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesSpecValidationRulesContentValidation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesSpecValidationRulesContentValidation(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}

func Test_WebTestProperties_Status_ValidationRules_ContentValidation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WebTestProperties_Status_ValidationRules_ContentValidation to WebTestProperties_Status_ValidationRules_ContentValidation via AssignPropertiesToWebTestPropertiesStatusValidationRulesContentValidation & AssignPropertiesFromWebTestPropertiesStatusValidationRulesContentValidation returns original",
		prop.ForAll(RunPropertyAssignmentTestForWebTestPropertiesStatusValidationRulesContentValidation, WebTestPropertiesStatusValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWebTestPropertiesStatusValidationRulesContentValidation tests if a specific instance of WebTestProperties_Status_ValidationRules_ContentValidation can be assigned to v1alpha1api20180501previewstorage and back losslessly
func RunPropertyAssignmentTestForWebTestPropertiesStatusValidationRulesContentValidation(subject WebTestProperties_Status_ValidationRules_ContentValidation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20180501previewstorage.WebTestProperties_Status_ValidationRules_ContentValidation
	err := copied.AssignPropertiesToWebTestPropertiesStatusValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WebTestProperties_Status_ValidationRules_ContentValidation
	err = actual.AssignPropertiesFromWebTestPropertiesStatusValidationRulesContentValidation(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WebTestProperties_Status_ValidationRules_ContentValidation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Status_ValidationRules_ContentValidation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesContentValidation, WebTestPropertiesStatusValidationRulesContentValidationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesContentValidation runs a test to see if a specific instance of WebTestProperties_Status_ValidationRules_ContentValidation round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestPropertiesStatusValidationRulesContentValidation(subject WebTestProperties_Status_ValidationRules_ContentValidation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Status_ValidationRules_ContentValidation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Status_ValidationRules_ContentValidation instances for property testing - lazily
//instantiated by WebTestPropertiesStatusValidationRulesContentValidationGenerator()
var webTestPropertiesStatusValidationRulesContentValidationGenerator gopter.Gen

// WebTestPropertiesStatusValidationRulesContentValidationGenerator returns a generator of WebTestProperties_Status_ValidationRules_ContentValidation instances for property testing.
func WebTestPropertiesStatusValidationRulesContentValidationGenerator() gopter.Gen {
	if webTestPropertiesStatusValidationRulesContentValidationGenerator != nil {
		return webTestPropertiesStatusValidationRulesContentValidationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesContentValidation(generators)
	webTestPropertiesStatusValidationRulesContentValidationGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Status_ValidationRules_ContentValidation{}), generators)

	return webTestPropertiesStatusValidationRulesContentValidationGenerator
}

// AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesContentValidation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestPropertiesStatusValidationRulesContentValidation(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}
