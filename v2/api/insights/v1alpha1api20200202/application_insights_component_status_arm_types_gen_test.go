// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200202

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationInsightsComponent_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationInsightsComponent_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationInsightsComponentSTATUSARM, ApplicationInsightsComponentSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationInsightsComponentSTATUSARM runs a test to see if a specific instance of ApplicationInsightsComponent_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationInsightsComponentSTATUSARM(subject ApplicationInsightsComponent_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationInsightsComponent_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationInsightsComponent_STATUSARM instances for property testing - lazily instantiated by
// ApplicationInsightsComponentSTATUSARMGenerator()
var applicationInsightsComponentSTATUSARMGenerator gopter.Gen

// ApplicationInsightsComponentSTATUSARMGenerator returns a generator of ApplicationInsightsComponent_STATUSARM instances for property testing.
// We first initialize applicationInsightsComponentSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationInsightsComponentSTATUSARMGenerator() gopter.Gen {
	if applicationInsightsComponentSTATUSARMGenerator != nil {
		return applicationInsightsComponentSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentSTATUSARM(generators)
	applicationInsightsComponentSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponent_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationInsightsComponentSTATUSARM(generators)
	applicationInsightsComponentSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponent_STATUSARM{}), generators)

	return applicationInsightsComponentSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationInsightsComponentSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationInsightsComponentSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationInsightsComponentSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationInsightsComponentSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationInsightsComponentPropertiesSTATUSARMGenerator())
}

func Test_ApplicationInsightsComponentProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationInsightsComponentProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationInsightsComponentPropertiesSTATUSARM, ApplicationInsightsComponentPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationInsightsComponentPropertiesSTATUSARM runs a test to see if a specific instance of ApplicationInsightsComponentProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationInsightsComponentPropertiesSTATUSARM(subject ApplicationInsightsComponentProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationInsightsComponentProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationInsightsComponentProperties_STATUSARM instances for property testing - lazily instantiated by
// ApplicationInsightsComponentPropertiesSTATUSARMGenerator()
var applicationInsightsComponentPropertiesSTATUSARMGenerator gopter.Gen

// ApplicationInsightsComponentPropertiesSTATUSARMGenerator returns a generator of ApplicationInsightsComponentProperties_STATUSARM instances for property testing.
// We first initialize applicationInsightsComponentPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationInsightsComponentPropertiesSTATUSARMGenerator() gopter.Gen {
	if applicationInsightsComponentPropertiesSTATUSARMGenerator != nil {
		return applicationInsightsComponentPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesSTATUSARM(generators)
	applicationInsightsComponentPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponentProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationInsightsComponentPropertiesSTATUSARM(generators)
	applicationInsightsComponentPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponentProperties_STATUSARM{}), generators)

	return applicationInsightsComponentPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AppId"] = gen.PtrOf(gen.AlphaString())
	gens["ApplicationId"] = gen.PtrOf(gen.AlphaString())
	gens["ApplicationType"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesSTATUSApplicationType_Other, ApplicationInsightsComponentPropertiesSTATUSApplicationType_Web))
	gens["ConnectionString"] = gen.PtrOf(gen.AlphaString())
	gens["CreationDate"] = gen.PtrOf(gen.AlphaString())
	gens["DisableIpMasking"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["FlowType"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesSTATUSFlowType_Bluefield))
	gens["ForceCustomerStorageForProfiler"] = gen.PtrOf(gen.Bool())
	gens["HockeyAppId"] = gen.PtrOf(gen.AlphaString())
	gens["HockeyAppToken"] = gen.PtrOf(gen.AlphaString())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
	gens["IngestionMode"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesSTATUSIngestionMode_ApplicationInsights, ApplicationInsightsComponentPropertiesSTATUSIngestionMode_ApplicationInsightsWithDiagnosticSettings, ApplicationInsightsComponentPropertiesSTATUSIngestionMode_LogAnalytics))
	gens["InstrumentationKey"] = gen.PtrOf(gen.AlphaString())
	gens["LaMigrationDate"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_STATUS_Disabled, PublicNetworkAccessType_STATUS_Enabled))
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_STATUS_Disabled, PublicNetworkAccessType_STATUS_Enabled))
	gens["RequestSource"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesSTATUSRequestSource_Rest))
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
	gens["SamplingPercentage"] = gen.PtrOf(gen.Float64())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationInsightsComponentPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationInsightsComponentPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateLinkScopedResources"] = gen.SliceOf(PrivateLinkScopedResourceSTATUSARMGenerator())
}

func Test_PrivateLinkScopedResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkScopedResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkScopedResourceSTATUSARM, PrivateLinkScopedResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkScopedResourceSTATUSARM runs a test to see if a specific instance of PrivateLinkScopedResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkScopedResourceSTATUSARM(subject PrivateLinkScopedResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkScopedResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkScopedResource_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkScopedResourceSTATUSARMGenerator()
var privateLinkScopedResourceSTATUSARMGenerator gopter.Gen

// PrivateLinkScopedResourceSTATUSARMGenerator returns a generator of PrivateLinkScopedResource_STATUSARM instances for property testing.
func PrivateLinkScopedResourceSTATUSARMGenerator() gopter.Gen {
	if privateLinkScopedResourceSTATUSARMGenerator != nil {
		return privateLinkScopedResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceSTATUSARM(generators)
	privateLinkScopedResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkScopedResource_STATUSARM{}), generators)

	return privateLinkScopedResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ScopeId"] = gen.PtrOf(gen.AlphaString())
}
