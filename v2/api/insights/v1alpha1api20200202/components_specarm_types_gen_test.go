// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200202

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Components_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Components_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComponentsSPECARM, ComponentsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComponentsSPECARM runs a test to see if a specific instance of Components_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComponentsSPECARM(subject Components_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Components_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Components_SPECARM instances for property testing - lazily instantiated by ComponentsSPECARMGenerator()
var componentsSPECARMGenerator gopter.Gen

// ComponentsSPECARMGenerator returns a generator of Components_SPECARM instances for property testing.
// We first initialize componentsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComponentsSPECARMGenerator() gopter.Gen {
	if componentsSPECARMGenerator != nil {
		return componentsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComponentsSPECARM(generators)
	componentsSPECARMGenerator = gen.Struct(reflect.TypeOf(Components_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComponentsSPECARM(generators)
	AddRelatedPropertyGeneratorsForComponentsSPECARM(generators)
	componentsSPECARMGenerator = gen.Struct(reflect.TypeOf(Components_SPECARM{}), generators)

	return componentsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForComponentsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComponentsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForComponentsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComponentsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationInsightsComponentPropertiesSpecARMGenerator())
}

func Test_ApplicationInsightsComponentProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationInsightsComponentProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationInsightsComponentPropertiesSpecARM, ApplicationInsightsComponentPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationInsightsComponentPropertiesSpecARM runs a test to see if a specific instance of ApplicationInsightsComponentProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationInsightsComponentPropertiesSpecARM(subject ApplicationInsightsComponentProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationInsightsComponentProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationInsightsComponentProperties_SpecARM instances for property testing - lazily instantiated by
//ApplicationInsightsComponentPropertiesSpecARMGenerator()
var applicationInsightsComponentPropertiesSpecARMGenerator gopter.Gen

// ApplicationInsightsComponentPropertiesSpecARMGenerator returns a generator of ApplicationInsightsComponentProperties_SpecARM instances for property testing.
func ApplicationInsightsComponentPropertiesSpecARMGenerator() gopter.Gen {
	if applicationInsightsComponentPropertiesSpecARMGenerator != nil {
		return applicationInsightsComponentPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesSpecARM(generators)
	applicationInsightsComponentPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponentProperties_SpecARM{}), generators)

	return applicationInsightsComponentPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["ApplicationType"] = gen.OneConstOf(ApplicationInsightsComponentPropertiesSpecApplicationTypeOther, ApplicationInsightsComponentPropertiesSpecApplicationTypeWeb)
	gens["DisableIpMasking"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["FlowType"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesSpecFlowTypeBluefield))
	gens["ForceCustomerStorageForProfiler"] = gen.PtrOf(gen.Bool())
	gens["HockeyAppId"] = gen.PtrOf(gen.AlphaString())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
	gens["IngestionMode"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesSpecIngestionModeApplicationInsights, ApplicationInsightsComponentPropertiesSpecIngestionModeApplicationInsightsWithDiagnosticSettings, ApplicationInsightsComponentPropertiesSpecIngestionModeLogAnalytics))
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_SpecDisabled, PublicNetworkAccessType_SpecEnabled))
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_SpecDisabled, PublicNetworkAccessType_SpecEnabled))
	gens["RequestSource"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesSpecRequestSourceRest))
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
	gens["SamplingPercentage"] = gen.PtrOf(gen.Float64())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}
