// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200202

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationInsightsComponent_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationInsightsComponent_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationInsightsComponentStatusARM, ApplicationInsightsComponentStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationInsightsComponentStatusARM runs a test to see if a specific instance of ApplicationInsightsComponent_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationInsightsComponentStatusARM(subject ApplicationInsightsComponent_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationInsightsComponent_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationInsightsComponent_StatusARM instances for property testing - lazily instantiated by
//ApplicationInsightsComponentStatusARMGenerator()
var applicationInsightsComponentStatusARMGenerator gopter.Gen

// ApplicationInsightsComponentStatusARMGenerator returns a generator of ApplicationInsightsComponent_StatusARM instances for property testing.
// We first initialize applicationInsightsComponentStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationInsightsComponentStatusARMGenerator() gopter.Gen {
	if applicationInsightsComponentStatusARMGenerator != nil {
		return applicationInsightsComponentStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentStatusARM(generators)
	applicationInsightsComponentStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponent_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentStatusARM(generators)
	AddRelatedPropertyGeneratorsForApplicationInsightsComponentStatusARM(generators)
	applicationInsightsComponentStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponent_StatusARM{}), generators)

	return applicationInsightsComponentStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationInsightsComponentStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationInsightsComponentStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationInsightsComponentStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationInsightsComponentStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationInsightsComponentPropertiesStatusARMGenerator())
}

func Test_ApplicationInsightsComponentProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationInsightsComponentProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationInsightsComponentPropertiesStatusARM, ApplicationInsightsComponentPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationInsightsComponentPropertiesStatusARM runs a test to see if a specific instance of ApplicationInsightsComponentProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationInsightsComponentPropertiesStatusARM(subject ApplicationInsightsComponentProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationInsightsComponentProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationInsightsComponentProperties_StatusARM instances for property testing - lazily instantiated by
//ApplicationInsightsComponentPropertiesStatusARMGenerator()
var applicationInsightsComponentPropertiesStatusARMGenerator gopter.Gen

// ApplicationInsightsComponentPropertiesStatusARMGenerator returns a generator of ApplicationInsightsComponentProperties_StatusARM instances for property testing.
// We first initialize applicationInsightsComponentPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationInsightsComponentPropertiesStatusARMGenerator() gopter.Gen {
	if applicationInsightsComponentPropertiesStatusARMGenerator != nil {
		return applicationInsightsComponentPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesStatusARM(generators)
	applicationInsightsComponentPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponentProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForApplicationInsightsComponentPropertiesStatusARM(generators)
	applicationInsightsComponentPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationInsightsComponentProperties_StatusARM{}), generators)

	return applicationInsightsComponentPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationInsightsComponentPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AppId"] = gen.PtrOf(gen.AlphaString())
	gens["ApplicationId"] = gen.PtrOf(gen.AlphaString())
	gens["ApplicationType"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesStatusApplicationTypeOther, ApplicationInsightsComponentPropertiesStatusApplicationTypeWeb))
	gens["ConnectionString"] = gen.PtrOf(gen.AlphaString())
	gens["CreationDate"] = gen.PtrOf(gen.AlphaString())
	gens["DisableIpMasking"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["FlowType"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesStatusFlowTypeBluefield))
	gens["ForceCustomerStorageForProfiler"] = gen.PtrOf(gen.Bool())
	gens["HockeyAppId"] = gen.PtrOf(gen.AlphaString())
	gens["HockeyAppToken"] = gen.PtrOf(gen.AlphaString())
	gens["ImmediatePurgeDataOn30Days"] = gen.PtrOf(gen.Bool())
	gens["IngestionMode"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesStatusIngestionModeApplicationInsights, ApplicationInsightsComponentPropertiesStatusIngestionModeApplicationInsightsWithDiagnosticSettings, ApplicationInsightsComponentPropertiesStatusIngestionModeLogAnalytics))
	gens["InstrumentationKey"] = gen.PtrOf(gen.AlphaString())
	gens["LaMigrationDate"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccessForIngestion"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_StatusDisabled, PublicNetworkAccessType_StatusEnabled))
	gens["PublicNetworkAccessForQuery"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_StatusDisabled, PublicNetworkAccessType_StatusEnabled))
	gens["RequestSource"] = gen.PtrOf(gen.OneConstOf(ApplicationInsightsComponentPropertiesStatusRequestSourceRest))
	gens["RetentionInDays"] = gen.PtrOf(gen.Int())
	gens["SamplingPercentage"] = gen.PtrOf(gen.Float64())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationInsightsComponentPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationInsightsComponentPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["PrivateLinkScopedResources"] = gen.SliceOf(PrivateLinkScopedResourceStatusARMGenerator())
}

func Test_PrivateLinkScopedResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkScopedResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkScopedResourceStatusARM, PrivateLinkScopedResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkScopedResourceStatusARM runs a test to see if a specific instance of PrivateLinkScopedResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkScopedResourceStatusARM(subject PrivateLinkScopedResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkScopedResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkScopedResource_StatusARM instances for property testing - lazily instantiated by
//PrivateLinkScopedResourceStatusARMGenerator()
var privateLinkScopedResourceStatusARMGenerator gopter.Gen

// PrivateLinkScopedResourceStatusARMGenerator returns a generator of PrivateLinkScopedResource_StatusARM instances for property testing.
func PrivateLinkScopedResourceStatusARMGenerator() gopter.Gen {
	if privateLinkScopedResourceStatusARMGenerator != nil {
		return privateLinkScopedResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceStatusARM(generators)
	privateLinkScopedResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkScopedResource_StatusARM{}), generators)

	return privateLinkScopedResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkScopedResourceStatusARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ScopeId"] = gen.PtrOf(gen.AlphaString())
}
