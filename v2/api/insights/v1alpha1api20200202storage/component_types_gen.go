// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200202storage

import (
	"fmt"
	v20200202s "github.com/Azure/azure-service-operator/v2/api/insights/v1beta20200202storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20200202.Component
// Deprecated version of Component. Use v1beta20200202.Component instead
type Component struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Components_Spec                     `json:"spec,omitempty"`
	Status            ApplicationInsightsComponent_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Component{}

// GetConditions returns the conditions of the resource
func (component *Component) GetConditions() conditions.Conditions {
	return component.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (component *Component) SetConditions(conditions conditions.Conditions) {
	component.Status.Conditions = conditions
}

var _ conversion.Convertible = &Component{}

// ConvertFrom populates our Component from the provided hub Component
func (component *Component) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200202s.Component)
	if !ok {
		return fmt.Errorf("expected insights/v1beta20200202storage/Component but received %T instead", hub)
	}

	return component.AssignPropertiesFromComponent(source)
}

// ConvertTo populates the provided hub Component from our Component
func (component *Component) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200202s.Component)
	if !ok {
		return fmt.Errorf("expected insights/v1beta20200202storage/Component but received %T instead", hub)
	}

	return component.AssignPropertiesToComponent(destination)
}

var _ genruntime.KubernetesResource = &Component{}

// AzureName returns the Azure name of the resource
func (component *Component) AzureName() string {
	return component.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-02-02"
func (component Component) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (component *Component) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (component *Component) GetSpec() genruntime.ConvertibleSpec {
	return &component.Spec
}

// GetStatus returns the status of this resource
func (component *Component) GetStatus() genruntime.ConvertibleStatus {
	return &component.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/components"
func (component *Component) GetType() string {
	return "Microsoft.Insights/components"
}

// NewEmptyStatus returns a new empty (blank) status
func (component *Component) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ApplicationInsightsComponent_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (component *Component) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(component.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  component.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (component *Component) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ApplicationInsightsComponent_Status); ok {
		component.Status = *st
		return nil
	}

	// Convert status to required version
	var st ApplicationInsightsComponent_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	component.Status = st
	return nil
}

// AssignPropertiesFromComponent populates our Component from the provided source Component
func (component *Component) AssignPropertiesFromComponent(source *v20200202s.Component) error {

	// ObjectMeta
	component.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Components_Spec
	err := spec.AssignPropertiesFromComponentsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromComponentsSpec() to populate field Spec")
	}
	component.Spec = spec

	// Status
	var status ApplicationInsightsComponent_Status
	err = status.AssignPropertiesFromApplicationInsightsComponentStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromApplicationInsightsComponentStatus() to populate field Status")
	}
	component.Status = status

	// No error
	return nil
}

// AssignPropertiesToComponent populates the provided destination Component from our Component
func (component *Component) AssignPropertiesToComponent(destination *v20200202s.Component) error {

	// ObjectMeta
	destination.ObjectMeta = *component.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200202s.Components_Spec
	err := component.Spec.AssignPropertiesToComponentsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToComponentsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200202s.ApplicationInsightsComponent_Status
	err = component.Status.AssignPropertiesToApplicationInsightsComponentStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToApplicationInsightsComponentStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (component *Component) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: component.Spec.OriginalVersion,
		Kind:    "Component",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20200202.Component
// Deprecated version of Component. Use v1beta20200202.Component instead
type ComponentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Component `json:"items"`
}

// Storage version of v1alpha1api20200202.APIVersion
// Deprecated version of APIVersion. Use v1beta20200202.APIVersion instead
// +kubebuilder:validation:Enum={"2020-02-02"}
type APIVersion string

const APIVersionValue = APIVersion("2020-02-02")

// Storage version of v1alpha1api20200202.ApplicationInsightsComponent_Status
// Deprecated version of ApplicationInsightsComponent_Status. Use v1beta20200202.ApplicationInsightsComponent_Status instead
type ApplicationInsightsComponent_Status struct {
	AppId                           *string                            `json:"AppId,omitempty"`
	ApplicationId                   *string                            `json:"ApplicationId,omitempty"`
	ApplicationType                 *string                            `json:"Application_Type,omitempty"`
	Conditions                      []conditions.Condition             `json:"conditions,omitempty"`
	ConnectionString                *string                            `json:"ConnectionString,omitempty"`
	CreationDate                    *string                            `json:"CreationDate,omitempty"`
	DisableIpMasking                *bool                              `json:"DisableIpMasking,omitempty"`
	DisableLocalAuth                *bool                              `json:"DisableLocalAuth,omitempty"`
	Etag                            *string                            `json:"etag,omitempty"`
	FlowType                        *string                            `json:"Flow_Type,omitempty"`
	ForceCustomerStorageForProfiler *bool                              `json:"ForceCustomerStorageForProfiler,omitempty"`
	HockeyAppId                     *string                            `json:"HockeyAppId,omitempty"`
	HockeyAppToken                  *string                            `json:"HockeyAppToken,omitempty"`
	Id                              *string                            `json:"id,omitempty"`
	ImmediatePurgeDataOn30Days      *bool                              `json:"ImmediatePurgeDataOn30Days,omitempty"`
	IngestionMode                   *string                            `json:"IngestionMode,omitempty"`
	InstrumentationKey              *string                            `json:"InstrumentationKey,omitempty"`
	Kind                            *string                            `json:"kind,omitempty"`
	LaMigrationDate                 *string                            `json:"LaMigrationDate,omitempty"`
	Location                        *string                            `json:"location,omitempty"`
	Name                            *string                            `json:"name,omitempty"`
	PrivateLinkScopedResources      []PrivateLinkScopedResource_Status `json:"PrivateLinkScopedResources,omitempty"`
	PropertiesName                  *string                            `json:"properties_name,omitempty"`
	PropertyBag                     genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	ProvisioningState               *string                            `json:"provisioningState,omitempty"`
	PublicNetworkAccessForIngestion *string                            `json:"publicNetworkAccessForIngestion,omitempty"`
	PublicNetworkAccessForQuery     *string                            `json:"publicNetworkAccessForQuery,omitempty"`
	RequestSource                   *string                            `json:"Request_Source,omitempty"`
	RetentionInDays                 *int                               `json:"RetentionInDays,omitempty"`
	SamplingPercentage              *float64                           `json:"SamplingPercentage,omitempty"`
	Tags                            *v1.JSON                           `json:"tags,omitempty"`
	TenantId                        *string                            `json:"TenantId,omitempty"`
	Type                            *string                            `json:"type,omitempty"`
	WorkspaceResourceId             *string                            `json:"WorkspaceResourceId,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ApplicationInsightsComponent_Status{}

// ConvertStatusFrom populates our ApplicationInsightsComponent_Status from the provided source
func (component *ApplicationInsightsComponent_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200202s.ApplicationInsightsComponent_Status)
	if ok {
		// Populate our instance from source
		return component.AssignPropertiesFromApplicationInsightsComponentStatus(src)
	}

	// Convert to an intermediate form
	src = &v20200202s.ApplicationInsightsComponent_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = component.AssignPropertiesFromApplicationInsightsComponentStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ApplicationInsightsComponent_Status
func (component *ApplicationInsightsComponent_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200202s.ApplicationInsightsComponent_Status)
	if ok {
		// Populate destination from our instance
		return component.AssignPropertiesToApplicationInsightsComponentStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v20200202s.ApplicationInsightsComponent_Status{}
	err := component.AssignPropertiesToApplicationInsightsComponentStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromApplicationInsightsComponentStatus populates our ApplicationInsightsComponent_Status from the provided source ApplicationInsightsComponent_Status
func (component *ApplicationInsightsComponent_Status) AssignPropertiesFromApplicationInsightsComponentStatus(source *v20200202s.ApplicationInsightsComponent_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AppId
	component.AppId = genruntime.ClonePointerToString(source.AppId)

	// ApplicationId
	component.ApplicationId = genruntime.ClonePointerToString(source.ApplicationId)

	// ApplicationType
	component.ApplicationType = genruntime.ClonePointerToString(source.ApplicationType)

	// Conditions
	component.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ConnectionString
	component.ConnectionString = genruntime.ClonePointerToString(source.ConnectionString)

	// CreationDate
	component.CreationDate = genruntime.ClonePointerToString(source.CreationDate)

	// DisableIpMasking
	if source.DisableIpMasking != nil {
		disableIpMasking := *source.DisableIpMasking
		component.DisableIpMasking = &disableIpMasking
	} else {
		component.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		component.DisableLocalAuth = &disableLocalAuth
	} else {
		component.DisableLocalAuth = nil
	}

	// Etag
	component.Etag = genruntime.ClonePointerToString(source.Etag)

	// FlowType
	component.FlowType = genruntime.ClonePointerToString(source.FlowType)

	// ForceCustomerStorageForProfiler
	if source.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *source.ForceCustomerStorageForProfiler
		component.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		component.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	component.HockeyAppId = genruntime.ClonePointerToString(source.HockeyAppId)

	// HockeyAppToken
	component.HockeyAppToken = genruntime.ClonePointerToString(source.HockeyAppToken)

	// Id
	component.Id = genruntime.ClonePointerToString(source.Id)

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		component.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		component.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	component.IngestionMode = genruntime.ClonePointerToString(source.IngestionMode)

	// InstrumentationKey
	component.InstrumentationKey = genruntime.ClonePointerToString(source.InstrumentationKey)

	// Kind
	component.Kind = genruntime.ClonePointerToString(source.Kind)

	// LaMigrationDate
	component.LaMigrationDate = genruntime.ClonePointerToString(source.LaMigrationDate)

	// Location
	component.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	component.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateLinkScopedResources
	if source.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]PrivateLinkScopedResource_Status, len(source.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range source.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource PrivateLinkScopedResource_Status
			err := privateLinkScopedResource.AssignPropertiesFromPrivateLinkScopedResourceStatus(&privateLinkScopedResourceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateLinkScopedResourceStatus() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		component.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		component.PrivateLinkScopedResources = nil
	}

	// PropertiesName
	component.PropertiesName = genruntime.ClonePointerToString(source.PropertiesName)

	// ProvisioningState
	component.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccessForIngestion
	component.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(source.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	component.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(source.PublicNetworkAccessForQuery)

	// RequestSource
	component.RequestSource = genruntime.ClonePointerToString(source.RequestSource)

	// RetentionInDays
	component.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// SamplingPercentage
	if source.SamplingPercentage != nil {
		samplingPercentage := *source.SamplingPercentage
		component.SamplingPercentage = &samplingPercentage
	} else {
		component.SamplingPercentage = nil
	}

	// Tags
	if source.Tags != nil {
		tag := *source.Tags.DeepCopy()
		component.Tags = &tag
	} else {
		component.Tags = nil
	}

	// TenantId
	component.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	component.Type = genruntime.ClonePointerToString(source.Type)

	// WorkspaceResourceId
	component.WorkspaceResourceId = genruntime.ClonePointerToString(source.WorkspaceResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		component.PropertyBag = propertyBag
	} else {
		component.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToApplicationInsightsComponentStatus populates the provided destination ApplicationInsightsComponent_Status from our ApplicationInsightsComponent_Status
func (component *ApplicationInsightsComponent_Status) AssignPropertiesToApplicationInsightsComponentStatus(destination *v20200202s.ApplicationInsightsComponent_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(component.PropertyBag)

	// AppId
	destination.AppId = genruntime.ClonePointerToString(component.AppId)

	// ApplicationId
	destination.ApplicationId = genruntime.ClonePointerToString(component.ApplicationId)

	// ApplicationType
	destination.ApplicationType = genruntime.ClonePointerToString(component.ApplicationType)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(component.Conditions)

	// ConnectionString
	destination.ConnectionString = genruntime.ClonePointerToString(component.ConnectionString)

	// CreationDate
	destination.CreationDate = genruntime.ClonePointerToString(component.CreationDate)

	// DisableIpMasking
	if component.DisableIpMasking != nil {
		disableIpMasking := *component.DisableIpMasking
		destination.DisableIpMasking = &disableIpMasking
	} else {
		destination.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if component.DisableLocalAuth != nil {
		disableLocalAuth := *component.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(component.Etag)

	// FlowType
	destination.FlowType = genruntime.ClonePointerToString(component.FlowType)

	// ForceCustomerStorageForProfiler
	if component.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *component.ForceCustomerStorageForProfiler
		destination.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		destination.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	destination.HockeyAppId = genruntime.ClonePointerToString(component.HockeyAppId)

	// HockeyAppToken
	destination.HockeyAppToken = genruntime.ClonePointerToString(component.HockeyAppToken)

	// Id
	destination.Id = genruntime.ClonePointerToString(component.Id)

	// ImmediatePurgeDataOn30Days
	if component.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *component.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	destination.IngestionMode = genruntime.ClonePointerToString(component.IngestionMode)

	// InstrumentationKey
	destination.InstrumentationKey = genruntime.ClonePointerToString(component.InstrumentationKey)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(component.Kind)

	// LaMigrationDate
	destination.LaMigrationDate = genruntime.ClonePointerToString(component.LaMigrationDate)

	// Location
	destination.Location = genruntime.ClonePointerToString(component.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(component.Name)

	// PrivateLinkScopedResources
	if component.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]v20200202s.PrivateLinkScopedResource_Status, len(component.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range component.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource v20200202s.PrivateLinkScopedResource_Status
			err := privateLinkScopedResourceItem.AssignPropertiesToPrivateLinkScopedResourceStatus(&privateLinkScopedResource)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateLinkScopedResourceStatus() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		destination.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		destination.PrivateLinkScopedResources = nil
	}

	// PropertiesName
	destination.PropertiesName = genruntime.ClonePointerToString(component.PropertiesName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(component.ProvisioningState)

	// PublicNetworkAccessForIngestion
	destination.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(component.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	destination.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(component.PublicNetworkAccessForQuery)

	// RequestSource
	destination.RequestSource = genruntime.ClonePointerToString(component.RequestSource)

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(component.RetentionInDays)

	// SamplingPercentage
	if component.SamplingPercentage != nil {
		samplingPercentage := *component.SamplingPercentage
		destination.SamplingPercentage = &samplingPercentage
	} else {
		destination.SamplingPercentage = nil
	}

	// Tags
	if component.Tags != nil {
		tag := *component.Tags.DeepCopy()
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(component.TenantId)

	// Type
	destination.Type = genruntime.ClonePointerToString(component.Type)

	// WorkspaceResourceId
	destination.WorkspaceResourceId = genruntime.ClonePointerToString(component.WorkspaceResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200202.Components_Spec
type Components_Spec struct {
	ApplicationType *string `json:"Application_Type,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName                       string  `json:"azureName,omitempty"`
	DisableIpMasking                *bool   `json:"DisableIpMasking,omitempty"`
	DisableLocalAuth                *bool   `json:"DisableLocalAuth,omitempty"`
	Etag                            *string `json:"etag,omitempty"`
	FlowType                        *string `json:"Flow_Type,omitempty"`
	ForceCustomerStorageForProfiler *bool   `json:"ForceCustomerStorageForProfiler,omitempty"`
	HockeyAppId                     *string `json:"HockeyAppId,omitempty"`
	ImmediatePurgeDataOn30Days      *bool   `json:"ImmediatePurgeDataOn30Days,omitempty"`
	IngestionMode                   *string `json:"IngestionMode,omitempty"`
	Kind                            *string `json:"kind,omitempty"`
	Location                        *string `json:"location,omitempty"`
	OriginalVersion                 string  `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                           *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag                     genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	PublicNetworkAccessForIngestion *string                            `json:"publicNetworkAccessForIngestion,omitempty"`
	PublicNetworkAccessForQuery     *string                            `json:"publicNetworkAccessForQuery,omitempty"`
	RequestSource                   *string                            `json:"Request_Source,omitempty"`
	RetentionInDays                 *int                               `json:"RetentionInDays,omitempty"`
	SamplingPercentage              *float64                           `json:"SamplingPercentage,omitempty"`
	Tags                            map[string]string                  `json:"tags,omitempty"`
	WorkspaceResourceReference      *genruntime.ResourceReference      `armReference:"WorkspaceResourceId" json:"workspaceResourceReference,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Components_Spec{}

// ConvertSpecFrom populates our Components_Spec from the provided source
func (components *Components_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200202s.Components_Spec)
	if ok {
		// Populate our instance from source
		return components.AssignPropertiesFromComponentsSpec(src)
	}

	// Convert to an intermediate form
	src = &v20200202s.Components_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = components.AssignPropertiesFromComponentsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Components_Spec
func (components *Components_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200202s.Components_Spec)
	if ok {
		// Populate destination from our instance
		return components.AssignPropertiesToComponentsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200202s.Components_Spec{}
	err := components.AssignPropertiesToComponentsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromComponentsSpec populates our Components_Spec from the provided source Components_Spec
func (components *Components_Spec) AssignPropertiesFromComponentsSpec(source *v20200202s.Components_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ApplicationType
	components.ApplicationType = genruntime.ClonePointerToString(source.ApplicationType)

	// AzureName
	components.AzureName = source.AzureName

	// DisableIpMasking
	if source.DisableIpMasking != nil {
		disableIpMasking := *source.DisableIpMasking
		components.DisableIpMasking = &disableIpMasking
	} else {
		components.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		components.DisableLocalAuth = &disableLocalAuth
	} else {
		components.DisableLocalAuth = nil
	}

	// Etag
	components.Etag = genruntime.ClonePointerToString(source.Etag)

	// FlowType
	components.FlowType = genruntime.ClonePointerToString(source.FlowType)

	// ForceCustomerStorageForProfiler
	if source.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *source.ForceCustomerStorageForProfiler
		components.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		components.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	components.HockeyAppId = genruntime.ClonePointerToString(source.HockeyAppId)

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		components.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		components.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	components.IngestionMode = genruntime.ClonePointerToString(source.IngestionMode)

	// Kind
	components.Kind = genruntime.ClonePointerToString(source.Kind)

	// Location
	components.Location = genruntime.ClonePointerToString(source.Location)

	// OriginalVersion
	components.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		components.Owner = &owner
	} else {
		components.Owner = nil
	}

	// PublicNetworkAccessForIngestion
	components.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(source.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	components.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(source.PublicNetworkAccessForQuery)

	// RequestSource
	components.RequestSource = genruntime.ClonePointerToString(source.RequestSource)

	// RetentionInDays
	components.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// SamplingPercentage
	if source.SamplingPercentage != nil {
		samplingPercentage := *source.SamplingPercentage
		components.SamplingPercentage = &samplingPercentage
	} else {
		components.SamplingPercentage = nil
	}

	// Tags
	components.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// WorkspaceResourceReference
	if source.WorkspaceResourceReference != nil {
		workspaceResourceReference := source.WorkspaceResourceReference.Copy()
		components.WorkspaceResourceReference = &workspaceResourceReference
	} else {
		components.WorkspaceResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		components.PropertyBag = propertyBag
	} else {
		components.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToComponentsSpec populates the provided destination Components_Spec from our Components_Spec
func (components *Components_Spec) AssignPropertiesToComponentsSpec(destination *v20200202s.Components_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(components.PropertyBag)

	// ApplicationType
	destination.ApplicationType = genruntime.ClonePointerToString(components.ApplicationType)

	// AzureName
	destination.AzureName = components.AzureName

	// DisableIpMasking
	if components.DisableIpMasking != nil {
		disableIpMasking := *components.DisableIpMasking
		destination.DisableIpMasking = &disableIpMasking
	} else {
		destination.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if components.DisableLocalAuth != nil {
		disableLocalAuth := *components.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(components.Etag)

	// FlowType
	destination.FlowType = genruntime.ClonePointerToString(components.FlowType)

	// ForceCustomerStorageForProfiler
	if components.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *components.ForceCustomerStorageForProfiler
		destination.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		destination.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	destination.HockeyAppId = genruntime.ClonePointerToString(components.HockeyAppId)

	// ImmediatePurgeDataOn30Days
	if components.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *components.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	destination.IngestionMode = genruntime.ClonePointerToString(components.IngestionMode)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(components.Kind)

	// Location
	destination.Location = genruntime.ClonePointerToString(components.Location)

	// OriginalVersion
	destination.OriginalVersion = components.OriginalVersion

	// Owner
	if components.Owner != nil {
		owner := components.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccessForIngestion
	destination.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(components.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	destination.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(components.PublicNetworkAccessForQuery)

	// RequestSource
	destination.RequestSource = genruntime.ClonePointerToString(components.RequestSource)

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(components.RetentionInDays)

	// SamplingPercentage
	if components.SamplingPercentage != nil {
		samplingPercentage := *components.SamplingPercentage
		destination.SamplingPercentage = &samplingPercentage
	} else {
		destination.SamplingPercentage = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(components.Tags)

	// WorkspaceResourceReference
	if components.WorkspaceResourceReference != nil {
		workspaceResourceReference := components.WorkspaceResourceReference.Copy()
		destination.WorkspaceResourceReference = &workspaceResourceReference
	} else {
		destination.WorkspaceResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20200202.PrivateLinkScopedResource_Status
// Deprecated version of PrivateLinkScopedResource_Status. Use v1beta20200202.PrivateLinkScopedResource_Status instead
type PrivateLinkScopedResource_Status struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId  *string                `json:"ResourceId,omitempty"`
	ScopeId     *string                `json:"ScopeId,omitempty"`
}

// AssignPropertiesFromPrivateLinkScopedResourceStatus populates our PrivateLinkScopedResource_Status from the provided source PrivateLinkScopedResource_Status
func (resource *PrivateLinkScopedResource_Status) AssignPropertiesFromPrivateLinkScopedResourceStatus(source *v20200202s.PrivateLinkScopedResource_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ResourceId
	resource.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// ScopeId
	resource.ScopeId = genruntime.ClonePointerToString(source.ScopeId)

	// Update the property bag
	if len(propertyBag) > 0 {
		resource.PropertyBag = propertyBag
	} else {
		resource.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateLinkScopedResourceStatus populates the provided destination PrivateLinkScopedResource_Status from our PrivateLinkScopedResource_Status
func (resource *PrivateLinkScopedResource_Status) AssignPropertiesToPrivateLinkScopedResourceStatus(destination *v20200202s.PrivateLinkScopedResource_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(resource.PropertyBag)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(resource.ResourceId)

	// ScopeId
	destination.ScopeId = genruntime.ClonePointerToString(resource.ScopeId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Component{}, &ComponentList{})
}
