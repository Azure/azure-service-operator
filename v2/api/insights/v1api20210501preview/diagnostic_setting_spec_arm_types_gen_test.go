// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DiagnosticSetting_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiagnosticSetting_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiagnosticSetting_Spec_ARM, DiagnosticSetting_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiagnosticSetting_Spec_ARM runs a test to see if a specific instance of DiagnosticSetting_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiagnosticSetting_Spec_ARM(subject DiagnosticSetting_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiagnosticSetting_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiagnosticSetting_Spec_ARM instances for property testing - lazily instantiated by
// DiagnosticSetting_Spec_ARMGenerator()
var diagnosticSetting_Spec_ARMGenerator gopter.Gen

// DiagnosticSetting_Spec_ARMGenerator returns a generator of DiagnosticSetting_Spec_ARM instances for property testing.
// We first initialize diagnosticSetting_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiagnosticSetting_Spec_ARMGenerator() gopter.Gen {
	if diagnosticSetting_Spec_ARMGenerator != nil {
		return diagnosticSetting_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSetting_Spec_ARM(generators)
	diagnosticSetting_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSetting_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSetting_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForDiagnosticSetting_Spec_ARM(generators)
	diagnosticSetting_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSetting_Spec_ARM{}), generators)

	return diagnosticSetting_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDiagnosticSetting_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiagnosticSetting_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForDiagnosticSetting_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiagnosticSetting_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DiagnosticSettings_ARMGenerator())
}

func Test_DiagnosticSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiagnosticSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiagnosticSettings_ARM, DiagnosticSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiagnosticSettings_ARM runs a test to see if a specific instance of DiagnosticSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiagnosticSettings_ARM(subject DiagnosticSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiagnosticSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiagnosticSettings_ARM instances for property testing - lazily instantiated by
// DiagnosticSettings_ARMGenerator()
var diagnosticSettings_ARMGenerator gopter.Gen

// DiagnosticSettings_ARMGenerator returns a generator of DiagnosticSettings_ARM instances for property testing.
// We first initialize diagnosticSettings_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiagnosticSettings_ARMGenerator() gopter.Gen {
	if diagnosticSettings_ARMGenerator != nil {
		return diagnosticSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSettings_ARM(generators)
	diagnosticSettings_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSettings_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSettings_ARM(generators)
	AddRelatedPropertyGeneratorsForDiagnosticSettings_ARM(generators)
	diagnosticSettings_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSettings_ARM{}), generators)

	return diagnosticSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDiagnosticSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiagnosticSettings_ARM(gens map[string]gopter.Gen) {
	gens["EventHubAuthorizationRuleId"] = gen.PtrOf(gen.AlphaString())
	gens["EventHubName"] = gen.PtrOf(gen.AlphaString())
	gens["LogAnalyticsDestinationType"] = gen.PtrOf(gen.AlphaString())
	gens["MarketplacePartnerId"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceBusRuleId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDiagnosticSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiagnosticSettings_ARM(gens map[string]gopter.Gen) {
	gens["Logs"] = gen.SliceOf(LogSettings_ARMGenerator())
	gens["Metrics"] = gen.SliceOf(MetricSettings_ARMGenerator())
}

func Test_LogSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogSettings_ARM, LogSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogSettings_ARM runs a test to see if a specific instance of LogSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLogSettings_ARM(subject LogSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogSettings_ARM instances for property testing - lazily instantiated by LogSettings_ARMGenerator()
var logSettings_ARMGenerator gopter.Gen

// LogSettings_ARMGenerator returns a generator of LogSettings_ARM instances for property testing.
// We first initialize logSettings_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LogSettings_ARMGenerator() gopter.Gen {
	if logSettings_ARMGenerator != nil {
		return logSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogSettings_ARM(generators)
	logSettings_ARMGenerator = gen.Struct(reflect.TypeOf(LogSettings_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogSettings_ARM(generators)
	AddRelatedPropertyGeneratorsForLogSettings_ARM(generators)
	logSettings_ARMGenerator = gen.Struct(reflect.TypeOf(LogSettings_ARM{}), generators)

	return logSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLogSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogSettings_ARM(gens map[string]gopter.Gen) {
	gens["Category"] = gen.PtrOf(gen.AlphaString())
	gens["CategoryGroup"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForLogSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLogSettings_ARM(gens map[string]gopter.Gen) {
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicy_ARMGenerator())
}

func Test_MetricSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricSettings_ARM, MetricSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricSettings_ARM runs a test to see if a specific instance of MetricSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricSettings_ARM(subject MetricSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricSettings_ARM instances for property testing - lazily instantiated by MetricSettings_ARMGenerator()
var metricSettings_ARMGenerator gopter.Gen

// MetricSettings_ARMGenerator returns a generator of MetricSettings_ARM instances for property testing.
// We first initialize metricSettings_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MetricSettings_ARMGenerator() gopter.Gen {
	if metricSettings_ARMGenerator != nil {
		return metricSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricSettings_ARM(generators)
	metricSettings_ARMGenerator = gen.Struct(reflect.TypeOf(MetricSettings_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricSettings_ARM(generators)
	AddRelatedPropertyGeneratorsForMetricSettings_ARM(generators)
	metricSettings_ARMGenerator = gen.Struct(reflect.TypeOf(MetricSettings_ARM{}), generators)

	return metricSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricSettings_ARM(gens map[string]gopter.Gen) {
	gens["Category"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["TimeGrain"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMetricSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricSettings_ARM(gens map[string]gopter.Gen) {
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicy_ARMGenerator())
}

func Test_RetentionPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetentionPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetentionPolicy_ARM, RetentionPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetentionPolicy_ARM runs a test to see if a specific instance of RetentionPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetentionPolicy_ARM(subject RetentionPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetentionPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetentionPolicy_ARM instances for property testing - lazily instantiated by
// RetentionPolicy_ARMGenerator()
var retentionPolicy_ARMGenerator gopter.Gen

// RetentionPolicy_ARMGenerator returns a generator of RetentionPolicy_ARM instances for property testing.
func RetentionPolicy_ARMGenerator() gopter.Gen {
	if retentionPolicy_ARMGenerator != nil {
		return retentionPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetentionPolicy_ARM(generators)
	retentionPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(RetentionPolicy_ARM{}), generators)

	return retentionPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRetentionPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetentionPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}
