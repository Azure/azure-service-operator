// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DiagnosticSetting_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiagnosticSetting_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiagnosticSetting_STATUS_ARM, DiagnosticSetting_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiagnosticSetting_STATUS_ARM runs a test to see if a specific instance of DiagnosticSetting_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiagnosticSetting_STATUS_ARM(subject DiagnosticSetting_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiagnosticSetting_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiagnosticSetting_STATUS_ARM instances for property testing - lazily instantiated by
// DiagnosticSetting_STATUS_ARMGenerator()
var diagnosticSetting_STATUS_ARMGenerator gopter.Gen

// DiagnosticSetting_STATUS_ARMGenerator returns a generator of DiagnosticSetting_STATUS_ARM instances for property testing.
// We first initialize diagnosticSetting_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiagnosticSetting_STATUS_ARMGenerator() gopter.Gen {
	if diagnosticSetting_STATUS_ARMGenerator != nil {
		return diagnosticSetting_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSetting_STATUS_ARM(generators)
	diagnosticSetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSetting_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSetting_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDiagnosticSetting_STATUS_ARM(generators)
	diagnosticSetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSetting_STATUS_ARM{}), generators)

	return diagnosticSetting_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDiagnosticSetting_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiagnosticSetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDiagnosticSetting_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiagnosticSetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DiagnosticSettings_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_DiagnosticSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiagnosticSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiagnosticSettings_STATUS_ARM, DiagnosticSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiagnosticSettings_STATUS_ARM runs a test to see if a specific instance of DiagnosticSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiagnosticSettings_STATUS_ARM(subject DiagnosticSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiagnosticSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiagnosticSettings_STATUS_ARM instances for property testing - lazily instantiated by
// DiagnosticSettings_STATUS_ARMGenerator()
var diagnosticSettings_STATUS_ARMGenerator gopter.Gen

// DiagnosticSettings_STATUS_ARMGenerator returns a generator of DiagnosticSettings_STATUS_ARM instances for property testing.
// We first initialize diagnosticSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiagnosticSettings_STATUS_ARMGenerator() gopter.Gen {
	if diagnosticSettings_STATUS_ARMGenerator != nil {
		return diagnosticSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSettings_STATUS_ARM(generators)
	diagnosticSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiagnosticSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDiagnosticSettings_STATUS_ARM(generators)
	diagnosticSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticSettings_STATUS_ARM{}), generators)

	return diagnosticSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDiagnosticSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiagnosticSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EventHubAuthorizationRuleId"] = gen.PtrOf(gen.AlphaString())
	gens["EventHubName"] = gen.PtrOf(gen.AlphaString())
	gens["LogAnalyticsDestinationType"] = gen.PtrOf(gen.AlphaString())
	gens["MarketplacePartnerId"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceBusRuleId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDiagnosticSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiagnosticSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Logs"] = gen.SliceOf(LogSettings_STATUS_ARMGenerator())
	gens["Metrics"] = gen.SliceOf(MetricSettings_STATUS_ARMGenerator())
}

func Test_LogSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogSettings_STATUS_ARM, LogSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogSettings_STATUS_ARM runs a test to see if a specific instance of LogSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLogSettings_STATUS_ARM(subject LogSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogSettings_STATUS_ARM instances for property testing - lazily instantiated by
// LogSettings_STATUS_ARMGenerator()
var logSettings_STATUS_ARMGenerator gopter.Gen

// LogSettings_STATUS_ARMGenerator returns a generator of LogSettings_STATUS_ARM instances for property testing.
// We first initialize logSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LogSettings_STATUS_ARMGenerator() gopter.Gen {
	if logSettings_STATUS_ARMGenerator != nil {
		return logSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogSettings_STATUS_ARM(generators)
	logSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LogSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForLogSettings_STATUS_ARM(generators)
	logSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LogSettings_STATUS_ARM{}), generators)

	return logSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLogSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Category"] = gen.PtrOf(gen.AlphaString())
	gens["CategoryGroup"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForLogSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLogSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicy_STATUS_ARMGenerator())
}

func Test_MetricSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricSettings_STATUS_ARM, MetricSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricSettings_STATUS_ARM runs a test to see if a specific instance of MetricSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricSettings_STATUS_ARM(subject MetricSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricSettings_STATUS_ARM instances for property testing - lazily instantiated by
// MetricSettings_STATUS_ARMGenerator()
var metricSettings_STATUS_ARMGenerator gopter.Gen

// MetricSettings_STATUS_ARMGenerator returns a generator of MetricSettings_STATUS_ARM instances for property testing.
// We first initialize metricSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MetricSettings_STATUS_ARMGenerator() gopter.Gen {
	if metricSettings_STATUS_ARMGenerator != nil {
		return metricSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricSettings_STATUS_ARM(generators)
	metricSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMetricSettings_STATUS_ARM(generators)
	metricSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricSettings_STATUS_ARM{}), generators)

	return metricSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Category"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["TimeGrain"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMetricSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicy_STATUS_ARMGenerator())
}

func Test_RetentionPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetentionPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetentionPolicy_STATUS_ARM, RetentionPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetentionPolicy_STATUS_ARM runs a test to see if a specific instance of RetentionPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetentionPolicy_STATUS_ARM(subject RetentionPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetentionPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetentionPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// RetentionPolicy_STATUS_ARMGenerator()
var retentionPolicy_STATUS_ARMGenerator gopter.Gen

// RetentionPolicy_STATUS_ARMGenerator returns a generator of RetentionPolicy_STATUS_ARM instances for property testing.
func RetentionPolicy_STATUS_ARMGenerator() gopter.Gen {
	if retentionPolicy_STATUS_ARMGenerator != nil {
		return retentionPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetentionPolicy_STATUS_ARM(generators)
	retentionPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RetentionPolicy_STATUS_ARM{}), generators)

	return retentionPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRetentionPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetentionPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_ARM_Application,
		SystemData_CreatedByType_STATUS_ARM_Key,
		SystemData_CreatedByType_STATUS_ARM_ManagedIdentity,
		SystemData_CreatedByType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_ARM_Application,
		SystemData_LastModifiedByType_STATUS_ARM_Key,
		SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_ARM_User))
}
