// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20180501previewstorage

import (
	"fmt"
	v20180501ps "github.com/Azure/azure-service-operator/v2/api/insights/v1beta20180501previewstorage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20180501preview.Webtest
// Deprecated version of Webtest. Use v1beta20180501preview.Webtest instead
type Webtest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Webtests_Spec  `json:"spec,omitempty"`
	Status            WebTest_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Webtest{}

// GetConditions returns the conditions of the resource
func (webtest *Webtest) GetConditions() conditions.Conditions {
	return webtest.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (webtest *Webtest) SetConditions(conditions conditions.Conditions) {
	webtest.Status.Conditions = conditions
}

var _ conversion.Convertible = &Webtest{}

// ConvertFrom populates our Webtest from the provided hub Webtest
func (webtest *Webtest) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20180501ps.Webtest)
	if !ok {
		return fmt.Errorf("expected insights/v1beta20180501previewstorage/Webtest but received %T instead", hub)
	}

	return webtest.AssignProperties_From_Webtest(source)
}

// ConvertTo populates the provided hub Webtest from our Webtest
func (webtest *Webtest) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20180501ps.Webtest)
	if !ok {
		return fmt.Errorf("expected insights/v1beta20180501previewstorage/Webtest but received %T instead", hub)
	}

	return webtest.AssignProperties_To_Webtest(destination)
}

var _ genruntime.KubernetesResource = &Webtest{}

// AzureName returns the Azure name of the resource
func (webtest *Webtest) AzureName() string {
	return webtest.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-05-01-preview"
func (webtest Webtest) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (webtest *Webtest) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (webtest *Webtest) GetSpec() genruntime.ConvertibleSpec {
	return &webtest.Spec
}

// GetStatus returns the status of this resource
func (webtest *Webtest) GetStatus() genruntime.ConvertibleStatus {
	return &webtest.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/webtests"
func (webtest *Webtest) GetType() string {
	return "Microsoft.Insights/webtests"
}

// NewEmptyStatus returns a new empty (blank) status
func (webtest *Webtest) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &WebTest_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (webtest *Webtest) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(webtest.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  webtest.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (webtest *Webtest) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*WebTest_STATUS); ok {
		webtest.Status = *st
		return nil
	}

	// Convert status to required version
	var st WebTest_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	webtest.Status = st
	return nil
}

// AssignProperties_From_Webtest populates our Webtest from the provided source Webtest
func (webtest *Webtest) AssignProperties_From_Webtest(source *v20180501ps.Webtest) error {

	// ObjectMeta
	webtest.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Webtests_Spec
	err := spec.AssignProperties_From_Webtests_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Webtests_Spec() to populate field Spec")
	}
	webtest.Spec = spec

	// Status
	var status WebTest_STATUS
	err = status.AssignProperties_From_WebTest_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_WebTest_STATUS() to populate field Status")
	}
	webtest.Status = status

	// No error
	return nil
}

// AssignProperties_To_Webtest populates the provided destination Webtest from our Webtest
func (webtest *Webtest) AssignProperties_To_Webtest(destination *v20180501ps.Webtest) error {

	// ObjectMeta
	destination.ObjectMeta = *webtest.ObjectMeta.DeepCopy()

	// Spec
	var spec v20180501ps.Webtests_Spec
	err := webtest.Spec.AssignProperties_To_Webtests_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Webtests_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20180501ps.WebTest_STATUS
	err = webtest.Status.AssignProperties_To_WebTest_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_WebTest_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (webtest *Webtest) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: webtest.Spec.OriginalVersion,
		Kind:    "Webtest",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20180501preview.Webtest
// Deprecated version of Webtest. Use v1beta20180501preview.Webtest instead
type WebtestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Webtest `json:"items"`
}

// Storage version of v1alpha1api20180501preview.APIVersion
// Deprecated version of APIVersion. Use v1beta20180501preview.APIVersion instead
// +kubebuilder:validation:Enum={"2018-05-01-preview"}
type APIVersion string

const APIVersion_Value = APIVersion("2018-05-01-preview")

// Storage version of v1alpha1api20180501preview.WebTest_STATUS
// Deprecated version of WebTest_STATUS. Use v1beta20180501preview.WebTest_STATUS instead
type WebTest_STATUS struct {
	Conditions         []conditions.Condition                    `json:"conditions,omitempty"`
	Configuration      *WebTestProperties_STATUS_Configuration   `json:"Configuration,omitempty"`
	Description        *string                                   `json:"Description,omitempty"`
	Enabled            *bool                                     `json:"Enabled,omitempty"`
	Frequency          *int                                      `json:"Frequency,omitempty"`
	Id                 *string                                   `json:"id,omitempty"`
	Kind               *string                                   `json:"Kind,omitempty"`
	Location           *string                                   `json:"location,omitempty"`
	Locations          []WebTestGeolocation_STATUS               `json:"Locations,omitempty"`
	Name               *string                                   `json:"name,omitempty"`
	PropertiesName     *string                                   `json:"properties_name,omitempty"`
	PropertyBag        genruntime.PropertyBag                    `json:"$propertyBag,omitempty"`
	ProvisioningState  *string                                   `json:"provisioningState,omitempty"`
	Request            *WebTestProperties_STATUS_Request         `json:"Request,omitempty"`
	RetryEnabled       *bool                                     `json:"RetryEnabled,omitempty"`
	SyntheticMonitorId *string                                   `json:"SyntheticMonitorId,omitempty"`
	Tags               *v1.JSON                                  `json:"tags,omitempty"`
	Timeout            *int                                      `json:"Timeout,omitempty"`
	Type               *string                                   `json:"type,omitempty"`
	ValidationRules    *WebTestProperties_STATUS_ValidationRules `json:"ValidationRules,omitempty"`
}

var _ genruntime.ConvertibleStatus = &WebTest_STATUS{}

// ConvertStatusFrom populates our WebTest_STATUS from the provided source
func (test *WebTest_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20180501ps.WebTest_STATUS)
	if ok {
		// Populate our instance from source
		return test.AssignProperties_From_WebTest_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20180501ps.WebTest_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = test.AssignProperties_From_WebTest_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our WebTest_STATUS
func (test *WebTest_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20180501ps.WebTest_STATUS)
	if ok {
		// Populate destination from our instance
		return test.AssignProperties_To_WebTest_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20180501ps.WebTest_STATUS{}
	err := test.AssignProperties_To_WebTest_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignProperties_From_WebTest_STATUS populates our WebTest_STATUS from the provided source WebTest_STATUS
func (test *WebTest_STATUS) AssignProperties_From_WebTest_STATUS(source *v20180501ps.WebTest_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	test.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestProperties_STATUS_Configuration
		err := configuration.AssignProperties_From_WebTestProperties_STATUS_Configuration(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_STATUS_Configuration() to populate field Configuration")
		}
		test.Configuration = &configuration
	} else {
		test.Configuration = nil
	}

	// Description
	test.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		test.Enabled = &enabled
	} else {
		test.Enabled = nil
	}

	// Frequency
	test.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Id
	test.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	test.Kind = genruntime.ClonePointerToString(source.Kind)

	// Location
	test.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation_STATUS, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation_STATUS
			err := location.AssignProperties_From_WebTestGeolocation_STATUS(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_WebTestGeolocation_STATUS() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		test.Locations = locationList
	} else {
		test.Locations = nil
	}

	// Name
	test.Name = genruntime.ClonePointerToString(source.Name)

	// PropertiesName
	test.PropertiesName = genruntime.ClonePointerToString(source.PropertiesName)

	// ProvisioningState
	test.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Request
	if source.Request != nil {
		var request WebTestProperties_STATUS_Request
		err := request.AssignProperties_From_WebTestProperties_STATUS_Request(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_STATUS_Request() to populate field Request")
		}
		test.Request = &request
	} else {
		test.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		test.RetryEnabled = &retryEnabled
	} else {
		test.RetryEnabled = nil
	}

	// SyntheticMonitorId
	test.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	if source.Tags != nil {
		tag := *source.Tags.DeepCopy()
		test.Tags = &tag
	} else {
		test.Tags = nil
	}

	// Timeout
	test.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// Type
	test.Type = genruntime.ClonePointerToString(source.Type)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestProperties_STATUS_ValidationRules
		err := validationRule.AssignProperties_From_WebTestProperties_STATUS_ValidationRules(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_STATUS_ValidationRules() to populate field ValidationRules")
		}
		test.ValidationRules = &validationRule
	} else {
		test.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		test.PropertyBag = propertyBag
	} else {
		test.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTest_STATUS populates the provided destination WebTest_STATUS from our WebTest_STATUS
func (test *WebTest_STATUS) AssignProperties_To_WebTest_STATUS(destination *v20180501ps.WebTest_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(test.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(test.Conditions)

	// Configuration
	if test.Configuration != nil {
		var configuration v20180501ps.WebTestProperties_STATUS_Configuration
		err := test.Configuration.AssignProperties_To_WebTestProperties_STATUS_Configuration(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_STATUS_Configuration() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(test.Description)

	// Enabled
	if test.Enabled != nil {
		enabled := *test.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(test.Frequency)

	// Id
	destination.Id = genruntime.ClonePointerToString(test.Id)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(test.Kind)

	// Location
	destination.Location = genruntime.ClonePointerToString(test.Location)

	// Locations
	if test.Locations != nil {
		locationList := make([]v20180501ps.WebTestGeolocation_STATUS, len(test.Locations))
		for locationIndex, locationItem := range test.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v20180501ps.WebTestGeolocation_STATUS
			err := locationItem.AssignProperties_To_WebTestGeolocation_STATUS(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_WebTestGeolocation_STATUS() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(test.Name)

	// PropertiesName
	destination.PropertiesName = genruntime.ClonePointerToString(test.PropertiesName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(test.ProvisioningState)

	// Request
	if test.Request != nil {
		var request v20180501ps.WebTestProperties_STATUS_Request
		err := test.Request.AssignProperties_To_WebTestProperties_STATUS_Request(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_STATUS_Request() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if test.RetryEnabled != nil {
		retryEnabled := *test.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(test.SyntheticMonitorId)

	// Tags
	if test.Tags != nil {
		tag := *test.Tags.DeepCopy()
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(test.Timeout)

	// Type
	destination.Type = genruntime.ClonePointerToString(test.Type)

	// ValidationRules
	if test.ValidationRules != nil {
		var validationRule v20180501ps.WebTestProperties_STATUS_ValidationRules
		err := test.ValidationRules.AssignProperties_To_WebTestProperties_STATUS_ValidationRules(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_STATUS_ValidationRules() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.Webtests_Spec
type Webtests_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string                          `json:"azureName,omitempty"`
	Configuration   *WebTestPropertiesConfiguration `json:"Configuration,omitempty"`
	Description     *string                         `json:"Description,omitempty"`
	Enabled         *bool                           `json:"Enabled,omitempty"`
	Frequency       *int                            `json:"Frequency,omitempty"`
	Kind            *string                         `json:"Kind,omitempty"`
	Location        *string                         `json:"location,omitempty"`
	Locations       []WebTestGeolocation            `json:"Locations,omitempty"`
	Name            *string                         `json:"Name,omitempty"`
	OriginalVersion string                          `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner              *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag        genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Request            *WebTestPropertiesRequest          `json:"Request,omitempty"`
	RetryEnabled       *bool                              `json:"RetryEnabled,omitempty"`
	SyntheticMonitorId *string                            `json:"SyntheticMonitorId,omitempty"`
	Tags               map[string]string                  `json:"tags,omitempty"`
	Timeout            *int                               `json:"Timeout,omitempty"`
	ValidationRules    *WebTestPropertiesValidationRules  `json:"ValidationRules,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Webtests_Spec{}

// ConvertSpecFrom populates our Webtests_Spec from the provided source
func (webtests *Webtests_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20180501ps.Webtests_Spec)
	if ok {
		// Populate our instance from source
		return webtests.AssignProperties_From_Webtests_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20180501ps.Webtests_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = webtests.AssignProperties_From_Webtests_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Webtests_Spec
func (webtests *Webtests_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20180501ps.Webtests_Spec)
	if ok {
		// Populate destination from our instance
		return webtests.AssignProperties_To_Webtests_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20180501ps.Webtests_Spec{}
	err := webtests.AssignProperties_To_Webtests_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Webtests_Spec populates our Webtests_Spec from the provided source Webtests_Spec
func (webtests *Webtests_Spec) AssignProperties_From_Webtests_Spec(source *v20180501ps.Webtests_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	webtests.AzureName = source.AzureName

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestPropertiesConfiguration
		err := configuration.AssignProperties_From_WebTestPropertiesConfiguration(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestPropertiesConfiguration() to populate field Configuration")
		}
		webtests.Configuration = &configuration
	} else {
		webtests.Configuration = nil
	}

	// Description
	webtests.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		webtests.Enabled = &enabled
	} else {
		webtests.Enabled = nil
	}

	// Frequency
	webtests.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Kind
	webtests.Kind = genruntime.ClonePointerToString(source.Kind)

	// Location
	webtests.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation
			err := location.AssignProperties_From_WebTestGeolocation(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_WebTestGeolocation() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		webtests.Locations = locationList
	} else {
		webtests.Locations = nil
	}

	// Name
	webtests.Name = genruntime.ClonePointerToString(source.Name)

	// OriginalVersion
	webtests.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		webtests.Owner = &owner
	} else {
		webtests.Owner = nil
	}

	// Request
	if source.Request != nil {
		var request WebTestPropertiesRequest
		err := request.AssignProperties_From_WebTestPropertiesRequest(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestPropertiesRequest() to populate field Request")
		}
		webtests.Request = &request
	} else {
		webtests.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		webtests.RetryEnabled = &retryEnabled
	} else {
		webtests.RetryEnabled = nil
	}

	// SyntheticMonitorId
	webtests.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	webtests.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Timeout
	webtests.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestPropertiesValidationRules
		err := validationRule.AssignProperties_From_WebTestPropertiesValidationRules(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestPropertiesValidationRules() to populate field ValidationRules")
		}
		webtests.ValidationRules = &validationRule
	} else {
		webtests.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		webtests.PropertyBag = propertyBag
	} else {
		webtests.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Webtests_Spec populates the provided destination Webtests_Spec from our Webtests_Spec
func (webtests *Webtests_Spec) AssignProperties_To_Webtests_Spec(destination *v20180501ps.Webtests_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(webtests.PropertyBag)

	// AzureName
	destination.AzureName = webtests.AzureName

	// Configuration
	if webtests.Configuration != nil {
		var configuration v20180501ps.WebTestPropertiesConfiguration
		err := webtests.Configuration.AssignProperties_To_WebTestPropertiesConfiguration(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestPropertiesConfiguration() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(webtests.Description)

	// Enabled
	if webtests.Enabled != nil {
		enabled := *webtests.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(webtests.Frequency)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(webtests.Kind)

	// Location
	destination.Location = genruntime.ClonePointerToString(webtests.Location)

	// Locations
	if webtests.Locations != nil {
		locationList := make([]v20180501ps.WebTestGeolocation, len(webtests.Locations))
		for locationIndex, locationItem := range webtests.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v20180501ps.WebTestGeolocation
			err := locationItem.AssignProperties_To_WebTestGeolocation(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_WebTestGeolocation() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(webtests.Name)

	// OriginalVersion
	destination.OriginalVersion = webtests.OriginalVersion

	// Owner
	if webtests.Owner != nil {
		owner := webtests.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Request
	if webtests.Request != nil {
		var request v20180501ps.WebTestPropertiesRequest
		err := webtests.Request.AssignProperties_To_WebTestPropertiesRequest(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestPropertiesRequest() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if webtests.RetryEnabled != nil {
		retryEnabled := *webtests.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(webtests.SyntheticMonitorId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(webtests.Tags)

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(webtests.Timeout)

	// ValidationRules
	if webtests.ValidationRules != nil {
		var validationRule v20180501ps.WebTestPropertiesValidationRules
		err := webtests.ValidationRules.AssignProperties_To_WebTestPropertiesValidationRules(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestPropertiesValidationRules() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestGeolocation
// Deprecated version of WebTestGeolocation. Use v1beta20180501preview.WebTestGeolocation instead
type WebTestGeolocation struct {
	Id          *string                `json:"Id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_WebTestGeolocation populates our WebTestGeolocation from the provided source WebTestGeolocation
func (geolocation *WebTestGeolocation) AssignProperties_From_WebTestGeolocation(source *v20180501ps.WebTestGeolocation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		geolocation.PropertyBag = propertyBag
	} else {
		geolocation.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestGeolocation populates the provided destination WebTestGeolocation from our WebTestGeolocation
func (geolocation *WebTestGeolocation) AssignProperties_To_WebTestGeolocation(destination *v20180501ps.WebTestGeolocation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(geolocation.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestGeolocation_STATUS
// Deprecated version of WebTestGeolocation_STATUS. Use v1beta20180501preview.WebTestGeolocation_STATUS instead
type WebTestGeolocation_STATUS struct {
	Id          *string                `json:"Id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_WebTestGeolocation_STATUS populates our WebTestGeolocation_STATUS from the provided source WebTestGeolocation_STATUS
func (geolocation *WebTestGeolocation_STATUS) AssignProperties_From_WebTestGeolocation_STATUS(source *v20180501ps.WebTestGeolocation_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		geolocation.PropertyBag = propertyBag
	} else {
		geolocation.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestGeolocation_STATUS populates the provided destination WebTestGeolocation_STATUS from our WebTestGeolocation_STATUS
func (geolocation *WebTestGeolocation_STATUS) AssignProperties_To_WebTestGeolocation_STATUS(destination *v20180501ps.WebTestGeolocation_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(geolocation.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestProperties_STATUS_Configuration
// Deprecated version of WebTestProperties_STATUS_Configuration. Use v1beta20180501preview.WebTestProperties_STATUS_Configuration instead
type WebTestProperties_STATUS_Configuration struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	WebTest     *string                `json:"WebTest,omitempty"`
}

// AssignProperties_From_WebTestProperties_STATUS_Configuration populates our WebTestProperties_STATUS_Configuration from the provided source WebTestProperties_STATUS_Configuration
func (configuration *WebTestProperties_STATUS_Configuration) AssignProperties_From_WebTestProperties_STATUS_Configuration(source *v20180501ps.WebTestProperties_STATUS_Configuration) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		configuration.PropertyBag = propertyBag
	} else {
		configuration.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_STATUS_Configuration populates the provided destination WebTestProperties_STATUS_Configuration from our WebTestProperties_STATUS_Configuration
func (configuration *WebTestProperties_STATUS_Configuration) AssignProperties_To_WebTestProperties_STATUS_Configuration(destination *v20180501ps.WebTestProperties_STATUS_Configuration) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(configuration.PropertyBag)

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestProperties_STATUS_Request
// Deprecated version of WebTestProperties_STATUS_Request. Use v1beta20180501preview.WebTestProperties_STATUS_Request instead
type WebTestProperties_STATUS_Request struct {
	FollowRedirects        *bool                  `json:"FollowRedirects,omitempty"`
	Headers                []HeaderField_STATUS   `json:"Headers,omitempty"`
	HttpVerb               *string                `json:"HttpVerb,omitempty"`
	ParseDependentRequests *bool                  `json:"ParseDependentRequests,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RequestBody            *string                `json:"RequestBody,omitempty"`
	RequestUrl             *string                `json:"RequestUrl,omitempty"`
}

// AssignProperties_From_WebTestProperties_STATUS_Request populates our WebTestProperties_STATUS_Request from the provided source WebTestProperties_STATUS_Request
func (request *WebTestProperties_STATUS_Request) AssignProperties_From_WebTestProperties_STATUS_Request(source *v20180501ps.WebTestProperties_STATUS_Request) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField_STATUS, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField_STATUS
			err := header.AssignProperties_From_HeaderField_STATUS(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderField_STATUS() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		request.PropertyBag = propertyBag
	} else {
		request.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_STATUS_Request populates the provided destination WebTestProperties_STATUS_Request from our WebTestProperties_STATUS_Request
func (request *WebTestProperties_STATUS_Request) AssignProperties_To_WebTestProperties_STATUS_Request(destination *v20180501ps.WebTestProperties_STATUS_Request) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(request.PropertyBag)

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v20180501ps.HeaderField_STATUS, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v20180501ps.HeaderField_STATUS
			err := headerItem.AssignProperties_To_HeaderField_STATUS(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderField_STATUS() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestProperties_STATUS_ValidationRules
// Deprecated version of WebTestProperties_STATUS_ValidationRules. Use v1beta20180501preview.WebTestProperties_STATUS_ValidationRules instead
type WebTestProperties_STATUS_ValidationRules struct {
	ContentValidation             *WebTestProperties_STATUS_ValidationRules_ContentValidation `json:"ContentValidation,omitempty"`
	ExpectedHttpStatusCode        *int                                                        `json:"ExpectedHttpStatusCode,omitempty"`
	IgnoreHttpsStatusCode         *bool                                                       `json:"IgnoreHttpsStatusCode,omitempty"`
	PropertyBag                   genruntime.PropertyBag                                      `json:"$propertyBag,omitempty"`
	SSLCertRemainingLifetimeCheck *int                                                        `json:"SSLCertRemainingLifetimeCheck,omitempty"`
	SSLCheck                      *bool                                                       `json:"SSLCheck,omitempty"`
}

// AssignProperties_From_WebTestProperties_STATUS_ValidationRules populates our WebTestProperties_STATUS_ValidationRules from the provided source WebTestProperties_STATUS_ValidationRules
func (rules *WebTestProperties_STATUS_ValidationRules) AssignProperties_From_WebTestProperties_STATUS_ValidationRules(source *v20180501ps.WebTestProperties_STATUS_ValidationRules) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestProperties_STATUS_ValidationRules_ContentValidation
		err := contentValidation.AssignProperties_From_WebTestProperties_STATUS_ValidationRules_ContentValidation(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_STATUS_ValidationRules_ContentValidation() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		rules.PropertyBag = propertyBag
	} else {
		rules.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_STATUS_ValidationRules populates the provided destination WebTestProperties_STATUS_ValidationRules from our WebTestProperties_STATUS_ValidationRules
func (rules *WebTestProperties_STATUS_ValidationRules) AssignProperties_To_WebTestProperties_STATUS_ValidationRules(destination *v20180501ps.WebTestProperties_STATUS_ValidationRules) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rules.PropertyBag)

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v20180501ps.WebTestProperties_STATUS_ValidationRules_ContentValidation
		err := rules.ContentValidation.AssignProperties_To_WebTestProperties_STATUS_ValidationRules_ContentValidation(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_STATUS_ValidationRules_ContentValidation() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestPropertiesConfiguration
// Deprecated version of WebTestPropertiesConfiguration. Use v1beta20180501preview.WebTestPropertiesConfiguration instead
type WebTestPropertiesConfiguration struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	WebTest     *string                `json:"WebTest,omitempty"`
}

// AssignProperties_From_WebTestPropertiesConfiguration populates our WebTestPropertiesConfiguration from the provided source WebTestPropertiesConfiguration
func (configuration *WebTestPropertiesConfiguration) AssignProperties_From_WebTestPropertiesConfiguration(source *v20180501ps.WebTestPropertiesConfiguration) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		configuration.PropertyBag = propertyBag
	} else {
		configuration.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestPropertiesConfiguration populates the provided destination WebTestPropertiesConfiguration from our WebTestPropertiesConfiguration
func (configuration *WebTestPropertiesConfiguration) AssignProperties_To_WebTestPropertiesConfiguration(destination *v20180501ps.WebTestPropertiesConfiguration) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(configuration.PropertyBag)

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestPropertiesRequest
// Deprecated version of WebTestPropertiesRequest. Use v1beta20180501preview.WebTestPropertiesRequest instead
type WebTestPropertiesRequest struct {
	FollowRedirects        *bool                  `json:"FollowRedirects,omitempty"`
	Headers                []HeaderField          `json:"Headers,omitempty"`
	HttpVerb               *string                `json:"HttpVerb,omitempty"`
	ParseDependentRequests *bool                  `json:"ParseDependentRequests,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RequestBody            *string                `json:"RequestBody,omitempty"`
	RequestUrl             *string                `json:"RequestUrl,omitempty"`
}

// AssignProperties_From_WebTestPropertiesRequest populates our WebTestPropertiesRequest from the provided source WebTestPropertiesRequest
func (request *WebTestPropertiesRequest) AssignProperties_From_WebTestPropertiesRequest(source *v20180501ps.WebTestPropertiesRequest) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField
			err := header.AssignProperties_From_HeaderField(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderField() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		request.PropertyBag = propertyBag
	} else {
		request.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestPropertiesRequest populates the provided destination WebTestPropertiesRequest from our WebTestPropertiesRequest
func (request *WebTestPropertiesRequest) AssignProperties_To_WebTestPropertiesRequest(destination *v20180501ps.WebTestPropertiesRequest) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(request.PropertyBag)

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v20180501ps.HeaderField, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v20180501ps.HeaderField
			err := headerItem.AssignProperties_To_HeaderField(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderField() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestPropertiesValidationRules
// Deprecated version of WebTestPropertiesValidationRules. Use v1beta20180501preview.WebTestPropertiesValidationRules instead
type WebTestPropertiesValidationRules struct {
	ContentValidation             *WebTestPropertiesValidationRulesContentValidation `json:"ContentValidation,omitempty"`
	ExpectedHttpStatusCode        *int                                               `json:"ExpectedHttpStatusCode,omitempty"`
	IgnoreHttpsStatusCode         *bool                                              `json:"IgnoreHttpsStatusCode,omitempty"`
	PropertyBag                   genruntime.PropertyBag                             `json:"$propertyBag,omitempty"`
	SSLCertRemainingLifetimeCheck *int                                               `json:"SSLCertRemainingLifetimeCheck,omitempty"`
	SSLCheck                      *bool                                              `json:"SSLCheck,omitempty"`
}

// AssignProperties_From_WebTestPropertiesValidationRules populates our WebTestPropertiesValidationRules from the provided source WebTestPropertiesValidationRules
func (rules *WebTestPropertiesValidationRules) AssignProperties_From_WebTestPropertiesValidationRules(source *v20180501ps.WebTestPropertiesValidationRules) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestPropertiesValidationRulesContentValidation
		err := contentValidation.AssignProperties_From_WebTestPropertiesValidationRulesContentValidation(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestPropertiesValidationRulesContentValidation() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		rules.PropertyBag = propertyBag
	} else {
		rules.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestPropertiesValidationRules populates the provided destination WebTestPropertiesValidationRules from our WebTestPropertiesValidationRules
func (rules *WebTestPropertiesValidationRules) AssignProperties_To_WebTestPropertiesValidationRules(destination *v20180501ps.WebTestPropertiesValidationRules) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(rules.PropertyBag)

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v20180501ps.WebTestPropertiesValidationRulesContentValidation
		err := rules.ContentValidation.AssignProperties_To_WebTestPropertiesValidationRulesContentValidation(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestPropertiesValidationRulesContentValidation() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.HeaderField
// Deprecated version of HeaderField. Use v1beta20180501preview.HeaderField instead
type HeaderField struct {
	Key         *string                `json:"key,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// AssignProperties_From_HeaderField populates our HeaderField from the provided source HeaderField
func (field *HeaderField) AssignProperties_From_HeaderField(source *v20180501ps.HeaderField) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		field.PropertyBag = propertyBag
	} else {
		field.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HeaderField populates the provided destination HeaderField from our HeaderField
func (field *HeaderField) AssignProperties_To_HeaderField(destination *v20180501ps.HeaderField) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(field.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.HeaderField_STATUS
// Deprecated version of HeaderField_STATUS. Use v1beta20180501preview.HeaderField_STATUS instead
type HeaderField_STATUS struct {
	Key         *string                `json:"key,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// AssignProperties_From_HeaderField_STATUS populates our HeaderField_STATUS from the provided source HeaderField_STATUS
func (field *HeaderField_STATUS) AssignProperties_From_HeaderField_STATUS(source *v20180501ps.HeaderField_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		field.PropertyBag = propertyBag
	} else {
		field.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HeaderField_STATUS populates the provided destination HeaderField_STATUS from our HeaderField_STATUS
func (field *HeaderField_STATUS) AssignProperties_To_HeaderField_STATUS(destination *v20180501ps.HeaderField_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(field.PropertyBag)

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestProperties_STATUS_ValidationRules_ContentValidation
// Deprecated version of WebTestProperties_STATUS_ValidationRules_ContentValidation. Use v1beta20180501preview.WebTestProperties_STATUS_ValidationRules_ContentValidation instead
type WebTestProperties_STATUS_ValidationRules_ContentValidation struct {
	ContentMatch    *string                `json:"ContentMatch,omitempty"`
	IgnoreCase      *bool                  `json:"IgnoreCase,omitempty"`
	PassIfTextFound *bool                  `json:"PassIfTextFound,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_WebTestProperties_STATUS_ValidationRules_ContentValidation populates our WebTestProperties_STATUS_ValidationRules_ContentValidation from the provided source WebTestProperties_STATUS_ValidationRules_ContentValidation
func (validation *WebTestProperties_STATUS_ValidationRules_ContentValidation) AssignProperties_From_WebTestProperties_STATUS_ValidationRules_ContentValidation(source *v20180501ps.WebTestProperties_STATUS_ValidationRules_ContentValidation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		validation.PropertyBag = propertyBag
	} else {
		validation.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_STATUS_ValidationRules_ContentValidation populates the provided destination WebTestProperties_STATUS_ValidationRules_ContentValidation from our WebTestProperties_STATUS_ValidationRules_ContentValidation
func (validation *WebTestProperties_STATUS_ValidationRules_ContentValidation) AssignProperties_To_WebTestProperties_STATUS_ValidationRules_ContentValidation(destination *v20180501ps.WebTestProperties_STATUS_ValidationRules_ContentValidation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(validation.PropertyBag)

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20180501preview.WebTestPropertiesValidationRulesContentValidation
// Deprecated version of WebTestPropertiesValidationRulesContentValidation. Use v1beta20180501preview.WebTestPropertiesValidationRulesContentValidation instead
type WebTestPropertiesValidationRulesContentValidation struct {
	ContentMatch    *string                `json:"ContentMatch,omitempty"`
	IgnoreCase      *bool                  `json:"IgnoreCase,omitempty"`
	PassIfTextFound *bool                  `json:"PassIfTextFound,omitempty"`
	PropertyBag     genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_WebTestPropertiesValidationRulesContentValidation populates our WebTestPropertiesValidationRulesContentValidation from the provided source WebTestPropertiesValidationRulesContentValidation
func (validation *WebTestPropertiesValidationRulesContentValidation) AssignProperties_From_WebTestPropertiesValidationRulesContentValidation(source *v20180501ps.WebTestPropertiesValidationRulesContentValidation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		validation.PropertyBag = propertyBag
	} else {
		validation.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestPropertiesValidationRulesContentValidation populates the provided destination WebTestPropertiesValidationRulesContentValidation from our WebTestPropertiesValidationRulesContentValidation
func (validation *WebTestPropertiesValidationRulesContentValidation) AssignProperties_To_WebTestPropertiesValidationRulesContentValidation(destination *v20180501ps.WebTestPropertiesValidationRulesContentValidation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(validation.PropertyBag)

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Webtest{}, &WebtestList{})
}
