// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200202storage

import (
	"context"
	"fmt"
	v1api20200202s "github.com/Azure/azure-service-operator/v2/api/insights/v1api20200202storage"
	"github.com/Azure/azure-service-operator/v2/internal/genericarmclient"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/go-logr/logr"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1beta20200202.Component
// Deprecated version of Component. Use v1api20200202.Component instead
type Component struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Component_Spec   `json:"spec,omitempty"`
	Status            Component_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Component{}

// GetConditions returns the conditions of the resource
func (component *Component) GetConditions() conditions.Conditions {
	return component.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (component *Component) SetConditions(conditions conditions.Conditions) {
	component.Status.Conditions = conditions
}

var _ conversion.Convertible = &Component{}

// ConvertFrom populates our Component from the provided hub Component
func (component *Component) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1api20200202s.Component)
	if !ok {
		return fmt.Errorf("expected insights/v1api20200202storage/Component but received %T instead", hub)
	}

	return component.AssignProperties_From_Component(source)
}

// ConvertTo populates the provided hub Component from our Component
func (component *Component) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1api20200202s.Component)
	if !ok {
		return fmt.Errorf("expected insights/v1api20200202storage/Component but received %T instead", hub)
	}

	return component.AssignProperties_To_Component(destination)
}

var _ genruntime.KubernetesExporter = &Component{}

// ExportKubernetesResources defines a resource which can create other resources in Kubernetes.
func (component *Component) ExportKubernetesResources(_ context.Context, _ genruntime.MetaObject, _ *genericarmclient.GenericClient, _ logr.Logger) ([]client.Object, error) {
	collector := configmaps.NewCollector(component.Namespace)
	if component.Spec.OperatorSpec != nil && component.Spec.OperatorSpec.ConfigMaps != nil {
		if component.Status.ConnectionString != nil {
			collector.AddValue(component.Spec.OperatorSpec.ConfigMaps.ConnectionString, *component.Status.ConnectionString)
		}
	}
	if component.Spec.OperatorSpec != nil && component.Spec.OperatorSpec.ConfigMaps != nil {
		if component.Status.InstrumentationKey != nil {
			collector.AddValue(component.Spec.OperatorSpec.ConfigMaps.InstrumentationKey, *component.Status.InstrumentationKey)
		}
	}
	result, err := collector.Values()
	if err != nil {
		return nil, err
	}
	return configmaps.SliceToClientObjectSlice(result), nil
}

var _ genruntime.KubernetesResource = &Component{}

// AzureName returns the Azure name of the resource
func (component *Component) AzureName() string {
	return component.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-02-02"
func (component Component) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (component *Component) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (component *Component) GetSpec() genruntime.ConvertibleSpec {
	return &component.Spec
}

// GetStatus returns the status of this resource
func (component *Component) GetStatus() genruntime.ConvertibleStatus {
	return &component.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/components"
func (component *Component) GetType() string {
	return "Microsoft.Insights/components"
}

// NewEmptyStatus returns a new empty (blank) status
func (component *Component) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Component_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (component *Component) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(component.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  component.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (component *Component) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Component_STATUS); ok {
		component.Status = *st
		return nil
	}

	// Convert status to required version
	var st Component_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	component.Status = st
	return nil
}

// AssignProperties_From_Component populates our Component from the provided source Component
func (component *Component) AssignProperties_From_Component(source *v1api20200202s.Component) error {

	// ObjectMeta
	component.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Component_Spec
	err := spec.AssignProperties_From_Component_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Component_Spec() to populate field Spec")
	}
	component.Spec = spec

	// Status
	var status Component_STATUS
	err = status.AssignProperties_From_Component_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Component_STATUS() to populate field Status")
	}
	component.Status = status

	// Invoke the augmentConversionForComponent interface (if implemented) to customize the conversion
	var componentAsAny any = component
	if augmentedComponent, ok := componentAsAny.(augmentConversionForComponent); ok {
		err := augmentedComponent.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Component populates the provided destination Component from our Component
func (component *Component) AssignProperties_To_Component(destination *v1api20200202s.Component) error {

	// ObjectMeta
	destination.ObjectMeta = *component.ObjectMeta.DeepCopy()

	// Spec
	var spec v1api20200202s.Component_Spec
	err := component.Spec.AssignProperties_To_Component_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Component_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1api20200202s.Component_STATUS
	err = component.Status.AssignProperties_To_Component_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Component_STATUS() to populate field Status")
	}
	destination.Status = status

	// Invoke the augmentConversionForComponent interface (if implemented) to customize the conversion
	var componentAsAny any = component
	if augmentedComponent, ok := componentAsAny.(augmentConversionForComponent); ok {
		err := augmentedComponent.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (component *Component) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: component.Spec.OriginalVersion,
		Kind:    "Component",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1beta20200202.Component
// Deprecated version of Component. Use v1api20200202.Component instead
type ComponentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Component `json:"items"`
}

// Storage version of v1beta20200202.APIVersion
// Deprecated version of APIVersion. Use v1api20200202.APIVersion instead
// +kubebuilder:validation:Enum={"2020-02-02"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-02-02")

type augmentConversionForComponent interface {
	AssignPropertiesFrom(src *v1api20200202s.Component) error
	AssignPropertiesTo(dst *v1api20200202s.Component) error
}

// Storage version of v1beta20200202.Component_Spec
type Component_Spec struct {
	Application_Type *string `json:"Application_Type,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName                       string                 `json:"azureName,omitempty"`
	DisableIpMasking                *bool                  `json:"DisableIpMasking,omitempty"`
	DisableLocalAuth                *bool                  `json:"DisableLocalAuth,omitempty"`
	Etag                            *string                `json:"etag,omitempty"`
	Flow_Type                       *string                `json:"Flow_Type,omitempty"`
	ForceCustomerStorageForProfiler *bool                  `json:"ForceCustomerStorageForProfiler,omitempty"`
	HockeyAppId                     *string                `json:"HockeyAppId,omitempty"`
	ImmediatePurgeDataOn30Days      *bool                  `json:"ImmediatePurgeDataOn30Days,omitempty"`
	IngestionMode                   *string                `json:"IngestionMode,omitempty"`
	Kind                            *string                `json:"kind,omitempty"`
	Location                        *string                `json:"location,omitempty"`
	OperatorSpec                    *ComponentOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion                 string                 `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                           *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag                     genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	PublicNetworkAccessForIngestion *string                            `json:"publicNetworkAccessForIngestion,omitempty"`
	PublicNetworkAccessForQuery     *string                            `json:"publicNetworkAccessForQuery,omitempty"`
	Request_Source                  *string                            `json:"Request_Source,omitempty"`
	RetentionInDays                 *int                               `json:"RetentionInDays,omitempty"`
	SamplingPercentage              *float64                           `json:"SamplingPercentage,omitempty"`
	Tags                            map[string]string                  `json:"tags,omitempty"`
	WorkspaceResourceReference      *genruntime.ResourceReference      `armReference:"WorkspaceResourceId" json:"workspaceResourceReference,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Component_Spec{}

// ConvertSpecFrom populates our Component_Spec from the provided source
func (component *Component_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1api20200202s.Component_Spec)
	if ok {
		// Populate our instance from source
		return component.AssignProperties_From_Component_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1api20200202s.Component_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = component.AssignProperties_From_Component_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Component_Spec
func (component *Component_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1api20200202s.Component_Spec)
	if ok {
		// Populate destination from our instance
		return component.AssignProperties_To_Component_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1api20200202s.Component_Spec{}
	err := component.AssignProperties_To_Component_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Component_Spec populates our Component_Spec from the provided source Component_Spec
func (component *Component_Spec) AssignProperties_From_Component_Spec(source *v1api20200202s.Component_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Application_Type
	component.Application_Type = genruntime.ClonePointerToString(source.Application_Type)

	// AzureName
	component.AzureName = source.AzureName

	// DisableIpMasking
	if source.DisableIpMasking != nil {
		disableIpMasking := *source.DisableIpMasking
		component.DisableIpMasking = &disableIpMasking
	} else {
		component.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		component.DisableLocalAuth = &disableLocalAuth
	} else {
		component.DisableLocalAuth = nil
	}

	// Etag
	component.Etag = genruntime.ClonePointerToString(source.Etag)

	// Flow_Type
	component.Flow_Type = genruntime.ClonePointerToString(source.Flow_Type)

	// ForceCustomerStorageForProfiler
	if source.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *source.ForceCustomerStorageForProfiler
		component.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		component.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	component.HockeyAppId = genruntime.ClonePointerToString(source.HockeyAppId)

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		component.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		component.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	component.IngestionMode = genruntime.ClonePointerToString(source.IngestionMode)

	// Kind
	component.Kind = genruntime.ClonePointerToString(source.Kind)

	// Location
	component.Location = genruntime.ClonePointerToString(source.Location)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec ComponentOperatorSpec
		err := operatorSpec.AssignProperties_From_ComponentOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ComponentOperatorSpec() to populate field OperatorSpec")
		}
		component.OperatorSpec = &operatorSpec
	} else {
		component.OperatorSpec = nil
	}

	// OriginalVersion
	component.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		component.Owner = &owner
	} else {
		component.Owner = nil
	}

	// PublicNetworkAccessForIngestion
	component.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(source.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	component.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(source.PublicNetworkAccessForQuery)

	// Request_Source
	component.Request_Source = genruntime.ClonePointerToString(source.Request_Source)

	// RetentionInDays
	component.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// SamplingPercentage
	if source.SamplingPercentage != nil {
		samplingPercentage := *source.SamplingPercentage
		component.SamplingPercentage = &samplingPercentage
	} else {
		component.SamplingPercentage = nil
	}

	// Tags
	component.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// WorkspaceResourceReference
	if source.WorkspaceResourceReference != nil {
		workspaceResourceReference := source.WorkspaceResourceReference.Copy()
		component.WorkspaceResourceReference = &workspaceResourceReference
	} else {
		component.WorkspaceResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		component.PropertyBag = propertyBag
	} else {
		component.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponent_Spec interface (if implemented) to customize the conversion
	var componentAsAny any = component
	if augmentedComponent, ok := componentAsAny.(augmentConversionForComponent_Spec); ok {
		err := augmentedComponent.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Component_Spec populates the provided destination Component_Spec from our Component_Spec
func (component *Component_Spec) AssignProperties_To_Component_Spec(destination *v1api20200202s.Component_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(component.PropertyBag)

	// Application_Type
	destination.Application_Type = genruntime.ClonePointerToString(component.Application_Type)

	// AzureName
	destination.AzureName = component.AzureName

	// DisableIpMasking
	if component.DisableIpMasking != nil {
		disableIpMasking := *component.DisableIpMasking
		destination.DisableIpMasking = &disableIpMasking
	} else {
		destination.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if component.DisableLocalAuth != nil {
		disableLocalAuth := *component.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(component.Etag)

	// Flow_Type
	destination.Flow_Type = genruntime.ClonePointerToString(component.Flow_Type)

	// ForceCustomerStorageForProfiler
	if component.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *component.ForceCustomerStorageForProfiler
		destination.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		destination.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	destination.HockeyAppId = genruntime.ClonePointerToString(component.HockeyAppId)

	// ImmediatePurgeDataOn30Days
	if component.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *component.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	destination.IngestionMode = genruntime.ClonePointerToString(component.IngestionMode)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(component.Kind)

	// Location
	destination.Location = genruntime.ClonePointerToString(component.Location)

	// OperatorSpec
	if component.OperatorSpec != nil {
		var operatorSpec v1api20200202s.ComponentOperatorSpec
		err := component.OperatorSpec.AssignProperties_To_ComponentOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ComponentOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = component.OriginalVersion

	// Owner
	if component.Owner != nil {
		owner := component.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccessForIngestion
	destination.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(component.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	destination.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(component.PublicNetworkAccessForQuery)

	// Request_Source
	destination.Request_Source = genruntime.ClonePointerToString(component.Request_Source)

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(component.RetentionInDays)

	// SamplingPercentage
	if component.SamplingPercentage != nil {
		samplingPercentage := *component.SamplingPercentage
		destination.SamplingPercentage = &samplingPercentage
	} else {
		destination.SamplingPercentage = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(component.Tags)

	// WorkspaceResourceReference
	if component.WorkspaceResourceReference != nil {
		workspaceResourceReference := component.WorkspaceResourceReference.Copy()
		destination.WorkspaceResourceReference = &workspaceResourceReference
	} else {
		destination.WorkspaceResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponent_Spec interface (if implemented) to customize the conversion
	var componentAsAny any = component
	if augmentedComponent, ok := componentAsAny.(augmentConversionForComponent_Spec); ok {
		err := augmentedComponent.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20200202.Component_STATUS
// Deprecated version of Component_STATUS. Use v1api20200202.Component_STATUS instead
type Component_STATUS struct {
	AppId                           *string                            `json:"AppId,omitempty"`
	ApplicationId                   *string                            `json:"ApplicationId,omitempty"`
	Application_Type                *string                            `json:"Application_Type,omitempty"`
	Conditions                      []conditions.Condition             `json:"conditions,omitempty"`
	ConnectionString                *string                            `json:"ConnectionString,omitempty"`
	CreationDate                    *string                            `json:"CreationDate,omitempty"`
	DisableIpMasking                *bool                              `json:"DisableIpMasking,omitempty"`
	DisableLocalAuth                *bool                              `json:"DisableLocalAuth,omitempty"`
	Etag                            *string                            `json:"etag,omitempty"`
	Flow_Type                       *string                            `json:"Flow_Type,omitempty"`
	ForceCustomerStorageForProfiler *bool                              `json:"ForceCustomerStorageForProfiler,omitempty"`
	HockeyAppId                     *string                            `json:"HockeyAppId,omitempty"`
	HockeyAppToken                  *string                            `json:"HockeyAppToken,omitempty"`
	Id                              *string                            `json:"id,omitempty"`
	ImmediatePurgeDataOn30Days      *bool                              `json:"ImmediatePurgeDataOn30Days,omitempty"`
	IngestionMode                   *string                            `json:"IngestionMode,omitempty"`
	InstrumentationKey              *string                            `json:"InstrumentationKey,omitempty"`
	Kind                            *string                            `json:"kind,omitempty"`
	LaMigrationDate                 *string                            `json:"LaMigrationDate,omitempty"`
	Location                        *string                            `json:"location,omitempty"`
	Name                            *string                            `json:"name,omitempty"`
	PrivateLinkScopedResources      []PrivateLinkScopedResource_STATUS `json:"PrivateLinkScopedResources,omitempty"`
	PropertiesName                  *string                            `json:"properties_name,omitempty"`
	PropertyBag                     genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	ProvisioningState               *string                            `json:"provisioningState,omitempty"`
	PublicNetworkAccessForIngestion *string                            `json:"publicNetworkAccessForIngestion,omitempty"`
	PublicNetworkAccessForQuery     *string                            `json:"publicNetworkAccessForQuery,omitempty"`
	Request_Source                  *string                            `json:"Request_Source,omitempty"`
	RetentionInDays                 *int                               `json:"RetentionInDays,omitempty"`
	SamplingPercentage              *float64                           `json:"SamplingPercentage,omitempty"`
	Tags                            map[string]string                  `json:"tags,omitempty"`
	TenantId                        *string                            `json:"TenantId,omitempty"`
	Type                            *string                            `json:"type,omitempty"`
	WorkspaceResourceId             *string                            `json:"WorkspaceResourceId,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Component_STATUS{}

// ConvertStatusFrom populates our Component_STATUS from the provided source
func (component *Component_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1api20200202s.Component_STATUS)
	if ok {
		// Populate our instance from source
		return component.AssignProperties_From_Component_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v1api20200202s.Component_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = component.AssignProperties_From_Component_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Component_STATUS
func (component *Component_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1api20200202s.Component_STATUS)
	if ok {
		// Populate destination from our instance
		return component.AssignProperties_To_Component_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v1api20200202s.Component_STATUS{}
	err := component.AssignProperties_To_Component_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignProperties_From_Component_STATUS populates our Component_STATUS from the provided source Component_STATUS
func (component *Component_STATUS) AssignProperties_From_Component_STATUS(source *v1api20200202s.Component_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AppId
	component.AppId = genruntime.ClonePointerToString(source.AppId)

	// ApplicationId
	component.ApplicationId = genruntime.ClonePointerToString(source.ApplicationId)

	// Application_Type
	component.Application_Type = genruntime.ClonePointerToString(source.Application_Type)

	// Conditions
	component.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ConnectionString
	component.ConnectionString = genruntime.ClonePointerToString(source.ConnectionString)

	// CreationDate
	component.CreationDate = genruntime.ClonePointerToString(source.CreationDate)

	// DisableIpMasking
	if source.DisableIpMasking != nil {
		disableIpMasking := *source.DisableIpMasking
		component.DisableIpMasking = &disableIpMasking
	} else {
		component.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		component.DisableLocalAuth = &disableLocalAuth
	} else {
		component.DisableLocalAuth = nil
	}

	// Etag
	component.Etag = genruntime.ClonePointerToString(source.Etag)

	// Flow_Type
	component.Flow_Type = genruntime.ClonePointerToString(source.Flow_Type)

	// ForceCustomerStorageForProfiler
	if source.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *source.ForceCustomerStorageForProfiler
		component.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		component.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	component.HockeyAppId = genruntime.ClonePointerToString(source.HockeyAppId)

	// HockeyAppToken
	component.HockeyAppToken = genruntime.ClonePointerToString(source.HockeyAppToken)

	// Id
	component.Id = genruntime.ClonePointerToString(source.Id)

	// ImmediatePurgeDataOn30Days
	if source.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *source.ImmediatePurgeDataOn30Days
		component.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		component.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	component.IngestionMode = genruntime.ClonePointerToString(source.IngestionMode)

	// InstrumentationKey
	component.InstrumentationKey = genruntime.ClonePointerToString(source.InstrumentationKey)

	// Kind
	component.Kind = genruntime.ClonePointerToString(source.Kind)

	// LaMigrationDate
	component.LaMigrationDate = genruntime.ClonePointerToString(source.LaMigrationDate)

	// Location
	component.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	component.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateLinkScopedResources
	if source.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]PrivateLinkScopedResource_STATUS, len(source.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range source.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource PrivateLinkScopedResource_STATUS
			err := privateLinkScopedResource.AssignProperties_From_PrivateLinkScopedResource_STATUS(&privateLinkScopedResourceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateLinkScopedResource_STATUS() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		component.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		component.PrivateLinkScopedResources = nil
	}

	// PropertiesName
	component.PropertiesName = genruntime.ClonePointerToString(source.PropertiesName)

	// ProvisioningState
	component.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccessForIngestion
	component.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(source.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	component.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(source.PublicNetworkAccessForQuery)

	// Request_Source
	component.Request_Source = genruntime.ClonePointerToString(source.Request_Source)

	// RetentionInDays
	component.RetentionInDays = genruntime.ClonePointerToInt(source.RetentionInDays)

	// SamplingPercentage
	if source.SamplingPercentage != nil {
		samplingPercentage := *source.SamplingPercentage
		component.SamplingPercentage = &samplingPercentage
	} else {
		component.SamplingPercentage = nil
	}

	// Tags
	component.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantId
	component.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	component.Type = genruntime.ClonePointerToString(source.Type)

	// WorkspaceResourceId
	component.WorkspaceResourceId = genruntime.ClonePointerToString(source.WorkspaceResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		component.PropertyBag = propertyBag
	} else {
		component.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponent_STATUS interface (if implemented) to customize the conversion
	var componentAsAny any = component
	if augmentedComponent, ok := componentAsAny.(augmentConversionForComponent_STATUS); ok {
		err := augmentedComponent.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Component_STATUS populates the provided destination Component_STATUS from our Component_STATUS
func (component *Component_STATUS) AssignProperties_To_Component_STATUS(destination *v1api20200202s.Component_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(component.PropertyBag)

	// AppId
	destination.AppId = genruntime.ClonePointerToString(component.AppId)

	// ApplicationId
	destination.ApplicationId = genruntime.ClonePointerToString(component.ApplicationId)

	// Application_Type
	destination.Application_Type = genruntime.ClonePointerToString(component.Application_Type)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(component.Conditions)

	// ConnectionString
	destination.ConnectionString = genruntime.ClonePointerToString(component.ConnectionString)

	// CreationDate
	destination.CreationDate = genruntime.ClonePointerToString(component.CreationDate)

	// DisableIpMasking
	if component.DisableIpMasking != nil {
		disableIpMasking := *component.DisableIpMasking
		destination.DisableIpMasking = &disableIpMasking
	} else {
		destination.DisableIpMasking = nil
	}

	// DisableLocalAuth
	if component.DisableLocalAuth != nil {
		disableLocalAuth := *component.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(component.Etag)

	// Flow_Type
	destination.Flow_Type = genruntime.ClonePointerToString(component.Flow_Type)

	// ForceCustomerStorageForProfiler
	if component.ForceCustomerStorageForProfiler != nil {
		forceCustomerStorageForProfiler := *component.ForceCustomerStorageForProfiler
		destination.ForceCustomerStorageForProfiler = &forceCustomerStorageForProfiler
	} else {
		destination.ForceCustomerStorageForProfiler = nil
	}

	// HockeyAppId
	destination.HockeyAppId = genruntime.ClonePointerToString(component.HockeyAppId)

	// HockeyAppToken
	destination.HockeyAppToken = genruntime.ClonePointerToString(component.HockeyAppToken)

	// Id
	destination.Id = genruntime.ClonePointerToString(component.Id)

	// ImmediatePurgeDataOn30Days
	if component.ImmediatePurgeDataOn30Days != nil {
		immediatePurgeDataOn30Day := *component.ImmediatePurgeDataOn30Days
		destination.ImmediatePurgeDataOn30Days = &immediatePurgeDataOn30Day
	} else {
		destination.ImmediatePurgeDataOn30Days = nil
	}

	// IngestionMode
	destination.IngestionMode = genruntime.ClonePointerToString(component.IngestionMode)

	// InstrumentationKey
	destination.InstrumentationKey = genruntime.ClonePointerToString(component.InstrumentationKey)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(component.Kind)

	// LaMigrationDate
	destination.LaMigrationDate = genruntime.ClonePointerToString(component.LaMigrationDate)

	// Location
	destination.Location = genruntime.ClonePointerToString(component.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(component.Name)

	// PrivateLinkScopedResources
	if component.PrivateLinkScopedResources != nil {
		privateLinkScopedResourceList := make([]v1api20200202s.PrivateLinkScopedResource_STATUS, len(component.PrivateLinkScopedResources))
		for privateLinkScopedResourceIndex, privateLinkScopedResourceItem := range component.PrivateLinkScopedResources {
			// Shadow the loop variable to avoid aliasing
			privateLinkScopedResourceItem := privateLinkScopedResourceItem
			var privateLinkScopedResource v1api20200202s.PrivateLinkScopedResource_STATUS
			err := privateLinkScopedResourceItem.AssignProperties_To_PrivateLinkScopedResource_STATUS(&privateLinkScopedResource)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateLinkScopedResource_STATUS() to populate field PrivateLinkScopedResources")
			}
			privateLinkScopedResourceList[privateLinkScopedResourceIndex] = privateLinkScopedResource
		}
		destination.PrivateLinkScopedResources = privateLinkScopedResourceList
	} else {
		destination.PrivateLinkScopedResources = nil
	}

	// PropertiesName
	destination.PropertiesName = genruntime.ClonePointerToString(component.PropertiesName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(component.ProvisioningState)

	// PublicNetworkAccessForIngestion
	destination.PublicNetworkAccessForIngestion = genruntime.ClonePointerToString(component.PublicNetworkAccessForIngestion)

	// PublicNetworkAccessForQuery
	destination.PublicNetworkAccessForQuery = genruntime.ClonePointerToString(component.PublicNetworkAccessForQuery)

	// Request_Source
	destination.Request_Source = genruntime.ClonePointerToString(component.Request_Source)

	// RetentionInDays
	destination.RetentionInDays = genruntime.ClonePointerToInt(component.RetentionInDays)

	// SamplingPercentage
	if component.SamplingPercentage != nil {
		samplingPercentage := *component.SamplingPercentage
		destination.SamplingPercentage = &samplingPercentage
	} else {
		destination.SamplingPercentage = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(component.Tags)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(component.TenantId)

	// Type
	destination.Type = genruntime.ClonePointerToString(component.Type)

	// WorkspaceResourceId
	destination.WorkspaceResourceId = genruntime.ClonePointerToString(component.WorkspaceResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponent_STATUS interface (if implemented) to customize the conversion
	var componentAsAny any = component
	if augmentedComponent, ok := componentAsAny.(augmentConversionForComponent_STATUS); ok {
		err := augmentedComponent.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForComponent_Spec interface {
	AssignPropertiesFrom(src *v1api20200202s.Component_Spec) error
	AssignPropertiesTo(dst *v1api20200202s.Component_Spec) error
}

type augmentConversionForComponent_STATUS interface {
	AssignPropertiesFrom(src *v1api20200202s.Component_STATUS) error
	AssignPropertiesTo(dst *v1api20200202s.Component_STATUS) error
}

// Storage version of v1beta20200202.ComponentOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type ComponentOperatorSpec struct {
	ConfigMaps  *ComponentOperatorConfigMaps `json:"configMaps,omitempty"`
	PropertyBag genruntime.PropertyBag       `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_ComponentOperatorSpec populates our ComponentOperatorSpec from the provided source ComponentOperatorSpec
func (operator *ComponentOperatorSpec) AssignProperties_From_ComponentOperatorSpec(source *v1api20200202s.ComponentOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ConfigMaps
	if source.ConfigMaps != nil {
		var configMap ComponentOperatorConfigMaps
		err := configMap.AssignProperties_From_ComponentOperatorConfigMaps(source.ConfigMaps)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ComponentOperatorConfigMaps() to populate field ConfigMaps")
		}
		operator.ConfigMaps = &configMap
	} else {
		operator.ConfigMaps = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		operator.PropertyBag = propertyBag
	} else {
		operator.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponentOperatorSpec interface (if implemented) to customize the conversion
	var operatorAsAny any = operator
	if augmentedOperator, ok := operatorAsAny.(augmentConversionForComponentOperatorSpec); ok {
		err := augmentedOperator.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ComponentOperatorSpec populates the provided destination ComponentOperatorSpec from our ComponentOperatorSpec
func (operator *ComponentOperatorSpec) AssignProperties_To_ComponentOperatorSpec(destination *v1api20200202s.ComponentOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(operator.PropertyBag)

	// ConfigMaps
	if operator.ConfigMaps != nil {
		var configMap v1api20200202s.ComponentOperatorConfigMaps
		err := operator.ConfigMaps.AssignProperties_To_ComponentOperatorConfigMaps(&configMap)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ComponentOperatorConfigMaps() to populate field ConfigMaps")
		}
		destination.ConfigMaps = &configMap
	} else {
		destination.ConfigMaps = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponentOperatorSpec interface (if implemented) to customize the conversion
	var operatorAsAny any = operator
	if augmentedOperator, ok := operatorAsAny.(augmentConversionForComponentOperatorSpec); ok {
		err := augmentedOperator.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20200202.PrivateLinkScopedResource_STATUS
// Deprecated version of PrivateLinkScopedResource_STATUS. Use v1api20200202.PrivateLinkScopedResource_STATUS instead
type PrivateLinkScopedResource_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ResourceId  *string                `json:"ResourceId,omitempty"`
	ScopeId     *string                `json:"ScopeId,omitempty"`
}

// AssignProperties_From_PrivateLinkScopedResource_STATUS populates our PrivateLinkScopedResource_STATUS from the provided source PrivateLinkScopedResource_STATUS
func (resource *PrivateLinkScopedResource_STATUS) AssignProperties_From_PrivateLinkScopedResource_STATUS(source *v1api20200202s.PrivateLinkScopedResource_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ResourceId
	resource.ResourceId = genruntime.ClonePointerToString(source.ResourceId)

	// ScopeId
	resource.ScopeId = genruntime.ClonePointerToString(source.ScopeId)

	// Update the property bag
	if len(propertyBag) > 0 {
		resource.PropertyBag = propertyBag
	} else {
		resource.PropertyBag = nil
	}

	// Invoke the augmentConversionForPrivateLinkScopedResource_STATUS interface (if implemented) to customize the conversion
	var resourceAsAny any = resource
	if augmentedResource, ok := resourceAsAny.(augmentConversionForPrivateLinkScopedResource_STATUS); ok {
		err := augmentedResource.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_PrivateLinkScopedResource_STATUS populates the provided destination PrivateLinkScopedResource_STATUS from our PrivateLinkScopedResource_STATUS
func (resource *PrivateLinkScopedResource_STATUS) AssignProperties_To_PrivateLinkScopedResource_STATUS(destination *v1api20200202s.PrivateLinkScopedResource_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(resource.PropertyBag)

	// ResourceId
	destination.ResourceId = genruntime.ClonePointerToString(resource.ResourceId)

	// ScopeId
	destination.ScopeId = genruntime.ClonePointerToString(resource.ScopeId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForPrivateLinkScopedResource_STATUS interface (if implemented) to customize the conversion
	var resourceAsAny any = resource
	if augmentedResource, ok := resourceAsAny.(augmentConversionForPrivateLinkScopedResource_STATUS); ok {
		err := augmentedResource.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForComponentOperatorSpec interface {
	AssignPropertiesFrom(src *v1api20200202s.ComponentOperatorSpec) error
	AssignPropertiesTo(dst *v1api20200202s.ComponentOperatorSpec) error
}

type augmentConversionForPrivateLinkScopedResource_STATUS interface {
	AssignPropertiesFrom(src *v1api20200202s.PrivateLinkScopedResource_STATUS) error
	AssignPropertiesTo(dst *v1api20200202s.PrivateLinkScopedResource_STATUS) error
}

// Storage version of v1beta20200202.ComponentOperatorConfigMaps
type ComponentOperatorConfigMaps struct {
	ConnectionString   *genruntime.ConfigMapDestination `json:"connectionString,omitempty"`
	InstrumentationKey *genruntime.ConfigMapDestination `json:"instrumentationKey,omitempty"`
	PropertyBag        genruntime.PropertyBag           `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_ComponentOperatorConfigMaps populates our ComponentOperatorConfigMaps from the provided source ComponentOperatorConfigMaps
func (maps *ComponentOperatorConfigMaps) AssignProperties_From_ComponentOperatorConfigMaps(source *v1api20200202s.ComponentOperatorConfigMaps) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ConnectionString
	if source.ConnectionString != nil {
		connectionString := source.ConnectionString.Copy()
		maps.ConnectionString = &connectionString
	} else {
		maps.ConnectionString = nil
	}

	// InstrumentationKey
	if source.InstrumentationKey != nil {
		instrumentationKey := source.InstrumentationKey.Copy()
		maps.InstrumentationKey = &instrumentationKey
	} else {
		maps.InstrumentationKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		maps.PropertyBag = propertyBag
	} else {
		maps.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponentOperatorConfigMaps interface (if implemented) to customize the conversion
	var mapsAsAny any = maps
	if augmentedMaps, ok := mapsAsAny.(augmentConversionForComponentOperatorConfigMaps); ok {
		err := augmentedMaps.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ComponentOperatorConfigMaps populates the provided destination ComponentOperatorConfigMaps from our ComponentOperatorConfigMaps
func (maps *ComponentOperatorConfigMaps) AssignProperties_To_ComponentOperatorConfigMaps(destination *v1api20200202s.ComponentOperatorConfigMaps) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(maps.PropertyBag)

	// ConnectionString
	if maps.ConnectionString != nil {
		connectionString := maps.ConnectionString.Copy()
		destination.ConnectionString = &connectionString
	} else {
		destination.ConnectionString = nil
	}

	// InstrumentationKey
	if maps.InstrumentationKey != nil {
		instrumentationKey := maps.InstrumentationKey.Copy()
		destination.InstrumentationKey = &instrumentationKey
	} else {
		destination.InstrumentationKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForComponentOperatorConfigMaps interface (if implemented) to customize the conversion
	var mapsAsAny any = maps
	if augmentedMaps, ok := mapsAsAny.(augmentConversionForComponentOperatorConfigMaps); ok {
		err := augmentedMaps.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForComponentOperatorConfigMaps interface {
	AssignPropertiesFrom(src *v1api20200202s.ComponentOperatorConfigMaps) error
	AssignPropertiesTo(dst *v1api20200202s.ComponentOperatorConfigMaps) error
}

func init() {
	SchemeBuilder.Register(&Component{}, &ComponentList{})
}
