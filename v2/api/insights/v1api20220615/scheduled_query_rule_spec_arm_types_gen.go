// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220615

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type ScheduledQueryRule_Spec_ARM struct {
	// Kind: Indicates the type of scheduled query rule. The default is LogAlert.
	Kind *ScheduledQueryRule_Kind_Spec_ARM `json:"kind,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: The rule properties of the resource.
	Properties *ScheduledQueryRuleProperties_ARM `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &ScheduledQueryRule_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-06-15"
func (rule ScheduledQueryRule_Spec_ARM) GetAPIVersion() string {
	return "2022-06-15"
}

// GetName returns the Name of the resource
func (rule *ScheduledQueryRule_Spec_ARM) GetName() string {
	return rule.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/scheduledQueryRules"
func (rule *ScheduledQueryRule_Spec_ARM) GetType() string {
	return "Microsoft.Insights/scheduledQueryRules"
}

// +kubebuilder:validation:Enum={"LogAlert","LogToMetric"}
type ScheduledQueryRule_Kind_Spec_ARM string

const (
	ScheduledQueryRule_Kind_Spec_ARM_LogAlert    = ScheduledQueryRule_Kind_Spec_ARM("LogAlert")
	ScheduledQueryRule_Kind_Spec_ARM_LogToMetric = ScheduledQueryRule_Kind_Spec_ARM("LogToMetric")
)

// Mapping from string to ScheduledQueryRule_Kind_Spec_ARM
var scheduledQueryRule_Kind_Spec_ARM_Values = map[string]ScheduledQueryRule_Kind_Spec_ARM{
	"logalert":    ScheduledQueryRule_Kind_Spec_ARM_LogAlert,
	"logtometric": ScheduledQueryRule_Kind_Spec_ARM_LogToMetric,
}

// scheduled query rule Definition
type ScheduledQueryRuleProperties_ARM struct {
	// Actions: Actions to invoke when the alert fires.
	Actions *Actions_ARM `json:"actions,omitempty"`

	// AutoMitigate: The flag that indicates whether the alert should be automatically resolved or not. The default is true.
	// Relevant only for rules of the kind LogAlert.
	AutoMitigate *bool `json:"autoMitigate,omitempty"`

	// CheckWorkspaceAlertsStorageConfigured: The flag which indicates whether this scheduled query rule should be stored in
	// the customer's storage. The default is false. Relevant only for rules of the kind LogAlert.
	CheckWorkspaceAlertsStorageConfigured *bool `json:"checkWorkspaceAlertsStorageConfigured,omitempty"`

	// Criteria: The rule criteria that defines the conditions of the scheduled query rule.
	Criteria *ScheduledQueryRuleCriteria_ARM `json:"criteria,omitempty"`

	// Description: The description of the scheduled query rule.
	Description *string `json:"description,omitempty"`

	// DisplayName: The display name of the alert rule
	DisplayName *string `json:"displayName,omitempty"`

	// Enabled: The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
	Enabled *bool `json:"enabled,omitempty"`

	// EvaluationFrequency: How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant
	// and required only for rules of the kind LogAlert.
	EvaluationFrequency *string `json:"evaluationFrequency,omitempty"`

	// MuteActionsDuration: Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired.
	// Relevant only for rules of the kind LogAlert.
	MuteActionsDuration *string `json:"muteActionsDuration,omitempty"`

	// OverrideQueryTimeRange: If specified then overrides the query time range (default is
	// WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert.
	OverrideQueryTimeRange *string  `json:"overrideQueryTimeRange,omitempty"`
	Scopes                 []string `json:"scopes,omitempty"`

	// Severity: Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only
	// for rules of the kind LogAlert.
	Severity *ScheduledQueryRuleProperties_Severity_ARM `json:"severity,omitempty"`

	// SkipQueryValidation: The flag which indicates whether the provided query should be validated or not. The default is
	// false. Relevant only for rules of the kind LogAlert.
	SkipQueryValidation *bool `json:"skipQueryValidation,omitempty"`

	// TargetResourceTypes: List of resource type of the target resource(s) on which the alert is created/updated. For example
	// if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert
	// will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of
	// the kind LogAlert
	TargetResourceTypes []string `json:"targetResourceTypes,omitempty"`

	// WindowSize: The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size).
	// Relevant and required only for rules of the kind LogAlert.
	WindowSize *string `json:"windowSize,omitempty"`
}

// Actions to invoke when the alert fires.
type Actions_ARM struct {
	ActionGroups []string `json:"actionGroups,omitempty"`

	// CustomProperties: The properties of an alert payload.
	CustomProperties map[string]string `json:"customProperties,omitempty"`
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteria_ARM struct {
	// AllOf: A list of conditions to evaluate against the specified scopes
	AllOf []Condition_ARM `json:"allOf,omitempty"`
}

// +kubebuilder:validation:Enum={0,1,2,3,4}
type ScheduledQueryRuleProperties_Severity_ARM int

const (
	ScheduledQueryRuleProperties_Severity_ARM_0 = ScheduledQueryRuleProperties_Severity_ARM(0)
	ScheduledQueryRuleProperties_Severity_ARM_1 = ScheduledQueryRuleProperties_Severity_ARM(1)
	ScheduledQueryRuleProperties_Severity_ARM_2 = ScheduledQueryRuleProperties_Severity_ARM(2)
	ScheduledQueryRuleProperties_Severity_ARM_3 = ScheduledQueryRuleProperties_Severity_ARM(3)
	ScheduledQueryRuleProperties_Severity_ARM_4 = ScheduledQueryRuleProperties_Severity_ARM(4)
)

// A condition of the scheduled query rule.
type Condition_ARM struct {
	// Dimensions: List of Dimensions conditions
	Dimensions []Dimension_ARM `json:"dimensions,omitempty"`

	// FailingPeriods: The minimum number of violations required within the selected lookback time window required to raise an
	// alert. Relevant only for rules of the kind LogAlert.
	FailingPeriods *Condition_FailingPeriods_ARM `json:"failingPeriods,omitempty"`

	// MetricMeasureColumn: The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn *string `json:"metricMeasureColumn,omitempty"`

	// MetricName: The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName *string `json:"metricName,omitempty"`

	// Operator: The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator *Condition_Operator_ARM `json:"operator,omitempty"`

	// Query: Log query alert
	Query            *string `json:"query,omitempty"`
	ResourceIdColumn *string `json:"resourceIdColumn,omitempty"`

	// Threshold: the criteria threshold value that activates the alert. Relevant and required only for rules of the kind
	// LogAlert.
	Threshold *float64 `json:"threshold,omitempty"`

	// TimeAggregation: Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation *Condition_TimeAggregation_ARM `json:"timeAggregation,omitempty"`
}

type Condition_FailingPeriods_ARM struct {
	// MinFailingPeriodsToAlert: The number of violations to trigger an alert. Should be smaller or equal to
	// numberOfEvaluationPeriods. Default value is 1
	MinFailingPeriodsToAlert *int `json:"minFailingPeriodsToAlert,omitempty"`

	// NumberOfEvaluationPeriods: The number of aggregated lookback points. The lookback time window is calculated based on the
	// aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods *int `json:"numberOfEvaluationPeriods,omitempty"`
}

// +kubebuilder:validation:Enum={"Equals","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual"}
type Condition_Operator_ARM string

const (
	Condition_Operator_ARM_Equals             = Condition_Operator_ARM("Equals")
	Condition_Operator_ARM_GreaterThan        = Condition_Operator_ARM("GreaterThan")
	Condition_Operator_ARM_GreaterThanOrEqual = Condition_Operator_ARM("GreaterThanOrEqual")
	Condition_Operator_ARM_LessThan           = Condition_Operator_ARM("LessThan")
	Condition_Operator_ARM_LessThanOrEqual    = Condition_Operator_ARM("LessThanOrEqual")
)

// Mapping from string to Condition_Operator_ARM
var condition_Operator_ARM_Values = map[string]Condition_Operator_ARM{
	"equals":             Condition_Operator_ARM_Equals,
	"greaterthan":        Condition_Operator_ARM_GreaterThan,
	"greaterthanorequal": Condition_Operator_ARM_GreaterThanOrEqual,
	"lessthan":           Condition_Operator_ARM_LessThan,
	"lessthanorequal":    Condition_Operator_ARM_LessThanOrEqual,
}

// +kubebuilder:validation:Enum={"Average","Count","Maximum","Minimum","Total"}
type Condition_TimeAggregation_ARM string

const (
	Condition_TimeAggregation_ARM_Average = Condition_TimeAggregation_ARM("Average")
	Condition_TimeAggregation_ARM_Count   = Condition_TimeAggregation_ARM("Count")
	Condition_TimeAggregation_ARM_Maximum = Condition_TimeAggregation_ARM("Maximum")
	Condition_TimeAggregation_ARM_Minimum = Condition_TimeAggregation_ARM("Minimum")
	Condition_TimeAggregation_ARM_Total   = Condition_TimeAggregation_ARM("Total")
)

// Mapping from string to Condition_TimeAggregation_ARM
var condition_TimeAggregation_ARM_Values = map[string]Condition_TimeAggregation_ARM{
	"average": Condition_TimeAggregation_ARM_Average,
	"count":   Condition_TimeAggregation_ARM_Count,
	"maximum": Condition_TimeAggregation_ARM_Maximum,
	"minimum": Condition_TimeAggregation_ARM_Minimum,
	"total":   Condition_TimeAggregation_ARM_Total,
}

// Dimension splitting and filtering definition
type Dimension_ARM struct {
	// Name: Name of the dimension
	Name *string `json:"name,omitempty"`

	// Operator: Operator for dimension values
	Operator *Dimension_Operator_ARM `json:"operator,omitempty"`

	// Values: List of dimension values
	Values []string `json:"values,omitempty"`
}

// +kubebuilder:validation:Enum={"Exclude","Include"}
type Dimension_Operator_ARM string

const (
	Dimension_Operator_ARM_Exclude = Dimension_Operator_ARM("Exclude")
	Dimension_Operator_ARM_Include = Dimension_Operator_ARM("Include")
)

// Mapping from string to Dimension_Operator_ARM
var dimension_Operator_ARM_Values = map[string]Dimension_Operator_ARM{
	"exclude": Dimension_Operator_ARM_Exclude,
	"include": Dimension_Operator_ARM_Include,
}
