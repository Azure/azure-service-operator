// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ActionGroup_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ActionGroup_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForActionGroup_STATUS, ActionGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForActionGroup_STATUS runs a test to see if a specific instance of ActionGroup_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForActionGroup_STATUS(subject ActionGroup_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ActionGroup_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ActionGroup_STATUS instances for property testing - lazily instantiated by ActionGroup_STATUSGenerator()
var actionGroup_STATUSGenerator gopter.Gen

// ActionGroup_STATUSGenerator returns a generator of ActionGroup_STATUS instances for property testing.
func ActionGroup_STATUSGenerator() gopter.Gen {
	if actionGroup_STATUSGenerator != nil {
		return actionGroup_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActionGroup_STATUS(generators)
	actionGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(ActionGroup_STATUS{}), generators)

	return actionGroup_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForActionGroup_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForActionGroup_STATUS(gens map[string]gopter.Gen) {
	gens["ActionGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["WebhookProperties"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

func Test_ActionList_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ActionList_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForActionList_STATUS, ActionList_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForActionList_STATUS runs a test to see if a specific instance of ActionList_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForActionList_STATUS(subject ActionList_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ActionList_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ActionList_STATUS instances for property testing - lazily instantiated by ActionList_STATUSGenerator()
var actionList_STATUSGenerator gopter.Gen

// ActionList_STATUSGenerator returns a generator of ActionList_STATUS instances for property testing.
func ActionList_STATUSGenerator() gopter.Gen {
	if actionList_STATUSGenerator != nil {
		return actionList_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForActionList_STATUS(generators)
	actionList_STATUSGenerator = gen.Struct(reflect.TypeOf(ActionList_STATUS{}), generators)

	return actionList_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForActionList_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForActionList_STATUS(gens map[string]gopter.Gen) {
	gens["ActionGroups"] = gen.SliceOf(ActionGroup_STATUSGenerator())
}

func Test_ActivityLogAlert_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ActivityLogAlert_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForActivityLogAlert_STATUS, ActivityLogAlert_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForActivityLogAlert_STATUS runs a test to see if a specific instance of ActivityLogAlert_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForActivityLogAlert_STATUS(subject ActivityLogAlert_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ActivityLogAlert_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ActivityLogAlert_STATUS instances for property testing - lazily instantiated by
// ActivityLogAlert_STATUSGenerator()
var activityLogAlert_STATUSGenerator gopter.Gen

// ActivityLogAlert_STATUSGenerator returns a generator of ActivityLogAlert_STATUS instances for property testing.
// We first initialize activityLogAlert_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ActivityLogAlert_STATUSGenerator() gopter.Gen {
	if activityLogAlert_STATUSGenerator != nil {
		return activityLogAlert_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActivityLogAlert_STATUS(generators)
	activityLogAlert_STATUSGenerator = gen.Struct(reflect.TypeOf(ActivityLogAlert_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActivityLogAlert_STATUS(generators)
	AddRelatedPropertyGeneratorsForActivityLogAlert_STATUS(generators)
	activityLogAlert_STATUSGenerator = gen.Struct(reflect.TypeOf(ActivityLogAlert_STATUS{}), generators)

	return activityLogAlert_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForActivityLogAlert_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForActivityLogAlert_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForActivityLogAlert_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForActivityLogAlert_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AlertRuleProperties_STATUSGenerator())
}

func Test_AlertRuleAllOfCondition_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AlertRuleAllOfCondition_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAlertRuleAllOfCondition_STATUS, AlertRuleAllOfCondition_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAlertRuleAllOfCondition_STATUS runs a test to see if a specific instance of AlertRuleAllOfCondition_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAlertRuleAllOfCondition_STATUS(subject AlertRuleAllOfCondition_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AlertRuleAllOfCondition_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AlertRuleAllOfCondition_STATUS instances for property testing - lazily instantiated by
// AlertRuleAllOfCondition_STATUSGenerator()
var alertRuleAllOfCondition_STATUSGenerator gopter.Gen

// AlertRuleAllOfCondition_STATUSGenerator returns a generator of AlertRuleAllOfCondition_STATUS instances for property testing.
func AlertRuleAllOfCondition_STATUSGenerator() gopter.Gen {
	if alertRuleAllOfCondition_STATUSGenerator != nil {
		return alertRuleAllOfCondition_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAlertRuleAllOfCondition_STATUS(generators)
	alertRuleAllOfCondition_STATUSGenerator = gen.Struct(reflect.TypeOf(AlertRuleAllOfCondition_STATUS{}), generators)

	return alertRuleAllOfCondition_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForAlertRuleAllOfCondition_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAlertRuleAllOfCondition_STATUS(gens map[string]gopter.Gen) {
	gens["AllOf"] = gen.SliceOf(AlertRuleAnyOfOrLeafCondition_STATUSGenerator())
}

func Test_AlertRuleAnyOfOrLeafCondition_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AlertRuleAnyOfOrLeafCondition_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAlertRuleAnyOfOrLeafCondition_STATUS, AlertRuleAnyOfOrLeafCondition_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAlertRuleAnyOfOrLeafCondition_STATUS runs a test to see if a specific instance of AlertRuleAnyOfOrLeafCondition_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAlertRuleAnyOfOrLeafCondition_STATUS(subject AlertRuleAnyOfOrLeafCondition_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AlertRuleAnyOfOrLeafCondition_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AlertRuleAnyOfOrLeafCondition_STATUS instances for property testing - lazily instantiated by
// AlertRuleAnyOfOrLeafCondition_STATUSGenerator()
var alertRuleAnyOfOrLeafCondition_STATUSGenerator gopter.Gen

// AlertRuleAnyOfOrLeafCondition_STATUSGenerator returns a generator of AlertRuleAnyOfOrLeafCondition_STATUS instances for property testing.
// We first initialize alertRuleAnyOfOrLeafCondition_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AlertRuleAnyOfOrLeafCondition_STATUSGenerator() gopter.Gen {
	if alertRuleAnyOfOrLeafCondition_STATUSGenerator != nil {
		return alertRuleAnyOfOrLeafCondition_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAlertRuleAnyOfOrLeafCondition_STATUS(generators)
	alertRuleAnyOfOrLeafCondition_STATUSGenerator = gen.Struct(reflect.TypeOf(AlertRuleAnyOfOrLeafCondition_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAlertRuleAnyOfOrLeafCondition_STATUS(generators)
	AddRelatedPropertyGeneratorsForAlertRuleAnyOfOrLeafCondition_STATUS(generators)
	alertRuleAnyOfOrLeafCondition_STATUSGenerator = gen.Struct(reflect.TypeOf(AlertRuleAnyOfOrLeafCondition_STATUS{}), generators)

	return alertRuleAnyOfOrLeafCondition_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAlertRuleAnyOfOrLeafCondition_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAlertRuleAnyOfOrLeafCondition_STATUS(gens map[string]gopter.Gen) {
	gens["ContainsAny"] = gen.SliceOf(gen.AlphaString())
	gens["Equals"] = gen.PtrOf(gen.AlphaString())
	gens["Field"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAlertRuleAnyOfOrLeafCondition_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAlertRuleAnyOfOrLeafCondition_STATUS(gens map[string]gopter.Gen) {
	gens["AnyOf"] = gen.SliceOf(AlertRuleLeafCondition_STATUSGenerator())
}

func Test_AlertRuleLeafCondition_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AlertRuleLeafCondition_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAlertRuleLeafCondition_STATUS, AlertRuleLeafCondition_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAlertRuleLeafCondition_STATUS runs a test to see if a specific instance of AlertRuleLeafCondition_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAlertRuleLeafCondition_STATUS(subject AlertRuleLeafCondition_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AlertRuleLeafCondition_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AlertRuleLeafCondition_STATUS instances for property testing - lazily instantiated by
// AlertRuleLeafCondition_STATUSGenerator()
var alertRuleLeafCondition_STATUSGenerator gopter.Gen

// AlertRuleLeafCondition_STATUSGenerator returns a generator of AlertRuleLeafCondition_STATUS instances for property testing.
func AlertRuleLeafCondition_STATUSGenerator() gopter.Gen {
	if alertRuleLeafCondition_STATUSGenerator != nil {
		return alertRuleLeafCondition_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAlertRuleLeafCondition_STATUS(generators)
	alertRuleLeafCondition_STATUSGenerator = gen.Struct(reflect.TypeOf(AlertRuleLeafCondition_STATUS{}), generators)

	return alertRuleLeafCondition_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAlertRuleLeafCondition_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAlertRuleLeafCondition_STATUS(gens map[string]gopter.Gen) {
	gens["ContainsAny"] = gen.SliceOf(gen.AlphaString())
	gens["Equals"] = gen.PtrOf(gen.AlphaString())
	gens["Field"] = gen.PtrOf(gen.AlphaString())
}

func Test_AlertRuleProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AlertRuleProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAlertRuleProperties_STATUS, AlertRuleProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAlertRuleProperties_STATUS runs a test to see if a specific instance of AlertRuleProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAlertRuleProperties_STATUS(subject AlertRuleProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AlertRuleProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AlertRuleProperties_STATUS instances for property testing - lazily instantiated by
// AlertRuleProperties_STATUSGenerator()
var alertRuleProperties_STATUSGenerator gopter.Gen

// AlertRuleProperties_STATUSGenerator returns a generator of AlertRuleProperties_STATUS instances for property testing.
// We first initialize alertRuleProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AlertRuleProperties_STATUSGenerator() gopter.Gen {
	if alertRuleProperties_STATUSGenerator != nil {
		return alertRuleProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAlertRuleProperties_STATUS(generators)
	alertRuleProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(AlertRuleProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAlertRuleProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForAlertRuleProperties_STATUS(generators)
	alertRuleProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(AlertRuleProperties_STATUS{}), generators)

	return alertRuleProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAlertRuleProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAlertRuleProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Scopes"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAlertRuleProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAlertRuleProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.PtrOf(ActionList_STATUSGenerator())
	gens["Condition"] = gen.PtrOf(AlertRuleAllOfCondition_STATUSGenerator())
}
