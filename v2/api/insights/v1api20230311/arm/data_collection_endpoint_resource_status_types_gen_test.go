// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ConfigurationAccessEndpointSpec_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConfigurationAccessEndpointSpec_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConfigurationAccessEndpointSpec_STATUS, ConfigurationAccessEndpointSpec_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConfigurationAccessEndpointSpec_STATUS runs a test to see if a specific instance of ConfigurationAccessEndpointSpec_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForConfigurationAccessEndpointSpec_STATUS(subject ConfigurationAccessEndpointSpec_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConfigurationAccessEndpointSpec_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConfigurationAccessEndpointSpec_STATUS instances for property testing - lazily instantiated by
// ConfigurationAccessEndpointSpec_STATUSGenerator()
var configurationAccessEndpointSpec_STATUSGenerator gopter.Gen

// ConfigurationAccessEndpointSpec_STATUSGenerator returns a generator of ConfigurationAccessEndpointSpec_STATUS instances for property testing.
func ConfigurationAccessEndpointSpec_STATUSGenerator() gopter.Gen {
	if configurationAccessEndpointSpec_STATUSGenerator != nil {
		return configurationAccessEndpointSpec_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConfigurationAccessEndpointSpec_STATUS(generators)
	configurationAccessEndpointSpec_STATUSGenerator = gen.Struct(reflect.TypeOf(ConfigurationAccessEndpointSpec_STATUS{}), generators)

	return configurationAccessEndpointSpec_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForConfigurationAccessEndpointSpec_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConfigurationAccessEndpointSpec_STATUS(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
}

func Test_DataCollectionEndpointResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionEndpointResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionEndpointResource_STATUS, DataCollectionEndpointResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionEndpointResource_STATUS runs a test to see if a specific instance of DataCollectionEndpointResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionEndpointResource_STATUS(subject DataCollectionEndpointResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionEndpointResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionEndpointResource_STATUS instances for property testing - lazily instantiated by
// DataCollectionEndpointResource_STATUSGenerator()
var dataCollectionEndpointResource_STATUSGenerator gopter.Gen

// DataCollectionEndpointResource_STATUSGenerator returns a generator of DataCollectionEndpointResource_STATUS instances for property testing.
// We first initialize dataCollectionEndpointResource_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataCollectionEndpointResource_STATUSGenerator() gopter.Gen {
	if dataCollectionEndpointResource_STATUSGenerator != nil {
		return dataCollectionEndpointResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionEndpointResource_STATUS(generators)
	dataCollectionEndpointResource_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionEndpointResource_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionEndpointResource_STATUS(generators)
	AddRelatedPropertyGeneratorsForDataCollectionEndpointResource_STATUS(generators)
	dataCollectionEndpointResource_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionEndpointResource_STATUS{}), generators)

	return dataCollectionEndpointResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDataCollectionEndpointResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataCollectionEndpointResource_STATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(DataCollectionEndpointResource_Kind_STATUS_Linux, DataCollectionEndpointResource_Kind_STATUS_Windows))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDataCollectionEndpointResource_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataCollectionEndpointResource_STATUS(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUSGenerator())
	gens["Properties"] = gen.PtrOf(DataCollectionEndpoint_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_DataCollectionEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionEndpoint_STATUS, DataCollectionEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionEndpoint_STATUS runs a test to see if a specific instance of DataCollectionEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionEndpoint_STATUS(subject DataCollectionEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionEndpoint_STATUS instances for property testing - lazily instantiated by
// DataCollectionEndpoint_STATUSGenerator()
var dataCollectionEndpoint_STATUSGenerator gopter.Gen

// DataCollectionEndpoint_STATUSGenerator returns a generator of DataCollectionEndpoint_STATUS instances for property testing.
// We first initialize dataCollectionEndpoint_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataCollectionEndpoint_STATUSGenerator() gopter.Gen {
	if dataCollectionEndpoint_STATUSGenerator != nil {
		return dataCollectionEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionEndpoint_STATUS(generators)
	dataCollectionEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionEndpoint_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionEndpoint_STATUS(generators)
	AddRelatedPropertyGeneratorsForDataCollectionEndpoint_STATUS(generators)
	dataCollectionEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionEndpoint_STATUS{}), generators)

	return dataCollectionEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDataCollectionEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataCollectionEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["ImmutableId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DataCollectionEndpoint_ProvisioningState_STATUS_Canceled,
		DataCollectionEndpoint_ProvisioningState_STATUS_Creating,
		DataCollectionEndpoint_ProvisioningState_STATUS_Deleting,
		DataCollectionEndpoint_ProvisioningState_STATUS_Failed,
		DataCollectionEndpoint_ProvisioningState_STATUS_Succeeded,
		DataCollectionEndpoint_ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForDataCollectionEndpoint_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataCollectionEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["ConfigurationAccess"] = gen.PtrOf(ConfigurationAccessEndpointSpec_STATUSGenerator())
	gens["FailoverConfiguration"] = gen.PtrOf(FailoverConfigurationSpec_STATUSGenerator())
	gens["LogsIngestion"] = gen.PtrOf(LogsIngestionEndpointSpec_STATUSGenerator())
	gens["Metadata"] = gen.PtrOf(Metadata_STATUSGenerator())
	gens["MetricsIngestion"] = gen.PtrOf(MetricsIngestionEndpointSpec_STATUSGenerator())
	gens["NetworkAcls"] = gen.PtrOf(NetworkRuleSet_STATUSGenerator())
	gens["PrivateLinkScopedResources"] = gen.SliceOf(PrivateLinkScopedResource_STATUSGenerator())
}

func Test_FailoverConfigurationSpec_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverConfigurationSpec_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverConfigurationSpec_STATUS, FailoverConfigurationSpec_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverConfigurationSpec_STATUS runs a test to see if a specific instance of FailoverConfigurationSpec_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverConfigurationSpec_STATUS(subject FailoverConfigurationSpec_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverConfigurationSpec_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverConfigurationSpec_STATUS instances for property testing - lazily instantiated by
// FailoverConfigurationSpec_STATUSGenerator()
var failoverConfigurationSpec_STATUSGenerator gopter.Gen

// FailoverConfigurationSpec_STATUSGenerator returns a generator of FailoverConfigurationSpec_STATUS instances for property testing.
// We first initialize failoverConfigurationSpec_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FailoverConfigurationSpec_STATUSGenerator() gopter.Gen {
	if failoverConfigurationSpec_STATUSGenerator != nil {
		return failoverConfigurationSpec_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverConfigurationSpec_STATUS(generators)
	failoverConfigurationSpec_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverConfigurationSpec_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverConfigurationSpec_STATUS(generators)
	AddRelatedPropertyGeneratorsForFailoverConfigurationSpec_STATUS(generators)
	failoverConfigurationSpec_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverConfigurationSpec_STATUS{}), generators)

	return failoverConfigurationSpec_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFailoverConfigurationSpec_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverConfigurationSpec_STATUS(gens map[string]gopter.Gen) {
	gens["ActiveLocation"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFailoverConfigurationSpec_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFailoverConfigurationSpec_STATUS(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(LocationSpec_STATUSGenerator())
}

func Test_LocationSpec_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LocationSpec_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLocationSpec_STATUS, LocationSpec_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLocationSpec_STATUS runs a test to see if a specific instance of LocationSpec_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLocationSpec_STATUS(subject LocationSpec_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LocationSpec_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LocationSpec_STATUS instances for property testing - lazily instantiated by
// LocationSpec_STATUSGenerator()
var locationSpec_STATUSGenerator gopter.Gen

// LocationSpec_STATUSGenerator returns a generator of LocationSpec_STATUS instances for property testing.
func LocationSpec_STATUSGenerator() gopter.Gen {
	if locationSpec_STATUSGenerator != nil {
		return locationSpec_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLocationSpec_STATUS(generators)
	locationSpec_STATUSGenerator = gen.Struct(reflect.TypeOf(LocationSpec_STATUS{}), generators)

	return locationSpec_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLocationSpec_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLocationSpec_STATUS(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningStatus"] = gen.PtrOf(gen.OneConstOf(
		LocationSpec_ProvisioningStatus_STATUS_Canceled,
		LocationSpec_ProvisioningStatus_STATUS_Creating,
		LocationSpec_ProvisioningStatus_STATUS_Deleting,
		LocationSpec_ProvisioningStatus_STATUS_Failed,
		LocationSpec_ProvisioningStatus_STATUS_Succeeded,
		LocationSpec_ProvisioningStatus_STATUS_Updating))
}

func Test_LogsIngestionEndpointSpec_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogsIngestionEndpointSpec_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogsIngestionEndpointSpec_STATUS, LogsIngestionEndpointSpec_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogsIngestionEndpointSpec_STATUS runs a test to see if a specific instance of LogsIngestionEndpointSpec_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLogsIngestionEndpointSpec_STATUS(subject LogsIngestionEndpointSpec_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogsIngestionEndpointSpec_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogsIngestionEndpointSpec_STATUS instances for property testing - lazily instantiated by
// LogsIngestionEndpointSpec_STATUSGenerator()
var logsIngestionEndpointSpec_STATUSGenerator gopter.Gen

// LogsIngestionEndpointSpec_STATUSGenerator returns a generator of LogsIngestionEndpointSpec_STATUS instances for property testing.
func LogsIngestionEndpointSpec_STATUSGenerator() gopter.Gen {
	if logsIngestionEndpointSpec_STATUSGenerator != nil {
		return logsIngestionEndpointSpec_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogsIngestionEndpointSpec_STATUS(generators)
	logsIngestionEndpointSpec_STATUSGenerator = gen.Struct(reflect.TypeOf(LogsIngestionEndpointSpec_STATUS{}), generators)

	return logsIngestionEndpointSpec_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLogsIngestionEndpointSpec_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogsIngestionEndpointSpec_STATUS(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedServiceIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS, ManagedServiceIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS runs a test to see if a specific instance of ManagedServiceIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS(subject ManagedServiceIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUSGenerator()
var managedServiceIdentity_STATUSGenerator gopter.Gen

// ManagedServiceIdentity_STATUSGenerator returns a generator of ManagedServiceIdentity_STATUS instances for property testing.
// We first initialize managedServiceIdentity_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUSGenerator() gopter.Gen {
	if managedServiceIdentity_STATUSGenerator != nil {
		return managedServiceIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	return managedServiceIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentityType_STATUS_None,
		ManagedServiceIdentityType_STATUS_SystemAssigned,
		ManagedServiceIdentityType_STATUS_SystemAssignedUserAssigned,
		ManagedServiceIdentityType_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserAssignedIdentity_STATUSGenerator())
}

func Test_Metadata_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Metadata_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetadata_STATUS, Metadata_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetadata_STATUS runs a test to see if a specific instance of Metadata_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMetadata_STATUS(subject Metadata_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Metadata_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Metadata_STATUS instances for property testing - lazily instantiated by Metadata_STATUSGenerator()
var metadata_STATUSGenerator gopter.Gen

// Metadata_STATUSGenerator returns a generator of Metadata_STATUS instances for property testing.
func Metadata_STATUSGenerator() gopter.Gen {
	if metadata_STATUSGenerator != nil {
		return metadata_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetadata_STATUS(generators)
	metadata_STATUSGenerator = gen.Struct(reflect.TypeOf(Metadata_STATUS{}), generators)

	return metadata_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMetadata_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetadata_STATUS(gens map[string]gopter.Gen) {
	gens["ProvisionedBy"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisionedByImmutableId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisionedByResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_MetricsIngestionEndpointSpec_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricsIngestionEndpointSpec_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricsIngestionEndpointSpec_STATUS, MetricsIngestionEndpointSpec_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricsIngestionEndpointSpec_STATUS runs a test to see if a specific instance of MetricsIngestionEndpointSpec_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricsIngestionEndpointSpec_STATUS(subject MetricsIngestionEndpointSpec_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricsIngestionEndpointSpec_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricsIngestionEndpointSpec_STATUS instances for property testing - lazily instantiated by
// MetricsIngestionEndpointSpec_STATUSGenerator()
var metricsIngestionEndpointSpec_STATUSGenerator gopter.Gen

// MetricsIngestionEndpointSpec_STATUSGenerator returns a generator of MetricsIngestionEndpointSpec_STATUS instances for property testing.
func MetricsIngestionEndpointSpec_STATUSGenerator() gopter.Gen {
	if metricsIngestionEndpointSpec_STATUSGenerator != nil {
		return metricsIngestionEndpointSpec_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricsIngestionEndpointSpec_STATUS(generators)
	metricsIngestionEndpointSpec_STATUSGenerator = gen.Struct(reflect.TypeOf(MetricsIngestionEndpointSpec_STATUS{}), generators)

	return metricsIngestionEndpointSpec_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMetricsIngestionEndpointSpec_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricsIngestionEndpointSpec_STATUS(gens map[string]gopter.Gen) {
	gens["Endpoint"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkRuleSet_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkRuleSet_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkRuleSet_STATUS, NetworkRuleSet_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkRuleSet_STATUS runs a test to see if a specific instance of NetworkRuleSet_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkRuleSet_STATUS(subject NetworkRuleSet_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkRuleSet_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkRuleSet_STATUS instances for property testing - lazily instantiated by
// NetworkRuleSet_STATUSGenerator()
var networkRuleSet_STATUSGenerator gopter.Gen

// NetworkRuleSet_STATUSGenerator returns a generator of NetworkRuleSet_STATUS instances for property testing.
func NetworkRuleSet_STATUSGenerator() gopter.Gen {
	if networkRuleSet_STATUSGenerator != nil {
		return networkRuleSet_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSet_STATUS(generators)
	networkRuleSet_STATUSGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSet_STATUS{}), generators)

	return networkRuleSet_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNetworkRuleSet_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkRuleSet_STATUS(gens map[string]gopter.Gen) {
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSet_PublicNetworkAccess_STATUS_Disabled, NetworkRuleSet_PublicNetworkAccess_STATUS_Enabled, NetworkRuleSet_PublicNetworkAccess_STATUS_SecuredByPerimeter))
}

func Test_PrivateLinkScopedResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkScopedResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkScopedResource_STATUS, PrivateLinkScopedResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkScopedResource_STATUS runs a test to see if a specific instance of PrivateLinkScopedResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkScopedResource_STATUS(subject PrivateLinkScopedResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkScopedResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkScopedResource_STATUS instances for property testing - lazily instantiated by
// PrivateLinkScopedResource_STATUSGenerator()
var privateLinkScopedResource_STATUSGenerator gopter.Gen

// PrivateLinkScopedResource_STATUSGenerator returns a generator of PrivateLinkScopedResource_STATUS instances for property testing.
func PrivateLinkScopedResource_STATUSGenerator() gopter.Gen {
	if privateLinkScopedResource_STATUSGenerator != nil {
		return privateLinkScopedResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_STATUS(generators)
	privateLinkScopedResource_STATUSGenerator = gen.Struct(reflect.TypeOf(PrivateLinkScopedResource_STATUS{}), generators)

	return privateLinkScopedResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkScopedResource_STATUS(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ScopeId"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}

func Test_UserAssignedIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_STATUS, UserAssignedIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_STATUS runs a test to see if a specific instance of UserAssignedIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_STATUS(subject UserAssignedIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUS instances for property testing - lazily instantiated by
// UserAssignedIdentity_STATUSGenerator()
var userAssignedIdentity_STATUSGenerator gopter.Gen

// UserAssignedIdentity_STATUSGenerator returns a generator of UserAssignedIdentity_STATUS instances for property testing.
func UserAssignedIdentity_STATUSGenerator() gopter.Gen {
	if userAssignedIdentity_STATUSGenerator != nil {
		return userAssignedIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS(generators)
	userAssignedIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUS{}), generators)

	return userAssignedIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}
