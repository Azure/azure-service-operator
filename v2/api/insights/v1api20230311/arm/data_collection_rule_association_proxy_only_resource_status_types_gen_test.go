// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DataCollectionRuleAssociationProxyOnlyResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionRuleAssociationProxyOnlyResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS, DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS runs a test to see if a specific instance of DataCollectionRuleAssociationProxyOnlyResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS(subject DataCollectionRuleAssociationProxyOnlyResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionRuleAssociationProxyOnlyResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionRuleAssociationProxyOnlyResource_STATUS instances for property testing - lazily
// instantiated by DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator()
var dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator gopter.Gen

// DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator returns a generator of DataCollectionRuleAssociationProxyOnlyResource_STATUS instances for property testing.
// We first initialize dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator() gopter.Gen {
	if dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator != nil {
		return dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(generators)
	dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociationProxyOnlyResource_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(generators)
	AddRelatedPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(generators)
	dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociationProxyOnlyResource_STATUS{}), generators)

	return dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DataCollectionRuleAssociation_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_DataCollectionRuleAssociation_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionRuleAssociation_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionRuleAssociation_STATUS, DataCollectionRuleAssociation_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionRuleAssociation_STATUS runs a test to see if a specific instance of DataCollectionRuleAssociation_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionRuleAssociation_STATUS(subject DataCollectionRuleAssociation_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionRuleAssociation_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionRuleAssociation_STATUS instances for property testing - lazily instantiated by
// DataCollectionRuleAssociation_STATUSGenerator()
var dataCollectionRuleAssociation_STATUSGenerator gopter.Gen

// DataCollectionRuleAssociation_STATUSGenerator returns a generator of DataCollectionRuleAssociation_STATUS instances for property testing.
// We first initialize dataCollectionRuleAssociation_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataCollectionRuleAssociation_STATUSGenerator() gopter.Gen {
	if dataCollectionRuleAssociation_STATUSGenerator != nil {
		return dataCollectionRuleAssociation_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_STATUS(generators)
	dataCollectionRuleAssociation_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociation_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_STATUS(generators)
	AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation_STATUS(generators)
	dataCollectionRuleAssociation_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociation_STATUS{}), generators)

	return dataCollectionRuleAssociation_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_STATUS(gens map[string]gopter.Gen) {
	gens["DataCollectionEndpointId"] = gen.PtrOf(gen.AlphaString())
	gens["DataCollectionRuleId"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Canceled,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Creating,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Deleting,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Failed,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Succeeded,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation_STATUS(gens map[string]gopter.Gen) {
	gens["Metadata"] = gen.PtrOf(Metadata_STATUSGenerator())
}
