// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230311

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/insights/v1api20230311/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DataCollectionRuleAssociation_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DataCollectionRuleAssociation to hub returns original",
		prop.ForAll(RunResourceConversionTestForDataCollectionRuleAssociation, DataCollectionRuleAssociationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForDataCollectionRuleAssociation tests if a specific instance of DataCollectionRuleAssociation round trips to the hub storage version and back losslessly
func RunResourceConversionTestForDataCollectionRuleAssociation(subject DataCollectionRuleAssociation) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.DataCollectionRuleAssociation
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual DataCollectionRuleAssociation
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DataCollectionRuleAssociation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DataCollectionRuleAssociation to DataCollectionRuleAssociation via AssignProperties_To_DataCollectionRuleAssociation & AssignProperties_From_DataCollectionRuleAssociation returns original",
		prop.ForAll(RunPropertyAssignmentTestForDataCollectionRuleAssociation, DataCollectionRuleAssociationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDataCollectionRuleAssociation tests if a specific instance of DataCollectionRuleAssociation can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForDataCollectionRuleAssociation(subject DataCollectionRuleAssociation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.DataCollectionRuleAssociation
	err := copied.AssignProperties_To_DataCollectionRuleAssociation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DataCollectionRuleAssociation
	err = actual.AssignProperties_From_DataCollectionRuleAssociation(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DataCollectionRuleAssociation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionRuleAssociation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionRuleAssociation, DataCollectionRuleAssociationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionRuleAssociation runs a test to see if a specific instance of DataCollectionRuleAssociation round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionRuleAssociation(subject DataCollectionRuleAssociation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionRuleAssociation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionRuleAssociation instances for property testing - lazily instantiated by
// DataCollectionRuleAssociationGenerator()
var dataCollectionRuleAssociationGenerator gopter.Gen

// DataCollectionRuleAssociationGenerator returns a generator of DataCollectionRuleAssociation instances for property testing.
func DataCollectionRuleAssociationGenerator() gopter.Gen {
	if dataCollectionRuleAssociationGenerator != nil {
		return dataCollectionRuleAssociationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation(generators)
	dataCollectionRuleAssociationGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociation{}), generators)

	return dataCollectionRuleAssociationGenerator
}

// AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation(gens map[string]gopter.Gen) {
	gens["Spec"] = DataCollectionRuleAssociation_SpecGenerator()
	gens["Status"] = DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator()
}

func Test_DataCollectionRuleAssociationOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DataCollectionRuleAssociationOperatorSpec to DataCollectionRuleAssociationOperatorSpec via AssignProperties_To_DataCollectionRuleAssociationOperatorSpec & AssignProperties_From_DataCollectionRuleAssociationOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForDataCollectionRuleAssociationOperatorSpec, DataCollectionRuleAssociationOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDataCollectionRuleAssociationOperatorSpec tests if a specific instance of DataCollectionRuleAssociationOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForDataCollectionRuleAssociationOperatorSpec(subject DataCollectionRuleAssociationOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.DataCollectionRuleAssociationOperatorSpec
	err := copied.AssignProperties_To_DataCollectionRuleAssociationOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DataCollectionRuleAssociationOperatorSpec
	err = actual.AssignProperties_From_DataCollectionRuleAssociationOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DataCollectionRuleAssociationOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionRuleAssociationOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionRuleAssociationOperatorSpec, DataCollectionRuleAssociationOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionRuleAssociationOperatorSpec runs a test to see if a specific instance of DataCollectionRuleAssociationOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionRuleAssociationOperatorSpec(subject DataCollectionRuleAssociationOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionRuleAssociationOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionRuleAssociationOperatorSpec instances for property testing - lazily instantiated by
// DataCollectionRuleAssociationOperatorSpecGenerator()
var dataCollectionRuleAssociationOperatorSpecGenerator gopter.Gen

// DataCollectionRuleAssociationOperatorSpecGenerator returns a generator of DataCollectionRuleAssociationOperatorSpec instances for property testing.
func DataCollectionRuleAssociationOperatorSpecGenerator() gopter.Gen {
	if dataCollectionRuleAssociationOperatorSpecGenerator != nil {
		return dataCollectionRuleAssociationOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	dataCollectionRuleAssociationOperatorSpecGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociationOperatorSpec{}), generators)

	return dataCollectionRuleAssociationOperatorSpecGenerator
}

func Test_DataCollectionRuleAssociationProxyOnlyResource_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DataCollectionRuleAssociationProxyOnlyResource_STATUS to DataCollectionRuleAssociationProxyOnlyResource_STATUS via AssignProperties_To_DataCollectionRuleAssociationProxyOnlyResource_STATUS & AssignProperties_From_DataCollectionRuleAssociationProxyOnlyResource_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS, DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS tests if a specific instance of DataCollectionRuleAssociationProxyOnlyResource_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS(subject DataCollectionRuleAssociationProxyOnlyResource_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.DataCollectionRuleAssociationProxyOnlyResource_STATUS
	err := copied.AssignProperties_To_DataCollectionRuleAssociationProxyOnlyResource_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DataCollectionRuleAssociationProxyOnlyResource_STATUS
	err = actual.AssignProperties_From_DataCollectionRuleAssociationProxyOnlyResource_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DataCollectionRuleAssociationProxyOnlyResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionRuleAssociationProxyOnlyResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS, DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS runs a test to see if a specific instance of DataCollectionRuleAssociationProxyOnlyResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionRuleAssociationProxyOnlyResource_STATUS(subject DataCollectionRuleAssociationProxyOnlyResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionRuleAssociationProxyOnlyResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionRuleAssociationProxyOnlyResource_STATUS instances for property testing - lazily
// instantiated by DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator()
var dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator gopter.Gen

// DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator returns a generator of DataCollectionRuleAssociationProxyOnlyResource_STATUS instances for property testing.
// We first initialize dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator() gopter.Gen {
	if dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator != nil {
		return dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(generators)
	dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociationProxyOnlyResource_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(generators)
	AddRelatedPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(generators)
	dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociationProxyOnlyResource_STATUS{}), generators)

	return dataCollectionRuleAssociationProxyOnlyResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(gens map[string]gopter.Gen) {
	gens["DataCollectionEndpointId"] = gen.PtrOf(gen.AlphaString())
	gens["DataCollectionRuleId"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Canceled,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Creating,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Deleting,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Failed,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Succeeded,
		DataCollectionRuleAssociation_ProvisioningState_STATUS_Updating))
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataCollectionRuleAssociationProxyOnlyResource_STATUS(gens map[string]gopter.Gen) {
	gens["Metadata"] = gen.PtrOf(Metadata_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_DataCollectionRuleAssociation_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DataCollectionRuleAssociation_Spec to DataCollectionRuleAssociation_Spec via AssignProperties_To_DataCollectionRuleAssociation_Spec & AssignProperties_From_DataCollectionRuleAssociation_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForDataCollectionRuleAssociation_Spec, DataCollectionRuleAssociation_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDataCollectionRuleAssociation_Spec tests if a specific instance of DataCollectionRuleAssociation_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForDataCollectionRuleAssociation_Spec(subject DataCollectionRuleAssociation_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.DataCollectionRuleAssociation_Spec
	err := copied.AssignProperties_To_DataCollectionRuleAssociation_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DataCollectionRuleAssociation_Spec
	err = actual.AssignProperties_From_DataCollectionRuleAssociation_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DataCollectionRuleAssociation_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataCollectionRuleAssociation_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataCollectionRuleAssociation_Spec, DataCollectionRuleAssociation_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataCollectionRuleAssociation_Spec runs a test to see if a specific instance of DataCollectionRuleAssociation_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDataCollectionRuleAssociation_Spec(subject DataCollectionRuleAssociation_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataCollectionRuleAssociation_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataCollectionRuleAssociation_Spec instances for property testing - lazily instantiated by
// DataCollectionRuleAssociation_SpecGenerator()
var dataCollectionRuleAssociation_SpecGenerator gopter.Gen

// DataCollectionRuleAssociation_SpecGenerator returns a generator of DataCollectionRuleAssociation_Spec instances for property testing.
// We first initialize dataCollectionRuleAssociation_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataCollectionRuleAssociation_SpecGenerator() gopter.Gen {
	if dataCollectionRuleAssociation_SpecGenerator != nil {
		return dataCollectionRuleAssociation_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_Spec(generators)
	dataCollectionRuleAssociation_SpecGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociation_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_Spec(generators)
	AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation_Spec(generators)
	dataCollectionRuleAssociation_SpecGenerator = gen.Struct(reflect.TypeOf(DataCollectionRuleAssociation_Spec{}), generators)

	return dataCollectionRuleAssociation_SpecGenerator
}

// AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataCollectionRuleAssociation_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataCollectionRuleAssociation_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(DataCollectionRuleAssociationOperatorSpecGenerator())
}
