// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Webtest_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Webtest_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebtest_STATUSARM, Webtest_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebtest_STATUSARM runs a test to see if a specific instance of Webtest_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebtest_STATUSARM(subject Webtest_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Webtest_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Webtest_STATUSARM instances for property testing - lazily instantiated by Webtest_STATUSARMGenerator()
var webtest_STATUSARMGenerator gopter.Gen

// Webtest_STATUSARMGenerator returns a generator of Webtest_STATUSARM instances for property testing.
// We first initialize webtest_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Webtest_STATUSARMGenerator() gopter.Gen {
	if webtest_STATUSARMGenerator != nil {
		return webtest_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtest_STATUSARM(generators)
	webtest_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Webtest_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtest_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForWebtest_STATUSARM(generators)
	webtest_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Webtest_STATUSARM{}), generators)

	return webtest_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebtest_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebtest_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebtest_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebtest_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WebTestProperties_STATUSARMGenerator())
}

func Test_WebTestProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_STATUSARM, WebTestProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_STATUSARM runs a test to see if a specific instance of WebTestProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_STATUSARM(subject WebTestProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_STATUSARM instances for property testing - lazily instantiated by
// WebTestProperties_STATUSARMGenerator()
var webTestProperties_STATUSARMGenerator gopter.Gen

// WebTestProperties_STATUSARMGenerator returns a generator of WebTestProperties_STATUSARM instances for property testing.
// We first initialize webTestProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_STATUSARMGenerator() gopter.Gen {
	if webTestProperties_STATUSARMGenerator != nil {
		return webTestProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM(generators)
	webTestProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_STATUSARM(generators)
	webTestProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_STATUSARM{}), generators)

	return webTestProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Frequency"] = gen.PtrOf(gen.Int())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(
		WebTestProperties_Kind_Basic_STATUS,
		WebTestProperties_Kind_Multistep_STATUS,
		WebTestProperties_Kind_Ping_STATUS,
		WebTestProperties_Kind_Standard_STATUS))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RetryEnabled"] = gen.PtrOf(gen.Bool())
	gens["SyntheticMonitorId"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Configuration"] = gen.PtrOf(WebTestProperties_Configuration_STATUSARMGenerator())
	gens["Locations"] = gen.SliceOf(WebTestGeolocation_STATUSARMGenerator())
	gens["Request"] = gen.PtrOf(WebTestProperties_Request_STATUSARMGenerator())
	gens["ValidationRules"] = gen.PtrOf(WebTestProperties_ValidationRules_STATUSARMGenerator())
}

func Test_WebTestGeolocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestGeolocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestGeolocation_STATUSARM, WebTestGeolocation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestGeolocation_STATUSARM runs a test to see if a specific instance of WebTestGeolocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestGeolocation_STATUSARM(subject WebTestGeolocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestGeolocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestGeolocation_STATUSARM instances for property testing - lazily instantiated by
// WebTestGeolocation_STATUSARMGenerator()
var webTestGeolocation_STATUSARMGenerator gopter.Gen

// WebTestGeolocation_STATUSARMGenerator returns a generator of WebTestGeolocation_STATUSARM instances for property testing.
func WebTestGeolocation_STATUSARMGenerator() gopter.Gen {
	if webTestGeolocation_STATUSARMGenerator != nil {
		return webTestGeolocation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestGeolocation_STATUSARM(generators)
	webTestGeolocation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestGeolocation_STATUSARM{}), generators)

	return webTestGeolocation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestGeolocation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestGeolocation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Configuration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Configuration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_Configuration_STATUSARM, WebTestProperties_Configuration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_Configuration_STATUSARM runs a test to see if a specific instance of WebTestProperties_Configuration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_Configuration_STATUSARM(subject WebTestProperties_Configuration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Configuration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Configuration_STATUSARM instances for property testing - lazily instantiated by
// WebTestProperties_Configuration_STATUSARMGenerator()
var webTestProperties_Configuration_STATUSARMGenerator gopter.Gen

// WebTestProperties_Configuration_STATUSARMGenerator returns a generator of WebTestProperties_Configuration_STATUSARM instances for property testing.
func WebTestProperties_Configuration_STATUSARMGenerator() gopter.Gen {
	if webTestProperties_Configuration_STATUSARMGenerator != nil {
		return webTestProperties_Configuration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_Configuration_STATUSARM(generators)
	webTestProperties_Configuration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Configuration_STATUSARM{}), generators)

	return webTestProperties_Configuration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_Configuration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_Configuration_STATUSARM(gens map[string]gopter.Gen) {
	gens["WebTest"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_Request_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_Request_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_Request_STATUSARM, WebTestProperties_Request_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_Request_STATUSARM runs a test to see if a specific instance of WebTestProperties_Request_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_Request_STATUSARM(subject WebTestProperties_Request_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_Request_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_Request_STATUSARM instances for property testing - lazily instantiated by
// WebTestProperties_Request_STATUSARMGenerator()
var webTestProperties_Request_STATUSARMGenerator gopter.Gen

// WebTestProperties_Request_STATUSARMGenerator returns a generator of WebTestProperties_Request_STATUSARM instances for property testing.
// We first initialize webTestProperties_Request_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_Request_STATUSARMGenerator() gopter.Gen {
	if webTestProperties_Request_STATUSARMGenerator != nil {
		return webTestProperties_Request_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_Request_STATUSARM(generators)
	webTestProperties_Request_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Request_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_Request_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_Request_STATUSARM(generators)
	webTestProperties_Request_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_Request_STATUSARM{}), generators)

	return webTestProperties_Request_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_Request_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_Request_STATUSARM(gens map[string]gopter.Gen) {
	gens["FollowRedirects"] = gen.PtrOf(gen.Bool())
	gens["HttpVerb"] = gen.PtrOf(gen.AlphaString())
	gens["ParseDependentRequests"] = gen.PtrOf(gen.Bool())
	gens["RequestBody"] = gen.PtrOf(gen.AlphaString())
	gens["RequestUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_Request_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_Request_STATUSARM(gens map[string]gopter.Gen) {
	gens["Headers"] = gen.SliceOf(HeaderField_STATUSARMGenerator())
}

func Test_WebTestProperties_ValidationRules_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_ValidationRules_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_ValidationRules_STATUSARM, WebTestProperties_ValidationRules_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_ValidationRules_STATUSARM runs a test to see if a specific instance of WebTestProperties_ValidationRules_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_ValidationRules_STATUSARM(subject WebTestProperties_ValidationRules_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_ValidationRules_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_ValidationRules_STATUSARM instances for property testing - lazily instantiated by
// WebTestProperties_ValidationRules_STATUSARMGenerator()
var webTestProperties_ValidationRules_STATUSARMGenerator gopter.Gen

// WebTestProperties_ValidationRules_STATUSARMGenerator returns a generator of WebTestProperties_ValidationRules_STATUSARM instances for property testing.
// We first initialize webTestProperties_ValidationRules_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebTestProperties_ValidationRules_STATUSARMGenerator() gopter.Gen {
	if webTestProperties_ValidationRules_STATUSARMGenerator != nil {
		return webTestProperties_ValidationRules_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_STATUSARM(generators)
	webTestProperties_ValidationRules_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ValidationRules_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForWebTestProperties_ValidationRules_STATUSARM(generators)
	webTestProperties_ValidationRules_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ValidationRules_STATUSARM{}), generators)

	return webTestProperties_ValidationRules_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExpectedHttpStatusCode"] = gen.PtrOf(gen.Int())
	gens["IgnoreHttpsStatusCode"] = gen.PtrOf(gen.Bool())
	gens["SSLCertRemainingLifetimeCheck"] = gen.PtrOf(gen.Int())
	gens["SSLCheck"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForWebTestProperties_ValidationRules_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebTestProperties_ValidationRules_STATUSARM(gens map[string]gopter.Gen) {
	gens["ContentValidation"] = gen.PtrOf(WebTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator())
}

func Test_HeaderField_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderField_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderField_STATUSARM, HeaderField_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderField_STATUSARM runs a test to see if a specific instance of HeaderField_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderField_STATUSARM(subject HeaderField_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderField_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderField_STATUSARM instances for property testing - lazily instantiated by
// HeaderField_STATUSARMGenerator()
var headerField_STATUSARMGenerator gopter.Gen

// HeaderField_STATUSARMGenerator returns a generator of HeaderField_STATUSARM instances for property testing.
func HeaderField_STATUSARMGenerator() gopter.Gen {
	if headerField_STATUSARMGenerator != nil {
		return headerField_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderField_STATUSARM(generators)
	headerField_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HeaderField_STATUSARM{}), generators)

	return headerField_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderField_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderField_STATUSARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebTestProperties_ValidationRules_ContentValidation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebTestProperties_ValidationRules_ContentValidation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebTestProperties_ValidationRules_ContentValidation_STATUSARM, WebTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebTestProperties_ValidationRules_ContentValidation_STATUSARM runs a test to see if a specific instance of WebTestProperties_ValidationRules_ContentValidation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebTestProperties_ValidationRules_ContentValidation_STATUSARM(subject WebTestProperties_ValidationRules_ContentValidation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebTestProperties_ValidationRules_ContentValidation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebTestProperties_ValidationRules_ContentValidation_STATUSARM instances for property testing - lazily
// instantiated by WebTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator()
var webTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator gopter.Gen

// WebTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator returns a generator of WebTestProperties_ValidationRules_ContentValidation_STATUSARM instances for property testing.
func WebTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator() gopter.Gen {
	if webTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator != nil {
		return webTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ContentValidation_STATUSARM(generators)
	webTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WebTestProperties_ValidationRules_ContentValidation_STATUSARM{}), generators)

	return webTestProperties_ValidationRules_ContentValidation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ContentValidation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebTestProperties_ValidationRules_ContentValidation_STATUSARM(gens map[string]gopter.Gen) {
	gens["ContentMatch"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["PassIfTextFound"] = gen.PtrOf(gen.Bool())
}
