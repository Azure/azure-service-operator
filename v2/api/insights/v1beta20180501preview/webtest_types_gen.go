// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180501preview

import (
	"fmt"
	v1beta20180501ps "github.com/Azure/azure-service-operator/v2/api/insights/v1beta20180501previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of Webtest. Use v1api20180501preview.Webtest instead
type Webtest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Webtest_Spec   `json:"spec,omitempty"`
	Status            Webtest_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Webtest{}

// GetConditions returns the conditions of the resource
func (webtest *Webtest) GetConditions() conditions.Conditions {
	return webtest.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (webtest *Webtest) SetConditions(conditions conditions.Conditions) {
	webtest.Status.Conditions = conditions
}

var _ conversion.Convertible = &Webtest{}

// ConvertFrom populates our Webtest from the provided hub Webtest
func (webtest *Webtest) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source v1beta20180501ps.Webtest

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = webtest.AssignProperties_From_Webtest(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to webtest")
	}

	return nil
}

// ConvertTo populates the provided hub Webtest from our Webtest
func (webtest *Webtest) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination v1beta20180501ps.Webtest
	err := webtest.AssignProperties_To_Webtest(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from webtest")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-insights-azure-com-v1beta20180501preview-webtest,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=webtests,verbs=create;update,versions=v1beta20180501preview,name=default.v1beta20180501preview.webtests.insights.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Webtest{}

// Default applies defaults to the Webtest resource
func (webtest *Webtest) Default() {
	webtest.defaultImpl()
	var temp any = webtest
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (webtest *Webtest) defaultAzureName() {
	if webtest.Spec.AzureName == "" {
		webtest.Spec.AzureName = webtest.Name
	}
}

// defaultImpl applies the code generated defaults to the Webtest resource
func (webtest *Webtest) defaultImpl() { webtest.defaultAzureName() }

var _ genruntime.KubernetesResource = &Webtest{}

// AzureName returns the Azure name of the resource
func (webtest *Webtest) AzureName() string {
	return webtest.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-05-01-preview"
func (webtest Webtest) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (webtest *Webtest) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (webtest *Webtest) GetSpec() genruntime.ConvertibleSpec {
	return &webtest.Spec
}

// GetStatus returns the status of this resource
func (webtest *Webtest) GetStatus() genruntime.ConvertibleStatus {
	return &webtest.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (webtest *Webtest) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Insights/webtests"
func (webtest *Webtest) GetType() string {
	return "Microsoft.Insights/webtests"
}

// NewEmptyStatus returns a new empty (blank) status
func (webtest *Webtest) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Webtest_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (webtest *Webtest) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(webtest.Spec)
	return webtest.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (webtest *Webtest) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Webtest_STATUS); ok {
		webtest.Status = *st
		return nil
	}

	// Convert status to required version
	var st Webtest_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	webtest.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-insights-azure-com-v1beta20180501preview-webtest,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=insights.azure.com,resources=webtests,verbs=create;update,versions=v1beta20180501preview,name=validate.v1beta20180501preview.webtests.insights.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Webtest{}

// ValidateCreate validates the creation of the resource
func (webtest *Webtest) ValidateCreate() (admission.Warnings, error) {
	validations := webtest.createValidations()
	var temp any = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (webtest *Webtest) ValidateDelete() (admission.Warnings, error) {
	validations := webtest.deleteValidations()
	var temp any = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (webtest *Webtest) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := webtest.updateValidations()
	var temp any = webtest
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (webtest *Webtest) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){webtest.validateResourceReferences, webtest.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (webtest *Webtest) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (webtest *Webtest) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return webtest.validateResourceReferences()
		},
		webtest.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return webtest.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (webtest *Webtest) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(webtest)
}

// validateResourceReferences validates all resource references
func (webtest *Webtest) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&webtest.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (webtest *Webtest) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*Webtest)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, webtest)
}

// AssignProperties_From_Webtest populates our Webtest from the provided source Webtest
func (webtest *Webtest) AssignProperties_From_Webtest(source *v1beta20180501ps.Webtest) error {

	// ObjectMeta
	webtest.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Webtest_Spec
	err := spec.AssignProperties_From_Webtest_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Webtest_Spec() to populate field Spec")
	}
	webtest.Spec = spec

	// Status
	var status Webtest_STATUS
	err = status.AssignProperties_From_Webtest_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Webtest_STATUS() to populate field Status")
	}
	webtest.Status = status

	// No error
	return nil
}

// AssignProperties_To_Webtest populates the provided destination Webtest from our Webtest
func (webtest *Webtest) AssignProperties_To_Webtest(destination *v1beta20180501ps.Webtest) error {

	// ObjectMeta
	destination.ObjectMeta = *webtest.ObjectMeta.DeepCopy()

	// Spec
	var spec v1beta20180501ps.Webtest_Spec
	err := webtest.Spec.AssignProperties_To_Webtest_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Webtest_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1beta20180501ps.Webtest_STATUS
	err = webtest.Status.AssignProperties_To_Webtest_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Webtest_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (webtest *Webtest) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: webtest.Spec.OriginalVersion(),
		Kind:    "Webtest",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of Webtest. Use v1api20180501preview.Webtest instead
type WebtestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Webtest `json:"items"`
}

// Deprecated version of APIVersion. Use v1api20180501preview.APIVersion instead
// +kubebuilder:validation:Enum={"2018-05-01-preview"}
type APIVersion string

const APIVersion_Value = APIVersion("2018-05-01-preview")

type Webtest_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName     string                           `json:"azureName,omitempty"`
	Configuration *WebTestProperties_Configuration `json:"Configuration,omitempty"`
	Description   *string                          `json:"Description,omitempty"`
	Enabled       *bool                            `json:"Enabled,omitempty"`
	Frequency     *int                             `json:"Frequency,omitempty"`

	// +kubebuilder:validation:Required
	Kind *WebTestProperties_Kind `json:"Kind,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Locations []WebTestGeolocation `json:"Locations,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"Name,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner        *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	Request      *WebTestProperties_Request         `json:"Request,omitempty"`
	RetryEnabled *bool                              `json:"RetryEnabled,omitempty"`

	// +kubebuilder:validation:Required
	SyntheticMonitorId *string                            `json:"SyntheticMonitorId,omitempty"`
	Tags               map[string]string                  `json:"tags,omitempty"`
	Timeout            *int                               `json:"Timeout,omitempty"`
	ValidationRules    *WebTestProperties_ValidationRules `json:"ValidationRules,omitempty"`
}

var _ genruntime.ARMTransformer = &Webtest_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (webtest *Webtest_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if webtest == nil {
		return nil, nil
	}
	result := &Webtest_Spec_ARM{}

	// Set property "Location":
	if webtest.Location != nil {
		location := *webtest.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if webtest.Configuration != nil ||
		webtest.Description != nil ||
		webtest.Enabled != nil ||
		webtest.Frequency != nil ||
		webtest.Kind != nil ||
		webtest.Locations != nil ||
		webtest.Name != nil ||
		webtest.Request != nil ||
		webtest.RetryEnabled != nil ||
		webtest.SyntheticMonitorId != nil ||
		webtest.Timeout != nil ||
		webtest.ValidationRules != nil {
		result.Properties = &WebTestProperties_ARM{}
	}
	if webtest.Configuration != nil {
		configuration_ARM, err := (*webtest.Configuration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		configuration := *configuration_ARM.(*WebTestProperties_Configuration_ARM)
		result.Properties.Configuration = &configuration
	}
	if webtest.Description != nil {
		description := *webtest.Description
		result.Properties.Description = &description
	}
	if webtest.Enabled != nil {
		enabled := *webtest.Enabled
		result.Properties.Enabled = &enabled
	}
	if webtest.Frequency != nil {
		frequency := *webtest.Frequency
		result.Properties.Frequency = &frequency
	}
	if webtest.Kind != nil {
		kind := *webtest.Kind
		result.Properties.Kind = &kind
	}
	for _, item := range webtest.Locations {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Locations = append(result.Properties.Locations, *item_ARM.(*WebTestGeolocation_ARM))
	}
	if webtest.Name != nil {
		name := *webtest.Name
		result.Properties.Name = &name
	}
	if webtest.Request != nil {
		request_ARM, err := (*webtest.Request).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		request := *request_ARM.(*WebTestProperties_Request_ARM)
		result.Properties.Request = &request
	}
	if webtest.RetryEnabled != nil {
		retryEnabled := *webtest.RetryEnabled
		result.Properties.RetryEnabled = &retryEnabled
	}
	if webtest.SyntheticMonitorId != nil {
		syntheticMonitorId := *webtest.SyntheticMonitorId
		result.Properties.SyntheticMonitorId = &syntheticMonitorId
	}
	if webtest.Timeout != nil {
		timeout := *webtest.Timeout
		result.Properties.Timeout = &timeout
	}
	if webtest.ValidationRules != nil {
		validationRules_ARM, err := (*webtest.ValidationRules).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		validationRules := *validationRules_ARM.(*WebTestProperties_ValidationRules_ARM)
		result.Properties.ValidationRules = &validationRules
	}

	// Set property "Tags":
	if webtest.Tags != nil {
		result.Tags = make(map[string]string, len(webtest.Tags))
		for key, value := range webtest.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (webtest *Webtest_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Webtest_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (webtest *Webtest_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Webtest_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Webtest_Spec_ARM, got %T", armInput)
	}

	// Set property "AzureName":
	webtest.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Configuration":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Configuration != nil {
			var configuration1 WebTestProperties_Configuration
			err := configuration1.PopulateFromARM(owner, *typedInput.Properties.Configuration)
			if err != nil {
				return err
			}
			configuration := configuration1
			webtest.Configuration = &configuration
		}
	}

	// Set property "Description":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			webtest.Description = &description
		}
	}

	// Set property "Enabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			webtest.Enabled = &enabled
		}
	}

	// Set property "Frequency":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Frequency != nil {
			frequency := *typedInput.Properties.Frequency
			webtest.Frequency = &frequency
		}
	}

	// Set property "Kind":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Kind != nil {
			kind := *typedInput.Properties.Kind
			webtest.Kind = &kind
		}
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		webtest.Location = &location
	}

	// Set property "Locations":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 WebTestGeolocation
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			webtest.Locations = append(webtest.Locations, item1)
		}
	}

	// Set property "Name":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Name != nil {
			name := *typedInput.Properties.Name
			webtest.Name = &name
		}
	}

	// Set property "Owner":
	webtest.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Request":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request != nil {
			var request1 WebTestProperties_Request
			err := request1.PopulateFromARM(owner, *typedInput.Properties.Request)
			if err != nil {
				return err
			}
			request := request1
			webtest.Request = &request
		}
	}

	// Set property "RetryEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryEnabled != nil {
			retryEnabled := *typedInput.Properties.RetryEnabled
			webtest.RetryEnabled = &retryEnabled
		}
	}

	// Set property "SyntheticMonitorId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyntheticMonitorId != nil {
			syntheticMonitorId := *typedInput.Properties.SyntheticMonitorId
			webtest.SyntheticMonitorId = &syntheticMonitorId
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		webtest.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			webtest.Tags[key] = value
		}
	}

	// Set property "Timeout":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Timeout != nil {
			timeout := *typedInput.Properties.Timeout
			webtest.Timeout = &timeout
		}
	}

	// Set property "ValidationRules":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ValidationRules != nil {
			var validationRules1 WebTestProperties_ValidationRules
			err := validationRules1.PopulateFromARM(owner, *typedInput.Properties.ValidationRules)
			if err != nil {
				return err
			}
			validationRules := validationRules1
			webtest.ValidationRules = &validationRules
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Webtest_Spec{}

// ConvertSpecFrom populates our Webtest_Spec from the provided source
func (webtest *Webtest_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1beta20180501ps.Webtest_Spec)
	if ok {
		// Populate our instance from source
		return webtest.AssignProperties_From_Webtest_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1beta20180501ps.Webtest_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = webtest.AssignProperties_From_Webtest_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Webtest_Spec
func (webtest *Webtest_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1beta20180501ps.Webtest_Spec)
	if ok {
		// Populate destination from our instance
		return webtest.AssignProperties_To_Webtest_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1beta20180501ps.Webtest_Spec{}
	err := webtest.AssignProperties_To_Webtest_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Webtest_Spec populates our Webtest_Spec from the provided source Webtest_Spec
func (webtest *Webtest_Spec) AssignProperties_From_Webtest_Spec(source *v1beta20180501ps.Webtest_Spec) error {

	// AzureName
	webtest.AzureName = source.AzureName

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestProperties_Configuration
		err := configuration.AssignProperties_From_WebTestProperties_Configuration(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_Configuration() to populate field Configuration")
		}
		webtest.Configuration = &configuration
	} else {
		webtest.Configuration = nil
	}

	// Description
	webtest.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		webtest.Enabled = &enabled
	} else {
		webtest.Enabled = nil
	}

	// Frequency
	webtest.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Kind
	if source.Kind != nil {
		kind := WebTestProperties_Kind(*source.Kind)
		webtest.Kind = &kind
	} else {
		webtest.Kind = nil
	}

	// Location
	webtest.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation
			err := location.AssignProperties_From_WebTestGeolocation(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_WebTestGeolocation() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		webtest.Locations = locationList
	} else {
		webtest.Locations = nil
	}

	// Name
	webtest.Name = genruntime.ClonePointerToString(source.Name)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		webtest.Owner = &owner
	} else {
		webtest.Owner = nil
	}

	// Request
	if source.Request != nil {
		var request WebTestProperties_Request
		err := request.AssignProperties_From_WebTestProperties_Request(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_Request() to populate field Request")
		}
		webtest.Request = &request
	} else {
		webtest.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		webtest.RetryEnabled = &retryEnabled
	} else {
		webtest.RetryEnabled = nil
	}

	// SyntheticMonitorId
	webtest.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	webtest.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Timeout
	webtest.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestProperties_ValidationRules
		err := validationRule.AssignProperties_From_WebTestProperties_ValidationRules(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_ValidationRules() to populate field ValidationRules")
		}
		webtest.ValidationRules = &validationRule
	} else {
		webtest.ValidationRules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Webtest_Spec populates the provided destination Webtest_Spec from our Webtest_Spec
func (webtest *Webtest_Spec) AssignProperties_To_Webtest_Spec(destination *v1beta20180501ps.Webtest_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = webtest.AzureName

	// Configuration
	if webtest.Configuration != nil {
		var configuration v1beta20180501ps.WebTestProperties_Configuration
		err := webtest.Configuration.AssignProperties_To_WebTestProperties_Configuration(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_Configuration() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(webtest.Description)

	// Enabled
	if webtest.Enabled != nil {
		enabled := *webtest.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(webtest.Frequency)

	// Kind
	if webtest.Kind != nil {
		kind := string(*webtest.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(webtest.Location)

	// Locations
	if webtest.Locations != nil {
		locationList := make([]v1beta20180501ps.WebTestGeolocation, len(webtest.Locations))
		for locationIndex, locationItem := range webtest.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1beta20180501ps.WebTestGeolocation
			err := locationItem.AssignProperties_To_WebTestGeolocation(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_WebTestGeolocation() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(webtest.Name)

	// OriginalVersion
	destination.OriginalVersion = webtest.OriginalVersion()

	// Owner
	if webtest.Owner != nil {
		owner := webtest.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Request
	if webtest.Request != nil {
		var request v1beta20180501ps.WebTestProperties_Request
		err := webtest.Request.AssignProperties_To_WebTestProperties_Request(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_Request() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if webtest.RetryEnabled != nil {
		retryEnabled := *webtest.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(webtest.SyntheticMonitorId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(webtest.Tags)

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(webtest.Timeout)

	// ValidationRules
	if webtest.ValidationRules != nil {
		var validationRule v1beta20180501ps.WebTestProperties_ValidationRules
		err := webtest.ValidationRules.AssignProperties_To_WebTestProperties_ValidationRules(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_ValidationRules() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (webtest *Webtest_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (webtest *Webtest_Spec) SetAzureName(azureName string) { webtest.AzureName = azureName }

// Deprecated version of Webtest_STATUS. Use v1api20180501preview.Webtest_STATUS instead
type Webtest_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions         []conditions.Condition                    `json:"conditions,omitempty"`
	Configuration      *WebTestProperties_Configuration_STATUS   `json:"Configuration,omitempty"`
	Description        *string                                   `json:"Description,omitempty"`
	Enabled            *bool                                     `json:"Enabled,omitempty"`
	Frequency          *int                                      `json:"Frequency,omitempty"`
	Id                 *string                                   `json:"id,omitempty"`
	Kind               *WebTestProperties_Kind_STATUS            `json:"Kind,omitempty"`
	Location           *string                                   `json:"location,omitempty"`
	Locations          []WebTestGeolocation_STATUS               `json:"Locations,omitempty"`
	Name               *string                                   `json:"name,omitempty"`
	PropertiesName     *string                                   `json:"properties_name,omitempty"`
	ProvisioningState  *string                                   `json:"provisioningState,omitempty"`
	Request            *WebTestProperties_Request_STATUS         `json:"Request,omitempty"`
	RetryEnabled       *bool                                     `json:"RetryEnabled,omitempty"`
	SyntheticMonitorId *string                                   `json:"SyntheticMonitorId,omitempty"`
	Tags               map[string]string                         `json:"tags,omitempty"`
	Timeout            *int                                      `json:"Timeout,omitempty"`
	Type               *string                                   `json:"type,omitempty"`
	ValidationRules    *WebTestProperties_ValidationRules_STATUS `json:"ValidationRules,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Webtest_STATUS{}

// ConvertStatusFrom populates our Webtest_STATUS from the provided source
func (webtest *Webtest_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1beta20180501ps.Webtest_STATUS)
	if ok {
		// Populate our instance from source
		return webtest.AssignProperties_From_Webtest_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v1beta20180501ps.Webtest_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = webtest.AssignProperties_From_Webtest_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Webtest_STATUS
func (webtest *Webtest_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1beta20180501ps.Webtest_STATUS)
	if ok {
		// Populate destination from our instance
		return webtest.AssignProperties_To_Webtest_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v1beta20180501ps.Webtest_STATUS{}
	err := webtest.AssignProperties_To_Webtest_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Webtest_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (webtest *Webtest_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Webtest_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (webtest *Webtest_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Webtest_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Webtest_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Configuration":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Configuration != nil {
			var configuration1 WebTestProperties_Configuration_STATUS
			err := configuration1.PopulateFromARM(owner, *typedInput.Properties.Configuration)
			if err != nil {
				return err
			}
			configuration := configuration1
			webtest.Configuration = &configuration
		}
	}

	// Set property "Description":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			webtest.Description = &description
		}
	}

	// Set property "Enabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			webtest.Enabled = &enabled
		}
	}

	// Set property "Frequency":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Frequency != nil {
			frequency := *typedInput.Properties.Frequency
			webtest.Frequency = &frequency
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		webtest.Id = &id
	}

	// Set property "Kind":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Kind != nil {
			kind := *typedInput.Properties.Kind
			webtest.Kind = &kind
		}
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		webtest.Location = &location
	}

	// Set property "Locations":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 WebTestGeolocation_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			webtest.Locations = append(webtest.Locations, item1)
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		webtest.Name = &name
	}

	// Set property "PropertiesName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Name != nil {
			propertiesName := *typedInput.Properties.Name
			webtest.PropertiesName = &propertiesName
		}
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			webtest.ProvisioningState = &provisioningState
		}
	}

	// Set property "Request":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Request != nil {
			var request1 WebTestProperties_Request_STATUS
			err := request1.PopulateFromARM(owner, *typedInput.Properties.Request)
			if err != nil {
				return err
			}
			request := request1
			webtest.Request = &request
		}
	}

	// Set property "RetryEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryEnabled != nil {
			retryEnabled := *typedInput.Properties.RetryEnabled
			webtest.RetryEnabled = &retryEnabled
		}
	}

	// Set property "SyntheticMonitorId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyntheticMonitorId != nil {
			syntheticMonitorId := *typedInput.Properties.SyntheticMonitorId
			webtest.SyntheticMonitorId = &syntheticMonitorId
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		webtest.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			webtest.Tags[key] = value
		}
	}

	// Set property "Timeout":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Timeout != nil {
			timeout := *typedInput.Properties.Timeout
			webtest.Timeout = &timeout
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		webtest.Type = &typeVar
	}

	// Set property "ValidationRules":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ValidationRules != nil {
			var validationRules1 WebTestProperties_ValidationRules_STATUS
			err := validationRules1.PopulateFromARM(owner, *typedInput.Properties.ValidationRules)
			if err != nil {
				return err
			}
			validationRules := validationRules1
			webtest.ValidationRules = &validationRules
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Webtest_STATUS populates our Webtest_STATUS from the provided source Webtest_STATUS
func (webtest *Webtest_STATUS) AssignProperties_From_Webtest_STATUS(source *v1beta20180501ps.Webtest_STATUS) error {

	// Conditions
	webtest.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Configuration
	if source.Configuration != nil {
		var configuration WebTestProperties_Configuration_STATUS
		err := configuration.AssignProperties_From_WebTestProperties_Configuration_STATUS(source.Configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_Configuration_STATUS() to populate field Configuration")
		}
		webtest.Configuration = &configuration
	} else {
		webtest.Configuration = nil
	}

	// Description
	webtest.Description = genruntime.ClonePointerToString(source.Description)

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		webtest.Enabled = &enabled
	} else {
		webtest.Enabled = nil
	}

	// Frequency
	webtest.Frequency = genruntime.ClonePointerToInt(source.Frequency)

	// Id
	webtest.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	if source.Kind != nil {
		kind := WebTestProperties_Kind_STATUS(*source.Kind)
		webtest.Kind = &kind
	} else {
		webtest.Kind = nil
	}

	// Location
	webtest.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]WebTestGeolocation_STATUS, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location WebTestGeolocation_STATUS
			err := location.AssignProperties_From_WebTestGeolocation_STATUS(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_WebTestGeolocation_STATUS() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		webtest.Locations = locationList
	} else {
		webtest.Locations = nil
	}

	// Name
	webtest.Name = genruntime.ClonePointerToString(source.Name)

	// PropertiesName
	webtest.PropertiesName = genruntime.ClonePointerToString(source.PropertiesName)

	// ProvisioningState
	webtest.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Request
	if source.Request != nil {
		var request WebTestProperties_Request_STATUS
		err := request.AssignProperties_From_WebTestProperties_Request_STATUS(source.Request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_Request_STATUS() to populate field Request")
		}
		webtest.Request = &request
	} else {
		webtest.Request = nil
	}

	// RetryEnabled
	if source.RetryEnabled != nil {
		retryEnabled := *source.RetryEnabled
		webtest.RetryEnabled = &retryEnabled
	} else {
		webtest.RetryEnabled = nil
	}

	// SyntheticMonitorId
	webtest.SyntheticMonitorId = genruntime.ClonePointerToString(source.SyntheticMonitorId)

	// Tags
	webtest.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Timeout
	webtest.Timeout = genruntime.ClonePointerToInt(source.Timeout)

	// Type
	webtest.Type = genruntime.ClonePointerToString(source.Type)

	// ValidationRules
	if source.ValidationRules != nil {
		var validationRule WebTestProperties_ValidationRules_STATUS
		err := validationRule.AssignProperties_From_WebTestProperties_ValidationRules_STATUS(source.ValidationRules)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_ValidationRules_STATUS() to populate field ValidationRules")
		}
		webtest.ValidationRules = &validationRule
	} else {
		webtest.ValidationRules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Webtest_STATUS populates the provided destination Webtest_STATUS from our Webtest_STATUS
func (webtest *Webtest_STATUS) AssignProperties_To_Webtest_STATUS(destination *v1beta20180501ps.Webtest_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(webtest.Conditions)

	// Configuration
	if webtest.Configuration != nil {
		var configuration v1beta20180501ps.WebTestProperties_Configuration_STATUS
		err := webtest.Configuration.AssignProperties_To_WebTestProperties_Configuration_STATUS(&configuration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_Configuration_STATUS() to populate field Configuration")
		}
		destination.Configuration = &configuration
	} else {
		destination.Configuration = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(webtest.Description)

	// Enabled
	if webtest.Enabled != nil {
		enabled := *webtest.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Frequency
	destination.Frequency = genruntime.ClonePointerToInt(webtest.Frequency)

	// Id
	destination.Id = genruntime.ClonePointerToString(webtest.Id)

	// Kind
	if webtest.Kind != nil {
		kind := string(*webtest.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(webtest.Location)

	// Locations
	if webtest.Locations != nil {
		locationList := make([]v1beta20180501ps.WebTestGeolocation_STATUS, len(webtest.Locations))
		for locationIndex, locationItem := range webtest.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1beta20180501ps.WebTestGeolocation_STATUS
			err := locationItem.AssignProperties_To_WebTestGeolocation_STATUS(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_WebTestGeolocation_STATUS() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(webtest.Name)

	// PropertiesName
	destination.PropertiesName = genruntime.ClonePointerToString(webtest.PropertiesName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(webtest.ProvisioningState)

	// Request
	if webtest.Request != nil {
		var request v1beta20180501ps.WebTestProperties_Request_STATUS
		err := webtest.Request.AssignProperties_To_WebTestProperties_Request_STATUS(&request)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_Request_STATUS() to populate field Request")
		}
		destination.Request = &request
	} else {
		destination.Request = nil
	}

	// RetryEnabled
	if webtest.RetryEnabled != nil {
		retryEnabled := *webtest.RetryEnabled
		destination.RetryEnabled = &retryEnabled
	} else {
		destination.RetryEnabled = nil
	}

	// SyntheticMonitorId
	destination.SyntheticMonitorId = genruntime.ClonePointerToString(webtest.SyntheticMonitorId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(webtest.Tags)

	// Timeout
	destination.Timeout = genruntime.ClonePointerToInt(webtest.Timeout)

	// Type
	destination.Type = genruntime.ClonePointerToString(webtest.Type)

	// ValidationRules
	if webtest.ValidationRules != nil {
		var validationRule v1beta20180501ps.WebTestProperties_ValidationRules_STATUS
		err := webtest.ValidationRules.AssignProperties_To_WebTestProperties_ValidationRules_STATUS(&validationRule)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_ValidationRules_STATUS() to populate field ValidationRules")
		}
		destination.ValidationRules = &validationRule
	} else {
		destination.ValidationRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestGeolocation. Use v1api20180501preview.WebTestGeolocation instead
type WebTestGeolocation struct {
	Id *string `json:"Id,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestGeolocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (geolocation *WebTestGeolocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if geolocation == nil {
		return nil, nil
	}
	result := &WebTestGeolocation_ARM{}

	// Set property "Id":
	if geolocation.Id != nil {
		id := *geolocation.Id
		result.Id = &id
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (geolocation *WebTestGeolocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestGeolocation_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (geolocation *WebTestGeolocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestGeolocation_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestGeolocation_ARM, got %T", armInput)
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		geolocation.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestGeolocation populates our WebTestGeolocation from the provided source WebTestGeolocation
func (geolocation *WebTestGeolocation) AssignProperties_From_WebTestGeolocation(source *v1beta20180501ps.WebTestGeolocation) error {

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_WebTestGeolocation populates the provided destination WebTestGeolocation from our WebTestGeolocation
func (geolocation *WebTestGeolocation) AssignProperties_To_WebTestGeolocation(destination *v1beta20180501ps.WebTestGeolocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestGeolocation_STATUS. Use v1api20180501preview.WebTestGeolocation_STATUS instead
type WebTestGeolocation_STATUS struct {
	Id *string `json:"Id,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestGeolocation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (geolocation *WebTestGeolocation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestGeolocation_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (geolocation *WebTestGeolocation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestGeolocation_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestGeolocation_STATUS_ARM, got %T", armInput)
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		geolocation.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestGeolocation_STATUS populates our WebTestGeolocation_STATUS from the provided source WebTestGeolocation_STATUS
func (geolocation *WebTestGeolocation_STATUS) AssignProperties_From_WebTestGeolocation_STATUS(source *v1beta20180501ps.WebTestGeolocation_STATUS) error {

	// Id
	geolocation.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_WebTestGeolocation_STATUS populates the provided destination WebTestGeolocation_STATUS from our WebTestGeolocation_STATUS
func (geolocation *WebTestGeolocation_STATUS) AssignProperties_To_WebTestGeolocation_STATUS(destination *v1beta20180501ps.WebTestGeolocation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(geolocation.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_Configuration. Use v1api20180501preview.WebTestProperties_Configuration instead
type WebTestProperties_Configuration struct {
	WebTest *string `json:"WebTest,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_Configuration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *WebTestProperties_Configuration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	result := &WebTestProperties_Configuration_ARM{}

	// Set property "WebTest":
	if configuration.WebTest != nil {
		webTest := *configuration.WebTest
		result.WebTest = &webTest
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WebTestProperties_Configuration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Configuration_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WebTestProperties_Configuration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Configuration_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Configuration_ARM, got %T", armInput)
	}

	// Set property "WebTest":
	if typedInput.WebTest != nil {
		webTest := *typedInput.WebTest
		configuration.WebTest = &webTest
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_Configuration populates our WebTestProperties_Configuration from the provided source WebTestProperties_Configuration
func (configuration *WebTestProperties_Configuration) AssignProperties_From_WebTestProperties_Configuration(source *v1beta20180501ps.WebTestProperties_Configuration) error {

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_Configuration populates the provided destination WebTestProperties_Configuration from our WebTestProperties_Configuration
func (configuration *WebTestProperties_Configuration) AssignProperties_To_WebTestProperties_Configuration(destination *v1beta20180501ps.WebTestProperties_Configuration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_Configuration_STATUS. Use v1api20180501preview.WebTestProperties_Configuration_STATUS instead
type WebTestProperties_Configuration_STATUS struct {
	WebTest *string `json:"WebTest,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_Configuration_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WebTestProperties_Configuration_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Configuration_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WebTestProperties_Configuration_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Configuration_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Configuration_STATUS_ARM, got %T", armInput)
	}

	// Set property "WebTest":
	if typedInput.WebTest != nil {
		webTest := *typedInput.WebTest
		configuration.WebTest = &webTest
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_Configuration_STATUS populates our WebTestProperties_Configuration_STATUS from the provided source WebTestProperties_Configuration_STATUS
func (configuration *WebTestProperties_Configuration_STATUS) AssignProperties_From_WebTestProperties_Configuration_STATUS(source *v1beta20180501ps.WebTestProperties_Configuration_STATUS) error {

	// WebTest
	configuration.WebTest = genruntime.ClonePointerToString(source.WebTest)

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_Configuration_STATUS populates the provided destination WebTestProperties_Configuration_STATUS from our WebTestProperties_Configuration_STATUS
func (configuration *WebTestProperties_Configuration_STATUS) AssignProperties_To_WebTestProperties_Configuration_STATUS(destination *v1beta20180501ps.WebTestProperties_Configuration_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebTest
	destination.WebTest = genruntime.ClonePointerToString(configuration.WebTest)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_Kind. Use v1api20180501preview.WebTestProperties_Kind instead
// +kubebuilder:validation:Enum={"basic","multistep","ping","standard"}
type WebTestProperties_Kind string

const (
	WebTestProperties_Kind_Basic     = WebTestProperties_Kind("basic")
	WebTestProperties_Kind_Multistep = WebTestProperties_Kind("multistep")
	WebTestProperties_Kind_Ping      = WebTestProperties_Kind("ping")
	WebTestProperties_Kind_Standard  = WebTestProperties_Kind("standard")
)

// Deprecated version of WebTestProperties_Kind_STATUS. Use v1api20180501preview.WebTestProperties_Kind_STATUS instead
type WebTestProperties_Kind_STATUS string

const (
	WebTestProperties_Kind_STATUS_Basic     = WebTestProperties_Kind_STATUS("basic")
	WebTestProperties_Kind_STATUS_Multistep = WebTestProperties_Kind_STATUS("multistep")
	WebTestProperties_Kind_STATUS_Ping      = WebTestProperties_Kind_STATUS("ping")
	WebTestProperties_Kind_STATUS_Standard  = WebTestProperties_Kind_STATUS("standard")
)

// Deprecated version of WebTestProperties_Request. Use v1api20180501preview.WebTestProperties_Request instead
type WebTestProperties_Request struct {
	FollowRedirects        *bool         `json:"FollowRedirects,omitempty"`
	Headers                []HeaderField `json:"Headers,omitempty"`
	HttpVerb               *string       `json:"HttpVerb,omitempty"`
	ParseDependentRequests *bool         `json:"ParseDependentRequests,omitempty"`
	RequestBody            *string       `json:"RequestBody,omitempty"`
	RequestUrl             *string       `json:"RequestUrl,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_Request{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (request *WebTestProperties_Request) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if request == nil {
		return nil, nil
	}
	result := &WebTestProperties_Request_ARM{}

	// Set property "FollowRedirects":
	if request.FollowRedirects != nil {
		followRedirects := *request.FollowRedirects
		result.FollowRedirects = &followRedirects
	}

	// Set property "Headers":
	for _, item := range request.Headers {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Headers = append(result.Headers, *item_ARM.(*HeaderField_ARM))
	}

	// Set property "HttpVerb":
	if request.HttpVerb != nil {
		httpVerb := *request.HttpVerb
		result.HttpVerb = &httpVerb
	}

	// Set property "ParseDependentRequests":
	if request.ParseDependentRequests != nil {
		parseDependentRequests := *request.ParseDependentRequests
		result.ParseDependentRequests = &parseDependentRequests
	}

	// Set property "RequestBody":
	if request.RequestBody != nil {
		requestBody := *request.RequestBody
		result.RequestBody = &requestBody
	}

	// Set property "RequestUrl":
	if request.RequestUrl != nil {
		requestUrl := *request.RequestUrl
		result.RequestUrl = &requestUrl
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (request *WebTestProperties_Request) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Request_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (request *WebTestProperties_Request) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Request_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Request_ARM, got %T", armInput)
	}

	// Set property "FollowRedirects":
	if typedInput.FollowRedirects != nil {
		followRedirects := *typedInput.FollowRedirects
		request.FollowRedirects = &followRedirects
	}

	// Set property "Headers":
	for _, item := range typedInput.Headers {
		var item1 HeaderField
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		request.Headers = append(request.Headers, item1)
	}

	// Set property "HttpVerb":
	if typedInput.HttpVerb != nil {
		httpVerb := *typedInput.HttpVerb
		request.HttpVerb = &httpVerb
	}

	// Set property "ParseDependentRequests":
	if typedInput.ParseDependentRequests != nil {
		parseDependentRequests := *typedInput.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequests
	}

	// Set property "RequestBody":
	if typedInput.RequestBody != nil {
		requestBody := *typedInput.RequestBody
		request.RequestBody = &requestBody
	}

	// Set property "RequestUrl":
	if typedInput.RequestUrl != nil {
		requestUrl := *typedInput.RequestUrl
		request.RequestUrl = &requestUrl
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_Request populates our WebTestProperties_Request from the provided source WebTestProperties_Request
func (request *WebTestProperties_Request) AssignProperties_From_WebTestProperties_Request(source *v1beta20180501ps.WebTestProperties_Request) error {

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField
			err := header.AssignProperties_From_HeaderField(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderField() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_Request populates the provided destination WebTestProperties_Request from our WebTestProperties_Request
func (request *WebTestProperties_Request) AssignProperties_To_WebTestProperties_Request(destination *v1beta20180501ps.WebTestProperties_Request) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v1beta20180501ps.HeaderField, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v1beta20180501ps.HeaderField
			err := headerItem.AssignProperties_To_HeaderField(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderField() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_Request_STATUS. Use v1api20180501preview.WebTestProperties_Request_STATUS instead
type WebTestProperties_Request_STATUS struct {
	FollowRedirects        *bool                `json:"FollowRedirects,omitempty"`
	Headers                []HeaderField_STATUS `json:"Headers,omitempty"`
	HttpVerb               *string              `json:"HttpVerb,omitempty"`
	ParseDependentRequests *bool                `json:"ParseDependentRequests,omitempty"`
	RequestBody            *string              `json:"RequestBody,omitempty"`
	RequestUrl             *string              `json:"RequestUrl,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_Request_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (request *WebTestProperties_Request_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_Request_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (request *WebTestProperties_Request_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_Request_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_Request_STATUS_ARM, got %T", armInput)
	}

	// Set property "FollowRedirects":
	if typedInput.FollowRedirects != nil {
		followRedirects := *typedInput.FollowRedirects
		request.FollowRedirects = &followRedirects
	}

	// Set property "Headers":
	for _, item := range typedInput.Headers {
		var item1 HeaderField_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		request.Headers = append(request.Headers, item1)
	}

	// Set property "HttpVerb":
	if typedInput.HttpVerb != nil {
		httpVerb := *typedInput.HttpVerb
		request.HttpVerb = &httpVerb
	}

	// Set property "ParseDependentRequests":
	if typedInput.ParseDependentRequests != nil {
		parseDependentRequests := *typedInput.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequests
	}

	// Set property "RequestBody":
	if typedInput.RequestBody != nil {
		requestBody := *typedInput.RequestBody
		request.RequestBody = &requestBody
	}

	// Set property "RequestUrl":
	if typedInput.RequestUrl != nil {
		requestUrl := *typedInput.RequestUrl
		request.RequestUrl = &requestUrl
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_Request_STATUS populates our WebTestProperties_Request_STATUS from the provided source WebTestProperties_Request_STATUS
func (request *WebTestProperties_Request_STATUS) AssignProperties_From_WebTestProperties_Request_STATUS(source *v1beta20180501ps.WebTestProperties_Request_STATUS) error {

	// FollowRedirects
	if source.FollowRedirects != nil {
		followRedirect := *source.FollowRedirects
		request.FollowRedirects = &followRedirect
	} else {
		request.FollowRedirects = nil
	}

	// Headers
	if source.Headers != nil {
		headerList := make([]HeaderField_STATUS, len(source.Headers))
		for headerIndex, headerItem := range source.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header HeaderField_STATUS
			err := header.AssignProperties_From_HeaderField_STATUS(&headerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderField_STATUS() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		request.Headers = headerList
	} else {
		request.Headers = nil
	}

	// HttpVerb
	request.HttpVerb = genruntime.ClonePointerToString(source.HttpVerb)

	// ParseDependentRequests
	if source.ParseDependentRequests != nil {
		parseDependentRequest := *source.ParseDependentRequests
		request.ParseDependentRequests = &parseDependentRequest
	} else {
		request.ParseDependentRequests = nil
	}

	// RequestBody
	request.RequestBody = genruntime.ClonePointerToString(source.RequestBody)

	// RequestUrl
	request.RequestUrl = genruntime.ClonePointerToString(source.RequestUrl)

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_Request_STATUS populates the provided destination WebTestProperties_Request_STATUS from our WebTestProperties_Request_STATUS
func (request *WebTestProperties_Request_STATUS) AssignProperties_To_WebTestProperties_Request_STATUS(destination *v1beta20180501ps.WebTestProperties_Request_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FollowRedirects
	if request.FollowRedirects != nil {
		followRedirect := *request.FollowRedirects
		destination.FollowRedirects = &followRedirect
	} else {
		destination.FollowRedirects = nil
	}

	// Headers
	if request.Headers != nil {
		headerList := make([]v1beta20180501ps.HeaderField_STATUS, len(request.Headers))
		for headerIndex, headerItem := range request.Headers {
			// Shadow the loop variable to avoid aliasing
			headerItem := headerItem
			var header v1beta20180501ps.HeaderField_STATUS
			err := headerItem.AssignProperties_To_HeaderField_STATUS(&header)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderField_STATUS() to populate field Headers")
			}
			headerList[headerIndex] = header
		}
		destination.Headers = headerList
	} else {
		destination.Headers = nil
	}

	// HttpVerb
	destination.HttpVerb = genruntime.ClonePointerToString(request.HttpVerb)

	// ParseDependentRequests
	if request.ParseDependentRequests != nil {
		parseDependentRequest := *request.ParseDependentRequests
		destination.ParseDependentRequests = &parseDependentRequest
	} else {
		destination.ParseDependentRequests = nil
	}

	// RequestBody
	destination.RequestBody = genruntime.ClonePointerToString(request.RequestBody)

	// RequestUrl
	destination.RequestUrl = genruntime.ClonePointerToString(request.RequestUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_ValidationRules. Use v1api20180501preview.WebTestProperties_ValidationRules instead
type WebTestProperties_ValidationRules struct {
	ContentValidation             *WebTestProperties_ValidationRules_ContentValidation `json:"ContentValidation,omitempty"`
	ExpectedHttpStatusCode        *int                                                 `json:"ExpectedHttpStatusCode,omitempty"`
	IgnoreHttpsStatusCode         *bool                                                `json:"IgnoreHttpsStatusCode,omitempty"`
	SSLCertRemainingLifetimeCheck *int                                                 `json:"SSLCertRemainingLifetimeCheck,omitempty"`
	SSLCheck                      *bool                                                `json:"SSLCheck,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_ValidationRules{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rules *WebTestProperties_ValidationRules) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rules == nil {
		return nil, nil
	}
	result := &WebTestProperties_ValidationRules_ARM{}

	// Set property "ContentValidation":
	if rules.ContentValidation != nil {
		contentValidation_ARM, err := (*rules.ContentValidation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		contentValidation := *contentValidation_ARM.(*WebTestProperties_ValidationRules_ContentValidation_ARM)
		result.ContentValidation = &contentValidation
	}

	// Set property "ExpectedHttpStatusCode":
	if rules.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *rules.ExpectedHttpStatusCode
		result.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property "IgnoreHttpsStatusCode":
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		result.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property "SSLCertRemainingLifetimeCheck":
	if rules.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *rules.SSLCertRemainingLifetimeCheck
		result.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property "SSLCheck":
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		result.SSLCheck = &sslCheck
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *WebTestProperties_ValidationRules) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_ValidationRules_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *WebTestProperties_ValidationRules) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_ValidationRules_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_ValidationRules_ARM, got %T", armInput)
	}

	// Set property "ContentValidation":
	if typedInput.ContentValidation != nil {
		var contentValidation1 WebTestProperties_ValidationRules_ContentValidation
		err := contentValidation1.PopulateFromARM(owner, *typedInput.ContentValidation)
		if err != nil {
			return err
		}
		contentValidation := contentValidation1
		rules.ContentValidation = &contentValidation
	}

	// Set property "ExpectedHttpStatusCode":
	if typedInput.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *typedInput.ExpectedHttpStatusCode
		rules.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property "IgnoreHttpsStatusCode":
	if typedInput.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *typedInput.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property "SSLCertRemainingLifetimeCheck":
	if typedInput.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *typedInput.SSLCertRemainingLifetimeCheck
		rules.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property "SSLCheck":
	if typedInput.SSLCheck != nil {
		sslCheck := *typedInput.SSLCheck
		rules.SSLCheck = &sslCheck
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_ValidationRules populates our WebTestProperties_ValidationRules from the provided source WebTestProperties_ValidationRules
func (rules *WebTestProperties_ValidationRules) AssignProperties_From_WebTestProperties_ValidationRules(source *v1beta20180501ps.WebTestProperties_ValidationRules) error {

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestProperties_ValidationRules_ContentValidation
		err := contentValidation.AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_ValidationRules populates the provided destination WebTestProperties_ValidationRules from our WebTestProperties_ValidationRules
func (rules *WebTestProperties_ValidationRules) AssignProperties_To_WebTestProperties_ValidationRules(destination *v1beta20180501ps.WebTestProperties_ValidationRules) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v1beta20180501ps.WebTestProperties_ValidationRules_ContentValidation
		err := rules.ContentValidation.AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_ValidationRules_STATUS. Use v1api20180501preview.WebTestProperties_ValidationRules_STATUS instead
type WebTestProperties_ValidationRules_STATUS struct {
	ContentValidation             *WebTestProperties_ValidationRules_ContentValidation_STATUS `json:"ContentValidation,omitempty"`
	ExpectedHttpStatusCode        *int                                                        `json:"ExpectedHttpStatusCode,omitempty"`
	IgnoreHttpsStatusCode         *bool                                                       `json:"IgnoreHttpsStatusCode,omitempty"`
	SSLCertRemainingLifetimeCheck *int                                                        `json:"SSLCertRemainingLifetimeCheck,omitempty"`
	SSLCheck                      *bool                                                       `json:"SSLCheck,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_ValidationRules_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *WebTestProperties_ValidationRules_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_ValidationRules_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *WebTestProperties_ValidationRules_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_ValidationRules_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_ValidationRules_STATUS_ARM, got %T", armInput)
	}

	// Set property "ContentValidation":
	if typedInput.ContentValidation != nil {
		var contentValidation1 WebTestProperties_ValidationRules_ContentValidation_STATUS
		err := contentValidation1.PopulateFromARM(owner, *typedInput.ContentValidation)
		if err != nil {
			return err
		}
		contentValidation := contentValidation1
		rules.ContentValidation = &contentValidation
	}

	// Set property "ExpectedHttpStatusCode":
	if typedInput.ExpectedHttpStatusCode != nil {
		expectedHttpStatusCode := *typedInput.ExpectedHttpStatusCode
		rules.ExpectedHttpStatusCode = &expectedHttpStatusCode
	}

	// Set property "IgnoreHttpsStatusCode":
	if typedInput.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *typedInput.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	}

	// Set property "SSLCertRemainingLifetimeCheck":
	if typedInput.SSLCertRemainingLifetimeCheck != nil {
		sslCertRemainingLifetimeCheck := *typedInput.SSLCertRemainingLifetimeCheck
		rules.SSLCertRemainingLifetimeCheck = &sslCertRemainingLifetimeCheck
	}

	// Set property "SSLCheck":
	if typedInput.SSLCheck != nil {
		sslCheck := *typedInput.SSLCheck
		rules.SSLCheck = &sslCheck
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_ValidationRules_STATUS populates our WebTestProperties_ValidationRules_STATUS from the provided source WebTestProperties_ValidationRules_STATUS
func (rules *WebTestProperties_ValidationRules_STATUS) AssignProperties_From_WebTestProperties_ValidationRules_STATUS(source *v1beta20180501ps.WebTestProperties_ValidationRules_STATUS) error {

	// ContentValidation
	if source.ContentValidation != nil {
		var contentValidation WebTestProperties_ValidationRules_ContentValidation_STATUS
		err := contentValidation.AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation_STATUS(source.ContentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation_STATUS() to populate field ContentValidation")
		}
		rules.ContentValidation = &contentValidation
	} else {
		rules.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	rules.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(source.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if source.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *source.IgnoreHttpsStatusCode
		rules.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		rules.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	rules.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(source.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if source.SSLCheck != nil {
		sslCheck := *source.SSLCheck
		rules.SSLCheck = &sslCheck
	} else {
		rules.SSLCheck = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_ValidationRules_STATUS populates the provided destination WebTestProperties_ValidationRules_STATUS from our WebTestProperties_ValidationRules_STATUS
func (rules *WebTestProperties_ValidationRules_STATUS) AssignProperties_To_WebTestProperties_ValidationRules_STATUS(destination *v1beta20180501ps.WebTestProperties_ValidationRules_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentValidation
	if rules.ContentValidation != nil {
		var contentValidation v1beta20180501ps.WebTestProperties_ValidationRules_ContentValidation_STATUS
		err := rules.ContentValidation.AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation_STATUS(&contentValidation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation_STATUS() to populate field ContentValidation")
		}
		destination.ContentValidation = &contentValidation
	} else {
		destination.ContentValidation = nil
	}

	// ExpectedHttpStatusCode
	destination.ExpectedHttpStatusCode = genruntime.ClonePointerToInt(rules.ExpectedHttpStatusCode)

	// IgnoreHttpsStatusCode
	if rules.IgnoreHttpsStatusCode != nil {
		ignoreHttpsStatusCode := *rules.IgnoreHttpsStatusCode
		destination.IgnoreHttpsStatusCode = &ignoreHttpsStatusCode
	} else {
		destination.IgnoreHttpsStatusCode = nil
	}

	// SSLCertRemainingLifetimeCheck
	destination.SSLCertRemainingLifetimeCheck = genruntime.ClonePointerToInt(rules.SSLCertRemainingLifetimeCheck)

	// SSLCheck
	if rules.SSLCheck != nil {
		sslCheck := *rules.SSLCheck
		destination.SSLCheck = &sslCheck
	} else {
		destination.SSLCheck = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of HeaderField. Use v1api20180501preview.HeaderField instead
type HeaderField struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &HeaderField{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (field *HeaderField) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if field == nil {
		return nil, nil
	}
	result := &HeaderField_ARM{}

	// Set property "Key":
	if field.Key != nil {
		key := *field.Key
		result.Key = &key
	}

	// Set property "Value":
	if field.Value != nil {
		value := *field.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (field *HeaderField) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderField_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (field *HeaderField) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderField_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderField_ARM, got %T", armInput)
	}

	// Set property "Key":
	if typedInput.Key != nil {
		key := *typedInput.Key
		field.Key = &key
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		field.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_HeaderField populates our HeaderField from the provided source HeaderField
func (field *HeaderField) AssignProperties_From_HeaderField(source *v1beta20180501ps.HeaderField) error {

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_HeaderField populates the provided destination HeaderField from our HeaderField
func (field *HeaderField) AssignProperties_To_HeaderField(destination *v1beta20180501ps.HeaderField) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of HeaderField_STATUS. Use v1api20180501preview.HeaderField_STATUS instead
type HeaderField_STATUS struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &HeaderField_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (field *HeaderField_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderField_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (field *HeaderField_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderField_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderField_STATUS_ARM, got %T", armInput)
	}

	// Set property "Key":
	if typedInput.Key != nil {
		key := *typedInput.Key
		field.Key = &key
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		field.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_HeaderField_STATUS populates our HeaderField_STATUS from the provided source HeaderField_STATUS
func (field *HeaderField_STATUS) AssignProperties_From_HeaderField_STATUS(source *v1beta20180501ps.HeaderField_STATUS) error {

	// Key
	field.Key = genruntime.ClonePointerToString(source.Key)

	// Value
	field.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_HeaderField_STATUS populates the provided destination HeaderField_STATUS from our HeaderField_STATUS
func (field *HeaderField_STATUS) AssignProperties_To_HeaderField_STATUS(destination *v1beta20180501ps.HeaderField_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(field.Key)

	// Value
	destination.Value = genruntime.ClonePointerToString(field.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_ValidationRules_ContentValidation. Use v1api20180501preview.WebTestProperties_ValidationRules_ContentValidation instead
type WebTestProperties_ValidationRules_ContentValidation struct {
	ContentMatch    *string `json:"ContentMatch,omitempty"`
	IgnoreCase      *bool   `json:"IgnoreCase,omitempty"`
	PassIfTextFound *bool   `json:"PassIfTextFound,omitempty"`
}

var _ genruntime.ARMTransformer = &WebTestProperties_ValidationRules_ContentValidation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (validation *WebTestProperties_ValidationRules_ContentValidation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if validation == nil {
		return nil, nil
	}
	result := &WebTestProperties_ValidationRules_ContentValidation_ARM{}

	// Set property "ContentMatch":
	if validation.ContentMatch != nil {
		contentMatch := *validation.ContentMatch
		result.ContentMatch = &contentMatch
	}

	// Set property "IgnoreCase":
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		result.IgnoreCase = &ignoreCase
	}

	// Set property "PassIfTextFound":
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		result.PassIfTextFound = &passIfTextFound
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (validation *WebTestProperties_ValidationRules_ContentValidation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_ValidationRules_ContentValidation_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (validation *WebTestProperties_ValidationRules_ContentValidation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_ValidationRules_ContentValidation_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_ValidationRules_ContentValidation_ARM, got %T", armInput)
	}

	// Set property "ContentMatch":
	if typedInput.ContentMatch != nil {
		contentMatch := *typedInput.ContentMatch
		validation.ContentMatch = &contentMatch
	}

	// Set property "IgnoreCase":
	if typedInput.IgnoreCase != nil {
		ignoreCase := *typedInput.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	}

	// Set property "PassIfTextFound":
	if typedInput.PassIfTextFound != nil {
		passIfTextFound := *typedInput.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation populates our WebTestProperties_ValidationRules_ContentValidation from the provided source WebTestProperties_ValidationRules_ContentValidation
func (validation *WebTestProperties_ValidationRules_ContentValidation) AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation(source *v1beta20180501ps.WebTestProperties_ValidationRules_ContentValidation) error {

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation populates the provided destination WebTestProperties_ValidationRules_ContentValidation from our WebTestProperties_ValidationRules_ContentValidation
func (validation *WebTestProperties_ValidationRules_ContentValidation) AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation(destination *v1beta20180501ps.WebTestProperties_ValidationRules_ContentValidation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of WebTestProperties_ValidationRules_ContentValidation_STATUS. Use v1api20180501preview.WebTestProperties_ValidationRules_ContentValidation_STATUS instead
type WebTestProperties_ValidationRules_ContentValidation_STATUS struct {
	ContentMatch    *string `json:"ContentMatch,omitempty"`
	IgnoreCase      *bool   `json:"IgnoreCase,omitempty"`
	PassIfTextFound *bool   `json:"PassIfTextFound,omitempty"`
}

var _ genruntime.FromARMConverter = &WebTestProperties_ValidationRules_ContentValidation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (validation *WebTestProperties_ValidationRules_ContentValidation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebTestProperties_ValidationRules_ContentValidation_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (validation *WebTestProperties_ValidationRules_ContentValidation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebTestProperties_ValidationRules_ContentValidation_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebTestProperties_ValidationRules_ContentValidation_STATUS_ARM, got %T", armInput)
	}

	// Set property "ContentMatch":
	if typedInput.ContentMatch != nil {
		contentMatch := *typedInput.ContentMatch
		validation.ContentMatch = &contentMatch
	}

	// Set property "IgnoreCase":
	if typedInput.IgnoreCase != nil {
		ignoreCase := *typedInput.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	}

	// Set property "PassIfTextFound":
	if typedInput.PassIfTextFound != nil {
		passIfTextFound := *typedInput.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	}

	// No error
	return nil
}

// AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation_STATUS populates our WebTestProperties_ValidationRules_ContentValidation_STATUS from the provided source WebTestProperties_ValidationRules_ContentValidation_STATUS
func (validation *WebTestProperties_ValidationRules_ContentValidation_STATUS) AssignProperties_From_WebTestProperties_ValidationRules_ContentValidation_STATUS(source *v1beta20180501ps.WebTestProperties_ValidationRules_ContentValidation_STATUS) error {

	// ContentMatch
	validation.ContentMatch = genruntime.ClonePointerToString(source.ContentMatch)

	// IgnoreCase
	if source.IgnoreCase != nil {
		ignoreCase := *source.IgnoreCase
		validation.IgnoreCase = &ignoreCase
	} else {
		validation.IgnoreCase = nil
	}

	// PassIfTextFound
	if source.PassIfTextFound != nil {
		passIfTextFound := *source.PassIfTextFound
		validation.PassIfTextFound = &passIfTextFound
	} else {
		validation.PassIfTextFound = nil
	}

	// No error
	return nil
}

// AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation_STATUS populates the provided destination WebTestProperties_ValidationRules_ContentValidation_STATUS from our WebTestProperties_ValidationRules_ContentValidation_STATUS
func (validation *WebTestProperties_ValidationRules_ContentValidation_STATUS) AssignProperties_To_WebTestProperties_ValidationRules_ContentValidation_STATUS(destination *v1beta20180501ps.WebTestProperties_ValidationRules_ContentValidation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContentMatch
	destination.ContentMatch = genruntime.ClonePointerToString(validation.ContentMatch)

	// IgnoreCase
	if validation.IgnoreCase != nil {
		ignoreCase := *validation.IgnoreCase
		destination.IgnoreCase = &ignoreCase
	} else {
		destination.IgnoreCase = nil
	}

	// PassIfTextFound
	if validation.PassIfTextFound != nil {
		passIfTextFound := *validation.PassIfTextFound
		destination.PassIfTextFound = &passIfTextFound
	} else {
		destination.PassIfTextFound = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Webtest{}, &WebtestList{})
}
