// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PricingPlanProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PricingPlanProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPricingPlanProperties_STATUS, PricingPlanProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPricingPlanProperties_STATUS runs a test to see if a specific instance of PricingPlanProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPricingPlanProperties_STATUS(subject PricingPlanProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PricingPlanProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PricingPlanProperties_STATUS instances for property testing - lazily instantiated by
// PricingPlanProperties_STATUSGenerator()
var pricingPlanProperties_STATUSGenerator gopter.Gen

// PricingPlanProperties_STATUSGenerator returns a generator of PricingPlanProperties_STATUS instances for property testing.
func PricingPlanProperties_STATUSGenerator() gopter.Gen {
	if pricingPlanProperties_STATUSGenerator != nil {
		return pricingPlanProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPricingPlanProperties_STATUS(generators)
	pricingPlanProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(PricingPlanProperties_STATUS{}), generators)

	return pricingPlanProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPricingPlanProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPricingPlanProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Cap"] = gen.PtrOf(gen.Float64())
	gens["MaxHistoryCap"] = gen.PtrOf(gen.Float64())
	gens["PlanType"] = gen.PtrOf(gen.AlphaString())
	gens["ResetHour"] = gen.PtrOf(gen.Int())
	gens["StopSendNotificationWhenHitCap"] = gen.PtrOf(gen.Bool())
	gens["StopSendNotificationWhenHitThreshold"] = gen.PtrOf(gen.Bool())
	gens["WarningThreshold"] = gen.PtrOf(gen.Int())
}

func Test_PricingPlan_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PricingPlan_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPricingPlan_STATUS, PricingPlan_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPricingPlan_STATUS runs a test to see if a specific instance of PricingPlan_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPricingPlan_STATUS(subject PricingPlan_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PricingPlan_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PricingPlan_STATUS instances for property testing - lazily instantiated by PricingPlan_STATUSGenerator()
var pricingPlan_STATUSGenerator gopter.Gen

// PricingPlan_STATUSGenerator returns a generator of PricingPlan_STATUS instances for property testing.
// We first initialize pricingPlan_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PricingPlan_STATUSGenerator() gopter.Gen {
	if pricingPlan_STATUSGenerator != nil {
		return pricingPlan_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPricingPlan_STATUS(generators)
	pricingPlan_STATUSGenerator = gen.Struct(reflect.TypeOf(PricingPlan_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPricingPlan_STATUS(generators)
	AddRelatedPropertyGeneratorsForPricingPlan_STATUS(generators)
	pricingPlan_STATUSGenerator = gen.Struct(reflect.TypeOf(PricingPlan_STATUS{}), generators)

	return pricingPlan_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPricingPlan_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPricingPlan_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPricingPlan_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPricingPlan_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PricingPlanProperties_STATUSGenerator())
}
