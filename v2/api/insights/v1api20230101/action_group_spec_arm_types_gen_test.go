// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ActionGroupSpec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ActionGroupSpec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForActionGroupSpec_ARM, ActionGroupSpec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForActionGroupSpec_ARM runs a test to see if a specific instance of ActionGroupSpec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForActionGroupSpec_ARM(subject ActionGroupSpec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ActionGroupSpec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ActionGroupSpec_ARM instances for property testing - lazily instantiated by
// ActionGroupSpec_ARMGenerator()
var actionGroupSpec_ARMGenerator gopter.Gen

// ActionGroupSpec_ARMGenerator returns a generator of ActionGroupSpec_ARM instances for property testing.
// We first initialize actionGroupSpec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ActionGroupSpec_ARMGenerator() gopter.Gen {
	if actionGroupSpec_ARMGenerator != nil {
		return actionGroupSpec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActionGroupSpec_ARM(generators)
	actionGroupSpec_ARMGenerator = gen.Struct(reflect.TypeOf(ActionGroupSpec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActionGroupSpec_ARM(generators)
	AddRelatedPropertyGeneratorsForActionGroupSpec_ARM(generators)
	actionGroupSpec_ARMGenerator = gen.Struct(reflect.TypeOf(ActionGroupSpec_ARM{}), generators)

	return actionGroupSpec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForActionGroupSpec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForActionGroupSpec_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GroupShortName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForActionGroupSpec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForActionGroupSpec_ARM(gens map[string]gopter.Gen) {
	gens["ArmRoleReceivers"] = gen.SliceOf(ArmRoleReceiver_ARMGenerator())
	gens["AutomationRunbookReceivers"] = gen.SliceOf(AutomationRunbookReceiver_ARMGenerator())
	gens["AzureAppPushReceivers"] = gen.SliceOf(AzureAppPushReceiver_ARMGenerator())
	gens["AzureFunctionReceivers"] = gen.SliceOf(AzureFunctionReceiver_ARMGenerator())
	gens["EmailReceivers"] = gen.SliceOf(EmailReceiver_ARMGenerator())
	gens["EventHubReceivers"] = gen.SliceOf(EventHubReceiver_ARMGenerator())
	gens["ItsmReceivers"] = gen.SliceOf(ItsmReceiver_ARMGenerator())
	gens["LogicAppReceivers"] = gen.SliceOf(LogicAppReceiver_ARMGenerator())
	gens["SmsReceivers"] = gen.SliceOf(SmsReceiver_ARMGenerator())
	gens["VoiceReceivers"] = gen.SliceOf(VoiceReceiver_ARMGenerator())
	gens["WebhookReceivers"] = gen.SliceOf(WebhookReceiver_ARMGenerator())
}

func Test_ActionGroup_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ActionGroup_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForActionGroup_Spec_ARM, ActionGroup_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForActionGroup_Spec_ARM runs a test to see if a specific instance of ActionGroup_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForActionGroup_Spec_ARM(subject ActionGroup_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ActionGroup_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ActionGroup_Spec_ARM instances for property testing - lazily instantiated by
// ActionGroup_Spec_ARMGenerator()
var actionGroup_Spec_ARMGenerator gopter.Gen

// ActionGroup_Spec_ARMGenerator returns a generator of ActionGroup_Spec_ARM instances for property testing.
// We first initialize actionGroup_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ActionGroup_Spec_ARMGenerator() gopter.Gen {
	if actionGroup_Spec_ARMGenerator != nil {
		return actionGroup_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActionGroup_Spec_ARM(generators)
	actionGroup_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ActionGroup_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActionGroup_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForActionGroup_Spec_ARM(generators)
	actionGroup_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ActionGroup_Spec_ARM{}), generators)

	return actionGroup_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForActionGroup_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForActionGroup_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForActionGroup_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForActionGroup_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ActionGroupSpec_ARMGenerator())
}

func Test_ArmRoleReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ArmRoleReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForArmRoleReceiver_ARM, ArmRoleReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForArmRoleReceiver_ARM runs a test to see if a specific instance of ArmRoleReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForArmRoleReceiver_ARM(subject ArmRoleReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ArmRoleReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ArmRoleReceiver_ARM instances for property testing - lazily instantiated by
// ArmRoleReceiver_ARMGenerator()
var armRoleReceiver_ARMGenerator gopter.Gen

// ArmRoleReceiver_ARMGenerator returns a generator of ArmRoleReceiver_ARM instances for property testing.
func ArmRoleReceiver_ARMGenerator() gopter.Gen {
	if armRoleReceiver_ARMGenerator != nil {
		return armRoleReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForArmRoleReceiver_ARM(generators)
	armRoleReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(ArmRoleReceiver_ARM{}), generators)

	return armRoleReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForArmRoleReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForArmRoleReceiver_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RoleId"] = gen.PtrOf(gen.AlphaString())
	gens["UseCommonAlertSchema"] = gen.PtrOf(gen.Bool())
}

func Test_AutomationRunbookReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomationRunbookReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomationRunbookReceiver_ARM, AutomationRunbookReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomationRunbookReceiver_ARM runs a test to see if a specific instance of AutomationRunbookReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomationRunbookReceiver_ARM(subject AutomationRunbookReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomationRunbookReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomationRunbookReceiver_ARM instances for property testing - lazily instantiated by
// AutomationRunbookReceiver_ARMGenerator()
var automationRunbookReceiver_ARMGenerator gopter.Gen

// AutomationRunbookReceiver_ARMGenerator returns a generator of AutomationRunbookReceiver_ARM instances for property testing.
func AutomationRunbookReceiver_ARMGenerator() gopter.Gen {
	if automationRunbookReceiver_ARMGenerator != nil {
		return automationRunbookReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomationRunbookReceiver_ARM(generators)
	automationRunbookReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(AutomationRunbookReceiver_ARM{}), generators)

	return automationRunbookReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomationRunbookReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomationRunbookReceiver_ARM(gens map[string]gopter.Gen) {
	gens["AutomationAccountId"] = gen.PtrOf(gen.AlphaString())
	gens["IsGlobalRunbook"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RunbookName"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceUri"] = gen.PtrOf(gen.AlphaString())
	gens["UseCommonAlertSchema"] = gen.PtrOf(gen.Bool())
	gens["WebhookResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_AzureAppPushReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureAppPushReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureAppPushReceiver_ARM, AzureAppPushReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureAppPushReceiver_ARM runs a test to see if a specific instance of AzureAppPushReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureAppPushReceiver_ARM(subject AzureAppPushReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureAppPushReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureAppPushReceiver_ARM instances for property testing - lazily instantiated by
// AzureAppPushReceiver_ARMGenerator()
var azureAppPushReceiver_ARMGenerator gopter.Gen

// AzureAppPushReceiver_ARMGenerator returns a generator of AzureAppPushReceiver_ARM instances for property testing.
func AzureAppPushReceiver_ARMGenerator() gopter.Gen {
	if azureAppPushReceiver_ARMGenerator != nil {
		return azureAppPushReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureAppPushReceiver_ARM(generators)
	azureAppPushReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(AzureAppPushReceiver_ARM{}), generators)

	return azureAppPushReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureAppPushReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureAppPushReceiver_ARM(gens map[string]gopter.Gen) {
	gens["EmailAddress"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_AzureFunctionReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureFunctionReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureFunctionReceiver_ARM, AzureFunctionReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureFunctionReceiver_ARM runs a test to see if a specific instance of AzureFunctionReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureFunctionReceiver_ARM(subject AzureFunctionReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureFunctionReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureFunctionReceiver_ARM instances for property testing - lazily instantiated by
// AzureFunctionReceiver_ARMGenerator()
var azureFunctionReceiver_ARMGenerator gopter.Gen

// AzureFunctionReceiver_ARMGenerator returns a generator of AzureFunctionReceiver_ARM instances for property testing.
func AzureFunctionReceiver_ARMGenerator() gopter.Gen {
	if azureFunctionReceiver_ARMGenerator != nil {
		return azureFunctionReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFunctionReceiver_ARM(generators)
	azureFunctionReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(AzureFunctionReceiver_ARM{}), generators)

	return azureFunctionReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureFunctionReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureFunctionReceiver_ARM(gens map[string]gopter.Gen) {
	gens["FunctionAppResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["FunctionName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpTriggerUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["UseCommonAlertSchema"] = gen.PtrOf(gen.Bool())
}

func Test_EmailReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EmailReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEmailReceiver_ARM, EmailReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEmailReceiver_ARM runs a test to see if a specific instance of EmailReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEmailReceiver_ARM(subject EmailReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EmailReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EmailReceiver_ARM instances for property testing - lazily instantiated by EmailReceiver_ARMGenerator()
var emailReceiver_ARMGenerator gopter.Gen

// EmailReceiver_ARMGenerator returns a generator of EmailReceiver_ARM instances for property testing.
func EmailReceiver_ARMGenerator() gopter.Gen {
	if emailReceiver_ARMGenerator != nil {
		return emailReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEmailReceiver_ARM(generators)
	emailReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(EmailReceiver_ARM{}), generators)

	return emailReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEmailReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEmailReceiver_ARM(gens map[string]gopter.Gen) {
	gens["EmailAddress"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["UseCommonAlertSchema"] = gen.PtrOf(gen.Bool())
}

func Test_EventHubReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventHubReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventHubReceiver_ARM, EventHubReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventHubReceiver_ARM runs a test to see if a specific instance of EventHubReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventHubReceiver_ARM(subject EventHubReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventHubReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventHubReceiver_ARM instances for property testing - lazily instantiated by
// EventHubReceiver_ARMGenerator()
var eventHubReceiver_ARMGenerator gopter.Gen

// EventHubReceiver_ARMGenerator returns a generator of EventHubReceiver_ARM instances for property testing.
func EventHubReceiver_ARMGenerator() gopter.Gen {
	if eventHubReceiver_ARMGenerator != nil {
		return eventHubReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventHubReceiver_ARM(generators)
	eventHubReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(EventHubReceiver_ARM{}), generators)

	return eventHubReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEventHubReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventHubReceiver_ARM(gens map[string]gopter.Gen) {
	gens["EventHubName"] = gen.PtrOf(gen.AlphaString())
	gens["EventHubNameSpace"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["UseCommonAlertSchema"] = gen.PtrOf(gen.Bool())
}

func Test_ItsmReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ItsmReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForItsmReceiver_ARM, ItsmReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForItsmReceiver_ARM runs a test to see if a specific instance of ItsmReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForItsmReceiver_ARM(subject ItsmReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ItsmReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ItsmReceiver_ARM instances for property testing - lazily instantiated by ItsmReceiver_ARMGenerator()
var itsmReceiver_ARMGenerator gopter.Gen

// ItsmReceiver_ARMGenerator returns a generator of ItsmReceiver_ARM instances for property testing.
func ItsmReceiver_ARMGenerator() gopter.Gen {
	if itsmReceiver_ARMGenerator != nil {
		return itsmReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForItsmReceiver_ARM(generators)
	itsmReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(ItsmReceiver_ARM{}), generators)

	return itsmReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForItsmReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForItsmReceiver_ARM(gens map[string]gopter.Gen) {
	gens["ConnectionId"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Region"] = gen.PtrOf(gen.AlphaString())
	gens["TicketConfiguration"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_LogicAppReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogicAppReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogicAppReceiver_ARM, LogicAppReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogicAppReceiver_ARM runs a test to see if a specific instance of LogicAppReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLogicAppReceiver_ARM(subject LogicAppReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogicAppReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogicAppReceiver_ARM instances for property testing - lazily instantiated by
// LogicAppReceiver_ARMGenerator()
var logicAppReceiver_ARMGenerator gopter.Gen

// LogicAppReceiver_ARMGenerator returns a generator of LogicAppReceiver_ARM instances for property testing.
func LogicAppReceiver_ARMGenerator() gopter.Gen {
	if logicAppReceiver_ARMGenerator != nil {
		return logicAppReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogicAppReceiver_ARM(generators)
	logicAppReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(LogicAppReceiver_ARM{}), generators)

	return logicAppReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLogicAppReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogicAppReceiver_ARM(gens map[string]gopter.Gen) {
	gens["CallbackUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["UseCommonAlertSchema"] = gen.PtrOf(gen.Bool())
}

func Test_SmsReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SmsReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSmsReceiver_ARM, SmsReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSmsReceiver_ARM runs a test to see if a specific instance of SmsReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSmsReceiver_ARM(subject SmsReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SmsReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SmsReceiver_ARM instances for property testing - lazily instantiated by SmsReceiver_ARMGenerator()
var smsReceiver_ARMGenerator gopter.Gen

// SmsReceiver_ARMGenerator returns a generator of SmsReceiver_ARM instances for property testing.
func SmsReceiver_ARMGenerator() gopter.Gen {
	if smsReceiver_ARMGenerator != nil {
		return smsReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSmsReceiver_ARM(generators)
	smsReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(SmsReceiver_ARM{}), generators)

	return smsReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSmsReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSmsReceiver_ARM(gens map[string]gopter.Gen) {
	gens["CountryCode"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PhoneNumber"] = gen.PtrOf(gen.AlphaString())
}

func Test_VoiceReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VoiceReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVoiceReceiver_ARM, VoiceReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVoiceReceiver_ARM runs a test to see if a specific instance of VoiceReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVoiceReceiver_ARM(subject VoiceReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VoiceReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VoiceReceiver_ARM instances for property testing - lazily instantiated by VoiceReceiver_ARMGenerator()
var voiceReceiver_ARMGenerator gopter.Gen

// VoiceReceiver_ARMGenerator returns a generator of VoiceReceiver_ARM instances for property testing.
func VoiceReceiver_ARMGenerator() gopter.Gen {
	if voiceReceiver_ARMGenerator != nil {
		return voiceReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVoiceReceiver_ARM(generators)
	voiceReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(VoiceReceiver_ARM{}), generators)

	return voiceReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVoiceReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVoiceReceiver_ARM(gens map[string]gopter.Gen) {
	gens["CountryCode"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PhoneNumber"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebhookReceiver_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebhookReceiver_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebhookReceiver_ARM, WebhookReceiver_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebhookReceiver_ARM runs a test to see if a specific instance of WebhookReceiver_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebhookReceiver_ARM(subject WebhookReceiver_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebhookReceiver_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebhookReceiver_ARM instances for property testing - lazily instantiated by
// WebhookReceiver_ARMGenerator()
var webhookReceiver_ARMGenerator gopter.Gen

// WebhookReceiver_ARMGenerator returns a generator of WebhookReceiver_ARM instances for property testing.
func WebhookReceiver_ARMGenerator() gopter.Gen {
	if webhookReceiver_ARMGenerator != nil {
		return webhookReceiver_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebhookReceiver_ARM(generators)
	webhookReceiver_ARMGenerator = gen.Struct(reflect.TypeOf(WebhookReceiver_ARM{}), generators)

	return webhookReceiver_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebhookReceiver_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebhookReceiver_ARM(gens map[string]gopter.Gen) {
	gens["IdentifierUri"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceUri"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["UseAadAuth"] = gen.PtrOf(gen.Bool())
	gens["UseCommonAlertSchema"] = gen.PtrOf(gen.Bool())
}
