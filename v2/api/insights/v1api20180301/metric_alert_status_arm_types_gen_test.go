// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20180301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MetricAlert_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricAlert_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricAlert_STATUS_ARM, MetricAlert_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricAlert_STATUS_ARM runs a test to see if a specific instance of MetricAlert_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricAlert_STATUS_ARM(subject MetricAlert_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricAlert_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricAlert_STATUS_ARM instances for property testing - lazily instantiated by
// MetricAlert_STATUS_ARMGenerator()
var metricAlert_STATUS_ARMGenerator gopter.Gen

// MetricAlert_STATUS_ARMGenerator returns a generator of MetricAlert_STATUS_ARM instances for property testing.
// We first initialize metricAlert_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MetricAlert_STATUS_ARMGenerator() gopter.Gen {
	if metricAlert_STATUS_ARMGenerator != nil {
		return metricAlert_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlert_STATUS_ARM(generators)
	metricAlert_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlert_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlert_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMetricAlert_STATUS_ARM(generators)
	metricAlert_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlert_STATUS_ARM{}), generators)

	return metricAlert_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricAlert_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricAlert_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMetricAlert_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricAlert_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MetricAlertProperties_STATUS_ARMGenerator())
}

func Test_MetricAlertProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricAlertProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricAlertProperties_STATUS_ARM, MetricAlertProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricAlertProperties_STATUS_ARM runs a test to see if a specific instance of MetricAlertProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricAlertProperties_STATUS_ARM(subject MetricAlertProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricAlertProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricAlertProperties_STATUS_ARM instances for property testing - lazily instantiated by
// MetricAlertProperties_STATUS_ARMGenerator()
var metricAlertProperties_STATUS_ARMGenerator gopter.Gen

// MetricAlertProperties_STATUS_ARMGenerator returns a generator of MetricAlertProperties_STATUS_ARM instances for property testing.
// We first initialize metricAlertProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MetricAlertProperties_STATUS_ARMGenerator() gopter.Gen {
	if metricAlertProperties_STATUS_ARMGenerator != nil {
		return metricAlertProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlertProperties_STATUS_ARM(generators)
	metricAlertProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlertProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlertProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMetricAlertProperties_STATUS_ARM(generators)
	metricAlertProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlertProperties_STATUS_ARM{}), generators)

	return metricAlertProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricAlertProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricAlertProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoMitigate"] = gen.PtrOf(gen.Bool())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["EvaluationFrequency"] = gen.PtrOf(gen.AlphaString())
	gens["IsMigrated"] = gen.PtrOf(gen.Bool())
	gens["LastUpdatedTime"] = gen.PtrOf(gen.AlphaString())
	gens["Scopes"] = gen.SliceOf(gen.AlphaString())
	gens["Severity"] = gen.PtrOf(gen.Int())
	gens["TargetResourceRegion"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["WindowSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMetricAlertProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricAlertProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(MetricAlertAction_STATUS_ARMGenerator())
	gens["Criteria"] = gen.PtrOf(MetricAlertCriteria_STATUS_ARMGenerator())
}

func Test_MetricAlertAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricAlertAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricAlertAction_STATUS_ARM, MetricAlertAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricAlertAction_STATUS_ARM runs a test to see if a specific instance of MetricAlertAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricAlertAction_STATUS_ARM(subject MetricAlertAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricAlertAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricAlertAction_STATUS_ARM instances for property testing - lazily instantiated by
// MetricAlertAction_STATUS_ARMGenerator()
var metricAlertAction_STATUS_ARMGenerator gopter.Gen

// MetricAlertAction_STATUS_ARMGenerator returns a generator of MetricAlertAction_STATUS_ARM instances for property testing.
func MetricAlertAction_STATUS_ARMGenerator() gopter.Gen {
	if metricAlertAction_STATUS_ARMGenerator != nil {
		return metricAlertAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlertAction_STATUS_ARM(generators)
	metricAlertAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlertAction_STATUS_ARM{}), generators)

	return metricAlertAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricAlertAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricAlertAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["WebHookProperties"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

func Test_MetricAlertCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricAlertCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricAlertCriteria_STATUS_ARM, MetricAlertCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricAlertCriteria_STATUS_ARM runs a test to see if a specific instance of MetricAlertCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricAlertCriteria_STATUS_ARM(subject MetricAlertCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricAlertCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricAlertCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// MetricAlertCriteria_STATUS_ARMGenerator()
var metricAlertCriteria_STATUS_ARMGenerator gopter.Gen

// MetricAlertCriteria_STATUS_ARMGenerator returns a generator of MetricAlertCriteria_STATUS_ARM instances for property testing.
func MetricAlertCriteria_STATUS_ARMGenerator() gopter.Gen {
	if metricAlertCriteria_STATUS_ARMGenerator != nil {
		return metricAlertCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMetricAlertCriteria_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(MetricAlertCriteria_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	metricAlertCriteria_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return metricAlertCriteria_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForMetricAlertCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricAlertCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MicrosoftAzureMonitorMultipleResourceMultipleMetric"] = MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator().Map(func(it MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM) *MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["MicrosoftAzureMonitorSingleResourceMultipleMetric"] = MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator().Map(func(it MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM) *MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["MicrosoftAzureMonitorWebtestLocationAvailability"] = WebtestLocationAvailabilityCriteria_STATUS_ARMGenerator().Map(func(it WebtestLocationAvailabilityCriteria_STATUS_ARM) *WebtestLocationAvailabilityCriteria_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM, MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM runs a test to see if a specific instance of MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM(subject MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM instances for property testing - lazily
// instantiated by MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator()
var metricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator gopter.Gen

// MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator returns a generator of MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM instances for property testing.
// We first initialize metricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator() gopter.Gen {
	if metricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator != nil {
		return metricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM(generators)
	metricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM(generators)
	metricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM{}), generators)

	return metricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OdataType"] = gen.OneConstOf(MetricAlertMultipleResourceMultipleMetricCriteria_OdataType_STATUS_MicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria)
}

// AddRelatedPropertyGeneratorsForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricAlertMultipleResourceMultipleMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllOf"] = gen.SliceOf(MultiMetricCriteria_STATUS_ARMGenerator())
}

func Test_MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM, MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM runs a test to see if a specific instance of MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM(subject MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM instances for property testing - lazily
// instantiated by MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator()
var metricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator gopter.Gen

// MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator returns a generator of MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM instances for property testing.
// We first initialize metricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator() gopter.Gen {
	if metricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator != nil {
		return metricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM(generators)
	metricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM(generators)
	metricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM{}), generators)

	return metricAlertSingleResourceMultipleMetricCriteria_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OdataType"] = gen.OneConstOf(MetricAlertSingleResourceMultipleMetricCriteria_OdataType_STATUS_MicrosoftAzureMonitorSingleResourceMultipleMetricCriteria)
}

// AddRelatedPropertyGeneratorsForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricAlertSingleResourceMultipleMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllOf"] = gen.SliceOf(MetricCriteria_STATUS_ARMGenerator())
}

func Test_WebtestLocationAvailabilityCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebtestLocationAvailabilityCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebtestLocationAvailabilityCriteria_STATUS_ARM, WebtestLocationAvailabilityCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebtestLocationAvailabilityCriteria_STATUS_ARM runs a test to see if a specific instance of WebtestLocationAvailabilityCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebtestLocationAvailabilityCriteria_STATUS_ARM(subject WebtestLocationAvailabilityCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebtestLocationAvailabilityCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebtestLocationAvailabilityCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// WebtestLocationAvailabilityCriteria_STATUS_ARMGenerator()
var webtestLocationAvailabilityCriteria_STATUS_ARMGenerator gopter.Gen

// WebtestLocationAvailabilityCriteria_STATUS_ARMGenerator returns a generator of WebtestLocationAvailabilityCriteria_STATUS_ARM instances for property testing.
func WebtestLocationAvailabilityCriteria_STATUS_ARMGenerator() gopter.Gen {
	if webtestLocationAvailabilityCriteria_STATUS_ARMGenerator != nil {
		return webtestLocationAvailabilityCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebtestLocationAvailabilityCriteria_STATUS_ARM(generators)
	webtestLocationAvailabilityCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WebtestLocationAvailabilityCriteria_STATUS_ARM{}), generators)

	return webtestLocationAvailabilityCriteria_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebtestLocationAvailabilityCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebtestLocationAvailabilityCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComponentId"] = gen.PtrOf(gen.AlphaString())
	gens["FailedLocationCount"] = gen.PtrOf(gen.Float64())
	gens["OdataType"] = gen.OneConstOf(WebtestLocationAvailabilityCriteria_OdataType_STATUS_MicrosoftAzureMonitorWebtestLocationAvailabilityCriteria)
	gens["WebTestId"] = gen.PtrOf(gen.AlphaString())
}

func Test_MetricCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricCriteria_STATUS_ARM, MetricCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricCriteria_STATUS_ARM runs a test to see if a specific instance of MetricCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricCriteria_STATUS_ARM(subject MetricCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// MetricCriteria_STATUS_ARMGenerator()
var metricCriteria_STATUS_ARMGenerator gopter.Gen

// MetricCriteria_STATUS_ARMGenerator returns a generator of MetricCriteria_STATUS_ARM instances for property testing.
// We first initialize metricCriteria_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MetricCriteria_STATUS_ARMGenerator() gopter.Gen {
	if metricCriteria_STATUS_ARMGenerator != nil {
		return metricCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricCriteria_STATUS_ARM(generators)
	metricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricCriteria_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricCriteria_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMetricCriteria_STATUS_ARM(generators)
	metricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricCriteria_STATUS_ARM{}), generators)

	return metricCriteria_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CriterionType"] = gen.OneConstOf(MetricCriteria_CriterionType_STATUS_StaticThresholdCriterion)
	gens["MetricName"] = gen.PtrOf(gen.AlphaString())
	gens["MetricNamespace"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		MetricCriteria_Operator_STATUS_Equals,
		MetricCriteria_Operator_STATUS_GreaterThan,
		MetricCriteria_Operator_STATUS_GreaterThanOrEqual,
		MetricCriteria_Operator_STATUS_LessThan,
		MetricCriteria_Operator_STATUS_LessThanOrEqual))
	gens["SkipMetricValidation"] = gen.PtrOf(gen.Bool())
	gens["Threshold"] = gen.PtrOf(gen.Float64())
	gens["TimeAggregation"] = gen.PtrOf(gen.OneConstOf(
		MetricCriteria_TimeAggregation_STATUS_Average,
		MetricCriteria_TimeAggregation_STATUS_Count,
		MetricCriteria_TimeAggregation_STATUS_Maximum,
		MetricCriteria_TimeAggregation_STATUS_Minimum,
		MetricCriteria_TimeAggregation_STATUS_Total))
}

// AddRelatedPropertyGeneratorsForMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Dimensions"] = gen.SliceOf(MetricDimension_STATUS_ARMGenerator())
}

func Test_MultiMetricCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MultiMetricCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMultiMetricCriteria_STATUS_ARM, MultiMetricCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMultiMetricCriteria_STATUS_ARM runs a test to see if a specific instance of MultiMetricCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMultiMetricCriteria_STATUS_ARM(subject MultiMetricCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MultiMetricCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MultiMetricCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// MultiMetricCriteria_STATUS_ARMGenerator()
var multiMetricCriteria_STATUS_ARMGenerator gopter.Gen

// MultiMetricCriteria_STATUS_ARMGenerator returns a generator of MultiMetricCriteria_STATUS_ARM instances for property testing.
func MultiMetricCriteria_STATUS_ARMGenerator() gopter.Gen {
	if multiMetricCriteria_STATUS_ARMGenerator != nil {
		return multiMetricCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMultiMetricCriteria_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(MultiMetricCriteria_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	multiMetricCriteria_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return multiMetricCriteria_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForMultiMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMultiMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Dynamic"] = DynamicMetricCriteria_STATUS_ARMGenerator().Map(func(it DynamicMetricCriteria_STATUS_ARM) *DynamicMetricCriteria_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["Static"] = MetricCriteria_STATUS_ARMGenerator().Map(func(it MetricCriteria_STATUS_ARM) *MetricCriteria_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_DynamicMetricCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DynamicMetricCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDynamicMetricCriteria_STATUS_ARM, DynamicMetricCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDynamicMetricCriteria_STATUS_ARM runs a test to see if a specific instance of DynamicMetricCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDynamicMetricCriteria_STATUS_ARM(subject DynamicMetricCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DynamicMetricCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DynamicMetricCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// DynamicMetricCriteria_STATUS_ARMGenerator()
var dynamicMetricCriteria_STATUS_ARMGenerator gopter.Gen

// DynamicMetricCriteria_STATUS_ARMGenerator returns a generator of DynamicMetricCriteria_STATUS_ARM instances for property testing.
// We first initialize dynamicMetricCriteria_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DynamicMetricCriteria_STATUS_ARMGenerator() gopter.Gen {
	if dynamicMetricCriteria_STATUS_ARMGenerator != nil {
		return dynamicMetricCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDynamicMetricCriteria_STATUS_ARM(generators)
	dynamicMetricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DynamicMetricCriteria_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDynamicMetricCriteria_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDynamicMetricCriteria_STATUS_ARM(generators)
	dynamicMetricCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DynamicMetricCriteria_STATUS_ARM{}), generators)

	return dynamicMetricCriteria_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDynamicMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDynamicMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AlertSensitivity"] = gen.PtrOf(gen.OneConstOf(DynamicMetricCriteria_AlertSensitivity_STATUS_High, DynamicMetricCriteria_AlertSensitivity_STATUS_Low, DynamicMetricCriteria_AlertSensitivity_STATUS_Medium))
	gens["CriterionType"] = gen.OneConstOf(DynamicMetricCriteria_CriterionType_STATUS_DynamicThresholdCriterion)
	gens["IgnoreDataBefore"] = gen.PtrOf(gen.AlphaString())
	gens["MetricName"] = gen.PtrOf(gen.AlphaString())
	gens["MetricNamespace"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(DynamicMetricCriteria_Operator_STATUS_GreaterOrLessThan, DynamicMetricCriteria_Operator_STATUS_GreaterThan, DynamicMetricCriteria_Operator_STATUS_LessThan))
	gens["SkipMetricValidation"] = gen.PtrOf(gen.Bool())
	gens["TimeAggregation"] = gen.PtrOf(gen.OneConstOf(
		DynamicMetricCriteria_TimeAggregation_STATUS_Average,
		DynamicMetricCriteria_TimeAggregation_STATUS_Count,
		DynamicMetricCriteria_TimeAggregation_STATUS_Maximum,
		DynamicMetricCriteria_TimeAggregation_STATUS_Minimum,
		DynamicMetricCriteria_TimeAggregation_STATUS_Total))
}

// AddRelatedPropertyGeneratorsForDynamicMetricCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDynamicMetricCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Dimensions"] = gen.SliceOf(MetricDimension_STATUS_ARMGenerator())
	gens["FailingPeriods"] = gen.PtrOf(DynamicThresholdFailingPeriods_STATUS_ARMGenerator())
}

func Test_MetricDimension_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MetricDimension_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetricDimension_STATUS_ARM, MetricDimension_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetricDimension_STATUS_ARM runs a test to see if a specific instance of MetricDimension_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetricDimension_STATUS_ARM(subject MetricDimension_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MetricDimension_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MetricDimension_STATUS_ARM instances for property testing - lazily instantiated by
// MetricDimension_STATUS_ARMGenerator()
var metricDimension_STATUS_ARMGenerator gopter.Gen

// MetricDimension_STATUS_ARMGenerator returns a generator of MetricDimension_STATUS_ARM instances for property testing.
func MetricDimension_STATUS_ARMGenerator() gopter.Gen {
	if metricDimension_STATUS_ARMGenerator != nil {
		return metricDimension_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetricDimension_STATUS_ARM(generators)
	metricDimension_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MetricDimension_STATUS_ARM{}), generators)

	return metricDimension_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetricDimension_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetricDimension_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Operator"] = gen.PtrOf(gen.AlphaString())
	gens["Values"] = gen.SliceOf(gen.AlphaString())
}

func Test_DynamicThresholdFailingPeriods_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DynamicThresholdFailingPeriods_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDynamicThresholdFailingPeriods_STATUS_ARM, DynamicThresholdFailingPeriods_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDynamicThresholdFailingPeriods_STATUS_ARM runs a test to see if a specific instance of DynamicThresholdFailingPeriods_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDynamicThresholdFailingPeriods_STATUS_ARM(subject DynamicThresholdFailingPeriods_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DynamicThresholdFailingPeriods_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DynamicThresholdFailingPeriods_STATUS_ARM instances for property testing - lazily instantiated by
// DynamicThresholdFailingPeriods_STATUS_ARMGenerator()
var dynamicThresholdFailingPeriods_STATUS_ARMGenerator gopter.Gen

// DynamicThresholdFailingPeriods_STATUS_ARMGenerator returns a generator of DynamicThresholdFailingPeriods_STATUS_ARM instances for property testing.
func DynamicThresholdFailingPeriods_STATUS_ARMGenerator() gopter.Gen {
	if dynamicThresholdFailingPeriods_STATUS_ARMGenerator != nil {
		return dynamicThresholdFailingPeriods_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDynamicThresholdFailingPeriods_STATUS_ARM(generators)
	dynamicThresholdFailingPeriods_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DynamicThresholdFailingPeriods_STATUS_ARM{}), generators)

	return dynamicThresholdFailingPeriods_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDynamicThresholdFailingPeriods_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDynamicThresholdFailingPeriods_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MinFailingPeriodsToAlert"] = gen.PtrOf(gen.Float64())
	gens["NumberOfEvaluationPeriods"] = gen.PtrOf(gen.Float64())
}
