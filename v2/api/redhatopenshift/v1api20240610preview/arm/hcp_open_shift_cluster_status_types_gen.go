// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

// HCP cluster resource
type HcpOpenShiftCluster_STATUS struct {
	// Id: Fully qualified resource ID for the resource. E.g.
	// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id *string `json:"id,omitempty"`

	// Identity: The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity_STATUS `json:"identity,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Properties: The resource-specific properties for this resource.
	Properties *HcpOpenShiftClusterProperties_STATUS `json:"properties,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

// HCP cluster properties
type HcpOpenShiftClusterProperties_STATUS struct {
	// Api: Shows the cluster API server profile
	Api *ApiProfile_STATUS `json:"api,omitempty"`

	// Autoscaling: Configure ClusterAutoscaling .
	Autoscaling *ClusterAutoscalingProfile_STATUS `json:"autoscaling,omitempty"`

	// ClusterImageRegistry: OpenShift internal image registry
	ClusterImageRegistry *ClusterImageRegistryProfile_STATUS `json:"clusterImageRegistry,omitempty"`

	// Console: Shows the cluster web console information
	Console *ConsoleProfile_STATUS `json:"console,omitempty"`

	// Dns: Cluster DNS configuration
	Dns *DnsProfile_STATUS `json:"dns,omitempty"`

	// Etcd: Configure ETCD.
	Etcd *EtcdProfile_STATUS `json:"etcd,omitempty"`

	// Network: Cluster network configuration
	Network *NetworkProfile_STATUS `json:"network,omitempty"`

	// NodeDrainTimeoutMinutes: nodeDrainTimeoutMinutes is the grace period for how long Pod Disruption Budget-protected
	// workloads will be
	// respected during any node draining operation. After this grace period, any workloads protected by Pod Disruption
	// Budgets that have not been successfully drained from a node will be forcibly evicted. This is
	// especially relevant to cluster upgrades.
	// Valid values are in minutes and from 0 to 10080 minutes (1 week).
	// 0 means that the MachinePool can be drained without any time limitation.
	// This is the value is used a default for all NodePools. It can be overridden
	// by specifying nodeDrainTimeoutMinutes for a given NodePool
	NodeDrainTimeoutMinutes *int `json:"nodeDrainTimeoutMinutes,omitempty"`

	// Platform: Azure platform configuration
	Platform *PlatformProfile_STATUS `json:"platform,omitempty"`

	// ProvisioningState: The status of the last operation.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Version: Version of the control plane components
	Version *VersionProfile_STATUS `json:"version,omitempty"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity_STATUS struct {
	// PrincipalId: The service principal ID of the system assigned identity. This property will only be provided for a system
	// assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: The tenant ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	TenantId *string `json:"tenantId,omitempty"`

	// Type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType_STATUS `json:"type,omitempty"`

	// UserAssignedIdentities: The set of user assigned identities associated with the resource. The userAssignedIdentities
	// dictionary keys will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentity_STATUS `json:"userAssignedIdentities,omitempty"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemData_CreatedByType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemData_LastModifiedByType_STATUS `json:"lastModifiedByType,omitempty"`
}

// Information about the API of a cluster.
type ApiProfile_STATUS struct {
	// AuthorizedCidrs: The list of authorized IPv4 CIDR blocks allowed to access the API server. Maximum 500 entries.
	AuthorizedCidrs []string `json:"authorizedCidrs,omitempty"`

	// Url: URL endpoint for the API server
	Url *string `json:"url,omitempty"`

	// Visibility: The internet visibility of the OpenShift API server
	Visibility *ApiProfile_Visibility_STATUS `json:"visibility,omitempty"`
}

// ClusterAutoscaling specifies auto-scaling behavior that
// applies to all NodePools associated with a control plane.
type ClusterAutoscalingProfile_STATUS struct {
	// MaxNodeProvisionTimeSeconds: maxNodeProvisionTimeSeconds is the maximum time to wait for node provisioning before
	// considering the
	// provisioning to be unsuccessful. The default is 900 seconds, or 15 minutes.
	MaxNodeProvisionTimeSeconds *int `json:"maxNodeProvisionTimeSeconds,omitempty"`

	// MaxNodesTotal: maxNodesTotal is the maximum allowable number of nodes for the Autoscaler scale out to be operational.
	// The autoscaler will not grow the cluster beyond this number. If omitted, the autoscaler will not have a maximum limit.
	MaxNodesTotal *int `json:"maxNodesTotal,omitempty"`

	// MaxPodGracePeriodSeconds: maxPodGracePeriod is the maximum seconds to wait for graceful pod termination before scaling
	// down a NodePool.
	// The default is 600 seconds.
	MaxPodGracePeriodSeconds *int `json:"maxPodGracePeriodSeconds,omitempty"`

	// PodPriorityThreshold: podPriorityThreshold enables users to schedule “best-effort” pods, which shouldn’t trigger
	// autoscaler actions,
	// but only run when there are spare resources available. The default is -10.
	// See the following for more details:
	// https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-does-cluster-autoscaler-work-with-pod-priority-and-preemption
	PodPriorityThreshold *int `json:"podPriorityThreshold,omitempty"`
}

// OpenShift cluster image registry
type ClusterImageRegistryProfile_STATUS struct {
	// State: state indicates the desired ImageStream-backed cluster image registry installation mode.
	// This can only be set during cluster creation and cannot be changed after cluster creation.
	// Enabled means the ImageStream-backed image registry will be run as pods on worker nodes in
	// the cluster. Disabled means the ImageStream-backed image registry will not be present in
	// the cluster. The default is Enabled.
	State *ClusterImageRegistryProfile_State_STATUS `json:"state,omitempty"`
}

// Configuration of the cluster web console
type ConsoleProfile_STATUS struct {
	// Url: The cluster web console URL endpoint
	Url *string `json:"url,omitempty"`
}

// DNS contains the DNS settings of the cluster
type DnsProfile_STATUS struct {
	// BaseDomain: BaseDomain is the base DNS domain of the cluster.
	BaseDomain *string `json:"baseDomain,omitempty"`

	// BaseDomainPrefix: BaseDomainPrefix is the unique name of the cluster representing the OpenShift's cluster name.
	// BaseDomainPrefix is the name that will appear in the cluster's DNS, provisioned cloud providers resources
	BaseDomainPrefix *string `json:"baseDomainPrefix,omitempty"`
}

// The ETCD settings and configuration options.
type EtcdProfile_STATUS struct {
	// DataEncryption: ETCD Data Encryption settings.
	// If not specified platform managed keys are used.
	DataEncryption *EtcdDataEncryptionProfile_STATUS `json:"dataEncryption,omitempty"`
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType_STATUS string

const (
	ManagedServiceIdentityType_STATUS_None                       = ManagedServiceIdentityType_STATUS("None")
	ManagedServiceIdentityType_STATUS_SystemAssigned             = ManagedServiceIdentityType_STATUS("SystemAssigned")
	ManagedServiceIdentityType_STATUS_SystemAssignedUserAssigned = ManagedServiceIdentityType_STATUS("SystemAssigned,UserAssigned")
	ManagedServiceIdentityType_STATUS_UserAssigned               = ManagedServiceIdentityType_STATUS("UserAssigned")
)

// Mapping from string to ManagedServiceIdentityType_STATUS
var managedServiceIdentityType_STATUS_Values = map[string]ManagedServiceIdentityType_STATUS{
	"none":                        ManagedServiceIdentityType_STATUS_None,
	"systemassigned":              ManagedServiceIdentityType_STATUS_SystemAssigned,
	"systemassigned,userassigned": ManagedServiceIdentityType_STATUS_SystemAssignedUserAssigned,
	"userassigned":                ManagedServiceIdentityType_STATUS_UserAssigned,
}

// OpenShift networking configuration
type NetworkProfile_STATUS struct {
	// HostPrefix: Network host prefix
	HostPrefix *int `json:"hostPrefix,omitempty"`

	// MachineCidr: The CIDR block from which to assign machine IP addresses
	MachineCidr *string `json:"machineCidr,omitempty"`

	// NetworkType: The main controller responsible for rendering the core networking components
	NetworkType *NetworkProfile_NetworkType_STATUS `json:"networkType,omitempty"`

	// PodCidr: The CIDR of the pod IP addresses
	PodCidr *string `json:"podCidr,omitempty"`

	// ServiceCidr: The CIDR block for assigned service IPs
	ServiceCidr *string `json:"serviceCidr,omitempty"`
}

// Azure specific configuration
type PlatformProfile_STATUS struct {
	// IssuerUrl: URL for the OIDC provider to be used for authentication
	// to authenticate against user Azure cloud account
	IssuerUrl *string `json:"issuerUrl,omitempty"`

	// ManagedResourceGroup: Resource group to put cluster resources
	ManagedResourceGroup *string `json:"managedResourceGroup,omitempty"`

	// NetworkSecurityGroupId: ResourceId for the NSG (network security group) attached to the cluster subnet
	// Note that NSGs cannot be reused for other ARO-HCP clusters.
	NetworkSecurityGroupId *string `json:"networkSecurityGroupId,omitempty"`

	// OperatorsAuthentication: The configuration that the operators of the cluster have to authenticate to Azure
	OperatorsAuthentication *OperatorsAuthenticationProfile_STATUS `json:"operatorsAuthentication,omitempty"`

	// OutboundType: The core outgoing configuration
	OutboundType *PlatformProfile_OutboundType_STATUS `json:"outboundType,omitempty"`

	// SubnetId: The Azure resource ID of the worker subnet
	// Note that a subnet cannot be reused between ARO-HCP Clusters.
	SubnetId *string `json:"subnetId,omitempty"`
}

// The resource provisioning state.
type ProvisioningState_STATUS string

const (
	ProvisioningState_STATUS_Accepted     = ProvisioningState_STATUS("Accepted")
	ProvisioningState_STATUS_Canceled     = ProvisioningState_STATUS("Canceled")
	ProvisioningState_STATUS_Deleting     = ProvisioningState_STATUS("Deleting")
	ProvisioningState_STATUS_Failed       = ProvisioningState_STATUS("Failed")
	ProvisioningState_STATUS_Provisioning = ProvisioningState_STATUS("Provisioning")
	ProvisioningState_STATUS_Succeeded    = ProvisioningState_STATUS("Succeeded")
	ProvisioningState_STATUS_Updating     = ProvisioningState_STATUS("Updating")
)

// Mapping from string to ProvisioningState_STATUS
var provisioningState_STATUS_Values = map[string]ProvisioningState_STATUS{
	"accepted":     ProvisioningState_STATUS_Accepted,
	"canceled":     ProvisioningState_STATUS_Canceled,
	"deleting":     ProvisioningState_STATUS_Deleting,
	"failed":       ProvisioningState_STATUS_Failed,
	"provisioning": ProvisioningState_STATUS_Provisioning,
	"succeeded":    ProvisioningState_STATUS_Succeeded,
	"updating":     ProvisioningState_STATUS_Updating,
}

type SystemData_CreatedByType_STATUS string

const (
	SystemData_CreatedByType_STATUS_Application     = SystemData_CreatedByType_STATUS("Application")
	SystemData_CreatedByType_STATUS_Key             = SystemData_CreatedByType_STATUS("Key")
	SystemData_CreatedByType_STATUS_ManagedIdentity = SystemData_CreatedByType_STATUS("ManagedIdentity")
	SystemData_CreatedByType_STATUS_User            = SystemData_CreatedByType_STATUS("User")
)

// Mapping from string to SystemData_CreatedByType_STATUS
var systemData_CreatedByType_STATUS_Values = map[string]SystemData_CreatedByType_STATUS{
	"application":     SystemData_CreatedByType_STATUS_Application,
	"key":             SystemData_CreatedByType_STATUS_Key,
	"managedidentity": SystemData_CreatedByType_STATUS_ManagedIdentity,
	"user":            SystemData_CreatedByType_STATUS_User,
}

type SystemData_LastModifiedByType_STATUS string

const (
	SystemData_LastModifiedByType_STATUS_Application     = SystemData_LastModifiedByType_STATUS("Application")
	SystemData_LastModifiedByType_STATUS_Key             = SystemData_LastModifiedByType_STATUS("Key")
	SystemData_LastModifiedByType_STATUS_ManagedIdentity = SystemData_LastModifiedByType_STATUS("ManagedIdentity")
	SystemData_LastModifiedByType_STATUS_User            = SystemData_LastModifiedByType_STATUS("User")
)

// Mapping from string to SystemData_LastModifiedByType_STATUS
var systemData_LastModifiedByType_STATUS_Values = map[string]SystemData_LastModifiedByType_STATUS{
	"application":     SystemData_LastModifiedByType_STATUS_Application,
	"key":             SystemData_LastModifiedByType_STATUS_Key,
	"managedidentity": SystemData_LastModifiedByType_STATUS_ManagedIdentity,
	"user":            SystemData_LastModifiedByType_STATUS_User,
}

// User assigned identity properties
type UserAssignedIdentity_STATUS struct {
	// ClientId: The client ID of the assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	// PrincipalId: The principal ID of the assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

// Versions represents an OpenShift version.
type VersionProfile_STATUS struct {
	// ChannelGroup: ChannelGroup is the name of the set to which this version belongs. Each version belongs to only a single
	// set.
	ChannelGroup *string `json:"channelGroup,omitempty"`

	// Id: ID is the unique identifier of the version.
	Id *string `json:"id,omitempty"`
}

type ApiProfile_Visibility_STATUS string

const (
	ApiProfile_Visibility_STATUS_Private = ApiProfile_Visibility_STATUS("Private")
	ApiProfile_Visibility_STATUS_Public  = ApiProfile_Visibility_STATUS("Public")
)

// Mapping from string to ApiProfile_Visibility_STATUS
var apiProfile_Visibility_STATUS_Values = map[string]ApiProfile_Visibility_STATUS{
	"private": ApiProfile_Visibility_STATUS_Private,
	"public":  ApiProfile_Visibility_STATUS_Public,
}

type ClusterImageRegistryProfile_State_STATUS string

const (
	ClusterImageRegistryProfile_State_STATUS_Disabled = ClusterImageRegistryProfile_State_STATUS("Disabled")
	ClusterImageRegistryProfile_State_STATUS_Enabled  = ClusterImageRegistryProfile_State_STATUS("Enabled")
)

// Mapping from string to ClusterImageRegistryProfile_State_STATUS
var clusterImageRegistryProfile_State_STATUS_Values = map[string]ClusterImageRegistryProfile_State_STATUS{
	"disabled": ClusterImageRegistryProfile_State_STATUS_Disabled,
	"enabled":  ClusterImageRegistryProfile_State_STATUS_Enabled,
}

// The ETCD data encryption settings.
type EtcdDataEncryptionProfile_STATUS struct {
	// CustomerManaged: Specify customer managed encryption key details.
	// Required when keyManagementMode is "CustomerManaged".
	CustomerManaged *CustomerManagedEncryptionProfile_STATUS `json:"customerManaged,omitempty"`

	// KeyManagementMode: Specify the key management strategy used for the encryption key that encrypts the ETCD data.
	// By default, "PlatformManaged" is used.
	KeyManagementMode *EtcdDataEncryptionProfile_KeyManagementMode_STATUS `json:"keyManagementMode,omitempty"`
}

type NetworkProfile_NetworkType_STATUS string

const (
	NetworkProfile_NetworkType_STATUS_OVNKubernetes = NetworkProfile_NetworkType_STATUS("OVNKubernetes")
	NetworkProfile_NetworkType_STATUS_Other         = NetworkProfile_NetworkType_STATUS("Other")
)

// Mapping from string to NetworkProfile_NetworkType_STATUS
var networkProfile_NetworkType_STATUS_Values = map[string]NetworkProfile_NetworkType_STATUS{
	"ovnkubernetes": NetworkProfile_NetworkType_STATUS_OVNKubernetes,
	"other":         NetworkProfile_NetworkType_STATUS_Other,
}

// The configuration that the operators of the cluster have to authenticate to Azure.
type OperatorsAuthenticationProfile_STATUS struct {
	// UserAssignedIdentities: Represents the information related to Azure User-Assigned managed identities needed
	// to perform Operators authentication based on Azure User-Assigned Managed Identities
	UserAssignedIdentities *UserAssignedIdentitiesProfile_STATUS `json:"userAssignedIdentities,omitempty"`
}

type PlatformProfile_OutboundType_STATUS string

const PlatformProfile_OutboundType_STATUS_LoadBalancer = PlatformProfile_OutboundType_STATUS("LoadBalancer")

// Mapping from string to PlatformProfile_OutboundType_STATUS
var platformProfile_OutboundType_STATUS_Values = map[string]PlatformProfile_OutboundType_STATUS{
	"loadbalancer": PlatformProfile_OutboundType_STATUS_LoadBalancer,
}

// Customer managed encryption key profile.
type CustomerManagedEncryptionProfile_STATUS struct {
	// EncryptionType: The encryption type used.
	// By default, "KMS" is used.
	EncryptionType *CustomerManagedEncryptionProfile_EncryptionType_STATUS `json:"encryptionType,omitempty"`

	// Kms: The Key Management Service (KMS) encryption key details.
	// Required when encryptionType is "KMS".
	Kms *KmsEncryptionProfile_STATUS `json:"kms,omitempty"`
}

type EtcdDataEncryptionProfile_KeyManagementMode_STATUS string

const (
	EtcdDataEncryptionProfile_KeyManagementMode_STATUS_CustomerManaged = EtcdDataEncryptionProfile_KeyManagementMode_STATUS("CustomerManaged")
	EtcdDataEncryptionProfile_KeyManagementMode_STATUS_PlatformManaged = EtcdDataEncryptionProfile_KeyManagementMode_STATUS("PlatformManaged")
)

// Mapping from string to EtcdDataEncryptionProfile_KeyManagementMode_STATUS
var etcdDataEncryptionProfile_KeyManagementMode_STATUS_Values = map[string]EtcdDataEncryptionProfile_KeyManagementMode_STATUS{
	"customermanaged": EtcdDataEncryptionProfile_KeyManagementMode_STATUS_CustomerManaged,
	"platformmanaged": EtcdDataEncryptionProfile_KeyManagementMode_STATUS_PlatformManaged,
}

// Represents the information related to Azure User-Assigned managed identities needed
// to perform Operators authentication
// based on Azure User-Assigned Managed Identities
type UserAssignedIdentitiesProfile_STATUS struct {
	// ControlPlaneOperators: The set of Azure User-Assigned Managed Identities leveraged for the Control Plane
	// operators of the cluster. The set of required managed identities is dependent on the
	// Cluster's OpenShift version.
	ControlPlaneOperators map[string]string `json:"controlPlaneOperators,omitempty"`

	// DataPlaneOperators: The set of Azure User-Assigned Managed Identities leveraged for the Data Plane
	// operators of the cluster. The set of required managed identities is dependent on the
	// Cluster's OpenShift version.
	DataPlaneOperators map[string]string `json:"dataPlaneOperators,omitempty"`

	// ServiceManagedIdentity: Represents the information associated to an Azure User-Assigned Managed Identity whose
	// purpose is to perform service level actions.
	ServiceManagedIdentity *string `json:"serviceManagedIdentity,omitempty"`
}

type CustomerManagedEncryptionProfile_EncryptionType_STATUS string

const CustomerManagedEncryptionProfile_EncryptionType_STATUS_KMS = CustomerManagedEncryptionProfile_EncryptionType_STATUS("KMS")

// Mapping from string to CustomerManagedEncryptionProfile_EncryptionType_STATUS
var customerManagedEncryptionProfile_EncryptionType_STATUS_Values = map[string]CustomerManagedEncryptionProfile_EncryptionType_STATUS{
	"kms": CustomerManagedEncryptionProfile_EncryptionType_STATUS_KMS,
}

// Configure etcd encryption Key Management Service (KMS) key.
// Your Microsoft Entra application used to create the cluster
// must be authorized to access this keyvault,
// e.g using the AzureCLI: `az keyvault set-policy -n $KEYVAULT_NAME
// --key-permissions decrypt encrypt --spn <YOUR APPLICATION CLIENT ID>`
type KmsEncryptionProfile_STATUS struct {
	// ActiveKey: The details of the active key.
	ActiveKey *KmsKey_STATUS `json:"activeKey,omitempty"`
}

// A representation of a KeyVault Secret.
type KmsKey_STATUS struct {
	// Name: name is the name of the keyvault key used for encryption/decryption.
	Name *string `json:"name,omitempty"`

	// VaultName: vaultName is the name of the keyvault that contains the secret.
	VaultName *string `json:"vaultName,omitempty"`

	// Version: version contains the version of the key to use.
	Version *string `json:"version,omitempty"`
}
