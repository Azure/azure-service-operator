// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type HcpOpenShiftCluster_Spec struct {
	// Identity: The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: The resource-specific properties for this resource.
	Properties *HcpOpenShiftClusterProperties `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &HcpOpenShiftCluster_Spec{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-06-10-preview"
func (cluster HcpOpenShiftCluster_Spec) GetAPIVersion() string {
	return "2024-06-10-preview"
}

// GetName returns the Name of the resource
func (cluster *HcpOpenShiftCluster_Spec) GetName() string {
	return cluster.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.RedHatOpenShift/hcpOpenShiftClusters"
func (cluster *HcpOpenShiftCluster_Spec) GetType() string {
	return "Microsoft.RedHatOpenShift/hcpOpenShiftClusters"
}

// HCP cluster properties
type HcpOpenShiftClusterProperties struct {
	// Api: Shows the cluster API server profile
	Api *ApiProfile `json:"api,omitempty"`

	// Autoscaling: Configure ClusterAutoscaling .
	Autoscaling *ClusterAutoscalingProfile `json:"autoscaling,omitempty"`

	// ClusterImageRegistry: OpenShift internal image registry
	ClusterImageRegistry *ClusterImageRegistryProfile `json:"clusterImageRegistry,omitempty"`

	// Dns: Cluster DNS configuration
	Dns *DnsProfile `json:"dns,omitempty"`

	// Etcd: Configure ETCD.
	Etcd *EtcdProfile `json:"etcd,omitempty"`

	// Network: Cluster network configuration
	Network *NetworkProfile `json:"network,omitempty"`

	// NodeDrainTimeoutMinutes: nodeDrainTimeoutMinutes is the grace period for how long Pod Disruption Budget-protected
	// workloads will be
	// respected during any node draining operation. After this grace period, any workloads protected by Pod Disruption
	// Budgets that have not been successfully drained from a node will be forcibly evicted. This is
	// especially relevant to cluster upgrades.
	// Valid values are in minutes and from 0 to 10080 minutes (1 week).
	// 0 means that the MachinePool can be drained without any time limitation.
	// This is the value is used a default for all NodePools. It can be overridden
	// by specifying nodeDrainTimeoutMinutes for a given NodePool
	NodeDrainTimeoutMinutes *int `json:"nodeDrainTimeoutMinutes,omitempty"`

	// Platform: Azure platform configuration
	Platform *PlatformProfile `json:"platform,omitempty"`

	// Version: Version of the control plane components
	Version *VersionProfile `json:"version,omitempty"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type                   *ManagedServiceIdentityType            `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentityDetails `json:"userAssignedIdentities,omitempty"`
}

// Information about the API of a cluster.
type ApiProfile struct {
	// AuthorizedCidrs: The list of authorized IPv4 CIDR blocks allowed to access the API server. Maximum 500 entries.
	AuthorizedCidrs []string `json:"authorizedCidrs,omitempty"`

	// Visibility: The internet visibility of the OpenShift API server
	Visibility *ApiProfile_Visibility `json:"visibility,omitempty"`
}

// ClusterAutoscaling specifies auto-scaling behavior that
// applies to all NodePools associated with a control plane.
type ClusterAutoscalingProfile struct {
	// MaxNodeProvisionTimeSeconds: maxNodeProvisionTimeSeconds is the maximum time to wait for node provisioning before
	// considering the
	// provisioning to be unsuccessful. The default is 900 seconds, or 15 minutes.
	MaxNodeProvisionTimeSeconds *int `json:"maxNodeProvisionTimeSeconds,omitempty"`

	// MaxNodesTotal: maxNodesTotal is the maximum allowable number of nodes for the Autoscaler scale out to be operational.
	// The autoscaler will not grow the cluster beyond this number. If omitted, the autoscaler will not have a maximum limit.
	MaxNodesTotal *int `json:"maxNodesTotal,omitempty"`

	// MaxPodGracePeriodSeconds: maxPodGracePeriod is the maximum seconds to wait for graceful pod termination before scaling
	// down a NodePool.
	// The default is 600 seconds.
	MaxPodGracePeriodSeconds *int `json:"maxPodGracePeriodSeconds,omitempty"`

	// PodPriorityThreshold: podPriorityThreshold enables users to schedule “best-effort” pods, which shouldn’t trigger
	// autoscaler actions,
	// but only run when there are spare resources available. The default is -10.
	// See the following for more details:
	// https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-does-cluster-autoscaler-work-with-pod-priority-and-preemption
	PodPriorityThreshold *int `json:"podPriorityThreshold,omitempty"`
}

// OpenShift cluster image registry
type ClusterImageRegistryProfile struct {
	// State: state indicates the desired ImageStream-backed cluster image registry installation mode.
	// This can only be set during cluster creation and cannot be changed after cluster creation.
	// Enabled means the ImageStream-backed image registry will be run as pods on worker nodes in
	// the cluster. Disabled means the ImageStream-backed image registry will not be present in
	// the cluster. The default is Enabled.
	State *ClusterImageRegistryProfile_State `json:"state,omitempty"`
}

// DNS contains the DNS settings of the cluster
type DnsProfile struct {
	// BaseDomainPrefix: BaseDomainPrefix is the unique name of the cluster representing the OpenShift's cluster name.
	// BaseDomainPrefix is the name that will appear in the cluster's DNS, provisioned cloud providers resources
	BaseDomainPrefix *string `json:"baseDomainPrefix,omitempty"`
}

// The ETCD settings and configuration options.
type EtcdProfile struct {
	// DataEncryption: ETCD Data Encryption settings.
	// If not specified platform managed keys are used.
	DataEncryption *EtcdDataEncryptionProfile `json:"dataEncryption,omitempty"`
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned,UserAssigned","UserAssigned"}
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityType_None                       = ManagedServiceIdentityType("None")
	ManagedServiceIdentityType_SystemAssigned             = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityType_SystemAssignedUserAssigned = ManagedServiceIdentityType("SystemAssigned,UserAssigned")
	ManagedServiceIdentityType_UserAssigned               = ManagedServiceIdentityType("UserAssigned")
)

// Mapping from string to ManagedServiceIdentityType
var managedServiceIdentityType_Values = map[string]ManagedServiceIdentityType{
	"none":                        ManagedServiceIdentityType_None,
	"systemassigned":              ManagedServiceIdentityType_SystemAssigned,
	"systemassigned,userassigned": ManagedServiceIdentityType_SystemAssignedUserAssigned,
	"userassigned":                ManagedServiceIdentityType_UserAssigned,
}

// OpenShift networking configuration
type NetworkProfile struct {
	// HostPrefix: Network host prefix
	HostPrefix *int `json:"hostPrefix,omitempty"`

	// MachineCidr: The CIDR block from which to assign machine IP addresses
	MachineCidr *string `json:"machineCidr,omitempty"`

	// NetworkType: The main controller responsible for rendering the core networking components
	NetworkType *NetworkProfile_NetworkType `json:"networkType,omitempty"`

	// PodCidr: The CIDR of the pod IP addresses
	PodCidr *string `json:"podCidr,omitempty"`

	// ServiceCidr: The CIDR block for assigned service IPs
	ServiceCidr *string `json:"serviceCidr,omitempty"`
}

// Azure specific configuration
type PlatformProfile struct {
	// ManagedResourceGroup: Resource group to put cluster resources
	ManagedResourceGroup *string `json:"managedResourceGroup,omitempty"`

	// NetworkSecurityGroupId: ResourceId for the NSG (network security group) attached to the cluster subnet
	// Note that NSGs cannot be reused for other ARO-HCP clusters.
	NetworkSecurityGroupId *string `json:"networkSecurityGroupId,omitempty"`

	// OperatorsAuthentication: The configuration that the operators of the cluster have to authenticate to Azure
	OperatorsAuthentication *OperatorsAuthenticationProfile `json:"operatorsAuthentication,omitempty"`

	// OutboundType: The core outgoing configuration
	OutboundType *PlatformProfile_OutboundType `json:"outboundType,omitempty"`

	// SubnetId: The Azure resource ID of the worker subnet
	// Note that a subnet cannot be reused between ARO-HCP Clusters.
	SubnetId *string `json:"subnetId,omitempty"`
}

// Information about the user assigned identity for the resource
type UserAssignedIdentityDetails struct {
}

// Versions represents an OpenShift version.
type VersionProfile struct {
	// ChannelGroup: ChannelGroup is the name of the set to which this version belongs. Each version belongs to only a single
	// set.
	ChannelGroup *string `json:"channelGroup,omitempty"`

	// Id: ID is the unique identifier of the version.
	Id *string `json:"id,omitempty"`
}

// +kubebuilder:validation:Enum={"Private","Public"}
type ApiProfile_Visibility string

const (
	ApiProfile_Visibility_Private = ApiProfile_Visibility("Private")
	ApiProfile_Visibility_Public  = ApiProfile_Visibility("Public")
)

// Mapping from string to ApiProfile_Visibility
var apiProfile_Visibility_Values = map[string]ApiProfile_Visibility{
	"private": ApiProfile_Visibility_Private,
	"public":  ApiProfile_Visibility_Public,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ClusterImageRegistryProfile_State string

const (
	ClusterImageRegistryProfile_State_Disabled = ClusterImageRegistryProfile_State("Disabled")
	ClusterImageRegistryProfile_State_Enabled  = ClusterImageRegistryProfile_State("Enabled")
)

// Mapping from string to ClusterImageRegistryProfile_State
var clusterImageRegistryProfile_State_Values = map[string]ClusterImageRegistryProfile_State{
	"disabled": ClusterImageRegistryProfile_State_Disabled,
	"enabled":  ClusterImageRegistryProfile_State_Enabled,
}

// The ETCD data encryption settings.
type EtcdDataEncryptionProfile struct {
	// CustomerManaged: Specify customer managed encryption key details.
	// Required when keyManagementMode is "CustomerManaged".
	CustomerManaged *CustomerManagedEncryptionProfile `json:"customerManaged,omitempty"`

	// KeyManagementMode: Specify the key management strategy used for the encryption key that encrypts the ETCD data.
	// By default, "PlatformManaged" is used.
	KeyManagementMode *EtcdDataEncryptionProfile_KeyManagementMode `json:"keyManagementMode,omitempty"`
}

// +kubebuilder:validation:Enum={"OVNKubernetes","Other"}
type NetworkProfile_NetworkType string

const (
	NetworkProfile_NetworkType_OVNKubernetes = NetworkProfile_NetworkType("OVNKubernetes")
	NetworkProfile_NetworkType_Other         = NetworkProfile_NetworkType("Other")
)

// Mapping from string to NetworkProfile_NetworkType
var networkProfile_NetworkType_Values = map[string]NetworkProfile_NetworkType{
	"ovnkubernetes": NetworkProfile_NetworkType_OVNKubernetes,
	"other":         NetworkProfile_NetworkType_Other,
}

// The configuration that the operators of the cluster have to authenticate to Azure.
type OperatorsAuthenticationProfile struct {
	// UserAssignedIdentities: Represents the information related to Azure User-Assigned managed identities needed
	// to perform Operators authentication based on Azure User-Assigned Managed Identities
	UserAssignedIdentities *UserAssignedIdentitiesProfile `json:"userAssignedIdentities,omitempty"`
}

// +kubebuilder:validation:Enum={"LoadBalancer"}
type PlatformProfile_OutboundType string

const PlatformProfile_OutboundType_LoadBalancer = PlatformProfile_OutboundType("LoadBalancer")

// Mapping from string to PlatformProfile_OutboundType
var platformProfile_OutboundType_Values = map[string]PlatformProfile_OutboundType{
	"loadbalancer": PlatformProfile_OutboundType_LoadBalancer,
}

// Customer managed encryption key profile.
type CustomerManagedEncryptionProfile struct {
	// EncryptionType: The encryption type used.
	// By default, "KMS" is used.
	EncryptionType *CustomerManagedEncryptionProfile_EncryptionType `json:"encryptionType,omitempty"`

	// Kms: The Key Management Service (KMS) encryption key details.
	// Required when encryptionType is "KMS".
	Kms *KmsEncryptionProfile `json:"kms,omitempty"`
}

// +kubebuilder:validation:Enum={"CustomerManaged","PlatformManaged"}
type EtcdDataEncryptionProfile_KeyManagementMode string

const (
	EtcdDataEncryptionProfile_KeyManagementMode_CustomerManaged = EtcdDataEncryptionProfile_KeyManagementMode("CustomerManaged")
	EtcdDataEncryptionProfile_KeyManagementMode_PlatformManaged = EtcdDataEncryptionProfile_KeyManagementMode("PlatformManaged")
)

// Mapping from string to EtcdDataEncryptionProfile_KeyManagementMode
var etcdDataEncryptionProfile_KeyManagementMode_Values = map[string]EtcdDataEncryptionProfile_KeyManagementMode{
	"customermanaged": EtcdDataEncryptionProfile_KeyManagementMode_CustomerManaged,
	"platformmanaged": EtcdDataEncryptionProfile_KeyManagementMode_PlatformManaged,
}

// Represents the information related to Azure User-Assigned managed identities needed
// to perform Operators authentication
// based on Azure User-Assigned Managed Identities
type UserAssignedIdentitiesProfile struct {
	// ControlPlaneOperators: The set of Azure User-Assigned Managed Identities leveraged for the Control Plane
	// operators of the cluster. The set of required managed identities is dependent on the
	// Cluster's OpenShift version.
	ControlPlaneOperators map[string]string `json:"controlPlaneOperators,omitempty"`

	// DataPlaneOperators: The set of Azure User-Assigned Managed Identities leveraged for the Data Plane
	// operators of the cluster. The set of required managed identities is dependent on the
	// Cluster's OpenShift version.
	DataPlaneOperators map[string]string `json:"dataPlaneOperators,omitempty"`

	// ServiceManagedIdentity: Represents the information associated to an Azure User-Assigned Managed Identity whose
	// purpose is to perform service level actions.
	ServiceManagedIdentity *string `json:"serviceManagedIdentity,omitempty"`
}

// +kubebuilder:validation:Enum={"KMS"}
type CustomerManagedEncryptionProfile_EncryptionType string

const CustomerManagedEncryptionProfile_EncryptionType_KMS = CustomerManagedEncryptionProfile_EncryptionType("KMS")

// Mapping from string to CustomerManagedEncryptionProfile_EncryptionType
var customerManagedEncryptionProfile_EncryptionType_Values = map[string]CustomerManagedEncryptionProfile_EncryptionType{
	"kms": CustomerManagedEncryptionProfile_EncryptionType_KMS,
}

// Configure etcd encryption Key Management Service (KMS) key.
// Your Microsoft Entra application used to create the cluster
// must be authorized to access this keyvault,
// e.g using the AzureCLI: `az keyvault set-policy -n $KEYVAULT_NAME
// --key-permissions decrypt encrypt --spn <YOUR APPLICATION CLIENT ID>`
type KmsEncryptionProfile struct {
	// ActiveKey: The details of the active key.
	ActiveKey *KmsKey `json:"activeKey,omitempty"`
}

// A representation of a KeyVault Secret.
type KmsKey struct {
	// Name: name is the name of the keyvault key used for encryption/decryption.
	Name *string `json:"name,omitempty"`

	// VaultName: vaultName is the name of the keyvault that contains the secret.
	VaultName *string `json:"vaultName,omitempty"`

	// Version: version contains the version of the key to use.
	Version *string `json:"version,omitempty"`
}
