// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_HcpOpenShiftClustersNodePool_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClustersNodePool_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClustersNodePool_Spec, HcpOpenShiftClustersNodePool_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClustersNodePool_Spec runs a test to see if a specific instance of HcpOpenShiftClustersNodePool_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClustersNodePool_Spec(subject HcpOpenShiftClustersNodePool_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClustersNodePool_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClustersNodePool_Spec instances for property testing - lazily instantiated by
// HcpOpenShiftClustersNodePool_SpecGenerator()
var hcpOpenShiftClustersNodePool_SpecGenerator gopter.Gen

// HcpOpenShiftClustersNodePool_SpecGenerator returns a generator of HcpOpenShiftClustersNodePool_Spec instances for property testing.
// We first initialize hcpOpenShiftClustersNodePool_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HcpOpenShiftClustersNodePool_SpecGenerator() gopter.Gen {
	if hcpOpenShiftClustersNodePool_SpecGenerator != nil {
		return hcpOpenShiftClustersNodePool_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(generators)
	hcpOpenShiftClustersNodePool_SpecGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(generators)
	AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(generators)
	hcpOpenShiftClustersNodePool_SpecGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_Spec{}), generators)

	return hcpOpenShiftClustersNodePool_SpecGenerator
}

// AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentityGenerator())
	gens["Properties"] = gen.PtrOf(NodePoolPropertiesGenerator())
}

func Test_Label_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Label via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLabel, LabelGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLabel runs a test to see if a specific instance of Label round trips to JSON and back losslessly
func RunJSONSerializationTestForLabel(subject Label) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Label
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Label instances for property testing - lazily instantiated by LabelGenerator()
var labelGenerator gopter.Gen

// LabelGenerator returns a generator of Label instances for property testing.
func LabelGenerator() gopter.Gen {
	if labelGenerator != nil {
		return labelGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLabel(generators)
	labelGenerator = gen.Struct(reflect.TypeOf(Label{}), generators)

	return labelGenerator
}

// AddIndependentPropertyGeneratorsForLabel is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLabel(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_NodePoolAutoScaling_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolAutoScaling via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolAutoScaling, NodePoolAutoScalingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolAutoScaling runs a test to see if a specific instance of NodePoolAutoScaling round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolAutoScaling(subject NodePoolAutoScaling) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolAutoScaling
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolAutoScaling instances for property testing - lazily instantiated by
// NodePoolAutoScalingGenerator()
var nodePoolAutoScalingGenerator gopter.Gen

// NodePoolAutoScalingGenerator returns a generator of NodePoolAutoScaling instances for property testing.
func NodePoolAutoScalingGenerator() gopter.Gen {
	if nodePoolAutoScalingGenerator != nil {
		return nodePoolAutoScalingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolAutoScaling(generators)
	nodePoolAutoScalingGenerator = gen.Struct(reflect.TypeOf(NodePoolAutoScaling{}), generators)

	return nodePoolAutoScalingGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolAutoScaling is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolAutoScaling(gens map[string]gopter.Gen) {
	gens["Max"] = gen.PtrOf(gen.Int())
	gens["Min"] = gen.PtrOf(gen.Int())
}

func Test_NodePoolPlatformProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolPlatformProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolPlatformProfile, NodePoolPlatformProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolPlatformProfile runs a test to see if a specific instance of NodePoolPlatformProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolPlatformProfile(subject NodePoolPlatformProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolPlatformProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolPlatformProfile instances for property testing - lazily instantiated by
// NodePoolPlatformProfileGenerator()
var nodePoolPlatformProfileGenerator gopter.Gen

// NodePoolPlatformProfileGenerator returns a generator of NodePoolPlatformProfile instances for property testing.
// We first initialize nodePoolPlatformProfileGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolPlatformProfileGenerator() gopter.Gen {
	if nodePoolPlatformProfileGenerator != nil {
		return nodePoolPlatformProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile(generators)
	nodePoolPlatformProfileGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile(generators)
	AddRelatedPropertyGeneratorsForNodePoolPlatformProfile(generators)
	nodePoolPlatformProfileGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile{}), generators)

	return nodePoolPlatformProfileGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolPlatformProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolPlatformProfile(gens map[string]gopter.Gen) {
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNodePoolPlatformProfile is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolPlatformProfile(gens map[string]gopter.Gen) {
	gens["OsDisk"] = gen.PtrOf(OsDiskProfileGenerator())
}

func Test_NodePoolProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolProperties, NodePoolPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolProperties runs a test to see if a specific instance of NodePoolProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolProperties(subject NodePoolProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolProperties instances for property testing - lazily instantiated by NodePoolPropertiesGenerator()
var nodePoolPropertiesGenerator gopter.Gen

// NodePoolPropertiesGenerator returns a generator of NodePoolProperties instances for property testing.
// We first initialize nodePoolPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolPropertiesGenerator() gopter.Gen {
	if nodePoolPropertiesGenerator != nil {
		return nodePoolPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties(generators)
	nodePoolPropertiesGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties(generators)
	AddRelatedPropertyGeneratorsForNodePoolProperties(generators)
	nodePoolPropertiesGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties{}), generators)

	return nodePoolPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolProperties(gens map[string]gopter.Gen) {
	gens["AutoRepair"] = gen.PtrOf(gen.Bool())
	gens["NodeDrainTimeoutMinutes"] = gen.PtrOf(gen.Int())
	gens["Replicas"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForNodePoolProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolProperties(gens map[string]gopter.Gen) {
	gens["AutoScaling"] = gen.PtrOf(NodePoolAutoScalingGenerator())
	gens["Labels"] = gen.SliceOf(LabelGenerator())
	gens["Platform"] = gen.PtrOf(NodePoolPlatformProfileGenerator())
	gens["Taints"] = gen.SliceOf(TaintGenerator())
	gens["Version"] = gen.PtrOf(NodePoolVersionProfileGenerator())
}

func Test_NodePoolVersionProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolVersionProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolVersionProfile, NodePoolVersionProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolVersionProfile runs a test to see if a specific instance of NodePoolVersionProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolVersionProfile(subject NodePoolVersionProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolVersionProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolVersionProfile instances for property testing - lazily instantiated by
// NodePoolVersionProfileGenerator()
var nodePoolVersionProfileGenerator gopter.Gen

// NodePoolVersionProfileGenerator returns a generator of NodePoolVersionProfile instances for property testing.
func NodePoolVersionProfileGenerator() gopter.Gen {
	if nodePoolVersionProfileGenerator != nil {
		return nodePoolVersionProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolVersionProfile(generators)
	nodePoolVersionProfileGenerator = gen.Struct(reflect.TypeOf(NodePoolVersionProfile{}), generators)

	return nodePoolVersionProfileGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolVersionProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolVersionProfile(gens map[string]gopter.Gen) {
	gens["ChannelGroup"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_OsDiskProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OsDiskProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOsDiskProfile, OsDiskProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOsDiskProfile runs a test to see if a specific instance of OsDiskProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForOsDiskProfile(subject OsDiskProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OsDiskProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OsDiskProfile instances for property testing - lazily instantiated by OsDiskProfileGenerator()
var osDiskProfileGenerator gopter.Gen

// OsDiskProfileGenerator returns a generator of OsDiskProfile instances for property testing.
func OsDiskProfileGenerator() gopter.Gen {
	if osDiskProfileGenerator != nil {
		return osDiskProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOsDiskProfile(generators)
	osDiskProfileGenerator = gen.Struct(reflect.TypeOf(OsDiskProfile{}), generators)

	return osDiskProfileGenerator
}

// AddIndependentPropertyGeneratorsForOsDiskProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOsDiskProfile(gens map[string]gopter.Gen) {
	gens["DiskStorageAccountType"] = gen.PtrOf(gen.OneConstOf(OsDiskProfile_DiskStorageAccountType_Premium_LRS, OsDiskProfile_DiskStorageAccountType_StandardSSD_LRS, OsDiskProfile_DiskStorageAccountType_Standard_LRS))
	gens["EncryptionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["SizeGiB"] = gen.PtrOf(gen.Int())
}

func Test_Taint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Taint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTaint, TaintGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTaint runs a test to see if a specific instance of Taint round trips to JSON and back losslessly
func RunJSONSerializationTestForTaint(subject Taint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Taint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Taint instances for property testing - lazily instantiated by TaintGenerator()
var taintGenerator gopter.Gen

// TaintGenerator returns a generator of Taint instances for property testing.
func TaintGenerator() gopter.Gen {
	if taintGenerator != nil {
		return taintGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTaint(generators)
	taintGenerator = gen.Struct(reflect.TypeOf(Taint{}), generators)

	return taintGenerator
}

// AddIndependentPropertyGeneratorsForTaint is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTaint(gens map[string]gopter.Gen) {
	gens["Effect"] = gen.PtrOf(gen.OneConstOf(Effect_NoExecute, Effect_NoSchedule, Effect_PreferNoSchedule))
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
