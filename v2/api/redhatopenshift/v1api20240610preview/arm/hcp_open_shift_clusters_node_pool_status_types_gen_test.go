// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_HcpOpenShiftClustersNodePool_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClustersNodePool_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClustersNodePool_STATUS, HcpOpenShiftClustersNodePool_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClustersNodePool_STATUS runs a test to see if a specific instance of HcpOpenShiftClustersNodePool_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClustersNodePool_STATUS(subject HcpOpenShiftClustersNodePool_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClustersNodePool_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClustersNodePool_STATUS instances for property testing - lazily instantiated by
// HcpOpenShiftClustersNodePool_STATUSGenerator()
var hcpOpenShiftClustersNodePool_STATUSGenerator gopter.Gen

// HcpOpenShiftClustersNodePool_STATUSGenerator returns a generator of HcpOpenShiftClustersNodePool_STATUS instances for property testing.
// We first initialize hcpOpenShiftClustersNodePool_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HcpOpenShiftClustersNodePool_STATUSGenerator() gopter.Gen {
	if hcpOpenShiftClustersNodePool_STATUSGenerator != nil {
		return hcpOpenShiftClustersNodePool_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(generators)
	hcpOpenShiftClustersNodePool_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(generators)
	AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(generators)
	hcpOpenShiftClustersNodePool_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_STATUS{}), generators)

	return hcpOpenShiftClustersNodePool_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUSGenerator())
	gens["Properties"] = gen.PtrOf(NodePoolProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_Label_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Label_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLabel_STATUS, Label_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLabel_STATUS runs a test to see if a specific instance of Label_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLabel_STATUS(subject Label_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Label_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Label_STATUS instances for property testing - lazily instantiated by Label_STATUSGenerator()
var label_STATUSGenerator gopter.Gen

// Label_STATUSGenerator returns a generator of Label_STATUS instances for property testing.
func Label_STATUSGenerator() gopter.Gen {
	if label_STATUSGenerator != nil {
		return label_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLabel_STATUS(generators)
	label_STATUSGenerator = gen.Struct(reflect.TypeOf(Label_STATUS{}), generators)

	return label_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLabel_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLabel_STATUS(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_NodePoolAutoScaling_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolAutoScaling_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolAutoScaling_STATUS, NodePoolAutoScaling_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolAutoScaling_STATUS runs a test to see if a specific instance of NodePoolAutoScaling_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolAutoScaling_STATUS(subject NodePoolAutoScaling_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolAutoScaling_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolAutoScaling_STATUS instances for property testing - lazily instantiated by
// NodePoolAutoScaling_STATUSGenerator()
var nodePoolAutoScaling_STATUSGenerator gopter.Gen

// NodePoolAutoScaling_STATUSGenerator returns a generator of NodePoolAutoScaling_STATUS instances for property testing.
func NodePoolAutoScaling_STATUSGenerator() gopter.Gen {
	if nodePoolAutoScaling_STATUSGenerator != nil {
		return nodePoolAutoScaling_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolAutoScaling_STATUS(generators)
	nodePoolAutoScaling_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolAutoScaling_STATUS{}), generators)

	return nodePoolAutoScaling_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolAutoScaling_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolAutoScaling_STATUS(gens map[string]gopter.Gen) {
	gens["Max"] = gen.PtrOf(gen.Int())
	gens["Min"] = gen.PtrOf(gen.Int())
}

func Test_NodePoolPlatformProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolPlatformProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolPlatformProfile_STATUS, NodePoolPlatformProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolPlatformProfile_STATUS runs a test to see if a specific instance of NodePoolPlatformProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolPlatformProfile_STATUS(subject NodePoolPlatformProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolPlatformProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolPlatformProfile_STATUS instances for property testing - lazily instantiated by
// NodePoolPlatformProfile_STATUSGenerator()
var nodePoolPlatformProfile_STATUSGenerator gopter.Gen

// NodePoolPlatformProfile_STATUSGenerator returns a generator of NodePoolPlatformProfile_STATUS instances for property testing.
// We first initialize nodePoolPlatformProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolPlatformProfile_STATUSGenerator() gopter.Gen {
	if nodePoolPlatformProfile_STATUSGenerator != nil {
		return nodePoolPlatformProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS(generators)
	nodePoolPlatformProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForNodePoolPlatformProfile_STATUS(generators)
	nodePoolPlatformProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile_STATUS{}), generators)

	return nodePoolPlatformProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS(gens map[string]gopter.Gen) {
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNodePoolPlatformProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolPlatformProfile_STATUS(gens map[string]gopter.Gen) {
	gens["OsDisk"] = gen.PtrOf(OsDiskProfile_STATUSGenerator())
}

func Test_NodePoolProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolProperties_STATUS, NodePoolProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolProperties_STATUS runs a test to see if a specific instance of NodePoolProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolProperties_STATUS(subject NodePoolProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolProperties_STATUS instances for property testing - lazily instantiated by
// NodePoolProperties_STATUSGenerator()
var nodePoolProperties_STATUSGenerator gopter.Gen

// NodePoolProperties_STATUSGenerator returns a generator of NodePoolProperties_STATUS instances for property testing.
// We first initialize nodePoolProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolProperties_STATUSGenerator() gopter.Gen {
	if nodePoolProperties_STATUSGenerator != nil {
		return nodePoolProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS(generators)
	nodePoolProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForNodePoolProperties_STATUS(generators)
	nodePoolProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties_STATUS{}), generators)

	return nodePoolProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS(gens map[string]gopter.Gen) {
	gens["AutoRepair"] = gen.PtrOf(gen.Bool())
	gens["NodeDrainTimeoutMinutes"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Accepted,
		ProvisioningState_STATUS_Canceled,
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Provisioning,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["Replicas"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForNodePoolProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolProperties_STATUS(gens map[string]gopter.Gen) {
	gens["AutoScaling"] = gen.PtrOf(NodePoolAutoScaling_STATUSGenerator())
	gens["Labels"] = gen.SliceOf(Label_STATUSGenerator())
	gens["Platform"] = gen.PtrOf(NodePoolPlatformProfile_STATUSGenerator())
	gens["Taints"] = gen.SliceOf(Taint_STATUSGenerator())
	gens["Version"] = gen.PtrOf(NodePoolVersionProfile_STATUSGenerator())
}

func Test_NodePoolVersionProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolVersionProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolVersionProfile_STATUS, NodePoolVersionProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolVersionProfile_STATUS runs a test to see if a specific instance of NodePoolVersionProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolVersionProfile_STATUS(subject NodePoolVersionProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolVersionProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolVersionProfile_STATUS instances for property testing - lazily instantiated by
// NodePoolVersionProfile_STATUSGenerator()
var nodePoolVersionProfile_STATUSGenerator gopter.Gen

// NodePoolVersionProfile_STATUSGenerator returns a generator of NodePoolVersionProfile_STATUS instances for property testing.
func NodePoolVersionProfile_STATUSGenerator() gopter.Gen {
	if nodePoolVersionProfile_STATUSGenerator != nil {
		return nodePoolVersionProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolVersionProfile_STATUS(generators)
	nodePoolVersionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolVersionProfile_STATUS{}), generators)

	return nodePoolVersionProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolVersionProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolVersionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["ChannelGroup"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_OsDiskProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OsDiskProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOsDiskProfile_STATUS, OsDiskProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOsDiskProfile_STATUS runs a test to see if a specific instance of OsDiskProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForOsDiskProfile_STATUS(subject OsDiskProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OsDiskProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OsDiskProfile_STATUS instances for property testing - lazily instantiated by
// OsDiskProfile_STATUSGenerator()
var osDiskProfile_STATUSGenerator gopter.Gen

// OsDiskProfile_STATUSGenerator returns a generator of OsDiskProfile_STATUS instances for property testing.
func OsDiskProfile_STATUSGenerator() gopter.Gen {
	if osDiskProfile_STATUSGenerator != nil {
		return osDiskProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOsDiskProfile_STATUS(generators)
	osDiskProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(OsDiskProfile_STATUS{}), generators)

	return osDiskProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForOsDiskProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOsDiskProfile_STATUS(gens map[string]gopter.Gen) {
	gens["DiskStorageAccountType"] = gen.PtrOf(gen.OneConstOf(OsDiskProfile_DiskStorageAccountType_STATUS_Premium_LRS, OsDiskProfile_DiskStorageAccountType_STATUS_StandardSSD_LRS, OsDiskProfile_DiskStorageAccountType_STATUS_Standard_LRS))
	gens["EncryptionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["SizeGiB"] = gen.PtrOf(gen.Int())
}

func Test_Taint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Taint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTaint_STATUS, Taint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTaint_STATUS runs a test to see if a specific instance of Taint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTaint_STATUS(subject Taint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Taint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Taint_STATUS instances for property testing - lazily instantiated by Taint_STATUSGenerator()
var taint_STATUSGenerator gopter.Gen

// Taint_STATUSGenerator returns a generator of Taint_STATUS instances for property testing.
func Taint_STATUSGenerator() gopter.Gen {
	if taint_STATUSGenerator != nil {
		return taint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTaint_STATUS(generators)
	taint_STATUSGenerator = gen.Struct(reflect.TypeOf(Taint_STATUS{}), generators)

	return taint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTaint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTaint_STATUS(gens map[string]gopter.Gen) {
	gens["Effect"] = gen.PtrOf(gen.OneConstOf(Effect_STATUS_NoExecute, Effect_STATUS_NoSchedule, Effect_STATUS_PreferNoSchedule))
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
