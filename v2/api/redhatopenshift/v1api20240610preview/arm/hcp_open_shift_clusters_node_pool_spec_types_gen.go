// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type HcpOpenShiftClustersNodePool_Spec struct {
	// Identity: The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: The resource-specific properties for this resource.
	Properties *NodePoolProperties `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &HcpOpenShiftClustersNodePool_Spec{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-06-10-preview"
func (pool HcpOpenShiftClustersNodePool_Spec) GetAPIVersion() string {
	return "2024-06-10-preview"
}

// GetName returns the Name of the resource
func (pool *HcpOpenShiftClustersNodePool_Spec) GetName() string {
	return pool.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.RedHatOpenShift/hcpOpenShiftClusters/nodePools"
func (pool *HcpOpenShiftClustersNodePool_Spec) GetType() string {
	return "Microsoft.RedHatOpenShift/hcpOpenShiftClusters/nodePools"
}

// Represents the node pool properties
type NodePoolProperties struct {
	// AutoRepair: Auto-repair
	AutoRepair *bool `json:"autoRepair,omitempty"`

	// AutoScaling: Representation of a autoscaling in a node pool.
	AutoScaling *NodePoolAutoScaling `json:"autoScaling,omitempty"`

	// Labels: Kubernetes labels to propagate to the NodePool Nodes
	// Note that when the labels are updated this is only applied to newly
	// create nodes in the Nodepool, existing node labels remain unchanged.
	Labels []Label `json:"labels,omitempty"`

	// NodeDrainTimeoutMinutes: nodeDrainTimeoutMinutes is the grace period for how long Pod Disruption Budget-protected
	// workloads will be
	// respected during any node draining operation. After this grace period, any workloads protected by Pod Disruption
	// Budgets that have not been successfully drained from a node will be forcibly evicted. This is
	// especially relevant to cluster upgrades.
	// Valid values are from 0 to 10080 minutes (1 week) .
	// 0 means that the NodePool can be drained without any time limitation.
	// If unset the cluster nodeDrainTimeoutMinutes value is used as a default.
	NodeDrainTimeoutMinutes *int `json:"nodeDrainTimeoutMinutes,omitempty"`

	// Platform: Azure node pool platform configuration
	Platform *NodePoolPlatformProfile `json:"platform,omitempty"`

	// Replicas: The number of worker nodes, it cannot be used together with autoscaling
	Replicas *int `json:"replicas,omitempty"`

	// Taints: Taints for the nodes
	Taints []Taint `json:"taints,omitempty"`

	// Version: OpenShift version for the nodepool
	Version *NodePoolVersionProfile `json:"version,omitempty"`
}

// Label represents the Kubernetes label
type Label struct {
	// Key: The key of the label
	Key *string `json:"key,omitempty"`

	// Value: The value of the label
	Value *string `json:"value,omitempty"`
}

// Node pool autoscaling
type NodePoolAutoScaling struct {
	// Max: The maximum number of nodes in the node pool
	Max *int `json:"max,omitempty"`

	// Min: The minimum number of nodes in the node pool
	Min *int `json:"min,omitempty"`
}

// Azure node pool platform configuration
type NodePoolPlatformProfile struct {
	// AvailabilityZone: The availability zone for the node pool.
	// Please read the documentation to see which regions support availability zones
	// - https://learn.microsoft.com/en-us/azure/availability-zones/az-overview
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// EnableEncryptionAtHost: Whether to enable host based OS and data drive encryption.
	// -
	// https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption#encryption-at-host---end-to-end-encryption-for-your-vm-data
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`

	// OsDisk: The settings and configuration options for OSDisk
	OsDisk *OsDiskProfile `json:"osDisk,omitempty"`

	// SubnetId: The Azure resource ID of the worker subnet
	// Note that a subnet cannot be reused between ARO-HCP Clusters, however the
	// same subnet can be used for NodePools of the same cluster.
	SubnetId *string `json:"subnetId,omitempty"`

	// VmSize: The VM size according to the documentation:
	// - https://learn.microsoft.com/en-us/azure/virtual-machines/sizes
	VmSize *string `json:"vmSize,omitempty"`
}

// Versions represents an OpenShift version.
type NodePoolVersionProfile struct {
	// ChannelGroup: ChannelGroup is the name of the set to which this version belongs. Each version belongs to only a single
	// set.
	ChannelGroup *string `json:"channelGroup,omitempty"`

	// Id: ID is the unique identifier of the version.
	Id *string `json:"id,omitempty"`
}

// Taint is controlling the node taint and its effects
type Taint struct {
	// Effect: The effect of the taint
	Effect *Effect `json:"effect,omitempty"`

	// Key: The key of the taint
	Key *string `json:"key,omitempty"`

	// Value: The value of the taint
	Value *string `json:"value,omitempty"`
}

// The taint effect the same as in Kubernetes
// +kubebuilder:validation:Enum={"NoExecute","NoSchedule","PreferNoSchedule"}
type Effect string

const (
	Effect_NoExecute        = Effect("NoExecute")
	Effect_NoSchedule       = Effect("NoSchedule")
	Effect_PreferNoSchedule = Effect("PreferNoSchedule")
)

// Mapping from string to Effect
var effect_Values = map[string]Effect{
	"noexecute":        Effect_NoExecute,
	"noschedule":       Effect_NoSchedule,
	"prefernoschedule": Effect_PreferNoSchedule,
}

// The settings and configuration options for OSDisk
type OsDiskProfile struct {
	// DiskStorageAccountType: The type of the disk storage account
	// - https://learn.microsoft.com/en-us/azure/virtual-machines/disks-types
	DiskStorageAccountType *OsDiskProfile_DiskStorageAccountType `json:"diskStorageAccountType,omitempty"`

	// EncryptionSetId: The ID of the DiskEncryptionSet resource to use to encrypt the OS disks for the VMs.
	// This needs to exist in the same subscription id listed in the Hosted Cluster,
	// HostedCluster.Spec.Platform.Azure.SubscriptionID.
	// DiskEncryptionSetID should also exist in a resource group under the same subscription id and the same location
	// listed in the Hosted Cluster, HostedCluster.Spec.Platform.Azure.Location.
	// Details on how to create a Disk Encryption Set can be found here:
	// https://learn.microsoft.com/en-us/azure/virtual-machines/disks-enable-customer-managed-keys-portal#set-up-your-disk-encryption-set
	EncryptionSetId *string `json:"encryptionSetId,omitempty"`

	// SizeGiB: The OS disk size in GiB
	SizeGiB *int `json:"sizeGiB,omitempty"`
}

// +kubebuilder:validation:Enum={"Premium_LRS","StandardSSD_LRS","Standard_LRS"}
type OsDiskProfile_DiskStorageAccountType string

const (
	OsDiskProfile_DiskStorageAccountType_Premium_LRS     = OsDiskProfile_DiskStorageAccountType("Premium_LRS")
	OsDiskProfile_DiskStorageAccountType_StandardSSD_LRS = OsDiskProfile_DiskStorageAccountType("StandardSSD_LRS")
	OsDiskProfile_DiskStorageAccountType_Standard_LRS    = OsDiskProfile_DiskStorageAccountType("Standard_LRS")
)

// Mapping from string to OsDiskProfile_DiskStorageAccountType
var osDiskProfile_DiskStorageAccountType_Values = map[string]OsDiskProfile_DiskStorageAccountType{
	"premium_lrs":     OsDiskProfile_DiskStorageAccountType_Premium_LRS,
	"standardssd_lrs": OsDiskProfile_DiskStorageAccountType_StandardSSD_LRS,
	"standard_lrs":    OsDiskProfile_DiskStorageAccountType_Standard_LRS,
}
