// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ExternalAuthClaimProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExternalAuthClaimProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExternalAuthClaimProfile_STATUS, ExternalAuthClaimProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExternalAuthClaimProfile_STATUS runs a test to see if a specific instance of ExternalAuthClaimProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForExternalAuthClaimProfile_STATUS(subject ExternalAuthClaimProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExternalAuthClaimProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExternalAuthClaimProfile_STATUS instances for property testing - lazily instantiated by
// ExternalAuthClaimProfile_STATUSGenerator()
var externalAuthClaimProfile_STATUSGenerator gopter.Gen

// ExternalAuthClaimProfile_STATUSGenerator returns a generator of ExternalAuthClaimProfile_STATUS instances for property testing.
func ExternalAuthClaimProfile_STATUSGenerator() gopter.Gen {
	if externalAuthClaimProfile_STATUSGenerator != nil {
		return externalAuthClaimProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForExternalAuthClaimProfile_STATUS(generators)
	externalAuthClaimProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ExternalAuthClaimProfile_STATUS{}), generators)

	return externalAuthClaimProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForExternalAuthClaimProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExternalAuthClaimProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Mappings"] = gen.PtrOf(TokenClaimMappingsProfile_STATUSGenerator())
	gens["ValidationRules"] = gen.SliceOf(TokenClaimValidationRule_STATUSGenerator())
}

func Test_ExternalAuthClientComponentProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExternalAuthClientComponentProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExternalAuthClientComponentProfile_STATUS, ExternalAuthClientComponentProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExternalAuthClientComponentProfile_STATUS runs a test to see if a specific instance of ExternalAuthClientComponentProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForExternalAuthClientComponentProfile_STATUS(subject ExternalAuthClientComponentProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExternalAuthClientComponentProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExternalAuthClientComponentProfile_STATUS instances for property testing - lazily instantiated by
// ExternalAuthClientComponentProfile_STATUSGenerator()
var externalAuthClientComponentProfile_STATUSGenerator gopter.Gen

// ExternalAuthClientComponentProfile_STATUSGenerator returns a generator of ExternalAuthClientComponentProfile_STATUS instances for property testing.
func ExternalAuthClientComponentProfile_STATUSGenerator() gopter.Gen {
	if externalAuthClientComponentProfile_STATUSGenerator != nil {
		return externalAuthClientComponentProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExternalAuthClientComponentProfile_STATUS(generators)
	externalAuthClientComponentProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ExternalAuthClientComponentProfile_STATUS{}), generators)

	return externalAuthClientComponentProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForExternalAuthClientComponentProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExternalAuthClientComponentProfile_STATUS(gens map[string]gopter.Gen) {
	gens["AuthClientNamespace"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExternalAuthClientProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExternalAuthClientProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExternalAuthClientProfile_STATUS, ExternalAuthClientProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExternalAuthClientProfile_STATUS runs a test to see if a specific instance of ExternalAuthClientProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForExternalAuthClientProfile_STATUS(subject ExternalAuthClientProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExternalAuthClientProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExternalAuthClientProfile_STATUS instances for property testing - lazily instantiated by
// ExternalAuthClientProfile_STATUSGenerator()
var externalAuthClientProfile_STATUSGenerator gopter.Gen

// ExternalAuthClientProfile_STATUSGenerator returns a generator of ExternalAuthClientProfile_STATUS instances for property testing.
// We first initialize externalAuthClientProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ExternalAuthClientProfile_STATUSGenerator() gopter.Gen {
	if externalAuthClientProfile_STATUSGenerator != nil {
		return externalAuthClientProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExternalAuthClientProfile_STATUS(generators)
	externalAuthClientProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ExternalAuthClientProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExternalAuthClientProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForExternalAuthClientProfile_STATUS(generators)
	externalAuthClientProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ExternalAuthClientProfile_STATUS{}), generators)

	return externalAuthClientProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForExternalAuthClientProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExternalAuthClientProfile_STATUS(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ExtraScopes"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExternalAuthClientType_STATUS_Confidential, ExternalAuthClientType_STATUS_Public))
}

// AddRelatedPropertyGeneratorsForExternalAuthClientProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExternalAuthClientProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Component"] = gen.PtrOf(ExternalAuthClientComponentProfile_STATUSGenerator())
}

func Test_ExternalAuthCondition_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExternalAuthCondition_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExternalAuthCondition_STATUS, ExternalAuthCondition_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExternalAuthCondition_STATUS runs a test to see if a specific instance of ExternalAuthCondition_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForExternalAuthCondition_STATUS(subject ExternalAuthCondition_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExternalAuthCondition_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExternalAuthCondition_STATUS instances for property testing - lazily instantiated by
// ExternalAuthCondition_STATUSGenerator()
var externalAuthCondition_STATUSGenerator gopter.Gen

// ExternalAuthCondition_STATUSGenerator returns a generator of ExternalAuthCondition_STATUS instances for property testing.
func ExternalAuthCondition_STATUSGenerator() gopter.Gen {
	if externalAuthCondition_STATUSGenerator != nil {
		return externalAuthCondition_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExternalAuthCondition_STATUS(generators)
	externalAuthCondition_STATUSGenerator = gen.Struct(reflect.TypeOf(ExternalAuthCondition_STATUS{}), generators)

	return externalAuthCondition_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForExternalAuthCondition_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExternalAuthCondition_STATUS(gens map[string]gopter.Gen) {
	gens["LastTransitionTime"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(StatusType_STATUS_False, StatusType_STATUS_True, StatusType_STATUS_Unknown))
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExternalAuthConditionType_STATUS_Available, ExternalAuthConditionType_STATUS_Degraded, ExternalAuthConditionType_STATUS_Progressing))
}

func Test_ExternalAuthProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExternalAuthProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExternalAuthProperties_STATUS, ExternalAuthProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExternalAuthProperties_STATUS runs a test to see if a specific instance of ExternalAuthProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForExternalAuthProperties_STATUS(subject ExternalAuthProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExternalAuthProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExternalAuthProperties_STATUS instances for property testing - lazily instantiated by
// ExternalAuthProperties_STATUSGenerator()
var externalAuthProperties_STATUSGenerator gopter.Gen

// ExternalAuthProperties_STATUSGenerator returns a generator of ExternalAuthProperties_STATUS instances for property testing.
// We first initialize externalAuthProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ExternalAuthProperties_STATUSGenerator() gopter.Gen {
	if externalAuthProperties_STATUSGenerator != nil {
		return externalAuthProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExternalAuthProperties_STATUS(generators)
	externalAuthProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(ExternalAuthProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExternalAuthProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForExternalAuthProperties_STATUS(generators)
	externalAuthProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(ExternalAuthProperties_STATUS{}), generators)

	return externalAuthProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForExternalAuthProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExternalAuthProperties_STATUS(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ExternalAuthProvisioningState_STATUS_Accepted,
		ExternalAuthProvisioningState_STATUS_AwaitingSecret,
		ExternalAuthProvisioningState_STATUS_Canceled,
		ExternalAuthProvisioningState_STATUS_Deleting,
		ExternalAuthProvisioningState_STATUS_Failed,
		ExternalAuthProvisioningState_STATUS_Provisioning,
		ExternalAuthProvisioningState_STATUS_Succeeded,
		ExternalAuthProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForExternalAuthProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExternalAuthProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Claim"] = gen.PtrOf(ExternalAuthClaimProfile_STATUSGenerator())
	gens["Clients"] = gen.SliceOf(ExternalAuthClientProfile_STATUSGenerator())
	gens["Condition"] = gen.PtrOf(ExternalAuthCondition_STATUSGenerator())
	gens["Issuer"] = gen.PtrOf(TokenIssuerProfile_STATUSGenerator())
}

func Test_GroupClaimProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupClaimProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupClaimProfile_STATUS, GroupClaimProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupClaimProfile_STATUS runs a test to see if a specific instance of GroupClaimProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupClaimProfile_STATUS(subject GroupClaimProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupClaimProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupClaimProfile_STATUS instances for property testing - lazily instantiated by
// GroupClaimProfile_STATUSGenerator()
var groupClaimProfile_STATUSGenerator gopter.Gen

// GroupClaimProfile_STATUSGenerator returns a generator of GroupClaimProfile_STATUS instances for property testing.
func GroupClaimProfile_STATUSGenerator() gopter.Gen {
	if groupClaimProfile_STATUSGenerator != nil {
		return groupClaimProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupClaimProfile_STATUS(generators)
	groupClaimProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(GroupClaimProfile_STATUS{}), generators)

	return groupClaimProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForGroupClaimProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGroupClaimProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Claim"] = gen.PtrOf(gen.AlphaString())
	gens["Prefix"] = gen.PtrOf(gen.AlphaString())
}

func Test_HcpOpenShiftClustersExternalAuth_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClustersExternalAuth_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClustersExternalAuth_STATUS, HcpOpenShiftClustersExternalAuth_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClustersExternalAuth_STATUS runs a test to see if a specific instance of HcpOpenShiftClustersExternalAuth_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClustersExternalAuth_STATUS(subject HcpOpenShiftClustersExternalAuth_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClustersExternalAuth_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClustersExternalAuth_STATUS instances for property testing - lazily instantiated by
// HcpOpenShiftClustersExternalAuth_STATUSGenerator()
var hcpOpenShiftClustersExternalAuth_STATUSGenerator gopter.Gen

// HcpOpenShiftClustersExternalAuth_STATUSGenerator returns a generator of HcpOpenShiftClustersExternalAuth_STATUS instances for property testing.
// We first initialize hcpOpenShiftClustersExternalAuth_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HcpOpenShiftClustersExternalAuth_STATUSGenerator() gopter.Gen {
	if hcpOpenShiftClustersExternalAuth_STATUSGenerator != nil {
		return hcpOpenShiftClustersExternalAuth_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersExternalAuth_STATUS(generators)
	hcpOpenShiftClustersExternalAuth_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersExternalAuth_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersExternalAuth_STATUS(generators)
	AddRelatedPropertyGeneratorsForHcpOpenShiftClustersExternalAuth_STATUS(generators)
	hcpOpenShiftClustersExternalAuth_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersExternalAuth_STATUS{}), generators)

	return hcpOpenShiftClustersExternalAuth_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForHcpOpenShiftClustersExternalAuth_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHcpOpenShiftClustersExternalAuth_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftClustersExternalAuth_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftClustersExternalAuth_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ExternalAuthProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_TokenClaimMappingsProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TokenClaimMappingsProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTokenClaimMappingsProfile_STATUS, TokenClaimMappingsProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTokenClaimMappingsProfile_STATUS runs a test to see if a specific instance of TokenClaimMappingsProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTokenClaimMappingsProfile_STATUS(subject TokenClaimMappingsProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TokenClaimMappingsProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TokenClaimMappingsProfile_STATUS instances for property testing - lazily instantiated by
// TokenClaimMappingsProfile_STATUSGenerator()
var tokenClaimMappingsProfile_STATUSGenerator gopter.Gen

// TokenClaimMappingsProfile_STATUSGenerator returns a generator of TokenClaimMappingsProfile_STATUS instances for property testing.
func TokenClaimMappingsProfile_STATUSGenerator() gopter.Gen {
	if tokenClaimMappingsProfile_STATUSGenerator != nil {
		return tokenClaimMappingsProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTokenClaimMappingsProfile_STATUS(generators)
	tokenClaimMappingsProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(TokenClaimMappingsProfile_STATUS{}), generators)

	return tokenClaimMappingsProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForTokenClaimMappingsProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTokenClaimMappingsProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Groups"] = gen.PtrOf(GroupClaimProfile_STATUSGenerator())
	gens["Username"] = gen.PtrOf(UsernameClaimProfile_STATUSGenerator())
}

func Test_TokenClaimValidationRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TokenClaimValidationRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTokenClaimValidationRule_STATUS, TokenClaimValidationRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTokenClaimValidationRule_STATUS runs a test to see if a specific instance of TokenClaimValidationRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTokenClaimValidationRule_STATUS(subject TokenClaimValidationRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TokenClaimValidationRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TokenClaimValidationRule_STATUS instances for property testing - lazily instantiated by
// TokenClaimValidationRule_STATUSGenerator()
var tokenClaimValidationRule_STATUSGenerator gopter.Gen

// TokenClaimValidationRule_STATUSGenerator returns a generator of TokenClaimValidationRule_STATUS instances for property testing.
// We first initialize tokenClaimValidationRule_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TokenClaimValidationRule_STATUSGenerator() gopter.Gen {
	if tokenClaimValidationRule_STATUSGenerator != nil {
		return tokenClaimValidationRule_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTokenClaimValidationRule_STATUS(generators)
	tokenClaimValidationRule_STATUSGenerator = gen.Struct(reflect.TypeOf(TokenClaimValidationRule_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTokenClaimValidationRule_STATUS(generators)
	AddRelatedPropertyGeneratorsForTokenClaimValidationRule_STATUS(generators)
	tokenClaimValidationRule_STATUSGenerator = gen.Struct(reflect.TypeOf(TokenClaimValidationRule_STATUS{}), generators)

	return tokenClaimValidationRule_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTokenClaimValidationRule_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTokenClaimValidationRule_STATUS(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(TokenClaimValidationRule_Type_STATUS_RequiredClaim))
}

// AddRelatedPropertyGeneratorsForTokenClaimValidationRule_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTokenClaimValidationRule_STATUS(gens map[string]gopter.Gen) {
	gens["RequiredClaim"] = gen.PtrOf(TokenRequiredClaim_STATUSGenerator())
}

func Test_TokenIssuerProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TokenIssuerProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTokenIssuerProfile_STATUS, TokenIssuerProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTokenIssuerProfile_STATUS runs a test to see if a specific instance of TokenIssuerProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTokenIssuerProfile_STATUS(subject TokenIssuerProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TokenIssuerProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TokenIssuerProfile_STATUS instances for property testing - lazily instantiated by
// TokenIssuerProfile_STATUSGenerator()
var tokenIssuerProfile_STATUSGenerator gopter.Gen

// TokenIssuerProfile_STATUSGenerator returns a generator of TokenIssuerProfile_STATUS instances for property testing.
func TokenIssuerProfile_STATUSGenerator() gopter.Gen {
	if tokenIssuerProfile_STATUSGenerator != nil {
		return tokenIssuerProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTokenIssuerProfile_STATUS(generators)
	tokenIssuerProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(TokenIssuerProfile_STATUS{}), generators)

	return tokenIssuerProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTokenIssuerProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTokenIssuerProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Audiences"] = gen.SliceOf(gen.AlphaString())
	gens["Ca"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_TokenRequiredClaim_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TokenRequiredClaim_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTokenRequiredClaim_STATUS, TokenRequiredClaim_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTokenRequiredClaim_STATUS runs a test to see if a specific instance of TokenRequiredClaim_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTokenRequiredClaim_STATUS(subject TokenRequiredClaim_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TokenRequiredClaim_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TokenRequiredClaim_STATUS instances for property testing - lazily instantiated by
// TokenRequiredClaim_STATUSGenerator()
var tokenRequiredClaim_STATUSGenerator gopter.Gen

// TokenRequiredClaim_STATUSGenerator returns a generator of TokenRequiredClaim_STATUS instances for property testing.
func TokenRequiredClaim_STATUSGenerator() gopter.Gen {
	if tokenRequiredClaim_STATUSGenerator != nil {
		return tokenRequiredClaim_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTokenRequiredClaim_STATUS(generators)
	tokenRequiredClaim_STATUSGenerator = gen.Struct(reflect.TypeOf(TokenRequiredClaim_STATUS{}), generators)

	return tokenRequiredClaim_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTokenRequiredClaim_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTokenRequiredClaim_STATUS(gens map[string]gopter.Gen) {
	gens["Claim"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredValue"] = gen.PtrOf(gen.AlphaString())
}

func Test_UsernameClaimProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UsernameClaimProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUsernameClaimProfile_STATUS, UsernameClaimProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUsernameClaimProfile_STATUS runs a test to see if a specific instance of UsernameClaimProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUsernameClaimProfile_STATUS(subject UsernameClaimProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UsernameClaimProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UsernameClaimProfile_STATUS instances for property testing - lazily instantiated by
// UsernameClaimProfile_STATUSGenerator()
var usernameClaimProfile_STATUSGenerator gopter.Gen

// UsernameClaimProfile_STATUSGenerator returns a generator of UsernameClaimProfile_STATUS instances for property testing.
func UsernameClaimProfile_STATUSGenerator() gopter.Gen {
	if usernameClaimProfile_STATUSGenerator != nil {
		return usernameClaimProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUsernameClaimProfile_STATUS(generators)
	usernameClaimProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(UsernameClaimProfile_STATUS{}), generators)

	return usernameClaimProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForUsernameClaimProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUsernameClaimProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Claim"] = gen.PtrOf(gen.AlphaString())
	gens["Prefix"] = gen.PtrOf(gen.AlphaString())
	gens["PrefixPolicy"] = gen.PtrOf(gen.OneConstOf(UsernameClaimPrefixPolicy_STATUS_NoPrefix, UsernameClaimPrefixPolicy_STATUS_None, UsernameClaimPrefixPolicy_STATUS_Prefix))
}
