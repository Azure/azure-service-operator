// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

type HcpOpenShiftClustersExternalAuth_STATUS struct {
	// Id: Fully qualified resource ID for the resource. E.g.
	// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Properties: The resource-specific properties for this resource.
	Properties *ExternalAuthProperties_STATUS `json:"properties,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

// External Auth profile
type ExternalAuthProperties_STATUS struct {
	// Claim: External Auth claim
	// This configures how claims are validated and applied.
	Claim *ExternalAuthClaimProfile_STATUS `json:"claim,omitempty"`

	// Clients: External Auth OIDC clients
	// There must not be more than 20 entries and entries must have unique namespace/name pairs.
	Clients []ExternalAuthClientProfile_STATUS `json:"clients,omitempty"`

	// Condition: An observation of the current state with additional information.
	Condition *ExternalAuthCondition_STATUS `json:"condition,omitempty"`

	// Issuer: Token Issuer profile
	Issuer *TokenIssuerProfile_STATUS `json:"issuer,omitempty"`

	// ProvisioningState: Provisioning state
	ProvisioningState *ExternalAuthProvisioningState_STATUS `json:"provisioningState,omitempty"`
}

// External Auth claim profile
type ExternalAuthClaimProfile_STATUS struct {
	// Mappings: The claim mappings
	Mappings *TokenClaimMappingsProfile_STATUS `json:"mappings,omitempty"`

	// ValidationRules: The claim validation rules
	ValidationRules []TokenClaimValidationRule_STATUS `json:"validationRules,omitempty"`
}

// External Auth client profile
// This configures how on-cluster, platform clients should request tokens from the identity
// provider.
type ExternalAuthClientProfile_STATUS struct {
	// ClientId: External Auth client id
	// The clientId must appear in the audience field of the TokenIssuerProfile.
	ClientId *string `json:"clientId,omitempty"`

	// Component: External Auth client component
	Component *ExternalAuthClientComponentProfile_STATUS `json:"component,omitempty"`

	// ExtraScopes: external auth client scopes
	// This is useful if you have configured claim mappings that requires specific
	// scopes to be requested beyond the standard OIDC scopes.
	// When omitted, no additional scopes are requested.
	ExtraScopes []string `json:"extraScopes,omitempty"`

	// Type: Determines the OIDC provider client type.
	Type *ExternalAuthClientType_STATUS `json:"type,omitempty"`
}

// Condition defines an observation of the external auth state.
type ExternalAuthCondition_STATUS struct {
	// LastTransitionTime: The last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// Message: This is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `json:"message,omitempty"`

	// Reason: This contains a programmatic identifier indicating the reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`

	// Status: The status of the condition.
	Status *StatusType_STATUS `json:"status,omitempty"`

	// Type: This is a PascalCase (or in foo.example.com/PascalCase) code to represent the type of condition.
	Type *ExternalAuthConditionType_STATUS `json:"type,omitempty"`
}

// The resource provisioning state.
type ExternalAuthProvisioningState_STATUS string

const (
	ExternalAuthProvisioningState_STATUS_Accepted       = ExternalAuthProvisioningState_STATUS("Accepted")
	ExternalAuthProvisioningState_STATUS_AwaitingSecret = ExternalAuthProvisioningState_STATUS("AwaitingSecret")
	ExternalAuthProvisioningState_STATUS_Canceled       = ExternalAuthProvisioningState_STATUS("Canceled")
	ExternalAuthProvisioningState_STATUS_Deleting       = ExternalAuthProvisioningState_STATUS("Deleting")
	ExternalAuthProvisioningState_STATUS_Failed         = ExternalAuthProvisioningState_STATUS("Failed")
	ExternalAuthProvisioningState_STATUS_Provisioning   = ExternalAuthProvisioningState_STATUS("Provisioning")
	ExternalAuthProvisioningState_STATUS_Succeeded      = ExternalAuthProvisioningState_STATUS("Succeeded")
	ExternalAuthProvisioningState_STATUS_Updating       = ExternalAuthProvisioningState_STATUS("Updating")
)

// Mapping from string to ExternalAuthProvisioningState_STATUS
var externalAuthProvisioningState_STATUS_Values = map[string]ExternalAuthProvisioningState_STATUS{
	"accepted":       ExternalAuthProvisioningState_STATUS_Accepted,
	"awaitingsecret": ExternalAuthProvisioningState_STATUS_AwaitingSecret,
	"canceled":       ExternalAuthProvisioningState_STATUS_Canceled,
	"deleting":       ExternalAuthProvisioningState_STATUS_Deleting,
	"failed":         ExternalAuthProvisioningState_STATUS_Failed,
	"provisioning":   ExternalAuthProvisioningState_STATUS_Provisioning,
	"succeeded":      ExternalAuthProvisioningState_STATUS_Succeeded,
	"updating":       ExternalAuthProvisioningState_STATUS_Updating,
}

// Token issuer profile
// This configures how the platform interacts with the identity provider and
// how tokens issued from
// the identity provider are evaluated by the Kubernetes API server.
type TokenIssuerProfile_STATUS struct {
	// Audiences: This configures the acceptable audiences the JWT token, issued by the identity
	// provider, must be issued to. At least one of the entries must match the
	// 'aud' claim in the JWT token.
	// audiences must contain at least one entry and must not exceed ten entries.
	Audiences []string `json:"audiences,omitempty"`

	// Ca: The issuer of the token
	// Certificate bundle to use to validate server certificates for the configured URL.
	// It must be PEM encoded and when not specified, the system trust is used.
	Ca *string `json:"ca,omitempty"`

	// Url: This configures the URL used to issue tokens by the identity provider.
	// The Kubernetes API server determines how authentication tokens should be handled
	// by matching the 'iss' claim in the JWT to the issuerURL of configured identity providers.
	// issuerURL must use the 'https' scheme.
	Url *string `json:"url,omitempty"`
}

// External Auth component profile
// Must have unique namespace/name pairs.
type ExternalAuthClientComponentProfile_STATUS struct {
	// AuthClientNamespace: The namespace of the external Auth client
	// This specifies the namespace in which the platform component being configured
	// to use the identity provider as an authentication mode is running.
	// It is used in combination with name as a unique identifier.
	AuthClientNamespace *string `json:"authClientNamespace,omitempty"`

	// Name: The name of the external auth client
	// This specifies the name of the platform component being configured to use
	// the identity provider as an authentication mode.
	// It is used in combination with namespace as a unique identifier.
	Name *string `json:"name,omitempty"`
}

// Representation of the possible values of an external authentication client's type
// +kubebuilder:validation:Enum={"Confidential","Public"}
type ExternalAuthClientType_STATUS string

const (
	ExternalAuthClientType_STATUS_Confidential = ExternalAuthClientType_STATUS("Confidential")
	ExternalAuthClientType_STATUS_Public       = ExternalAuthClientType_STATUS("Public")
)

// Mapping from string to ExternalAuthClientType_STATUS
var externalAuthClientType_STATUS_Values = map[string]ExternalAuthClientType_STATUS{
	"confidential": ExternalAuthClientType_STATUS_Confidential,
	"public":       ExternalAuthClientType_STATUS_Public,
}

// Representation of the possible types of a external auths condition.
type ExternalAuthConditionType_STATUS string

const (
	ExternalAuthConditionType_STATUS_Available   = ExternalAuthConditionType_STATUS("Available")
	ExternalAuthConditionType_STATUS_Degraded    = ExternalAuthConditionType_STATUS("Degraded")
	ExternalAuthConditionType_STATUS_Progressing = ExternalAuthConditionType_STATUS("Progressing")
)

// Mapping from string to ExternalAuthConditionType_STATUS
var externalAuthConditionType_STATUS_Values = map[string]ExternalAuthConditionType_STATUS{
	"available":   ExternalAuthConditionType_STATUS_Available,
	"degraded":    ExternalAuthConditionType_STATUS_Degraded,
	"progressing": ExternalAuthConditionType_STATUS_Progressing,
}

// Representation of the possible values of a external auths condition status.
type StatusType_STATUS string

const (
	StatusType_STATUS_False   = StatusType_STATUS("False")
	StatusType_STATUS_True    = StatusType_STATUS("True")
	StatusType_STATUS_Unknown = StatusType_STATUS("Unknown")
)

// Mapping from string to StatusType_STATUS
var statusType_STATUS_Values = map[string]StatusType_STATUS{
	"false":   StatusType_STATUS_False,
	"true":    StatusType_STATUS_True,
	"unknown": StatusType_STATUS_Unknown,
}

// External Auth claim mappings profile.
// At a minimum username or groups must be defined.
type TokenClaimMappingsProfile_STATUS struct {
	// Groups: The claim mappings groups.
	Groups *GroupClaimProfile_STATUS `json:"groups,omitempty"`

	// Username: The claim mappings username.
	Username *UsernameClaimProfile_STATUS `json:"username,omitempty"`
}

// External Auth claim validation rule
type TokenClaimValidationRule_STATUS struct {
	// RequiredClaim: The required claim rule to be applied.
	RequiredClaim *TokenRequiredClaim_STATUS `json:"requiredClaim,omitempty"`

	// Type: This configures the type of the validation rule.
	// It defaults to "RequiredClaim"
	Type *TokenClaimValidationRule_Type_STATUS `json:"type,omitempty"`
}

// External Auth claim profile
// This configures how the groups of a cluster identity should be constructed
// from the claims
// in a JWT token issued by the identity provider. When
// referencing a claim, if the claim is present in the JWT token, its
// value
// must be a list of groups separated by a comma (',').
// For example - '"example"' and '"exampleOne", "exampleTwo",
// "exampleThree"' are valid claim values.
type GroupClaimProfile_STATUS struct {
	// Claim: Claim name of the external profile
	Claim *string `json:"claim,omitempty"`

	// Prefix: Prefix for the claim external profile
	// If this is specified prefixPolicy will be set to "Prefix" by default
	Prefix *string `json:"prefix,omitempty"`
}

type TokenClaimValidationRule_Type_STATUS string

const TokenClaimValidationRule_Type_STATUS_RequiredClaim = TokenClaimValidationRule_Type_STATUS("RequiredClaim")

// Mapping from string to TokenClaimValidationRule_Type_STATUS
var tokenClaimValidationRule_Type_STATUS_Values = map[string]TokenClaimValidationRule_Type_STATUS{
	"requiredclaim": TokenClaimValidationRule_Type_STATUS_RequiredClaim,
}

// Token required claim validation rule.
type TokenRequiredClaim_STATUS struct {
	// Claim: Claim name for the validation profile
	// claim is a required field that configures the name of the required claim.
	Claim *string `json:"claim,omitempty"`

	// RequiredValue: Required value
	// requiredValue is a required field that configures the value that 'claim' must
	// have when taken from the incoming JWT claims.
	// If the value in the JWT claims does not match, the token
	// will be rejected for authentication.
	RequiredValue *string `json:"requiredValue,omitempty"`
}

// External Auth claim profile
// This configures how the username of a cluster identity should be constructed
// from the claims
// in a JWT token issued by the identity provider.
type UsernameClaimProfile_STATUS struct {
	// Claim: Claim name of the external profile
	Claim *string `json:"claim,omitempty"`

	// Prefix: Prefix for the claim external profile
	// Must be set when the prefixPolicy field is set to 'Prefix' and must be unset
	// otherwise.
	Prefix *string `json:"prefix,omitempty"`

	// PrefixPolicy: Prefix policy is an optional field that configures how a prefix should be
	// applied to the value of the JWT claim specified in the 'claim' field.
	// Allowed values are 'Prefix', 'NoPrefix', and 'None'.
	// When set to 'Prefix', the value specified in the prefix field will be
	// prepended to the value of the JWT claim.
	// The prefix field must be set when prefixPolicy is 'Prefix'.
	// When set to 'NoPrefix', no prefix will be prepended to the value
	// of the JWT claim.
	// When set to 'None', this means no opinion and the platform is left to choose
	// any prefixes that are applied which is subject to change over time.
	// Currently, the platform prepends `{issuerURL}#` to the value of the JWT claim
	// when the claim is not 'email'.
	// As an example, consider the following scenario:
	// `prefix` is unset, `issuerURL` is set to `https://myoidc.tld`,
	// the JWT claims include "username":"userA" and "email":"userA
	PrefixPolicy *UsernameClaimPrefixPolicy_STATUS `json:"prefixPolicy,omitempty"`
}

// UsernameClaimPrefixPolicy configures whether to add a prefix to a JWT claim.
type UsernameClaimPrefixPolicy_STATUS string

const (
	UsernameClaimPrefixPolicy_STATUS_NoPrefix = UsernameClaimPrefixPolicy_STATUS("NoPrefix")
	UsernameClaimPrefixPolicy_STATUS_None     = UsernameClaimPrefixPolicy_STATUS("None")
	UsernameClaimPrefixPolicy_STATUS_Prefix   = UsernameClaimPrefixPolicy_STATUS("Prefix")
)

// Mapping from string to UsernameClaimPrefixPolicy_STATUS
var usernameClaimPrefixPolicy_STATUS_Values = map[string]UsernameClaimPrefixPolicy_STATUS{
	"noprefix": UsernameClaimPrefixPolicy_STATUS_NoPrefix,
	"none":     UsernameClaimPrefixPolicy_STATUS_None,
	"prefix":   UsernameClaimPrefixPolicy_STATUS_Prefix,
}
