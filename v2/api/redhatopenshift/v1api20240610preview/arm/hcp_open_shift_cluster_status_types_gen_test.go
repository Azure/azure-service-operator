// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApiProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiProfile_STATUS, ApiProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiProfile_STATUS runs a test to see if a specific instance of ApiProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForApiProfile_STATUS(subject ApiProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiProfile_STATUS instances for property testing - lazily instantiated by ApiProfile_STATUSGenerator()
var apiProfile_STATUSGenerator gopter.Gen

// ApiProfile_STATUSGenerator returns a generator of ApiProfile_STATUS instances for property testing.
func ApiProfile_STATUSGenerator() gopter.Gen {
	if apiProfile_STATUSGenerator != nil {
		return apiProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiProfile_STATUS(generators)
	apiProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ApiProfile_STATUS{}), generators)

	return apiProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForApiProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiProfile_STATUS(gens map[string]gopter.Gen) {
	gens["AuthorizedCidrs"] = gen.SliceOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
	gens["Visibility"] = gen.PtrOf(gen.OneConstOf(ApiProfile_Visibility_STATUS_Private, ApiProfile_Visibility_STATUS_Public))
}

func Test_ClusterAutoscalingProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterAutoscalingProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterAutoscalingProfile_STATUS, ClusterAutoscalingProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterAutoscalingProfile_STATUS runs a test to see if a specific instance of ClusterAutoscalingProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterAutoscalingProfile_STATUS(subject ClusterAutoscalingProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterAutoscalingProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterAutoscalingProfile_STATUS instances for property testing - lazily instantiated by
// ClusterAutoscalingProfile_STATUSGenerator()
var clusterAutoscalingProfile_STATUSGenerator gopter.Gen

// ClusterAutoscalingProfile_STATUSGenerator returns a generator of ClusterAutoscalingProfile_STATUS instances for property testing.
func ClusterAutoscalingProfile_STATUSGenerator() gopter.Gen {
	if clusterAutoscalingProfile_STATUSGenerator != nil {
		return clusterAutoscalingProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterAutoscalingProfile_STATUS(generators)
	clusterAutoscalingProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ClusterAutoscalingProfile_STATUS{}), generators)

	return clusterAutoscalingProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForClusterAutoscalingProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterAutoscalingProfile_STATUS(gens map[string]gopter.Gen) {
	gens["MaxNodeProvisionTimeSeconds"] = gen.PtrOf(gen.Int())
	gens["MaxNodesTotal"] = gen.PtrOf(gen.Int())
	gens["MaxPodGracePeriodSeconds"] = gen.PtrOf(gen.Int())
	gens["PodPriorityThreshold"] = gen.PtrOf(gen.Int())
}

func Test_ClusterImageRegistryProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterImageRegistryProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterImageRegistryProfile_STATUS, ClusterImageRegistryProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterImageRegistryProfile_STATUS runs a test to see if a specific instance of ClusterImageRegistryProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterImageRegistryProfile_STATUS(subject ClusterImageRegistryProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterImageRegistryProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterImageRegistryProfile_STATUS instances for property testing - lazily instantiated by
// ClusterImageRegistryProfile_STATUSGenerator()
var clusterImageRegistryProfile_STATUSGenerator gopter.Gen

// ClusterImageRegistryProfile_STATUSGenerator returns a generator of ClusterImageRegistryProfile_STATUS instances for property testing.
func ClusterImageRegistryProfile_STATUSGenerator() gopter.Gen {
	if clusterImageRegistryProfile_STATUSGenerator != nil {
		return clusterImageRegistryProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterImageRegistryProfile_STATUS(generators)
	clusterImageRegistryProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ClusterImageRegistryProfile_STATUS{}), generators)

	return clusterImageRegistryProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForClusterImageRegistryProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterImageRegistryProfile_STATUS(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.OneConstOf(ClusterImageRegistryProfile_State_STATUS_Disabled, ClusterImageRegistryProfile_State_STATUS_Enabled))
}

func Test_ConsoleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsoleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsoleProfile_STATUS, ConsoleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsoleProfile_STATUS runs a test to see if a specific instance of ConsoleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForConsoleProfile_STATUS(subject ConsoleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsoleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsoleProfile_STATUS instances for property testing - lazily instantiated by
// ConsoleProfile_STATUSGenerator()
var consoleProfile_STATUSGenerator gopter.Gen

// ConsoleProfile_STATUSGenerator returns a generator of ConsoleProfile_STATUS instances for property testing.
func ConsoleProfile_STATUSGenerator() gopter.Gen {
	if consoleProfile_STATUSGenerator != nil {
		return consoleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsoleProfile_STATUS(generators)
	consoleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ConsoleProfile_STATUS{}), generators)

	return consoleProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForConsoleProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsoleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_CustomerManagedEncryptionProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomerManagedEncryptionProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomerManagedEncryptionProfile_STATUS, CustomerManagedEncryptionProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomerManagedEncryptionProfile_STATUS runs a test to see if a specific instance of CustomerManagedEncryptionProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomerManagedEncryptionProfile_STATUS(subject CustomerManagedEncryptionProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomerManagedEncryptionProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomerManagedEncryptionProfile_STATUS instances for property testing - lazily instantiated by
// CustomerManagedEncryptionProfile_STATUSGenerator()
var customerManagedEncryptionProfile_STATUSGenerator gopter.Gen

// CustomerManagedEncryptionProfile_STATUSGenerator returns a generator of CustomerManagedEncryptionProfile_STATUS instances for property testing.
// We first initialize customerManagedEncryptionProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomerManagedEncryptionProfile_STATUSGenerator() gopter.Gen {
	if customerManagedEncryptionProfile_STATUSGenerator != nil {
		return customerManagedEncryptionProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomerManagedEncryptionProfile_STATUS(generators)
	customerManagedEncryptionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(CustomerManagedEncryptionProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomerManagedEncryptionProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForCustomerManagedEncryptionProfile_STATUS(generators)
	customerManagedEncryptionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(CustomerManagedEncryptionProfile_STATUS{}), generators)

	return customerManagedEncryptionProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCustomerManagedEncryptionProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomerManagedEncryptionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["EncryptionType"] = gen.PtrOf(gen.OneConstOf(CustomerManagedEncryptionProfile_EncryptionType_STATUS_KMS))
}

// AddRelatedPropertyGeneratorsForCustomerManagedEncryptionProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomerManagedEncryptionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Kms"] = gen.PtrOf(KmsEncryptionProfile_STATUSGenerator())
}

func Test_DnsProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsProfile_STATUS, DnsProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsProfile_STATUS runs a test to see if a specific instance of DnsProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsProfile_STATUS(subject DnsProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsProfile_STATUS instances for property testing - lazily instantiated by DnsProfile_STATUSGenerator()
var dnsProfile_STATUSGenerator gopter.Gen

// DnsProfile_STATUSGenerator returns a generator of DnsProfile_STATUS instances for property testing.
func DnsProfile_STATUSGenerator() gopter.Gen {
	if dnsProfile_STATUSGenerator != nil {
		return dnsProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsProfile_STATUS(generators)
	dnsProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsProfile_STATUS{}), generators)

	return dnsProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDnsProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsProfile_STATUS(gens map[string]gopter.Gen) {
	gens["BaseDomain"] = gen.PtrOf(gen.AlphaString())
	gens["BaseDomainPrefix"] = gen.PtrOf(gen.AlphaString())
}

func Test_EtcdDataEncryptionProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EtcdDataEncryptionProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEtcdDataEncryptionProfile_STATUS, EtcdDataEncryptionProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEtcdDataEncryptionProfile_STATUS runs a test to see if a specific instance of EtcdDataEncryptionProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForEtcdDataEncryptionProfile_STATUS(subject EtcdDataEncryptionProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EtcdDataEncryptionProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EtcdDataEncryptionProfile_STATUS instances for property testing - lazily instantiated by
// EtcdDataEncryptionProfile_STATUSGenerator()
var etcdDataEncryptionProfile_STATUSGenerator gopter.Gen

// EtcdDataEncryptionProfile_STATUSGenerator returns a generator of EtcdDataEncryptionProfile_STATUS instances for property testing.
// We first initialize etcdDataEncryptionProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EtcdDataEncryptionProfile_STATUSGenerator() gopter.Gen {
	if etcdDataEncryptionProfile_STATUSGenerator != nil {
		return etcdDataEncryptionProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEtcdDataEncryptionProfile_STATUS(generators)
	etcdDataEncryptionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(EtcdDataEncryptionProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEtcdDataEncryptionProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForEtcdDataEncryptionProfile_STATUS(generators)
	etcdDataEncryptionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(EtcdDataEncryptionProfile_STATUS{}), generators)

	return etcdDataEncryptionProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForEtcdDataEncryptionProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEtcdDataEncryptionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["KeyManagementMode"] = gen.PtrOf(gen.OneConstOf(EtcdDataEncryptionProfile_KeyManagementMode_STATUS_CustomerManaged, EtcdDataEncryptionProfile_KeyManagementMode_STATUS_PlatformManaged))
}

// AddRelatedPropertyGeneratorsForEtcdDataEncryptionProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEtcdDataEncryptionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["CustomerManaged"] = gen.PtrOf(CustomerManagedEncryptionProfile_STATUSGenerator())
}

func Test_EtcdProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EtcdProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEtcdProfile_STATUS, EtcdProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEtcdProfile_STATUS runs a test to see if a specific instance of EtcdProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForEtcdProfile_STATUS(subject EtcdProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EtcdProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EtcdProfile_STATUS instances for property testing - lazily instantiated by EtcdProfile_STATUSGenerator()
var etcdProfile_STATUSGenerator gopter.Gen

// EtcdProfile_STATUSGenerator returns a generator of EtcdProfile_STATUS instances for property testing.
func EtcdProfile_STATUSGenerator() gopter.Gen {
	if etcdProfile_STATUSGenerator != nil {
		return etcdProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForEtcdProfile_STATUS(generators)
	etcdProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(EtcdProfile_STATUS{}), generators)

	return etcdProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForEtcdProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEtcdProfile_STATUS(gens map[string]gopter.Gen) {
	gens["DataEncryption"] = gen.PtrOf(EtcdDataEncryptionProfile_STATUSGenerator())
}

func Test_HcpOpenShiftClusterProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClusterProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClusterProperties_STATUS, HcpOpenShiftClusterProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClusterProperties_STATUS runs a test to see if a specific instance of HcpOpenShiftClusterProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClusterProperties_STATUS(subject HcpOpenShiftClusterProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClusterProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClusterProperties_STATUS instances for property testing - lazily instantiated by
// HcpOpenShiftClusterProperties_STATUSGenerator()
var hcpOpenShiftClusterProperties_STATUSGenerator gopter.Gen

// HcpOpenShiftClusterProperties_STATUSGenerator returns a generator of HcpOpenShiftClusterProperties_STATUS instances for property testing.
// We first initialize hcpOpenShiftClusterProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HcpOpenShiftClusterProperties_STATUSGenerator() gopter.Gen {
	if hcpOpenShiftClusterProperties_STATUSGenerator != nil {
		return hcpOpenShiftClusterProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClusterProperties_STATUS(generators)
	hcpOpenShiftClusterProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClusterProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClusterProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForHcpOpenShiftClusterProperties_STATUS(generators)
	hcpOpenShiftClusterProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClusterProperties_STATUS{}), generators)

	return hcpOpenShiftClusterProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForHcpOpenShiftClusterProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHcpOpenShiftClusterProperties_STATUS(gens map[string]gopter.Gen) {
	gens["NodeDrainTimeoutMinutes"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Accepted,
		ProvisioningState_STATUS_Canceled,
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Provisioning,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftClusterProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftClusterProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Api"] = gen.PtrOf(ApiProfile_STATUSGenerator())
	gens["Autoscaling"] = gen.PtrOf(ClusterAutoscalingProfile_STATUSGenerator())
	gens["ClusterImageRegistry"] = gen.PtrOf(ClusterImageRegistryProfile_STATUSGenerator())
	gens["Console"] = gen.PtrOf(ConsoleProfile_STATUSGenerator())
	gens["Dns"] = gen.PtrOf(DnsProfile_STATUSGenerator())
	gens["Etcd"] = gen.PtrOf(EtcdProfile_STATUSGenerator())
	gens["Network"] = gen.PtrOf(NetworkProfile_STATUSGenerator())
	gens["Platform"] = gen.PtrOf(PlatformProfile_STATUSGenerator())
	gens["Version"] = gen.PtrOf(VersionProfile_STATUSGenerator())
}

func Test_HcpOpenShiftCluster_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftCluster_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftCluster_STATUS, HcpOpenShiftCluster_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftCluster_STATUS runs a test to see if a specific instance of HcpOpenShiftCluster_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftCluster_STATUS(subject HcpOpenShiftCluster_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftCluster_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftCluster_STATUS instances for property testing - lazily instantiated by
// HcpOpenShiftCluster_STATUSGenerator()
var hcpOpenShiftCluster_STATUSGenerator gopter.Gen

// HcpOpenShiftCluster_STATUSGenerator returns a generator of HcpOpenShiftCluster_STATUS instances for property testing.
// We first initialize hcpOpenShiftCluster_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HcpOpenShiftCluster_STATUSGenerator() gopter.Gen {
	if hcpOpenShiftCluster_STATUSGenerator != nil {
		return hcpOpenShiftCluster_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftCluster_STATUS(generators)
	hcpOpenShiftCluster_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftCluster_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftCluster_STATUS(generators)
	AddRelatedPropertyGeneratorsForHcpOpenShiftCluster_STATUS(generators)
	hcpOpenShiftCluster_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftCluster_STATUS{}), generators)

	return hcpOpenShiftCluster_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForHcpOpenShiftCluster_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHcpOpenShiftCluster_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftCluster_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftCluster_STATUS(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUSGenerator())
	gens["Properties"] = gen.PtrOf(HcpOpenShiftClusterProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_KmsEncryptionProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KmsEncryptionProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKmsEncryptionProfile_STATUS, KmsEncryptionProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKmsEncryptionProfile_STATUS runs a test to see if a specific instance of KmsEncryptionProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForKmsEncryptionProfile_STATUS(subject KmsEncryptionProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KmsEncryptionProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KmsEncryptionProfile_STATUS instances for property testing - lazily instantiated by
// KmsEncryptionProfile_STATUSGenerator()
var kmsEncryptionProfile_STATUSGenerator gopter.Gen

// KmsEncryptionProfile_STATUSGenerator returns a generator of KmsEncryptionProfile_STATUS instances for property testing.
func KmsEncryptionProfile_STATUSGenerator() gopter.Gen {
	if kmsEncryptionProfile_STATUSGenerator != nil {
		return kmsEncryptionProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForKmsEncryptionProfile_STATUS(generators)
	kmsEncryptionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(KmsEncryptionProfile_STATUS{}), generators)

	return kmsEncryptionProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForKmsEncryptionProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKmsEncryptionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["ActiveKey"] = gen.PtrOf(KmsKey_STATUSGenerator())
}

func Test_KmsKey_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KmsKey_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKmsKey_STATUS, KmsKey_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKmsKey_STATUS runs a test to see if a specific instance of KmsKey_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForKmsKey_STATUS(subject KmsKey_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KmsKey_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KmsKey_STATUS instances for property testing - lazily instantiated by KmsKey_STATUSGenerator()
var kmsKey_STATUSGenerator gopter.Gen

// KmsKey_STATUSGenerator returns a generator of KmsKey_STATUS instances for property testing.
func KmsKey_STATUSGenerator() gopter.Gen {
	if kmsKey_STATUSGenerator != nil {
		return kmsKey_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKmsKey_STATUS(generators)
	kmsKey_STATUSGenerator = gen.Struct(reflect.TypeOf(KmsKey_STATUS{}), generators)

	return kmsKey_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForKmsKey_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKmsKey_STATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedServiceIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS, ManagedServiceIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS runs a test to see if a specific instance of ManagedServiceIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS(subject ManagedServiceIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUSGenerator()
var managedServiceIdentity_STATUSGenerator gopter.Gen

// ManagedServiceIdentity_STATUSGenerator returns a generator of ManagedServiceIdentity_STATUS instances for property testing.
// We first initialize managedServiceIdentity_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUSGenerator() gopter.Gen {
	if managedServiceIdentity_STATUSGenerator != nil {
		return managedServiceIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	return managedServiceIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentityType_STATUS_None,
		ManagedServiceIdentityType_STATUS_SystemAssigned,
		ManagedServiceIdentityType_STATUS_SystemAssignedUserAssigned,
		ManagedServiceIdentityType_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserAssignedIdentity_STATUSGenerator())
}

func Test_NetworkProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkProfile_STATUS, NetworkProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkProfile_STATUS runs a test to see if a specific instance of NetworkProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkProfile_STATUS(subject NetworkProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkProfile_STATUS instances for property testing - lazily instantiated by
// NetworkProfile_STATUSGenerator()
var networkProfile_STATUSGenerator gopter.Gen

// NetworkProfile_STATUSGenerator returns a generator of NetworkProfile_STATUS instances for property testing.
func NetworkProfile_STATUSGenerator() gopter.Gen {
	if networkProfile_STATUSGenerator != nil {
		return networkProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkProfile_STATUS(generators)
	networkProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(NetworkProfile_STATUS{}), generators)

	return networkProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNetworkProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkProfile_STATUS(gens map[string]gopter.Gen) {
	gens["HostPrefix"] = gen.PtrOf(gen.Int())
	gens["MachineCidr"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkType"] = gen.PtrOf(gen.OneConstOf(NetworkProfile_NetworkType_STATUS_OVNKubernetes, NetworkProfile_NetworkType_STATUS_Other))
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

func Test_OperatorsAuthenticationProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OperatorsAuthenticationProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOperatorsAuthenticationProfile_STATUS, OperatorsAuthenticationProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOperatorsAuthenticationProfile_STATUS runs a test to see if a specific instance of OperatorsAuthenticationProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForOperatorsAuthenticationProfile_STATUS(subject OperatorsAuthenticationProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OperatorsAuthenticationProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OperatorsAuthenticationProfile_STATUS instances for property testing - lazily instantiated by
// OperatorsAuthenticationProfile_STATUSGenerator()
var operatorsAuthenticationProfile_STATUSGenerator gopter.Gen

// OperatorsAuthenticationProfile_STATUSGenerator returns a generator of OperatorsAuthenticationProfile_STATUS instances for property testing.
func OperatorsAuthenticationProfile_STATUSGenerator() gopter.Gen {
	if operatorsAuthenticationProfile_STATUSGenerator != nil {
		return operatorsAuthenticationProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForOperatorsAuthenticationProfile_STATUS(generators)
	operatorsAuthenticationProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(OperatorsAuthenticationProfile_STATUS{}), generators)

	return operatorsAuthenticationProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForOperatorsAuthenticationProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOperatorsAuthenticationProfile_STATUS(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.PtrOf(UserAssignedIdentitiesProfile_STATUSGenerator())
}

func Test_PlatformProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PlatformProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlatformProfile_STATUS, PlatformProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlatformProfile_STATUS runs a test to see if a specific instance of PlatformProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPlatformProfile_STATUS(subject PlatformProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PlatformProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PlatformProfile_STATUS instances for property testing - lazily instantiated by
// PlatformProfile_STATUSGenerator()
var platformProfile_STATUSGenerator gopter.Gen

// PlatformProfile_STATUSGenerator returns a generator of PlatformProfile_STATUS instances for property testing.
// We first initialize platformProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PlatformProfile_STATUSGenerator() gopter.Gen {
	if platformProfile_STATUSGenerator != nil {
		return platformProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlatformProfile_STATUS(generators)
	platformProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(PlatformProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlatformProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForPlatformProfile_STATUS(generators)
	platformProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(PlatformProfile_STATUS{}), generators)

	return platformProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPlatformProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlatformProfile_STATUS(gens map[string]gopter.Gen) {
	gens["IssuerUrl"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkSecurityGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["OutboundType"] = gen.PtrOf(gen.OneConstOf(PlatformProfile_OutboundType_STATUS_LoadBalancer))
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPlatformProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPlatformProfile_STATUS(gens map[string]gopter.Gen) {
	gens["OperatorsAuthentication"] = gen.PtrOf(OperatorsAuthenticationProfile_STATUSGenerator())
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}

func Test_UserAssignedIdentitiesProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentitiesProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentitiesProfile_STATUS, UserAssignedIdentitiesProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentitiesProfile_STATUS runs a test to see if a specific instance of UserAssignedIdentitiesProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentitiesProfile_STATUS(subject UserAssignedIdentitiesProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentitiesProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentitiesProfile_STATUS instances for property testing - lazily instantiated by
// UserAssignedIdentitiesProfile_STATUSGenerator()
var userAssignedIdentitiesProfile_STATUSGenerator gopter.Gen

// UserAssignedIdentitiesProfile_STATUSGenerator returns a generator of UserAssignedIdentitiesProfile_STATUS instances for property testing.
func UserAssignedIdentitiesProfile_STATUSGenerator() gopter.Gen {
	if userAssignedIdentitiesProfile_STATUSGenerator != nil {
		return userAssignedIdentitiesProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentitiesProfile_STATUS(generators)
	userAssignedIdentitiesProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentitiesProfile_STATUS{}), generators)

	return userAssignedIdentitiesProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentitiesProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentitiesProfile_STATUS(gens map[string]gopter.Gen) {
	gens["ControlPlaneOperators"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["DataPlaneOperators"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["ServiceManagedIdentity"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_STATUS, UserAssignedIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_STATUS runs a test to see if a specific instance of UserAssignedIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_STATUS(subject UserAssignedIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUS instances for property testing - lazily instantiated by
// UserAssignedIdentity_STATUSGenerator()
var userAssignedIdentity_STATUSGenerator gopter.Gen

// UserAssignedIdentity_STATUSGenerator returns a generator of UserAssignedIdentity_STATUS instances for property testing.
func UserAssignedIdentity_STATUSGenerator() gopter.Gen {
	if userAssignedIdentity_STATUSGenerator != nil {
		return userAssignedIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS(generators)
	userAssignedIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUS{}), generators)

	return userAssignedIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VersionProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VersionProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVersionProfile_STATUS, VersionProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVersionProfile_STATUS runs a test to see if a specific instance of VersionProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForVersionProfile_STATUS(subject VersionProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VersionProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VersionProfile_STATUS instances for property testing - lazily instantiated by
// VersionProfile_STATUSGenerator()
var versionProfile_STATUSGenerator gopter.Gen

// VersionProfile_STATUSGenerator returns a generator of VersionProfile_STATUS instances for property testing.
func VersionProfile_STATUSGenerator() gopter.Gen {
	if versionProfile_STATUSGenerator != nil {
		return versionProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVersionProfile_STATUS(generators)
	versionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(VersionProfile_STATUS{}), generators)

	return versionProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForVersionProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVersionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["ChannelGroup"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
