// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=redhatopenshift.azure.com,resources=hcpopenshiftclustersnodepools,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=redhatopenshift.azure.com,resources={hcpopenshiftclustersnodepools/status,hcpopenshiftclustersnodepools/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,redhatopenshift}
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20240610preview.HcpOpenShiftClustersNodePool
// Generator information:
// - Generated from: /redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/hcpclusters/preview/2024-06-10-preview/openapi.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/{hcpOpenShiftClusterName}/nodePools/{nodePoolName}
type HcpOpenShiftClustersNodePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HcpOpenShiftClustersNodePool_Spec   `json:"spec,omitempty"`
	Status            HcpOpenShiftClustersNodePool_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &HcpOpenShiftClustersNodePool{}

// GetConditions returns the conditions of the resource
func (pool *HcpOpenShiftClustersNodePool) GetConditions() conditions.Conditions {
	return pool.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (pool *HcpOpenShiftClustersNodePool) SetConditions(conditions conditions.Conditions) {
	pool.Status.Conditions = conditions
}

var _ configmaps.Exporter = &HcpOpenShiftClustersNodePool{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (pool *HcpOpenShiftClustersNodePool) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if pool.Spec.OperatorSpec == nil {
		return nil
	}
	return pool.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &HcpOpenShiftClustersNodePool{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (pool *HcpOpenShiftClustersNodePool) SecretDestinationExpressions() []*core.DestinationExpression {
	if pool.Spec.OperatorSpec == nil {
		return nil
	}
	return pool.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &HcpOpenShiftClustersNodePool{}

// AzureName returns the Azure name of the resource
func (pool *HcpOpenShiftClustersNodePool) AzureName() string {
	return pool.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-06-10-preview"
func (pool HcpOpenShiftClustersNodePool) GetAPIVersion() string {
	return "2024-06-10-preview"
}

// GetResourceScope returns the scope of the resource
func (pool *HcpOpenShiftClustersNodePool) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (pool *HcpOpenShiftClustersNodePool) GetSpec() genruntime.ConvertibleSpec {
	return &pool.Spec
}

// GetStatus returns the status of this resource
func (pool *HcpOpenShiftClustersNodePool) GetStatus() genruntime.ConvertibleStatus {
	return &pool.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (pool *HcpOpenShiftClustersNodePool) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.RedHatOpenShift/hcpOpenShiftClusters/nodePools"
func (pool *HcpOpenShiftClustersNodePool) GetType() string {
	return "Microsoft.RedHatOpenShift/hcpOpenShiftClusters/nodePools"
}

// NewEmptyStatus returns a new empty (blank) status
func (pool *HcpOpenShiftClustersNodePool) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &HcpOpenShiftClustersNodePool_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (pool *HcpOpenShiftClustersNodePool) Owner() *genruntime.ResourceReference {
	if pool.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(pool.Spec)
	return pool.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (pool *HcpOpenShiftClustersNodePool) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*HcpOpenShiftClustersNodePool_STATUS); ok {
		pool.Status = *st
		return nil
	}

	// Convert status to required version
	var st HcpOpenShiftClustersNodePool_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	pool.Status = st
	return nil
}

// Hub marks that this HcpOpenShiftClustersNodePool is the hub type for conversion
func (pool *HcpOpenShiftClustersNodePool) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (pool *HcpOpenShiftClustersNodePool) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: pool.Spec.OriginalVersion,
		Kind:    "HcpOpenShiftClustersNodePool",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20240610preview.HcpOpenShiftClustersNodePool
// Generator information:
// - Generated from: /redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/hcpclusters/preview/2024-06-10-preview/openapi.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/hcpOpenShiftClusters/{hcpOpenShiftClusterName}/nodePools/{nodePoolName}
type HcpOpenShiftClustersNodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HcpOpenShiftClustersNodePool `json:"items"`
}

// Storage version of v1api20240610preview.HcpOpenShiftClustersNodePool_Spec
type HcpOpenShiftClustersNodePool_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string                                    `json:"azureName,omitempty"`
	Identity        *ManagedServiceIdentity                   `json:"identity,omitempty"`
	Location        *string                                   `json:"location,omitempty"`
	OperatorSpec    *HcpOpenShiftClustersNodePoolOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion string                                    `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a redhatopenshift.azure.com/HcpOpenShiftCluster resource
	Owner       *genruntime.KnownResourceReference `group:"redhatopenshift.azure.com" json:"owner,omitempty" kind:"HcpOpenShiftCluster"`
	Properties  *NodePoolProperties                `json:"properties,omitempty"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Tags        map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &HcpOpenShiftClustersNodePool_Spec{}

// ConvertSpecFrom populates our HcpOpenShiftClustersNodePool_Spec from the provided source
func (pool *HcpOpenShiftClustersNodePool_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == pool {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(pool)
}

// ConvertSpecTo populates the provided destination from our HcpOpenShiftClustersNodePool_Spec
func (pool *HcpOpenShiftClustersNodePool_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == pool {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(pool)
}

// Storage version of v1api20240610preview.HcpOpenShiftClustersNodePool_STATUS
type HcpOpenShiftClustersNodePool_STATUS struct {
	Conditions  []conditions.Condition         `json:"conditions,omitempty"`
	Id          *string                        `json:"id,omitempty"`
	Identity    *ManagedServiceIdentity_STATUS `json:"identity,omitempty"`
	Location    *string                        `json:"location,omitempty"`
	Name        *string                        `json:"name,omitempty"`
	Properties  *NodePoolProperties_STATUS     `json:"properties,omitempty"`
	PropertyBag genruntime.PropertyBag         `json:"$propertyBag,omitempty"`
	SystemData  *SystemData_STATUS             `json:"systemData,omitempty"`
	Tags        map[string]string              `json:"tags,omitempty"`
	Type        *string                        `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &HcpOpenShiftClustersNodePool_STATUS{}

// ConvertStatusFrom populates our HcpOpenShiftClustersNodePool_STATUS from the provided source
func (pool *HcpOpenShiftClustersNodePool_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == pool {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(pool)
}

// ConvertStatusTo populates the provided destination from our HcpOpenShiftClustersNodePool_STATUS
func (pool *HcpOpenShiftClustersNodePool_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == pool {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(pool)
}

// Storage version of v1api20240610preview.HcpOpenShiftClustersNodePoolOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type HcpOpenShiftClustersNodePoolOperatorSpec struct {
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SecretExpressions    []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolProperties
// Represents the node pool properties
type NodePoolProperties struct {
	AutoRepair              *bool                    `json:"autoRepair,omitempty"`
	AutoScaling             *NodePoolAutoScaling     `json:"autoScaling,omitempty"`
	Labels                  []Label                  `json:"labels,omitempty"`
	NodeDrainTimeoutMinutes *int                     `json:"nodeDrainTimeoutMinutes,omitempty"`
	Platform                *NodePoolPlatformProfile `json:"platform,omitempty"`
	PropertyBag             genruntime.PropertyBag   `json:"$propertyBag,omitempty"`
	Replicas                *int                     `json:"replicas,omitempty"`
	Taints                  []Taint                  `json:"taints,omitempty"`
	Version                 *NodePoolVersionProfile  `json:"version,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolProperties_STATUS
// Represents the node pool properties
type NodePoolProperties_STATUS struct {
	AutoRepair              *bool                           `json:"autoRepair,omitempty"`
	AutoScaling             *NodePoolAutoScaling_STATUS     `json:"autoScaling,omitempty"`
	Labels                  []Label_STATUS                  `json:"labels,omitempty"`
	NodeDrainTimeoutMinutes *int                            `json:"nodeDrainTimeoutMinutes,omitempty"`
	Platform                *NodePoolPlatformProfile_STATUS `json:"platform,omitempty"`
	PropertyBag             genruntime.PropertyBag          `json:"$propertyBag,omitempty"`
	ProvisioningState       *string                         `json:"provisioningState,omitempty"`
	Replicas                *int                            `json:"replicas,omitempty"`
	Taints                  []Taint_STATUS                  `json:"taints,omitempty"`
	Version                 *NodePoolVersionProfile_STATUS  `json:"version,omitempty"`
}

// Storage version of v1api20240610preview.Label
// Label represents the Kubernetes label
type Label struct {
	Key         *string                `json:"key,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// Storage version of v1api20240610preview.Label_STATUS
// Label represents the Kubernetes label
type Label_STATUS struct {
	Key         *string                `json:"key,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolAutoScaling
// Node pool autoscaling
type NodePoolAutoScaling struct {
	Max         *int                   `json:"max,omitempty"`
	Min         *int                   `json:"min,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolAutoScaling_STATUS
// Node pool autoscaling
type NodePoolAutoScaling_STATUS struct {
	Max         *int                   `json:"max,omitempty"`
	Min         *int                   `json:"min,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolPlatformProfile
// Azure node pool platform configuration
type NodePoolPlatformProfile struct {
	AvailabilityZone       *string                `json:"availabilityZone,omitempty"`
	EnableEncryptionAtHost *bool                  `json:"enableEncryptionAtHost,omitempty"`
	OsDisk                 *OsDiskProfile         `json:"osDisk,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`

	// SubnetReference: The Azure resource ID of the worker subnet
	// Note that a subnet cannot be reused between ARO-HCP Clusters, however the
	// same subnet can be used for NodePools of the same cluster.
	SubnetReference *genruntime.ResourceReference `armReference:"SubnetId" json:"subnetReference,omitempty"`
	VmSize          *string                       `json:"vmSize,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolPlatformProfile_STATUS
// Azure node pool platform configuration
type NodePoolPlatformProfile_STATUS struct {
	AvailabilityZone       *string                `json:"availabilityZone,omitempty"`
	EnableEncryptionAtHost *bool                  `json:"enableEncryptionAtHost,omitempty"`
	OsDisk                 *OsDiskProfile_STATUS  `json:"osDisk,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SubnetId               *string                `json:"subnetId,omitempty"`
	VmSize                 *string                `json:"vmSize,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolVersionProfile
// Versions represents an OpenShift version.
type NodePoolVersionProfile struct {
	ChannelGroup *string                `json:"channelGroup,omitempty"`
	Id           *string                `json:"id,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240610preview.NodePoolVersionProfile_STATUS
// Versions represents an OpenShift version.
type NodePoolVersionProfile_STATUS struct {
	ChannelGroup *string                `json:"channelGroup,omitempty"`
	Id           *string                `json:"id,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20240610preview.Taint
// Taint is controlling the node taint and its effects
type Taint struct {
	Effect      *string                `json:"effect,omitempty"`
	Key         *string                `json:"key,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// Storage version of v1api20240610preview.Taint_STATUS
// Taint is controlling the node taint and its effects
type Taint_STATUS struct {
	Effect      *string                `json:"effect,omitempty"`
	Key         *string                `json:"key,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// Storage version of v1api20240610preview.OsDiskProfile
// The settings and configuration options for OSDisk
type OsDiskProfile struct {
	DiskStorageAccountType *string `json:"diskStorageAccountType,omitempty"`

	// EncryptionSetReference: The ID of the DiskEncryptionSet resource to use to encrypt the OS disks for the VMs.
	// This needs to exist in the same subscription id listed in the Hosted Cluster,
	// HostedCluster.Spec.Platform.Azure.SubscriptionID.
	// DiskEncryptionSetID should also exist in a resource group under the same subscription id and the same location
	// listed in the Hosted Cluster, HostedCluster.Spec.Platform.Azure.Location.
	// Details on how to create a Disk Encryption Set can be found here:
	// https://learn.microsoft.com/en-us/azure/virtual-machines/disks-enable-customer-managed-keys-portal#set-up-your-disk-encryption-set
	EncryptionSetReference *genruntime.ResourceReference `armReference:"EncryptionSetId" json:"encryptionSetReference,omitempty"`
	PropertyBag            genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SizeGiB                *int                          `json:"sizeGiB,omitempty"`
}

// Storage version of v1api20240610preview.OsDiskProfile_STATUS
// The settings and configuration options for OSDisk
type OsDiskProfile_STATUS struct {
	DiskStorageAccountType *string                `json:"diskStorageAccountType,omitempty"`
	EncryptionSetId        *string                `json:"encryptionSetId,omitempty"`
	PropertyBag            genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SizeGiB                *int                   `json:"sizeGiB,omitempty"`
}

func init() {
	SchemeBuilder.Register(&HcpOpenShiftClustersNodePool{}, &HcpOpenShiftClustersNodePoolList{})
}
