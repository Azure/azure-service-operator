// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240610preview

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/redhatopenshift/v1api20240610preview/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_HcpOpenShiftClustersNodePool_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HcpOpenShiftClustersNodePool to hub returns original",
		prop.ForAll(RunResourceConversionTestForHcpOpenShiftClustersNodePool, HcpOpenShiftClustersNodePoolGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForHcpOpenShiftClustersNodePool tests if a specific instance of HcpOpenShiftClustersNodePool round trips to the hub storage version and back losslessly
func RunResourceConversionTestForHcpOpenShiftClustersNodePool(subject HcpOpenShiftClustersNodePool) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.HcpOpenShiftClustersNodePool
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual HcpOpenShiftClustersNodePool
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HcpOpenShiftClustersNodePool_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HcpOpenShiftClustersNodePool to HcpOpenShiftClustersNodePool via AssignProperties_To_HcpOpenShiftClustersNodePool & AssignProperties_From_HcpOpenShiftClustersNodePool returns original",
		prop.ForAll(RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool, HcpOpenShiftClustersNodePoolGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool tests if a specific instance of HcpOpenShiftClustersNodePool can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool(subject HcpOpenShiftClustersNodePool) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.HcpOpenShiftClustersNodePool
	err := copied.AssignProperties_To_HcpOpenShiftClustersNodePool(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HcpOpenShiftClustersNodePool
	err = actual.AssignProperties_From_HcpOpenShiftClustersNodePool(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HcpOpenShiftClustersNodePool_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClustersNodePool via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClustersNodePool, HcpOpenShiftClustersNodePoolGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClustersNodePool runs a test to see if a specific instance of HcpOpenShiftClustersNodePool round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClustersNodePool(subject HcpOpenShiftClustersNodePool) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClustersNodePool
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClustersNodePool instances for property testing - lazily instantiated by
// HcpOpenShiftClustersNodePoolGenerator()
var hcpOpenShiftClustersNodePoolGenerator gopter.Gen

// HcpOpenShiftClustersNodePoolGenerator returns a generator of HcpOpenShiftClustersNodePool instances for property testing.
func HcpOpenShiftClustersNodePoolGenerator() gopter.Gen {
	if hcpOpenShiftClustersNodePoolGenerator != nil {
		return hcpOpenShiftClustersNodePoolGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool(generators)
	hcpOpenShiftClustersNodePoolGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool{}), generators)

	return hcpOpenShiftClustersNodePoolGenerator
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool(gens map[string]gopter.Gen) {
	gens["Spec"] = HcpOpenShiftClustersNodePool_SpecGenerator()
	gens["Status"] = HcpOpenShiftClustersNodePool_STATUSGenerator()
}

func Test_HcpOpenShiftClustersNodePoolOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HcpOpenShiftClustersNodePoolOperatorSpec to HcpOpenShiftClustersNodePoolOperatorSpec via AssignProperties_To_HcpOpenShiftClustersNodePoolOperatorSpec & AssignProperties_From_HcpOpenShiftClustersNodePoolOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForHcpOpenShiftClustersNodePoolOperatorSpec, HcpOpenShiftClustersNodePoolOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHcpOpenShiftClustersNodePoolOperatorSpec tests if a specific instance of HcpOpenShiftClustersNodePoolOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForHcpOpenShiftClustersNodePoolOperatorSpec(subject HcpOpenShiftClustersNodePoolOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.HcpOpenShiftClustersNodePoolOperatorSpec
	err := copied.AssignProperties_To_HcpOpenShiftClustersNodePoolOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HcpOpenShiftClustersNodePoolOperatorSpec
	err = actual.AssignProperties_From_HcpOpenShiftClustersNodePoolOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HcpOpenShiftClustersNodePoolOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClustersNodePoolOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClustersNodePoolOperatorSpec, HcpOpenShiftClustersNodePoolOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClustersNodePoolOperatorSpec runs a test to see if a specific instance of HcpOpenShiftClustersNodePoolOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClustersNodePoolOperatorSpec(subject HcpOpenShiftClustersNodePoolOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClustersNodePoolOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClustersNodePoolOperatorSpec instances for property testing - lazily instantiated by
// HcpOpenShiftClustersNodePoolOperatorSpecGenerator()
var hcpOpenShiftClustersNodePoolOperatorSpecGenerator gopter.Gen

// HcpOpenShiftClustersNodePoolOperatorSpecGenerator returns a generator of HcpOpenShiftClustersNodePoolOperatorSpec instances for property testing.
func HcpOpenShiftClustersNodePoolOperatorSpecGenerator() gopter.Gen {
	if hcpOpenShiftClustersNodePoolOperatorSpecGenerator != nil {
		return hcpOpenShiftClustersNodePoolOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	hcpOpenShiftClustersNodePoolOperatorSpecGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePoolOperatorSpec{}), generators)

	return hcpOpenShiftClustersNodePoolOperatorSpecGenerator
}

func Test_HcpOpenShiftClustersNodePool_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HcpOpenShiftClustersNodePool_STATUS to HcpOpenShiftClustersNodePool_STATUS via AssignProperties_To_HcpOpenShiftClustersNodePool_STATUS & AssignProperties_From_HcpOpenShiftClustersNodePool_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool_STATUS, HcpOpenShiftClustersNodePool_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool_STATUS tests if a specific instance of HcpOpenShiftClustersNodePool_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool_STATUS(subject HcpOpenShiftClustersNodePool_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.HcpOpenShiftClustersNodePool_STATUS
	err := copied.AssignProperties_To_HcpOpenShiftClustersNodePool_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HcpOpenShiftClustersNodePool_STATUS
	err = actual.AssignProperties_From_HcpOpenShiftClustersNodePool_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HcpOpenShiftClustersNodePool_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClustersNodePool_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClustersNodePool_STATUS, HcpOpenShiftClustersNodePool_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClustersNodePool_STATUS runs a test to see if a specific instance of HcpOpenShiftClustersNodePool_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClustersNodePool_STATUS(subject HcpOpenShiftClustersNodePool_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClustersNodePool_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClustersNodePool_STATUS instances for property testing - lazily instantiated by
// HcpOpenShiftClustersNodePool_STATUSGenerator()
var hcpOpenShiftClustersNodePool_STATUSGenerator gopter.Gen

// HcpOpenShiftClustersNodePool_STATUSGenerator returns a generator of HcpOpenShiftClustersNodePool_STATUS instances for property testing.
// We first initialize hcpOpenShiftClustersNodePool_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HcpOpenShiftClustersNodePool_STATUSGenerator() gopter.Gen {
	if hcpOpenShiftClustersNodePool_STATUSGenerator != nil {
		return hcpOpenShiftClustersNodePool_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(generators)
	hcpOpenShiftClustersNodePool_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(generators)
	AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(generators)
	hcpOpenShiftClustersNodePool_STATUSGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_STATUS{}), generators)

	return hcpOpenShiftClustersNodePool_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_STATUS(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUSGenerator())
	gens["Properties"] = gen.PtrOf(NodePoolProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_HcpOpenShiftClustersNodePool_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HcpOpenShiftClustersNodePool_Spec to HcpOpenShiftClustersNodePool_Spec via AssignProperties_To_HcpOpenShiftClustersNodePool_Spec & AssignProperties_From_HcpOpenShiftClustersNodePool_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool_Spec, HcpOpenShiftClustersNodePool_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool_Spec tests if a specific instance of HcpOpenShiftClustersNodePool_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForHcpOpenShiftClustersNodePool_Spec(subject HcpOpenShiftClustersNodePool_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.HcpOpenShiftClustersNodePool_Spec
	err := copied.AssignProperties_To_HcpOpenShiftClustersNodePool_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HcpOpenShiftClustersNodePool_Spec
	err = actual.AssignProperties_From_HcpOpenShiftClustersNodePool_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HcpOpenShiftClustersNodePool_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HcpOpenShiftClustersNodePool_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHcpOpenShiftClustersNodePool_Spec, HcpOpenShiftClustersNodePool_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHcpOpenShiftClustersNodePool_Spec runs a test to see if a specific instance of HcpOpenShiftClustersNodePool_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForHcpOpenShiftClustersNodePool_Spec(subject HcpOpenShiftClustersNodePool_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HcpOpenShiftClustersNodePool_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HcpOpenShiftClustersNodePool_Spec instances for property testing - lazily instantiated by
// HcpOpenShiftClustersNodePool_SpecGenerator()
var hcpOpenShiftClustersNodePool_SpecGenerator gopter.Gen

// HcpOpenShiftClustersNodePool_SpecGenerator returns a generator of HcpOpenShiftClustersNodePool_Spec instances for property testing.
// We first initialize hcpOpenShiftClustersNodePool_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HcpOpenShiftClustersNodePool_SpecGenerator() gopter.Gen {
	if hcpOpenShiftClustersNodePool_SpecGenerator != nil {
		return hcpOpenShiftClustersNodePool_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(generators)
	hcpOpenShiftClustersNodePool_SpecGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(generators)
	AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(generators)
	hcpOpenShiftClustersNodePool_SpecGenerator = gen.Struct(reflect.TypeOf(HcpOpenShiftClustersNodePool_Spec{}), generators)

	return hcpOpenShiftClustersNodePool_SpecGenerator
}

// AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHcpOpenShiftClustersNodePool_Spec(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentityGenerator())
	gens["OperatorSpec"] = gen.PtrOf(HcpOpenShiftClustersNodePoolOperatorSpecGenerator())
	gens["Properties"] = gen.PtrOf(NodePoolPropertiesGenerator())
}

func Test_Label_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Label to Label via AssignProperties_To_Label & AssignProperties_From_Label returns original",
		prop.ForAll(RunPropertyAssignmentTestForLabel, LabelGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLabel tests if a specific instance of Label can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForLabel(subject Label) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Label
	err := copied.AssignProperties_To_Label(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Label
	err = actual.AssignProperties_From_Label(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Label_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Label via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLabel, LabelGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLabel runs a test to see if a specific instance of Label round trips to JSON and back losslessly
func RunJSONSerializationTestForLabel(subject Label) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Label
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Label instances for property testing - lazily instantiated by LabelGenerator()
var labelGenerator gopter.Gen

// LabelGenerator returns a generator of Label instances for property testing.
func LabelGenerator() gopter.Gen {
	if labelGenerator != nil {
		return labelGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLabel(generators)
	labelGenerator = gen.Struct(reflect.TypeOf(Label{}), generators)

	return labelGenerator
}

// AddIndependentPropertyGeneratorsForLabel is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLabel(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_Label_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Label_STATUS to Label_STATUS via AssignProperties_To_Label_STATUS & AssignProperties_From_Label_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForLabel_STATUS, Label_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForLabel_STATUS tests if a specific instance of Label_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForLabel_STATUS(subject Label_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Label_STATUS
	err := copied.AssignProperties_To_Label_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Label_STATUS
	err = actual.AssignProperties_From_Label_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Label_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Label_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLabel_STATUS, Label_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLabel_STATUS runs a test to see if a specific instance of Label_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLabel_STATUS(subject Label_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Label_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Label_STATUS instances for property testing - lazily instantiated by Label_STATUSGenerator()
var label_STATUSGenerator gopter.Gen

// Label_STATUSGenerator returns a generator of Label_STATUS instances for property testing.
func Label_STATUSGenerator() gopter.Gen {
	if label_STATUSGenerator != nil {
		return label_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLabel_STATUS(generators)
	label_STATUSGenerator = gen.Struct(reflect.TypeOf(Label_STATUS{}), generators)

	return label_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLabel_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLabel_STATUS(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_NodePoolAutoScaling_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolAutoScaling to NodePoolAutoScaling via AssignProperties_To_NodePoolAutoScaling & AssignProperties_From_NodePoolAutoScaling returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolAutoScaling, NodePoolAutoScalingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolAutoScaling tests if a specific instance of NodePoolAutoScaling can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolAutoScaling(subject NodePoolAutoScaling) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolAutoScaling
	err := copied.AssignProperties_To_NodePoolAutoScaling(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolAutoScaling
	err = actual.AssignProperties_From_NodePoolAutoScaling(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolAutoScaling_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolAutoScaling via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolAutoScaling, NodePoolAutoScalingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolAutoScaling runs a test to see if a specific instance of NodePoolAutoScaling round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolAutoScaling(subject NodePoolAutoScaling) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolAutoScaling
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolAutoScaling instances for property testing - lazily instantiated by
// NodePoolAutoScalingGenerator()
var nodePoolAutoScalingGenerator gopter.Gen

// NodePoolAutoScalingGenerator returns a generator of NodePoolAutoScaling instances for property testing.
func NodePoolAutoScalingGenerator() gopter.Gen {
	if nodePoolAutoScalingGenerator != nil {
		return nodePoolAutoScalingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolAutoScaling(generators)
	nodePoolAutoScalingGenerator = gen.Struct(reflect.TypeOf(NodePoolAutoScaling{}), generators)

	return nodePoolAutoScalingGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolAutoScaling is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolAutoScaling(gens map[string]gopter.Gen) {
	gens["Max"] = gen.PtrOf(gen.Int())
	gens["Min"] = gen.PtrOf(gen.Int())
}

func Test_NodePoolAutoScaling_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolAutoScaling_STATUS to NodePoolAutoScaling_STATUS via AssignProperties_To_NodePoolAutoScaling_STATUS & AssignProperties_From_NodePoolAutoScaling_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolAutoScaling_STATUS, NodePoolAutoScaling_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolAutoScaling_STATUS tests if a specific instance of NodePoolAutoScaling_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolAutoScaling_STATUS(subject NodePoolAutoScaling_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolAutoScaling_STATUS
	err := copied.AssignProperties_To_NodePoolAutoScaling_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolAutoScaling_STATUS
	err = actual.AssignProperties_From_NodePoolAutoScaling_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolAutoScaling_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolAutoScaling_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolAutoScaling_STATUS, NodePoolAutoScaling_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolAutoScaling_STATUS runs a test to see if a specific instance of NodePoolAutoScaling_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolAutoScaling_STATUS(subject NodePoolAutoScaling_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolAutoScaling_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolAutoScaling_STATUS instances for property testing - lazily instantiated by
// NodePoolAutoScaling_STATUSGenerator()
var nodePoolAutoScaling_STATUSGenerator gopter.Gen

// NodePoolAutoScaling_STATUSGenerator returns a generator of NodePoolAutoScaling_STATUS instances for property testing.
func NodePoolAutoScaling_STATUSGenerator() gopter.Gen {
	if nodePoolAutoScaling_STATUSGenerator != nil {
		return nodePoolAutoScaling_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolAutoScaling_STATUS(generators)
	nodePoolAutoScaling_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolAutoScaling_STATUS{}), generators)

	return nodePoolAutoScaling_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolAutoScaling_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolAutoScaling_STATUS(gens map[string]gopter.Gen) {
	gens["Max"] = gen.PtrOf(gen.Int())
	gens["Min"] = gen.PtrOf(gen.Int())
}

func Test_NodePoolPlatformProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolPlatformProfile to NodePoolPlatformProfile via AssignProperties_To_NodePoolPlatformProfile & AssignProperties_From_NodePoolPlatformProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolPlatformProfile, NodePoolPlatformProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolPlatformProfile tests if a specific instance of NodePoolPlatformProfile can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolPlatformProfile(subject NodePoolPlatformProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolPlatformProfile
	err := copied.AssignProperties_To_NodePoolPlatformProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolPlatformProfile
	err = actual.AssignProperties_From_NodePoolPlatformProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolPlatformProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolPlatformProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolPlatformProfile, NodePoolPlatformProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolPlatformProfile runs a test to see if a specific instance of NodePoolPlatformProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolPlatformProfile(subject NodePoolPlatformProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolPlatformProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolPlatformProfile instances for property testing - lazily instantiated by
// NodePoolPlatformProfileGenerator()
var nodePoolPlatformProfileGenerator gopter.Gen

// NodePoolPlatformProfileGenerator returns a generator of NodePoolPlatformProfile instances for property testing.
// We first initialize nodePoolPlatformProfileGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolPlatformProfileGenerator() gopter.Gen {
	if nodePoolPlatformProfileGenerator != nil {
		return nodePoolPlatformProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile(generators)
	nodePoolPlatformProfileGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile(generators)
	AddRelatedPropertyGeneratorsForNodePoolPlatformProfile(generators)
	nodePoolPlatformProfileGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile{}), generators)

	return nodePoolPlatformProfileGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolPlatformProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolPlatformProfile(gens map[string]gopter.Gen) {
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNodePoolPlatformProfile is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolPlatformProfile(gens map[string]gopter.Gen) {
	gens["OsDisk"] = gen.PtrOf(OsDiskProfileGenerator())
}

func Test_NodePoolPlatformProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolPlatformProfile_STATUS to NodePoolPlatformProfile_STATUS via AssignProperties_To_NodePoolPlatformProfile_STATUS & AssignProperties_From_NodePoolPlatformProfile_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolPlatformProfile_STATUS, NodePoolPlatformProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolPlatformProfile_STATUS tests if a specific instance of NodePoolPlatformProfile_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolPlatformProfile_STATUS(subject NodePoolPlatformProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolPlatformProfile_STATUS
	err := copied.AssignProperties_To_NodePoolPlatformProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolPlatformProfile_STATUS
	err = actual.AssignProperties_From_NodePoolPlatformProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolPlatformProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolPlatformProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolPlatformProfile_STATUS, NodePoolPlatformProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolPlatformProfile_STATUS runs a test to see if a specific instance of NodePoolPlatformProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolPlatformProfile_STATUS(subject NodePoolPlatformProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolPlatformProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolPlatformProfile_STATUS instances for property testing - lazily instantiated by
// NodePoolPlatformProfile_STATUSGenerator()
var nodePoolPlatformProfile_STATUSGenerator gopter.Gen

// NodePoolPlatformProfile_STATUSGenerator returns a generator of NodePoolPlatformProfile_STATUS instances for property testing.
// We first initialize nodePoolPlatformProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolPlatformProfile_STATUSGenerator() gopter.Gen {
	if nodePoolPlatformProfile_STATUSGenerator != nil {
		return nodePoolPlatformProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS(generators)
	nodePoolPlatformProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForNodePoolPlatformProfile_STATUS(generators)
	nodePoolPlatformProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolPlatformProfile_STATUS{}), generators)

	return nodePoolPlatformProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolPlatformProfile_STATUS(gens map[string]gopter.Gen) {
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNodePoolPlatformProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolPlatformProfile_STATUS(gens map[string]gopter.Gen) {
	gens["OsDisk"] = gen.PtrOf(OsDiskProfile_STATUSGenerator())
}

func Test_NodePoolProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolProperties to NodePoolProperties via AssignProperties_To_NodePoolProperties & AssignProperties_From_NodePoolProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolProperties, NodePoolPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolProperties tests if a specific instance of NodePoolProperties can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolProperties(subject NodePoolProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolProperties
	err := copied.AssignProperties_To_NodePoolProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolProperties
	err = actual.AssignProperties_From_NodePoolProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolProperties, NodePoolPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolProperties runs a test to see if a specific instance of NodePoolProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolProperties(subject NodePoolProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolProperties instances for property testing - lazily instantiated by NodePoolPropertiesGenerator()
var nodePoolPropertiesGenerator gopter.Gen

// NodePoolPropertiesGenerator returns a generator of NodePoolProperties instances for property testing.
// We first initialize nodePoolPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolPropertiesGenerator() gopter.Gen {
	if nodePoolPropertiesGenerator != nil {
		return nodePoolPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties(generators)
	nodePoolPropertiesGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties(generators)
	AddRelatedPropertyGeneratorsForNodePoolProperties(generators)
	nodePoolPropertiesGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties{}), generators)

	return nodePoolPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolProperties(gens map[string]gopter.Gen) {
	gens["AutoRepair"] = gen.PtrOf(gen.Bool())
	gens["NodeDrainTimeoutMinutes"] = gen.PtrOf(gen.Int())
	gens["Replicas"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForNodePoolProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolProperties(gens map[string]gopter.Gen) {
	gens["AutoScaling"] = gen.PtrOf(NodePoolAutoScalingGenerator())
	gens["Labels"] = gen.SliceOf(LabelGenerator())
	gens["Platform"] = gen.PtrOf(NodePoolPlatformProfileGenerator())
	gens["Taints"] = gen.SliceOf(TaintGenerator())
	gens["Version"] = gen.PtrOf(NodePoolVersionProfileGenerator())
}

func Test_NodePoolProperties_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolProperties_STATUS to NodePoolProperties_STATUS via AssignProperties_To_NodePoolProperties_STATUS & AssignProperties_From_NodePoolProperties_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolProperties_STATUS, NodePoolProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolProperties_STATUS tests if a specific instance of NodePoolProperties_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolProperties_STATUS(subject NodePoolProperties_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolProperties_STATUS
	err := copied.AssignProperties_To_NodePoolProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolProperties_STATUS
	err = actual.AssignProperties_From_NodePoolProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolProperties_STATUS, NodePoolProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolProperties_STATUS runs a test to see if a specific instance of NodePoolProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolProperties_STATUS(subject NodePoolProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolProperties_STATUS instances for property testing - lazily instantiated by
// NodePoolProperties_STATUSGenerator()
var nodePoolProperties_STATUSGenerator gopter.Gen

// NodePoolProperties_STATUSGenerator returns a generator of NodePoolProperties_STATUS instances for property testing.
// We first initialize nodePoolProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NodePoolProperties_STATUSGenerator() gopter.Gen {
	if nodePoolProperties_STATUSGenerator != nil {
		return nodePoolProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS(generators)
	nodePoolProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForNodePoolProperties_STATUS(generators)
	nodePoolProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolProperties_STATUS{}), generators)

	return nodePoolProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolProperties_STATUS(gens map[string]gopter.Gen) {
	gens["AutoRepair"] = gen.PtrOf(gen.Bool())
	gens["NodeDrainTimeoutMinutes"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Accepted,
		ProvisioningState_STATUS_Canceled,
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Provisioning,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["Replicas"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForNodePoolProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNodePoolProperties_STATUS(gens map[string]gopter.Gen) {
	gens["AutoScaling"] = gen.PtrOf(NodePoolAutoScaling_STATUSGenerator())
	gens["Labels"] = gen.SliceOf(Label_STATUSGenerator())
	gens["Platform"] = gen.PtrOf(NodePoolPlatformProfile_STATUSGenerator())
	gens["Taints"] = gen.SliceOf(Taint_STATUSGenerator())
	gens["Version"] = gen.PtrOf(NodePoolVersionProfile_STATUSGenerator())
}

func Test_NodePoolVersionProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolVersionProfile to NodePoolVersionProfile via AssignProperties_To_NodePoolVersionProfile & AssignProperties_From_NodePoolVersionProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolVersionProfile, NodePoolVersionProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolVersionProfile tests if a specific instance of NodePoolVersionProfile can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolVersionProfile(subject NodePoolVersionProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolVersionProfile
	err := copied.AssignProperties_To_NodePoolVersionProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolVersionProfile
	err = actual.AssignProperties_From_NodePoolVersionProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolVersionProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolVersionProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolVersionProfile, NodePoolVersionProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolVersionProfile runs a test to see if a specific instance of NodePoolVersionProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolVersionProfile(subject NodePoolVersionProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolVersionProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolVersionProfile instances for property testing - lazily instantiated by
// NodePoolVersionProfileGenerator()
var nodePoolVersionProfileGenerator gopter.Gen

// NodePoolVersionProfileGenerator returns a generator of NodePoolVersionProfile instances for property testing.
func NodePoolVersionProfileGenerator() gopter.Gen {
	if nodePoolVersionProfileGenerator != nil {
		return nodePoolVersionProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolVersionProfile(generators)
	nodePoolVersionProfileGenerator = gen.Struct(reflect.TypeOf(NodePoolVersionProfile{}), generators)

	return nodePoolVersionProfileGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolVersionProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolVersionProfile(gens map[string]gopter.Gen) {
	gens["ChannelGroup"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NodePoolVersionProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NodePoolVersionProfile_STATUS to NodePoolVersionProfile_STATUS via AssignProperties_To_NodePoolVersionProfile_STATUS & AssignProperties_From_NodePoolVersionProfile_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForNodePoolVersionProfile_STATUS, NodePoolVersionProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNodePoolVersionProfile_STATUS tests if a specific instance of NodePoolVersionProfile_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNodePoolVersionProfile_STATUS(subject NodePoolVersionProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NodePoolVersionProfile_STATUS
	err := copied.AssignProperties_To_NodePoolVersionProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NodePoolVersionProfile_STATUS
	err = actual.AssignProperties_From_NodePoolVersionProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NodePoolVersionProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodePoolVersionProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodePoolVersionProfile_STATUS, NodePoolVersionProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodePoolVersionProfile_STATUS runs a test to see if a specific instance of NodePoolVersionProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNodePoolVersionProfile_STATUS(subject NodePoolVersionProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodePoolVersionProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodePoolVersionProfile_STATUS instances for property testing - lazily instantiated by
// NodePoolVersionProfile_STATUSGenerator()
var nodePoolVersionProfile_STATUSGenerator gopter.Gen

// NodePoolVersionProfile_STATUSGenerator returns a generator of NodePoolVersionProfile_STATUS instances for property testing.
func NodePoolVersionProfile_STATUSGenerator() gopter.Gen {
	if nodePoolVersionProfile_STATUSGenerator != nil {
		return nodePoolVersionProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodePoolVersionProfile_STATUS(generators)
	nodePoolVersionProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(NodePoolVersionProfile_STATUS{}), generators)

	return nodePoolVersionProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNodePoolVersionProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodePoolVersionProfile_STATUS(gens map[string]gopter.Gen) {
	gens["ChannelGroup"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_OsDiskProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from OsDiskProfile to OsDiskProfile via AssignProperties_To_OsDiskProfile & AssignProperties_From_OsDiskProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForOsDiskProfile, OsDiskProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForOsDiskProfile tests if a specific instance of OsDiskProfile can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForOsDiskProfile(subject OsDiskProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.OsDiskProfile
	err := copied.AssignProperties_To_OsDiskProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual OsDiskProfile
	err = actual.AssignProperties_From_OsDiskProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_OsDiskProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OsDiskProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOsDiskProfile, OsDiskProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOsDiskProfile runs a test to see if a specific instance of OsDiskProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForOsDiskProfile(subject OsDiskProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OsDiskProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OsDiskProfile instances for property testing - lazily instantiated by OsDiskProfileGenerator()
var osDiskProfileGenerator gopter.Gen

// OsDiskProfileGenerator returns a generator of OsDiskProfile instances for property testing.
func OsDiskProfileGenerator() gopter.Gen {
	if osDiskProfileGenerator != nil {
		return osDiskProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOsDiskProfile(generators)
	osDiskProfileGenerator = gen.Struct(reflect.TypeOf(OsDiskProfile{}), generators)

	return osDiskProfileGenerator
}

// AddIndependentPropertyGeneratorsForOsDiskProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOsDiskProfile(gens map[string]gopter.Gen) {
	gens["DiskStorageAccountType"] = gen.PtrOf(gen.OneConstOf(OsDiskProfile_DiskStorageAccountType_Premium_LRS, OsDiskProfile_DiskStorageAccountType_StandardSSD_LRS, OsDiskProfile_DiskStorageAccountType_Standard_LRS))
	gens["SizeGiB"] = gen.PtrOf(gen.Int())
}

func Test_OsDiskProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from OsDiskProfile_STATUS to OsDiskProfile_STATUS via AssignProperties_To_OsDiskProfile_STATUS & AssignProperties_From_OsDiskProfile_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForOsDiskProfile_STATUS, OsDiskProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForOsDiskProfile_STATUS tests if a specific instance of OsDiskProfile_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForOsDiskProfile_STATUS(subject OsDiskProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.OsDiskProfile_STATUS
	err := copied.AssignProperties_To_OsDiskProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual OsDiskProfile_STATUS
	err = actual.AssignProperties_From_OsDiskProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_OsDiskProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OsDiskProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOsDiskProfile_STATUS, OsDiskProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOsDiskProfile_STATUS runs a test to see if a specific instance of OsDiskProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForOsDiskProfile_STATUS(subject OsDiskProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OsDiskProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OsDiskProfile_STATUS instances for property testing - lazily instantiated by
// OsDiskProfile_STATUSGenerator()
var osDiskProfile_STATUSGenerator gopter.Gen

// OsDiskProfile_STATUSGenerator returns a generator of OsDiskProfile_STATUS instances for property testing.
func OsDiskProfile_STATUSGenerator() gopter.Gen {
	if osDiskProfile_STATUSGenerator != nil {
		return osDiskProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOsDiskProfile_STATUS(generators)
	osDiskProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(OsDiskProfile_STATUS{}), generators)

	return osDiskProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForOsDiskProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOsDiskProfile_STATUS(gens map[string]gopter.Gen) {
	gens["DiskStorageAccountType"] = gen.PtrOf(gen.OneConstOf(OsDiskProfile_DiskStorageAccountType_STATUS_Premium_LRS, OsDiskProfile_DiskStorageAccountType_STATUS_StandardSSD_LRS, OsDiskProfile_DiskStorageAccountType_STATUS_Standard_LRS))
	gens["EncryptionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["SizeGiB"] = gen.PtrOf(gen.Int())
}

func Test_Taint_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Taint to Taint via AssignProperties_To_Taint & AssignProperties_From_Taint returns original",
		prop.ForAll(RunPropertyAssignmentTestForTaint, TaintGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTaint tests if a specific instance of Taint can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTaint(subject Taint) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Taint
	err := copied.AssignProperties_To_Taint(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Taint
	err = actual.AssignProperties_From_Taint(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Taint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Taint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTaint, TaintGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTaint runs a test to see if a specific instance of Taint round trips to JSON and back losslessly
func RunJSONSerializationTestForTaint(subject Taint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Taint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Taint instances for property testing - lazily instantiated by TaintGenerator()
var taintGenerator gopter.Gen

// TaintGenerator returns a generator of Taint instances for property testing.
func TaintGenerator() gopter.Gen {
	if taintGenerator != nil {
		return taintGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTaint(generators)
	taintGenerator = gen.Struct(reflect.TypeOf(Taint{}), generators)

	return taintGenerator
}

// AddIndependentPropertyGeneratorsForTaint is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTaint(gens map[string]gopter.Gen) {
	gens["Effect"] = gen.PtrOf(gen.OneConstOf(Effect_NoExecute, Effect_NoSchedule, Effect_PreferNoSchedule))
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_Taint_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Taint_STATUS to Taint_STATUS via AssignProperties_To_Taint_STATUS & AssignProperties_From_Taint_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForTaint_STATUS, Taint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTaint_STATUS tests if a specific instance of Taint_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTaint_STATUS(subject Taint_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Taint_STATUS
	err := copied.AssignProperties_To_Taint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Taint_STATUS
	err = actual.AssignProperties_From_Taint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Taint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Taint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTaint_STATUS, Taint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTaint_STATUS runs a test to see if a specific instance of Taint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTaint_STATUS(subject Taint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Taint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Taint_STATUS instances for property testing - lazily instantiated by Taint_STATUSGenerator()
var taint_STATUSGenerator gopter.Gen

// Taint_STATUSGenerator returns a generator of Taint_STATUS instances for property testing.
func Taint_STATUSGenerator() gopter.Gen {
	if taint_STATUSGenerator != nil {
		return taint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTaint_STATUS(generators)
	taint_STATUSGenerator = gen.Struct(reflect.TypeOf(Taint_STATUS{}), generators)

	return taint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTaint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTaint_STATUS(gens map[string]gopter.Gen) {
	gens["Effect"] = gen.PtrOf(gen.OneConstOf(Effect_STATUS_NoExecute, Effect_STATUS_NoSchedule, Effect_STATUS_PreferNoSchedule))
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
