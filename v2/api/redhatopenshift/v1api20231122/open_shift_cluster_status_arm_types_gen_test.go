// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20231122

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_APIServerProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of APIServerProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAPIServerProfile_STATUS_ARM, APIServerProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAPIServerProfile_STATUS_ARM runs a test to see if a specific instance of APIServerProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAPIServerProfile_STATUS_ARM(subject APIServerProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual APIServerProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of APIServerProfile_STATUS_ARM instances for property testing - lazily instantiated by
// APIServerProfile_STATUS_ARMGenerator()
var apiServerProfile_STATUS_ARMGenerator gopter.Gen

// APIServerProfile_STATUS_ARMGenerator returns a generator of APIServerProfile_STATUS_ARM instances for property testing.
func APIServerProfile_STATUS_ARMGenerator() gopter.Gen {
	if apiServerProfile_STATUS_ARMGenerator != nil {
		return apiServerProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAPIServerProfile_STATUS_ARM(generators)
	apiServerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(APIServerProfile_STATUS_ARM{}), generators)

	return apiServerProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAPIServerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAPIServerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Ip"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
	gens["Visibility"] = gen.PtrOf(gen.OneConstOf(Visibility_STATUS_ARM_Private, Visibility_STATUS_ARM_Public))
}

func Test_ClusterProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterProfile_STATUS_ARM, ClusterProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterProfile_STATUS_ARM runs a test to see if a specific instance of ClusterProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterProfile_STATUS_ARM(subject ClusterProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ClusterProfile_STATUS_ARMGenerator()
var clusterProfile_STATUS_ARMGenerator gopter.Gen

// ClusterProfile_STATUS_ARMGenerator returns a generator of ClusterProfile_STATUS_ARM instances for property testing.
func ClusterProfile_STATUS_ARMGenerator() gopter.Gen {
	if clusterProfile_STATUS_ARMGenerator != nil {
		return clusterProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProfile_STATUS_ARM(generators)
	clusterProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ClusterProfile_STATUS_ARM{}), generators)

	return clusterProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForClusterProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Domain"] = gen.PtrOf(gen.AlphaString())
	gens["FipsValidatedModules"] = gen.PtrOf(gen.OneConstOf(FipsValidatedModules_STATUS_ARM_Disabled, FipsValidatedModules_STATUS_ARM_Enabled))
	gens["ResourceGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_ConsoleProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsoleProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsoleProfile_STATUS_ARM, ConsoleProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsoleProfile_STATUS_ARM runs a test to see if a specific instance of ConsoleProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsoleProfile_STATUS_ARM(subject ConsoleProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsoleProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsoleProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ConsoleProfile_STATUS_ARMGenerator()
var consoleProfile_STATUS_ARMGenerator gopter.Gen

// ConsoleProfile_STATUS_ARMGenerator returns a generator of ConsoleProfile_STATUS_ARM instances for property testing.
func ConsoleProfile_STATUS_ARMGenerator() gopter.Gen {
	if consoleProfile_STATUS_ARMGenerator != nil {
		return consoleProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsoleProfile_STATUS_ARM(generators)
	consoleProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ConsoleProfile_STATUS_ARM{}), generators)

	return consoleProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForConsoleProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsoleProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_EffectiveOutboundIP_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EffectiveOutboundIP_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEffectiveOutboundIP_STATUS_ARM, EffectiveOutboundIP_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEffectiveOutboundIP_STATUS_ARM runs a test to see if a specific instance of EffectiveOutboundIP_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEffectiveOutboundIP_STATUS_ARM(subject EffectiveOutboundIP_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EffectiveOutboundIP_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EffectiveOutboundIP_STATUS_ARM instances for property testing - lazily instantiated by
// EffectiveOutboundIP_STATUS_ARMGenerator()
var effectiveOutboundIP_STATUS_ARMGenerator gopter.Gen

// EffectiveOutboundIP_STATUS_ARMGenerator returns a generator of EffectiveOutboundIP_STATUS_ARM instances for property testing.
func EffectiveOutboundIP_STATUS_ARMGenerator() gopter.Gen {
	if effectiveOutboundIP_STATUS_ARMGenerator != nil {
		return effectiveOutboundIP_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEffectiveOutboundIP_STATUS_ARM(generators)
	effectiveOutboundIP_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EffectiveOutboundIP_STATUS_ARM{}), generators)

	return effectiveOutboundIP_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEffectiveOutboundIP_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEffectiveOutboundIP_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_IngressProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IngressProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIngressProfile_STATUS_ARM, IngressProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIngressProfile_STATUS_ARM runs a test to see if a specific instance of IngressProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIngressProfile_STATUS_ARM(subject IngressProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IngressProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IngressProfile_STATUS_ARM instances for property testing - lazily instantiated by
// IngressProfile_STATUS_ARMGenerator()
var ingressProfile_STATUS_ARMGenerator gopter.Gen

// IngressProfile_STATUS_ARMGenerator returns a generator of IngressProfile_STATUS_ARM instances for property testing.
func IngressProfile_STATUS_ARMGenerator() gopter.Gen {
	if ingressProfile_STATUS_ARMGenerator != nil {
		return ingressProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIngressProfile_STATUS_ARM(generators)
	ingressProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IngressProfile_STATUS_ARM{}), generators)

	return ingressProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIngressProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIngressProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Ip"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Visibility"] = gen.PtrOf(gen.OneConstOf(Visibility_STATUS_ARM_Private, Visibility_STATUS_ARM_Public))
}

func Test_LoadBalancerProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancerProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerProfile_STATUS_ARM, LoadBalancerProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerProfile_STATUS_ARM runs a test to see if a specific instance of LoadBalancerProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerProfile_STATUS_ARM(subject LoadBalancerProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancerProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancerProfile_STATUS_ARM instances for property testing - lazily instantiated by
// LoadBalancerProfile_STATUS_ARMGenerator()
var loadBalancerProfile_STATUS_ARMGenerator gopter.Gen

// LoadBalancerProfile_STATUS_ARMGenerator returns a generator of LoadBalancerProfile_STATUS_ARM instances for property testing.
func LoadBalancerProfile_STATUS_ARMGenerator() gopter.Gen {
	if loadBalancerProfile_STATUS_ARMGenerator != nil {
		return loadBalancerProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLoadBalancerProfile_STATUS_ARM(generators)
	loadBalancerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerProfile_STATUS_ARM{}), generators)

	return loadBalancerProfile_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForLoadBalancerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIps"] = gen.SliceOf(EffectiveOutboundIP_STATUS_ARMGenerator())
	gens["ManagedOutboundIps"] = gen.PtrOf(ManagedOutboundIPs_STATUS_ARMGenerator())
}

func Test_ManagedOutboundIPs_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedOutboundIPs_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedOutboundIPs_STATUS_ARM, ManagedOutboundIPs_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedOutboundIPs_STATUS_ARM runs a test to see if a specific instance of ManagedOutboundIPs_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedOutboundIPs_STATUS_ARM(subject ManagedOutboundIPs_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedOutboundIPs_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedOutboundIPs_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedOutboundIPs_STATUS_ARMGenerator()
var managedOutboundIPs_STATUS_ARMGenerator gopter.Gen

// ManagedOutboundIPs_STATUS_ARMGenerator returns a generator of ManagedOutboundIPs_STATUS_ARM instances for property testing.
func ManagedOutboundIPs_STATUS_ARMGenerator() gopter.Gen {
	if managedOutboundIPs_STATUS_ARMGenerator != nil {
		return managedOutboundIPs_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedOutboundIPs_STATUS_ARM(generators)
	managedOutboundIPs_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedOutboundIPs_STATUS_ARM{}), generators)

	return managedOutboundIPs_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedOutboundIPs_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedOutboundIPs_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_MasterProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MasterProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMasterProfile_STATUS_ARM, MasterProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMasterProfile_STATUS_ARM runs a test to see if a specific instance of MasterProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMasterProfile_STATUS_ARM(subject MasterProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MasterProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MasterProfile_STATUS_ARM instances for property testing - lazily instantiated by
// MasterProfile_STATUS_ARMGenerator()
var masterProfile_STATUS_ARMGenerator gopter.Gen

// MasterProfile_STATUS_ARMGenerator returns a generator of MasterProfile_STATUS_ARM instances for property testing.
func MasterProfile_STATUS_ARMGenerator() gopter.Gen {
	if masterProfile_STATUS_ARMGenerator != nil {
		return masterProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMasterProfile_STATUS_ARM(generators)
	masterProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MasterProfile_STATUS_ARM{}), generators)

	return masterProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMasterProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMasterProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["EncryptionAtHost"] = gen.PtrOf(gen.OneConstOf(EncryptionAtHost_STATUS_ARM_Disabled, EncryptionAtHost_STATUS_ARM_Enabled))
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkProfile_STATUS_ARM, NetworkProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkProfile_STATUS_ARM runs a test to see if a specific instance of NetworkProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkProfile_STATUS_ARM(subject NetworkProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkProfile_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkProfile_STATUS_ARMGenerator()
var networkProfile_STATUS_ARMGenerator gopter.Gen

// NetworkProfile_STATUS_ARMGenerator returns a generator of NetworkProfile_STATUS_ARM instances for property testing.
// We first initialize networkProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkProfile_STATUS_ARMGenerator() gopter.Gen {
	if networkProfile_STATUS_ARMGenerator != nil {
		return networkProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkProfile_STATUS_ARM(generators)
	networkProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkProfile_STATUS_ARM(generators)
	networkProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkProfile_STATUS_ARM{}), generators)

	return networkProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OutboundType"] = gen.PtrOf(gen.OneConstOf(OutboundType_STATUS_ARM_Loadbalancer, OutboundType_STATUS_ARM_UserDefinedRouting))
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["PreconfiguredNSG"] = gen.PtrOf(gen.OneConstOf(PreconfiguredNSG_STATUS_ARM_Disabled, PreconfiguredNSG_STATUS_ARM_Enabled))
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(LoadBalancerProfile_STATUS_ARMGenerator())
}

func Test_OpenShiftClusterProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OpenShiftClusterProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOpenShiftClusterProperties_STATUS_ARM, OpenShiftClusterProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOpenShiftClusterProperties_STATUS_ARM runs a test to see if a specific instance of OpenShiftClusterProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOpenShiftClusterProperties_STATUS_ARM(subject OpenShiftClusterProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OpenShiftClusterProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OpenShiftClusterProperties_STATUS_ARM instances for property testing - lazily instantiated by
// OpenShiftClusterProperties_STATUS_ARMGenerator()
var openShiftClusterProperties_STATUS_ARMGenerator gopter.Gen

// OpenShiftClusterProperties_STATUS_ARMGenerator returns a generator of OpenShiftClusterProperties_STATUS_ARM instances for property testing.
// We first initialize openShiftClusterProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OpenShiftClusterProperties_STATUS_ARMGenerator() gopter.Gen {
	if openShiftClusterProperties_STATUS_ARMGenerator != nil {
		return openShiftClusterProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOpenShiftClusterProperties_STATUS_ARM(generators)
	openShiftClusterProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OpenShiftClusterProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOpenShiftClusterProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOpenShiftClusterProperties_STATUS_ARM(generators)
	openShiftClusterProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OpenShiftClusterProperties_STATUS_ARM{}), generators)

	return openShiftClusterProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOpenShiftClusterProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOpenShiftClusterProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_ARM_AdminUpdating,
		ProvisioningState_STATUS_ARM_Canceled,
		ProvisioningState_STATUS_ARM_Creating,
		ProvisioningState_STATUS_ARM_Deleting,
		ProvisioningState_STATUS_ARM_Failed,
		ProvisioningState_STATUS_ARM_Succeeded,
		ProvisioningState_STATUS_ARM_Updating))
}

// AddRelatedPropertyGeneratorsForOpenShiftClusterProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOpenShiftClusterProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApiserverProfile"] = gen.PtrOf(APIServerProfile_STATUS_ARMGenerator())
	gens["ClusterProfile"] = gen.PtrOf(ClusterProfile_STATUS_ARMGenerator())
	gens["ConsoleProfile"] = gen.PtrOf(ConsoleProfile_STATUS_ARMGenerator())
	gens["IngressProfiles"] = gen.SliceOf(IngressProfile_STATUS_ARMGenerator())
	gens["MasterProfile"] = gen.PtrOf(MasterProfile_STATUS_ARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(NetworkProfile_STATUS_ARMGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ServicePrincipalProfile_STATUS_ARMGenerator())
	gens["WorkerProfiles"] = gen.SliceOf(WorkerProfile_STATUS_ARMGenerator())
	gens["WorkerProfilesStatus"] = gen.SliceOf(WorkerProfile_STATUS_ARMGenerator())
}

func Test_OpenShiftCluster_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OpenShiftCluster_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOpenShiftCluster_STATUS_ARM, OpenShiftCluster_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOpenShiftCluster_STATUS_ARM runs a test to see if a specific instance of OpenShiftCluster_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOpenShiftCluster_STATUS_ARM(subject OpenShiftCluster_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OpenShiftCluster_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OpenShiftCluster_STATUS_ARM instances for property testing - lazily instantiated by
// OpenShiftCluster_STATUS_ARMGenerator()
var openShiftCluster_STATUS_ARMGenerator gopter.Gen

// OpenShiftCluster_STATUS_ARMGenerator returns a generator of OpenShiftCluster_STATUS_ARM instances for property testing.
// We first initialize openShiftCluster_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OpenShiftCluster_STATUS_ARMGenerator() gopter.Gen {
	if openShiftCluster_STATUS_ARMGenerator != nil {
		return openShiftCluster_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOpenShiftCluster_STATUS_ARM(generators)
	openShiftCluster_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OpenShiftCluster_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOpenShiftCluster_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOpenShiftCluster_STATUS_ARM(generators)
	openShiftCluster_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OpenShiftCluster_STATUS_ARM{}), generators)

	return openShiftCluster_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOpenShiftCluster_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOpenShiftCluster_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForOpenShiftCluster_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOpenShiftCluster_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(OpenShiftClusterProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_ServicePrincipalProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServicePrincipalProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServicePrincipalProfile_STATUS_ARM, ServicePrincipalProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServicePrincipalProfile_STATUS_ARM runs a test to see if a specific instance of ServicePrincipalProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServicePrincipalProfile_STATUS_ARM(subject ServicePrincipalProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServicePrincipalProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServicePrincipalProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ServicePrincipalProfile_STATUS_ARMGenerator()
var servicePrincipalProfile_STATUS_ARMGenerator gopter.Gen

// ServicePrincipalProfile_STATUS_ARMGenerator returns a generator of ServicePrincipalProfile_STATUS_ARM instances for property testing.
func ServicePrincipalProfile_STATUS_ARMGenerator() gopter.Gen {
	if servicePrincipalProfile_STATUS_ARMGenerator != nil {
		return servicePrincipalProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServicePrincipalProfile_STATUS_ARM(generators)
	servicePrincipalProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServicePrincipalProfile_STATUS_ARM{}), generators)

	return servicePrincipalProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServicePrincipalProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServicePrincipalProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_ARM_Application,
		SystemData_CreatedByType_STATUS_ARM_Key,
		SystemData_CreatedByType_STATUS_ARM_ManagedIdentity,
		SystemData_CreatedByType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_ARM_Application,
		SystemData_LastModifiedByType_STATUS_ARM_Key,
		SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_ARM_User))
}

func Test_WorkerProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkerProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkerProfile_STATUS_ARM, WorkerProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkerProfile_STATUS_ARM runs a test to see if a specific instance of WorkerProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkerProfile_STATUS_ARM(subject WorkerProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkerProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkerProfile_STATUS_ARM instances for property testing - lazily instantiated by
// WorkerProfile_STATUS_ARMGenerator()
var workerProfile_STATUS_ARMGenerator gopter.Gen

// WorkerProfile_STATUS_ARMGenerator returns a generator of WorkerProfile_STATUS_ARM instances for property testing.
func WorkerProfile_STATUS_ARMGenerator() gopter.Gen {
	if workerProfile_STATUS_ARMGenerator != nil {
		return workerProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkerProfile_STATUS_ARM(generators)
	workerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WorkerProfile_STATUS_ARM{}), generators)

	return workerProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["DiskEncryptionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["EncryptionAtHost"] = gen.PtrOf(gen.OneConstOf(EncryptionAtHost_STATUS_ARM_Disabled, EncryptionAtHost_STATUS_ARM_Enabled))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}
