// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AutoPauseProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoPauseProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoPauseProperties_STATUS_ARM, AutoPauseProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoPauseProperties_STATUS_ARM runs a test to see if a specific instance of AutoPauseProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoPauseProperties_STATUS_ARM(subject AutoPauseProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoPauseProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoPauseProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AutoPauseProperties_STATUS_ARMGenerator()
var autoPauseProperties_STATUS_ARMGenerator gopter.Gen

// AutoPauseProperties_STATUS_ARMGenerator returns a generator of AutoPauseProperties_STATUS_ARM instances for property testing.
func AutoPauseProperties_STATUS_ARMGenerator() gopter.Gen {
	if autoPauseProperties_STATUS_ARMGenerator != nil {
		return autoPauseProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoPauseProperties_STATUS_ARM(generators)
	autoPauseProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoPauseProperties_STATUS_ARM{}), generators)

	return autoPauseProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoPauseProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoPauseProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DelayInMinutes"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutoScaleProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoScaleProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoScaleProperties_STATUS_ARM, AutoScaleProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoScaleProperties_STATUS_ARM runs a test to see if a specific instance of AutoScaleProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoScaleProperties_STATUS_ARM(subject AutoScaleProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoScaleProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoScaleProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AutoScaleProperties_STATUS_ARMGenerator()
var autoScaleProperties_STATUS_ARMGenerator gopter.Gen

// AutoScaleProperties_STATUS_ARMGenerator returns a generator of AutoScaleProperties_STATUS_ARM instances for property testing.
func AutoScaleProperties_STATUS_ARMGenerator() gopter.Gen {
	if autoScaleProperties_STATUS_ARMGenerator != nil {
		return autoScaleProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoScaleProperties_STATUS_ARM(generators)
	autoScaleProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoScaleProperties_STATUS_ARM{}), generators)

	return autoScaleProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoScaleProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoScaleProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MaxNodeCount"] = gen.PtrOf(gen.Int())
	gens["MinNodeCount"] = gen.PtrOf(gen.Int())
}

func Test_BigDataPoolResourceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BigDataPoolResourceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBigDataPoolResourceProperties_STATUS_ARM, BigDataPoolResourceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBigDataPoolResourceProperties_STATUS_ARM runs a test to see if a specific instance of BigDataPoolResourceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBigDataPoolResourceProperties_STATUS_ARM(subject BigDataPoolResourceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BigDataPoolResourceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BigDataPoolResourceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// BigDataPoolResourceProperties_STATUS_ARMGenerator()
var bigDataPoolResourceProperties_STATUS_ARMGenerator gopter.Gen

// BigDataPoolResourceProperties_STATUS_ARMGenerator returns a generator of BigDataPoolResourceProperties_STATUS_ARM instances for property testing.
// We first initialize bigDataPoolResourceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BigDataPoolResourceProperties_STATUS_ARMGenerator() gopter.Gen {
	if bigDataPoolResourceProperties_STATUS_ARMGenerator != nil {
		return bigDataPoolResourceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_STATUS_ARM(generators)
	bigDataPoolResourceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BigDataPoolResourceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBigDataPoolResourceProperties_STATUS_ARM(generators)
	bigDataPoolResourceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BigDataPoolResourceProperties_STATUS_ARM{}), generators)

	return bigDataPoolResourceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CacheSize"] = gen.PtrOf(gen.Int())
	gens["CreationDate"] = gen.PtrOf(gen.AlphaString())
	gens["DefaultSparkLogFolder"] = gen.PtrOf(gen.AlphaString())
	gens["IsAutotuneEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsComputeIsolationEnabled"] = gen.PtrOf(gen.Bool())
	gens["LastSucceededTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["NodeCount"] = gen.PtrOf(gen.Int())
	gens["NodeSize"] = gen.PtrOf(gen.OneConstOf(
		BigDataPoolResourceProperties_NodeSize_STATUS_ARM_Large,
		BigDataPoolResourceProperties_NodeSize_STATUS_ARM_Medium,
		BigDataPoolResourceProperties_NodeSize_STATUS_ARM_None,
		BigDataPoolResourceProperties_NodeSize_STATUS_ARM_Small,
		BigDataPoolResourceProperties_NodeSize_STATUS_ARM_XLarge,
		BigDataPoolResourceProperties_NodeSize_STATUS_ARM_XXLarge,
		BigDataPoolResourceProperties_NodeSize_STATUS_ARM_XXXLarge))
	gens["NodeSizeFamily"] = gen.PtrOf(gen.OneConstOf(
		BigDataPoolResourceProperties_NodeSizeFamily_STATUS_ARM_HardwareAcceleratedFPGA,
		BigDataPoolResourceProperties_NodeSizeFamily_STATUS_ARM_HardwareAcceleratedGPU,
		BigDataPoolResourceProperties_NodeSizeFamily_STATUS_ARM_MemoryOptimized,
		BigDataPoolResourceProperties_NodeSizeFamily_STATUS_ARM_None))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["SessionLevelPackagesEnabled"] = gen.PtrOf(gen.Bool())
	gens["SparkEventsFolder"] = gen.PtrOf(gen.AlphaString())
	gens["SparkVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBigDataPoolResourceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBigDataPoolResourceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoPause"] = gen.PtrOf(AutoPauseProperties_STATUS_ARMGenerator())
	gens["AutoScale"] = gen.PtrOf(AutoScaleProperties_STATUS_ARMGenerator())
	gens["CustomLibraries"] = gen.SliceOf(LibraryInfo_STATUS_ARMGenerator())
	gens["DynamicExecutorAllocation"] = gen.PtrOf(DynamicExecutorAllocation_STATUS_ARMGenerator())
	gens["LibraryRequirements"] = gen.PtrOf(LibraryRequirements_STATUS_ARMGenerator())
	gens["SparkConfigProperties"] = gen.PtrOf(SparkConfigProperties_STATUS_ARMGenerator())
}

func Test_DynamicExecutorAllocation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DynamicExecutorAllocation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDynamicExecutorAllocation_STATUS_ARM, DynamicExecutorAllocation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDynamicExecutorAllocation_STATUS_ARM runs a test to see if a specific instance of DynamicExecutorAllocation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDynamicExecutorAllocation_STATUS_ARM(subject DynamicExecutorAllocation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DynamicExecutorAllocation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DynamicExecutorAllocation_STATUS_ARM instances for property testing - lazily instantiated by
// DynamicExecutorAllocation_STATUS_ARMGenerator()
var dynamicExecutorAllocation_STATUS_ARMGenerator gopter.Gen

// DynamicExecutorAllocation_STATUS_ARMGenerator returns a generator of DynamicExecutorAllocation_STATUS_ARM instances for property testing.
func DynamicExecutorAllocation_STATUS_ARMGenerator() gopter.Gen {
	if dynamicExecutorAllocation_STATUS_ARMGenerator != nil {
		return dynamicExecutorAllocation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDynamicExecutorAllocation_STATUS_ARM(generators)
	dynamicExecutorAllocation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DynamicExecutorAllocation_STATUS_ARM{}), generators)

	return dynamicExecutorAllocation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDynamicExecutorAllocation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDynamicExecutorAllocation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MaxExecutors"] = gen.PtrOf(gen.Int())
	gens["MinExecutors"] = gen.PtrOf(gen.Int())
}

func Test_LibraryInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LibraryInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLibraryInfo_STATUS_ARM, LibraryInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLibraryInfo_STATUS_ARM runs a test to see if a specific instance of LibraryInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLibraryInfo_STATUS_ARM(subject LibraryInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LibraryInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LibraryInfo_STATUS_ARM instances for property testing - lazily instantiated by
// LibraryInfo_STATUS_ARMGenerator()
var libraryInfo_STATUS_ARMGenerator gopter.Gen

// LibraryInfo_STATUS_ARMGenerator returns a generator of LibraryInfo_STATUS_ARM instances for property testing.
func LibraryInfo_STATUS_ARMGenerator() gopter.Gen {
	if libraryInfo_STATUS_ARMGenerator != nil {
		return libraryInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLibraryInfo_STATUS_ARM(generators)
	libraryInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LibraryInfo_STATUS_ARM{}), generators)

	return libraryInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLibraryInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLibraryInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ContainerName"] = gen.PtrOf(gen.AlphaString())
	gens["CreatorId"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningStatus"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["UploadedTimestamp"] = gen.PtrOf(gen.AlphaString())
}

func Test_LibraryRequirements_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LibraryRequirements_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLibraryRequirements_STATUS_ARM, LibraryRequirements_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLibraryRequirements_STATUS_ARM runs a test to see if a specific instance of LibraryRequirements_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLibraryRequirements_STATUS_ARM(subject LibraryRequirements_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LibraryRequirements_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LibraryRequirements_STATUS_ARM instances for property testing - lazily instantiated by
// LibraryRequirements_STATUS_ARMGenerator()
var libraryRequirements_STATUS_ARMGenerator gopter.Gen

// LibraryRequirements_STATUS_ARMGenerator returns a generator of LibraryRequirements_STATUS_ARM instances for property testing.
func LibraryRequirements_STATUS_ARMGenerator() gopter.Gen {
	if libraryRequirements_STATUS_ARMGenerator != nil {
		return libraryRequirements_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLibraryRequirements_STATUS_ARM(generators)
	libraryRequirements_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LibraryRequirements_STATUS_ARM{}), generators)

	return libraryRequirements_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLibraryRequirements_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLibraryRequirements_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Content"] = gen.PtrOf(gen.AlphaString())
	gens["Filename"] = gen.PtrOf(gen.AlphaString())
	gens["Time"] = gen.PtrOf(gen.AlphaString())
}

func Test_SparkConfigProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SparkConfigProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSparkConfigProperties_STATUS_ARM, SparkConfigProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSparkConfigProperties_STATUS_ARM runs a test to see if a specific instance of SparkConfigProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSparkConfigProperties_STATUS_ARM(subject SparkConfigProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SparkConfigProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SparkConfigProperties_STATUS_ARM instances for property testing - lazily instantiated by
// SparkConfigProperties_STATUS_ARMGenerator()
var sparkConfigProperties_STATUS_ARMGenerator gopter.Gen

// SparkConfigProperties_STATUS_ARMGenerator returns a generator of SparkConfigProperties_STATUS_ARM instances for property testing.
func SparkConfigProperties_STATUS_ARMGenerator() gopter.Gen {
	if sparkConfigProperties_STATUS_ARMGenerator != nil {
		return sparkConfigProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSparkConfigProperties_STATUS_ARM(generators)
	sparkConfigProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SparkConfigProperties_STATUS_ARM{}), generators)

	return sparkConfigProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSparkConfigProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSparkConfigProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ConfigurationType"] = gen.PtrOf(gen.OneConstOf(SparkConfigProperties_ConfigurationType_STATUS_ARM_Artifact, SparkConfigProperties_ConfigurationType_STATUS_ARM_File))
	gens["Content"] = gen.PtrOf(gen.AlphaString())
	gens["Filename"] = gen.PtrOf(gen.AlphaString())
	gens["Time"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspacesBigDataPool_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspacesBigDataPool_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacesBigDataPool_STATUS_ARM, WorkspacesBigDataPool_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacesBigDataPool_STATUS_ARM runs a test to see if a specific instance of WorkspacesBigDataPool_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacesBigDataPool_STATUS_ARM(subject WorkspacesBigDataPool_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspacesBigDataPool_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspacesBigDataPool_STATUS_ARM instances for property testing - lazily instantiated by
// WorkspacesBigDataPool_STATUS_ARMGenerator()
var workspacesBigDataPool_STATUS_ARMGenerator gopter.Gen

// WorkspacesBigDataPool_STATUS_ARMGenerator returns a generator of WorkspacesBigDataPool_STATUS_ARM instances for property testing.
// We first initialize workspacesBigDataPool_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacesBigDataPool_STATUS_ARMGenerator() gopter.Gen {
	if workspacesBigDataPool_STATUS_ARMGenerator != nil {
		return workspacesBigDataPool_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_STATUS_ARM(generators)
	workspacesBigDataPool_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspacesBigDataPool_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForWorkspacesBigDataPool_STATUS_ARM(generators)
	workspacesBigDataPool_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspacesBigDataPool_STATUS_ARM{}), generators)

	return workspacesBigDataPool_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspacesBigDataPool_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacesBigDataPool_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(BigDataPoolResourceProperties_STATUS_ARMGenerator())
}
