// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AutoPauseProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoPauseProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoPauseProperties_ARM, AutoPauseProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoPauseProperties_ARM runs a test to see if a specific instance of AutoPauseProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoPauseProperties_ARM(subject AutoPauseProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoPauseProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoPauseProperties_ARM instances for property testing - lazily instantiated by
// AutoPauseProperties_ARMGenerator()
var autoPauseProperties_ARMGenerator gopter.Gen

// AutoPauseProperties_ARMGenerator returns a generator of AutoPauseProperties_ARM instances for property testing.
func AutoPauseProperties_ARMGenerator() gopter.Gen {
	if autoPauseProperties_ARMGenerator != nil {
		return autoPauseProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoPauseProperties_ARM(generators)
	autoPauseProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AutoPauseProperties_ARM{}), generators)

	return autoPauseProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoPauseProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoPauseProperties_ARM(gens map[string]gopter.Gen) {
	gens["DelayInMinutes"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutoScaleProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoScaleProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoScaleProperties_ARM, AutoScaleProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoScaleProperties_ARM runs a test to see if a specific instance of AutoScaleProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoScaleProperties_ARM(subject AutoScaleProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoScaleProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoScaleProperties_ARM instances for property testing - lazily instantiated by
// AutoScaleProperties_ARMGenerator()
var autoScaleProperties_ARMGenerator gopter.Gen

// AutoScaleProperties_ARMGenerator returns a generator of AutoScaleProperties_ARM instances for property testing.
func AutoScaleProperties_ARMGenerator() gopter.Gen {
	if autoScaleProperties_ARMGenerator != nil {
		return autoScaleProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoScaleProperties_ARM(generators)
	autoScaleProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AutoScaleProperties_ARM{}), generators)

	return autoScaleProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoScaleProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoScaleProperties_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MaxNodeCount"] = gen.PtrOf(gen.Int())
	gens["MinNodeCount"] = gen.PtrOf(gen.Int())
}

func Test_BigDataPoolResourceProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BigDataPoolResourceProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBigDataPoolResourceProperties_ARM, BigDataPoolResourceProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBigDataPoolResourceProperties_ARM runs a test to see if a specific instance of BigDataPoolResourceProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBigDataPoolResourceProperties_ARM(subject BigDataPoolResourceProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BigDataPoolResourceProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BigDataPoolResourceProperties_ARM instances for property testing - lazily instantiated by
// BigDataPoolResourceProperties_ARMGenerator()
var bigDataPoolResourceProperties_ARMGenerator gopter.Gen

// BigDataPoolResourceProperties_ARMGenerator returns a generator of BigDataPoolResourceProperties_ARM instances for property testing.
// We first initialize bigDataPoolResourceProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BigDataPoolResourceProperties_ARMGenerator() gopter.Gen {
	if bigDataPoolResourceProperties_ARMGenerator != nil {
		return bigDataPoolResourceProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_ARM(generators)
	bigDataPoolResourceProperties_ARMGenerator = gen.Struct(reflect.TypeOf(BigDataPoolResourceProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForBigDataPoolResourceProperties_ARM(generators)
	bigDataPoolResourceProperties_ARMGenerator = gen.Struct(reflect.TypeOf(BigDataPoolResourceProperties_ARM{}), generators)

	return bigDataPoolResourceProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBigDataPoolResourceProperties_ARM(gens map[string]gopter.Gen) {
	gens["CacheSize"] = gen.PtrOf(gen.Int())
	gens["DefaultSparkLogFolder"] = gen.PtrOf(gen.AlphaString())
	gens["IsAutotuneEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsComputeIsolationEnabled"] = gen.PtrOf(gen.Bool())
	gens["NodeCount"] = gen.PtrOf(gen.Int())
	gens["NodeSize"] = gen.PtrOf(gen.OneConstOf(
		BigDataPoolResourceProperties_NodeSize_ARM_Large,
		BigDataPoolResourceProperties_NodeSize_ARM_Medium,
		BigDataPoolResourceProperties_NodeSize_ARM_None,
		BigDataPoolResourceProperties_NodeSize_ARM_Small,
		BigDataPoolResourceProperties_NodeSize_ARM_XLarge,
		BigDataPoolResourceProperties_NodeSize_ARM_XXLarge,
		BigDataPoolResourceProperties_NodeSize_ARM_XXXLarge))
	gens["NodeSizeFamily"] = gen.PtrOf(gen.OneConstOf(
		BigDataPoolResourceProperties_NodeSizeFamily_ARM_HardwareAcceleratedFPGA,
		BigDataPoolResourceProperties_NodeSizeFamily_ARM_HardwareAcceleratedGPU,
		BigDataPoolResourceProperties_NodeSizeFamily_ARM_MemoryOptimized,
		BigDataPoolResourceProperties_NodeSizeFamily_ARM_None))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["SessionLevelPackagesEnabled"] = gen.PtrOf(gen.Bool())
	gens["SparkEventsFolder"] = gen.PtrOf(gen.AlphaString())
	gens["SparkVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBigDataPoolResourceProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBigDataPoolResourceProperties_ARM(gens map[string]gopter.Gen) {
	gens["AutoPause"] = gen.PtrOf(AutoPauseProperties_ARMGenerator())
	gens["AutoScale"] = gen.PtrOf(AutoScaleProperties_ARMGenerator())
	gens["CustomLibraries"] = gen.SliceOf(LibraryInfo_ARMGenerator())
	gens["DynamicExecutorAllocation"] = gen.PtrOf(DynamicExecutorAllocation_ARMGenerator())
	gens["LibraryRequirements"] = gen.PtrOf(LibraryRequirements_ARMGenerator())
	gens["SparkConfigProperties"] = gen.PtrOf(SparkConfigProperties_ARMGenerator())
}

func Test_DynamicExecutorAllocation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DynamicExecutorAllocation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDynamicExecutorAllocation_ARM, DynamicExecutorAllocation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDynamicExecutorAllocation_ARM runs a test to see if a specific instance of DynamicExecutorAllocation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDynamicExecutorAllocation_ARM(subject DynamicExecutorAllocation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DynamicExecutorAllocation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DynamicExecutorAllocation_ARM instances for property testing - lazily instantiated by
// DynamicExecutorAllocation_ARMGenerator()
var dynamicExecutorAllocation_ARMGenerator gopter.Gen

// DynamicExecutorAllocation_ARMGenerator returns a generator of DynamicExecutorAllocation_ARM instances for property testing.
func DynamicExecutorAllocation_ARMGenerator() gopter.Gen {
	if dynamicExecutorAllocation_ARMGenerator != nil {
		return dynamicExecutorAllocation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDynamicExecutorAllocation_ARM(generators)
	dynamicExecutorAllocation_ARMGenerator = gen.Struct(reflect.TypeOf(DynamicExecutorAllocation_ARM{}), generators)

	return dynamicExecutorAllocation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDynamicExecutorAllocation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDynamicExecutorAllocation_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MaxExecutors"] = gen.PtrOf(gen.Int())
	gens["MinExecutors"] = gen.PtrOf(gen.Int())
}

func Test_LibraryInfo_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LibraryInfo_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLibraryInfo_ARM, LibraryInfo_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLibraryInfo_ARM runs a test to see if a specific instance of LibraryInfo_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLibraryInfo_ARM(subject LibraryInfo_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LibraryInfo_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LibraryInfo_ARM instances for property testing - lazily instantiated by LibraryInfo_ARMGenerator()
var libraryInfo_ARMGenerator gopter.Gen

// LibraryInfo_ARMGenerator returns a generator of LibraryInfo_ARM instances for property testing.
func LibraryInfo_ARMGenerator() gopter.Gen {
	if libraryInfo_ARMGenerator != nil {
		return libraryInfo_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLibraryInfo_ARM(generators)
	libraryInfo_ARMGenerator = gen.Struct(reflect.TypeOf(LibraryInfo_ARM{}), generators)

	return libraryInfo_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLibraryInfo_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLibraryInfo_ARM(gens map[string]gopter.Gen) {
	gens["ContainerName"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_LibraryRequirements_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LibraryRequirements_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLibraryRequirements_ARM, LibraryRequirements_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLibraryRequirements_ARM runs a test to see if a specific instance of LibraryRequirements_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLibraryRequirements_ARM(subject LibraryRequirements_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LibraryRequirements_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LibraryRequirements_ARM instances for property testing - lazily instantiated by
// LibraryRequirements_ARMGenerator()
var libraryRequirements_ARMGenerator gopter.Gen

// LibraryRequirements_ARMGenerator returns a generator of LibraryRequirements_ARM instances for property testing.
func LibraryRequirements_ARMGenerator() gopter.Gen {
	if libraryRequirements_ARMGenerator != nil {
		return libraryRequirements_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLibraryRequirements_ARM(generators)
	libraryRequirements_ARMGenerator = gen.Struct(reflect.TypeOf(LibraryRequirements_ARM{}), generators)

	return libraryRequirements_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLibraryRequirements_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLibraryRequirements_ARM(gens map[string]gopter.Gen) {
	gens["Content"] = gen.PtrOf(gen.AlphaString())
	gens["Filename"] = gen.PtrOf(gen.AlphaString())
}

func Test_SparkConfigProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SparkConfigProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSparkConfigProperties_ARM, SparkConfigProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSparkConfigProperties_ARM runs a test to see if a specific instance of SparkConfigProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSparkConfigProperties_ARM(subject SparkConfigProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SparkConfigProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SparkConfigProperties_ARM instances for property testing - lazily instantiated by
// SparkConfigProperties_ARMGenerator()
var sparkConfigProperties_ARMGenerator gopter.Gen

// SparkConfigProperties_ARMGenerator returns a generator of SparkConfigProperties_ARM instances for property testing.
func SparkConfigProperties_ARMGenerator() gopter.Gen {
	if sparkConfigProperties_ARMGenerator != nil {
		return sparkConfigProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSparkConfigProperties_ARM(generators)
	sparkConfigProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SparkConfigProperties_ARM{}), generators)

	return sparkConfigProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSparkConfigProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSparkConfigProperties_ARM(gens map[string]gopter.Gen) {
	gens["ConfigurationType"] = gen.PtrOf(gen.OneConstOf(SparkConfigProperties_ConfigurationType_ARM_Artifact, SparkConfigProperties_ConfigurationType_ARM_File))
	gens["Content"] = gen.PtrOf(gen.AlphaString())
	gens["Filename"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspacesBigDataPool_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspacesBigDataPool_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacesBigDataPool_Spec_ARM, WorkspacesBigDataPool_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacesBigDataPool_Spec_ARM runs a test to see if a specific instance of WorkspacesBigDataPool_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacesBigDataPool_Spec_ARM(subject WorkspacesBigDataPool_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspacesBigDataPool_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspacesBigDataPool_Spec_ARM instances for property testing - lazily instantiated by
// WorkspacesBigDataPool_Spec_ARMGenerator()
var workspacesBigDataPool_Spec_ARMGenerator gopter.Gen

// WorkspacesBigDataPool_Spec_ARMGenerator returns a generator of WorkspacesBigDataPool_Spec_ARM instances for property testing.
// We first initialize workspacesBigDataPool_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacesBigDataPool_Spec_ARMGenerator() gopter.Gen {
	if workspacesBigDataPool_Spec_ARMGenerator != nil {
		return workspacesBigDataPool_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_Spec_ARM(generators)
	workspacesBigDataPool_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspacesBigDataPool_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForWorkspacesBigDataPool_Spec_ARM(generators)
	workspacesBigDataPool_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspacesBigDataPool_Spec_ARM{}), generators)

	return workspacesBigDataPool_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacesBigDataPool_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspacesBigDataPool_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacesBigDataPool_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(BigDataPoolResourceProperties_ARMGenerator())
}
