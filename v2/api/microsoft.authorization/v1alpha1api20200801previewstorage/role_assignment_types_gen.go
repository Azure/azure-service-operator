// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200801previewstorage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Storage version of v1alpha1api20200801preview.RoleAssignment
//Generated from: https://schema.management.azure.com/schemas/2020-08-01-preview/Microsoft.Authorization.Authz.json#/unknown_resourceDefinitions/roleAssignments
type RoleAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleAssignments_Spec  `json:"spec,omitempty"`
	Status            RoleAssignment_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RoleAssignment{}

// GetConditions returns the conditions of the resource
func (roleAssignment *RoleAssignment) GetConditions() conditions.Conditions {
	return roleAssignment.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (roleAssignment *RoleAssignment) SetConditions(conditions conditions.Conditions) {
	roleAssignment.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &RoleAssignment{}

// AzureName returns the Azure name of the resource
func (roleAssignment *RoleAssignment) AzureName() string {
	return roleAssignment.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (roleAssignment *RoleAssignment) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindExtension
}

// GetSpec returns the specification of this resource
func (roleAssignment *RoleAssignment) GetSpec() genruntime.ConvertibleSpec {
	return &roleAssignment.Spec
}

// GetStatus returns the status of this resource
func (roleAssignment *RoleAssignment) GetStatus() genruntime.ConvertibleStatus {
	return &roleAssignment.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Authorization/roleAssignments"
func (roleAssignment *RoleAssignment) GetType() string {
	return "Microsoft.Authorization/roleAssignments"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (roleAssignment *RoleAssignment) Owner() *genruntime.ResourceReference {
	return &genruntime.ResourceReference{Group: roleAssignment.Spec.Owner.Group, Kind: roleAssignment.Spec.Owner.Kind, Namespace: roleAssignment.Namespace, Name: roleAssignment.Spec.Owner.Name}
}

// SetStatus sets the status of this resource
func (roleAssignment *RoleAssignment) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RoleAssignment_Status); ok {
		roleAssignment.Status = *st
		return nil
	}

	// Convert status to required version
	var st RoleAssignment_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	roleAssignment.Status = st
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (roleAssignment *RoleAssignment) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: roleAssignment.Spec.OriginalVersion,
		Kind:    "RoleAssignment",
	}
}

// +kubebuilder:object:root=true
//Storage version of v1alpha1api20200801preview.RoleAssignment
//Generated from: https://schema.management.azure.com/schemas/2020-08-01-preview/Microsoft.Authorization.Authz.json#/unknown_resourceDefinitions/roleAssignments
type RoleAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleAssignment `json:"items"`
}

//Storage version of v1alpha1api20200801preview.RoleAssignment_Status
//Generated from:
type RoleAssignment_Status struct {
	Condition                          *string                `json:"condition,omitempty"`
	ConditionVersion                   *string                `json:"conditionVersion,omitempty"`
	Conditions                         []conditions.Condition `json:"conditions,omitempty"`
	CreatedBy                          *string                `json:"createdBy,omitempty"`
	CreatedOn                          *string                `json:"createdOn,omitempty"`
	DelegatedManagedIdentityResourceId *string                `json:"delegatedManagedIdentityResourceId,omitempty"`
	Description                        *string                `json:"description,omitempty"`
	Id                                 *string                `json:"id,omitempty"`
	Name                               *string                `json:"name,omitempty"`
	PrincipalId                        *string                `json:"principalId,omitempty"`
	PrincipalType                      *string                `json:"principalType,omitempty"`
	PropertyBag                        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RoleDefinitionId                   *string                `json:"roleDefinitionId,omitempty"`
	Scope                              *string                `json:"scope,omitempty"`
	Type                               *string                `json:"type,omitempty"`
	UpdatedBy                          *string                `json:"updatedBy,omitempty"`
	UpdatedOn                          *string                `json:"updatedOn,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RoleAssignment_Status{}

// ConvertStatusFrom populates our RoleAssignment_Status from the provided source
func (roleAssignmentStatus *RoleAssignment_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == roleAssignmentStatus {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(roleAssignmentStatus)
}

// ConvertStatusTo populates the provided destination from our RoleAssignment_Status
func (roleAssignmentStatus *RoleAssignment_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == roleAssignmentStatus {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(roleAssignmentStatus)
}

//Storage version of v1alpha1api20200801preview.RoleAssignments_Spec
type RoleAssignments_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName                          string  `json:"azureName"`
	Condition                          *string `json:"condition,omitempty"`
	ConditionVersion                   *string `json:"conditionVersion,omitempty"`
	DelegatedManagedIdentityResourceId *string `json:"delegatedManagedIdentityResourceId,omitempty"`
	Description                        *string `json:"description,omitempty"`
	Location                           *string `json:"location,omitempty"`
	OriginalVersion                    string  `json:"originalVersion"`

	// +kubebuilder:validation:Required
	Owner         genruntime.ArbitraryOwnerReference `json:"owner"`
	PrincipalId   *string                            `json:"principalId,omitempty"`
	PrincipalType *string                            `json:"principalType,omitempty"`
	PropertyBag   genruntime.PropertyBag             `json:"$propertyBag,omitempty"`

	// +kubebuilder:validation:Required
	//RoleDefinitionReference: The role definition ID.
	RoleDefinitionReference genruntime.ResourceReference `armReference:"RoleDefinitionId" json:"roleDefinitionReference"`
	Tags                    map[string]string            `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &RoleAssignments_Spec{}

// ConvertSpecFrom populates our RoleAssignments_Spec from the provided source
func (roleAssignmentsSpec *RoleAssignments_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == roleAssignmentsSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(roleAssignmentsSpec)
}

// ConvertSpecTo populates the provided destination from our RoleAssignments_Spec
func (roleAssignmentsSpec *RoleAssignments_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == roleAssignmentsSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(roleAssignmentsSpec)
}

func init() {
	SchemeBuilder.Register(&RoleAssignment{}, &RoleAssignmentList{})
}
