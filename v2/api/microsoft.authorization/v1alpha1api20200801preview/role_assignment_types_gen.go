// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200801preview

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.authorization/v1alpha1api20200801previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.authorization.azure.com,resources=roleassignments,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.authorization.azure.com,resources={roleassignments/status,roleassignments/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-08-01-preview/Microsoft.Authorization.Authz.json#/unknown_resourceDefinitions/roleAssignments
type RoleAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleAssignments_Spec  `json:"spec,omitempty"`
	Status            RoleAssignment_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RoleAssignment{}

// GetConditions returns the conditions of the resource
func (roleAssignment *RoleAssignment) GetConditions() conditions.Conditions {
	return roleAssignment.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (roleAssignment *RoleAssignment) SetConditions(conditions conditions.Conditions) {
	roleAssignment.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-authorization-azure-com-v1alpha1api20200801preview-roleassignment,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.authorization.azure.com,resources=roleassignments,verbs=create;update,versions=v1alpha1api20200801preview,name=default.v1alpha1api20200801preview.roleassignments.microsoft.authorization.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &RoleAssignment{}

// Default applies defaults to the RoleAssignment resource
func (roleAssignment *RoleAssignment) Default() {
	roleAssignment.defaultImpl()
	var temp interface{} = roleAssignment
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (roleAssignment *RoleAssignment) defaultAzureName() {
	if roleAssignment.Spec.AzureName == "" {
		roleAssignment.Spec.AzureName = roleAssignment.Name
	}
}

// defaultImpl applies the code generated defaults to the RoleAssignment resource
func (roleAssignment *RoleAssignment) defaultImpl() { roleAssignment.defaultAzureName() }

var _ genruntime.KubernetesResource = &RoleAssignment{}

// AzureName returns the Azure name of the resource
func (roleAssignment *RoleAssignment) AzureName() string {
	return roleAssignment.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (roleAssignment *RoleAssignment) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindExtension
}

// GetSpec returns the specification of this resource
func (roleAssignment *RoleAssignment) GetSpec() genruntime.ConvertibleSpec {
	return &roleAssignment.Spec
}

// GetStatus returns the status of this resource
func (roleAssignment *RoleAssignment) GetStatus() genruntime.ConvertibleStatus {
	return &roleAssignment.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Authorization/roleAssignments"
func (roleAssignment *RoleAssignment) GetType() string {
	return "Microsoft.Authorization/roleAssignments"
}

// NewEmptyStatus returns a new empty (blank) status
func (roleAssignment *RoleAssignment) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RoleAssignment_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (roleAssignment *RoleAssignment) Owner() *genruntime.ResourceReference {
	return &genruntime.ResourceReference{
		Group:     roleAssignment.Spec.Owner.Group,
		Kind:      roleAssignment.Spec.Owner.Kind,
		Namespace: roleAssignment.Namespace,
		Name:      roleAssignment.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (roleAssignment *RoleAssignment) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RoleAssignment_Status); ok {
		roleAssignment.Status = *st
		return nil
	}

	// Convert status to required version
	var st RoleAssignment_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	roleAssignment.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-authorization-azure-com-v1alpha1api20200801preview-roleassignment,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.authorization.azure.com,resources=roleassignments,verbs=create;update,versions=v1alpha1api20200801preview,name=validate.v1alpha1api20200801preview.roleassignments.microsoft.authorization.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &RoleAssignment{}

// ValidateCreate validates the creation of the resource
func (roleAssignment *RoleAssignment) ValidateCreate() error {
	validations := roleAssignment.createValidations()
	var temp interface{} = roleAssignment
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (roleAssignment *RoleAssignment) ValidateDelete() error {
	validations := roleAssignment.deleteValidations()
	var temp interface{} = roleAssignment
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (roleAssignment *RoleAssignment) ValidateUpdate(old runtime.Object) error {
	validations := roleAssignment.updateValidations()
	var temp interface{} = roleAssignment
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (roleAssignment *RoleAssignment) createValidations() []func() error {
	return []func() error{roleAssignment.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (roleAssignment *RoleAssignment) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (roleAssignment *RoleAssignment) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return roleAssignment.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (roleAssignment *RoleAssignment) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&roleAssignment.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRoleAssignment populates our RoleAssignment from the provided source RoleAssignment
func (roleAssignment *RoleAssignment) AssignPropertiesFromRoleAssignment(source *v1alpha1api20200801previewstorage.RoleAssignment) error {

	// Spec
	var spec RoleAssignments_Spec
	err := spec.AssignPropertiesFromRoleAssignmentsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromRoleAssignmentsSpec()")
	}
	roleAssignment.Spec = spec

	// Status
	var status RoleAssignment_Status
	err = status.AssignPropertiesFromRoleAssignmentStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromRoleAssignmentStatus()")
	}
	roleAssignment.Status = status

	// No error
	return nil
}

// AssignPropertiesToRoleAssignment populates the provided destination RoleAssignment from our RoleAssignment
func (roleAssignment *RoleAssignment) AssignPropertiesToRoleAssignment(destination *v1alpha1api20200801previewstorage.RoleAssignment) error {

	// Spec
	var spec v1alpha1api20200801previewstorage.RoleAssignments_Spec
	err := roleAssignment.Spec.AssignPropertiesToRoleAssignmentsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToRoleAssignmentsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20200801previewstorage.RoleAssignment_Status
	err = roleAssignment.Status.AssignPropertiesToRoleAssignmentStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToRoleAssignmentStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (roleAssignment *RoleAssignment) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: roleAssignment.Spec.OriginalVersion(),
		Kind:    "RoleAssignment",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-08-01-preview/Microsoft.Authorization.Authz.json#/unknown_resourceDefinitions/roleAssignments
type RoleAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleAssignment `json:"items"`
}

//Generated from:
type RoleAssignment_Status struct {
	//Condition: The conditions on the role assignment. This limits the resources it
	//can be assigned to. e.g.:
	//@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
	//StringEqualsIgnoreCase 'foo_storage_container'
	Condition *string `json:"condition,omitempty"`

	//ConditionVersion: Version of the condition. Currently accepted value is '2.0'
	ConditionVersion *string `json:"conditionVersion,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreatedBy: Id of the user who created the assignment
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedOn: Time it was created
	CreatedOn *string `json:"createdOn,omitempty"`

	//DelegatedManagedIdentityResourceId: Id of the delegated managed identity resource
	DelegatedManagedIdentityResourceId *string `json:"delegatedManagedIdentityResourceId,omitempty"`

	//Description: Description of role assignment
	Description *string `json:"description,omitempty"`

	//Id: The role assignment ID.
	Id *string `json:"id,omitempty"`

	//Name: The role assignment name.
	Name *string `json:"name,omitempty"`

	//PrincipalId: The principal ID.
	PrincipalId *string `json:"principalId,omitempty"`

	//PrincipalType: The principal type of the assigned principal ID.
	PrincipalType *RoleAssignmentPropertiesStatusPrincipalType `json:"principalType,omitempty"`

	//RoleDefinitionId: The role definition ID.
	RoleDefinitionId *string `json:"roleDefinitionId,omitempty"`

	//Scope: The role assignment scope.
	Scope *string `json:"scope,omitempty"`

	//Type: The role assignment type.
	Type *string `json:"type,omitempty"`

	//UpdatedBy: Id of the user who updated the assignment
	UpdatedBy *string `json:"updatedBy,omitempty"`

	//UpdatedOn: Time it was updated
	UpdatedOn *string `json:"updatedOn,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RoleAssignment_Status{}

// ConvertStatusFrom populates our RoleAssignment_Status from the provided source
func (roleAssignmentStatus *RoleAssignment_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20200801previewstorage.RoleAssignment_Status)
	if ok {
		// Populate our instance from source
		return roleAssignmentStatus.AssignPropertiesFromRoleAssignmentStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200801previewstorage.RoleAssignment_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = roleAssignmentStatus.AssignPropertiesFromRoleAssignmentStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RoleAssignment_Status
func (roleAssignmentStatus *RoleAssignment_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20200801previewstorage.RoleAssignment_Status)
	if ok {
		// Populate destination from our instance
		return roleAssignmentStatus.AssignPropertiesToRoleAssignmentStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200801previewstorage.RoleAssignment_Status{}
	err := roleAssignmentStatus.AssignPropertiesToRoleAssignmentStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &RoleAssignment_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (roleAssignmentStatus *RoleAssignment_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoleAssignment_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (roleAssignmentStatus *RoleAssignment_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoleAssignment_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoleAssignment_StatusARM, got %T", armInput)
	}

	// Set property ‘Condition’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Condition != nil {
			condition := *typedInput.Properties.Condition
			roleAssignmentStatus.Condition = &condition
		}
	}

	// Set property ‘ConditionVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConditionVersion != nil {
			conditionVersion := *typedInput.Properties.ConditionVersion
			roleAssignmentStatus.ConditionVersion = &conditionVersion
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreatedBy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedBy != nil {
			createdBy := *typedInput.Properties.CreatedBy
			roleAssignmentStatus.CreatedBy = &createdBy
		}
	}

	// Set property ‘CreatedOn’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedOn != nil {
			createdOn := *typedInput.Properties.CreatedOn
			roleAssignmentStatus.CreatedOn = &createdOn
		}
	}

	// Set property ‘DelegatedManagedIdentityResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DelegatedManagedIdentityResourceId != nil {
			delegatedManagedIdentityResourceId := *typedInput.Properties.DelegatedManagedIdentityResourceId
			roleAssignmentStatus.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceId
		}
	}

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			roleAssignmentStatus.Description = &description
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		roleAssignmentStatus.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		roleAssignmentStatus.Name = &name
	}

	// Set property ‘PrincipalId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		roleAssignmentStatus.PrincipalId = &typedInput.Properties.PrincipalId
	}

	// Set property ‘PrincipalType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrincipalType != nil {
			principalType := *typedInput.Properties.PrincipalType
			roleAssignmentStatus.PrincipalType = &principalType
		}
	}

	// Set property ‘RoleDefinitionId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		roleAssignmentStatus.RoleDefinitionId = &typedInput.Properties.RoleDefinitionId
	}

	// Set property ‘Scope’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Scope != nil {
			scope := *typedInput.Properties.Scope
			roleAssignmentStatus.Scope = &scope
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		roleAssignmentStatus.Type = &typeVar
	}

	// Set property ‘UpdatedBy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedBy != nil {
			updatedBy := *typedInput.Properties.UpdatedBy
			roleAssignmentStatus.UpdatedBy = &updatedBy
		}
	}

	// Set property ‘UpdatedOn’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedOn != nil {
			updatedOn := *typedInput.Properties.UpdatedOn
			roleAssignmentStatus.UpdatedOn = &updatedOn
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromRoleAssignmentStatus populates our RoleAssignment_Status from the provided source RoleAssignment_Status
func (roleAssignmentStatus *RoleAssignment_Status) AssignPropertiesFromRoleAssignmentStatus(source *v1alpha1api20200801previewstorage.RoleAssignment_Status) error {

	// Condition
	if source.Condition != nil {
		condition := *source.Condition
		roleAssignmentStatus.Condition = &condition
	} else {
		roleAssignmentStatus.Condition = nil
	}

	// ConditionVersion
	if source.ConditionVersion != nil {
		conditionVersion := *source.ConditionVersion
		roleAssignmentStatus.ConditionVersion = &conditionVersion
	} else {
		roleAssignmentStatus.ConditionVersion = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	roleAssignmentStatus.Conditions = conditionList

	// CreatedBy
	if source.CreatedBy != nil {
		createdBy := *source.CreatedBy
		roleAssignmentStatus.CreatedBy = &createdBy
	} else {
		roleAssignmentStatus.CreatedBy = nil
	}

	// CreatedOn
	if source.CreatedOn != nil {
		createdOn := *source.CreatedOn
		roleAssignmentStatus.CreatedOn = &createdOn
	} else {
		roleAssignmentStatus.CreatedOn = nil
	}

	// DelegatedManagedIdentityResourceId
	if source.DelegatedManagedIdentityResourceId != nil {
		delegatedManagedIdentityResourceId := *source.DelegatedManagedIdentityResourceId
		roleAssignmentStatus.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceId
	} else {
		roleAssignmentStatus.DelegatedManagedIdentityResourceId = nil
	}

	// Description
	if source.Description != nil {
		description := *source.Description
		roleAssignmentStatus.Description = &description
	} else {
		roleAssignmentStatus.Description = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		roleAssignmentStatus.Id = &id
	} else {
		roleAssignmentStatus.Id = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		roleAssignmentStatus.Name = &name
	} else {
		roleAssignmentStatus.Name = nil
	}

	// PrincipalId
	if source.PrincipalId != nil {
		principalId := *source.PrincipalId
		roleAssignmentStatus.PrincipalId = &principalId
	} else {
		roleAssignmentStatus.PrincipalId = nil
	}

	// PrincipalType
	if source.PrincipalType != nil {
		principalType := RoleAssignmentPropertiesStatusPrincipalType(*source.PrincipalType)
		roleAssignmentStatus.PrincipalType = &principalType
	} else {
		roleAssignmentStatus.PrincipalType = nil
	}

	// RoleDefinitionId
	if source.RoleDefinitionId != nil {
		roleDefinitionId := *source.RoleDefinitionId
		roleAssignmentStatus.RoleDefinitionId = &roleDefinitionId
	} else {
		roleAssignmentStatus.RoleDefinitionId = nil
	}

	// Scope
	if source.Scope != nil {
		scope := *source.Scope
		roleAssignmentStatus.Scope = &scope
	} else {
		roleAssignmentStatus.Scope = nil
	}

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		roleAssignmentStatus.Type = &typeVar
	} else {
		roleAssignmentStatus.Type = nil
	}

	// UpdatedBy
	if source.UpdatedBy != nil {
		updatedBy := *source.UpdatedBy
		roleAssignmentStatus.UpdatedBy = &updatedBy
	} else {
		roleAssignmentStatus.UpdatedBy = nil
	}

	// UpdatedOn
	if source.UpdatedOn != nil {
		updatedOn := *source.UpdatedOn
		roleAssignmentStatus.UpdatedOn = &updatedOn
	} else {
		roleAssignmentStatus.UpdatedOn = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoleAssignmentStatus populates the provided destination RoleAssignment_Status from our RoleAssignment_Status
func (roleAssignmentStatus *RoleAssignment_Status) AssignPropertiesToRoleAssignmentStatus(destination *v1alpha1api20200801previewstorage.RoleAssignment_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Condition
	if roleAssignmentStatus.Condition != nil {
		condition := *roleAssignmentStatus.Condition
		destination.Condition = &condition
	} else {
		destination.Condition = nil
	}

	// ConditionVersion
	if roleAssignmentStatus.ConditionVersion != nil {
		conditionVersion := *roleAssignmentStatus.ConditionVersion
		destination.ConditionVersion = &conditionVersion
	} else {
		destination.ConditionVersion = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(roleAssignmentStatus.Conditions))
	for conditionIndex, conditionItem := range roleAssignmentStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// CreatedBy
	if roleAssignmentStatus.CreatedBy != nil {
		createdBy := *roleAssignmentStatus.CreatedBy
		destination.CreatedBy = &createdBy
	} else {
		destination.CreatedBy = nil
	}

	// CreatedOn
	if roleAssignmentStatus.CreatedOn != nil {
		createdOn := *roleAssignmentStatus.CreatedOn
		destination.CreatedOn = &createdOn
	} else {
		destination.CreatedOn = nil
	}

	// DelegatedManagedIdentityResourceId
	if roleAssignmentStatus.DelegatedManagedIdentityResourceId != nil {
		delegatedManagedIdentityResourceId := *roleAssignmentStatus.DelegatedManagedIdentityResourceId
		destination.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceId
	} else {
		destination.DelegatedManagedIdentityResourceId = nil
	}

	// Description
	if roleAssignmentStatus.Description != nil {
		description := *roleAssignmentStatus.Description
		destination.Description = &description
	} else {
		destination.Description = nil
	}

	// Id
	if roleAssignmentStatus.Id != nil {
		id := *roleAssignmentStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Name
	if roleAssignmentStatus.Name != nil {
		name := *roleAssignmentStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// PrincipalId
	if roleAssignmentStatus.PrincipalId != nil {
		principalId := *roleAssignmentStatus.PrincipalId
		destination.PrincipalId = &principalId
	} else {
		destination.PrincipalId = nil
	}

	// PrincipalType
	if roleAssignmentStatus.PrincipalType != nil {
		principalType := string(*roleAssignmentStatus.PrincipalType)
		destination.PrincipalType = &principalType
	} else {
		destination.PrincipalType = nil
	}

	// RoleDefinitionId
	if roleAssignmentStatus.RoleDefinitionId != nil {
		roleDefinitionId := *roleAssignmentStatus.RoleDefinitionId
		destination.RoleDefinitionId = &roleDefinitionId
	} else {
		destination.RoleDefinitionId = nil
	}

	// Scope
	if roleAssignmentStatus.Scope != nil {
		scope := *roleAssignmentStatus.Scope
		destination.Scope = &scope
	} else {
		destination.Scope = nil
	}

	// Type
	if roleAssignmentStatus.Type != nil {
		typeVar := *roleAssignmentStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UpdatedBy
	if roleAssignmentStatus.UpdatedBy != nil {
		updatedBy := *roleAssignmentStatus.UpdatedBy
		destination.UpdatedBy = &updatedBy
	} else {
		destination.UpdatedBy = nil
	}

	// UpdatedOn
	if roleAssignmentStatus.UpdatedOn != nil {
		updatedOn := *roleAssignmentStatus.UpdatedOn
		destination.UpdatedOn = &updatedOn
	} else {
		destination.UpdatedOn = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type RoleAssignments_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Condition: The conditions on the role assignment. This limits the resources it
	//can be assigned to. e.g.:
	//@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName]
	//StringEqualsIgnoreCase 'foo_storage_container'
	Condition *string `json:"condition,omitempty"`

	//ConditionVersion: Version of the condition. Currently accepted value is '2.0'
	ConditionVersion *string `json:"conditionVersion,omitempty"`

	//DelegatedManagedIdentityResourceId: Id of the delegated managed identity resource
	DelegatedManagedIdentityResourceId *string `json:"delegatedManagedIdentityResourceId,omitempty"`

	//Description: Description of role assignment
	Description *string `json:"description,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.ArbitraryOwnerReference `json:"owner"`

	// +kubebuilder:validation:Required
	//PrincipalId: The principal ID.
	PrincipalId string `json:"principalId"`

	//PrincipalType: The principal type of the assigned principal ID.
	PrincipalType *RoleAssignmentPropertiesPrincipalType `json:"principalType,omitempty"`

	// +kubebuilder:validation:Required
	//RoleDefinitionReference: The role definition ID.
	RoleDefinitionReference genruntime.ResourceReference `armReference:"RoleDefinitionId" json:"roleDefinitionReference"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &RoleAssignments_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (roleAssignmentsSpec *RoleAssignments_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if roleAssignmentsSpec == nil {
		return nil, nil
	}
	var result RoleAssignments_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = RoleAssignmentsSpecAPIVersion20200801Preview

	// Set property ‘Location’:
	if roleAssignmentsSpec.Location != nil {
		location := *roleAssignmentsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if roleAssignmentsSpec.Condition != nil {
		condition := *roleAssignmentsSpec.Condition
		result.Properties.Condition = &condition
	}
	if roleAssignmentsSpec.ConditionVersion != nil {
		conditionVersion := *roleAssignmentsSpec.ConditionVersion
		result.Properties.ConditionVersion = &conditionVersion
	}
	if roleAssignmentsSpec.DelegatedManagedIdentityResourceId != nil {
		delegatedManagedIdentityResourceId := *roleAssignmentsSpec.DelegatedManagedIdentityResourceId
		result.Properties.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceId
	}
	if roleAssignmentsSpec.Description != nil {
		description := *roleAssignmentsSpec.Description
		result.Properties.Description = &description
	}
	result.Properties.PrincipalId = roleAssignmentsSpec.PrincipalId
	if roleAssignmentsSpec.PrincipalType != nil {
		principalType := *roleAssignmentsSpec.PrincipalType
		result.Properties.PrincipalType = &principalType
	}
	roleDefinitionIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(roleAssignmentsSpec.RoleDefinitionReference)
	if err != nil {
		return nil, err
	}
	result.Properties.RoleDefinitionId = roleDefinitionIdARMID

	// Set property ‘Scope’:
	result.Scope = resolved.Scope

	// Set property ‘Tags’:
	if roleAssignmentsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range roleAssignmentsSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = RoleAssignmentsSpecTypeMicrosoftAuthorizationRoleAssignments
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (roleAssignmentsSpec *RoleAssignments_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoleAssignments_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (roleAssignmentsSpec *RoleAssignments_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoleAssignments_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoleAssignments_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	roleAssignmentsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Condition’:
	// copying flattened property:
	if typedInput.Properties.Condition != nil {
		condition := *typedInput.Properties.Condition
		roleAssignmentsSpec.Condition = &condition
	}

	// Set property ‘ConditionVersion’:
	// copying flattened property:
	if typedInput.Properties.ConditionVersion != nil {
		conditionVersion := *typedInput.Properties.ConditionVersion
		roleAssignmentsSpec.ConditionVersion = &conditionVersion
	}

	// Set property ‘DelegatedManagedIdentityResourceId’:
	// copying flattened property:
	if typedInput.Properties.DelegatedManagedIdentityResourceId != nil {
		delegatedManagedIdentityResourceId := *typedInput.Properties.DelegatedManagedIdentityResourceId
		roleAssignmentsSpec.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceId
	}

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties.Description != nil {
		description := *typedInput.Properties.Description
		roleAssignmentsSpec.Description = &description
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		roleAssignmentsSpec.Location = &location
	}

	// Set property ‘Owner’:
	roleAssignmentsSpec.Owner = owner

	// Set property ‘PrincipalId’:
	// copying flattened property:
	roleAssignmentsSpec.PrincipalId = typedInput.Properties.PrincipalId

	// Set property ‘PrincipalType’:
	// copying flattened property:
	if typedInput.Properties.PrincipalType != nil {
		principalType := *typedInput.Properties.PrincipalType
		roleAssignmentsSpec.PrincipalType = &principalType
	}

	// no assignment for property ‘RoleDefinitionReference’

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		roleAssignmentsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			roleAssignmentsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RoleAssignments_Spec{}

// ConvertSpecFrom populates our RoleAssignments_Spec from the provided source
func (roleAssignmentsSpec *RoleAssignments_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200801previewstorage.RoleAssignments_Spec)
	if ok {
		// Populate our instance from source
		return roleAssignmentsSpec.AssignPropertiesFromRoleAssignmentsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200801previewstorage.RoleAssignments_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = roleAssignmentsSpec.AssignPropertiesFromRoleAssignmentsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RoleAssignments_Spec
func (roleAssignmentsSpec *RoleAssignments_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200801previewstorage.RoleAssignments_Spec)
	if ok {
		// Populate destination from our instance
		return roleAssignmentsSpec.AssignPropertiesToRoleAssignmentsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200801previewstorage.RoleAssignments_Spec{}
	err := roleAssignmentsSpec.AssignPropertiesToRoleAssignmentsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRoleAssignmentsSpec populates our RoleAssignments_Spec from the provided source RoleAssignments_Spec
func (roleAssignmentsSpec *RoleAssignments_Spec) AssignPropertiesFromRoleAssignmentsSpec(source *v1alpha1api20200801previewstorage.RoleAssignments_Spec) error {

	// AzureName
	roleAssignmentsSpec.AzureName = source.AzureName

	// Condition
	if source.Condition != nil {
		condition := *source.Condition
		roleAssignmentsSpec.Condition = &condition
	} else {
		roleAssignmentsSpec.Condition = nil
	}

	// ConditionVersion
	if source.ConditionVersion != nil {
		conditionVersion := *source.ConditionVersion
		roleAssignmentsSpec.ConditionVersion = &conditionVersion
	} else {
		roleAssignmentsSpec.ConditionVersion = nil
	}

	// DelegatedManagedIdentityResourceId
	if source.DelegatedManagedIdentityResourceId != nil {
		delegatedManagedIdentityResourceId := *source.DelegatedManagedIdentityResourceId
		roleAssignmentsSpec.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceId
	} else {
		roleAssignmentsSpec.DelegatedManagedIdentityResourceId = nil
	}

	// Description
	if source.Description != nil {
		description := *source.Description
		roleAssignmentsSpec.Description = &description
	} else {
		roleAssignmentsSpec.Description = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		roleAssignmentsSpec.Location = &location
	} else {
		roleAssignmentsSpec.Location = nil
	}

	// Owner
	roleAssignmentsSpec.Owner = source.Owner.Copy()

	// PrincipalId
	if source.PrincipalId != nil {
		roleAssignmentsSpec.PrincipalId = *source.PrincipalId
	} else {
		roleAssignmentsSpec.PrincipalId = ""
	}

	// PrincipalType
	if source.PrincipalType != nil {
		principalType := RoleAssignmentPropertiesPrincipalType(*source.PrincipalType)
		roleAssignmentsSpec.PrincipalType = &principalType
	} else {
		roleAssignmentsSpec.PrincipalType = nil
	}

	// RoleDefinitionReference
	roleAssignmentsSpec.RoleDefinitionReference = source.RoleDefinitionReference.Copy()

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	roleAssignmentsSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToRoleAssignmentsSpec populates the provided destination RoleAssignments_Spec from our RoleAssignments_Spec
func (roleAssignmentsSpec *RoleAssignments_Spec) AssignPropertiesToRoleAssignmentsSpec(destination *v1alpha1api20200801previewstorage.RoleAssignments_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = roleAssignmentsSpec.AzureName

	// Condition
	if roleAssignmentsSpec.Condition != nil {
		condition := *roleAssignmentsSpec.Condition
		destination.Condition = &condition
	} else {
		destination.Condition = nil
	}

	// ConditionVersion
	if roleAssignmentsSpec.ConditionVersion != nil {
		conditionVersion := *roleAssignmentsSpec.ConditionVersion
		destination.ConditionVersion = &conditionVersion
	} else {
		destination.ConditionVersion = nil
	}

	// DelegatedManagedIdentityResourceId
	if roleAssignmentsSpec.DelegatedManagedIdentityResourceId != nil {
		delegatedManagedIdentityResourceId := *roleAssignmentsSpec.DelegatedManagedIdentityResourceId
		destination.DelegatedManagedIdentityResourceId = &delegatedManagedIdentityResourceId
	} else {
		destination.DelegatedManagedIdentityResourceId = nil
	}

	// Description
	if roleAssignmentsSpec.Description != nil {
		description := *roleAssignmentsSpec.Description
		destination.Description = &description
	} else {
		destination.Description = nil
	}

	// Location
	if roleAssignmentsSpec.Location != nil {
		location := *roleAssignmentsSpec.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// OriginalVersion
	destination.OriginalVersion = roleAssignmentsSpec.OriginalVersion()

	// Owner
	destination.Owner = roleAssignmentsSpec.Owner.Copy()

	// PrincipalId
	principalId := roleAssignmentsSpec.PrincipalId
	destination.PrincipalId = &principalId

	// PrincipalType
	if roleAssignmentsSpec.PrincipalType != nil {
		principalType := string(*roleAssignmentsSpec.PrincipalType)
		destination.PrincipalType = &principalType
	} else {
		destination.PrincipalType = nil
	}

	// RoleDefinitionReference
	destination.RoleDefinitionReference = roleAssignmentsSpec.RoleDefinitionReference.Copy()

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range roleAssignmentsSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (roleAssignmentsSpec *RoleAssignments_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (roleAssignmentsSpec *RoleAssignments_Spec) SetAzureName(azureName string) {
	roleAssignmentsSpec.AzureName = azureName
}

// +kubebuilder:validation:Enum={"Application","DirectoryObjectOrGroup","DirectoryRoleTemplate","Everyone","ForeignGroup","Group","MSI","ServicePrincipal","Unknown","User"}
type RoleAssignmentPropertiesPrincipalType string

const (
	RoleAssignmentPropertiesPrincipalTypeApplication            = RoleAssignmentPropertiesPrincipalType("Application")
	RoleAssignmentPropertiesPrincipalTypeDirectoryObjectOrGroup = RoleAssignmentPropertiesPrincipalType("DirectoryObjectOrGroup")
	RoleAssignmentPropertiesPrincipalTypeDirectoryRoleTemplate  = RoleAssignmentPropertiesPrincipalType("DirectoryRoleTemplate")
	RoleAssignmentPropertiesPrincipalTypeEveryone               = RoleAssignmentPropertiesPrincipalType("Everyone")
	RoleAssignmentPropertiesPrincipalTypeForeignGroup           = RoleAssignmentPropertiesPrincipalType("ForeignGroup")
	RoleAssignmentPropertiesPrincipalTypeGroup                  = RoleAssignmentPropertiesPrincipalType("Group")
	RoleAssignmentPropertiesPrincipalTypeMSI                    = RoleAssignmentPropertiesPrincipalType("MSI")
	RoleAssignmentPropertiesPrincipalTypeServicePrincipal       = RoleAssignmentPropertiesPrincipalType("ServicePrincipal")
	RoleAssignmentPropertiesPrincipalTypeUnknown                = RoleAssignmentPropertiesPrincipalType("Unknown")
	RoleAssignmentPropertiesPrincipalTypeUser                   = RoleAssignmentPropertiesPrincipalType("User")
)

type RoleAssignmentPropertiesStatusPrincipalType string

const (
	RoleAssignmentPropertiesStatusPrincipalTypeApplication            = RoleAssignmentPropertiesStatusPrincipalType("Application")
	RoleAssignmentPropertiesStatusPrincipalTypeDirectoryObjectOrGroup = RoleAssignmentPropertiesStatusPrincipalType("DirectoryObjectOrGroup")
	RoleAssignmentPropertiesStatusPrincipalTypeDirectoryRoleTemplate  = RoleAssignmentPropertiesStatusPrincipalType("DirectoryRoleTemplate")
	RoleAssignmentPropertiesStatusPrincipalTypeEveryone               = RoleAssignmentPropertiesStatusPrincipalType("Everyone")
	RoleAssignmentPropertiesStatusPrincipalTypeForeignGroup           = RoleAssignmentPropertiesStatusPrincipalType("ForeignGroup")
	RoleAssignmentPropertiesStatusPrincipalTypeGroup                  = RoleAssignmentPropertiesStatusPrincipalType("Group")
	RoleAssignmentPropertiesStatusPrincipalTypeMSI                    = RoleAssignmentPropertiesStatusPrincipalType("MSI")
	RoleAssignmentPropertiesStatusPrincipalTypeServicePrincipal       = RoleAssignmentPropertiesStatusPrincipalType("ServicePrincipal")
	RoleAssignmentPropertiesStatusPrincipalTypeUnknown                = RoleAssignmentPropertiesStatusPrincipalType("Unknown")
	RoleAssignmentPropertiesStatusPrincipalTypeUser                   = RoleAssignmentPropertiesStatusPrincipalType("User")
)

func init() {
	SchemeBuilder.Register(&RoleAssignment{}, &RoleAssignmentList{})
}
