// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200930storage

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20201201storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Disk_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Disk via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDisk, DiskGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDisk runs a test to see if a specific instance of Disk round trips to JSON and back losslessly
func RunJSONSerializationTestForDisk(subject Disk) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Disk
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Disk instances for property testing - lazily instantiated by DiskGenerator()
var diskGenerator gopter.Gen

// DiskGenerator returns a generator of Disk instances for property testing.
func DiskGenerator() gopter.Gen {
	if diskGenerator != nil {
		return diskGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDisk(generators)
	diskGenerator = gen.Struct(reflect.TypeOf(Disk{}), generators)

	return diskGenerator
}

// AddRelatedPropertyGeneratorsForDisk is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDisk(gens map[string]gopter.Gen) {
	gens["Spec"] = DisksSPECGenerator()
	gens["Status"] = DiskStatusGenerator()
}

func Test_Disk_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Disk_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiskStatus, DiskStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiskStatus runs a test to see if a specific instance of Disk_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDiskStatus(subject Disk_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Disk_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Disk_Status instances for property testing - lazily instantiated by DiskStatusGenerator()
var diskStatusGenerator gopter.Gen

// DiskStatusGenerator returns a generator of Disk_Status instances for property testing.
// We first initialize diskStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiskStatusGenerator() gopter.Gen {
	if diskStatusGenerator != nil {
		return diskStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskStatus(generators)
	diskStatusGenerator = gen.Struct(reflect.TypeOf(Disk_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskStatus(generators)
	AddRelatedPropertyGeneratorsForDiskStatus(generators)
	diskStatusGenerator = gen.Struct(reflect.TypeOf(Disk_Status{}), generators)

	return diskStatusGenerator
}

// AddIndependentPropertyGeneratorsForDiskStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiskStatus(gens map[string]gopter.Gen) {
	gens["BurstingEnabled"] = gen.PtrOf(gen.Bool())
	gens["DiskAccessId"] = gen.PtrOf(gen.AlphaString())
	gens["DiskIOPSReadOnly"] = gen.PtrOf(gen.Int())
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadOnly"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeBytes"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["DiskState"] = gen.PtrOf(gen.AlphaString())
	gens["HyperVGeneration"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedBy"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedByExtended"] = gen.SliceOf(gen.AlphaString())
	gens["MaxShares"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkAccessPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
	gens["TimeCreated"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["UniqueId"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDiskStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiskStatus(gens map[string]gopter.Gen) {
	gens["CreationData"] = gen.PtrOf(CreationDataStatusGenerator())
	gens["Encryption"] = gen.PtrOf(EncryptionStatusGenerator())
	gens["EncryptionSettingsCollection"] = gen.PtrOf(EncryptionSettingsCollectionStatusGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusGenerator())
	gens["PurchasePlan"] = gen.PtrOf(PurchasePlanStatusGenerator())
	gens["ShareInfo"] = gen.SliceOf(ShareInfoElementStatusGenerator())
	gens["Sku"] = gen.PtrOf(DiskSkuStatusGenerator())
}

func Test_Disks_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Disks_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDisksSPEC, DisksSPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDisksSPEC runs a test to see if a specific instance of Disks_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForDisksSPEC(subject Disks_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Disks_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Disks_SPEC instances for property testing - lazily instantiated by DisksSPECGenerator()
var disksSPECGenerator gopter.Gen

// DisksSPECGenerator returns a generator of Disks_SPEC instances for property testing.
// We first initialize disksSPECGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DisksSPECGenerator() gopter.Gen {
	if disksSPECGenerator != nil {
		return disksSPECGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDisksSPEC(generators)
	disksSPECGenerator = gen.Struct(reflect.TypeOf(Disks_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDisksSPEC(generators)
	AddRelatedPropertyGeneratorsForDisksSPEC(generators)
	disksSPECGenerator = gen.Struct(reflect.TypeOf(Disks_SPEC{}), generators)

	return disksSPECGenerator
}

// AddIndependentPropertyGeneratorsForDisksSPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDisksSPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["BurstingEnabled"] = gen.PtrOf(gen.Bool())
	gens["DiskIOPSReadOnly"] = gen.PtrOf(gen.Int())
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadOnly"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["DiskState"] = gen.PtrOf(gen.AlphaString())
	gens["HyperVGeneration"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MaxShares"] = gen.PtrOf(gen.Int())
	gens["NetworkAccessPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["OsType"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDisksSPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDisksSPEC(gens map[string]gopter.Gen) {
	gens["CreationData"] = gen.PtrOf(CreationDataSpecGenerator())
	gens["Encryption"] = gen.PtrOf(EncryptionSpecGenerator())
	gens["EncryptionSettingsCollection"] = gen.PtrOf(EncryptionSettingsCollectionSpecGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecGenerator())
	gens["PurchasePlan"] = gen.PtrOf(PurchasePlanSpecGenerator())
	gens["Sku"] = gen.PtrOf(DiskSkuSpecGenerator())
}

func Test_CreationData_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreationData_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreationDataSpec, CreationDataSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreationDataSpec runs a test to see if a specific instance of CreationData_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCreationDataSpec(subject CreationData_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreationData_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreationData_Spec instances for property testing - lazily instantiated by CreationDataSpecGenerator()
var creationDataSpecGenerator gopter.Gen

// CreationDataSpecGenerator returns a generator of CreationData_Spec instances for property testing.
// We first initialize creationDataSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreationDataSpecGenerator() gopter.Gen {
	if creationDataSpecGenerator != nil {
		return creationDataSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreationDataSpec(generators)
	creationDataSpecGenerator = gen.Struct(reflect.TypeOf(CreationData_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreationDataSpec(generators)
	AddRelatedPropertyGeneratorsForCreationDataSpec(generators)
	creationDataSpecGenerator = gen.Struct(reflect.TypeOf(CreationData_Spec{}), generators)

	return creationDataSpecGenerator
}

// AddIndependentPropertyGeneratorsForCreationDataSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreationDataSpec(gens map[string]gopter.Gen) {
	gens["CreateOption"] = gen.PtrOf(gen.AlphaString())
	gens["LogicalSectorSize"] = gen.PtrOf(gen.Int())
	gens["SourceUri"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountId"] = gen.PtrOf(gen.AlphaString())
	gens["UploadSizeBytes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreationDataSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreationDataSpec(gens map[string]gopter.Gen) {
	gens["GalleryImageReference"] = gen.PtrOf(ImageDiskReferenceSpecGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageDiskReferenceSpecGenerator())
}

func Test_CreationData_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreationData_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreationDataStatus, CreationDataStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreationDataStatus runs a test to see if a specific instance of CreationData_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForCreationDataStatus(subject CreationData_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreationData_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreationData_Status instances for property testing - lazily instantiated by CreationDataStatusGenerator()
var creationDataStatusGenerator gopter.Gen

// CreationDataStatusGenerator returns a generator of CreationData_Status instances for property testing.
// We first initialize creationDataStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreationDataStatusGenerator() gopter.Gen {
	if creationDataStatusGenerator != nil {
		return creationDataStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreationDataStatus(generators)
	creationDataStatusGenerator = gen.Struct(reflect.TypeOf(CreationData_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreationDataStatus(generators)
	AddRelatedPropertyGeneratorsForCreationDataStatus(generators)
	creationDataStatusGenerator = gen.Struct(reflect.TypeOf(CreationData_Status{}), generators)

	return creationDataStatusGenerator
}

// AddIndependentPropertyGeneratorsForCreationDataStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreationDataStatus(gens map[string]gopter.Gen) {
	gens["CreateOption"] = gen.PtrOf(gen.AlphaString())
	gens["LogicalSectorSize"] = gen.PtrOf(gen.Int())
	gens["SourceResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceUniqueId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceUri"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountId"] = gen.PtrOf(gen.AlphaString())
	gens["UploadSizeBytes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreationDataStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreationDataStatus(gens map[string]gopter.Gen) {
	gens["GalleryImageReference"] = gen.PtrOf(ImageDiskReferenceStatusGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageDiskReferenceStatusGenerator())
}

func Test_DiskSku_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiskSku_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiskSkuSpec, DiskSkuSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiskSkuSpec runs a test to see if a specific instance of DiskSku_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDiskSkuSpec(subject DiskSku_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiskSku_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiskSku_Spec instances for property testing - lazily instantiated by DiskSkuSpecGenerator()
var diskSkuSpecGenerator gopter.Gen

// DiskSkuSpecGenerator returns a generator of DiskSku_Spec instances for property testing.
func DiskSkuSpecGenerator() gopter.Gen {
	if diskSkuSpecGenerator != nil {
		return diskSkuSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskSkuSpec(generators)
	diskSkuSpecGenerator = gen.Struct(reflect.TypeOf(DiskSku_Spec{}), generators)

	return diskSkuSpecGenerator
}

// AddIndependentPropertyGeneratorsForDiskSkuSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiskSkuSpec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_DiskSku_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiskSku_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiskSkuStatus, DiskSkuStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiskSkuStatus runs a test to see if a specific instance of DiskSku_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDiskSkuStatus(subject DiskSku_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiskSku_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiskSku_Status instances for property testing - lazily instantiated by DiskSkuStatusGenerator()
var diskSkuStatusGenerator gopter.Gen

// DiskSkuStatusGenerator returns a generator of DiskSku_Status instances for property testing.
func DiskSkuStatusGenerator() gopter.Gen {
	if diskSkuStatusGenerator != nil {
		return diskSkuStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskSkuStatus(generators)
	diskSkuStatusGenerator = gen.Struct(reflect.TypeOf(DiskSku_Status{}), generators)

	return diskSkuStatusGenerator
}

// AddIndependentPropertyGeneratorsForDiskSkuStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiskSkuStatus(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionSettingsCollection_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionSettingsCollection_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSettingsCollectionSpec, EncryptionSettingsCollectionSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSettingsCollectionSpec runs a test to see if a specific instance of EncryptionSettingsCollection_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSettingsCollectionSpec(subject EncryptionSettingsCollection_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionSettingsCollection_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionSettingsCollection_Spec instances for property testing - lazily instantiated by
//EncryptionSettingsCollectionSpecGenerator()
var encryptionSettingsCollectionSpecGenerator gopter.Gen

// EncryptionSettingsCollectionSpecGenerator returns a generator of EncryptionSettingsCollection_Spec instances for property testing.
// We first initialize encryptionSettingsCollectionSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EncryptionSettingsCollectionSpecGenerator() gopter.Gen {
	if encryptionSettingsCollectionSpecGenerator != nil {
		return encryptionSettingsCollectionSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpec(generators)
	encryptionSettingsCollectionSpecGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsCollection_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpec(generators)
	AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionSpec(generators)
	encryptionSettingsCollectionSpecGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsCollection_Spec{}), generators)

	return encryptionSettingsCollectionSpecGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpec(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["EncryptionSettingsVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionSpec(gens map[string]gopter.Gen) {
	gens["EncryptionSettings"] = gen.SliceOf(EncryptionSettingsElementSpecGenerator())
}

func Test_EncryptionSettingsCollection_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionSettingsCollection_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSettingsCollectionStatus, EncryptionSettingsCollectionStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSettingsCollectionStatus runs a test to see if a specific instance of EncryptionSettingsCollection_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSettingsCollectionStatus(subject EncryptionSettingsCollection_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionSettingsCollection_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionSettingsCollection_Status instances for property testing - lazily instantiated by
//EncryptionSettingsCollectionStatusGenerator()
var encryptionSettingsCollectionStatusGenerator gopter.Gen

// EncryptionSettingsCollectionStatusGenerator returns a generator of EncryptionSettingsCollection_Status instances for property testing.
// We first initialize encryptionSettingsCollectionStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EncryptionSettingsCollectionStatusGenerator() gopter.Gen {
	if encryptionSettingsCollectionStatusGenerator != nil {
		return encryptionSettingsCollectionStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionStatus(generators)
	encryptionSettingsCollectionStatusGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsCollection_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionStatus(generators)
	AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionStatus(generators)
	encryptionSettingsCollectionStatusGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsCollection_Status{}), generators)

	return encryptionSettingsCollectionStatusGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionStatus(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["EncryptionSettingsVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionStatus(gens map[string]gopter.Gen) {
	gens["EncryptionSettings"] = gen.SliceOf(EncryptionSettingsElementStatusGenerator())
}

func Test_Encryption_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Encryption_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSpec, EncryptionSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSpec runs a test to see if a specific instance of Encryption_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSpec(subject Encryption_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Encryption_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Encryption_Spec instances for property testing - lazily instantiated by EncryptionSpecGenerator()
var encryptionSpecGenerator gopter.Gen

// EncryptionSpecGenerator returns a generator of Encryption_Spec instances for property testing.
func EncryptionSpecGenerator() gopter.Gen {
	if encryptionSpecGenerator != nil {
		return encryptionSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSpec(generators)
	encryptionSpecGenerator = gen.Struct(reflect.TypeOf(Encryption_Spec{}), generators)

	return encryptionSpecGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionSpec(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_Encryption_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Encryption_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionStatus, EncryptionStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionStatus runs a test to see if a specific instance of Encryption_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionStatus(subject Encryption_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Encryption_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Encryption_Status instances for property testing - lazily instantiated by EncryptionStatusGenerator()
var encryptionStatusGenerator gopter.Gen

// EncryptionStatusGenerator returns a generator of Encryption_Status instances for property testing.
func EncryptionStatusGenerator() gopter.Gen {
	if encryptionStatusGenerator != nil {
		return encryptionStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionStatus(generators)
	encryptionStatusGenerator = gen.Struct(reflect.TypeOf(Encryption_Status{}), generators)

	return encryptionStatusGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionStatus(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExtendedLocation_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ExtendedLocation_Spec to ExtendedLocation_Spec via AssignPropertiesToExtendedLocationSpec & AssignPropertiesFromExtendedLocationSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForExtendedLocationSpec, ExtendedLocationSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForExtendedLocationSpec tests if a specific instance of ExtendedLocation_Spec can be assigned to v1alpha1api20201201storage and back losslessly
func RunPropertyAssignmentTestForExtendedLocationSpec(subject ExtendedLocation_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201201storage.ExtendedLocation_Spec
	err := copied.AssignPropertiesToExtendedLocationSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ExtendedLocation_Spec
	err = actual.AssignPropertiesFromExtendedLocationSpec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ExtendedLocation_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationSpec, ExtendedLocationSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationSpec runs a test to see if a specific instance of ExtendedLocation_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationSpec(subject ExtendedLocation_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_Spec instances for property testing - lazily instantiated by
//ExtendedLocationSpecGenerator()
var extendedLocationSpecGenerator gopter.Gen

// ExtendedLocationSpecGenerator returns a generator of ExtendedLocation_Spec instances for property testing.
func ExtendedLocationSpecGenerator() gopter.Gen {
	if extendedLocationSpecGenerator != nil {
		return extendedLocationSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationSpec(generators)
	extendedLocationSpecGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_Spec{}), generators)

	return extendedLocationSpecGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationSpec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExtendedLocation_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ExtendedLocation_Status to ExtendedLocation_Status via AssignPropertiesToExtendedLocationStatus & AssignPropertiesFromExtendedLocationStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForExtendedLocationStatus, ExtendedLocationStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForExtendedLocationStatus tests if a specific instance of ExtendedLocation_Status can be assigned to v1alpha1api20201201storage and back losslessly
func RunPropertyAssignmentTestForExtendedLocationStatus(subject ExtendedLocation_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201201storage.ExtendedLocation_Status
	err := copied.AssignPropertiesToExtendedLocationStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ExtendedLocation_Status
	err = actual.AssignPropertiesFromExtendedLocationStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ExtendedLocation_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationStatus, ExtendedLocationStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationStatus runs a test to see if a specific instance of ExtendedLocation_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationStatus(subject ExtendedLocation_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_Status instances for property testing - lazily instantiated by
//ExtendedLocationStatusGenerator()
var extendedLocationStatusGenerator gopter.Gen

// ExtendedLocationStatusGenerator returns a generator of ExtendedLocation_Status instances for property testing.
func ExtendedLocationStatusGenerator() gopter.Gen {
	if extendedLocationStatusGenerator != nil {
		return extendedLocationStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationStatus(generators)
	extendedLocationStatusGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_Status{}), generators)

	return extendedLocationStatusGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationStatus(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_PurchasePlan_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PurchasePlan_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPurchasePlanSpec, PurchasePlanSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPurchasePlanSpec runs a test to see if a specific instance of PurchasePlan_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPurchasePlanSpec(subject PurchasePlan_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PurchasePlan_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PurchasePlan_Spec instances for property testing - lazily instantiated by PurchasePlanSpecGenerator()
var purchasePlanSpecGenerator gopter.Gen

// PurchasePlanSpecGenerator returns a generator of PurchasePlan_Spec instances for property testing.
func PurchasePlanSpecGenerator() gopter.Gen {
	if purchasePlanSpecGenerator != nil {
		return purchasePlanSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPurchasePlanSpec(generators)
	purchasePlanSpecGenerator = gen.Struct(reflect.TypeOf(PurchasePlan_Spec{}), generators)

	return purchasePlanSpecGenerator
}

// AddIndependentPropertyGeneratorsForPurchasePlanSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPurchasePlanSpec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_PurchasePlan_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PurchasePlan_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPurchasePlanStatus, PurchasePlanStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPurchasePlanStatus runs a test to see if a specific instance of PurchasePlan_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPurchasePlanStatus(subject PurchasePlan_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PurchasePlan_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PurchasePlan_Status instances for property testing - lazily instantiated by PurchasePlanStatusGenerator()
var purchasePlanStatusGenerator gopter.Gen

// PurchasePlanStatusGenerator returns a generator of PurchasePlan_Status instances for property testing.
func PurchasePlanStatusGenerator() gopter.Gen {
	if purchasePlanStatusGenerator != nil {
		return purchasePlanStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPurchasePlanStatus(generators)
	purchasePlanStatusGenerator = gen.Struct(reflect.TypeOf(PurchasePlan_Status{}), generators)

	return purchasePlanStatusGenerator
}

// AddIndependentPropertyGeneratorsForPurchasePlanStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPurchasePlanStatus(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_ShareInfoElement_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ShareInfoElement_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForShareInfoElementStatus, ShareInfoElementStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForShareInfoElementStatus runs a test to see if a specific instance of ShareInfoElement_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForShareInfoElementStatus(subject ShareInfoElement_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ShareInfoElement_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ShareInfoElement_Status instances for property testing - lazily instantiated by
//ShareInfoElementStatusGenerator()
var shareInfoElementStatusGenerator gopter.Gen

// ShareInfoElementStatusGenerator returns a generator of ShareInfoElement_Status instances for property testing.
func ShareInfoElementStatusGenerator() gopter.Gen {
	if shareInfoElementStatusGenerator != nil {
		return shareInfoElementStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForShareInfoElementStatus(generators)
	shareInfoElementStatusGenerator = gen.Struct(reflect.TypeOf(ShareInfoElement_Status{}), generators)

	return shareInfoElementStatusGenerator
}

// AddIndependentPropertyGeneratorsForShareInfoElementStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForShareInfoElementStatus(gens map[string]gopter.Gen) {
	gens["VmUri"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionSettingsElement_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionSettingsElement_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSettingsElementSpec, EncryptionSettingsElementSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSettingsElementSpec runs a test to see if a specific instance of EncryptionSettingsElement_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSettingsElementSpec(subject EncryptionSettingsElement_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionSettingsElement_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionSettingsElement_Spec instances for property testing - lazily instantiated by
//EncryptionSettingsElementSpecGenerator()
var encryptionSettingsElementSpecGenerator gopter.Gen

// EncryptionSettingsElementSpecGenerator returns a generator of EncryptionSettingsElement_Spec instances for property testing.
func EncryptionSettingsElementSpecGenerator() gopter.Gen {
	if encryptionSettingsElementSpecGenerator != nil {
		return encryptionSettingsElementSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForEncryptionSettingsElementSpec(generators)
	encryptionSettingsElementSpecGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsElement_Spec{}), generators)

	return encryptionSettingsElementSpecGenerator
}

// AddRelatedPropertyGeneratorsForEncryptionSettingsElementSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionSettingsElementSpec(gens map[string]gopter.Gen) {
	gens["DiskEncryptionKey"] = gen.PtrOf(KeyVaultAndSecretReferenceSpecGenerator())
	gens["KeyEncryptionKey"] = gen.PtrOf(KeyVaultAndKeyReferenceSpecGenerator())
}

func Test_EncryptionSettingsElement_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionSettingsElement_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSettingsElementStatus, EncryptionSettingsElementStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSettingsElementStatus runs a test to see if a specific instance of EncryptionSettingsElement_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSettingsElementStatus(subject EncryptionSettingsElement_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionSettingsElement_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionSettingsElement_Status instances for property testing - lazily instantiated by
//EncryptionSettingsElementStatusGenerator()
var encryptionSettingsElementStatusGenerator gopter.Gen

// EncryptionSettingsElementStatusGenerator returns a generator of EncryptionSettingsElement_Status instances for property testing.
func EncryptionSettingsElementStatusGenerator() gopter.Gen {
	if encryptionSettingsElementStatusGenerator != nil {
		return encryptionSettingsElementStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForEncryptionSettingsElementStatus(generators)
	encryptionSettingsElementStatusGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsElement_Status{}), generators)

	return encryptionSettingsElementStatusGenerator
}

// AddRelatedPropertyGeneratorsForEncryptionSettingsElementStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionSettingsElementStatus(gens map[string]gopter.Gen) {
	gens["DiskEncryptionKey"] = gen.PtrOf(KeyVaultAndSecretReferenceStatusGenerator())
	gens["KeyEncryptionKey"] = gen.PtrOf(KeyVaultAndKeyReferenceStatusGenerator())
}

func Test_ImageDiskReference_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageDiskReference_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageDiskReferenceSpec, ImageDiskReferenceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageDiskReferenceSpec runs a test to see if a specific instance of ImageDiskReference_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForImageDiskReferenceSpec(subject ImageDiskReference_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageDiskReference_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageDiskReference_Spec instances for property testing - lazily instantiated by
//ImageDiskReferenceSpecGenerator()
var imageDiskReferenceSpecGenerator gopter.Gen

// ImageDiskReferenceSpecGenerator returns a generator of ImageDiskReference_Spec instances for property testing.
func ImageDiskReferenceSpecGenerator() gopter.Gen {
	if imageDiskReferenceSpecGenerator != nil {
		return imageDiskReferenceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageDiskReferenceSpec(generators)
	imageDiskReferenceSpecGenerator = gen.Struct(reflect.TypeOf(ImageDiskReference_Spec{}), generators)

	return imageDiskReferenceSpecGenerator
}

// AddIndependentPropertyGeneratorsForImageDiskReferenceSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageDiskReferenceSpec(gens map[string]gopter.Gen) {
	gens["Lun"] = gen.PtrOf(gen.Int())
}

func Test_ImageDiskReference_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageDiskReference_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageDiskReferenceStatus, ImageDiskReferenceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageDiskReferenceStatus runs a test to see if a specific instance of ImageDiskReference_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForImageDiskReferenceStatus(subject ImageDiskReference_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageDiskReference_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageDiskReference_Status instances for property testing - lazily instantiated by
//ImageDiskReferenceStatusGenerator()
var imageDiskReferenceStatusGenerator gopter.Gen

// ImageDiskReferenceStatusGenerator returns a generator of ImageDiskReference_Status instances for property testing.
func ImageDiskReferenceStatusGenerator() gopter.Gen {
	if imageDiskReferenceStatusGenerator != nil {
		return imageDiskReferenceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageDiskReferenceStatus(generators)
	imageDiskReferenceStatusGenerator = gen.Struct(reflect.TypeOf(ImageDiskReference_Status{}), generators)

	return imageDiskReferenceStatusGenerator
}

// AddIndependentPropertyGeneratorsForImageDiskReferenceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageDiskReferenceStatus(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Lun"] = gen.PtrOf(gen.Int())
}

func Test_KeyVaultAndKeyReference_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultAndKeyReference_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultAndKeyReferenceSpec, KeyVaultAndKeyReferenceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultAndKeyReferenceSpec runs a test to see if a specific instance of KeyVaultAndKeyReference_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultAndKeyReferenceSpec(subject KeyVaultAndKeyReference_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultAndKeyReference_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultAndKeyReference_Spec instances for property testing - lazily instantiated by
//KeyVaultAndKeyReferenceSpecGenerator()
var keyVaultAndKeyReferenceSpecGenerator gopter.Gen

// KeyVaultAndKeyReferenceSpecGenerator returns a generator of KeyVaultAndKeyReference_Spec instances for property testing.
// We first initialize keyVaultAndKeyReferenceSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultAndKeyReferenceSpecGenerator() gopter.Gen {
	if keyVaultAndKeyReferenceSpecGenerator != nil {
		return keyVaultAndKeyReferenceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpec(generators)
	keyVaultAndKeyReferenceSpecGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndKeyReference_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpec(generators)
	AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceSpec(generators)
	keyVaultAndKeyReferenceSpecGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndKeyReference_Spec{}), generators)

	return keyVaultAndKeyReferenceSpecGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpec(gens map[string]gopter.Gen) {
	gens["KeyUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceSpec(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SourceVaultSpecGenerator())
}

func Test_KeyVaultAndKeyReference_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultAndKeyReference_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultAndKeyReferenceStatus, KeyVaultAndKeyReferenceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultAndKeyReferenceStatus runs a test to see if a specific instance of KeyVaultAndKeyReference_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultAndKeyReferenceStatus(subject KeyVaultAndKeyReference_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultAndKeyReference_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultAndKeyReference_Status instances for property testing - lazily instantiated by
//KeyVaultAndKeyReferenceStatusGenerator()
var keyVaultAndKeyReferenceStatusGenerator gopter.Gen

// KeyVaultAndKeyReferenceStatusGenerator returns a generator of KeyVaultAndKeyReference_Status instances for property testing.
// We first initialize keyVaultAndKeyReferenceStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultAndKeyReferenceStatusGenerator() gopter.Gen {
	if keyVaultAndKeyReferenceStatusGenerator != nil {
		return keyVaultAndKeyReferenceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceStatus(generators)
	keyVaultAndKeyReferenceStatusGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndKeyReference_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceStatus(generators)
	AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceStatus(generators)
	keyVaultAndKeyReferenceStatusGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndKeyReference_Status{}), generators)

	return keyVaultAndKeyReferenceStatusGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceStatus(gens map[string]gopter.Gen) {
	gens["KeyUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceStatus(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SourceVaultStatusGenerator())
}

func Test_KeyVaultAndSecretReference_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultAndSecretReference_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultAndSecretReferenceSpec, KeyVaultAndSecretReferenceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultAndSecretReferenceSpec runs a test to see if a specific instance of KeyVaultAndSecretReference_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultAndSecretReferenceSpec(subject KeyVaultAndSecretReference_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultAndSecretReference_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultAndSecretReference_Spec instances for property testing - lazily instantiated by
//KeyVaultAndSecretReferenceSpecGenerator()
var keyVaultAndSecretReferenceSpecGenerator gopter.Gen

// KeyVaultAndSecretReferenceSpecGenerator returns a generator of KeyVaultAndSecretReference_Spec instances for property testing.
// We first initialize keyVaultAndSecretReferenceSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultAndSecretReferenceSpecGenerator() gopter.Gen {
	if keyVaultAndSecretReferenceSpecGenerator != nil {
		return keyVaultAndSecretReferenceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpec(generators)
	keyVaultAndSecretReferenceSpecGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndSecretReference_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpec(generators)
	AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceSpec(generators)
	keyVaultAndSecretReferenceSpecGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndSecretReference_Spec{}), generators)

	return keyVaultAndSecretReferenceSpecGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpec(gens map[string]gopter.Gen) {
	gens["SecretUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceSpec(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SourceVaultSpecGenerator())
}

func Test_KeyVaultAndSecretReference_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultAndSecretReference_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultAndSecretReferenceStatus, KeyVaultAndSecretReferenceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultAndSecretReferenceStatus runs a test to see if a specific instance of KeyVaultAndSecretReference_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultAndSecretReferenceStatus(subject KeyVaultAndSecretReference_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultAndSecretReference_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultAndSecretReference_Status instances for property testing - lazily instantiated by
//KeyVaultAndSecretReferenceStatusGenerator()
var keyVaultAndSecretReferenceStatusGenerator gopter.Gen

// KeyVaultAndSecretReferenceStatusGenerator returns a generator of KeyVaultAndSecretReference_Status instances for property testing.
// We first initialize keyVaultAndSecretReferenceStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultAndSecretReferenceStatusGenerator() gopter.Gen {
	if keyVaultAndSecretReferenceStatusGenerator != nil {
		return keyVaultAndSecretReferenceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceStatus(generators)
	keyVaultAndSecretReferenceStatusGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndSecretReference_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceStatus(generators)
	AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceStatus(generators)
	keyVaultAndSecretReferenceStatusGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndSecretReference_Status{}), generators)

	return keyVaultAndSecretReferenceStatusGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceStatus(gens map[string]gopter.Gen) {
	gens["SecretUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceStatus(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SourceVaultStatusGenerator())
}

func Test_SourceVault_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SourceVault_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSourceVaultSpec, SourceVaultSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSourceVaultSpec runs a test to see if a specific instance of SourceVault_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForSourceVaultSpec(subject SourceVault_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SourceVault_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SourceVault_Spec instances for property testing - lazily instantiated by SourceVaultSpecGenerator()
var sourceVaultSpecGenerator gopter.Gen

// SourceVaultSpecGenerator returns a generator of SourceVault_Spec instances for property testing.
func SourceVaultSpecGenerator() gopter.Gen {
	if sourceVaultSpecGenerator != nil {
		return sourceVaultSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	sourceVaultSpecGenerator = gen.Struct(reflect.TypeOf(SourceVault_Spec{}), generators)

	return sourceVaultSpecGenerator
}

func Test_SourceVault_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SourceVault_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSourceVaultStatus, SourceVaultStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSourceVaultStatus runs a test to see if a specific instance of SourceVault_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForSourceVaultStatus(subject SourceVault_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SourceVault_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SourceVault_Status instances for property testing - lazily instantiated by SourceVaultStatusGenerator()
var sourceVaultStatusGenerator gopter.Gen

// SourceVaultStatusGenerator returns a generator of SourceVault_Status instances for property testing.
func SourceVaultStatusGenerator() gopter.Gen {
	if sourceVaultStatusGenerator != nil {
		return sourceVaultStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSourceVaultStatus(generators)
	sourceVaultStatusGenerator = gen.Struct(reflect.TypeOf(SourceVault_Status{}), generators)

	return sourceVaultStatusGenerator
}

// AddIndependentPropertyGeneratorsForSourceVaultStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSourceVaultStatus(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
