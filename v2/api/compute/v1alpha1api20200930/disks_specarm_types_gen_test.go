// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200930

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Disks_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Disks_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDisksSPECARM, DisksSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDisksSPECARM runs a test to see if a specific instance of Disks_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDisksSPECARM(subject Disks_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Disks_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Disks_SPECARM instances for property testing - lazily instantiated by DisksSPECARMGenerator()
var disksSPECARMGenerator gopter.Gen

// DisksSPECARMGenerator returns a generator of Disks_SPECARM instances for property testing.
// We first initialize disksSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DisksSPECARMGenerator() gopter.Gen {
	if disksSPECARMGenerator != nil {
		return disksSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDisksSPECARM(generators)
	disksSPECARMGenerator = gen.Struct(reflect.TypeOf(Disks_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDisksSPECARM(generators)
	AddRelatedPropertyGeneratorsForDisksSPECARM(generators)
	disksSPECARMGenerator = gen.Struct(reflect.TypeOf(Disks_SPECARM{}), generators)

	return disksSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForDisksSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDisksSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDisksSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDisksSPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecARMGenerator())
	gens["Properties"] = gen.PtrOf(DiskPropertiesSpecARMGenerator())
	gens["Sku"] = gen.PtrOf(DiskSkuSpecARMGenerator())
}

func Test_DiskProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiskProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiskPropertiesSpecARM, DiskPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiskPropertiesSpecARM runs a test to see if a specific instance of DiskProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiskPropertiesSpecARM(subject DiskProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiskProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiskProperties_SpecARM instances for property testing - lazily instantiated by
//DiskPropertiesSpecARMGenerator()
var diskPropertiesSpecARMGenerator gopter.Gen

// DiskPropertiesSpecARMGenerator returns a generator of DiskProperties_SpecARM instances for property testing.
// We first initialize diskPropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiskPropertiesSpecARMGenerator() gopter.Gen {
	if diskPropertiesSpecARMGenerator != nil {
		return diskPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskPropertiesSpecARM(generators)
	diskPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(DiskProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskPropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForDiskPropertiesSpecARM(generators)
	diskPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(DiskProperties_SpecARM{}), generators)

	return diskPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDiskPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiskPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["BurstingEnabled"] = gen.PtrOf(gen.Bool())
	gens["DiskAccessId"] = gen.PtrOf(gen.AlphaString())
	gens["DiskIOPSReadOnly"] = gen.PtrOf(gen.Int())
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadOnly"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["DiskState"] = gen.PtrOf(gen.OneConstOf(
		DiskState_SpecActiveSAS,
		DiskState_SpecActiveUpload,
		DiskState_SpecAttached,
		DiskState_SpecReadyToUpload,
		DiskState_SpecReserved,
		DiskState_SpecUnattached))
	gens["HyperVGeneration"] = gen.PtrOf(gen.OneConstOf(DiskPropertiesSpecHyperVGenerationV1, DiskPropertiesSpecHyperVGenerationV2))
	gens["MaxShares"] = gen.PtrOf(gen.Int())
	gens["NetworkAccessPolicy"] = gen.PtrOf(gen.OneConstOf(NetworkAccessPolicy_SpecAllowAll, NetworkAccessPolicy_SpecAllowPrivate, NetworkAccessPolicy_SpecDenyAll))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(DiskPropertiesSpecOsTypeLinux, DiskPropertiesSpecOsTypeWindows))
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDiskPropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiskPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["CreationData"] = CreationDataSpecARMGenerator()
	gens["Encryption"] = gen.PtrOf(EncryptionSpecARMGenerator())
	gens["EncryptionSettingsCollection"] = gen.PtrOf(EncryptionSettingsCollectionSpecARMGenerator())
	gens["PurchasePlan"] = gen.PtrOf(PurchasePlanSpecARMGenerator())
}

func Test_DiskSku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiskSku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiskSkuSpecARM, DiskSkuSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiskSkuSpecARM runs a test to see if a specific instance of DiskSku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiskSkuSpecARM(subject DiskSku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiskSku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiskSku_SpecARM instances for property testing - lazily instantiated by DiskSkuSpecARMGenerator()
var diskSkuSpecARMGenerator gopter.Gen

// DiskSkuSpecARMGenerator returns a generator of DiskSku_SpecARM instances for property testing.
func DiskSkuSpecARMGenerator() gopter.Gen {
	if diskSkuSpecARMGenerator != nil {
		return diskSkuSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskSkuSpecARM(generators)
	diskSkuSpecARMGenerator = gen.Struct(reflect.TypeOf(DiskSku_SpecARM{}), generators)

	return diskSkuSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDiskSkuSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiskSkuSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DiskSkuSpecNamePremiumLRS,
		DiskSkuSpecNameStandardLRS,
		DiskSkuSpecNameStandardSSDLRS,
		DiskSkuSpecNameUltraSSDLRS))
}

func Test_ExtendedLocation_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationSpecARM, ExtendedLocationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationSpecARM runs a test to see if a specific instance of ExtendedLocation_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationSpecARM(subject ExtendedLocation_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_SpecARM instances for property testing - lazily instantiated by
//ExtendedLocationSpecARMGenerator()
var extendedLocationSpecARMGenerator gopter.Gen

// ExtendedLocationSpecARMGenerator returns a generator of ExtendedLocation_SpecARM instances for property testing.
func ExtendedLocationSpecARMGenerator() gopter.Gen {
	if extendedLocationSpecARMGenerator != nil {
		return extendedLocationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationSpecARM(generators)
	extendedLocationSpecARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_SpecARM{}), generators)

	return extendedLocationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_SpecEdgeZone))
}

func Test_CreationData_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreationData_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreationDataSpecARM, CreationDataSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreationDataSpecARM runs a test to see if a specific instance of CreationData_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCreationDataSpecARM(subject CreationData_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreationData_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreationData_SpecARM instances for property testing - lazily instantiated by
//CreationDataSpecARMGenerator()
var creationDataSpecARMGenerator gopter.Gen

// CreationDataSpecARMGenerator returns a generator of CreationData_SpecARM instances for property testing.
// We first initialize creationDataSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreationDataSpecARMGenerator() gopter.Gen {
	if creationDataSpecARMGenerator != nil {
		return creationDataSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreationDataSpecARM(generators)
	creationDataSpecARMGenerator = gen.Struct(reflect.TypeOf(CreationData_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreationDataSpecARM(generators)
	AddRelatedPropertyGeneratorsForCreationDataSpecARM(generators)
	creationDataSpecARMGenerator = gen.Struct(reflect.TypeOf(CreationData_SpecARM{}), generators)

	return creationDataSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForCreationDataSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreationDataSpecARM(gens map[string]gopter.Gen) {
	gens["CreateOption"] = gen.OneConstOf(
		CreationDataSpecCreateOptionAttach,
		CreationDataSpecCreateOptionCopy,
		CreationDataSpecCreateOptionEmpty,
		CreationDataSpecCreateOptionFromImage,
		CreationDataSpecCreateOptionImport,
		CreationDataSpecCreateOptionRestore,
		CreationDataSpecCreateOptionUpload)
	gens["LogicalSectorSize"] = gen.PtrOf(gen.Int())
	gens["SourceResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceUri"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountId"] = gen.PtrOf(gen.AlphaString())
	gens["UploadSizeBytes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreationDataSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreationDataSpecARM(gens map[string]gopter.Gen) {
	gens["GalleryImageReference"] = gen.PtrOf(ImageDiskReferenceSpecARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageDiskReferenceSpecARMGenerator())
}

func Test_EncryptionSettingsCollection_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionSettingsCollection_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSettingsCollectionSpecARM, EncryptionSettingsCollectionSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSettingsCollectionSpecARM runs a test to see if a specific instance of EncryptionSettingsCollection_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSettingsCollectionSpecARM(subject EncryptionSettingsCollection_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionSettingsCollection_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionSettingsCollection_SpecARM instances for property testing - lazily instantiated by
//EncryptionSettingsCollectionSpecARMGenerator()
var encryptionSettingsCollectionSpecARMGenerator gopter.Gen

// EncryptionSettingsCollectionSpecARMGenerator returns a generator of EncryptionSettingsCollection_SpecARM instances for property testing.
// We first initialize encryptionSettingsCollectionSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EncryptionSettingsCollectionSpecARMGenerator() gopter.Gen {
	if encryptionSettingsCollectionSpecARMGenerator != nil {
		return encryptionSettingsCollectionSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpecARM(generators)
	encryptionSettingsCollectionSpecARMGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsCollection_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpecARM(generators)
	AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionSpecARM(generators)
	encryptionSettingsCollectionSpecARMGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsCollection_SpecARM{}), generators)

	return encryptionSettingsCollectionSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionSettingsCollectionSpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.Bool()
	gens["EncryptionSettingsVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionSettingsCollectionSpecARM(gens map[string]gopter.Gen) {
	gens["EncryptionSettings"] = gen.SliceOf(EncryptionSettingsElementSpecARMGenerator())
}

func Test_Encryption_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Encryption_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSpecARM, EncryptionSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSpecARM runs a test to see if a specific instance of Encryption_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSpecARM(subject Encryption_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Encryption_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Encryption_SpecARM instances for property testing - lazily instantiated by EncryptionSpecARMGenerator()
var encryptionSpecARMGenerator gopter.Gen

// EncryptionSpecARMGenerator returns a generator of Encryption_SpecARM instances for property testing.
func EncryptionSpecARMGenerator() gopter.Gen {
	if encryptionSpecARMGenerator != nil {
		return encryptionSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionSpecARM(generators)
	encryptionSpecARMGenerator = gen.Struct(reflect.TypeOf(Encryption_SpecARM{}), generators)

	return encryptionSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionSpecARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(EncryptionType_SpecEncryptionAtRestWithCustomerKey, EncryptionType_SpecEncryptionAtRestWithPlatformAndCustomerKeys, EncryptionType_SpecEncryptionAtRestWithPlatformKey))
}

func Test_PurchasePlan_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PurchasePlan_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPurchasePlanSpecARM, PurchasePlanSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPurchasePlanSpecARM runs a test to see if a specific instance of PurchasePlan_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPurchasePlanSpecARM(subject PurchasePlan_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PurchasePlan_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PurchasePlan_SpecARM instances for property testing - lazily instantiated by
//PurchasePlanSpecARMGenerator()
var purchasePlanSpecARMGenerator gopter.Gen

// PurchasePlanSpecARMGenerator returns a generator of PurchasePlan_SpecARM instances for property testing.
func PurchasePlanSpecARMGenerator() gopter.Gen {
	if purchasePlanSpecARMGenerator != nil {
		return purchasePlanSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPurchasePlanSpecARM(generators)
	purchasePlanSpecARMGenerator = gen.Struct(reflect.TypeOf(PurchasePlan_SpecARM{}), generators)

	return purchasePlanSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForPurchasePlanSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPurchasePlanSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
	gens["Product"] = gen.AlphaString()
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.AlphaString()
}

func Test_EncryptionSettingsElement_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionSettingsElement_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionSettingsElementSpecARM, EncryptionSettingsElementSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionSettingsElementSpecARM runs a test to see if a specific instance of EncryptionSettingsElement_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionSettingsElementSpecARM(subject EncryptionSettingsElement_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionSettingsElement_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionSettingsElement_SpecARM instances for property testing - lazily instantiated by
//EncryptionSettingsElementSpecARMGenerator()
var encryptionSettingsElementSpecARMGenerator gopter.Gen

// EncryptionSettingsElementSpecARMGenerator returns a generator of EncryptionSettingsElement_SpecARM instances for property testing.
func EncryptionSettingsElementSpecARMGenerator() gopter.Gen {
	if encryptionSettingsElementSpecARMGenerator != nil {
		return encryptionSettingsElementSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForEncryptionSettingsElementSpecARM(generators)
	encryptionSettingsElementSpecARMGenerator = gen.Struct(reflect.TypeOf(EncryptionSettingsElement_SpecARM{}), generators)

	return encryptionSettingsElementSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForEncryptionSettingsElementSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionSettingsElementSpecARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionKey"] = gen.PtrOf(KeyVaultAndSecretReferenceSpecARMGenerator())
	gens["KeyEncryptionKey"] = gen.PtrOf(KeyVaultAndKeyReferenceSpecARMGenerator())
}

func Test_ImageDiskReference_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageDiskReference_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageDiskReferenceSpecARM, ImageDiskReferenceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageDiskReferenceSpecARM runs a test to see if a specific instance of ImageDiskReference_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageDiskReferenceSpecARM(subject ImageDiskReference_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageDiskReference_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageDiskReference_SpecARM instances for property testing - lazily instantiated by
//ImageDiskReferenceSpecARMGenerator()
var imageDiskReferenceSpecARMGenerator gopter.Gen

// ImageDiskReferenceSpecARMGenerator returns a generator of ImageDiskReference_SpecARM instances for property testing.
func ImageDiskReferenceSpecARMGenerator() gopter.Gen {
	if imageDiskReferenceSpecARMGenerator != nil {
		return imageDiskReferenceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageDiskReferenceSpecARM(generators)
	imageDiskReferenceSpecARMGenerator = gen.Struct(reflect.TypeOf(ImageDiskReference_SpecARM{}), generators)

	return imageDiskReferenceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForImageDiskReferenceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageDiskReferenceSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
	gens["Lun"] = gen.PtrOf(gen.Int())
}

func Test_KeyVaultAndKeyReference_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultAndKeyReference_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultAndKeyReferenceSpecARM, KeyVaultAndKeyReferenceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultAndKeyReferenceSpecARM runs a test to see if a specific instance of KeyVaultAndKeyReference_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultAndKeyReferenceSpecARM(subject KeyVaultAndKeyReference_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultAndKeyReference_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultAndKeyReference_SpecARM instances for property testing - lazily instantiated by
//KeyVaultAndKeyReferenceSpecARMGenerator()
var keyVaultAndKeyReferenceSpecARMGenerator gopter.Gen

// KeyVaultAndKeyReferenceSpecARMGenerator returns a generator of KeyVaultAndKeyReference_SpecARM instances for property testing.
// We first initialize keyVaultAndKeyReferenceSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultAndKeyReferenceSpecARMGenerator() gopter.Gen {
	if keyVaultAndKeyReferenceSpecARMGenerator != nil {
		return keyVaultAndKeyReferenceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpecARM(generators)
	keyVaultAndKeyReferenceSpecARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndKeyReference_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpecARM(generators)
	AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceSpecARM(generators)
	keyVaultAndKeyReferenceSpecARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndKeyReference_SpecARM{}), generators)

	return keyVaultAndKeyReferenceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultAndKeyReferenceSpecARM(gens map[string]gopter.Gen) {
	gens["KeyUrl"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultAndKeyReferenceSpecARM(gens map[string]gopter.Gen) {
	gens["SourceVault"] = SourceVaultSpecARMGenerator()
}

func Test_KeyVaultAndSecretReference_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultAndSecretReference_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultAndSecretReferenceSpecARM, KeyVaultAndSecretReferenceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultAndSecretReferenceSpecARM runs a test to see if a specific instance of KeyVaultAndSecretReference_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultAndSecretReferenceSpecARM(subject KeyVaultAndSecretReference_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultAndSecretReference_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultAndSecretReference_SpecARM instances for property testing - lazily instantiated by
//KeyVaultAndSecretReferenceSpecARMGenerator()
var keyVaultAndSecretReferenceSpecARMGenerator gopter.Gen

// KeyVaultAndSecretReferenceSpecARMGenerator returns a generator of KeyVaultAndSecretReference_SpecARM instances for property testing.
// We first initialize keyVaultAndSecretReferenceSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultAndSecretReferenceSpecARMGenerator() gopter.Gen {
	if keyVaultAndSecretReferenceSpecARMGenerator != nil {
		return keyVaultAndSecretReferenceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpecARM(generators)
	keyVaultAndSecretReferenceSpecARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndSecretReference_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpecARM(generators)
	AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceSpecARM(generators)
	keyVaultAndSecretReferenceSpecARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultAndSecretReference_SpecARM{}), generators)

	return keyVaultAndSecretReferenceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultAndSecretReferenceSpecARM(gens map[string]gopter.Gen) {
	gens["SecretUrl"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultAndSecretReferenceSpecARM(gens map[string]gopter.Gen) {
	gens["SourceVault"] = SourceVaultSpecARMGenerator()
}

func Test_SourceVault_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SourceVault_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSourceVaultSpecARM, SourceVaultSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSourceVaultSpecARM runs a test to see if a specific instance of SourceVault_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSourceVaultSpecARM(subject SourceVault_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SourceVault_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SourceVault_SpecARM instances for property testing - lazily instantiated by SourceVaultSpecARMGenerator()
var sourceVaultSpecARMGenerator gopter.Gen

// SourceVaultSpecARMGenerator returns a generator of SourceVault_SpecARM instances for property testing.
func SourceVaultSpecARMGenerator() gopter.Gen {
	if sourceVaultSpecARMGenerator != nil {
		return sourceVaultSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSourceVaultSpecARM(generators)
	sourceVaultSpecARMGenerator = gen.Struct(reflect.TypeOf(SourceVault_SpecARM{}), generators)

	return sourceVaultSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSourceVaultSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSourceVaultSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
