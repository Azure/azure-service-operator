// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200930

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20200930storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-09-30/Microsoft.Compute.json#/resourceDefinitions/snapshots
type Snapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Snapshots_Spec  `json:"spec,omitempty"`
	Status            Snapshot_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Snapshot{}

// GetConditions returns the conditions of the resource
func (snapshot *Snapshot) GetConditions() conditions.Conditions {
	return snapshot.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (snapshot *Snapshot) SetConditions(conditions conditions.Conditions) {
	snapshot.Status.Conditions = conditions
}

var _ conversion.Convertible = &Snapshot{}

// ConvertFrom populates our Snapshot from the provided hub Snapshot
func (snapshot *Snapshot) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200930storage.Snapshot)
	if !ok {
		return fmt.Errorf("expected storage:compute/v1alpha1api20200930storage/Snapshot but received %T instead", hub)
	}

	return snapshot.AssignPropertiesFromSnapshot(source)
}

// ConvertTo populates the provided hub Snapshot from our Snapshot
func (snapshot *Snapshot) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200930storage.Snapshot)
	if !ok {
		return fmt.Errorf("expected storage:compute/v1alpha1api20200930storage/Snapshot but received %T instead", hub)
	}

	return snapshot.AssignPropertiesToSnapshot(destination)
}

// +kubebuilder:webhook:path=/mutate-compute-azure-com-v1alpha1api20200930-snapshot,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=snapshots,verbs=create;update,versions=v1alpha1api20200930,name=default.v1alpha1api20200930.snapshots.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Snapshot{}

// Default applies defaults to the Snapshot resource
func (snapshot *Snapshot) Default() {
	snapshot.defaultImpl()
	var temp interface{} = snapshot
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (snapshot *Snapshot) defaultAzureName() {
	if snapshot.Spec.AzureName == "" {
		snapshot.Spec.AzureName = snapshot.Name
	}
}

// defaultImpl applies the code generated defaults to the Snapshot resource
func (snapshot *Snapshot) defaultImpl() { snapshot.defaultAzureName() }

var _ genruntime.KubernetesResource = &Snapshot{}

// AzureName returns the Azure name of the resource
func (snapshot *Snapshot) AzureName() string {
	return snapshot.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-09-30"
func (snapshot Snapshot) GetAPIVersion() string {
	return "2020-09-30"
}

// GetResourceKind returns the kind of the resource
func (snapshot *Snapshot) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (snapshot *Snapshot) GetSpec() genruntime.ConvertibleSpec {
	return &snapshot.Spec
}

// GetStatus returns the status of this resource
func (snapshot *Snapshot) GetStatus() genruntime.ConvertibleStatus {
	return &snapshot.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/snapshots"
func (snapshot *Snapshot) GetType() string {
	return "Microsoft.Compute/snapshots"
}

// NewEmptyStatus returns a new empty (blank) status
func (snapshot *Snapshot) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Snapshot_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (snapshot *Snapshot) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(snapshot.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  snapshot.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (snapshot *Snapshot) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Snapshot_Status); ok {
		snapshot.Status = *st
		return nil
	}

	// Convert status to required version
	var st Snapshot_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	snapshot.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-compute-azure-com-v1alpha1api20200930-snapshot,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=snapshots,verbs=create;update,versions=v1alpha1api20200930,name=validate.v1alpha1api20200930.snapshots.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Snapshot{}

// ValidateCreate validates the creation of the resource
func (snapshot *Snapshot) ValidateCreate() error {
	validations := snapshot.createValidations()
	var temp interface{} = snapshot
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (snapshot *Snapshot) ValidateDelete() error {
	validations := snapshot.deleteValidations()
	var temp interface{} = snapshot
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (snapshot *Snapshot) ValidateUpdate(old runtime.Object) error {
	validations := snapshot.updateValidations()
	var temp interface{} = snapshot
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (snapshot *Snapshot) createValidations() []func() error {
	return []func() error{snapshot.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (snapshot *Snapshot) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (snapshot *Snapshot) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return snapshot.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (snapshot *Snapshot) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&snapshot.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromSnapshot populates our Snapshot from the provided source Snapshot
func (snapshot *Snapshot) AssignPropertiesFromSnapshot(source *v1alpha1api20200930storage.Snapshot) error {

	// ObjectMeta
	snapshot.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Snapshots_Spec
	err := spec.AssignPropertiesFromSnapshotsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSnapshotsSpec() to populate field Spec")
	}
	snapshot.Spec = spec

	// Status
	var status Snapshot_Status
	err = status.AssignPropertiesFromSnapshotStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSnapshotStatus() to populate field Status")
	}
	snapshot.Status = status

	// No error
	return nil
}

// AssignPropertiesToSnapshot populates the provided destination Snapshot from our Snapshot
func (snapshot *Snapshot) AssignPropertiesToSnapshot(destination *v1alpha1api20200930storage.Snapshot) error {

	// ObjectMeta
	destination.ObjectMeta = *snapshot.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200930storage.Snapshots_Spec
	err := snapshot.Spec.AssignPropertiesToSnapshotsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSnapshotsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20200930storage.Snapshot_Status
	err = snapshot.Status.AssignPropertiesToSnapshotStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSnapshotStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (snapshot *Snapshot) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: snapshot.Spec.OriginalVersion(),
		Kind:    "Snapshot",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-09-30/Microsoft.Compute.json#/resourceDefinitions/snapshots
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Snapshot `json:"items"`
}

type Snapshot_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreationData: Disk source information. CreationData information cannot be
	//changed after the disk has been created.
	CreationData *CreationData_Status `json:"creationData,omitempty"`

	//DiskAccessId: ARM id of the DiskAccess resource for using private endpoints on
	//disks.
	DiskAccessId *string `json:"diskAccessId,omitempty"`

	//DiskSizeBytes: The size of the disk in bytes. This field is read only.
	DiskSizeBytes *int `json:"diskSizeBytes,omitempty"`

	//DiskSizeGB: If creationData.createOption is Empty, this field is mandatory and
	//it indicates the size of the disk to create. If this field is present for
	//updates or creation with other options, it indicates a resize. Resizes are only
	//allowed if the disk is not attached to a running VM, and can only increase the
	//disk's size.
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//DiskState: The state of the snapshot.
	DiskState *DiskState_Status `json:"diskState,omitempty"`

	//Encryption: Encryption property can be used to encrypt data at rest with
	//customer managed keys or platform managed keys.
	Encryption *Encryption_Status `json:"encryption,omitempty"`

	//EncryptionSettingsCollection: Encryption settings collection used be Azure Disk
	//Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection_Status `json:"encryptionSettingsCollection,omitempty"`

	//ExtendedLocation: The extended location where the snapshot will be created.
	//Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//HyperVGeneration: The hypervisor generation of the Virtual Machine. Applicable
	//to OS disks only.
	HyperVGeneration *SnapshotPropertiesStatusHyperVGeneration `json:"hyperVGeneration,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Incremental: Whether a snapshot is incremental. Incremental snapshots on the
	//same disk occupy less space than full snapshots and can be diffed.
	Incremental *bool `json:"incremental,omitempty"`

	//Location: Resource location
	Location *string `json:"location,omitempty"`

	//ManagedBy: Unused. Always Null.
	ManagedBy *string `json:"managedBy,omitempty"`

	//Name: Resource name
	Name                *string                     `json:"name,omitempty"`
	NetworkAccessPolicy *NetworkAccessPolicy_Status `json:"networkAccessPolicy,omitempty"`

	//OsType: The Operating System type.
	OsType *SnapshotPropertiesStatusOsType `json:"osType,omitempty"`

	//ProvisioningState: The disk provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//PurchasePlan: Purchase plan information for the image from which the source disk
	//for the snapshot was originally created.
	PurchasePlan *PurchasePlan_Status `json:"purchasePlan,omitempty"`
	Sku          *SnapshotSku_Status  `json:"sku,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//TimeCreated: The time when the snapshot was created.
	TimeCreated *string `json:"timeCreated,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//UniqueId: Unique Guid identifying the resource.
	UniqueId *string `json:"uniqueId,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Snapshot_Status{}

// ConvertStatusFrom populates our Snapshot_Status from the provided source
func (snapshot *Snapshot_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20200930storage.Snapshot_Status)
	if ok {
		// Populate our instance from source
		return snapshot.AssignPropertiesFromSnapshotStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200930storage.Snapshot_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = snapshot.AssignPropertiesFromSnapshotStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Snapshot_Status
func (snapshot *Snapshot_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20200930storage.Snapshot_Status)
	if ok {
		// Populate destination from our instance
		return snapshot.AssignPropertiesToSnapshotStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200930storage.Snapshot_Status{}
	err := snapshot.AssignPropertiesToSnapshotStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Snapshot_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (snapshot *Snapshot_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Snapshot_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (snapshot *Snapshot_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Snapshot_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Snapshot_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		var temp CreationData_Status
		var temp1 CreationData_Status
		err := temp1.PopulateFromARM(owner, typedInput.Properties.CreationData)
		if err != nil {
			return err
		}
		temp = temp1
		snapshot.CreationData = &temp
	}

	// Set property ‘DiskAccessId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskAccessId != nil {
			diskAccessId := *typedInput.Properties.DiskAccessId
			snapshot.DiskAccessId = &diskAccessId
		}
	}

	// Set property ‘DiskSizeBytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeBytes != nil {
			diskSizeBytes := *typedInput.Properties.DiskSizeBytes
			snapshot.DiskSizeBytes = &diskSizeBytes
		}
	}

	// Set property ‘DiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeGB != nil {
			diskSizeGB := *typedInput.Properties.DiskSizeGB
			snapshot.DiskSizeGB = &diskSizeGB
		}
	}

	// Set property ‘DiskState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskState != nil {
			diskState := *typedInput.Properties.DiskState
			snapshot.DiskState = &diskState
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			snapshot.Encryption = &encryption
		}
	}

	// Set property ‘EncryptionSettingsCollection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EncryptionSettingsCollection != nil {
			var encryptionSettingsCollection1 EncryptionSettingsCollection_Status
			err := encryptionSettingsCollection1.PopulateFromARM(owner, *typedInput.Properties.EncryptionSettingsCollection)
			if err != nil {
				return err
			}
			encryptionSettingsCollection := encryptionSettingsCollection1
			snapshot.EncryptionSettingsCollection = &encryptionSettingsCollection
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		snapshot.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperVGeneration != nil {
			hyperVGeneration := *typedInput.Properties.HyperVGeneration
			snapshot.HyperVGeneration = &hyperVGeneration
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		snapshot.Id = &id
	}

	// Set property ‘Incremental’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Incremental != nil {
			incremental := *typedInput.Properties.Incremental
			snapshot.Incremental = &incremental
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		snapshot.Location = &location
	}

	// Set property ‘ManagedBy’:
	if typedInput.ManagedBy != nil {
		managedBy := *typedInput.ManagedBy
		snapshot.ManagedBy = &managedBy
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		snapshot.Name = &name
	}

	// Set property ‘NetworkAccessPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAccessPolicy != nil {
			networkAccessPolicy := *typedInput.Properties.NetworkAccessPolicy
			snapshot.NetworkAccessPolicy = &networkAccessPolicy
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			snapshot.OsType = &osType
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			snapshot.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PurchasePlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PurchasePlan != nil {
			var purchasePlan1 PurchasePlan_Status
			err := purchasePlan1.PopulateFromARM(owner, *typedInput.Properties.PurchasePlan)
			if err != nil {
				return err
			}
			purchasePlan := purchasePlan1
			snapshot.PurchasePlan = &purchasePlan
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 SnapshotSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		snapshot.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		snapshot.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			snapshot.Tags[key] = value
		}
	}

	// Set property ‘TimeCreated’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TimeCreated != nil {
			timeCreated := *typedInput.Properties.TimeCreated
			snapshot.TimeCreated = &timeCreated
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		snapshot.Type = &typeVar
	}

	// Set property ‘UniqueId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UniqueId != nil {
			uniqueId := *typedInput.Properties.UniqueId
			snapshot.UniqueId = &uniqueId
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromSnapshotStatus populates our Snapshot_Status from the provided source Snapshot_Status
func (snapshot *Snapshot_Status) AssignPropertiesFromSnapshotStatus(source *v1alpha1api20200930storage.Snapshot_Status) error {

	// Conditions
	snapshot.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationData
	if source.CreationData != nil {
		var creationDatum CreationData_Status
		err := creationDatum.AssignPropertiesFromCreationDataStatus(source.CreationData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreationDataStatus() to populate field CreationData")
		}
		snapshot.CreationData = &creationDatum
	} else {
		snapshot.CreationData = nil
	}

	// DiskAccessId
	snapshot.DiskAccessId = genruntime.ClonePointerToString(source.DiskAccessId)

	// DiskSizeBytes
	snapshot.DiskSizeBytes = genruntime.ClonePointerToInt(source.DiskSizeBytes)

	// DiskSizeGB
	snapshot.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// DiskState
	if source.DiskState != nil {
		diskState := DiskState_Status(*source.DiskState)
		snapshot.DiskState = &diskState
	} else {
		snapshot.DiskState = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryptionStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionStatus() to populate field Encryption")
		}
		snapshot.Encryption = &encryption
	} else {
		snapshot.Encryption = nil
	}

	// EncryptionSettingsCollection
	if source.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection EncryptionSettingsCollection_Status
		err := encryptionSettingsCollection.AssignPropertiesFromEncryptionSettingsCollectionStatus(source.EncryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsCollectionStatus() to populate field EncryptionSettingsCollection")
		}
		snapshot.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		snapshot.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationStatus() to populate field ExtendedLocation")
		}
		snapshot.ExtendedLocation = &extendedLocation
	} else {
		snapshot.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := SnapshotPropertiesStatusHyperVGeneration(*source.HyperVGeneration)
		snapshot.HyperVGeneration = &hyperVGeneration
	} else {
		snapshot.HyperVGeneration = nil
	}

	// Id
	snapshot.Id = genruntime.ClonePointerToString(source.Id)

	// Incremental
	if source.Incremental != nil {
		incremental := *source.Incremental
		snapshot.Incremental = &incremental
	} else {
		snapshot.Incremental = nil
	}

	// Location
	snapshot.Location = genruntime.ClonePointerToString(source.Location)

	// ManagedBy
	snapshot.ManagedBy = genruntime.ClonePointerToString(source.ManagedBy)

	// Name
	snapshot.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkAccessPolicy
	if source.NetworkAccessPolicy != nil {
		networkAccessPolicy := NetworkAccessPolicy_Status(*source.NetworkAccessPolicy)
		snapshot.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		snapshot.NetworkAccessPolicy = nil
	}

	// OsType
	if source.OsType != nil {
		osType := SnapshotPropertiesStatusOsType(*source.OsType)
		snapshot.OsType = &osType
	} else {
		snapshot.OsType = nil
	}

	// ProvisioningState
	snapshot.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PurchasePlan
	if source.PurchasePlan != nil {
		var purchasePlan PurchasePlan_Status
		err := purchasePlan.AssignPropertiesFromPurchasePlanStatus(source.PurchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPurchasePlanStatus() to populate field PurchasePlan")
		}
		snapshot.PurchasePlan = &purchasePlan
	} else {
		snapshot.PurchasePlan = nil
	}

	// Sku
	if source.Sku != nil {
		var sku SnapshotSku_Status
		err := sku.AssignPropertiesFromSnapshotSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSnapshotSkuStatus() to populate field Sku")
		}
		snapshot.Sku = &sku
	} else {
		snapshot.Sku = nil
	}

	// Tags
	snapshot.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TimeCreated
	snapshot.TimeCreated = genruntime.ClonePointerToString(source.TimeCreated)

	// Type
	snapshot.Type = genruntime.ClonePointerToString(source.Type)

	// UniqueId
	snapshot.UniqueId = genruntime.ClonePointerToString(source.UniqueId)

	// No error
	return nil
}

// AssignPropertiesToSnapshotStatus populates the provided destination Snapshot_Status from our Snapshot_Status
func (snapshot *Snapshot_Status) AssignPropertiesToSnapshotStatus(destination *v1alpha1api20200930storage.Snapshot_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(snapshot.Conditions)

	// CreationData
	if snapshot.CreationData != nil {
		var creationDatum v1alpha1api20200930storage.CreationData_Status
		err := snapshot.CreationData.AssignPropertiesToCreationDataStatus(&creationDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreationDataStatus() to populate field CreationData")
		}
		destination.CreationData = &creationDatum
	} else {
		destination.CreationData = nil
	}

	// DiskAccessId
	destination.DiskAccessId = genruntime.ClonePointerToString(snapshot.DiskAccessId)

	// DiskSizeBytes
	destination.DiskSizeBytes = genruntime.ClonePointerToInt(snapshot.DiskSizeBytes)

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(snapshot.DiskSizeGB)

	// DiskState
	if snapshot.DiskState != nil {
		diskState := string(*snapshot.DiskState)
		destination.DiskState = &diskState
	} else {
		destination.DiskState = nil
	}

	// Encryption
	if snapshot.Encryption != nil {
		var encryption v1alpha1api20200930storage.Encryption_Status
		err := snapshot.Encryption.AssignPropertiesToEncryptionStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// EncryptionSettingsCollection
	if snapshot.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection v1alpha1api20200930storage.EncryptionSettingsCollection_Status
		err := snapshot.EncryptionSettingsCollection.AssignPropertiesToEncryptionSettingsCollectionStatus(&encryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsCollectionStatus() to populate field EncryptionSettingsCollection")
		}
		destination.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		destination.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if snapshot.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20200930storage.ExtendedLocation_Status
		err := snapshot.ExtendedLocation.AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationStatus() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if snapshot.HyperVGeneration != nil {
		hyperVGeneration := string(*snapshot.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(snapshot.Id)

	// Incremental
	if snapshot.Incremental != nil {
		incremental := *snapshot.Incremental
		destination.Incremental = &incremental
	} else {
		destination.Incremental = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(snapshot.Location)

	// ManagedBy
	destination.ManagedBy = genruntime.ClonePointerToString(snapshot.ManagedBy)

	// Name
	destination.Name = genruntime.ClonePointerToString(snapshot.Name)

	// NetworkAccessPolicy
	if snapshot.NetworkAccessPolicy != nil {
		networkAccessPolicy := string(*snapshot.NetworkAccessPolicy)
		destination.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		destination.NetworkAccessPolicy = nil
	}

	// OsType
	if snapshot.OsType != nil {
		osType := string(*snapshot.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(snapshot.ProvisioningState)

	// PurchasePlan
	if snapshot.PurchasePlan != nil {
		var purchasePlan v1alpha1api20200930storage.PurchasePlan_Status
		err := snapshot.PurchasePlan.AssignPropertiesToPurchasePlanStatus(&purchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPurchasePlanStatus() to populate field PurchasePlan")
		}
		destination.PurchasePlan = &purchasePlan
	} else {
		destination.PurchasePlan = nil
	}

	// Sku
	if snapshot.Sku != nil {
		var sku v1alpha1api20200930storage.SnapshotSku_Status
		err := snapshot.Sku.AssignPropertiesToSnapshotSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSnapshotSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(snapshot.Tags)

	// TimeCreated
	destination.TimeCreated = genruntime.ClonePointerToString(snapshot.TimeCreated)

	// Type
	destination.Type = genruntime.ClonePointerToString(snapshot.Type)

	// UniqueId
	destination.UniqueId = genruntime.ClonePointerToString(snapshot.UniqueId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-09-30"}
type SnapshotsSpecAPIVersion string

const SnapshotsSpecAPIVersion20200930 = SnapshotsSpecAPIVersion("2020-09-30")

type Snapshots_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	//CreationData: Data used when creating a disk.
	CreationData CreationData `json:"creationData"`

	//DiskAccessReference: ARM id of the DiskAccess resource for using private
	//endpoints on disks.
	DiskAccessReference *genruntime.ResourceReference `armReference:"DiskAccessId" json:"diskAccessReference,omitempty"`

	//DiskSizeGB: If creationData.createOption is Empty, this field is mandatory and
	//it indicates the size of the disk to create. If this field is present for
	//updates or creation with other options, it indicates a resize. Resizes are only
	//allowed if the disk is not attached to a running VM, and can only increase the
	//disk's size.
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//DiskState: The state of the snapshot.
	DiskState *SnapshotPropertiesDiskState `json:"diskState,omitempty"`

	//Encryption: Encryption at rest settings for disk or snapshot
	Encryption *Encryption `json:"encryption,omitempty"`

	//EncryptionSettingsCollection: Encryption settings for disk or snapshot
	EncryptionSettingsCollection *EncryptionSettingsCollection `json:"encryptionSettingsCollection,omitempty"`

	//ExtendedLocation: The complex type of the extended location.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	//HyperVGeneration: The hypervisor generation of the Virtual Machine. Applicable
	//to OS disks only.
	HyperVGeneration *SnapshotPropertiesHyperVGeneration `json:"hyperVGeneration,omitempty"`

	//Incremental: Whether a snapshot is incremental. Incremental snapshots on the
	//same disk occupy less space than full snapshots and can be diffed.
	Incremental *bool `json:"incremental,omitempty"`

	//Location: Location to deploy resource to
	Location            string                                 `json:"location,omitempty"`
	NetworkAccessPolicy *SnapshotPropertiesNetworkAccessPolicy `json:"networkAccessPolicy,omitempty"`

	//OsType: The Operating System type.
	OsType *SnapshotPropertiesOsType `json:"osType,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PurchasePlan: Used for establishing the purchase context of any 3rd Party
	//artifact through MarketPlace.
	PurchasePlan *PurchasePlan `json:"purchasePlan,omitempty"`

	//Sku: The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
	//This is an optional parameter for incremental snapshot and the default behavior
	//is the SKU will be set to the same sku as the previous snapshot
	Sku *SnapshotSku `json:"sku,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &Snapshots_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (snapshots *Snapshots_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if snapshots == nil {
		return nil, nil
	}
	var result Snapshots_SpecARM

	// Set property ‘ExtendedLocation’:
	if snapshots.ExtendedLocation != nil {
		extendedLocationARM, err := (*snapshots.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	result.Location = snapshots.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	creationDataARM, err := snapshots.CreationData.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.CreationData = creationDataARM.(CreationDataARM)
	if snapshots.DiskAccessReference != nil {
		diskAccessIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*snapshots.DiskAccessReference)
		if err != nil {
			return nil, err
		}
		diskAccessId := diskAccessIdARMID
		result.Properties.DiskAccessId = &diskAccessId
	}
	if snapshots.DiskSizeGB != nil {
		diskSizeGB := *snapshots.DiskSizeGB
		result.Properties.DiskSizeGB = &diskSizeGB
	}
	if snapshots.DiskState != nil {
		diskState := *snapshots.DiskState
		result.Properties.DiskState = &diskState
	}
	if snapshots.Encryption != nil {
		encryptionARM, err := (*snapshots.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionARM)
		result.Properties.Encryption = &encryption
	}
	if snapshots.EncryptionSettingsCollection != nil {
		encryptionSettingsCollectionARM, err := (*snapshots.EncryptionSettingsCollection).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryptionSettingsCollection := encryptionSettingsCollectionARM.(EncryptionSettingsCollectionARM)
		result.Properties.EncryptionSettingsCollection = &encryptionSettingsCollection
	}
	if snapshots.HyperVGeneration != nil {
		hyperVGeneration := *snapshots.HyperVGeneration
		result.Properties.HyperVGeneration = &hyperVGeneration
	}
	if snapshots.Incremental != nil {
		incremental := *snapshots.Incremental
		result.Properties.Incremental = &incremental
	}
	if snapshots.NetworkAccessPolicy != nil {
		networkAccessPolicy := *snapshots.NetworkAccessPolicy
		result.Properties.NetworkAccessPolicy = &networkAccessPolicy
	}
	if snapshots.OsType != nil {
		osType := *snapshots.OsType
		result.Properties.OsType = &osType
	}
	if snapshots.PurchasePlan != nil {
		purchasePlanARM, err := (*snapshots.PurchasePlan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		purchasePlan := purchasePlanARM.(PurchasePlanARM)
		result.Properties.PurchasePlan = &purchasePlan
	}

	// Set property ‘Sku’:
	if snapshots.Sku != nil {
		skuARM, err := (*snapshots.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(SnapshotSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if snapshots.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range snapshots.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (snapshots *Snapshots_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Snapshots_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (snapshots *Snapshots_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Snapshots_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Snapshots_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	snapshots.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CreationData’:
	// copying flattened property:
	var creationData CreationData
	err := creationData.PopulateFromARM(owner, typedInput.Properties.CreationData)
	if err != nil {
		return err
	}
	snapshots.CreationData = creationData

	// no assignment for property ‘DiskAccessReference’

	// Set property ‘DiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties.DiskSizeGB != nil {
		diskSizeGB := *typedInput.Properties.DiskSizeGB
		snapshots.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘DiskState’:
	// copying flattened property:
	if typedInput.Properties.DiskState != nil {
		diskState := *typedInput.Properties.DiskState
		snapshots.DiskState = &diskState
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties.Encryption != nil {
		var encryption1 Encryption
		err = encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
		if err != nil {
			return err
		}
		encryption := encryption1
		snapshots.Encryption = &encryption
	}

	// Set property ‘EncryptionSettingsCollection’:
	// copying flattened property:
	if typedInput.Properties.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection1 EncryptionSettingsCollection
		err = encryptionSettingsCollection1.PopulateFromARM(owner, *typedInput.Properties.EncryptionSettingsCollection)
		if err != nil {
			return err
		}
		encryptionSettingsCollection := encryptionSettingsCollection1
		snapshots.EncryptionSettingsCollection = &encryptionSettingsCollection
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err = extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		snapshots.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties.HyperVGeneration != nil {
		hyperVGeneration := *typedInput.Properties.HyperVGeneration
		snapshots.HyperVGeneration = &hyperVGeneration
	}

	// Set property ‘Incremental’:
	// copying flattened property:
	if typedInput.Properties.Incremental != nil {
		incremental := *typedInput.Properties.Incremental
		snapshots.Incremental = &incremental
	}

	// Set property ‘Location’:
	snapshots.Location = typedInput.Location

	// Set property ‘NetworkAccessPolicy’:
	// copying flattened property:
	if typedInput.Properties.NetworkAccessPolicy != nil {
		networkAccessPolicy := *typedInput.Properties.NetworkAccessPolicy
		snapshots.NetworkAccessPolicy = &networkAccessPolicy
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties.OsType != nil {
		osType := *typedInput.Properties.OsType
		snapshots.OsType = &osType
	}

	// Set property ‘Owner’:
	snapshots.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PurchasePlan’:
	// copying flattened property:
	if typedInput.Properties.PurchasePlan != nil {
		var purchasePlan1 PurchasePlan
		err = purchasePlan1.PopulateFromARM(owner, *typedInput.Properties.PurchasePlan)
		if err != nil {
			return err
		}
		purchasePlan := purchasePlan1
		snapshots.PurchasePlan = &purchasePlan
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 SnapshotSku
		err = sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		snapshots.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		snapshots.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			snapshots.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Snapshots_Spec{}

// ConvertSpecFrom populates our Snapshots_Spec from the provided source
func (snapshots *Snapshots_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200930storage.Snapshots_Spec)
	if ok {
		// Populate our instance from source
		return snapshots.AssignPropertiesFromSnapshotsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200930storage.Snapshots_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = snapshots.AssignPropertiesFromSnapshotsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Snapshots_Spec
func (snapshots *Snapshots_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200930storage.Snapshots_Spec)
	if ok {
		// Populate destination from our instance
		return snapshots.AssignPropertiesToSnapshotsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200930storage.Snapshots_Spec{}
	err := snapshots.AssignPropertiesToSnapshotsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromSnapshotsSpec populates our Snapshots_Spec from the provided source Snapshots_Spec
func (snapshots *Snapshots_Spec) AssignPropertiesFromSnapshotsSpec(source *v1alpha1api20200930storage.Snapshots_Spec) error {

	// AzureName
	snapshots.AzureName = source.AzureName

	// CreationData
	if source.CreationData != nil {
		var creationDatum CreationData
		err := creationDatum.AssignPropertiesFromCreationData(source.CreationData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreationData() to populate field CreationData")
		}
		snapshots.CreationData = creationDatum
	} else {
		snapshots.CreationData = CreationData{}
	}

	// DiskAccessReference
	if source.DiskAccessReference != nil {
		diskAccessReference := source.DiskAccessReference.Copy()
		snapshots.DiskAccessReference = &diskAccessReference
	} else {
		snapshots.DiskAccessReference = nil
	}

	// DiskSizeGB
	snapshots.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// DiskState
	if source.DiskState != nil {
		diskState := SnapshotPropertiesDiskState(*source.DiskState)
		snapshots.DiskState = &diskState
	} else {
		snapshots.DiskState = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption() to populate field Encryption")
		}
		snapshots.Encryption = &encryption
	} else {
		snapshots.Encryption = nil
	}

	// EncryptionSettingsCollection
	if source.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection EncryptionSettingsCollection
		err := encryptionSettingsCollection.AssignPropertiesFromEncryptionSettingsCollection(source.EncryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsCollection() to populate field EncryptionSettingsCollection")
		}
		snapshots.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		snapshots.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		snapshots.ExtendedLocation = &extendedLocation
	} else {
		snapshots.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := SnapshotPropertiesHyperVGeneration(*source.HyperVGeneration)
		snapshots.HyperVGeneration = &hyperVGeneration
	} else {
		snapshots.HyperVGeneration = nil
	}

	// Incremental
	if source.Incremental != nil {
		incremental := *source.Incremental
		snapshots.Incremental = &incremental
	} else {
		snapshots.Incremental = nil
	}

	// Location
	snapshots.Location = genruntime.GetOptionalStringValue(source.Location)

	// NetworkAccessPolicy
	if source.NetworkAccessPolicy != nil {
		networkAccessPolicy := SnapshotPropertiesNetworkAccessPolicy(*source.NetworkAccessPolicy)
		snapshots.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		snapshots.NetworkAccessPolicy = nil
	}

	// OsType
	if source.OsType != nil {
		osType := SnapshotPropertiesOsType(*source.OsType)
		snapshots.OsType = &osType
	} else {
		snapshots.OsType = nil
	}

	// Owner
	snapshots.Owner = source.Owner.Copy()

	// PurchasePlan
	if source.PurchasePlan != nil {
		var purchasePlan PurchasePlan
		err := purchasePlan.AssignPropertiesFromPurchasePlan(source.PurchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPurchasePlan() to populate field PurchasePlan")
		}
		snapshots.PurchasePlan = &purchasePlan
	} else {
		snapshots.PurchasePlan = nil
	}

	// Sku
	if source.Sku != nil {
		var sku SnapshotSku
		err := sku.AssignPropertiesFromSnapshotSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSnapshotSku() to populate field Sku")
		}
		snapshots.Sku = &sku
	} else {
		snapshots.Sku = nil
	}

	// Tags
	snapshots.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToSnapshotsSpec populates the provided destination Snapshots_Spec from our Snapshots_Spec
func (snapshots *Snapshots_Spec) AssignPropertiesToSnapshotsSpec(destination *v1alpha1api20200930storage.Snapshots_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = snapshots.AzureName

	// CreationData
	var creationDatum v1alpha1api20200930storage.CreationData
	err := snapshots.CreationData.AssignPropertiesToCreationData(&creationDatum)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToCreationData() to populate field CreationData")
	}
	destination.CreationData = &creationDatum

	// DiskAccessReference
	if snapshots.DiskAccessReference != nil {
		diskAccessReference := snapshots.DiskAccessReference.Copy()
		destination.DiskAccessReference = &diskAccessReference
	} else {
		destination.DiskAccessReference = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(snapshots.DiskSizeGB)

	// DiskState
	if snapshots.DiskState != nil {
		diskState := string(*snapshots.DiskState)
		destination.DiskState = &diskState
	} else {
		destination.DiskState = nil
	}

	// Encryption
	if snapshots.Encryption != nil {
		var encryption v1alpha1api20200930storage.Encryption
		err = snapshots.Encryption.AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// EncryptionSettingsCollection
	if snapshots.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection v1alpha1api20200930storage.EncryptionSettingsCollection
		err = snapshots.EncryptionSettingsCollection.AssignPropertiesToEncryptionSettingsCollection(&encryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsCollection() to populate field EncryptionSettingsCollection")
		}
		destination.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		destination.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if snapshots.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20200930storage.ExtendedLocation
		err = snapshots.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if snapshots.HyperVGeneration != nil {
		hyperVGeneration := string(*snapshots.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Incremental
	if snapshots.Incremental != nil {
		incremental := *snapshots.Incremental
		destination.Incremental = &incremental
	} else {
		destination.Incremental = nil
	}

	// Location
	location := snapshots.Location
	destination.Location = &location

	// NetworkAccessPolicy
	if snapshots.NetworkAccessPolicy != nil {
		networkAccessPolicy := string(*snapshots.NetworkAccessPolicy)
		destination.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		destination.NetworkAccessPolicy = nil
	}

	// OriginalVersion
	destination.OriginalVersion = snapshots.OriginalVersion()

	// OsType
	if snapshots.OsType != nil {
		osType := string(*snapshots.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Owner
	destination.Owner = snapshots.Owner.Copy()

	// PurchasePlan
	if snapshots.PurchasePlan != nil {
		var purchasePlan v1alpha1api20200930storage.PurchasePlan
		err = snapshots.PurchasePlan.AssignPropertiesToPurchasePlan(&purchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPurchasePlan() to populate field PurchasePlan")
		}
		destination.PurchasePlan = &purchasePlan
	} else {
		destination.PurchasePlan = nil
	}

	// Sku
	if snapshots.Sku != nil {
		var sku v1alpha1api20200930storage.SnapshotSku
		err = snapshots.Sku.AssignPropertiesToSnapshotSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSnapshotSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(snapshots.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (snapshots *Snapshots_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (snapshots *Snapshots_Spec) SetAzureName(azureName string) { snapshots.AzureName = azureName }

// +kubebuilder:validation:Enum={"ActiveSAS","ActiveUpload","Attached","ReadyToUpload","Reserved","Unattached"}
type SnapshotPropertiesDiskState string

const (
	SnapshotPropertiesDiskStateActiveSAS     = SnapshotPropertiesDiskState("ActiveSAS")
	SnapshotPropertiesDiskStateActiveUpload  = SnapshotPropertiesDiskState("ActiveUpload")
	SnapshotPropertiesDiskStateAttached      = SnapshotPropertiesDiskState("Attached")
	SnapshotPropertiesDiskStateReadyToUpload = SnapshotPropertiesDiskState("ReadyToUpload")
	SnapshotPropertiesDiskStateReserved      = SnapshotPropertiesDiskState("Reserved")
	SnapshotPropertiesDiskStateUnattached    = SnapshotPropertiesDiskState("Unattached")
)

// +kubebuilder:validation:Enum={"V1","V2"}
type SnapshotPropertiesHyperVGeneration string

const (
	SnapshotPropertiesHyperVGenerationV1 = SnapshotPropertiesHyperVGeneration("V1")
	SnapshotPropertiesHyperVGenerationV2 = SnapshotPropertiesHyperVGeneration("V2")
)

// +kubebuilder:validation:Enum={"AllowAll","AllowPrivate","DenyAll"}
type SnapshotPropertiesNetworkAccessPolicy string

const (
	SnapshotPropertiesNetworkAccessPolicyAllowAll     = SnapshotPropertiesNetworkAccessPolicy("AllowAll")
	SnapshotPropertiesNetworkAccessPolicyAllowPrivate = SnapshotPropertiesNetworkAccessPolicy("AllowPrivate")
	SnapshotPropertiesNetworkAccessPolicyDenyAll      = SnapshotPropertiesNetworkAccessPolicy("DenyAll")
)

// +kubebuilder:validation:Enum={"Linux","Windows"}
type SnapshotPropertiesOsType string

const (
	SnapshotPropertiesOsTypeLinux   = SnapshotPropertiesOsType("Linux")
	SnapshotPropertiesOsTypeWindows = SnapshotPropertiesOsType("Windows")
)

type SnapshotPropertiesStatusHyperVGeneration string

const (
	SnapshotPropertiesStatusHyperVGenerationV1 = SnapshotPropertiesStatusHyperVGeneration("V1")
	SnapshotPropertiesStatusHyperVGenerationV2 = SnapshotPropertiesStatusHyperVGeneration("V2")
)

type SnapshotPropertiesStatusOsType string

const (
	SnapshotPropertiesStatusOsTypeLinux   = SnapshotPropertiesStatusOsType("Linux")
	SnapshotPropertiesStatusOsTypeWindows = SnapshotPropertiesStatusOsType("Windows")
)

//Generated from: https://schema.management.azure.com/schemas/2020-09-30/Microsoft.Compute.json#/definitions/SnapshotSku
type SnapshotSku struct {
	//Name: The sku name.
	Name *SnapshotSkuName `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &SnapshotSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (snapshotSku *SnapshotSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if snapshotSku == nil {
		return nil, nil
	}
	var result SnapshotSkuARM

	// Set property ‘Name’:
	if snapshotSku.Name != nil {
		name := *snapshotSku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (snapshotSku *SnapshotSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SnapshotSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (snapshotSku *SnapshotSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SnapshotSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SnapshotSkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		snapshotSku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromSnapshotSku populates our SnapshotSku from the provided source SnapshotSku
func (snapshotSku *SnapshotSku) AssignPropertiesFromSnapshotSku(source *v1alpha1api20200930storage.SnapshotSku) error {

	// Name
	if source.Name != nil {
		name := SnapshotSkuName(*source.Name)
		snapshotSku.Name = &name
	} else {
		snapshotSku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSnapshotSku populates the provided destination SnapshotSku from our SnapshotSku
func (snapshotSku *SnapshotSku) AssignPropertiesToSnapshotSku(destination *v1alpha1api20200930storage.SnapshotSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if snapshotSku.Name != nil {
		name := string(*snapshotSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SnapshotSku_Status struct {
	//Name: The sku name.
	Name *SnapshotSkuStatusName `json:"name,omitempty"`

	//Tier: The sku tier.
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &SnapshotSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (snapshotSku *SnapshotSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SnapshotSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (snapshotSku *SnapshotSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SnapshotSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SnapshotSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		snapshotSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		snapshotSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSnapshotSkuStatus populates our SnapshotSku_Status from the provided source SnapshotSku_Status
func (snapshotSku *SnapshotSku_Status) AssignPropertiesFromSnapshotSkuStatus(source *v1alpha1api20200930storage.SnapshotSku_Status) error {

	// Name
	if source.Name != nil {
		name := SnapshotSkuStatusName(*source.Name)
		snapshotSku.Name = &name
	} else {
		snapshotSku.Name = nil
	}

	// Tier
	snapshotSku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToSnapshotSkuStatus populates the provided destination SnapshotSku_Status from our SnapshotSku_Status
func (snapshotSku *SnapshotSku_Status) AssignPropertiesToSnapshotSkuStatus(destination *v1alpha1api20200930storage.SnapshotSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if snapshotSku.Name != nil {
		name := string(*snapshotSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	destination.Tier = genruntime.ClonePointerToString(snapshotSku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Snapshot{}, &SnapshotList{})
}
