// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200930

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Snapshot_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Snapshot_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshot_SpecARM, Snapshot_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshot_SpecARM runs a test to see if a specific instance of Snapshot_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshot_SpecARM(subject Snapshot_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Snapshot_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Snapshot_SpecARM instances for property testing - lazily instantiated by Snapshot_SpecARMGenerator()
var snapshot_SpecARMGenerator gopter.Gen

// Snapshot_SpecARMGenerator returns a generator of Snapshot_SpecARM instances for property testing.
// We first initialize snapshot_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Snapshot_SpecARMGenerator() gopter.Gen {
	if snapshot_SpecARMGenerator != nil {
		return snapshot_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshot_SpecARM(generators)
	snapshot_SpecARMGenerator = gen.Struct(reflect.TypeOf(Snapshot_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshot_SpecARM(generators)
	AddRelatedPropertyGeneratorsForSnapshot_SpecARM(generators)
	snapshot_SpecARMGenerator = gen.Struct(reflect.TypeOf(Snapshot_SpecARM{}), generators)

	return snapshot_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSnapshot_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshot_SpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSnapshot_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSnapshot_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["Properties"] = gen.PtrOf(SnapshotPropertiesARMGenerator())
	gens["Sku"] = gen.PtrOf(SnapshotSkuARMGenerator())
}

func Test_SnapshotPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SnapshotPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshotPropertiesARM, SnapshotPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshotPropertiesARM runs a test to see if a specific instance of SnapshotPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshotPropertiesARM(subject SnapshotPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SnapshotPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SnapshotPropertiesARM instances for property testing - lazily instantiated by
// SnapshotPropertiesARMGenerator()
var snapshotPropertiesARMGenerator gopter.Gen

// SnapshotPropertiesARMGenerator returns a generator of SnapshotPropertiesARM instances for property testing.
// We first initialize snapshotPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SnapshotPropertiesARMGenerator() gopter.Gen {
	if snapshotPropertiesARMGenerator != nil {
		return snapshotPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotPropertiesARM(generators)
	snapshotPropertiesARMGenerator = gen.Struct(reflect.TypeOf(SnapshotPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForSnapshotPropertiesARM(generators)
	snapshotPropertiesARMGenerator = gen.Struct(reflect.TypeOf(SnapshotPropertiesARM{}), generators)

	return snapshotPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForSnapshotPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshotPropertiesARM(gens map[string]gopter.Gen) {
	gens["DiskAccessId"] = gen.PtrOf(gen.AlphaString())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["DiskState"] = gen.PtrOf(gen.OneConstOf(
		SnapshotProperties_DiskState_ActiveSAS,
		SnapshotProperties_DiskState_ActiveUpload,
		SnapshotProperties_DiskState_Attached,
		SnapshotProperties_DiskState_ReadyToUpload,
		SnapshotProperties_DiskState_Reserved,
		SnapshotProperties_DiskState_Unattached))
	gens["HyperVGeneration"] = gen.PtrOf(gen.OneConstOf(SnapshotProperties_HyperVGeneration_V1, SnapshotProperties_HyperVGeneration_V2))
	gens["Incremental"] = gen.PtrOf(gen.Bool())
	gens["NetworkAccessPolicy"] = gen.PtrOf(gen.OneConstOf(SnapshotProperties_NetworkAccessPolicy_AllowAll, SnapshotProperties_NetworkAccessPolicy_AllowPrivate, SnapshotProperties_NetworkAccessPolicy_DenyAll))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(SnapshotProperties_OsType_Linux, SnapshotProperties_OsType_Windows))
}

// AddRelatedPropertyGeneratorsForSnapshotPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSnapshotPropertiesARM(gens map[string]gopter.Gen) {
	gens["CreationData"] = gen.PtrOf(CreationDataARMGenerator())
	gens["Encryption"] = gen.PtrOf(EncryptionARMGenerator())
	gens["EncryptionSettingsCollection"] = gen.PtrOf(EncryptionSettingsCollectionARMGenerator())
	gens["PurchasePlan"] = gen.PtrOf(PurchasePlanARMGenerator())
}

func Test_SnapshotSkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SnapshotSkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshotSkuARM, SnapshotSkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshotSkuARM runs a test to see if a specific instance of SnapshotSkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshotSkuARM(subject SnapshotSkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SnapshotSkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SnapshotSkuARM instances for property testing - lazily instantiated by SnapshotSkuARMGenerator()
var snapshotSkuARMGenerator gopter.Gen

// SnapshotSkuARMGenerator returns a generator of SnapshotSkuARM instances for property testing.
func SnapshotSkuARMGenerator() gopter.Gen {
	if snapshotSkuARMGenerator != nil {
		return snapshotSkuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotSkuARM(generators)
	snapshotSkuARMGenerator = gen.Struct(reflect.TypeOf(SnapshotSkuARM{}), generators)

	return snapshotSkuARMGenerator
}

// AddIndependentPropertyGeneratorsForSnapshotSkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshotSkuARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(SnapshotSku_Name_Premium_LRS, SnapshotSku_Name_Standard_LRS, SnapshotSku_Name_Standard_ZRS))
}
