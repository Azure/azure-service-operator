// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200930

import (
	"fmt"
	alpha20200930s "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20200930storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Deprecated version of Disk. Use v1beta20200930.Disk instead
type Disk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Disks_Spec  `json:"spec,omitempty"`
	Status            Disk_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Disk{}

// GetConditions returns the conditions of the resource
func (disk *Disk) GetConditions() conditions.Conditions {
	return disk.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (disk *Disk) SetConditions(conditions conditions.Conditions) {
	disk.Status.Conditions = conditions
}

var _ conversion.Convertible = &Disk{}

// ConvertFrom populates our Disk from the provided hub Disk
func (disk *Disk) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20200930s.Disk

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = disk.AssignPropertiesFromDisk(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to disk")
	}

	return nil
}

// ConvertTo populates the provided hub Disk from our Disk
func (disk *Disk) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20200930s.Disk
	err := disk.AssignPropertiesToDisk(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from disk")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-compute-azure-com-v1alpha1api20200930-disk,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=disks,verbs=create;update,versions=v1alpha1api20200930,name=default.v1alpha1api20200930.disks.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Disk{}

// Default applies defaults to the Disk resource
func (disk *Disk) Default() {
	disk.defaultImpl()
	var temp interface{} = disk
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (disk *Disk) defaultAzureName() {
	if disk.Spec.AzureName == "" {
		disk.Spec.AzureName = disk.Name
	}
}

// defaultImpl applies the code generated defaults to the Disk resource
func (disk *Disk) defaultImpl() { disk.defaultAzureName() }

var _ genruntime.KubernetesResource = &Disk{}

// AzureName returns the Azure name of the resource
func (disk *Disk) AzureName() string {
	return disk.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-09-30"
func (disk Disk) GetAPIVersion() string {
	return "2020-09-30"
}

// GetResourceKind returns the kind of the resource
func (disk *Disk) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (disk *Disk) GetSpec() genruntime.ConvertibleSpec {
	return &disk.Spec
}

// GetStatus returns the status of this resource
func (disk *Disk) GetStatus() genruntime.ConvertibleStatus {
	return &disk.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/disks"
func (disk *Disk) GetType() string {
	return "Microsoft.Compute/disks"
}

// NewEmptyStatus returns a new empty (blank) status
func (disk *Disk) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Disk_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (disk *Disk) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(disk.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  disk.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (disk *Disk) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Disk_Status); ok {
		disk.Status = *st
		return nil
	}

	// Convert status to required version
	var st Disk_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	disk.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-compute-azure-com-v1alpha1api20200930-disk,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=disks,verbs=create;update,versions=v1alpha1api20200930,name=validate.v1alpha1api20200930.disks.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Disk{}

// ValidateCreate validates the creation of the resource
func (disk *Disk) ValidateCreate() error {
	validations := disk.createValidations()
	var temp interface{} = disk
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (disk *Disk) ValidateDelete() error {
	validations := disk.deleteValidations()
	var temp interface{} = disk
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (disk *Disk) ValidateUpdate(old runtime.Object) error {
	validations := disk.updateValidations()
	var temp interface{} = disk
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (disk *Disk) createValidations() []func() error {
	return []func() error{disk.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (disk *Disk) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (disk *Disk) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return disk.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (disk *Disk) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&disk.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromDisk populates our Disk from the provided source Disk
func (disk *Disk) AssignPropertiesFromDisk(source *alpha20200930s.Disk) error {

	// ObjectMeta
	disk.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Disks_Spec
	err := spec.AssignPropertiesFromDisksSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDisksSpec() to populate field Spec")
	}
	disk.Spec = spec

	// Status
	var status Disk_Status
	err = status.AssignPropertiesFromDiskStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDiskStatus() to populate field Status")
	}
	disk.Status = status

	// No error
	return nil
}

// AssignPropertiesToDisk populates the provided destination Disk from our Disk
func (disk *Disk) AssignPropertiesToDisk(destination *alpha20200930s.Disk) error {

	// ObjectMeta
	destination.ObjectMeta = *disk.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20200930s.Disks_Spec
	err := disk.Spec.AssignPropertiesToDisksSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDisksSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20200930s.Disk_Status
	err = disk.Status.AssignPropertiesToDiskStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDiskStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (disk *Disk) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: disk.Spec.OriginalVersion(),
		Kind:    "Disk",
	}
}

// +kubebuilder:object:root=true
//Deprecated version of Disk. Use v1beta20200930.Disk instead
type DiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Disk `json:"items"`
}

//Deprecated version of Disk_Status. Use v1beta20200930.Disk_Status instead
type Disk_Status struct {
	BurstingEnabled *bool `json:"burstingEnabled,omitempty"`

	//Conditions: The observed state of the resource
	Conditions                   []conditions.Condition                `json:"conditions,omitempty"`
	CreationData                 *CreationData_Status                  `json:"creationData,omitempty"`
	DiskAccessId                 *string                               `json:"diskAccessId,omitempty"`
	DiskIOPSReadOnly             *int                                  `json:"diskIOPSReadOnly,omitempty"`
	DiskIOPSReadWrite            *int                                  `json:"diskIOPSReadWrite,omitempty"`
	DiskMBpsReadOnly             *int                                  `json:"diskMBpsReadOnly,omitempty"`
	DiskMBpsReadWrite            *int                                  `json:"diskMBpsReadWrite,omitempty"`
	DiskSizeBytes                *int                                  `json:"diskSizeBytes,omitempty"`
	DiskSizeGB                   *int                                  `json:"diskSizeGB,omitempty"`
	DiskState                    *DiskState_Status                     `json:"diskState,omitempty"`
	Encryption                   *Encryption_Status                    `json:"encryption,omitempty"`
	EncryptionSettingsCollection *EncryptionSettingsCollection_Status  `json:"encryptionSettingsCollection,omitempty"`
	ExtendedLocation             *ExtendedLocation_Status              `json:"extendedLocation,omitempty"`
	HyperVGeneration             *DiskPropertiesStatusHyperVGeneration `json:"hyperVGeneration,omitempty"`
	Id                           *string                               `json:"id,omitempty"`
	Location                     *string                               `json:"location,omitempty"`
	ManagedBy                    *string                               `json:"managedBy,omitempty"`
	ManagedByExtended            []string                              `json:"managedByExtended,omitempty"`
	MaxShares                    *int                                  `json:"maxShares,omitempty"`
	Name                         *string                               `json:"name,omitempty"`
	NetworkAccessPolicy          *NetworkAccessPolicy_Status           `json:"networkAccessPolicy,omitempty"`
	OsType                       *DiskPropertiesStatusOsType           `json:"osType,omitempty"`
	ProvisioningState            *string                               `json:"provisioningState,omitempty"`
	PurchasePlan                 *PurchasePlan_Status                  `json:"purchasePlan,omitempty"`
	ShareInfo                    []ShareInfoElement_Status             `json:"shareInfo,omitempty"`
	Sku                          *DiskSku_Status                       `json:"sku,omitempty"`
	Tags                         map[string]string                     `json:"tags,omitempty"`
	Tier                         *string                               `json:"tier,omitempty"`
	TimeCreated                  *string                               `json:"timeCreated,omitempty"`
	Type                         *string                               `json:"type,omitempty"`
	UniqueId                     *string                               `json:"uniqueId,omitempty"`
	Zones                        []string                              `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Disk_Status{}

// ConvertStatusFrom populates our Disk_Status from the provided source
func (disk *Disk_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20200930s.Disk_Status)
	if ok {
		// Populate our instance from source
		return disk.AssignPropertiesFromDiskStatus(src)
	}

	// Convert to an intermediate form
	src = &alpha20200930s.Disk_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = disk.AssignPropertiesFromDiskStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Disk_Status
func (disk *Disk_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20200930s.Disk_Status)
	if ok {
		// Populate destination from our instance
		return disk.AssignPropertiesToDiskStatus(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20200930s.Disk_Status{}
	err := disk.AssignPropertiesToDiskStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Disk_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *Disk_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Disk_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *Disk_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Disk_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Disk_StatusARM, got %T", armInput)
	}

	// Set property ‘BurstingEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BurstingEnabled != nil {
			burstingEnabled := *typedInput.Properties.BurstingEnabled
			disk.BurstingEnabled = &burstingEnabled
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationData != nil {
			var creationData1 CreationData_Status
			err := creationData1.PopulateFromARM(owner, *typedInput.Properties.CreationData)
			if err != nil {
				return err
			}
			creationData := creationData1
			disk.CreationData = &creationData
		}
	}

	// Set property ‘DiskAccessId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskAccessId != nil {
			diskAccessId := *typedInput.Properties.DiskAccessId
			disk.DiskAccessId = &diskAccessId
		}
	}

	// Set property ‘DiskIOPSReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadOnly != nil {
			diskIOPSReadOnly := *typedInput.Properties.DiskIOPSReadOnly
			disk.DiskIOPSReadOnly = &diskIOPSReadOnly
		}
	}

	// Set property ‘DiskIOPSReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadWrite != nil {
			diskIOPSReadWrite := *typedInput.Properties.DiskIOPSReadWrite
			disk.DiskIOPSReadWrite = &diskIOPSReadWrite
		}
	}

	// Set property ‘DiskMBpsReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadOnly != nil {
			diskMBpsReadOnly := *typedInput.Properties.DiskMBpsReadOnly
			disk.DiskMBpsReadOnly = &diskMBpsReadOnly
		}
	}

	// Set property ‘DiskMBpsReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadWrite != nil {
			diskMBpsReadWrite := *typedInput.Properties.DiskMBpsReadWrite
			disk.DiskMBpsReadWrite = &diskMBpsReadWrite
		}
	}

	// Set property ‘DiskSizeBytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeBytes != nil {
			diskSizeBytes := *typedInput.Properties.DiskSizeBytes
			disk.DiskSizeBytes = &diskSizeBytes
		}
	}

	// Set property ‘DiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeGB != nil {
			diskSizeGB := *typedInput.Properties.DiskSizeGB
			disk.DiskSizeGB = &diskSizeGB
		}
	}

	// Set property ‘DiskState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskState != nil {
			diskState := *typedInput.Properties.DiskState
			disk.DiskState = &diskState
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			disk.Encryption = &encryption
		}
	}

	// Set property ‘EncryptionSettingsCollection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EncryptionSettingsCollection != nil {
			var encryptionSettingsCollection1 EncryptionSettingsCollection_Status
			err := encryptionSettingsCollection1.PopulateFromARM(owner, *typedInput.Properties.EncryptionSettingsCollection)
			if err != nil {
				return err
			}
			encryptionSettingsCollection := encryptionSettingsCollection1
			disk.EncryptionSettingsCollection = &encryptionSettingsCollection
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		disk.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperVGeneration != nil {
			hyperVGeneration := *typedInput.Properties.HyperVGeneration
			disk.HyperVGeneration = &hyperVGeneration
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		disk.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		disk.Location = &location
	}

	// Set property ‘ManagedBy’:
	if typedInput.ManagedBy != nil {
		managedBy := *typedInput.ManagedBy
		disk.ManagedBy = &managedBy
	}

	// Set property ‘ManagedByExtended’:
	for _, item := range typedInput.ManagedByExtended {
		disk.ManagedByExtended = append(disk.ManagedByExtended, item)
	}

	// Set property ‘MaxShares’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxShares != nil {
			maxShares := *typedInput.Properties.MaxShares
			disk.MaxShares = &maxShares
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		disk.Name = &name
	}

	// Set property ‘NetworkAccessPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAccessPolicy != nil {
			networkAccessPolicy := *typedInput.Properties.NetworkAccessPolicy
			disk.NetworkAccessPolicy = &networkAccessPolicy
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			disk.OsType = &osType
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			disk.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PurchasePlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PurchasePlan != nil {
			var purchasePlan1 PurchasePlan_Status
			err := purchasePlan1.PopulateFromARM(owner, *typedInput.Properties.PurchasePlan)
			if err != nil {
				return err
			}
			purchasePlan := purchasePlan1
			disk.PurchasePlan = &purchasePlan
		}
	}

	// Set property ‘ShareInfo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ShareInfo {
			var item1 ShareInfoElement_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			disk.ShareInfo = append(disk.ShareInfo, item1)
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 DiskSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		disk.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		disk.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			disk.Tags[key] = value
		}
	}

	// Set property ‘Tier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tier != nil {
			tier := *typedInput.Properties.Tier
			disk.Tier = &tier
		}
	}

	// Set property ‘TimeCreated’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TimeCreated != nil {
			timeCreated := *typedInput.Properties.TimeCreated
			disk.TimeCreated = &timeCreated
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		disk.Type = &typeVar
	}

	// Set property ‘UniqueId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UniqueId != nil {
			uniqueId := *typedInput.Properties.UniqueId
			disk.UniqueId = &uniqueId
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		disk.Zones = append(disk.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskStatus populates our Disk_Status from the provided source Disk_Status
func (disk *Disk_Status) AssignPropertiesFromDiskStatus(source *alpha20200930s.Disk_Status) error {

	// BurstingEnabled
	if source.BurstingEnabled != nil {
		burstingEnabled := *source.BurstingEnabled
		disk.BurstingEnabled = &burstingEnabled
	} else {
		disk.BurstingEnabled = nil
	}

	// Conditions
	disk.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationData
	if source.CreationData != nil {
		var creationDatum CreationData_Status
		err := creationDatum.AssignPropertiesFromCreationDataStatus(source.CreationData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreationDataStatus() to populate field CreationData")
		}
		disk.CreationData = &creationDatum
	} else {
		disk.CreationData = nil
	}

	// DiskAccessId
	disk.DiskAccessId = genruntime.ClonePointerToString(source.DiskAccessId)

	// DiskIOPSReadOnly
	disk.DiskIOPSReadOnly = genruntime.ClonePointerToInt(source.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	disk.DiskIOPSReadWrite = genruntime.ClonePointerToInt(source.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	disk.DiskMBpsReadOnly = genruntime.ClonePointerToInt(source.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	disk.DiskMBpsReadWrite = genruntime.ClonePointerToInt(source.DiskMBpsReadWrite)

	// DiskSizeBytes
	disk.DiskSizeBytes = genruntime.ClonePointerToInt(source.DiskSizeBytes)

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// DiskState
	if source.DiskState != nil {
		diskState := DiskState_Status(*source.DiskState)
		disk.DiskState = &diskState
	} else {
		disk.DiskState = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryptionStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionStatus() to populate field Encryption")
		}
		disk.Encryption = &encryption
	} else {
		disk.Encryption = nil
	}

	// EncryptionSettingsCollection
	if source.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection EncryptionSettingsCollection_Status
		err := encryptionSettingsCollection.AssignPropertiesFromEncryptionSettingsCollectionStatus(source.EncryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsCollectionStatus() to populate field EncryptionSettingsCollection")
		}
		disk.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		disk.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationStatus() to populate field ExtendedLocation")
		}
		disk.ExtendedLocation = &extendedLocation
	} else {
		disk.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := DiskPropertiesStatusHyperVGeneration(*source.HyperVGeneration)
		disk.HyperVGeneration = &hyperVGeneration
	} else {
		disk.HyperVGeneration = nil
	}

	// Id
	disk.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	disk.Location = genruntime.ClonePointerToString(source.Location)

	// ManagedBy
	disk.ManagedBy = genruntime.ClonePointerToString(source.ManagedBy)

	// ManagedByExtended
	disk.ManagedByExtended = genruntime.CloneSliceOfString(source.ManagedByExtended)

	// MaxShares
	disk.MaxShares = genruntime.ClonePointerToInt(source.MaxShares)

	// Name
	disk.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkAccessPolicy
	if source.NetworkAccessPolicy != nil {
		networkAccessPolicy := NetworkAccessPolicy_Status(*source.NetworkAccessPolicy)
		disk.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		disk.NetworkAccessPolicy = nil
	}

	// OsType
	if source.OsType != nil {
		osType := DiskPropertiesStatusOsType(*source.OsType)
		disk.OsType = &osType
	} else {
		disk.OsType = nil
	}

	// ProvisioningState
	disk.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PurchasePlan
	if source.PurchasePlan != nil {
		var purchasePlan PurchasePlan_Status
		err := purchasePlan.AssignPropertiesFromPurchasePlanStatus(source.PurchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPurchasePlanStatus() to populate field PurchasePlan")
		}
		disk.PurchasePlan = &purchasePlan
	} else {
		disk.PurchasePlan = nil
	}

	// ShareInfo
	if source.ShareInfo != nil {
		shareInfoList := make([]ShareInfoElement_Status, len(source.ShareInfo))
		for shareInfoIndex, shareInfoItem := range source.ShareInfo {
			// Shadow the loop variable to avoid aliasing
			shareInfoItem := shareInfoItem
			var shareInfo ShareInfoElement_Status
			err := shareInfo.AssignPropertiesFromShareInfoElementStatus(&shareInfoItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromShareInfoElementStatus() to populate field ShareInfo")
			}
			shareInfoList[shareInfoIndex] = shareInfo
		}
		disk.ShareInfo = shareInfoList
	} else {
		disk.ShareInfo = nil
	}

	// Sku
	if source.Sku != nil {
		var sku DiskSku_Status
		err := sku.AssignPropertiesFromDiskSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskSkuStatus() to populate field Sku")
		}
		disk.Sku = &sku
	} else {
		disk.Sku = nil
	}

	// Tags
	disk.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tier
	disk.Tier = genruntime.ClonePointerToString(source.Tier)

	// TimeCreated
	disk.TimeCreated = genruntime.ClonePointerToString(source.TimeCreated)

	// Type
	disk.Type = genruntime.ClonePointerToString(source.Type)

	// UniqueId
	disk.UniqueId = genruntime.ClonePointerToString(source.UniqueId)

	// Zones
	disk.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToDiskStatus populates the provided destination Disk_Status from our Disk_Status
func (disk *Disk_Status) AssignPropertiesToDiskStatus(destination *alpha20200930s.Disk_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BurstingEnabled
	if disk.BurstingEnabled != nil {
		burstingEnabled := *disk.BurstingEnabled
		destination.BurstingEnabled = &burstingEnabled
	} else {
		destination.BurstingEnabled = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(disk.Conditions)

	// CreationData
	if disk.CreationData != nil {
		var creationDatum alpha20200930s.CreationData_Status
		err := disk.CreationData.AssignPropertiesToCreationDataStatus(&creationDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreationDataStatus() to populate field CreationData")
		}
		destination.CreationData = &creationDatum
	} else {
		destination.CreationData = nil
	}

	// DiskAccessId
	destination.DiskAccessId = genruntime.ClonePointerToString(disk.DiskAccessId)

	// DiskIOPSReadOnly
	destination.DiskIOPSReadOnly = genruntime.ClonePointerToInt(disk.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	destination.DiskIOPSReadWrite = genruntime.ClonePointerToInt(disk.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	destination.DiskMBpsReadOnly = genruntime.ClonePointerToInt(disk.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	destination.DiskMBpsReadWrite = genruntime.ClonePointerToInt(disk.DiskMBpsReadWrite)

	// DiskSizeBytes
	destination.DiskSizeBytes = genruntime.ClonePointerToInt(disk.DiskSizeBytes)

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// DiskState
	if disk.DiskState != nil {
		diskState := string(*disk.DiskState)
		destination.DiskState = &diskState
	} else {
		destination.DiskState = nil
	}

	// Encryption
	if disk.Encryption != nil {
		var encryption alpha20200930s.Encryption_Status
		err := disk.Encryption.AssignPropertiesToEncryptionStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// EncryptionSettingsCollection
	if disk.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection alpha20200930s.EncryptionSettingsCollection_Status
		err := disk.EncryptionSettingsCollection.AssignPropertiesToEncryptionSettingsCollectionStatus(&encryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsCollectionStatus() to populate field EncryptionSettingsCollection")
		}
		destination.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		destination.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if disk.ExtendedLocation != nil {
		var extendedLocation alpha20200930s.ExtendedLocation_Status
		err := disk.ExtendedLocation.AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationStatus() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if disk.HyperVGeneration != nil {
		hyperVGeneration := string(*disk.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(disk.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(disk.Location)

	// ManagedBy
	destination.ManagedBy = genruntime.ClonePointerToString(disk.ManagedBy)

	// ManagedByExtended
	destination.ManagedByExtended = genruntime.CloneSliceOfString(disk.ManagedByExtended)

	// MaxShares
	destination.MaxShares = genruntime.ClonePointerToInt(disk.MaxShares)

	// Name
	destination.Name = genruntime.ClonePointerToString(disk.Name)

	// NetworkAccessPolicy
	if disk.NetworkAccessPolicy != nil {
		networkAccessPolicy := string(*disk.NetworkAccessPolicy)
		destination.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		destination.NetworkAccessPolicy = nil
	}

	// OsType
	if disk.OsType != nil {
		osType := string(*disk.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(disk.ProvisioningState)

	// PurchasePlan
	if disk.PurchasePlan != nil {
		var purchasePlan alpha20200930s.PurchasePlan_Status
		err := disk.PurchasePlan.AssignPropertiesToPurchasePlanStatus(&purchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPurchasePlanStatus() to populate field PurchasePlan")
		}
		destination.PurchasePlan = &purchasePlan
	} else {
		destination.PurchasePlan = nil
	}

	// ShareInfo
	if disk.ShareInfo != nil {
		shareInfoList := make([]alpha20200930s.ShareInfoElement_Status, len(disk.ShareInfo))
		for shareInfoIndex, shareInfoItem := range disk.ShareInfo {
			// Shadow the loop variable to avoid aliasing
			shareInfoItem := shareInfoItem
			var shareInfo alpha20200930s.ShareInfoElement_Status
			err := shareInfoItem.AssignPropertiesToShareInfoElementStatus(&shareInfo)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToShareInfoElementStatus() to populate field ShareInfo")
			}
			shareInfoList[shareInfoIndex] = shareInfo
		}
		destination.ShareInfo = shareInfoList
	} else {
		destination.ShareInfo = nil
	}

	// Sku
	if disk.Sku != nil {
		var sku alpha20200930s.DiskSku_Status
		err := disk.Sku.AssignPropertiesToDiskSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(disk.Tags)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(disk.Tier)

	// TimeCreated
	destination.TimeCreated = genruntime.ClonePointerToString(disk.TimeCreated)

	// Type
	destination.Type = genruntime.ClonePointerToString(disk.Type)

	// UniqueId
	destination.UniqueId = genruntime.ClonePointerToString(disk.UniqueId)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(disk.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Disks_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName       string `json:"azureName,omitempty"`
	BurstingEnabled *bool  `json:"burstingEnabled,omitempty"`

	// +kubebuilder:validation:Required
	CreationData                 *CreationData                      `json:"creationData,omitempty"`
	DiskAccessReference          *genruntime.ResourceReference      `armReference:"DiskAccessId" json:"diskAccessReference,omitempty"`
	DiskIOPSReadOnly             *int                               `json:"diskIOPSReadOnly,omitempty"`
	DiskIOPSReadWrite            *int                               `json:"diskIOPSReadWrite,omitempty"`
	DiskMBpsReadOnly             *int                               `json:"diskMBpsReadOnly,omitempty"`
	DiskMBpsReadWrite            *int                               `json:"diskMBpsReadWrite,omitempty"`
	DiskSizeGB                   *int                               `json:"diskSizeGB,omitempty"`
	Encryption                   *Encryption                        `json:"encryption,omitempty"`
	EncryptionSettingsCollection *EncryptionSettingsCollection      `json:"encryptionSettingsCollection,omitempty"`
	ExtendedLocation             *ExtendedLocation                  `json:"extendedLocation,omitempty"`
	HyperVGeneration             *DiskPropertiesHyperVGeneration    `json:"hyperVGeneration,omitempty"`
	Location                     *string                            `json:"location,omitempty"`
	MaxShares                    *int                               `json:"maxShares,omitempty"`
	NetworkAccessPolicy          *DiskPropertiesNetworkAccessPolicy `json:"networkAccessPolicy,omitempty"`
	OsType                       *DiskPropertiesOsType              `json:"osType,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a resources.azure.com/ResourceGroup resource
	Owner        *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PurchasePlan *PurchasePlan                      `json:"purchasePlan,omitempty"`
	Sku          *DiskSku                           `json:"sku,omitempty"`
	Tags         map[string]string                  `json:"tags,omitempty"`
	Tier         *string                            `json:"tier,omitempty"`
	Zones        []string                           `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &Disks_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (disks *Disks_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if disks == nil {
		return nil, nil
	}
	var result Disks_SpecARM

	// Set property ‘ExtendedLocation’:
	if disks.ExtendedLocation != nil {
		extendedLocationARM, err := (*disks.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	if disks.Location != nil {
		location := *disks.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if disks.BurstingEnabled != nil ||
		disks.CreationData != nil ||
		disks.DiskAccessReference != nil ||
		disks.DiskIOPSReadOnly != nil ||
		disks.DiskIOPSReadWrite != nil ||
		disks.DiskMBpsReadOnly != nil ||
		disks.DiskMBpsReadWrite != nil ||
		disks.DiskSizeGB != nil ||
		disks.Encryption != nil ||
		disks.EncryptionSettingsCollection != nil ||
		disks.HyperVGeneration != nil ||
		disks.MaxShares != nil ||
		disks.NetworkAccessPolicy != nil ||
		disks.OsType != nil ||
		disks.PurchasePlan != nil ||
		disks.Tier != nil {
		result.Properties = &DiskPropertiesARM{}
	}
	if disks.BurstingEnabled != nil {
		burstingEnabled := *disks.BurstingEnabled
		result.Properties.BurstingEnabled = &burstingEnabled
	}
	if disks.CreationData != nil {
		creationDataARM, err := (*disks.CreationData).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		creationData := creationDataARM.(CreationDataARM)
		result.Properties.CreationData = &creationData
	}
	if disks.DiskAccessReference != nil {
		diskAccessIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*disks.DiskAccessReference)
		if err != nil {
			return nil, err
		}
		diskAccessId := diskAccessIdARMID
		result.Properties.DiskAccessId = &diskAccessId
	}
	if disks.DiskIOPSReadOnly != nil {
		diskIOPSReadOnly := *disks.DiskIOPSReadOnly
		result.Properties.DiskIOPSReadOnly = &diskIOPSReadOnly
	}
	if disks.DiskIOPSReadWrite != nil {
		diskIOPSReadWrite := *disks.DiskIOPSReadWrite
		result.Properties.DiskIOPSReadWrite = &diskIOPSReadWrite
	}
	if disks.DiskMBpsReadOnly != nil {
		diskMBpsReadOnly := *disks.DiskMBpsReadOnly
		result.Properties.DiskMBpsReadOnly = &diskMBpsReadOnly
	}
	if disks.DiskMBpsReadWrite != nil {
		diskMBpsReadWrite := *disks.DiskMBpsReadWrite
		result.Properties.DiskMBpsReadWrite = &diskMBpsReadWrite
	}
	if disks.DiskSizeGB != nil {
		diskSizeGB := *disks.DiskSizeGB
		result.Properties.DiskSizeGB = &diskSizeGB
	}
	if disks.Encryption != nil {
		encryptionARM, err := (*disks.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionARM)
		result.Properties.Encryption = &encryption
	}
	if disks.EncryptionSettingsCollection != nil {
		encryptionSettingsCollectionARM, err := (*disks.EncryptionSettingsCollection).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryptionSettingsCollection := encryptionSettingsCollectionARM.(EncryptionSettingsCollectionARM)
		result.Properties.EncryptionSettingsCollection = &encryptionSettingsCollection
	}
	if disks.HyperVGeneration != nil {
		hyperVGeneration := *disks.HyperVGeneration
		result.Properties.HyperVGeneration = &hyperVGeneration
	}
	if disks.MaxShares != nil {
		maxShares := *disks.MaxShares
		result.Properties.MaxShares = &maxShares
	}
	if disks.NetworkAccessPolicy != nil {
		networkAccessPolicy := *disks.NetworkAccessPolicy
		result.Properties.NetworkAccessPolicy = &networkAccessPolicy
	}
	if disks.OsType != nil {
		osType := *disks.OsType
		result.Properties.OsType = &osType
	}
	if disks.PurchasePlan != nil {
		purchasePlanARM, err := (*disks.PurchasePlan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		purchasePlan := purchasePlanARM.(PurchasePlanARM)
		result.Properties.PurchasePlan = &purchasePlan
	}
	if disks.Tier != nil {
		tier := *disks.Tier
		result.Properties.Tier = &tier
	}

	// Set property ‘Sku’:
	if disks.Sku != nil {
		skuARM, err := (*disks.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(DiskSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if disks.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range disks.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range disks.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disks *Disks_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Disks_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disks *Disks_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Disks_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Disks_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	disks.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BurstingEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BurstingEnabled != nil {
			burstingEnabled := *typedInput.Properties.BurstingEnabled
			disks.BurstingEnabled = &burstingEnabled
		}
	}

	// Set property ‘CreationData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationData != nil {
			var creationData1 CreationData
			err := creationData1.PopulateFromARM(owner, *typedInput.Properties.CreationData)
			if err != nil {
				return err
			}
			creationData := creationData1
			disks.CreationData = &creationData
		}
	}

	// no assignment for property ‘DiskAccessReference’

	// Set property ‘DiskIOPSReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadOnly != nil {
			diskIOPSReadOnly := *typedInput.Properties.DiskIOPSReadOnly
			disks.DiskIOPSReadOnly = &diskIOPSReadOnly
		}
	}

	// Set property ‘DiskIOPSReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadWrite != nil {
			diskIOPSReadWrite := *typedInput.Properties.DiskIOPSReadWrite
			disks.DiskIOPSReadWrite = &diskIOPSReadWrite
		}
	}

	// Set property ‘DiskMBpsReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadOnly != nil {
			diskMBpsReadOnly := *typedInput.Properties.DiskMBpsReadOnly
			disks.DiskMBpsReadOnly = &diskMBpsReadOnly
		}
	}

	// Set property ‘DiskMBpsReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadWrite != nil {
			diskMBpsReadWrite := *typedInput.Properties.DiskMBpsReadWrite
			disks.DiskMBpsReadWrite = &diskMBpsReadWrite
		}
	}

	// Set property ‘DiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeGB != nil {
			diskSizeGB := *typedInput.Properties.DiskSizeGB
			disks.DiskSizeGB = &diskSizeGB
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			disks.Encryption = &encryption
		}
	}

	// Set property ‘EncryptionSettingsCollection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EncryptionSettingsCollection != nil {
			var encryptionSettingsCollection1 EncryptionSettingsCollection
			err := encryptionSettingsCollection1.PopulateFromARM(owner, *typedInput.Properties.EncryptionSettingsCollection)
			if err != nil {
				return err
			}
			encryptionSettingsCollection := encryptionSettingsCollection1
			disks.EncryptionSettingsCollection = &encryptionSettingsCollection
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		disks.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperVGeneration != nil {
			hyperVGeneration := *typedInput.Properties.HyperVGeneration
			disks.HyperVGeneration = &hyperVGeneration
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		disks.Location = &location
	}

	// Set property ‘MaxShares’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxShares != nil {
			maxShares := *typedInput.Properties.MaxShares
			disks.MaxShares = &maxShares
		}
	}

	// Set property ‘NetworkAccessPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAccessPolicy != nil {
			networkAccessPolicy := *typedInput.Properties.NetworkAccessPolicy
			disks.NetworkAccessPolicy = &networkAccessPolicy
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			disks.OsType = &osType
		}
	}

	// Set property ‘Owner’:
	disks.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PurchasePlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PurchasePlan != nil {
			var purchasePlan1 PurchasePlan
			err := purchasePlan1.PopulateFromARM(owner, *typedInput.Properties.PurchasePlan)
			if err != nil {
				return err
			}
			purchasePlan := purchasePlan1
			disks.PurchasePlan = &purchasePlan
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 DiskSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		disks.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		disks.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			disks.Tags[key] = value
		}
	}

	// Set property ‘Tier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tier != nil {
			tier := *typedInput.Properties.Tier
			disks.Tier = &tier
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		disks.Zones = append(disks.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Disks_Spec{}

// ConvertSpecFrom populates our Disks_Spec from the provided source
func (disks *Disks_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20200930s.Disks_Spec)
	if ok {
		// Populate our instance from source
		return disks.AssignPropertiesFromDisksSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20200930s.Disks_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = disks.AssignPropertiesFromDisksSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Disks_Spec
func (disks *Disks_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20200930s.Disks_Spec)
	if ok {
		// Populate destination from our instance
		return disks.AssignPropertiesToDisksSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20200930s.Disks_Spec{}
	err := disks.AssignPropertiesToDisksSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDisksSpec populates our Disks_Spec from the provided source Disks_Spec
func (disks *Disks_Spec) AssignPropertiesFromDisksSpec(source *alpha20200930s.Disks_Spec) error {

	// AzureName
	disks.AzureName = source.AzureName

	// BurstingEnabled
	if source.BurstingEnabled != nil {
		burstingEnabled := *source.BurstingEnabled
		disks.BurstingEnabled = &burstingEnabled
	} else {
		disks.BurstingEnabled = nil
	}

	// CreationData
	if source.CreationData != nil {
		var creationDatum CreationData
		err := creationDatum.AssignPropertiesFromCreationData(source.CreationData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreationData() to populate field CreationData")
		}
		disks.CreationData = &creationDatum
	} else {
		disks.CreationData = nil
	}

	// DiskAccessReference
	if source.DiskAccessReference != nil {
		diskAccessReference := source.DiskAccessReference.Copy()
		disks.DiskAccessReference = &diskAccessReference
	} else {
		disks.DiskAccessReference = nil
	}

	// DiskIOPSReadOnly
	disks.DiskIOPSReadOnly = genruntime.ClonePointerToInt(source.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	disks.DiskIOPSReadWrite = genruntime.ClonePointerToInt(source.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	disks.DiskMBpsReadOnly = genruntime.ClonePointerToInt(source.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	disks.DiskMBpsReadWrite = genruntime.ClonePointerToInt(source.DiskMBpsReadWrite)

	// DiskSizeGB
	disks.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption() to populate field Encryption")
		}
		disks.Encryption = &encryption
	} else {
		disks.Encryption = nil
	}

	// EncryptionSettingsCollection
	if source.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection EncryptionSettingsCollection
		err := encryptionSettingsCollection.AssignPropertiesFromEncryptionSettingsCollection(source.EncryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsCollection() to populate field EncryptionSettingsCollection")
		}
		disks.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		disks.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		disks.ExtendedLocation = &extendedLocation
	} else {
		disks.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := DiskPropertiesHyperVGeneration(*source.HyperVGeneration)
		disks.HyperVGeneration = &hyperVGeneration
	} else {
		disks.HyperVGeneration = nil
	}

	// Location
	disks.Location = genruntime.ClonePointerToString(source.Location)

	// MaxShares
	disks.MaxShares = genruntime.ClonePointerToInt(source.MaxShares)

	// NetworkAccessPolicy
	if source.NetworkAccessPolicy != nil {
		networkAccessPolicy := DiskPropertiesNetworkAccessPolicy(*source.NetworkAccessPolicy)
		disks.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		disks.NetworkAccessPolicy = nil
	}

	// OsType
	if source.OsType != nil {
		osType := DiskPropertiesOsType(*source.OsType)
		disks.OsType = &osType
	} else {
		disks.OsType = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		disks.Owner = &owner
	} else {
		disks.Owner = nil
	}

	// PurchasePlan
	if source.PurchasePlan != nil {
		var purchasePlan PurchasePlan
		err := purchasePlan.AssignPropertiesFromPurchasePlan(source.PurchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPurchasePlan() to populate field PurchasePlan")
		}
		disks.PurchasePlan = &purchasePlan
	} else {
		disks.PurchasePlan = nil
	}

	// Sku
	if source.Sku != nil {
		var sku DiskSku
		err := sku.AssignPropertiesFromDiskSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskSku() to populate field Sku")
		}
		disks.Sku = &sku
	} else {
		disks.Sku = nil
	}

	// Tags
	disks.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tier
	disks.Tier = genruntime.ClonePointerToString(source.Tier)

	// Zones
	disks.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToDisksSpec populates the provided destination Disks_Spec from our Disks_Spec
func (disks *Disks_Spec) AssignPropertiesToDisksSpec(destination *alpha20200930s.Disks_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = disks.AzureName

	// BurstingEnabled
	if disks.BurstingEnabled != nil {
		burstingEnabled := *disks.BurstingEnabled
		destination.BurstingEnabled = &burstingEnabled
	} else {
		destination.BurstingEnabled = nil
	}

	// CreationData
	if disks.CreationData != nil {
		var creationDatum alpha20200930s.CreationData
		err := disks.CreationData.AssignPropertiesToCreationData(&creationDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreationData() to populate field CreationData")
		}
		destination.CreationData = &creationDatum
	} else {
		destination.CreationData = nil
	}

	// DiskAccessReference
	if disks.DiskAccessReference != nil {
		diskAccessReference := disks.DiskAccessReference.Copy()
		destination.DiskAccessReference = &diskAccessReference
	} else {
		destination.DiskAccessReference = nil
	}

	// DiskIOPSReadOnly
	destination.DiskIOPSReadOnly = genruntime.ClonePointerToInt(disks.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	destination.DiskIOPSReadWrite = genruntime.ClonePointerToInt(disks.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	destination.DiskMBpsReadOnly = genruntime.ClonePointerToInt(disks.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	destination.DiskMBpsReadWrite = genruntime.ClonePointerToInt(disks.DiskMBpsReadWrite)

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disks.DiskSizeGB)

	// Encryption
	if disks.Encryption != nil {
		var encryption alpha20200930s.Encryption
		err := disks.Encryption.AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// EncryptionSettingsCollection
	if disks.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection alpha20200930s.EncryptionSettingsCollection
		err := disks.EncryptionSettingsCollection.AssignPropertiesToEncryptionSettingsCollection(&encryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsCollection() to populate field EncryptionSettingsCollection")
		}
		destination.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		destination.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if disks.ExtendedLocation != nil {
		var extendedLocation alpha20200930s.ExtendedLocation
		err := disks.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if disks.HyperVGeneration != nil {
		hyperVGeneration := string(*disks.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(disks.Location)

	// MaxShares
	destination.MaxShares = genruntime.ClonePointerToInt(disks.MaxShares)

	// NetworkAccessPolicy
	if disks.NetworkAccessPolicy != nil {
		networkAccessPolicy := string(*disks.NetworkAccessPolicy)
		destination.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		destination.NetworkAccessPolicy = nil
	}

	// OriginalVersion
	destination.OriginalVersion = disks.OriginalVersion()

	// OsType
	if disks.OsType != nil {
		osType := string(*disks.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Owner
	if disks.Owner != nil {
		owner := disks.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PurchasePlan
	if disks.PurchasePlan != nil {
		var purchasePlan alpha20200930s.PurchasePlan
		err := disks.PurchasePlan.AssignPropertiesToPurchasePlan(&purchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPurchasePlan() to populate field PurchasePlan")
		}
		destination.PurchasePlan = &purchasePlan
	} else {
		destination.PurchasePlan = nil
	}

	// Sku
	if disks.Sku != nil {
		var sku alpha20200930s.DiskSku
		err := disks.Sku.AssignPropertiesToDiskSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(disks.Tags)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(disks.Tier)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(disks.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (disks *Disks_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (disks *Disks_Spec) SetAzureName(azureName string) { disks.AzureName = azureName }

//Deprecated version of CreationData. Use v1beta20200930.CreationData instead
type CreationData struct {
	// +kubebuilder:validation:Required
	CreateOption            *CreationDataCreateOption     `json:"createOption,omitempty"`
	GalleryImageReference   *ImageDiskReference           `json:"galleryImageReference,omitempty"`
	ImageReference          *ImageDiskReference           `json:"imageReference,omitempty"`
	LogicalSectorSize       *int                          `json:"logicalSectorSize,omitempty"`
	SourceResourceReference *genruntime.ResourceReference `armReference:"SourceResourceId" json:"sourceResourceReference,omitempty"`
	SourceUri               *string                       `json:"sourceUri,omitempty"`
	StorageAccountId        *string                       `json:"storageAccountId,omitempty"`
	UploadSizeBytes         *int                          `json:"uploadSizeBytes,omitempty"`
}

var _ genruntime.ARMTransformer = &CreationData{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (data *CreationData) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if data == nil {
		return nil, nil
	}
	var result CreationDataARM

	// Set property ‘CreateOption’:
	if data.CreateOption != nil {
		createOption := *data.CreateOption
		result.CreateOption = &createOption
	}

	// Set property ‘GalleryImageReference’:
	if data.GalleryImageReference != nil {
		galleryImageReferenceARM, err := (*data.GalleryImageReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		galleryImageReference := galleryImageReferenceARM.(ImageDiskReferenceARM)
		result.GalleryImageReference = &galleryImageReference
	}

	// Set property ‘ImageReference’:
	if data.ImageReference != nil {
		imageReferenceARM, err := (*data.ImageReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		imageReference := imageReferenceARM.(ImageDiskReferenceARM)
		result.ImageReference = &imageReference
	}

	// Set property ‘LogicalSectorSize’:
	if data.LogicalSectorSize != nil {
		logicalSectorSize := *data.LogicalSectorSize
		result.LogicalSectorSize = &logicalSectorSize
	}

	// Set property ‘SourceResourceId’:
	if data.SourceResourceReference != nil {
		sourceResourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*data.SourceResourceReference)
		if err != nil {
			return nil, err
		}
		sourceResourceReference := sourceResourceReferenceARMID
		result.SourceResourceId = &sourceResourceReference
	}

	// Set property ‘SourceUri’:
	if data.SourceUri != nil {
		sourceUri := *data.SourceUri
		result.SourceUri = &sourceUri
	}

	// Set property ‘StorageAccountId’:
	if data.StorageAccountId != nil {
		storageAccountId := *data.StorageAccountId
		result.StorageAccountId = &storageAccountId
	}

	// Set property ‘UploadSizeBytes’:
	if data.UploadSizeBytes != nil {
		uploadSizeBytes := *data.UploadSizeBytes
		result.UploadSizeBytes = &uploadSizeBytes
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *CreationData) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CreationDataARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *CreationData) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CreationDataARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CreationDataARM, got %T", armInput)
	}

	// Set property ‘CreateOption’:
	if typedInput.CreateOption != nil {
		createOption := *typedInput.CreateOption
		data.CreateOption = &createOption
	}

	// Set property ‘GalleryImageReference’:
	if typedInput.GalleryImageReference != nil {
		var galleryImageReference1 ImageDiskReference
		err := galleryImageReference1.PopulateFromARM(owner, *typedInput.GalleryImageReference)
		if err != nil {
			return err
		}
		galleryImageReference := galleryImageReference1
		data.GalleryImageReference = &galleryImageReference
	}

	// Set property ‘ImageReference’:
	if typedInput.ImageReference != nil {
		var imageReference1 ImageDiskReference
		err := imageReference1.PopulateFromARM(owner, *typedInput.ImageReference)
		if err != nil {
			return err
		}
		imageReference := imageReference1
		data.ImageReference = &imageReference
	}

	// Set property ‘LogicalSectorSize’:
	if typedInput.LogicalSectorSize != nil {
		logicalSectorSize := *typedInput.LogicalSectorSize
		data.LogicalSectorSize = &logicalSectorSize
	}

	// no assignment for property ‘SourceResourceReference’

	// Set property ‘SourceUri’:
	if typedInput.SourceUri != nil {
		sourceUri := *typedInput.SourceUri
		data.SourceUri = &sourceUri
	}

	// Set property ‘StorageAccountId’:
	if typedInput.StorageAccountId != nil {
		storageAccountId := *typedInput.StorageAccountId
		data.StorageAccountId = &storageAccountId
	}

	// Set property ‘UploadSizeBytes’:
	if typedInput.UploadSizeBytes != nil {
		uploadSizeBytes := *typedInput.UploadSizeBytes
		data.UploadSizeBytes = &uploadSizeBytes
	}

	// No error
	return nil
}

// AssignPropertiesFromCreationData populates our CreationData from the provided source CreationData
func (data *CreationData) AssignPropertiesFromCreationData(source *alpha20200930s.CreationData) error {

	// CreateOption
	if source.CreateOption != nil {
		createOption := CreationDataCreateOption(*source.CreateOption)
		data.CreateOption = &createOption
	} else {
		data.CreateOption = nil
	}

	// GalleryImageReference
	if source.GalleryImageReference != nil {
		var galleryImageReference ImageDiskReference
		err := galleryImageReference.AssignPropertiesFromImageDiskReference(source.GalleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReference() to populate field GalleryImageReference")
		}
		data.GalleryImageReference = &galleryImageReference
	} else {
		data.GalleryImageReference = nil
	}

	// ImageReference
	if source.ImageReference != nil {
		var imageReference ImageDiskReference
		err := imageReference.AssignPropertiesFromImageDiskReference(source.ImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReference() to populate field ImageReference")
		}
		data.ImageReference = &imageReference
	} else {
		data.ImageReference = nil
	}

	// LogicalSectorSize
	data.LogicalSectorSize = genruntime.ClonePointerToInt(source.LogicalSectorSize)

	// SourceResourceReference
	if source.SourceResourceReference != nil {
		sourceResourceReference := source.SourceResourceReference.Copy()
		data.SourceResourceReference = &sourceResourceReference
	} else {
		data.SourceResourceReference = nil
	}

	// SourceUri
	data.SourceUri = genruntime.ClonePointerToString(source.SourceUri)

	// StorageAccountId
	data.StorageAccountId = genruntime.ClonePointerToString(source.StorageAccountId)

	// UploadSizeBytes
	data.UploadSizeBytes = genruntime.ClonePointerToInt(source.UploadSizeBytes)

	// No error
	return nil
}

// AssignPropertiesToCreationData populates the provided destination CreationData from our CreationData
func (data *CreationData) AssignPropertiesToCreationData(destination *alpha20200930s.CreationData) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreateOption
	if data.CreateOption != nil {
		createOption := string(*data.CreateOption)
		destination.CreateOption = &createOption
	} else {
		destination.CreateOption = nil
	}

	// GalleryImageReference
	if data.GalleryImageReference != nil {
		var galleryImageReference alpha20200930s.ImageDiskReference
		err := data.GalleryImageReference.AssignPropertiesToImageDiskReference(&galleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReference() to populate field GalleryImageReference")
		}
		destination.GalleryImageReference = &galleryImageReference
	} else {
		destination.GalleryImageReference = nil
	}

	// ImageReference
	if data.ImageReference != nil {
		var imageReference alpha20200930s.ImageDiskReference
		err := data.ImageReference.AssignPropertiesToImageDiskReference(&imageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReference() to populate field ImageReference")
		}
		destination.ImageReference = &imageReference
	} else {
		destination.ImageReference = nil
	}

	// LogicalSectorSize
	destination.LogicalSectorSize = genruntime.ClonePointerToInt(data.LogicalSectorSize)

	// SourceResourceReference
	if data.SourceResourceReference != nil {
		sourceResourceReference := data.SourceResourceReference.Copy()
		destination.SourceResourceReference = &sourceResourceReference
	} else {
		destination.SourceResourceReference = nil
	}

	// SourceUri
	destination.SourceUri = genruntime.ClonePointerToString(data.SourceUri)

	// StorageAccountId
	destination.StorageAccountId = genruntime.ClonePointerToString(data.StorageAccountId)

	// UploadSizeBytes
	destination.UploadSizeBytes = genruntime.ClonePointerToInt(data.UploadSizeBytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of CreationData_Status. Use v1beta20200930.CreationData_Status instead
type CreationData_Status struct {
	CreateOption          *CreationDataStatusCreateOption `json:"createOption,omitempty"`
	GalleryImageReference *ImageDiskReference_Status      `json:"galleryImageReference,omitempty"`
	ImageReference        *ImageDiskReference_Status      `json:"imageReference,omitempty"`
	LogicalSectorSize     *int                            `json:"logicalSectorSize,omitempty"`
	SourceResourceId      *string                         `json:"sourceResourceId,omitempty"`
	SourceUniqueId        *string                         `json:"sourceUniqueId,omitempty"`
	SourceUri             *string                         `json:"sourceUri,omitempty"`
	StorageAccountId      *string                         `json:"storageAccountId,omitempty"`
	UploadSizeBytes       *int                            `json:"uploadSizeBytes,omitempty"`
}

var _ genruntime.FromARMConverter = &CreationData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *CreationData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CreationData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *CreationData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CreationData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CreationData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreateOption’:
	if typedInput.CreateOption != nil {
		createOption := *typedInput.CreateOption
		data.CreateOption = &createOption
	}

	// Set property ‘GalleryImageReference’:
	if typedInput.GalleryImageReference != nil {
		var galleryImageReference1 ImageDiskReference_Status
		err := galleryImageReference1.PopulateFromARM(owner, *typedInput.GalleryImageReference)
		if err != nil {
			return err
		}
		galleryImageReference := galleryImageReference1
		data.GalleryImageReference = &galleryImageReference
	}

	// Set property ‘ImageReference’:
	if typedInput.ImageReference != nil {
		var imageReference1 ImageDiskReference_Status
		err := imageReference1.PopulateFromARM(owner, *typedInput.ImageReference)
		if err != nil {
			return err
		}
		imageReference := imageReference1
		data.ImageReference = &imageReference
	}

	// Set property ‘LogicalSectorSize’:
	if typedInput.LogicalSectorSize != nil {
		logicalSectorSize := *typedInput.LogicalSectorSize
		data.LogicalSectorSize = &logicalSectorSize
	}

	// Set property ‘SourceResourceId’:
	if typedInput.SourceResourceId != nil {
		sourceResourceId := *typedInput.SourceResourceId
		data.SourceResourceId = &sourceResourceId
	}

	// Set property ‘SourceUniqueId’:
	if typedInput.SourceUniqueId != nil {
		sourceUniqueId := *typedInput.SourceUniqueId
		data.SourceUniqueId = &sourceUniqueId
	}

	// Set property ‘SourceUri’:
	if typedInput.SourceUri != nil {
		sourceUri := *typedInput.SourceUri
		data.SourceUri = &sourceUri
	}

	// Set property ‘StorageAccountId’:
	if typedInput.StorageAccountId != nil {
		storageAccountId := *typedInput.StorageAccountId
		data.StorageAccountId = &storageAccountId
	}

	// Set property ‘UploadSizeBytes’:
	if typedInput.UploadSizeBytes != nil {
		uploadSizeBytes := *typedInput.UploadSizeBytes
		data.UploadSizeBytes = &uploadSizeBytes
	}

	// No error
	return nil
}

// AssignPropertiesFromCreationDataStatus populates our CreationData_Status from the provided source CreationData_Status
func (data *CreationData_Status) AssignPropertiesFromCreationDataStatus(source *alpha20200930s.CreationData_Status) error {

	// CreateOption
	if source.CreateOption != nil {
		createOption := CreationDataStatusCreateOption(*source.CreateOption)
		data.CreateOption = &createOption
	} else {
		data.CreateOption = nil
	}

	// GalleryImageReference
	if source.GalleryImageReference != nil {
		var galleryImageReference ImageDiskReference_Status
		err := galleryImageReference.AssignPropertiesFromImageDiskReferenceStatus(source.GalleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReferenceStatus() to populate field GalleryImageReference")
		}
		data.GalleryImageReference = &galleryImageReference
	} else {
		data.GalleryImageReference = nil
	}

	// ImageReference
	if source.ImageReference != nil {
		var imageReference ImageDiskReference_Status
		err := imageReference.AssignPropertiesFromImageDiskReferenceStatus(source.ImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReferenceStatus() to populate field ImageReference")
		}
		data.ImageReference = &imageReference
	} else {
		data.ImageReference = nil
	}

	// LogicalSectorSize
	data.LogicalSectorSize = genruntime.ClonePointerToInt(source.LogicalSectorSize)

	// SourceResourceId
	data.SourceResourceId = genruntime.ClonePointerToString(source.SourceResourceId)

	// SourceUniqueId
	data.SourceUniqueId = genruntime.ClonePointerToString(source.SourceUniqueId)

	// SourceUri
	data.SourceUri = genruntime.ClonePointerToString(source.SourceUri)

	// StorageAccountId
	data.StorageAccountId = genruntime.ClonePointerToString(source.StorageAccountId)

	// UploadSizeBytes
	data.UploadSizeBytes = genruntime.ClonePointerToInt(source.UploadSizeBytes)

	// No error
	return nil
}

// AssignPropertiesToCreationDataStatus populates the provided destination CreationData_Status from our CreationData_Status
func (data *CreationData_Status) AssignPropertiesToCreationDataStatus(destination *alpha20200930s.CreationData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreateOption
	if data.CreateOption != nil {
		createOption := string(*data.CreateOption)
		destination.CreateOption = &createOption
	} else {
		destination.CreateOption = nil
	}

	// GalleryImageReference
	if data.GalleryImageReference != nil {
		var galleryImageReference alpha20200930s.ImageDiskReference_Status
		err := data.GalleryImageReference.AssignPropertiesToImageDiskReferenceStatus(&galleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReferenceStatus() to populate field GalleryImageReference")
		}
		destination.GalleryImageReference = &galleryImageReference
	} else {
		destination.GalleryImageReference = nil
	}

	// ImageReference
	if data.ImageReference != nil {
		var imageReference alpha20200930s.ImageDiskReference_Status
		err := data.ImageReference.AssignPropertiesToImageDiskReferenceStatus(&imageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReferenceStatus() to populate field ImageReference")
		}
		destination.ImageReference = &imageReference
	} else {
		destination.ImageReference = nil
	}

	// LogicalSectorSize
	destination.LogicalSectorSize = genruntime.ClonePointerToInt(data.LogicalSectorSize)

	// SourceResourceId
	destination.SourceResourceId = genruntime.ClonePointerToString(data.SourceResourceId)

	// SourceUniqueId
	destination.SourceUniqueId = genruntime.ClonePointerToString(data.SourceUniqueId)

	// SourceUri
	destination.SourceUri = genruntime.ClonePointerToString(data.SourceUri)

	// StorageAccountId
	destination.StorageAccountId = genruntime.ClonePointerToString(data.StorageAccountId)

	// UploadSizeBytes
	destination.UploadSizeBytes = genruntime.ClonePointerToInt(data.UploadSizeBytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of DiskPropertiesHyperVGeneration. Use v1beta20200930.DiskPropertiesHyperVGeneration instead
// +kubebuilder:validation:Enum={"V1","V2"}
type DiskPropertiesHyperVGeneration string

const (
	DiskPropertiesHyperVGenerationV1 = DiskPropertiesHyperVGeneration("V1")
	DiskPropertiesHyperVGenerationV2 = DiskPropertiesHyperVGeneration("V2")
)

//Deprecated version of DiskPropertiesNetworkAccessPolicy. Use v1beta20200930.DiskPropertiesNetworkAccessPolicy instead
// +kubebuilder:validation:Enum={"AllowAll","AllowPrivate","DenyAll"}
type DiskPropertiesNetworkAccessPolicy string

const (
	DiskPropertiesNetworkAccessPolicyAllowAll     = DiskPropertiesNetworkAccessPolicy("AllowAll")
	DiskPropertiesNetworkAccessPolicyAllowPrivate = DiskPropertiesNetworkAccessPolicy("AllowPrivate")
	DiskPropertiesNetworkAccessPolicyDenyAll      = DiskPropertiesNetworkAccessPolicy("DenyAll")
)

//Deprecated version of DiskPropertiesOsType. Use v1beta20200930.DiskPropertiesOsType instead
// +kubebuilder:validation:Enum={"Linux","Windows"}
type DiskPropertiesOsType string

const (
	DiskPropertiesOsTypeLinux   = DiskPropertiesOsType("Linux")
	DiskPropertiesOsTypeWindows = DiskPropertiesOsType("Windows")
)

//Deprecated version of DiskPropertiesStatusHyperVGeneration. Use v1beta20200930.DiskPropertiesStatusHyperVGeneration
//instead
type DiskPropertiesStatusHyperVGeneration string

const (
	DiskPropertiesStatusHyperVGenerationV1 = DiskPropertiesStatusHyperVGeneration("V1")
	DiskPropertiesStatusHyperVGenerationV2 = DiskPropertiesStatusHyperVGeneration("V2")
)

//Deprecated version of DiskPropertiesStatusOsType. Use v1beta20200930.DiskPropertiesStatusOsType instead
type DiskPropertiesStatusOsType string

const (
	DiskPropertiesStatusOsTypeLinux   = DiskPropertiesStatusOsType("Linux")
	DiskPropertiesStatusOsTypeWindows = DiskPropertiesStatusOsType("Windows")
)

//Deprecated version of DiskSku. Use v1beta20200930.DiskSku instead
type DiskSku struct {
	Name *DiskSkuName `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &DiskSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (diskSku *DiskSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if diskSku == nil {
		return nil, nil
	}
	var result DiskSkuARM

	// Set property ‘Name’:
	if diskSku.Name != nil {
		name := *diskSku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (diskSku *DiskSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (diskSku *DiskSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiskSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskSkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		diskSku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskSku populates our DiskSku from the provided source DiskSku
func (diskSku *DiskSku) AssignPropertiesFromDiskSku(source *alpha20200930s.DiskSku) error {

	// Name
	if source.Name != nil {
		name := DiskSkuName(*source.Name)
		diskSku.Name = &name
	} else {
		diskSku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiskSku populates the provided destination DiskSku from our DiskSku
func (diskSku *DiskSku) AssignPropertiesToDiskSku(destination *alpha20200930s.DiskSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if diskSku.Name != nil {
		name := string(*diskSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of DiskSku_Status. Use v1beta20200930.DiskSku_Status instead
type DiskSku_Status struct {
	Name *DiskSkuStatusName `json:"name,omitempty"`
	Tier *string            `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &DiskSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (diskSku *DiskSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (diskSku *DiskSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiskSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		diskSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		diskSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskSkuStatus populates our DiskSku_Status from the provided source DiskSku_Status
func (diskSku *DiskSku_Status) AssignPropertiesFromDiskSkuStatus(source *alpha20200930s.DiskSku_Status) error {

	// Name
	if source.Name != nil {
		name := DiskSkuStatusName(*source.Name)
		diskSku.Name = &name
	} else {
		diskSku.Name = nil
	}

	// Tier
	diskSku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToDiskSkuStatus populates the provided destination DiskSku_Status from our DiskSku_Status
func (diskSku *DiskSku_Status) AssignPropertiesToDiskSkuStatus(destination *alpha20200930s.DiskSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if diskSku.Name != nil {
		name := string(*diskSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	destination.Tier = genruntime.ClonePointerToString(diskSku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of DiskState_Status. Use v1beta20200930.DiskState_Status instead
type DiskState_Status string

const (
	DiskState_StatusActiveSAS     = DiskState_Status("ActiveSAS")
	DiskState_StatusActiveUpload  = DiskState_Status("ActiveUpload")
	DiskState_StatusAttached      = DiskState_Status("Attached")
	DiskState_StatusReadyToUpload = DiskState_Status("ReadyToUpload")
	DiskState_StatusReserved      = DiskState_Status("Reserved")
	DiskState_StatusUnattached    = DiskState_Status("Unattached")
)

//Deprecated version of Encryption. Use v1beta20200930.Encryption instead
type Encryption struct {
	DiskEncryptionSetReference *genruntime.ResourceReference `armReference:"DiskEncryptionSetId" json:"diskEncryptionSetReference,omitempty"`
	Type                       *EncryptionType               `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	var result EncryptionARM

	// Set property ‘DiskEncryptionSetId’:
	if encryption.DiskEncryptionSetReference != nil {
		diskEncryptionSetReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*encryption.DiskEncryptionSetReference)
		if err != nil {
			return nil, err
		}
		diskEncryptionSetReference := diskEncryptionSetReferenceARMID
		result.DiskEncryptionSetId = &diskEncryptionSetReference
	}

	// Set property ‘Type’:
	if encryption.Type != nil {
		typeVar := *encryption.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionARM, got %T", armInput)
	}

	// no assignment for property ‘DiskEncryptionSetReference’

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		encryption.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption populates our Encryption from the provided source Encryption
func (encryption *Encryption) AssignPropertiesFromEncryption(source *alpha20200930s.Encryption) error {

	// DiskEncryptionSetReference
	if source.DiskEncryptionSetReference != nil {
		diskEncryptionSetReference := source.DiskEncryptionSetReference.Copy()
		encryption.DiskEncryptionSetReference = &diskEncryptionSetReference
	} else {
		encryption.DiskEncryptionSetReference = nil
	}

	// Type
	if source.Type != nil {
		typeVar := EncryptionType(*source.Type)
		encryption.Type = &typeVar
	} else {
		encryption.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption populates the provided destination Encryption from our Encryption
func (encryption *Encryption) AssignPropertiesToEncryption(destination *alpha20200930s.Encryption) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionSetReference
	if encryption.DiskEncryptionSetReference != nil {
		diskEncryptionSetReference := encryption.DiskEncryptionSetReference.Copy()
		destination.DiskEncryptionSetReference = &diskEncryptionSetReference
	} else {
		destination.DiskEncryptionSetReference = nil
	}

	// Type
	if encryption.Type != nil {
		typeVar := string(*encryption.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of EncryptionSettingsCollection. Use v1beta20200930.EncryptionSettingsCollection instead
type EncryptionSettingsCollection struct {
	// +kubebuilder:validation:Required
	Enabled                   *bool                       `json:"enabled,omitempty"`
	EncryptionSettings        []EncryptionSettingsElement `json:"encryptionSettings,omitempty"`
	EncryptionSettingsVersion *string                     `json:"encryptionSettingsVersion,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionSettingsCollection{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (collection *EncryptionSettingsCollection) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if collection == nil {
		return nil, nil
	}
	var result EncryptionSettingsCollectionARM

	// Set property ‘Enabled’:
	if collection.Enabled != nil {
		enabled := *collection.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘EncryptionSettings’:
	for _, item := range collection.EncryptionSettings {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.EncryptionSettings = append(result.EncryptionSettings, itemARM.(EncryptionSettingsElementARM))
	}

	// Set property ‘EncryptionSettingsVersion’:
	if collection.EncryptionSettingsVersion != nil {
		encryptionSettingsVersion := *collection.EncryptionSettingsVersion
		result.EncryptionSettingsVersion = &encryptionSettingsVersion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (collection *EncryptionSettingsCollection) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsCollectionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (collection *EncryptionSettingsCollection) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsCollectionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsCollectionARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		collection.Enabled = &enabled
	}

	// Set property ‘EncryptionSettings’:
	for _, item := range typedInput.EncryptionSettings {
		var item1 EncryptionSettingsElement
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		collection.EncryptionSettings = append(collection.EncryptionSettings, item1)
	}

	// Set property ‘EncryptionSettingsVersion’:
	if typedInput.EncryptionSettingsVersion != nil {
		encryptionSettingsVersion := *typedInput.EncryptionSettingsVersion
		collection.EncryptionSettingsVersion = &encryptionSettingsVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsCollection populates our EncryptionSettingsCollection from the provided source EncryptionSettingsCollection
func (collection *EncryptionSettingsCollection) AssignPropertiesFromEncryptionSettingsCollection(source *alpha20200930s.EncryptionSettingsCollection) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		collection.Enabled = &enabled
	} else {
		collection.Enabled = nil
	}

	// EncryptionSettings
	if source.EncryptionSettings != nil {
		encryptionSettingList := make([]EncryptionSettingsElement, len(source.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range source.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting EncryptionSettingsElement
			err := encryptionSetting.AssignPropertiesFromEncryptionSettingsElement(&encryptionSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsElement() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		collection.EncryptionSettings = encryptionSettingList
	} else {
		collection.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	collection.EncryptionSettingsVersion = genruntime.ClonePointerToString(source.EncryptionSettingsVersion)

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsCollection populates the provided destination EncryptionSettingsCollection from our EncryptionSettingsCollection
func (collection *EncryptionSettingsCollection) AssignPropertiesToEncryptionSettingsCollection(destination *alpha20200930s.EncryptionSettingsCollection) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if collection.Enabled != nil {
		enabled := *collection.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// EncryptionSettings
	if collection.EncryptionSettings != nil {
		encryptionSettingList := make([]alpha20200930s.EncryptionSettingsElement, len(collection.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range collection.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting alpha20200930s.EncryptionSettingsElement
			err := encryptionSettingItem.AssignPropertiesToEncryptionSettingsElement(&encryptionSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsElement() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		destination.EncryptionSettings = encryptionSettingList
	} else {
		destination.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	destination.EncryptionSettingsVersion = genruntime.ClonePointerToString(collection.EncryptionSettingsVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of EncryptionSettingsCollection_Status. Use v1beta20200930.EncryptionSettingsCollection_Status instead
type EncryptionSettingsCollection_Status struct {
	Enabled                   *bool                              `json:"enabled,omitempty"`
	EncryptionSettings        []EncryptionSettingsElement_Status `json:"encryptionSettings,omitempty"`
	EncryptionSettingsVersion *string                            `json:"encryptionSettingsVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionSettingsCollection_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (collection *EncryptionSettingsCollection_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsCollection_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (collection *EncryptionSettingsCollection_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsCollection_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsCollection_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		collection.Enabled = &enabled
	}

	// Set property ‘EncryptionSettings’:
	for _, item := range typedInput.EncryptionSettings {
		var item1 EncryptionSettingsElement_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		collection.EncryptionSettings = append(collection.EncryptionSettings, item1)
	}

	// Set property ‘EncryptionSettingsVersion’:
	if typedInput.EncryptionSettingsVersion != nil {
		encryptionSettingsVersion := *typedInput.EncryptionSettingsVersion
		collection.EncryptionSettingsVersion = &encryptionSettingsVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsCollectionStatus populates our EncryptionSettingsCollection_Status from the provided source EncryptionSettingsCollection_Status
func (collection *EncryptionSettingsCollection_Status) AssignPropertiesFromEncryptionSettingsCollectionStatus(source *alpha20200930s.EncryptionSettingsCollection_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		collection.Enabled = &enabled
	} else {
		collection.Enabled = nil
	}

	// EncryptionSettings
	if source.EncryptionSettings != nil {
		encryptionSettingList := make([]EncryptionSettingsElement_Status, len(source.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range source.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting EncryptionSettingsElement_Status
			err := encryptionSetting.AssignPropertiesFromEncryptionSettingsElementStatus(&encryptionSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsElementStatus() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		collection.EncryptionSettings = encryptionSettingList
	} else {
		collection.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	collection.EncryptionSettingsVersion = genruntime.ClonePointerToString(source.EncryptionSettingsVersion)

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsCollectionStatus populates the provided destination EncryptionSettingsCollection_Status from our EncryptionSettingsCollection_Status
func (collection *EncryptionSettingsCollection_Status) AssignPropertiesToEncryptionSettingsCollectionStatus(destination *alpha20200930s.EncryptionSettingsCollection_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if collection.Enabled != nil {
		enabled := *collection.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// EncryptionSettings
	if collection.EncryptionSettings != nil {
		encryptionSettingList := make([]alpha20200930s.EncryptionSettingsElement_Status, len(collection.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range collection.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting alpha20200930s.EncryptionSettingsElement_Status
			err := encryptionSettingItem.AssignPropertiesToEncryptionSettingsElementStatus(&encryptionSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsElementStatus() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		destination.EncryptionSettings = encryptionSettingList
	} else {
		destination.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	destination.EncryptionSettingsVersion = genruntime.ClonePointerToString(collection.EncryptionSettingsVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of Encryption_Status. Use v1beta20200930.Encryption_Status instead
type Encryption_Status struct {
	DiskEncryptionSetId *string                `json:"diskEncryptionSetId,omitempty"`
	Type                *EncryptionType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionSetId’:
	if typedInput.DiskEncryptionSetId != nil {
		diskEncryptionSetId := *typedInput.DiskEncryptionSetId
		encryption.DiskEncryptionSetId = &diskEncryptionSetId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		encryption.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionStatus populates our Encryption_Status from the provided source Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesFromEncryptionStatus(source *alpha20200930s.Encryption_Status) error {

	// DiskEncryptionSetId
	encryption.DiskEncryptionSetId = genruntime.ClonePointerToString(source.DiskEncryptionSetId)

	// Type
	if source.Type != nil {
		typeVar := EncryptionType_Status(*source.Type)
		encryption.Type = &typeVar
	} else {
		encryption.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionStatus populates the provided destination Encryption_Status from our Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesToEncryptionStatus(destination *alpha20200930s.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionSetId
	destination.DiskEncryptionSetId = genruntime.ClonePointerToString(encryption.DiskEncryptionSetId)

	// Type
	if encryption.Type != nil {
		typeVar := string(*encryption.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ExtendedLocation. Use v1beta20200930.ExtendedLocation instead
type ExtendedLocation struct {
	Name *string               `json:"name,omitempty"`
	Type *ExtendedLocationType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	var result ExtendedLocationARM

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocationARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesFromExtendedLocation(source *alpha20200930s.ExtendedLocation) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesToExtendedLocation(destination *alpha20200930s.ExtendedLocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ExtendedLocation_Status. Use v1beta20200930.ExtendedLocation_Status instead
type ExtendedLocation_Status struct {
	Name *string                      `json:"name,omitempty"`
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationStatus populates our ExtendedLocation_Status from the provided source ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesFromExtendedLocationStatus(source *alpha20200930s.ExtendedLocation_Status) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Status(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationStatus populates the provided destination ExtendedLocation_Status from our ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesToExtendedLocationStatus(destination *alpha20200930s.ExtendedLocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of NetworkAccessPolicy_Status. Use v1beta20200930.NetworkAccessPolicy_Status instead
type NetworkAccessPolicy_Status string

const (
	NetworkAccessPolicy_StatusAllowAll     = NetworkAccessPolicy_Status("AllowAll")
	NetworkAccessPolicy_StatusAllowPrivate = NetworkAccessPolicy_Status("AllowPrivate")
	NetworkAccessPolicy_StatusDenyAll      = NetworkAccessPolicy_Status("DenyAll")
)

//Deprecated version of PurchasePlan. Use v1beta20200930.PurchasePlan instead
type PurchasePlan struct {
	// +kubebuilder:validation:Required
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	Product       *string `json:"product,omitempty"`
	PromotionCode *string `json:"promotionCode,omitempty"`

	// +kubebuilder:validation:Required
	Publisher *string `json:"publisher,omitempty"`
}

var _ genruntime.ARMTransformer = &PurchasePlan{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (plan *PurchasePlan) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if plan == nil {
		return nil, nil
	}
	var result PurchasePlanARM

	// Set property ‘Name’:
	if plan.Name != nil {
		name := *plan.Name
		result.Name = &name
	}

	// Set property ‘Product’:
	if plan.Product != nil {
		product := *plan.Product
		result.Product = &product
	}

	// Set property ‘PromotionCode’:
	if plan.PromotionCode != nil {
		promotionCode := *plan.PromotionCode
		result.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	if plan.Publisher != nil {
		publisher := *plan.Publisher
		result.Publisher = &publisher
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (plan *PurchasePlan) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PurchasePlanARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (plan *PurchasePlan) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PurchasePlanARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PurchasePlanARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		plan.Name = &name
	}

	// Set property ‘Product’:
	if typedInput.Product != nil {
		product := *typedInput.Product
		plan.Product = &product
	}

	// Set property ‘PromotionCode’:
	if typedInput.PromotionCode != nil {
		promotionCode := *typedInput.PromotionCode
		plan.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	if typedInput.Publisher != nil {
		publisher := *typedInput.Publisher
		plan.Publisher = &publisher
	}

	// No error
	return nil
}

// AssignPropertiesFromPurchasePlan populates our PurchasePlan from the provided source PurchasePlan
func (plan *PurchasePlan) AssignPropertiesFromPurchasePlan(source *alpha20200930s.PurchasePlan) error {

	// Name
	plan.Name = genruntime.ClonePointerToString(source.Name)

	// Product
	plan.Product = genruntime.ClonePointerToString(source.Product)

	// PromotionCode
	plan.PromotionCode = genruntime.ClonePointerToString(source.PromotionCode)

	// Publisher
	plan.Publisher = genruntime.ClonePointerToString(source.Publisher)

	// No error
	return nil
}

// AssignPropertiesToPurchasePlan populates the provided destination PurchasePlan from our PurchasePlan
func (plan *PurchasePlan) AssignPropertiesToPurchasePlan(destination *alpha20200930s.PurchasePlan) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(plan.Name)

	// Product
	destination.Product = genruntime.ClonePointerToString(plan.Product)

	// PromotionCode
	destination.PromotionCode = genruntime.ClonePointerToString(plan.PromotionCode)

	// Publisher
	destination.Publisher = genruntime.ClonePointerToString(plan.Publisher)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of PurchasePlan_Status. Use v1beta20200930.PurchasePlan_Status instead
type PurchasePlan_Status struct {
	Name          *string `json:"name,omitempty"`
	Product       *string `json:"product,omitempty"`
	PromotionCode *string `json:"promotionCode,omitempty"`
	Publisher     *string `json:"publisher,omitempty"`
}

var _ genruntime.FromARMConverter = &PurchasePlan_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (plan *PurchasePlan_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PurchasePlan_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (plan *PurchasePlan_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PurchasePlan_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PurchasePlan_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		plan.Name = &name
	}

	// Set property ‘Product’:
	if typedInput.Product != nil {
		product := *typedInput.Product
		plan.Product = &product
	}

	// Set property ‘PromotionCode’:
	if typedInput.PromotionCode != nil {
		promotionCode := *typedInput.PromotionCode
		plan.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	if typedInput.Publisher != nil {
		publisher := *typedInput.Publisher
		plan.Publisher = &publisher
	}

	// No error
	return nil
}

// AssignPropertiesFromPurchasePlanStatus populates our PurchasePlan_Status from the provided source PurchasePlan_Status
func (plan *PurchasePlan_Status) AssignPropertiesFromPurchasePlanStatus(source *alpha20200930s.PurchasePlan_Status) error {

	// Name
	plan.Name = genruntime.ClonePointerToString(source.Name)

	// Product
	plan.Product = genruntime.ClonePointerToString(source.Product)

	// PromotionCode
	plan.PromotionCode = genruntime.ClonePointerToString(source.PromotionCode)

	// Publisher
	plan.Publisher = genruntime.ClonePointerToString(source.Publisher)

	// No error
	return nil
}

// AssignPropertiesToPurchasePlanStatus populates the provided destination PurchasePlan_Status from our PurchasePlan_Status
func (plan *PurchasePlan_Status) AssignPropertiesToPurchasePlanStatus(destination *alpha20200930s.PurchasePlan_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(plan.Name)

	// Product
	destination.Product = genruntime.ClonePointerToString(plan.Product)

	// PromotionCode
	destination.PromotionCode = genruntime.ClonePointerToString(plan.PromotionCode)

	// Publisher
	destination.Publisher = genruntime.ClonePointerToString(plan.Publisher)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ShareInfoElement_Status. Use v1beta20200930.ShareInfoElement_Status instead
type ShareInfoElement_Status struct {
	VmUri *string `json:"vmUri,omitempty"`
}

var _ genruntime.FromARMConverter = &ShareInfoElement_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (element *ShareInfoElement_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ShareInfoElement_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (element *ShareInfoElement_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ShareInfoElement_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ShareInfoElement_StatusARM, got %T", armInput)
	}

	// Set property ‘VmUri’:
	if typedInput.VmUri != nil {
		vmUri := *typedInput.VmUri
		element.VmUri = &vmUri
	}

	// No error
	return nil
}

// AssignPropertiesFromShareInfoElementStatus populates our ShareInfoElement_Status from the provided source ShareInfoElement_Status
func (element *ShareInfoElement_Status) AssignPropertiesFromShareInfoElementStatus(source *alpha20200930s.ShareInfoElement_Status) error {

	// VmUri
	element.VmUri = genruntime.ClonePointerToString(source.VmUri)

	// No error
	return nil
}

// AssignPropertiesToShareInfoElementStatus populates the provided destination ShareInfoElement_Status from our ShareInfoElement_Status
func (element *ShareInfoElement_Status) AssignPropertiesToShareInfoElementStatus(destination *alpha20200930s.ShareInfoElement_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// VmUri
	destination.VmUri = genruntime.ClonePointerToString(element.VmUri)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of CreationDataCreateOption. Use v1beta20200930.CreationDataCreateOption instead
// +kubebuilder:validation:Enum={"Attach","Copy","Empty","FromImage","Import","Restore","Upload"}
type CreationDataCreateOption string

const (
	CreationDataCreateOptionAttach    = CreationDataCreateOption("Attach")
	CreationDataCreateOptionCopy      = CreationDataCreateOption("Copy")
	CreationDataCreateOptionEmpty     = CreationDataCreateOption("Empty")
	CreationDataCreateOptionFromImage = CreationDataCreateOption("FromImage")
	CreationDataCreateOptionImport    = CreationDataCreateOption("Import")
	CreationDataCreateOptionRestore   = CreationDataCreateOption("Restore")
	CreationDataCreateOptionUpload    = CreationDataCreateOption("Upload")
)

//Deprecated version of CreationDataStatusCreateOption. Use v1beta20200930.CreationDataStatusCreateOption instead
type CreationDataStatusCreateOption string

const (
	CreationDataStatusCreateOptionAttach    = CreationDataStatusCreateOption("Attach")
	CreationDataStatusCreateOptionCopy      = CreationDataStatusCreateOption("Copy")
	CreationDataStatusCreateOptionEmpty     = CreationDataStatusCreateOption("Empty")
	CreationDataStatusCreateOptionFromImage = CreationDataStatusCreateOption("FromImage")
	CreationDataStatusCreateOptionImport    = CreationDataStatusCreateOption("Import")
	CreationDataStatusCreateOptionRestore   = CreationDataStatusCreateOption("Restore")
	CreationDataStatusCreateOptionUpload    = CreationDataStatusCreateOption("Upload")
)

//Deprecated version of EncryptionSettingsElement. Use v1beta20200930.EncryptionSettingsElement instead
type EncryptionSettingsElement struct {
	DiskEncryptionKey *KeyVaultAndSecretReference `json:"diskEncryptionKey,omitempty"`
	KeyEncryptionKey  *KeyVaultAndKeyReference    `json:"keyEncryptionKey,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionSettingsElement{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (element *EncryptionSettingsElement) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if element == nil {
		return nil, nil
	}
	var result EncryptionSettingsElementARM

	// Set property ‘DiskEncryptionKey’:
	if element.DiskEncryptionKey != nil {
		diskEncryptionKeyARM, err := (*element.DiskEncryptionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diskEncryptionKey := diskEncryptionKeyARM.(KeyVaultAndSecretReferenceARM)
		result.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘KeyEncryptionKey’:
	if element.KeyEncryptionKey != nil {
		keyEncryptionKeyARM, err := (*element.KeyEncryptionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyEncryptionKey := keyEncryptionKeyARM.(KeyVaultAndKeyReferenceARM)
		result.KeyEncryptionKey = &keyEncryptionKey
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (element *EncryptionSettingsElement) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsElementARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (element *EncryptionSettingsElement) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsElementARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsElementARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionKey’:
	if typedInput.DiskEncryptionKey != nil {
		var diskEncryptionKey1 KeyVaultAndSecretReference
		err := diskEncryptionKey1.PopulateFromARM(owner, *typedInput.DiskEncryptionKey)
		if err != nil {
			return err
		}
		diskEncryptionKey := diskEncryptionKey1
		element.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘KeyEncryptionKey’:
	if typedInput.KeyEncryptionKey != nil {
		var keyEncryptionKey1 KeyVaultAndKeyReference
		err := keyEncryptionKey1.PopulateFromARM(owner, *typedInput.KeyEncryptionKey)
		if err != nil {
			return err
		}
		keyEncryptionKey := keyEncryptionKey1
		element.KeyEncryptionKey = &keyEncryptionKey
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsElement populates our EncryptionSettingsElement from the provided source EncryptionSettingsElement
func (element *EncryptionSettingsElement) AssignPropertiesFromEncryptionSettingsElement(source *alpha20200930s.EncryptionSettingsElement) error {

	// DiskEncryptionKey
	if source.DiskEncryptionKey != nil {
		var diskEncryptionKey KeyVaultAndSecretReference
		err := diskEncryptionKey.AssignPropertiesFromKeyVaultAndSecretReference(source.DiskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndSecretReference() to populate field DiskEncryptionKey")
		}
		element.DiskEncryptionKey = &diskEncryptionKey
	} else {
		element.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if source.KeyEncryptionKey != nil {
		var keyEncryptionKey KeyVaultAndKeyReference
		err := keyEncryptionKey.AssignPropertiesFromKeyVaultAndKeyReference(source.KeyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndKeyReference() to populate field KeyEncryptionKey")
		}
		element.KeyEncryptionKey = &keyEncryptionKey
	} else {
		element.KeyEncryptionKey = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsElement populates the provided destination EncryptionSettingsElement from our EncryptionSettingsElement
func (element *EncryptionSettingsElement) AssignPropertiesToEncryptionSettingsElement(destination *alpha20200930s.EncryptionSettingsElement) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionKey
	if element.DiskEncryptionKey != nil {
		var diskEncryptionKey alpha20200930s.KeyVaultAndSecretReference
		err := element.DiskEncryptionKey.AssignPropertiesToKeyVaultAndSecretReference(&diskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndSecretReference() to populate field DiskEncryptionKey")
		}
		destination.DiskEncryptionKey = &diskEncryptionKey
	} else {
		destination.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if element.KeyEncryptionKey != nil {
		var keyEncryptionKey alpha20200930s.KeyVaultAndKeyReference
		err := element.KeyEncryptionKey.AssignPropertiesToKeyVaultAndKeyReference(&keyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndKeyReference() to populate field KeyEncryptionKey")
		}
		destination.KeyEncryptionKey = &keyEncryptionKey
	} else {
		destination.KeyEncryptionKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of EncryptionSettingsElement_Status. Use v1beta20200930.EncryptionSettingsElement_Status instead
type EncryptionSettingsElement_Status struct {
	DiskEncryptionKey *KeyVaultAndSecretReference_Status `json:"diskEncryptionKey,omitempty"`
	KeyEncryptionKey  *KeyVaultAndKeyReference_Status    `json:"keyEncryptionKey,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionSettingsElement_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (element *EncryptionSettingsElement_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsElement_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (element *EncryptionSettingsElement_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsElement_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsElement_StatusARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionKey’:
	if typedInput.DiskEncryptionKey != nil {
		var diskEncryptionKey1 KeyVaultAndSecretReference_Status
		err := diskEncryptionKey1.PopulateFromARM(owner, *typedInput.DiskEncryptionKey)
		if err != nil {
			return err
		}
		diskEncryptionKey := diskEncryptionKey1
		element.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘KeyEncryptionKey’:
	if typedInput.KeyEncryptionKey != nil {
		var keyEncryptionKey1 KeyVaultAndKeyReference_Status
		err := keyEncryptionKey1.PopulateFromARM(owner, *typedInput.KeyEncryptionKey)
		if err != nil {
			return err
		}
		keyEncryptionKey := keyEncryptionKey1
		element.KeyEncryptionKey = &keyEncryptionKey
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsElementStatus populates our EncryptionSettingsElement_Status from the provided source EncryptionSettingsElement_Status
func (element *EncryptionSettingsElement_Status) AssignPropertiesFromEncryptionSettingsElementStatus(source *alpha20200930s.EncryptionSettingsElement_Status) error {

	// DiskEncryptionKey
	if source.DiskEncryptionKey != nil {
		var diskEncryptionKey KeyVaultAndSecretReference_Status
		err := diskEncryptionKey.AssignPropertiesFromKeyVaultAndSecretReferenceStatus(source.DiskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndSecretReferenceStatus() to populate field DiskEncryptionKey")
		}
		element.DiskEncryptionKey = &diskEncryptionKey
	} else {
		element.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if source.KeyEncryptionKey != nil {
		var keyEncryptionKey KeyVaultAndKeyReference_Status
		err := keyEncryptionKey.AssignPropertiesFromKeyVaultAndKeyReferenceStatus(source.KeyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndKeyReferenceStatus() to populate field KeyEncryptionKey")
		}
		element.KeyEncryptionKey = &keyEncryptionKey
	} else {
		element.KeyEncryptionKey = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsElementStatus populates the provided destination EncryptionSettingsElement_Status from our EncryptionSettingsElement_Status
func (element *EncryptionSettingsElement_Status) AssignPropertiesToEncryptionSettingsElementStatus(destination *alpha20200930s.EncryptionSettingsElement_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionKey
	if element.DiskEncryptionKey != nil {
		var diskEncryptionKey alpha20200930s.KeyVaultAndSecretReference_Status
		err := element.DiskEncryptionKey.AssignPropertiesToKeyVaultAndSecretReferenceStatus(&diskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndSecretReferenceStatus() to populate field DiskEncryptionKey")
		}
		destination.DiskEncryptionKey = &diskEncryptionKey
	} else {
		destination.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if element.KeyEncryptionKey != nil {
		var keyEncryptionKey alpha20200930s.KeyVaultAndKeyReference_Status
		err := element.KeyEncryptionKey.AssignPropertiesToKeyVaultAndKeyReferenceStatus(&keyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndKeyReferenceStatus() to populate field KeyEncryptionKey")
		}
		destination.KeyEncryptionKey = &keyEncryptionKey
	} else {
		destination.KeyEncryptionKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of EncryptionType. Use v1beta20200930.EncryptionType instead
// +kubebuilder:validation:Enum={"EncryptionAtRestWithCustomerKey","EncryptionAtRestWithPlatformAndCustomerKeys","EncryptionAtRestWithPlatformKey"}
type EncryptionType string

const (
	EncryptionTypeEncryptionAtRestWithCustomerKey             = EncryptionType("EncryptionAtRestWithCustomerKey")
	EncryptionTypeEncryptionAtRestWithPlatformAndCustomerKeys = EncryptionType("EncryptionAtRestWithPlatformAndCustomerKeys")
	EncryptionTypeEncryptionAtRestWithPlatformKey             = EncryptionType("EncryptionAtRestWithPlatformKey")
)

//Deprecated version of EncryptionType_Status. Use v1beta20200930.EncryptionType_Status instead
type EncryptionType_Status string

const (
	EncryptionType_StatusEncryptionAtRestWithCustomerKey             = EncryptionType_Status("EncryptionAtRestWithCustomerKey")
	EncryptionType_StatusEncryptionAtRestWithPlatformAndCustomerKeys = EncryptionType_Status("EncryptionAtRestWithPlatformAndCustomerKeys")
	EncryptionType_StatusEncryptionAtRestWithPlatformKey             = EncryptionType_Status("EncryptionAtRestWithPlatformKey")
)

//Deprecated version of ImageDiskReference. Use v1beta20200930.ImageDiskReference instead
type ImageDiskReference struct {
	Lun *int `json:"lun,omitempty"`

	// +kubebuilder:validation:Required
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &ImageDiskReference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *ImageDiskReference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result ImageDiskReferenceARM

	// Set property ‘Id’:
	if reference.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*reference.Reference)
		if err != nil {
			return nil, err
		}
		reference1 := referenceARMID
		result.Id = &reference1
	}

	// Set property ‘Lun’:
	if reference.Lun != nil {
		lun := *reference.Lun
		result.Lun = &lun
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ImageDiskReference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageDiskReferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ImageDiskReference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageDiskReferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageDiskReferenceARM, got %T", armInput)
	}

	// Set property ‘Lun’:
	if typedInput.Lun != nil {
		lun := *typedInput.Lun
		reference.Lun = &lun
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromImageDiskReference populates our ImageDiskReference from the provided source ImageDiskReference
func (reference *ImageDiskReference) AssignPropertiesFromImageDiskReference(source *alpha20200930s.ImageDiskReference) error {

	// Lun
	reference.Lun = genruntime.ClonePointerToInt(source.Lun)

	// Reference
	if source.Reference != nil {
		referenceTemp := source.Reference.Copy()
		reference.Reference = &referenceTemp
	} else {
		reference.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImageDiskReference populates the provided destination ImageDiskReference from our ImageDiskReference
func (reference *ImageDiskReference) AssignPropertiesToImageDiskReference(destination *alpha20200930s.ImageDiskReference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Lun
	destination.Lun = genruntime.ClonePointerToInt(reference.Lun)

	// Reference
	if reference.Reference != nil {
		referenceTemp := reference.Reference.Copy()
		destination.Reference = &referenceTemp
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of ImageDiskReference_Status. Use v1beta20200930.ImageDiskReference_Status instead
type ImageDiskReference_Status struct {
	Id  *string `json:"id,omitempty"`
	Lun *int    `json:"lun,omitempty"`
}

var _ genruntime.FromARMConverter = &ImageDiskReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ImageDiskReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageDiskReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ImageDiskReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageDiskReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageDiskReference_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		reference.Id = &id
	}

	// Set property ‘Lun’:
	if typedInput.Lun != nil {
		lun := *typedInput.Lun
		reference.Lun = &lun
	}

	// No error
	return nil
}

// AssignPropertiesFromImageDiskReferenceStatus populates our ImageDiskReference_Status from the provided source ImageDiskReference_Status
func (reference *ImageDiskReference_Status) AssignPropertiesFromImageDiskReferenceStatus(source *alpha20200930s.ImageDiskReference_Status) error {

	// Id
	reference.Id = genruntime.ClonePointerToString(source.Id)

	// Lun
	reference.Lun = genruntime.ClonePointerToInt(source.Lun)

	// No error
	return nil
}

// AssignPropertiesToImageDiskReferenceStatus populates the provided destination ImageDiskReference_Status from our ImageDiskReference_Status
func (reference *ImageDiskReference_Status) AssignPropertiesToImageDiskReferenceStatus(destination *alpha20200930s.ImageDiskReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(reference.Id)

	// Lun
	destination.Lun = genruntime.ClonePointerToInt(reference.Lun)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of KeyVaultAndKeyReference. Use v1beta20200930.KeyVaultAndKeyReference instead
type KeyVaultAndKeyReference struct {
	// +kubebuilder:validation:Required
	KeyUrl *string `json:"keyUrl,omitempty"`

	// +kubebuilder:validation:Required
	SourceVault *SourceVault `json:"sourceVault,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultAndKeyReference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultAndKeyReference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultAndKeyReferenceARM

	// Set property ‘KeyUrl’:
	if reference.KeyUrl != nil {
		keyUrl := *reference.KeyUrl
		result.KeyUrl = &keyUrl
	}

	// Set property ‘SourceVault’:
	if reference.SourceVault != nil {
		sourceVaultARM, err := (*reference.SourceVault).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sourceVault := sourceVaultARM.(SourceVaultARM)
		result.SourceVault = &sourceVault
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndKeyReference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndKeyReferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndKeyReference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndKeyReferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndKeyReferenceARM, got %T", armInput)
	}

	// Set property ‘KeyUrl’:
	if typedInput.KeyUrl != nil {
		keyUrl := *typedInput.KeyUrl
		reference.KeyUrl = &keyUrl
	}

	// Set property ‘SourceVault’:
	if typedInput.SourceVault != nil {
		var sourceVault1 SourceVault
		err := sourceVault1.PopulateFromARM(owner, *typedInput.SourceVault)
		if err != nil {
			return err
		}
		sourceVault := sourceVault1
		reference.SourceVault = &sourceVault
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndKeyReference populates our KeyVaultAndKeyReference from the provided source KeyVaultAndKeyReference
func (reference *KeyVaultAndKeyReference) AssignPropertiesFromKeyVaultAndKeyReference(source *alpha20200930s.KeyVaultAndKeyReference) error {

	// KeyUrl
	reference.KeyUrl = genruntime.ClonePointerToString(source.KeyUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault
		err := sourceVault.AssignPropertiesFromSourceVault(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVault() to populate field SourceVault")
		}
		reference.SourceVault = &sourceVault
	} else {
		reference.SourceVault = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndKeyReference populates the provided destination KeyVaultAndKeyReference from our KeyVaultAndKeyReference
func (reference *KeyVaultAndKeyReference) AssignPropertiesToKeyVaultAndKeyReference(destination *alpha20200930s.KeyVaultAndKeyReference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyUrl
	destination.KeyUrl = genruntime.ClonePointerToString(reference.KeyUrl)

	// SourceVault
	if reference.SourceVault != nil {
		var sourceVault alpha20200930s.SourceVault
		err := reference.SourceVault.AssignPropertiesToSourceVault(&sourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSourceVault() to populate field SourceVault")
		}
		destination.SourceVault = &sourceVault
	} else {
		destination.SourceVault = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of KeyVaultAndKeyReference_Status. Use v1beta20200930.KeyVaultAndKeyReference_Status instead
type KeyVaultAndKeyReference_Status struct {
	KeyUrl      *string             `json:"keyUrl,omitempty"`
	SourceVault *SourceVault_Status `json:"sourceVault,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultAndKeyReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndKeyReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndKeyReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndKeyReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndKeyReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndKeyReference_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyUrl’:
	if typedInput.KeyUrl != nil {
		keyUrl := *typedInput.KeyUrl
		reference.KeyUrl = &keyUrl
	}

	// Set property ‘SourceVault’:
	if typedInput.SourceVault != nil {
		var sourceVault1 SourceVault_Status
		err := sourceVault1.PopulateFromARM(owner, *typedInput.SourceVault)
		if err != nil {
			return err
		}
		sourceVault := sourceVault1
		reference.SourceVault = &sourceVault
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndKeyReferenceStatus populates our KeyVaultAndKeyReference_Status from the provided source KeyVaultAndKeyReference_Status
func (reference *KeyVaultAndKeyReference_Status) AssignPropertiesFromKeyVaultAndKeyReferenceStatus(source *alpha20200930s.KeyVaultAndKeyReference_Status) error {

	// KeyUrl
	reference.KeyUrl = genruntime.ClonePointerToString(source.KeyUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault_Status
		err := sourceVault.AssignPropertiesFromSourceVaultStatus(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVaultStatus() to populate field SourceVault")
		}
		reference.SourceVault = &sourceVault
	} else {
		reference.SourceVault = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndKeyReferenceStatus populates the provided destination KeyVaultAndKeyReference_Status from our KeyVaultAndKeyReference_Status
func (reference *KeyVaultAndKeyReference_Status) AssignPropertiesToKeyVaultAndKeyReferenceStatus(destination *alpha20200930s.KeyVaultAndKeyReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyUrl
	destination.KeyUrl = genruntime.ClonePointerToString(reference.KeyUrl)

	// SourceVault
	if reference.SourceVault != nil {
		var sourceVault alpha20200930s.SourceVault_Status
		err := reference.SourceVault.AssignPropertiesToSourceVaultStatus(&sourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSourceVaultStatus() to populate field SourceVault")
		}
		destination.SourceVault = &sourceVault
	} else {
		destination.SourceVault = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of KeyVaultAndSecretReference. Use v1beta20200930.KeyVaultAndSecretReference instead
type KeyVaultAndSecretReference struct {
	// +kubebuilder:validation:Required
	SecretUrl *string `json:"secretUrl,omitempty"`

	// +kubebuilder:validation:Required
	SourceVault *SourceVault `json:"sourceVault,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultAndSecretReference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultAndSecretReference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultAndSecretReferenceARM

	// Set property ‘SecretUrl’:
	if reference.SecretUrl != nil {
		secretUrl := *reference.SecretUrl
		result.SecretUrl = &secretUrl
	}

	// Set property ‘SourceVault’:
	if reference.SourceVault != nil {
		sourceVaultARM, err := (*reference.SourceVault).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sourceVault := sourceVaultARM.(SourceVaultARM)
		result.SourceVault = &sourceVault
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndSecretReference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndSecretReferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndSecretReference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndSecretReferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndSecretReferenceARM, got %T", armInput)
	}

	// Set property ‘SecretUrl’:
	if typedInput.SecretUrl != nil {
		secretUrl := *typedInput.SecretUrl
		reference.SecretUrl = &secretUrl
	}

	// Set property ‘SourceVault’:
	if typedInput.SourceVault != nil {
		var sourceVault1 SourceVault
		err := sourceVault1.PopulateFromARM(owner, *typedInput.SourceVault)
		if err != nil {
			return err
		}
		sourceVault := sourceVault1
		reference.SourceVault = &sourceVault
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndSecretReference populates our KeyVaultAndSecretReference from the provided source KeyVaultAndSecretReference
func (reference *KeyVaultAndSecretReference) AssignPropertiesFromKeyVaultAndSecretReference(source *alpha20200930s.KeyVaultAndSecretReference) error {

	// SecretUrl
	reference.SecretUrl = genruntime.ClonePointerToString(source.SecretUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault
		err := sourceVault.AssignPropertiesFromSourceVault(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVault() to populate field SourceVault")
		}
		reference.SourceVault = &sourceVault
	} else {
		reference.SourceVault = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndSecretReference populates the provided destination KeyVaultAndSecretReference from our KeyVaultAndSecretReference
func (reference *KeyVaultAndSecretReference) AssignPropertiesToKeyVaultAndSecretReference(destination *alpha20200930s.KeyVaultAndSecretReference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecretUrl
	destination.SecretUrl = genruntime.ClonePointerToString(reference.SecretUrl)

	// SourceVault
	if reference.SourceVault != nil {
		var sourceVault alpha20200930s.SourceVault
		err := reference.SourceVault.AssignPropertiesToSourceVault(&sourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSourceVault() to populate field SourceVault")
		}
		destination.SourceVault = &sourceVault
	} else {
		destination.SourceVault = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of KeyVaultAndSecretReference_Status. Use v1beta20200930.KeyVaultAndSecretReference_Status instead
type KeyVaultAndSecretReference_Status struct {
	SecretUrl   *string             `json:"secretUrl,omitempty"`
	SourceVault *SourceVault_Status `json:"sourceVault,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultAndSecretReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndSecretReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndSecretReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndSecretReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndSecretReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndSecretReference_StatusARM, got %T", armInput)
	}

	// Set property ‘SecretUrl’:
	if typedInput.SecretUrl != nil {
		secretUrl := *typedInput.SecretUrl
		reference.SecretUrl = &secretUrl
	}

	// Set property ‘SourceVault’:
	if typedInput.SourceVault != nil {
		var sourceVault1 SourceVault_Status
		err := sourceVault1.PopulateFromARM(owner, *typedInput.SourceVault)
		if err != nil {
			return err
		}
		sourceVault := sourceVault1
		reference.SourceVault = &sourceVault
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndSecretReferenceStatus populates our KeyVaultAndSecretReference_Status from the provided source KeyVaultAndSecretReference_Status
func (reference *KeyVaultAndSecretReference_Status) AssignPropertiesFromKeyVaultAndSecretReferenceStatus(source *alpha20200930s.KeyVaultAndSecretReference_Status) error {

	// SecretUrl
	reference.SecretUrl = genruntime.ClonePointerToString(source.SecretUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault_Status
		err := sourceVault.AssignPropertiesFromSourceVaultStatus(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVaultStatus() to populate field SourceVault")
		}
		reference.SourceVault = &sourceVault
	} else {
		reference.SourceVault = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndSecretReferenceStatus populates the provided destination KeyVaultAndSecretReference_Status from our KeyVaultAndSecretReference_Status
func (reference *KeyVaultAndSecretReference_Status) AssignPropertiesToKeyVaultAndSecretReferenceStatus(destination *alpha20200930s.KeyVaultAndSecretReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecretUrl
	destination.SecretUrl = genruntime.ClonePointerToString(reference.SecretUrl)

	// SourceVault
	if reference.SourceVault != nil {
		var sourceVault alpha20200930s.SourceVault_Status
		err := reference.SourceVault.AssignPropertiesToSourceVaultStatus(&sourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSourceVaultStatus() to populate field SourceVault")
		}
		destination.SourceVault = &sourceVault
	} else {
		destination.SourceVault = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of SourceVault. Use v1beta20200930.SourceVault instead
type SourceVault struct {
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &SourceVault{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (vault *SourceVault) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if vault == nil {
		return nil, nil
	}
	var result SourceVaultARM

	// Set property ‘Id’:
	if vault.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*vault.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (vault *SourceVault) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SourceVaultARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (vault *SourceVault) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(SourceVaultARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SourceVaultARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSourceVault populates our SourceVault from the provided source SourceVault
func (vault *SourceVault) AssignPropertiesFromSourceVault(source *alpha20200930s.SourceVault) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		vault.Reference = &reference
	} else {
		vault.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSourceVault populates the provided destination SourceVault from our SourceVault
func (vault *SourceVault) AssignPropertiesToSourceVault(destination *alpha20200930s.SourceVault) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if vault.Reference != nil {
		reference := vault.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Deprecated version of SourceVault_Status. Use v1beta20200930.SourceVault_Status instead
type SourceVault_Status struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SourceVault_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (vault *SourceVault_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SourceVault_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (vault *SourceVault_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SourceVault_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SourceVault_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		vault.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSourceVaultStatus populates our SourceVault_Status from the provided source SourceVault_Status
func (vault *SourceVault_Status) AssignPropertiesFromSourceVaultStatus(source *alpha20200930s.SourceVault_Status) error {

	// Id
	vault.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSourceVaultStatus populates the provided destination SourceVault_Status from our SourceVault_Status
func (vault *SourceVault_Status) AssignPropertiesToSourceVaultStatus(destination *alpha20200930s.SourceVault_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(vault.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Disk{}, &DiskList{})
}
