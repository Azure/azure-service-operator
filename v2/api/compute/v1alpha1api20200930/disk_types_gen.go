// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200930

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20200930storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /compute/resource-manager/Microsoft.Compute/stable/2020-09-30/disk.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}
type Disk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Disks_SPEC  `json:"spec,omitempty"`
	Status            Disk_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Disk{}

// GetConditions returns the conditions of the resource
func (disk *Disk) GetConditions() conditions.Conditions {
	return disk.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (disk *Disk) SetConditions(conditions conditions.Conditions) {
	disk.Status.Conditions = conditions
}

var _ conversion.Convertible = &Disk{}

// ConvertFrom populates our Disk from the provided hub Disk
func (disk *Disk) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200930storage.Disk)
	if !ok {
		return fmt.Errorf("expected storage:compute/v1alpha1api20200930storage/Disk but received %T instead", hub)
	}

	return disk.AssignPropertiesFromDisk(source)
}

// ConvertTo populates the provided hub Disk from our Disk
func (disk *Disk) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200930storage.Disk)
	if !ok {
		return fmt.Errorf("expected storage:compute/v1alpha1api20200930storage/Disk but received %T instead", hub)
	}

	return disk.AssignPropertiesToDisk(destination)
}

// +kubebuilder:webhook:path=/mutate-compute-azure-com-v1alpha1api20200930-disk,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=disks,verbs=create;update,versions=v1alpha1api20200930,name=default.v1alpha1api20200930.disks.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Disk{}

// Default applies defaults to the Disk resource
func (disk *Disk) Default() {
	disk.defaultImpl()
	var temp interface{} = disk
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (disk *Disk) defaultAzureName() {
	if disk.Spec.AzureName == "" {
		disk.Spec.AzureName = disk.Name
	}
}

// defaultImpl applies the code generated defaults to the Disk resource
func (disk *Disk) defaultImpl() { disk.defaultAzureName() }

var _ genruntime.KubernetesResource = &Disk{}

// AzureName returns the Azure name of the resource
func (disk *Disk) AzureName() string {
	return disk.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-09-30"
func (disk Disk) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (disk *Disk) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (disk *Disk) GetSpec() genruntime.ConvertibleSpec {
	return &disk.Spec
}

// GetStatus returns the status of this resource
func (disk *Disk) GetStatus() genruntime.ConvertibleStatus {
	return &disk.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (disk *Disk) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (disk *Disk) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Disk_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (disk *Disk) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(disk.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  disk.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (disk *Disk) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Disk_Status); ok {
		disk.Status = *st
		return nil
	}

	// Convert status to required version
	var st Disk_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	disk.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-compute-azure-com-v1alpha1api20200930-disk,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=disks,verbs=create;update,versions=v1alpha1api20200930,name=validate.v1alpha1api20200930.disks.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Disk{}

// ValidateCreate validates the creation of the resource
func (disk *Disk) ValidateCreate() error {
	validations := disk.createValidations()
	var temp interface{} = disk
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (disk *Disk) ValidateDelete() error {
	validations := disk.deleteValidations()
	var temp interface{} = disk
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (disk *Disk) ValidateUpdate(old runtime.Object) error {
	validations := disk.updateValidations()
	var temp interface{} = disk
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (disk *Disk) createValidations() []func() error {
	return []func() error{disk.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (disk *Disk) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (disk *Disk) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return disk.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (disk *Disk) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&disk.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromDisk populates our Disk from the provided source Disk
func (disk *Disk) AssignPropertiesFromDisk(source *v1alpha1api20200930storage.Disk) error {

	// ObjectMeta
	disk.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Disks_SPEC
	err := spec.AssignPropertiesFromDisks_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDisks_SPEC() to populate field Spec")
	}
	disk.Spec = spec

	// Status
	var status Disk_Status
	err = status.AssignPropertiesFromDisk_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDisk_Status() to populate field Status")
	}
	disk.Status = status

	// No error
	return nil
}

// AssignPropertiesToDisk populates the provided destination Disk from our Disk
func (disk *Disk) AssignPropertiesToDisk(destination *v1alpha1api20200930storage.Disk) error {

	// ObjectMeta
	destination.ObjectMeta = *disk.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200930storage.Disks_SPEC
	err := disk.Spec.AssignPropertiesToDisks_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDisks_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20200930storage.Disk_Status
	err = disk.Status.AssignPropertiesToDisk_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDisk_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (disk *Disk) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: disk.Spec.OriginalVersion(),
		Kind:    "Disk",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /compute/resource-manager/Microsoft.Compute/stable/2020-09-30/disk.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}
type DiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Disk `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-09-30"}
type APIVersion string

const APIVersionValue = APIVersion("2020-09-30")

type Disk_Status struct {
	//BurstingEnabled: Set to true to enable bursting beyond the provisioned
	//performance target of the disk. Bursting is disabled by default. Does not apply
	//to Ultra disks.
	BurstingEnabled *bool `json:"burstingEnabled,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreationData: Disk source information. CreationData information cannot be
	//changed after the disk has been created.
	CreationData *CreationData_Status `json:"creationData,omitempty"`

	//DiskAccessId: ARM id of the DiskAccess resource for using private endpoints on
	//disks.
	DiskAccessId *string `json:"diskAccessId,omitempty"`

	//DiskIOPSReadOnly: The total number of IOPS that will be allowed across all VMs
	//mounting the shared disk as ReadOnly. One operation can transfer between 4k and
	//256k bytes.
	DiskIOPSReadOnly *int `json:"diskIOPSReadOnly,omitempty"`

	//DiskIOPSReadWrite: The number of IOPS allowed for this disk; only settable for
	//UltraSSD disks. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadWrite *int `json:"diskIOPSReadWrite,omitempty"`

	//DiskMBpsReadOnly: The total throughput (MBps) that will be allowed across all
	//VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per
	//second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int `json:"diskMBpsReadOnly,omitempty"`

	//DiskMBpsReadWrite: The bandwidth allowed for this disk; only settable for
	//UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO
	//notation, of powers of 10.
	DiskMBpsReadWrite *int `json:"diskMBpsReadWrite,omitempty"`

	//DiskSizeBytes: The size of the disk in bytes. This field is read only.
	DiskSizeBytes *int `json:"diskSizeBytes,omitempty"`

	//DiskSizeGB: If creationData.createOption is Empty, this field is mandatory and
	//it indicates the size of the disk to create. If this field is present for
	//updates or creation with other options, it indicates a resize. Resizes are only
	//allowed if the disk is not attached to a running VM, and can only increase the
	//disk's size.
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//DiskState: The state of the disk.
	DiskState *DiskState_Status `json:"diskState,omitempty"`

	//Encryption: Encryption property can be used to encrypt data at rest with
	//customer managed keys or platform managed keys.
	Encryption *Encryption_Status `json:"encryption,omitempty"`

	//EncryptionSettingsCollection: Encryption settings collection used for Azure Disk
	//Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection_Status `json:"encryptionSettingsCollection,omitempty"`

	//ExtendedLocation: The extended location where the disk will be created. Extended
	//location cannot be changed.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//HyperVGeneration: The hypervisor generation of the Virtual Machine. Applicable
	//to OS disks only.
	HyperVGeneration *DiskProperties_HyperVGeneration_Status `json:"hyperVGeneration,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Location: Resource location
	Location *string `json:"location,omitempty"`

	//ManagedBy: A relative URI containing the ID of the VM that has the disk attached.
	ManagedBy *string `json:"managedBy,omitempty"`

	//ManagedByExtended: List of relative URIs containing the IDs of the VMs that have
	//the disk attached. maxShares should be set to a value greater than one for disks
	//to allow attaching them to multiple VMs.
	ManagedByExtended []string `json:"managedByExtended,omitempty"`

	//MaxShares: The maximum number of VMs that can attach to the disk at the same
	//time. Value greater than one indicates a disk that can be mounted on multiple
	//VMs at the same time.
	MaxShares *int `json:"maxShares,omitempty"`

	//Name: Resource name
	Name                *string                     `json:"name,omitempty"`
	NetworkAccessPolicy *NetworkAccessPolicy_Status `json:"networkAccessPolicy,omitempty"`

	//OsType: The Operating System type.
	OsType *DiskProperties_OsType_Status `json:"osType,omitempty"`

	//ProvisioningState: The disk provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//PurchasePlan: Purchase plan information for the the image from which the OS disk
	//was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer,
	//product: WindowsServer}
	PurchasePlan *PurchasePlan_Status `json:"purchasePlan,omitempty"`

	//ShareInfo: Details of the list of all VMs that have the disk attached. maxShares
	//should be set to a value greater than one for disks to allow attaching them to
	//multiple VMs.
	ShareInfo []ShareInfoElement_Status `json:"shareInfo,omitempty"`
	Sku       *DiskSku_Status           `json:"sku,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//Tier: Performance tier of the disk (e.g, P4, S10) as described here:
	//https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply
	//to Ultra disks.
	Tier *string `json:"tier,omitempty"`

	//TimeCreated: The time when the disk was created.
	TimeCreated *string `json:"timeCreated,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//UniqueId: Unique Guid identifying the resource.
	UniqueId *string `json:"uniqueId,omitempty"`

	//Zones: The Logical zone list for Disk.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Disk_Status{}

// ConvertStatusFrom populates our Disk_Status from the provided source
func (disk *Disk_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20200930storage.Disk_Status)
	if ok {
		// Populate our instance from source
		return disk.AssignPropertiesFromDisk_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200930storage.Disk_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = disk.AssignPropertiesFromDisk_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Disk_Status
func (disk *Disk_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20200930storage.Disk_Status)
	if ok {
		// Populate destination from our instance
		return disk.AssignPropertiesToDisk_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200930storage.Disk_Status{}
	err := disk.AssignPropertiesToDisk_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Disk_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *Disk_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Disk_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *Disk_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Disk_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Disk_StatusARM, got %T", armInput)
	}

	// Set property ‘BurstingEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BurstingEnabled != nil {
			burstingEnabled := *typedInput.Properties.BurstingEnabled
			disk.BurstingEnabled = &burstingEnabled
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		var temp CreationData_Status
		var temp1 CreationData_Status
		err := temp1.PopulateFromARM(owner, typedInput.Properties.CreationData)
		if err != nil {
			return err
		}
		temp = temp1
		disk.CreationData = &temp
	}

	// Set property ‘DiskAccessId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskAccessId != nil {
			diskAccessId := *typedInput.Properties.DiskAccessId
			disk.DiskAccessId = &diskAccessId
		}
	}

	// Set property ‘DiskIOPSReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadOnly != nil {
			diskIOPSReadOnly := *typedInput.Properties.DiskIOPSReadOnly
			disk.DiskIOPSReadOnly = &diskIOPSReadOnly
		}
	}

	// Set property ‘DiskIOPSReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadWrite != nil {
			diskIOPSReadWrite := *typedInput.Properties.DiskIOPSReadWrite
			disk.DiskIOPSReadWrite = &diskIOPSReadWrite
		}
	}

	// Set property ‘DiskMBpsReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadOnly != nil {
			diskMBpsReadOnly := *typedInput.Properties.DiskMBpsReadOnly
			disk.DiskMBpsReadOnly = &diskMBpsReadOnly
		}
	}

	// Set property ‘DiskMBpsReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadWrite != nil {
			diskMBpsReadWrite := *typedInput.Properties.DiskMBpsReadWrite
			disk.DiskMBpsReadWrite = &diskMBpsReadWrite
		}
	}

	// Set property ‘DiskSizeBytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeBytes != nil {
			diskSizeBytes := *typedInput.Properties.DiskSizeBytes
			disk.DiskSizeBytes = &diskSizeBytes
		}
	}

	// Set property ‘DiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeGB != nil {
			diskSizeGB := *typedInput.Properties.DiskSizeGB
			disk.DiskSizeGB = &diskSizeGB
		}
	}

	// Set property ‘DiskState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskState != nil {
			diskState := *typedInput.Properties.DiskState
			disk.DiskState = &diskState
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			disk.Encryption = &encryption
		}
	}

	// Set property ‘EncryptionSettingsCollection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EncryptionSettingsCollection != nil {
			var encryptionSettingsCollection1 EncryptionSettingsCollection_Status
			err := encryptionSettingsCollection1.PopulateFromARM(owner, *typedInput.Properties.EncryptionSettingsCollection)
			if err != nil {
				return err
			}
			encryptionSettingsCollection := encryptionSettingsCollection1
			disk.EncryptionSettingsCollection = &encryptionSettingsCollection
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		disk.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperVGeneration != nil {
			hyperVGeneration := *typedInput.Properties.HyperVGeneration
			disk.HyperVGeneration = &hyperVGeneration
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		disk.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		disk.Location = &location
	}

	// Set property ‘ManagedBy’:
	if typedInput.ManagedBy != nil {
		managedBy := *typedInput.ManagedBy
		disk.ManagedBy = &managedBy
	}

	// Set property ‘ManagedByExtended’:
	for _, item := range typedInput.ManagedByExtended {
		disk.ManagedByExtended = append(disk.ManagedByExtended, item)
	}

	// Set property ‘MaxShares’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxShares != nil {
			maxShares := *typedInput.Properties.MaxShares
			disk.MaxShares = &maxShares
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		disk.Name = &name
	}

	// Set property ‘NetworkAccessPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAccessPolicy != nil {
			networkAccessPolicy := *typedInput.Properties.NetworkAccessPolicy
			disk.NetworkAccessPolicy = &networkAccessPolicy
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			disk.OsType = &osType
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			disk.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PurchasePlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PurchasePlan != nil {
			var purchasePlan1 PurchasePlan_Status
			err := purchasePlan1.PopulateFromARM(owner, *typedInput.Properties.PurchasePlan)
			if err != nil {
				return err
			}
			purchasePlan := purchasePlan1
			disk.PurchasePlan = &purchasePlan
		}
	}

	// Set property ‘ShareInfo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ShareInfo {
			var item1 ShareInfoElement_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			disk.ShareInfo = append(disk.ShareInfo, item1)
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 DiskSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		disk.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		disk.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			disk.Tags[key] = value
		}
	}

	// Set property ‘Tier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tier != nil {
			tier := *typedInput.Properties.Tier
			disk.Tier = &tier
		}
	}

	// Set property ‘TimeCreated’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TimeCreated != nil {
			timeCreated := *typedInput.Properties.TimeCreated
			disk.TimeCreated = &timeCreated
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		disk.Type = &typeVar
	}

	// Set property ‘UniqueId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UniqueId != nil {
			uniqueId := *typedInput.Properties.UniqueId
			disk.UniqueId = &uniqueId
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		disk.Zones = append(disk.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromDisk_Status populates our Disk_Status from the provided source Disk_Status
func (disk *Disk_Status) AssignPropertiesFromDisk_Status(source *v1alpha1api20200930storage.Disk_Status) error {

	// BurstingEnabled
	if source.BurstingEnabled != nil {
		burstingEnabled := *source.BurstingEnabled
		disk.BurstingEnabled = &burstingEnabled
	} else {
		disk.BurstingEnabled = nil
	}

	// Conditions
	disk.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationData
	if source.CreationData != nil {
		var creationDatum CreationData_Status
		err := creationDatum.AssignPropertiesFromCreationData_Status(source.CreationData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreationData_Status() to populate field CreationData")
		}
		disk.CreationData = &creationDatum
	} else {
		disk.CreationData = nil
	}

	// DiskAccessId
	disk.DiskAccessId = genruntime.ClonePointerToString(source.DiskAccessId)

	// DiskIOPSReadOnly
	disk.DiskIOPSReadOnly = genruntime.ClonePointerToInt(source.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	disk.DiskIOPSReadWrite = genruntime.ClonePointerToInt(source.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	disk.DiskMBpsReadOnly = genruntime.ClonePointerToInt(source.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	disk.DiskMBpsReadWrite = genruntime.ClonePointerToInt(source.DiskMBpsReadWrite)

	// DiskSizeBytes
	disk.DiskSizeBytes = genruntime.ClonePointerToInt(source.DiskSizeBytes)

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// DiskState
	if source.DiskState != nil {
		diskState := DiskState_Status(*source.DiskState)
		disk.DiskState = &diskState
	} else {
		disk.DiskState = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryption_Status(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption_Status() to populate field Encryption")
		}
		disk.Encryption = &encryption
	} else {
		disk.Encryption = nil
	}

	// EncryptionSettingsCollection
	if source.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection EncryptionSettingsCollection_Status
		err := encryptionSettingsCollection.AssignPropertiesFromEncryptionSettingsCollection_Status(source.EncryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsCollection_Status() to populate field EncryptionSettingsCollection")
		}
		disk.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		disk.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Status(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Status() to populate field ExtendedLocation")
		}
		disk.ExtendedLocation = &extendedLocation
	} else {
		disk.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := DiskProperties_HyperVGeneration_Status(*source.HyperVGeneration)
		disk.HyperVGeneration = &hyperVGeneration
	} else {
		disk.HyperVGeneration = nil
	}

	// Id
	disk.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	disk.Location = genruntime.ClonePointerToString(source.Location)

	// ManagedBy
	disk.ManagedBy = genruntime.ClonePointerToString(source.ManagedBy)

	// ManagedByExtended
	disk.ManagedByExtended = genruntime.CloneSliceOfString(source.ManagedByExtended)

	// MaxShares
	disk.MaxShares = genruntime.ClonePointerToInt(source.MaxShares)

	// Name
	disk.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkAccessPolicy
	if source.NetworkAccessPolicy != nil {
		networkAccessPolicy := NetworkAccessPolicy_Status(*source.NetworkAccessPolicy)
		disk.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		disk.NetworkAccessPolicy = nil
	}

	// OsType
	if source.OsType != nil {
		osType := DiskProperties_OsType_Status(*source.OsType)
		disk.OsType = &osType
	} else {
		disk.OsType = nil
	}

	// ProvisioningState
	disk.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PurchasePlan
	if source.PurchasePlan != nil {
		var purchasePlan PurchasePlan_Status
		err := purchasePlan.AssignPropertiesFromPurchasePlan_Status(source.PurchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPurchasePlan_Status() to populate field PurchasePlan")
		}
		disk.PurchasePlan = &purchasePlan
	} else {
		disk.PurchasePlan = nil
	}

	// ShareInfo
	if source.ShareInfo != nil {
		shareInfoList := make([]ShareInfoElement_Status, len(source.ShareInfo))
		for shareInfoIndex, shareInfoItem := range source.ShareInfo {
			// Shadow the loop variable to avoid aliasing
			shareInfoItem := shareInfoItem
			var shareInfo ShareInfoElement_Status
			err := shareInfo.AssignPropertiesFromShareInfoElement_Status(&shareInfoItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromShareInfoElement_Status() to populate field ShareInfo")
			}
			shareInfoList[shareInfoIndex] = shareInfo
		}
		disk.ShareInfo = shareInfoList
	} else {
		disk.ShareInfo = nil
	}

	// Sku
	if source.Sku != nil {
		var sku DiskSku_Status
		err := sku.AssignPropertiesFromDiskSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskSku_Status() to populate field Sku")
		}
		disk.Sku = &sku
	} else {
		disk.Sku = nil
	}

	// Tags
	disk.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tier
	disk.Tier = genruntime.ClonePointerToString(source.Tier)

	// TimeCreated
	disk.TimeCreated = genruntime.ClonePointerToString(source.TimeCreated)

	// Type
	disk.Type = genruntime.ClonePointerToString(source.Type)

	// UniqueId
	disk.UniqueId = genruntime.ClonePointerToString(source.UniqueId)

	// Zones
	disk.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToDisk_Status populates the provided destination Disk_Status from our Disk_Status
func (disk *Disk_Status) AssignPropertiesToDisk_Status(destination *v1alpha1api20200930storage.Disk_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BurstingEnabled
	if disk.BurstingEnabled != nil {
		burstingEnabled := *disk.BurstingEnabled
		destination.BurstingEnabled = &burstingEnabled
	} else {
		destination.BurstingEnabled = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(disk.Conditions)

	// CreationData
	if disk.CreationData != nil {
		var creationDatum v1alpha1api20200930storage.CreationData_Status
		err := disk.CreationData.AssignPropertiesToCreationData_Status(&creationDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreationData_Status() to populate field CreationData")
		}
		destination.CreationData = &creationDatum
	} else {
		destination.CreationData = nil
	}

	// DiskAccessId
	destination.DiskAccessId = genruntime.ClonePointerToString(disk.DiskAccessId)

	// DiskIOPSReadOnly
	destination.DiskIOPSReadOnly = genruntime.ClonePointerToInt(disk.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	destination.DiskIOPSReadWrite = genruntime.ClonePointerToInt(disk.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	destination.DiskMBpsReadOnly = genruntime.ClonePointerToInt(disk.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	destination.DiskMBpsReadWrite = genruntime.ClonePointerToInt(disk.DiskMBpsReadWrite)

	// DiskSizeBytes
	destination.DiskSizeBytes = genruntime.ClonePointerToInt(disk.DiskSizeBytes)

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// DiskState
	if disk.DiskState != nil {
		diskState := string(*disk.DiskState)
		destination.DiskState = &diskState
	} else {
		destination.DiskState = nil
	}

	// Encryption
	if disk.Encryption != nil {
		var encryption v1alpha1api20200930storage.Encryption_Status
		err := disk.Encryption.AssignPropertiesToEncryption_Status(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption_Status() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// EncryptionSettingsCollection
	if disk.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection v1alpha1api20200930storage.EncryptionSettingsCollection_Status
		err := disk.EncryptionSettingsCollection.AssignPropertiesToEncryptionSettingsCollection_Status(&encryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsCollection_Status() to populate field EncryptionSettingsCollection")
		}
		destination.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		destination.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if disk.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20200930storage.ExtendedLocation_Status
		err := disk.ExtendedLocation.AssignPropertiesToExtendedLocation_Status(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Status() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if disk.HyperVGeneration != nil {
		hyperVGeneration := string(*disk.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(disk.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(disk.Location)

	// ManagedBy
	destination.ManagedBy = genruntime.ClonePointerToString(disk.ManagedBy)

	// ManagedByExtended
	destination.ManagedByExtended = genruntime.CloneSliceOfString(disk.ManagedByExtended)

	// MaxShares
	destination.MaxShares = genruntime.ClonePointerToInt(disk.MaxShares)

	// Name
	destination.Name = genruntime.ClonePointerToString(disk.Name)

	// NetworkAccessPolicy
	if disk.NetworkAccessPolicy != nil {
		networkAccessPolicy := string(*disk.NetworkAccessPolicy)
		destination.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		destination.NetworkAccessPolicy = nil
	}

	// OsType
	if disk.OsType != nil {
		osType := string(*disk.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(disk.ProvisioningState)

	// PurchasePlan
	if disk.PurchasePlan != nil {
		var purchasePlan v1alpha1api20200930storage.PurchasePlan_Status
		err := disk.PurchasePlan.AssignPropertiesToPurchasePlan_Status(&purchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPurchasePlan_Status() to populate field PurchasePlan")
		}
		destination.PurchasePlan = &purchasePlan
	} else {
		destination.PurchasePlan = nil
	}

	// ShareInfo
	if disk.ShareInfo != nil {
		shareInfoList := make([]v1alpha1api20200930storage.ShareInfoElement_Status, len(disk.ShareInfo))
		for shareInfoIndex, shareInfoItem := range disk.ShareInfo {
			// Shadow the loop variable to avoid aliasing
			shareInfoItem := shareInfoItem
			var shareInfo v1alpha1api20200930storage.ShareInfoElement_Status
			err := shareInfoItem.AssignPropertiesToShareInfoElement_Status(&shareInfo)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToShareInfoElement_Status() to populate field ShareInfo")
			}
			shareInfoList[shareInfoIndex] = shareInfo
		}
		destination.ShareInfo = shareInfoList
	} else {
		destination.ShareInfo = nil
	}

	// Sku
	if disk.Sku != nil {
		var sku v1alpha1api20200930storage.DiskSku_Status
		err := disk.Sku.AssignPropertiesToDiskSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(disk.Tags)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(disk.Tier)

	// TimeCreated
	destination.TimeCreated = genruntime.ClonePointerToString(disk.TimeCreated)

	// Type
	destination.Type = genruntime.ClonePointerToString(disk.Type)

	// UniqueId
	destination.UniqueId = genruntime.ClonePointerToString(disk.UniqueId)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(disk.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Disks_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BurstingEnabled: Set to true to enable bursting beyond the provisioned
	//performance target of the disk. Bursting is disabled by default. Does not apply
	//to Ultra disks.
	BurstingEnabled *bool `json:"burstingEnabled,omitempty"`

	//CreationData: Disk source information. CreationData information cannot be
	//changed after the disk has been created.
	CreationData *CreationData_Spec `json:"creationData,omitempty"`

	//DiskAccessReference: ARM id of the DiskAccess resource for using private
	//endpoints on disks.
	DiskAccessReference *genruntime.ResourceReference `armReference:"DiskAccessId" json:"diskAccessReference,omitempty"`

	//DiskIOPSReadOnly: The total number of IOPS that will be allowed across all VMs
	//mounting the shared disk as ReadOnly. One operation can transfer between 4k and
	//256k bytes.
	DiskIOPSReadOnly *int `json:"diskIOPSReadOnly,omitempty"`

	//DiskIOPSReadWrite: The number of IOPS allowed for this disk; only settable for
	//UltraSSD disks. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadWrite *int `json:"diskIOPSReadWrite,omitempty"`

	//DiskMBpsReadOnly: The total throughput (MBps) that will be allowed across all
	//VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per
	//second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int `json:"diskMBpsReadOnly,omitempty"`

	//DiskMBpsReadWrite: The bandwidth allowed for this disk; only settable for
	//UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO
	//notation, of powers of 10.
	DiskMBpsReadWrite *int `json:"diskMBpsReadWrite,omitempty"`

	//DiskSizeGB: If creationData.createOption is Empty, this field is mandatory and
	//it indicates the size of the disk to create. If this field is present for
	//updates or creation with other options, it indicates a resize. Resizes are only
	//allowed if the disk is not attached to a running VM, and can only increase the
	//disk's size.
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//DiskState: The state of the disk.
	DiskState *DiskState_Spec `json:"diskState,omitempty"`

	//Encryption: Encryption property can be used to encrypt data at rest with
	//customer managed keys or platform managed keys.
	Encryption *Encryption_Spec `json:"encryption,omitempty"`

	//EncryptionSettingsCollection: Encryption settings collection used for Azure Disk
	//Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection_Spec `json:"encryptionSettingsCollection,omitempty"`

	//ExtendedLocation: The extended location where the disk will be created. Extended
	//location cannot be changed.
	ExtendedLocation *ExtendedLocation_Spec `json:"extendedLocation,omitempty"`

	//HyperVGeneration: The hypervisor generation of the Virtual Machine. Applicable
	//to OS disks only.
	HyperVGeneration *DiskProperties_HyperVGeneration_Spec `json:"hyperVGeneration,omitempty"`

	// +kubebuilder:validation:Required
	//Location: Resource location
	Location string `json:"location"`

	//MaxShares: The maximum number of VMs that can attach to the disk at the same
	//time. Value greater than one indicates a disk that can be mounted on multiple
	//VMs at the same time.
	MaxShares           *int                      `json:"maxShares,omitempty"`
	NetworkAccessPolicy *NetworkAccessPolicy_Spec `json:"networkAccessPolicy,omitempty"`

	//OsType: The Operating System type.
	OsType *DiskProperties_OsType_Spec `json:"osType,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PurchasePlan: Purchase plan information for the the image from which the OS disk
	//was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer,
	//product: WindowsServer}
	PurchasePlan *PurchasePlan_Spec `json:"purchasePlan,omitempty"`
	Sku          *DiskSku_Spec      `json:"sku,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//Tier: Performance tier of the disk (e.g, P4, S10) as described here:
	//https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply
	//to Ultra disks.
	Tier *string `json:"tier,omitempty"`

	//Zones: The Logical zone list for Disk.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &Disks_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *Disks_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result Disks_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘ExtendedLocation’:
	if spec.ExtendedLocation != nil {
		extendedLocationARM, err := (*spec.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocation_SpecARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	result.Location = spec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.BurstingEnabled != nil ||
		spec.CreationData != nil ||
		spec.DiskAccessReference != nil ||
		spec.DiskIOPSReadOnly != nil ||
		spec.DiskIOPSReadWrite != nil ||
		spec.DiskMBpsReadOnly != nil ||
		spec.DiskMBpsReadWrite != nil ||
		spec.DiskSizeGB != nil ||
		spec.DiskState != nil ||
		spec.Encryption != nil ||
		spec.EncryptionSettingsCollection != nil ||
		spec.HyperVGeneration != nil ||
		spec.MaxShares != nil ||
		spec.NetworkAccessPolicy != nil ||
		spec.OsType != nil ||
		spec.PurchasePlan != nil ||
		spec.Tier != nil {
		result.Properties = &DiskProperties_SpecARM{}
	}
	if spec.BurstingEnabled != nil {
		burstingEnabled := *spec.BurstingEnabled
		result.Properties.BurstingEnabled = &burstingEnabled
	}
	var temp CreationData_SpecARM
	tempARM, err := (*spec.CreationData).ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	temp = tempARM.(CreationData_SpecARM)
	result.Properties.CreationData = temp
	if spec.DiskAccessReference != nil {
		diskAccessIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*spec.DiskAccessReference)
		if err != nil {
			return nil, err
		}
		diskAccessId := diskAccessIdARMID
		result.Properties.DiskAccessId = &diskAccessId
	}
	if spec.DiskIOPSReadOnly != nil {
		diskIOPSReadOnly := *spec.DiskIOPSReadOnly
		result.Properties.DiskIOPSReadOnly = &diskIOPSReadOnly
	}
	if spec.DiskIOPSReadWrite != nil {
		diskIOPSReadWrite := *spec.DiskIOPSReadWrite
		result.Properties.DiskIOPSReadWrite = &diskIOPSReadWrite
	}
	if spec.DiskMBpsReadOnly != nil {
		diskMBpsReadOnly := *spec.DiskMBpsReadOnly
		result.Properties.DiskMBpsReadOnly = &diskMBpsReadOnly
	}
	if spec.DiskMBpsReadWrite != nil {
		diskMBpsReadWrite := *spec.DiskMBpsReadWrite
		result.Properties.DiskMBpsReadWrite = &diskMBpsReadWrite
	}
	if spec.DiskSizeGB != nil {
		diskSizeGB := *spec.DiskSizeGB
		result.Properties.DiskSizeGB = &diskSizeGB
	}
	if spec.DiskState != nil {
		diskState := *spec.DiskState
		result.Properties.DiskState = &diskState
	}
	if spec.Encryption != nil {
		encryptionARM, err := (*spec.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(Encryption_SpecARM)
		result.Properties.Encryption = &encryption
	}
	if spec.EncryptionSettingsCollection != nil {
		encryptionSettingsCollectionARM, err := (*spec.EncryptionSettingsCollection).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryptionSettingsCollection := encryptionSettingsCollectionARM.(EncryptionSettingsCollection_SpecARM)
		result.Properties.EncryptionSettingsCollection = &encryptionSettingsCollection
	}
	if spec.HyperVGeneration != nil {
		hyperVGeneration := *spec.HyperVGeneration
		result.Properties.HyperVGeneration = &hyperVGeneration
	}
	if spec.MaxShares != nil {
		maxShares := *spec.MaxShares
		result.Properties.MaxShares = &maxShares
	}
	if spec.NetworkAccessPolicy != nil {
		networkAccessPolicy := *spec.NetworkAccessPolicy
		result.Properties.NetworkAccessPolicy = &networkAccessPolicy
	}
	if spec.OsType != nil {
		osType := *spec.OsType
		result.Properties.OsType = &osType
	}
	if spec.PurchasePlan != nil {
		purchasePlanARM, err := (*spec.PurchasePlan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		purchasePlan := purchasePlanARM.(PurchasePlan_SpecARM)
		result.Properties.PurchasePlan = &purchasePlan
	}
	if spec.Tier != nil {
		tier := *spec.Tier
		result.Properties.Tier = &tier
	}

	// Set property ‘Sku’:
	if spec.Sku != nil {
		skuARM, err := (*spec.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(DiskSku_SpecARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range spec.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *Disks_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Disks_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *Disks_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Disks_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Disks_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BurstingEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BurstingEnabled != nil {
			burstingEnabled := *typedInput.Properties.BurstingEnabled
			spec.BurstingEnabled = &burstingEnabled
		}
	}

	// Set property ‘CreationData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		var temp CreationData_Spec
		var temp1 CreationData_Spec
		err := temp1.PopulateFromARM(owner, typedInput.Properties.CreationData)
		if err != nil {
			return err
		}
		temp = temp1
		spec.CreationData = &temp
	}

	// no assignment for property ‘DiskAccessReference’

	// Set property ‘DiskIOPSReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadOnly != nil {
			diskIOPSReadOnly := *typedInput.Properties.DiskIOPSReadOnly
			spec.DiskIOPSReadOnly = &diskIOPSReadOnly
		}
	}

	// Set property ‘DiskIOPSReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskIOPSReadWrite != nil {
			diskIOPSReadWrite := *typedInput.Properties.DiskIOPSReadWrite
			spec.DiskIOPSReadWrite = &diskIOPSReadWrite
		}
	}

	// Set property ‘DiskMBpsReadOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadOnly != nil {
			diskMBpsReadOnly := *typedInput.Properties.DiskMBpsReadOnly
			spec.DiskMBpsReadOnly = &diskMBpsReadOnly
		}
	}

	// Set property ‘DiskMBpsReadWrite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskMBpsReadWrite != nil {
			diskMBpsReadWrite := *typedInput.Properties.DiskMBpsReadWrite
			spec.DiskMBpsReadWrite = &diskMBpsReadWrite
		}
	}

	// Set property ‘DiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskSizeGB != nil {
			diskSizeGB := *typedInput.Properties.DiskSizeGB
			spec.DiskSizeGB = &diskSizeGB
		}
	}

	// Set property ‘DiskState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiskState != nil {
			diskState := *typedInput.Properties.DiskState
			spec.DiskState = &diskState
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Spec
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			spec.Encryption = &encryption
		}
	}

	// Set property ‘EncryptionSettingsCollection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EncryptionSettingsCollection != nil {
			var encryptionSettingsCollection1 EncryptionSettingsCollection_Spec
			err := encryptionSettingsCollection1.PopulateFromARM(owner, *typedInput.Properties.EncryptionSettingsCollection)
			if err != nil {
				return err
			}
			encryptionSettingsCollection := encryptionSettingsCollection1
			spec.EncryptionSettingsCollection = &encryptionSettingsCollection
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Spec
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		spec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperVGeneration != nil {
			hyperVGeneration := *typedInput.Properties.HyperVGeneration
			spec.HyperVGeneration = &hyperVGeneration
		}
	}

	// Set property ‘Location’:
	spec.Location = typedInput.Location

	// Set property ‘MaxShares’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxShares != nil {
			maxShares := *typedInput.Properties.MaxShares
			spec.MaxShares = &maxShares
		}
	}

	// Set property ‘NetworkAccessPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAccessPolicy != nil {
			networkAccessPolicy := *typedInput.Properties.NetworkAccessPolicy
			spec.NetworkAccessPolicy = &networkAccessPolicy
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			spec.OsType = &osType
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PurchasePlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PurchasePlan != nil {
			var purchasePlan1 PurchasePlan_Spec
			err := purchasePlan1.PopulateFromARM(owner, *typedInput.Properties.PurchasePlan)
			if err != nil {
				return err
			}
			purchasePlan := purchasePlan1
			spec.PurchasePlan = &purchasePlan
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 DiskSku_Spec
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		spec.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// Set property ‘Tier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tier != nil {
			tier := *typedInput.Properties.Tier
			spec.Tier = &tier
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		spec.Zones = append(spec.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Disks_SPEC{}

// ConvertSpecFrom populates our Disks_SPEC from the provided source
func (spec *Disks_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200930storage.Disks_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromDisks_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200930storage.Disks_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromDisks_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Disks_SPEC
func (spec *Disks_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200930storage.Disks_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToDisks_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200930storage.Disks_SPEC{}
	err := spec.AssignPropertiesToDisks_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDisks_SPEC populates our Disks_SPEC from the provided source Disks_SPEC
func (spec *Disks_SPEC) AssignPropertiesFromDisks_SPEC(source *v1alpha1api20200930storage.Disks_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// BurstingEnabled
	if source.BurstingEnabled != nil {
		burstingEnabled := *source.BurstingEnabled
		spec.BurstingEnabled = &burstingEnabled
	} else {
		spec.BurstingEnabled = nil
	}

	// CreationData
	if source.CreationData != nil {
		var creationDatum CreationData_Spec
		err := creationDatum.AssignPropertiesFromCreationData_Spec(source.CreationData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreationData_Spec() to populate field CreationData")
		}
		spec.CreationData = &creationDatum
	} else {
		spec.CreationData = nil
	}

	// DiskAccessReference
	if source.DiskAccessReference != nil {
		diskAccessReference := source.DiskAccessReference.Copy()
		spec.DiskAccessReference = &diskAccessReference
	} else {
		spec.DiskAccessReference = nil
	}

	// DiskIOPSReadOnly
	spec.DiskIOPSReadOnly = genruntime.ClonePointerToInt(source.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	spec.DiskIOPSReadWrite = genruntime.ClonePointerToInt(source.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	spec.DiskMBpsReadOnly = genruntime.ClonePointerToInt(source.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	spec.DiskMBpsReadWrite = genruntime.ClonePointerToInt(source.DiskMBpsReadWrite)

	// DiskSizeGB
	spec.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// DiskState
	if source.DiskState != nil {
		diskState := DiskState_Spec(*source.DiskState)
		spec.DiskState = &diskState
	} else {
		spec.DiskState = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Spec
		err := encryption.AssignPropertiesFromEncryption_Spec(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryption_Spec() to populate field Encryption")
		}
		spec.Encryption = &encryption
	} else {
		spec.Encryption = nil
	}

	// EncryptionSettingsCollection
	if source.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection EncryptionSettingsCollection_Spec
		err := encryptionSettingsCollection.AssignPropertiesFromEncryptionSettingsCollection_Spec(source.EncryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsCollection_Spec() to populate field EncryptionSettingsCollection")
		}
		spec.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		spec.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Spec
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Spec(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		spec.ExtendedLocation = &extendedLocation
	} else {
		spec.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := DiskProperties_HyperVGeneration_Spec(*source.HyperVGeneration)
		spec.HyperVGeneration = &hyperVGeneration
	} else {
		spec.HyperVGeneration = nil
	}

	// Location
	spec.Location = genruntime.GetOptionalStringValue(source.Location)

	// MaxShares
	spec.MaxShares = genruntime.ClonePointerToInt(source.MaxShares)

	// NetworkAccessPolicy
	if source.NetworkAccessPolicy != nil {
		networkAccessPolicy := NetworkAccessPolicy_Spec(*source.NetworkAccessPolicy)
		spec.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		spec.NetworkAccessPolicy = nil
	}

	// OsType
	if source.OsType != nil {
		osType := DiskProperties_OsType_Spec(*source.OsType)
		spec.OsType = &osType
	} else {
		spec.OsType = nil
	}

	// Owner
	spec.Owner = source.Owner.Copy()

	// PurchasePlan
	if source.PurchasePlan != nil {
		var purchasePlan PurchasePlan_Spec
		err := purchasePlan.AssignPropertiesFromPurchasePlan_Spec(source.PurchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPurchasePlan_Spec() to populate field PurchasePlan")
		}
		spec.PurchasePlan = &purchasePlan
	} else {
		spec.PurchasePlan = nil
	}

	// Sku
	if source.Sku != nil {
		var sku DiskSku_Spec
		err := sku.AssignPropertiesFromDiskSku_Spec(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskSku_Spec() to populate field Sku")
		}
		spec.Sku = &sku
	} else {
		spec.Sku = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tier
	spec.Tier = genruntime.ClonePointerToString(source.Tier)

	// Zones
	spec.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToDisks_SPEC populates the provided destination Disks_SPEC from our Disks_SPEC
func (spec *Disks_SPEC) AssignPropertiesToDisks_SPEC(destination *v1alpha1api20200930storage.Disks_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// BurstingEnabled
	if spec.BurstingEnabled != nil {
		burstingEnabled := *spec.BurstingEnabled
		destination.BurstingEnabled = &burstingEnabled
	} else {
		destination.BurstingEnabled = nil
	}

	// CreationData
	if spec.CreationData != nil {
		var creationDatum v1alpha1api20200930storage.CreationData_Spec
		err := spec.CreationData.AssignPropertiesToCreationData_Spec(&creationDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreationData_Spec() to populate field CreationData")
		}
		destination.CreationData = &creationDatum
	} else {
		destination.CreationData = nil
	}

	// DiskAccessReference
	if spec.DiskAccessReference != nil {
		diskAccessReference := spec.DiskAccessReference.Copy()
		destination.DiskAccessReference = &diskAccessReference
	} else {
		destination.DiskAccessReference = nil
	}

	// DiskIOPSReadOnly
	destination.DiskIOPSReadOnly = genruntime.ClonePointerToInt(spec.DiskIOPSReadOnly)

	// DiskIOPSReadWrite
	destination.DiskIOPSReadWrite = genruntime.ClonePointerToInt(spec.DiskIOPSReadWrite)

	// DiskMBpsReadOnly
	destination.DiskMBpsReadOnly = genruntime.ClonePointerToInt(spec.DiskMBpsReadOnly)

	// DiskMBpsReadWrite
	destination.DiskMBpsReadWrite = genruntime.ClonePointerToInt(spec.DiskMBpsReadWrite)

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(spec.DiskSizeGB)

	// DiskState
	if spec.DiskState != nil {
		diskState := string(*spec.DiskState)
		destination.DiskState = &diskState
	} else {
		destination.DiskState = nil
	}

	// Encryption
	if spec.Encryption != nil {
		var encryption v1alpha1api20200930storage.Encryption_Spec
		err := spec.Encryption.AssignPropertiesToEncryption_Spec(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryption_Spec() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// EncryptionSettingsCollection
	if spec.EncryptionSettingsCollection != nil {
		var encryptionSettingsCollection v1alpha1api20200930storage.EncryptionSettingsCollection_Spec
		err := spec.EncryptionSettingsCollection.AssignPropertiesToEncryptionSettingsCollection_Spec(&encryptionSettingsCollection)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsCollection_Spec() to populate field EncryptionSettingsCollection")
		}
		destination.EncryptionSettingsCollection = &encryptionSettingsCollection
	} else {
		destination.EncryptionSettingsCollection = nil
	}

	// ExtendedLocation
	if spec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20200930storage.ExtendedLocation_Spec
		err := spec.ExtendedLocation.AssignPropertiesToExtendedLocation_Spec(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if spec.HyperVGeneration != nil {
		hyperVGeneration := string(*spec.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Location
	location := spec.Location
	destination.Location = &location

	// MaxShares
	destination.MaxShares = genruntime.ClonePointerToInt(spec.MaxShares)

	// NetworkAccessPolicy
	if spec.NetworkAccessPolicy != nil {
		networkAccessPolicy := string(*spec.NetworkAccessPolicy)
		destination.NetworkAccessPolicy = &networkAccessPolicy
	} else {
		destination.NetworkAccessPolicy = nil
	}

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// OsType
	if spec.OsType != nil {
		osType := string(*spec.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Owner
	destination.Owner = spec.Owner.Copy()

	// PurchasePlan
	if spec.PurchasePlan != nil {
		var purchasePlan v1alpha1api20200930storage.PurchasePlan_Spec
		err := spec.PurchasePlan.AssignPropertiesToPurchasePlan_Spec(&purchasePlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPurchasePlan_Spec() to populate field PurchasePlan")
		}
		destination.PurchasePlan = &purchasePlan
	} else {
		destination.PurchasePlan = nil
	}

	// Sku
	if spec.Sku != nil {
		var sku v1alpha1api20200930storage.DiskSku_Spec
		err := spec.Sku.AssignPropertiesToDiskSku_Spec(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskSku_Spec() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(spec.Tier)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(spec.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *Disks_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *Disks_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type CreationData_Spec struct {
	// +kubebuilder:validation:Required
	//CreateOption: This enumerates the possible sources of a disk's creation.
	CreateOption CreationData_CreateOption_Spec `json:"createOption"`

	//GalleryImageReference: Required if creating from a Gallery Image. The id of the
	//ImageDiskReference will be the ARM id of the shared galley image version from
	//which to create a disk.
	GalleryImageReference *ImageDiskReference_Spec `json:"galleryImageReference,omitempty"`

	//ImageReference: Disk source information.
	ImageReference *ImageDiskReference_Spec `json:"imageReference,omitempty"`

	//LogicalSectorSize: Logical sector size in bytes for Ultra disks. Supported
	//values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int `json:"logicalSectorSize,omitempty"`

	//SourceResourceReference: If createOption is Copy, this is the ARM id of the
	//source snapshot or disk.
	SourceResourceReference *genruntime.ResourceReference `armReference:"SourceResourceId" json:"sourceResourceReference,omitempty"`

	//SourceUri: If createOption is Import, this is the URI of a blob to be imported
	//into a managed disk.
	SourceUri *string `json:"sourceUri,omitempty"`

	//StorageAccountId: Required if createOption is Import. The Azure Resource Manager
	//identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `json:"storageAccountId,omitempty"`

	//UploadSizeBytes: If createOption is Upload, this is the size of the contents of
	//the upload including the VHD footer. This value should be between 20972032 (20
	//MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes
	//for the VHD footer).
	UploadSizeBytes *int `json:"uploadSizeBytes,omitempty"`
}

var _ genruntime.ARMTransformer = &CreationData_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (data *CreationData_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if data == nil {
		return nil, nil
	}
	var result CreationData_SpecARM

	// Set property ‘CreateOption’:
	result.CreateOption = data.CreateOption

	// Set property ‘GalleryImageReference’:
	if data.GalleryImageReference != nil {
		galleryImageReferenceARM, err := (*data.GalleryImageReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		galleryImageReference := galleryImageReferenceARM.(ImageDiskReference_SpecARM)
		result.GalleryImageReference = &galleryImageReference
	}

	// Set property ‘ImageReference’:
	if data.ImageReference != nil {
		imageReferenceARM, err := (*data.ImageReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		imageReference := imageReferenceARM.(ImageDiskReference_SpecARM)
		result.ImageReference = &imageReference
	}

	// Set property ‘LogicalSectorSize’:
	if data.LogicalSectorSize != nil {
		logicalSectorSize := *data.LogicalSectorSize
		result.LogicalSectorSize = &logicalSectorSize
	}

	// Set property ‘SourceResourceId’:
	if data.SourceResourceReference != nil {
		sourceResourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*data.SourceResourceReference)
		if err != nil {
			return nil, err
		}
		sourceResourceReference := sourceResourceReferenceARMID
		result.SourceResourceId = &sourceResourceReference
	}

	// Set property ‘SourceUri’:
	if data.SourceUri != nil {
		sourceUri := *data.SourceUri
		result.SourceUri = &sourceUri
	}

	// Set property ‘StorageAccountId’:
	if data.StorageAccountId != nil {
		storageAccountId := *data.StorageAccountId
		result.StorageAccountId = &storageAccountId
	}

	// Set property ‘UploadSizeBytes’:
	if data.UploadSizeBytes != nil {
		uploadSizeBytes := *data.UploadSizeBytes
		result.UploadSizeBytes = &uploadSizeBytes
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *CreationData_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CreationData_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *CreationData_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CreationData_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CreationData_SpecARM, got %T", armInput)
	}

	// Set property ‘CreateOption’:
	data.CreateOption = typedInput.CreateOption

	// Set property ‘GalleryImageReference’:
	if typedInput.GalleryImageReference != nil {
		var galleryImageReference1 ImageDiskReference_Spec
		err := galleryImageReference1.PopulateFromARM(owner, *typedInput.GalleryImageReference)
		if err != nil {
			return err
		}
		galleryImageReference := galleryImageReference1
		data.GalleryImageReference = &galleryImageReference
	}

	// Set property ‘ImageReference’:
	if typedInput.ImageReference != nil {
		var imageReference1 ImageDiskReference_Spec
		err := imageReference1.PopulateFromARM(owner, *typedInput.ImageReference)
		if err != nil {
			return err
		}
		imageReference := imageReference1
		data.ImageReference = &imageReference
	}

	// Set property ‘LogicalSectorSize’:
	if typedInput.LogicalSectorSize != nil {
		logicalSectorSize := *typedInput.LogicalSectorSize
		data.LogicalSectorSize = &logicalSectorSize
	}

	// no assignment for property ‘SourceResourceReference’

	// Set property ‘SourceUri’:
	if typedInput.SourceUri != nil {
		sourceUri := *typedInput.SourceUri
		data.SourceUri = &sourceUri
	}

	// Set property ‘StorageAccountId’:
	if typedInput.StorageAccountId != nil {
		storageAccountId := *typedInput.StorageAccountId
		data.StorageAccountId = &storageAccountId
	}

	// Set property ‘UploadSizeBytes’:
	if typedInput.UploadSizeBytes != nil {
		uploadSizeBytes := *typedInput.UploadSizeBytes
		data.UploadSizeBytes = &uploadSizeBytes
	}

	// No error
	return nil
}

// AssignPropertiesFromCreationData_Spec populates our CreationData_Spec from the provided source CreationData_Spec
func (data *CreationData_Spec) AssignPropertiesFromCreationData_Spec(source *v1alpha1api20200930storage.CreationData_Spec) error {

	// CreateOption
	if source.CreateOption != nil {
		data.CreateOption = CreationData_CreateOption_Spec(*source.CreateOption)
	} else {
		data.CreateOption = ""
	}

	// GalleryImageReference
	if source.GalleryImageReference != nil {
		var galleryImageReference ImageDiskReference_Spec
		err := galleryImageReference.AssignPropertiesFromImageDiskReference_Spec(source.GalleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReference_Spec() to populate field GalleryImageReference")
		}
		data.GalleryImageReference = &galleryImageReference
	} else {
		data.GalleryImageReference = nil
	}

	// ImageReference
	if source.ImageReference != nil {
		var imageReference ImageDiskReference_Spec
		err := imageReference.AssignPropertiesFromImageDiskReference_Spec(source.ImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReference_Spec() to populate field ImageReference")
		}
		data.ImageReference = &imageReference
	} else {
		data.ImageReference = nil
	}

	// LogicalSectorSize
	data.LogicalSectorSize = genruntime.ClonePointerToInt(source.LogicalSectorSize)

	// SourceResourceReference
	if source.SourceResourceReference != nil {
		sourceResourceReference := source.SourceResourceReference.Copy()
		data.SourceResourceReference = &sourceResourceReference
	} else {
		data.SourceResourceReference = nil
	}

	// SourceUri
	data.SourceUri = genruntime.ClonePointerToString(source.SourceUri)

	// StorageAccountId
	data.StorageAccountId = genruntime.ClonePointerToString(source.StorageAccountId)

	// UploadSizeBytes
	data.UploadSizeBytes = genruntime.ClonePointerToInt(source.UploadSizeBytes)

	// No error
	return nil
}

// AssignPropertiesToCreationData_Spec populates the provided destination CreationData_Spec from our CreationData_Spec
func (data *CreationData_Spec) AssignPropertiesToCreationData_Spec(destination *v1alpha1api20200930storage.CreationData_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreateOption
	createOption := string(data.CreateOption)
	destination.CreateOption = &createOption

	// GalleryImageReference
	if data.GalleryImageReference != nil {
		var galleryImageReference v1alpha1api20200930storage.ImageDiskReference_Spec
		err := data.GalleryImageReference.AssignPropertiesToImageDiskReference_Spec(&galleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReference_Spec() to populate field GalleryImageReference")
		}
		destination.GalleryImageReference = &galleryImageReference
	} else {
		destination.GalleryImageReference = nil
	}

	// ImageReference
	if data.ImageReference != nil {
		var imageReference v1alpha1api20200930storage.ImageDiskReference_Spec
		err := data.ImageReference.AssignPropertiesToImageDiskReference_Spec(&imageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReference_Spec() to populate field ImageReference")
		}
		destination.ImageReference = &imageReference
	} else {
		destination.ImageReference = nil
	}

	// LogicalSectorSize
	destination.LogicalSectorSize = genruntime.ClonePointerToInt(data.LogicalSectorSize)

	// SourceResourceReference
	if data.SourceResourceReference != nil {
		sourceResourceReference := data.SourceResourceReference.Copy()
		destination.SourceResourceReference = &sourceResourceReference
	} else {
		destination.SourceResourceReference = nil
	}

	// SourceUri
	destination.SourceUri = genruntime.ClonePointerToString(data.SourceUri)

	// StorageAccountId
	destination.StorageAccountId = genruntime.ClonePointerToString(data.StorageAccountId)

	// UploadSizeBytes
	destination.UploadSizeBytes = genruntime.ClonePointerToInt(data.UploadSizeBytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CreationData_Status struct {
	// +kubebuilder:validation:Required
	//CreateOption: This enumerates the possible sources of a disk's creation.
	CreateOption CreationData_CreateOption_Status `json:"createOption"`

	//GalleryImageReference: Required if creating from a Gallery Image. The id of the
	//ImageDiskReference will be the ARM id of the shared galley image version from
	//which to create a disk.
	GalleryImageReference *ImageDiskReference_Status `json:"galleryImageReference,omitempty"`

	//ImageReference: Disk source information.
	ImageReference *ImageDiskReference_Status `json:"imageReference,omitempty"`

	//LogicalSectorSize: Logical sector size in bytes for Ultra disks. Supported
	//values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int `json:"logicalSectorSize,omitempty"`

	//SourceResourceId: If createOption is Copy, this is the ARM id of the source
	//snapshot or disk.
	SourceResourceId *string `json:"sourceResourceId,omitempty"`

	//SourceUniqueId: If this field is set, this is the unique id identifying the
	//source of this resource.
	SourceUniqueId *string `json:"sourceUniqueId,omitempty"`

	//SourceUri: If createOption is Import, this is the URI of a blob to be imported
	//into a managed disk.
	SourceUri *string `json:"sourceUri,omitempty"`

	//StorageAccountId: Required if createOption is Import. The Azure Resource Manager
	//identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `json:"storageAccountId,omitempty"`

	//UploadSizeBytes: If createOption is Upload, this is the size of the contents of
	//the upload including the VHD footer. This value should be between 20972032 (20
	//MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes
	//for the VHD footer).
	UploadSizeBytes *int `json:"uploadSizeBytes,omitempty"`
}

var _ genruntime.FromARMConverter = &CreationData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *CreationData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CreationData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *CreationData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CreationData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CreationData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreateOption’:
	data.CreateOption = typedInput.CreateOption

	// Set property ‘GalleryImageReference’:
	if typedInput.GalleryImageReference != nil {
		var galleryImageReference1 ImageDiskReference_Status
		err := galleryImageReference1.PopulateFromARM(owner, *typedInput.GalleryImageReference)
		if err != nil {
			return err
		}
		galleryImageReference := galleryImageReference1
		data.GalleryImageReference = &galleryImageReference
	}

	// Set property ‘ImageReference’:
	if typedInput.ImageReference != nil {
		var imageReference1 ImageDiskReference_Status
		err := imageReference1.PopulateFromARM(owner, *typedInput.ImageReference)
		if err != nil {
			return err
		}
		imageReference := imageReference1
		data.ImageReference = &imageReference
	}

	// Set property ‘LogicalSectorSize’:
	if typedInput.LogicalSectorSize != nil {
		logicalSectorSize := *typedInput.LogicalSectorSize
		data.LogicalSectorSize = &logicalSectorSize
	}

	// Set property ‘SourceResourceId’:
	if typedInput.SourceResourceId != nil {
		sourceResourceId := *typedInput.SourceResourceId
		data.SourceResourceId = &sourceResourceId
	}

	// Set property ‘SourceUniqueId’:
	if typedInput.SourceUniqueId != nil {
		sourceUniqueId := *typedInput.SourceUniqueId
		data.SourceUniqueId = &sourceUniqueId
	}

	// Set property ‘SourceUri’:
	if typedInput.SourceUri != nil {
		sourceUri := *typedInput.SourceUri
		data.SourceUri = &sourceUri
	}

	// Set property ‘StorageAccountId’:
	if typedInput.StorageAccountId != nil {
		storageAccountId := *typedInput.StorageAccountId
		data.StorageAccountId = &storageAccountId
	}

	// Set property ‘UploadSizeBytes’:
	if typedInput.UploadSizeBytes != nil {
		uploadSizeBytes := *typedInput.UploadSizeBytes
		data.UploadSizeBytes = &uploadSizeBytes
	}

	// No error
	return nil
}

// AssignPropertiesFromCreationData_Status populates our CreationData_Status from the provided source CreationData_Status
func (data *CreationData_Status) AssignPropertiesFromCreationData_Status(source *v1alpha1api20200930storage.CreationData_Status) error {

	// CreateOption
	if source.CreateOption != nil {
		data.CreateOption = CreationData_CreateOption_Status(*source.CreateOption)
	} else {
		data.CreateOption = ""
	}

	// GalleryImageReference
	if source.GalleryImageReference != nil {
		var galleryImageReference ImageDiskReference_Status
		err := galleryImageReference.AssignPropertiesFromImageDiskReference_Status(source.GalleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReference_Status() to populate field GalleryImageReference")
		}
		data.GalleryImageReference = &galleryImageReference
	} else {
		data.GalleryImageReference = nil
	}

	// ImageReference
	if source.ImageReference != nil {
		var imageReference ImageDiskReference_Status
		err := imageReference.AssignPropertiesFromImageDiskReference_Status(source.ImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageDiskReference_Status() to populate field ImageReference")
		}
		data.ImageReference = &imageReference
	} else {
		data.ImageReference = nil
	}

	// LogicalSectorSize
	data.LogicalSectorSize = genruntime.ClonePointerToInt(source.LogicalSectorSize)

	// SourceResourceId
	data.SourceResourceId = genruntime.ClonePointerToString(source.SourceResourceId)

	// SourceUniqueId
	data.SourceUniqueId = genruntime.ClonePointerToString(source.SourceUniqueId)

	// SourceUri
	data.SourceUri = genruntime.ClonePointerToString(source.SourceUri)

	// StorageAccountId
	data.StorageAccountId = genruntime.ClonePointerToString(source.StorageAccountId)

	// UploadSizeBytes
	data.UploadSizeBytes = genruntime.ClonePointerToInt(source.UploadSizeBytes)

	// No error
	return nil
}

// AssignPropertiesToCreationData_Status populates the provided destination CreationData_Status from our CreationData_Status
func (data *CreationData_Status) AssignPropertiesToCreationData_Status(destination *v1alpha1api20200930storage.CreationData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreateOption
	createOption := string(data.CreateOption)
	destination.CreateOption = &createOption

	// GalleryImageReference
	if data.GalleryImageReference != nil {
		var galleryImageReference v1alpha1api20200930storage.ImageDiskReference_Status
		err := data.GalleryImageReference.AssignPropertiesToImageDiskReference_Status(&galleryImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReference_Status() to populate field GalleryImageReference")
		}
		destination.GalleryImageReference = &galleryImageReference
	} else {
		destination.GalleryImageReference = nil
	}

	// ImageReference
	if data.ImageReference != nil {
		var imageReference v1alpha1api20200930storage.ImageDiskReference_Status
		err := data.ImageReference.AssignPropertiesToImageDiskReference_Status(&imageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageDiskReference_Status() to populate field ImageReference")
		}
		destination.ImageReference = &imageReference
	} else {
		destination.ImageReference = nil
	}

	// LogicalSectorSize
	destination.LogicalSectorSize = genruntime.ClonePointerToInt(data.LogicalSectorSize)

	// SourceResourceId
	destination.SourceResourceId = genruntime.ClonePointerToString(data.SourceResourceId)

	// SourceUniqueId
	destination.SourceUniqueId = genruntime.ClonePointerToString(data.SourceUniqueId)

	// SourceUri
	destination.SourceUri = genruntime.ClonePointerToString(data.SourceUri)

	// StorageAccountId
	destination.StorageAccountId = genruntime.ClonePointerToString(data.StorageAccountId)

	// UploadSizeBytes
	destination.UploadSizeBytes = genruntime.ClonePointerToInt(data.UploadSizeBytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"V1","V2"}
type DiskProperties_HyperVGeneration_Spec string

const (
	DiskProperties_HyperVGeneration_SpecV1 = DiskProperties_HyperVGeneration_Spec("V1")
	DiskProperties_HyperVGeneration_SpecV2 = DiskProperties_HyperVGeneration_Spec("V2")
)

type DiskProperties_HyperVGeneration_Status string

const (
	DiskProperties_HyperVGeneration_StatusV1 = DiskProperties_HyperVGeneration_Status("V1")
	DiskProperties_HyperVGeneration_StatusV2 = DiskProperties_HyperVGeneration_Status("V2")
)

// +kubebuilder:validation:Enum={"Linux","Windows"}
type DiskProperties_OsType_Spec string

const (
	DiskProperties_OsType_SpecLinux   = DiskProperties_OsType_Spec("Linux")
	DiskProperties_OsType_SpecWindows = DiskProperties_OsType_Spec("Windows")
)

type DiskProperties_OsType_Status string

const (
	DiskProperties_OsType_StatusLinux   = DiskProperties_OsType_Status("Linux")
	DiskProperties_OsType_StatusWindows = DiskProperties_OsType_Status("Windows")
)

type DiskSku_Spec struct {
	//Name: The sku name.
	Name *DiskSku_Name_Spec `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &DiskSku_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (diskSku *DiskSku_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if diskSku == nil {
		return nil, nil
	}
	var result DiskSku_SpecARM

	// Set property ‘Name’:
	if diskSku.Name != nil {
		name := *diskSku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (diskSku *DiskSku_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskSku_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (diskSku *DiskSku_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiskSku_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskSku_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		diskSku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskSku_Spec populates our DiskSku_Spec from the provided source DiskSku_Spec
func (diskSku *DiskSku_Spec) AssignPropertiesFromDiskSku_Spec(source *v1alpha1api20200930storage.DiskSku_Spec) error {

	// Name
	if source.Name != nil {
		name := DiskSku_Name_Spec(*source.Name)
		diskSku.Name = &name
	} else {
		diskSku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiskSku_Spec populates the provided destination DiskSku_Spec from our DiskSku_Spec
func (diskSku *DiskSku_Spec) AssignPropertiesToDiskSku_Spec(destination *v1alpha1api20200930storage.DiskSku_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if diskSku.Name != nil {
		name := string(*diskSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DiskSku_Status struct {
	//Name: The sku name.
	Name *DiskSku_Name_Status `json:"name,omitempty"`

	//Tier: The sku tier.
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &DiskSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (diskSku *DiskSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (diskSku *DiskSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiskSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		diskSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		diskSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskSku_Status populates our DiskSku_Status from the provided source DiskSku_Status
func (diskSku *DiskSku_Status) AssignPropertiesFromDiskSku_Status(source *v1alpha1api20200930storage.DiskSku_Status) error {

	// Name
	if source.Name != nil {
		name := DiskSku_Name_Status(*source.Name)
		diskSku.Name = &name
	} else {
		diskSku.Name = nil
	}

	// Tier
	diskSku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToDiskSku_Status populates the provided destination DiskSku_Status from our DiskSku_Status
func (diskSku *DiskSku_Status) AssignPropertiesToDiskSku_Status(destination *v1alpha1api20200930storage.DiskSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if diskSku.Name != nil {
		name := string(*diskSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	destination.Tier = genruntime.ClonePointerToString(diskSku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ActiveSAS","ActiveUpload","Attached","ReadyToUpload","Reserved","Unattached"}
type DiskState_Spec string

const (
	DiskState_SpecActiveSAS     = DiskState_Spec("ActiveSAS")
	DiskState_SpecActiveUpload  = DiskState_Spec("ActiveUpload")
	DiskState_SpecAttached      = DiskState_Spec("Attached")
	DiskState_SpecReadyToUpload = DiskState_Spec("ReadyToUpload")
	DiskState_SpecReserved      = DiskState_Spec("Reserved")
	DiskState_SpecUnattached    = DiskState_Spec("Unattached")
)

type DiskState_Status string

const (
	DiskState_StatusActiveSAS     = DiskState_Status("ActiveSAS")
	DiskState_StatusActiveUpload  = DiskState_Status("ActiveUpload")
	DiskState_StatusAttached      = DiskState_Status("Attached")
	DiskState_StatusReadyToUpload = DiskState_Status("ReadyToUpload")
	DiskState_StatusReserved      = DiskState_Status("Reserved")
	DiskState_StatusUnattached    = DiskState_Status("Unattached")
)

type EncryptionSettingsCollection_Spec struct {
	// +kubebuilder:validation:Required
	//Enabled: Set this flag to true and provide DiskEncryptionKey and optional
	//KeyEncryptionKey to enable encryption. Set this flag to false and remove
	//DiskEncryptionKey and KeyEncryptionKey to disable encryption. If
	//EncryptionSettings is null in the request object, the existing settings remain
	//unchanged.
	Enabled bool `json:"enabled"`

	//EncryptionSettings: A collection of encryption settings, one for each disk
	//volume.
	EncryptionSettings []EncryptionSettingsElement_Spec `json:"encryptionSettings,omitempty"`

	//EncryptionSettingsVersion: Describes what type of encryption is used for the
	//disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to
	//Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `json:"encryptionSettingsVersion,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionSettingsCollection_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (collection *EncryptionSettingsCollection_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if collection == nil {
		return nil, nil
	}
	var result EncryptionSettingsCollection_SpecARM

	// Set property ‘Enabled’:
	result.Enabled = collection.Enabled

	// Set property ‘EncryptionSettings’:
	for _, item := range collection.EncryptionSettings {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.EncryptionSettings = append(result.EncryptionSettings, itemARM.(EncryptionSettingsElement_SpecARM))
	}

	// Set property ‘EncryptionSettingsVersion’:
	if collection.EncryptionSettingsVersion != nil {
		encryptionSettingsVersion := *collection.EncryptionSettingsVersion
		result.EncryptionSettingsVersion = &encryptionSettingsVersion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (collection *EncryptionSettingsCollection_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsCollection_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (collection *EncryptionSettingsCollection_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsCollection_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsCollection_SpecARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	collection.Enabled = typedInput.Enabled

	// Set property ‘EncryptionSettings’:
	for _, item := range typedInput.EncryptionSettings {
		var item1 EncryptionSettingsElement_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		collection.EncryptionSettings = append(collection.EncryptionSettings, item1)
	}

	// Set property ‘EncryptionSettingsVersion’:
	if typedInput.EncryptionSettingsVersion != nil {
		encryptionSettingsVersion := *typedInput.EncryptionSettingsVersion
		collection.EncryptionSettingsVersion = &encryptionSettingsVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsCollection_Spec populates our EncryptionSettingsCollection_Spec from the provided source EncryptionSettingsCollection_Spec
func (collection *EncryptionSettingsCollection_Spec) AssignPropertiesFromEncryptionSettingsCollection_Spec(source *v1alpha1api20200930storage.EncryptionSettingsCollection_Spec) error {

	// Enabled
	if source.Enabled != nil {
		collection.Enabled = *source.Enabled
	} else {
		collection.Enabled = false
	}

	// EncryptionSettings
	if source.EncryptionSettings != nil {
		encryptionSettingList := make([]EncryptionSettingsElement_Spec, len(source.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range source.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting EncryptionSettingsElement_Spec
			err := encryptionSetting.AssignPropertiesFromEncryptionSettingsElement_Spec(&encryptionSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsElement_Spec() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		collection.EncryptionSettings = encryptionSettingList
	} else {
		collection.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	collection.EncryptionSettingsVersion = genruntime.ClonePointerToString(source.EncryptionSettingsVersion)

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsCollection_Spec populates the provided destination EncryptionSettingsCollection_Spec from our EncryptionSettingsCollection_Spec
func (collection *EncryptionSettingsCollection_Spec) AssignPropertiesToEncryptionSettingsCollection_Spec(destination *v1alpha1api20200930storage.EncryptionSettingsCollection_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	enabled := collection.Enabled
	destination.Enabled = &enabled

	// EncryptionSettings
	if collection.EncryptionSettings != nil {
		encryptionSettingList := make([]v1alpha1api20200930storage.EncryptionSettingsElement_Spec, len(collection.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range collection.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting v1alpha1api20200930storage.EncryptionSettingsElement_Spec
			err := encryptionSettingItem.AssignPropertiesToEncryptionSettingsElement_Spec(&encryptionSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsElement_Spec() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		destination.EncryptionSettings = encryptionSettingList
	} else {
		destination.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	destination.EncryptionSettingsVersion = genruntime.ClonePointerToString(collection.EncryptionSettingsVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionSettingsCollection_Status struct {
	// +kubebuilder:validation:Required
	//Enabled: Set this flag to true and provide DiskEncryptionKey and optional
	//KeyEncryptionKey to enable encryption. Set this flag to false and remove
	//DiskEncryptionKey and KeyEncryptionKey to disable encryption. If
	//EncryptionSettings is null in the request object, the existing settings remain
	//unchanged.
	Enabled bool `json:"enabled"`

	//EncryptionSettings: A collection of encryption settings, one for each disk
	//volume.
	EncryptionSettings []EncryptionSettingsElement_Status `json:"encryptionSettings,omitempty"`

	//EncryptionSettingsVersion: Describes what type of encryption is used for the
	//disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to
	//Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `json:"encryptionSettingsVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionSettingsCollection_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (collection *EncryptionSettingsCollection_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsCollection_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (collection *EncryptionSettingsCollection_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsCollection_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsCollection_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	collection.Enabled = typedInput.Enabled

	// Set property ‘EncryptionSettings’:
	for _, item := range typedInput.EncryptionSettings {
		var item1 EncryptionSettingsElement_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		collection.EncryptionSettings = append(collection.EncryptionSettings, item1)
	}

	// Set property ‘EncryptionSettingsVersion’:
	if typedInput.EncryptionSettingsVersion != nil {
		encryptionSettingsVersion := *typedInput.EncryptionSettingsVersion
		collection.EncryptionSettingsVersion = &encryptionSettingsVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsCollection_Status populates our EncryptionSettingsCollection_Status from the provided source EncryptionSettingsCollection_Status
func (collection *EncryptionSettingsCollection_Status) AssignPropertiesFromEncryptionSettingsCollection_Status(source *v1alpha1api20200930storage.EncryptionSettingsCollection_Status) error {

	// Enabled
	if source.Enabled != nil {
		collection.Enabled = *source.Enabled
	} else {
		collection.Enabled = false
	}

	// EncryptionSettings
	if source.EncryptionSettings != nil {
		encryptionSettingList := make([]EncryptionSettingsElement_Status, len(source.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range source.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting EncryptionSettingsElement_Status
			err := encryptionSetting.AssignPropertiesFromEncryptionSettingsElement_Status(&encryptionSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromEncryptionSettingsElement_Status() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		collection.EncryptionSettings = encryptionSettingList
	} else {
		collection.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	collection.EncryptionSettingsVersion = genruntime.ClonePointerToString(source.EncryptionSettingsVersion)

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsCollection_Status populates the provided destination EncryptionSettingsCollection_Status from our EncryptionSettingsCollection_Status
func (collection *EncryptionSettingsCollection_Status) AssignPropertiesToEncryptionSettingsCollection_Status(destination *v1alpha1api20200930storage.EncryptionSettingsCollection_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	enabled := collection.Enabled
	destination.Enabled = &enabled

	// EncryptionSettings
	if collection.EncryptionSettings != nil {
		encryptionSettingList := make([]v1alpha1api20200930storage.EncryptionSettingsElement_Status, len(collection.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range collection.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting v1alpha1api20200930storage.EncryptionSettingsElement_Status
			err := encryptionSettingItem.AssignPropertiesToEncryptionSettingsElement_Status(&encryptionSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToEncryptionSettingsElement_Status() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		destination.EncryptionSettings = encryptionSettingList
	} else {
		destination.EncryptionSettings = nil
	}

	// EncryptionSettingsVersion
	destination.EncryptionSettingsVersion = genruntime.ClonePointerToString(collection.EncryptionSettingsVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Encryption_Spec struct {
	//DiskEncryptionSetReference: ResourceId of the disk encryption set to use for
	//enabling encryption at rest.
	DiskEncryptionSetReference *genruntime.ResourceReference `armReference:"DiskEncryptionSetId" json:"diskEncryptionSetReference,omitempty"`
	Type                       *EncryptionType_Spec          `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	var result Encryption_SpecARM

	// Set property ‘DiskEncryptionSetId’:
	if encryption.DiskEncryptionSetReference != nil {
		diskEncryptionSetReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*encryption.DiskEncryptionSetReference)
		if err != nil {
			return nil, err
		}
		diskEncryptionSetReference := diskEncryptionSetReferenceARMID
		result.DiskEncryptionSetId = &diskEncryptionSetReference
	}

	// Set property ‘Type’:
	if encryption.Type != nil {
		typeVar := *encryption.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘DiskEncryptionSetReference’

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		encryption.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption_Spec populates our Encryption_Spec from the provided source Encryption_Spec
func (encryption *Encryption_Spec) AssignPropertiesFromEncryption_Spec(source *v1alpha1api20200930storage.Encryption_Spec) error {

	// DiskEncryptionSetReference
	if source.DiskEncryptionSetReference != nil {
		diskEncryptionSetReference := source.DiskEncryptionSetReference.Copy()
		encryption.DiskEncryptionSetReference = &diskEncryptionSetReference
	} else {
		encryption.DiskEncryptionSetReference = nil
	}

	// Type
	if source.Type != nil {
		typeVar := EncryptionType_Spec(*source.Type)
		encryption.Type = &typeVar
	} else {
		encryption.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption_Spec populates the provided destination Encryption_Spec from our Encryption_Spec
func (encryption *Encryption_Spec) AssignPropertiesToEncryption_Spec(destination *v1alpha1api20200930storage.Encryption_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionSetReference
	if encryption.DiskEncryptionSetReference != nil {
		diskEncryptionSetReference := encryption.DiskEncryptionSetReference.Copy()
		destination.DiskEncryptionSetReference = &diskEncryptionSetReference
	} else {
		destination.DiskEncryptionSetReference = nil
	}

	// Type
	if encryption.Type != nil {
		typeVar := string(*encryption.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Encryption_Status struct {
	//DiskEncryptionSetId: ResourceId of the disk encryption set to use for enabling
	//encryption at rest.
	DiskEncryptionSetId *string                `json:"diskEncryptionSetId,omitempty"`
	Type                *EncryptionType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionSetId’:
	if typedInput.DiskEncryptionSetId != nil {
		diskEncryptionSetId := *typedInput.DiskEncryptionSetId
		encryption.DiskEncryptionSetId = &diskEncryptionSetId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		encryption.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption_Status populates our Encryption_Status from the provided source Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesFromEncryption_Status(source *v1alpha1api20200930storage.Encryption_Status) error {

	// DiskEncryptionSetId
	encryption.DiskEncryptionSetId = genruntime.ClonePointerToString(source.DiskEncryptionSetId)

	// Type
	if source.Type != nil {
		typeVar := EncryptionType_Status(*source.Type)
		encryption.Type = &typeVar
	} else {
		encryption.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption_Status populates the provided destination Encryption_Status from our Encryption_Status
func (encryption *Encryption_Status) AssignPropertiesToEncryption_Status(destination *v1alpha1api20200930storage.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionSetId
	destination.DiskEncryptionSetId = genruntime.ClonePointerToString(encryption.DiskEncryptionSetId)

	// Type
	if encryption.Type != nil {
		typeVar := string(*encryption.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExtendedLocation_Spec struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	var result ExtendedLocation_SpecARM

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation_Spec populates our ExtendedLocation_Spec from the provided source ExtendedLocation_Spec
func (location *ExtendedLocation_Spec) AssignPropertiesFromExtendedLocation_Spec(source *v1alpha1api20200930storage.ExtendedLocation_Spec) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Spec(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation_Spec populates the provided destination ExtendedLocation_Spec from our ExtendedLocation_Spec
func (location *ExtendedLocation_Spec) AssignPropertiesToExtendedLocation_Spec(destination *v1alpha1api20200930storage.ExtendedLocation_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExtendedLocation_Status struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation_Status populates our ExtendedLocation_Status from the provided source ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesFromExtendedLocation_Status(source *v1alpha1api20200930storage.ExtendedLocation_Status) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Status(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation_Status populates the provided destination ExtendedLocation_Status from our ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesToExtendedLocation_Status(destination *v1alpha1api20200930storage.ExtendedLocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AllowAll","AllowPrivate","DenyAll"}
type NetworkAccessPolicy_Spec string

const (
	NetworkAccessPolicy_SpecAllowAll     = NetworkAccessPolicy_Spec("AllowAll")
	NetworkAccessPolicy_SpecAllowPrivate = NetworkAccessPolicy_Spec("AllowPrivate")
	NetworkAccessPolicy_SpecDenyAll      = NetworkAccessPolicy_Spec("DenyAll")
)

type NetworkAccessPolicy_Status string

const (
	NetworkAccessPolicy_StatusAllowAll     = NetworkAccessPolicy_Status("AllowAll")
	NetworkAccessPolicy_StatusAllowPrivate = NetworkAccessPolicy_Status("AllowPrivate")
	NetworkAccessPolicy_StatusDenyAll      = NetworkAccessPolicy_Status("DenyAll")
)

type PurchasePlan_Spec struct {
	// +kubebuilder:validation:Required
	//Name: The plan ID.
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Product: Specifies the product of the image from the marketplace. This is the
	//same value as Offer under the imageReference element.
	Product string `json:"product"`

	//PromotionCode: The Offer Promotion Code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// +kubebuilder:validation:Required
	//Publisher: The publisher ID.
	Publisher string `json:"publisher"`
}

var _ genruntime.ARMTransformer = &PurchasePlan_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (plan *PurchasePlan_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if plan == nil {
		return nil, nil
	}
	var result PurchasePlan_SpecARM

	// Set property ‘Name’:
	result.Name = plan.Name

	// Set property ‘Product’:
	result.Product = plan.Product

	// Set property ‘PromotionCode’:
	if plan.PromotionCode != nil {
		promotionCode := *plan.PromotionCode
		result.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	result.Publisher = plan.Publisher
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (plan *PurchasePlan_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PurchasePlan_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (plan *PurchasePlan_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PurchasePlan_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PurchasePlan_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	plan.Name = typedInput.Name

	// Set property ‘Product’:
	plan.Product = typedInput.Product

	// Set property ‘PromotionCode’:
	if typedInput.PromotionCode != nil {
		promotionCode := *typedInput.PromotionCode
		plan.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	plan.Publisher = typedInput.Publisher

	// No error
	return nil
}

// AssignPropertiesFromPurchasePlan_Spec populates our PurchasePlan_Spec from the provided source PurchasePlan_Spec
func (plan *PurchasePlan_Spec) AssignPropertiesFromPurchasePlan_Spec(source *v1alpha1api20200930storage.PurchasePlan_Spec) error {

	// Name
	plan.Name = genruntime.GetOptionalStringValue(source.Name)

	// Product
	plan.Product = genruntime.GetOptionalStringValue(source.Product)

	// PromotionCode
	plan.PromotionCode = genruntime.ClonePointerToString(source.PromotionCode)

	// Publisher
	plan.Publisher = genruntime.GetOptionalStringValue(source.Publisher)

	// No error
	return nil
}

// AssignPropertiesToPurchasePlan_Spec populates the provided destination PurchasePlan_Spec from our PurchasePlan_Spec
func (plan *PurchasePlan_Spec) AssignPropertiesToPurchasePlan_Spec(destination *v1alpha1api20200930storage.PurchasePlan_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := plan.Name
	destination.Name = &name

	// Product
	product := plan.Product
	destination.Product = &product

	// PromotionCode
	destination.PromotionCode = genruntime.ClonePointerToString(plan.PromotionCode)

	// Publisher
	publisher := plan.Publisher
	destination.Publisher = &publisher

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PurchasePlan_Status struct {
	// +kubebuilder:validation:Required
	//Name: The plan ID.
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Product: Specifies the product of the image from the marketplace. This is the
	//same value as Offer under the imageReference element.
	Product string `json:"product"`

	//PromotionCode: The Offer Promotion Code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// +kubebuilder:validation:Required
	//Publisher: The publisher ID.
	Publisher string `json:"publisher"`
}

var _ genruntime.FromARMConverter = &PurchasePlan_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (plan *PurchasePlan_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PurchasePlan_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (plan *PurchasePlan_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PurchasePlan_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PurchasePlan_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	plan.Name = typedInput.Name

	// Set property ‘Product’:
	plan.Product = typedInput.Product

	// Set property ‘PromotionCode’:
	if typedInput.PromotionCode != nil {
		promotionCode := *typedInput.PromotionCode
		plan.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	plan.Publisher = typedInput.Publisher

	// No error
	return nil
}

// AssignPropertiesFromPurchasePlan_Status populates our PurchasePlan_Status from the provided source PurchasePlan_Status
func (plan *PurchasePlan_Status) AssignPropertiesFromPurchasePlan_Status(source *v1alpha1api20200930storage.PurchasePlan_Status) error {

	// Name
	plan.Name = genruntime.GetOptionalStringValue(source.Name)

	// Product
	plan.Product = genruntime.GetOptionalStringValue(source.Product)

	// PromotionCode
	plan.PromotionCode = genruntime.ClonePointerToString(source.PromotionCode)

	// Publisher
	plan.Publisher = genruntime.GetOptionalStringValue(source.Publisher)

	// No error
	return nil
}

// AssignPropertiesToPurchasePlan_Status populates the provided destination PurchasePlan_Status from our PurchasePlan_Status
func (plan *PurchasePlan_Status) AssignPropertiesToPurchasePlan_Status(destination *v1alpha1api20200930storage.PurchasePlan_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := plan.Name
	destination.Name = &name

	// Product
	product := plan.Product
	destination.Product = &product

	// PromotionCode
	destination.PromotionCode = genruntime.ClonePointerToString(plan.PromotionCode)

	// Publisher
	publisher := plan.Publisher
	destination.Publisher = &publisher

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ShareInfoElement_Status struct {
	//VmUri: A relative URI containing the ID of the VM that has the disk attached.
	VmUri *string `json:"vmUri,omitempty"`
}

var _ genruntime.FromARMConverter = &ShareInfoElement_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (element *ShareInfoElement_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ShareInfoElement_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (element *ShareInfoElement_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ShareInfoElement_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ShareInfoElement_StatusARM, got %T", armInput)
	}

	// Set property ‘VmUri’:
	if typedInput.VmUri != nil {
		vmUri := *typedInput.VmUri
		element.VmUri = &vmUri
	}

	// No error
	return nil
}

// AssignPropertiesFromShareInfoElement_Status populates our ShareInfoElement_Status from the provided source ShareInfoElement_Status
func (element *ShareInfoElement_Status) AssignPropertiesFromShareInfoElement_Status(source *v1alpha1api20200930storage.ShareInfoElement_Status) error {

	// VmUri
	element.VmUri = genruntime.ClonePointerToString(source.VmUri)

	// No error
	return nil
}

// AssignPropertiesToShareInfoElement_Status populates the provided destination ShareInfoElement_Status from our ShareInfoElement_Status
func (element *ShareInfoElement_Status) AssignPropertiesToShareInfoElement_Status(destination *v1alpha1api20200930storage.ShareInfoElement_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// VmUri
	destination.VmUri = genruntime.ClonePointerToString(element.VmUri)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Attach","Copy","Empty","FromImage","Import","Restore","Upload"}
type CreationData_CreateOption_Spec string

const (
	CreationData_CreateOption_SpecAttach    = CreationData_CreateOption_Spec("Attach")
	CreationData_CreateOption_SpecCopy      = CreationData_CreateOption_Spec("Copy")
	CreationData_CreateOption_SpecEmpty     = CreationData_CreateOption_Spec("Empty")
	CreationData_CreateOption_SpecFromImage = CreationData_CreateOption_Spec("FromImage")
	CreationData_CreateOption_SpecImport    = CreationData_CreateOption_Spec("Import")
	CreationData_CreateOption_SpecRestore   = CreationData_CreateOption_Spec("Restore")
	CreationData_CreateOption_SpecUpload    = CreationData_CreateOption_Spec("Upload")
)

type CreationData_CreateOption_Status string

const (
	CreationData_CreateOption_StatusAttach    = CreationData_CreateOption_Status("Attach")
	CreationData_CreateOption_StatusCopy      = CreationData_CreateOption_Status("Copy")
	CreationData_CreateOption_StatusEmpty     = CreationData_CreateOption_Status("Empty")
	CreationData_CreateOption_StatusFromImage = CreationData_CreateOption_Status("FromImage")
	CreationData_CreateOption_StatusImport    = CreationData_CreateOption_Status("Import")
	CreationData_CreateOption_StatusRestore   = CreationData_CreateOption_Status("Restore")
	CreationData_CreateOption_StatusUpload    = CreationData_CreateOption_Status("Upload")
)

type EncryptionSettingsElement_Spec struct {
	//DiskEncryptionKey: Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference_Spec `json:"diskEncryptionKey,omitempty"`

	//KeyEncryptionKey: Key Vault Key Url and vault id of the key encryption key.
	//KeyEncryptionKey is optional and when provided is used to unwrap the disk
	//encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference_Spec `json:"keyEncryptionKey,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionSettingsElement_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (element *EncryptionSettingsElement_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if element == nil {
		return nil, nil
	}
	var result EncryptionSettingsElement_SpecARM

	// Set property ‘DiskEncryptionKey’:
	if element.DiskEncryptionKey != nil {
		diskEncryptionKeyARM, err := (*element.DiskEncryptionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diskEncryptionKey := diskEncryptionKeyARM.(KeyVaultAndSecretReference_SpecARM)
		result.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘KeyEncryptionKey’:
	if element.KeyEncryptionKey != nil {
		keyEncryptionKeyARM, err := (*element.KeyEncryptionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyEncryptionKey := keyEncryptionKeyARM.(KeyVaultAndKeyReference_SpecARM)
		result.KeyEncryptionKey = &keyEncryptionKey
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (element *EncryptionSettingsElement_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsElement_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (element *EncryptionSettingsElement_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsElement_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsElement_SpecARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionKey’:
	if typedInput.DiskEncryptionKey != nil {
		var diskEncryptionKey1 KeyVaultAndSecretReference_Spec
		err := diskEncryptionKey1.PopulateFromARM(owner, *typedInput.DiskEncryptionKey)
		if err != nil {
			return err
		}
		diskEncryptionKey := diskEncryptionKey1
		element.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘KeyEncryptionKey’:
	if typedInput.KeyEncryptionKey != nil {
		var keyEncryptionKey1 KeyVaultAndKeyReference_Spec
		err := keyEncryptionKey1.PopulateFromARM(owner, *typedInput.KeyEncryptionKey)
		if err != nil {
			return err
		}
		keyEncryptionKey := keyEncryptionKey1
		element.KeyEncryptionKey = &keyEncryptionKey
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsElement_Spec populates our EncryptionSettingsElement_Spec from the provided source EncryptionSettingsElement_Spec
func (element *EncryptionSettingsElement_Spec) AssignPropertiesFromEncryptionSettingsElement_Spec(source *v1alpha1api20200930storage.EncryptionSettingsElement_Spec) error {

	// DiskEncryptionKey
	if source.DiskEncryptionKey != nil {
		var diskEncryptionKey KeyVaultAndSecretReference_Spec
		err := diskEncryptionKey.AssignPropertiesFromKeyVaultAndSecretReference_Spec(source.DiskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndSecretReference_Spec() to populate field DiskEncryptionKey")
		}
		element.DiskEncryptionKey = &diskEncryptionKey
	} else {
		element.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if source.KeyEncryptionKey != nil {
		var keyEncryptionKey KeyVaultAndKeyReference_Spec
		err := keyEncryptionKey.AssignPropertiesFromKeyVaultAndKeyReference_Spec(source.KeyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndKeyReference_Spec() to populate field KeyEncryptionKey")
		}
		element.KeyEncryptionKey = &keyEncryptionKey
	} else {
		element.KeyEncryptionKey = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsElement_Spec populates the provided destination EncryptionSettingsElement_Spec from our EncryptionSettingsElement_Spec
func (element *EncryptionSettingsElement_Spec) AssignPropertiesToEncryptionSettingsElement_Spec(destination *v1alpha1api20200930storage.EncryptionSettingsElement_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionKey
	if element.DiskEncryptionKey != nil {
		var diskEncryptionKey v1alpha1api20200930storage.KeyVaultAndSecretReference_Spec
		err := element.DiskEncryptionKey.AssignPropertiesToKeyVaultAndSecretReference_Spec(&diskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndSecretReference_Spec() to populate field DiskEncryptionKey")
		}
		destination.DiskEncryptionKey = &diskEncryptionKey
	} else {
		destination.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if element.KeyEncryptionKey != nil {
		var keyEncryptionKey v1alpha1api20200930storage.KeyVaultAndKeyReference_Spec
		err := element.KeyEncryptionKey.AssignPropertiesToKeyVaultAndKeyReference_Spec(&keyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndKeyReference_Spec() to populate field KeyEncryptionKey")
		}
		destination.KeyEncryptionKey = &keyEncryptionKey
	} else {
		destination.KeyEncryptionKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionSettingsElement_Status struct {
	//DiskEncryptionKey: Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference_Status `json:"diskEncryptionKey,omitempty"`

	//KeyEncryptionKey: Key Vault Key Url and vault id of the key encryption key.
	//KeyEncryptionKey is optional and when provided is used to unwrap the disk
	//encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference_Status `json:"keyEncryptionKey,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionSettingsElement_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (element *EncryptionSettingsElement_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionSettingsElement_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (element *EncryptionSettingsElement_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionSettingsElement_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionSettingsElement_StatusARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionKey’:
	if typedInput.DiskEncryptionKey != nil {
		var diskEncryptionKey1 KeyVaultAndSecretReference_Status
		err := diskEncryptionKey1.PopulateFromARM(owner, *typedInput.DiskEncryptionKey)
		if err != nil {
			return err
		}
		diskEncryptionKey := diskEncryptionKey1
		element.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘KeyEncryptionKey’:
	if typedInput.KeyEncryptionKey != nil {
		var keyEncryptionKey1 KeyVaultAndKeyReference_Status
		err := keyEncryptionKey1.PopulateFromARM(owner, *typedInput.KeyEncryptionKey)
		if err != nil {
			return err
		}
		keyEncryptionKey := keyEncryptionKey1
		element.KeyEncryptionKey = &keyEncryptionKey
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionSettingsElement_Status populates our EncryptionSettingsElement_Status from the provided source EncryptionSettingsElement_Status
func (element *EncryptionSettingsElement_Status) AssignPropertiesFromEncryptionSettingsElement_Status(source *v1alpha1api20200930storage.EncryptionSettingsElement_Status) error {

	// DiskEncryptionKey
	if source.DiskEncryptionKey != nil {
		var diskEncryptionKey KeyVaultAndSecretReference_Status
		err := diskEncryptionKey.AssignPropertiesFromKeyVaultAndSecretReference_Status(source.DiskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndSecretReference_Status() to populate field DiskEncryptionKey")
		}
		element.DiskEncryptionKey = &diskEncryptionKey
	} else {
		element.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if source.KeyEncryptionKey != nil {
		var keyEncryptionKey KeyVaultAndKeyReference_Status
		err := keyEncryptionKey.AssignPropertiesFromKeyVaultAndKeyReference_Status(source.KeyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultAndKeyReference_Status() to populate field KeyEncryptionKey")
		}
		element.KeyEncryptionKey = &keyEncryptionKey
	} else {
		element.KeyEncryptionKey = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionSettingsElement_Status populates the provided destination EncryptionSettingsElement_Status from our EncryptionSettingsElement_Status
func (element *EncryptionSettingsElement_Status) AssignPropertiesToEncryptionSettingsElement_Status(destination *v1alpha1api20200930storage.EncryptionSettingsElement_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionKey
	if element.DiskEncryptionKey != nil {
		var diskEncryptionKey v1alpha1api20200930storage.KeyVaultAndSecretReference_Status
		err := element.DiskEncryptionKey.AssignPropertiesToKeyVaultAndSecretReference_Status(&diskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndSecretReference_Status() to populate field DiskEncryptionKey")
		}
		destination.DiskEncryptionKey = &diskEncryptionKey
	} else {
		destination.DiskEncryptionKey = nil
	}

	// KeyEncryptionKey
	if element.KeyEncryptionKey != nil {
		var keyEncryptionKey v1alpha1api20200930storage.KeyVaultAndKeyReference_Status
		err := element.KeyEncryptionKey.AssignPropertiesToKeyVaultAndKeyReference_Status(&keyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultAndKeyReference_Status() to populate field KeyEncryptionKey")
		}
		destination.KeyEncryptionKey = &keyEncryptionKey
	} else {
		destination.KeyEncryptionKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"EncryptionAtRestWithCustomerKey","EncryptionAtRestWithPlatformAndCustomerKeys","EncryptionAtRestWithPlatformKey"}
type EncryptionType_Spec string

const (
	EncryptionType_SpecEncryptionAtRestWithCustomerKey             = EncryptionType_Spec("EncryptionAtRestWithCustomerKey")
	EncryptionType_SpecEncryptionAtRestWithPlatformAndCustomerKeys = EncryptionType_Spec("EncryptionAtRestWithPlatformAndCustomerKeys")
	EncryptionType_SpecEncryptionAtRestWithPlatformKey             = EncryptionType_Spec("EncryptionAtRestWithPlatformKey")
)

type EncryptionType_Status string

const (
	EncryptionType_StatusEncryptionAtRestWithCustomerKey             = EncryptionType_Status("EncryptionAtRestWithCustomerKey")
	EncryptionType_StatusEncryptionAtRestWithPlatformAndCustomerKeys = EncryptionType_Status("EncryptionAtRestWithPlatformAndCustomerKeys")
	EncryptionType_StatusEncryptionAtRestWithPlatformKey             = EncryptionType_Status("EncryptionAtRestWithPlatformKey")
)

type ImageDiskReference_Spec struct {
	//Lun: If the disk is created from an image's data disk, this is an index that
	//indicates which of the data disks in the image to use. For OS disks, this field
	//is null.
	Lun *int `json:"lun,omitempty"`

	// +kubebuilder:validation:Required
	//Reference: A relative uri containing either a Platform Image Repository or user
	//image reference.
	Reference genruntime.ResourceReference `armReference:"Id" json:"reference"`
}

var _ genruntime.ARMTransformer = &ImageDiskReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *ImageDiskReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result ImageDiskReference_SpecARM

	// Set property ‘Id’:
	referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(reference.Reference)
	if err != nil {
		return nil, err
	}
	result.Id = referenceARMID

	// Set property ‘Lun’:
	if reference.Lun != nil {
		lun := *reference.Lun
		result.Lun = &lun
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ImageDiskReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageDiskReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ImageDiskReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageDiskReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageDiskReference_SpecARM, got %T", armInput)
	}

	// Set property ‘Lun’:
	if typedInput.Lun != nil {
		lun := *typedInput.Lun
		reference.Lun = &lun
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromImageDiskReference_Spec populates our ImageDiskReference_Spec from the provided source ImageDiskReference_Spec
func (reference *ImageDiskReference_Spec) AssignPropertiesFromImageDiskReference_Spec(source *v1alpha1api20200930storage.ImageDiskReference_Spec) error {

	// Lun
	reference.Lun = genruntime.ClonePointerToInt(source.Lun)

	// Reference
	reference.Reference = source.Reference.Copy()

	// No error
	return nil
}

// AssignPropertiesToImageDiskReference_Spec populates the provided destination ImageDiskReference_Spec from our ImageDiskReference_Spec
func (reference *ImageDiskReference_Spec) AssignPropertiesToImageDiskReference_Spec(destination *v1alpha1api20200930storage.ImageDiskReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Lun
	destination.Lun = genruntime.ClonePointerToInt(reference.Lun)

	// Reference
	destination.Reference = reference.Reference.Copy()

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ImageDiskReference_Status struct {
	// +kubebuilder:validation:Required
	//Id: A relative uri containing either a Platform Image Repository or user image
	//reference.
	Id string `json:"id"`

	//Lun: If the disk is created from an image's data disk, this is an index that
	//indicates which of the data disks in the image to use. For OS disks, this field
	//is null.
	Lun *int `json:"lun,omitempty"`
}

var _ genruntime.FromARMConverter = &ImageDiskReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ImageDiskReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageDiskReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ImageDiskReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageDiskReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageDiskReference_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	reference.Id = typedInput.Id

	// Set property ‘Lun’:
	if typedInput.Lun != nil {
		lun := *typedInput.Lun
		reference.Lun = &lun
	}

	// No error
	return nil
}

// AssignPropertiesFromImageDiskReference_Status populates our ImageDiskReference_Status from the provided source ImageDiskReference_Status
func (reference *ImageDiskReference_Status) AssignPropertiesFromImageDiskReference_Status(source *v1alpha1api20200930storage.ImageDiskReference_Status) error {

	// Id
	reference.Id = genruntime.GetOptionalStringValue(source.Id)

	// Lun
	reference.Lun = genruntime.ClonePointerToInt(source.Lun)

	// No error
	return nil
}

// AssignPropertiesToImageDiskReference_Status populates the provided destination ImageDiskReference_Status from our ImageDiskReference_Status
func (reference *ImageDiskReference_Status) AssignPropertiesToImageDiskReference_Status(destination *v1alpha1api20200930storage.ImageDiskReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	id := reference.Id
	destination.Id = &id

	// Lun
	destination.Lun = genruntime.ClonePointerToInt(reference.Lun)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultAndKeyReference_Spec struct {
	// +kubebuilder:validation:Required
	//KeyUrl: Url pointing to a key or secret in KeyVault
	KeyUrl string `json:"keyUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault_Spec `json:"sourceVault"`
}

var _ genruntime.ARMTransformer = &KeyVaultAndKeyReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultAndKeyReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultAndKeyReference_SpecARM

	// Set property ‘KeyUrl’:
	result.KeyUrl = reference.KeyUrl

	// Set property ‘SourceVault’:
	sourceVaultARM, err := reference.SourceVault.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.SourceVault = sourceVaultARM.(SourceVault_SpecARM)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndKeyReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndKeyReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndKeyReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndKeyReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndKeyReference_SpecARM, got %T", armInput)
	}

	// Set property ‘KeyUrl’:
	reference.KeyUrl = typedInput.KeyUrl

	// Set property ‘SourceVault’:
	var sourceVault SourceVault_Spec
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndKeyReference_Spec populates our KeyVaultAndKeyReference_Spec from the provided source KeyVaultAndKeyReference_Spec
func (reference *KeyVaultAndKeyReference_Spec) AssignPropertiesFromKeyVaultAndKeyReference_Spec(source *v1alpha1api20200930storage.KeyVaultAndKeyReference_Spec) error {

	// KeyUrl
	reference.KeyUrl = genruntime.GetOptionalStringValue(source.KeyUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault_Spec
		err := sourceVault.AssignPropertiesFromSourceVault_Spec(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVault_Spec() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SourceVault_Spec{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndKeyReference_Spec populates the provided destination KeyVaultAndKeyReference_Spec from our KeyVaultAndKeyReference_Spec
func (reference *KeyVaultAndKeyReference_Spec) AssignPropertiesToKeyVaultAndKeyReference_Spec(destination *v1alpha1api20200930storage.KeyVaultAndKeyReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyUrl
	keyUrl := reference.KeyUrl
	destination.KeyUrl = &keyUrl

	// SourceVault
	var sourceVault v1alpha1api20200930storage.SourceVault_Spec
	err := reference.SourceVault.AssignPropertiesToSourceVault_Spec(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSourceVault_Spec() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultAndKeyReference_Status struct {
	// +kubebuilder:validation:Required
	//KeyUrl: Url pointing to a key or secret in KeyVault
	KeyUrl string `json:"keyUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault_Status `json:"sourceVault"`
}

var _ genruntime.FromARMConverter = &KeyVaultAndKeyReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndKeyReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndKeyReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndKeyReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndKeyReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndKeyReference_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyUrl’:
	reference.KeyUrl = typedInput.KeyUrl

	// Set property ‘SourceVault’:
	var sourceVault SourceVault_Status
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndKeyReference_Status populates our KeyVaultAndKeyReference_Status from the provided source KeyVaultAndKeyReference_Status
func (reference *KeyVaultAndKeyReference_Status) AssignPropertiesFromKeyVaultAndKeyReference_Status(source *v1alpha1api20200930storage.KeyVaultAndKeyReference_Status) error {

	// KeyUrl
	reference.KeyUrl = genruntime.GetOptionalStringValue(source.KeyUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault_Status
		err := sourceVault.AssignPropertiesFromSourceVault_Status(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVault_Status() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SourceVault_Status{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndKeyReference_Status populates the provided destination KeyVaultAndKeyReference_Status from our KeyVaultAndKeyReference_Status
func (reference *KeyVaultAndKeyReference_Status) AssignPropertiesToKeyVaultAndKeyReference_Status(destination *v1alpha1api20200930storage.KeyVaultAndKeyReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyUrl
	keyUrl := reference.KeyUrl
	destination.KeyUrl = &keyUrl

	// SourceVault
	var sourceVault v1alpha1api20200930storage.SourceVault_Status
	err := reference.SourceVault.AssignPropertiesToSourceVault_Status(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSourceVault_Status() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultAndSecretReference_Spec struct {
	// +kubebuilder:validation:Required
	//SecretUrl: Url pointing to a key or secret in KeyVault
	SecretUrl string `json:"secretUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault_Spec `json:"sourceVault"`
}

var _ genruntime.ARMTransformer = &KeyVaultAndSecretReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultAndSecretReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultAndSecretReference_SpecARM

	// Set property ‘SecretUrl’:
	result.SecretUrl = reference.SecretUrl

	// Set property ‘SourceVault’:
	sourceVaultARM, err := reference.SourceVault.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.SourceVault = sourceVaultARM.(SourceVault_SpecARM)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndSecretReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndSecretReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndSecretReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndSecretReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndSecretReference_SpecARM, got %T", armInput)
	}

	// Set property ‘SecretUrl’:
	reference.SecretUrl = typedInput.SecretUrl

	// Set property ‘SourceVault’:
	var sourceVault SourceVault_Spec
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndSecretReference_Spec populates our KeyVaultAndSecretReference_Spec from the provided source KeyVaultAndSecretReference_Spec
func (reference *KeyVaultAndSecretReference_Spec) AssignPropertiesFromKeyVaultAndSecretReference_Spec(source *v1alpha1api20200930storage.KeyVaultAndSecretReference_Spec) error {

	// SecretUrl
	reference.SecretUrl = genruntime.GetOptionalStringValue(source.SecretUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault_Spec
		err := sourceVault.AssignPropertiesFromSourceVault_Spec(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVault_Spec() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SourceVault_Spec{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndSecretReference_Spec populates the provided destination KeyVaultAndSecretReference_Spec from our KeyVaultAndSecretReference_Spec
func (reference *KeyVaultAndSecretReference_Spec) AssignPropertiesToKeyVaultAndSecretReference_Spec(destination *v1alpha1api20200930storage.KeyVaultAndSecretReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecretUrl
	secretUrl := reference.SecretUrl
	destination.SecretUrl = &secretUrl

	// SourceVault
	var sourceVault v1alpha1api20200930storage.SourceVault_Spec
	err := reference.SourceVault.AssignPropertiesToSourceVault_Spec(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSourceVault_Spec() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultAndSecretReference_Status struct {
	// +kubebuilder:validation:Required
	//SecretUrl: Url pointing to a key or secret in KeyVault
	SecretUrl string `json:"secretUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault_Status `json:"sourceVault"`
}

var _ genruntime.FromARMConverter = &KeyVaultAndSecretReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultAndSecretReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultAndSecretReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultAndSecretReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultAndSecretReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultAndSecretReference_StatusARM, got %T", armInput)
	}

	// Set property ‘SecretUrl’:
	reference.SecretUrl = typedInput.SecretUrl

	// Set property ‘SourceVault’:
	var sourceVault SourceVault_Status
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultAndSecretReference_Status populates our KeyVaultAndSecretReference_Status from the provided source KeyVaultAndSecretReference_Status
func (reference *KeyVaultAndSecretReference_Status) AssignPropertiesFromKeyVaultAndSecretReference_Status(source *v1alpha1api20200930storage.KeyVaultAndSecretReference_Status) error {

	// SecretUrl
	reference.SecretUrl = genruntime.GetOptionalStringValue(source.SecretUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SourceVault_Status
		err := sourceVault.AssignPropertiesFromSourceVault_Status(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSourceVault_Status() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SourceVault_Status{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultAndSecretReference_Status populates the provided destination KeyVaultAndSecretReference_Status from our KeyVaultAndSecretReference_Status
func (reference *KeyVaultAndSecretReference_Status) AssignPropertiesToKeyVaultAndSecretReference_Status(destination *v1alpha1api20200930storage.KeyVaultAndSecretReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecretUrl
	secretUrl := reference.SecretUrl
	destination.SecretUrl = &secretUrl

	// SourceVault
	var sourceVault v1alpha1api20200930storage.SourceVault_Status
	err := reference.SourceVault.AssignPropertiesToSourceVault_Status(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSourceVault_Status() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SourceVault_Spec struct {
	//Reference: Resource Id
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &SourceVault_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (vault *SourceVault_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if vault == nil {
		return nil, nil
	}
	var result SourceVault_SpecARM

	// Set property ‘Id’:
	if vault.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*vault.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (vault *SourceVault_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SourceVault_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (vault *SourceVault_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(SourceVault_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SourceVault_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSourceVault_Spec populates our SourceVault_Spec from the provided source SourceVault_Spec
func (vault *SourceVault_Spec) AssignPropertiesFromSourceVault_Spec(source *v1alpha1api20200930storage.SourceVault_Spec) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		vault.Reference = &reference
	} else {
		vault.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSourceVault_Spec populates the provided destination SourceVault_Spec from our SourceVault_Spec
func (vault *SourceVault_Spec) AssignPropertiesToSourceVault_Spec(destination *v1alpha1api20200930storage.SourceVault_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if vault.Reference != nil {
		reference := vault.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SourceVault_Status struct {
	//Id: Resource Id
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SourceVault_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (vault *SourceVault_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SourceVault_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (vault *SourceVault_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SourceVault_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SourceVault_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		vault.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSourceVault_Status populates our SourceVault_Status from the provided source SourceVault_Status
func (vault *SourceVault_Status) AssignPropertiesFromSourceVault_Status(source *v1alpha1api20200930storage.SourceVault_Status) error {

	// Id
	vault.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSourceVault_Status populates the provided destination SourceVault_Status from our SourceVault_Status
func (vault *SourceVault_Status) AssignPropertiesToSourceVault_Status(destination *v1alpha1api20200930storage.SourceVault_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(vault.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Disk{}, &DiskList{})
}
