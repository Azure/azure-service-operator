// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSet_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSet_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSet_STATUS_ARM, VirtualMachineScaleSet_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSet_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSet_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSet_STATUS_ARM(subject VirtualMachineScaleSet_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSet_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSet_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSet_STATUS_ARMGenerator()
var virtualMachineScaleSet_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSet_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSet_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSet_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSet_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSet_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSet_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUS_ARM(generators)
	virtualMachineScaleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_STATUS_ARM(generators)
	virtualMachineScaleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_STATUS_ARM{}), generators)

	return virtualMachineScaleSet_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentity_STATUS_ARMGenerator())
	gens["Plan"] = gen.PtrOf(Plan_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
}

func Test_Plan_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlan_STATUS_ARM, Plan_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlan_STATUS_ARM runs a test to see if a specific instance of Plan_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlan_STATUS_ARM(subject Plan_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_STATUS_ARM instances for property testing - lazily instantiated by Plan_STATUS_ARMGenerator()
var plan_STATUS_ARMGenerator gopter.Gen

// Plan_STATUS_ARMGenerator returns a generator of Plan_STATUS_ARM instances for property testing.
func Plan_STATUS_ARMGenerator() gopter.Gen {
	if plan_STATUS_ARMGenerator != nil {
		return plan_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlan_STATUS_ARM(generators)
	plan_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Plan_STATUS_ARM{}), generators)

	return plan_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPlan_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlan_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentity_STATUS_ARM, VirtualMachineScaleSetIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentity_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentity_STATUS_ARM(subject VirtualMachineScaleSetIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIdentity_STATUS_ARMGenerator()
var virtualMachineScaleSetIdentity_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentity_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetIdentity_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIdentity_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentity_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUS_ARM(generators)
	virtualMachineScaleSetIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUS_ARM(generators)
	virtualMachineScaleSetIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_STATUS_ARM{}), generators)

	return virtualMachineScaleSetIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachineScaleSetIdentity_Type_STATUS_None,
		VirtualMachineScaleSetIdentity_Type_STATUS_SystemAssigned,
		VirtualMachineScaleSetIdentity_Type_STATUS_SystemAssignedUserAssigned,
		VirtualMachineScaleSetIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetProperties_STATUS_ARM, VirtualMachineScaleSetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetProperties_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetProperties_STATUS_ARM(subject VirtualMachineScaleSetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetProperties_STATUS_ARMGenerator()
var virtualMachineScaleSetProperties_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetProperties_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetProperties_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetProperties_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetProperties_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUS_ARM(generators)
	virtualMachineScaleSetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUS_ARM(generators)
	virtualMachineScaleSetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_STATUS_ARM{}), generators)

	return virtualMachineScaleSetProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.OneConstOf(OrchestrationMode_STATUS_Flexible, OrchestrationMode_STATUS_Uniform))
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["TimeCreated"] = gen.PtrOf(gen.AlphaString())
	gens["UniqueId"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilities_STATUS_ARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicy_STATUS_ARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicy_STATUS_ARMGenerator())
	gens["SpotRestorePolicy"] = gen.PtrOf(SpotRestorePolicy_STATUS_ARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicy_STATUS_ARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfile_STATUS_ARMGenerator())
}

func Test_AdditionalCapabilities_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilities_STATUS_ARM, AdditionalCapabilities_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilities_STATUS_ARM runs a test to see if a specific instance of AdditionalCapabilities_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilities_STATUS_ARM(subject AdditionalCapabilities_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalCapabilities_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalCapabilities_STATUS_ARM instances for property testing - lazily instantiated by
// AdditionalCapabilities_STATUS_ARMGenerator()
var additionalCapabilities_STATUS_ARMGenerator gopter.Gen

// AdditionalCapabilities_STATUS_ARMGenerator returns a generator of AdditionalCapabilities_STATUS_ARM instances for property testing.
func AdditionalCapabilities_STATUS_ARMGenerator() gopter.Gen {
	if additionalCapabilities_STATUS_ARMGenerator != nil {
		return additionalCapabilities_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilities_STATUS_ARM(generators)
	additionalCapabilities_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_STATUS_ARM{}), generators)

	return additionalCapabilities_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilities_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilities_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HibernationEnabled"] = gen.PtrOf(gen.Bool())
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicy_STATUS_ARM, AutomaticRepairsPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicy_STATUS_ARM runs a test to see if a specific instance of AutomaticRepairsPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicy_STATUS_ARM(subject AutomaticRepairsPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticRepairsPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticRepairsPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// AutomaticRepairsPolicy_STATUS_ARMGenerator()
var automaticRepairsPolicy_STATUS_ARMGenerator gopter.Gen

// AutomaticRepairsPolicy_STATUS_ARMGenerator returns a generator of AutomaticRepairsPolicy_STATUS_ARM instances for property testing.
func AutomaticRepairsPolicy_STATUS_ARMGenerator() gopter.Gen {
	if automaticRepairsPolicy_STATUS_ARMGenerator != nil {
		return automaticRepairsPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_STATUS_ARM(generators)
	automaticRepairsPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_STATUS_ARM{}), generators)

	return automaticRepairsPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
	gens["RepairAction"] = gen.PtrOf(gen.OneConstOf(AutomaticRepairsPolicy_RepairAction_STATUS_Reimage, AutomaticRepairsPolicy_RepairAction_STATUS_Replace, AutomaticRepairsPolicy_RepairAction_STATUS_Restart))
}

func Test_ScaleInPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicy_STATUS_ARM, ScaleInPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicy_STATUS_ARM runs a test to see if a specific instance of ScaleInPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicy_STATUS_ARM(subject ScaleInPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleInPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleInPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// ScaleInPolicy_STATUS_ARMGenerator()
var scaleInPolicy_STATUS_ARMGenerator gopter.Gen

// ScaleInPolicy_STATUS_ARMGenerator returns a generator of ScaleInPolicy_STATUS_ARM instances for property testing.
func ScaleInPolicy_STATUS_ARMGenerator() gopter.Gen {
	if scaleInPolicy_STATUS_ARMGenerator != nil {
		return scaleInPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicy_STATUS_ARM(generators)
	scaleInPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_STATUS_ARM{}), generators)

	return scaleInPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ForceDeletion"] = gen.PtrOf(gen.Bool())
	gens["Rules"] = gen.SliceOf(gen.OneConstOf(ScaleInPolicy_Rules_STATUS_Default, ScaleInPolicy_Rules_STATUS_NewestVM, ScaleInPolicy_Rules_STATUS_OldestVM))
}

func Test_SpotRestorePolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SpotRestorePolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSpotRestorePolicy_STATUS_ARM, SpotRestorePolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSpotRestorePolicy_STATUS_ARM runs a test to see if a specific instance of SpotRestorePolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSpotRestorePolicy_STATUS_ARM(subject SpotRestorePolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SpotRestorePolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SpotRestorePolicy_STATUS_ARM instances for property testing - lazily instantiated by
// SpotRestorePolicy_STATUS_ARMGenerator()
var spotRestorePolicy_STATUS_ARMGenerator gopter.Gen

// SpotRestorePolicy_STATUS_ARMGenerator returns a generator of SpotRestorePolicy_STATUS_ARM instances for property testing.
func SpotRestorePolicy_STATUS_ARMGenerator() gopter.Gen {
	if spotRestorePolicy_STATUS_ARMGenerator != nil {
		return spotRestorePolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSpotRestorePolicy_STATUS_ARM(generators)
	spotRestorePolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SpotRestorePolicy_STATUS_ARM{}), generators)

	return spotRestorePolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSpotRestorePolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSpotRestorePolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RestoreTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicy_STATUS_ARM, UpgradePolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicy_STATUS_ARM runs a test to see if a specific instance of UpgradePolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicy_STATUS_ARM(subject UpgradePolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpgradePolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpgradePolicy_STATUS_ARM instances for property testing - lazily instantiated by
// UpgradePolicy_STATUS_ARMGenerator()
var upgradePolicy_STATUS_ARMGenerator gopter.Gen

// UpgradePolicy_STATUS_ARMGenerator returns a generator of UpgradePolicy_STATUS_ARM instances for property testing.
// We first initialize upgradePolicy_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicy_STATUS_ARMGenerator() gopter.Gen {
	if upgradePolicy_STATUS_ARMGenerator != nil {
		return upgradePolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_STATUS_ARM(generators)
	upgradePolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicy_STATUS_ARM(generators)
	upgradePolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_STATUS_ARM{}), generators)

	return upgradePolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(UpgradePolicy_Mode_STATUS_Automatic, UpgradePolicy_Mode_STATUS_Manual, UpgradePolicy_Mode_STATUS_Rolling))
}

// AddRelatedPropertyGeneratorsForUpgradePolicy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicy_STATUS_ARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicy_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM, VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM(subject VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator()
var virtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing.
func VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM(generators)
	virtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM{}), generators)

	return virtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_UserAssignedIdentities_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetVMProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_STATUS_ARM, VirtualMachineScaleSetVMProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_STATUS_ARM(subject VirtualMachineScaleSetVMProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetVMProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetVMProfile_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetVMProfile_STATUS_ARMGenerator()
var virtualMachineScaleSetVMProfile_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfile_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfile_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfile_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetVMProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUS_ARM(generators)
	virtualMachineScaleSetVMProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUS_ARM(generators)
	virtualMachineScaleSetVMProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_STATUS_ARM{}), generators)

	return virtualMachineScaleSetVMProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_STATUS_Deallocate, EvictionPolicy_STATUS_Delete))
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_STATUS_Low, Priority_STATUS_Regular, Priority_STATUS_Spot))
	gens["UserData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationProfile"] = gen.PtrOf(ApplicationProfile_STATUS_ARMGenerator())
	gens["BillingProfile"] = gen.PtrOf(BillingProfile_STATUS_ARMGenerator())
	gens["CapacityReservation"] = gen.PtrOf(CapacityReservationProfile_STATUS_ARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfile_STATUS_ARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator())
	gens["HardwareProfile"] = gen.PtrOf(VirtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfile_STATUS_ARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfile_STATUS_ARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfile_STATUS_ARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfile_STATUS_ARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicy_STATUS_ARM, AutomaticOSUpgradePolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicy_STATUS_ARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicy_STATUS_ARM(subject AutomaticOSUpgradePolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticOSUpgradePolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticOSUpgradePolicy_STATUS_ARM instances for property testing - lazily instantiated by
// AutomaticOSUpgradePolicy_STATUS_ARMGenerator()
var automaticOSUpgradePolicy_STATUS_ARMGenerator gopter.Gen

// AutomaticOSUpgradePolicy_STATUS_ARMGenerator returns a generator of AutomaticOSUpgradePolicy_STATUS_ARM instances for property testing.
func AutomaticOSUpgradePolicy_STATUS_ARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicy_STATUS_ARMGenerator != nil {
		return automaticOSUpgradePolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_STATUS_ARM(generators)
	automaticOSUpgradePolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_STATUS_ARM{}), generators)

	return automaticOSUpgradePolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
	gens["UseRollingUpgradePolicy"] = gen.PtrOf(gen.Bool())
}

func Test_RollingUpgradePolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicy_STATUS_ARM, RollingUpgradePolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicy_STATUS_ARM runs a test to see if a specific instance of RollingUpgradePolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicy_STATUS_ARM(subject RollingUpgradePolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RollingUpgradePolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RollingUpgradePolicy_STATUS_ARM instances for property testing - lazily instantiated by
// RollingUpgradePolicy_STATUS_ARMGenerator()
var rollingUpgradePolicy_STATUS_ARMGenerator gopter.Gen

// RollingUpgradePolicy_STATUS_ARMGenerator returns a generator of RollingUpgradePolicy_STATUS_ARM instances for property testing.
func RollingUpgradePolicy_STATUS_ARMGenerator() gopter.Gen {
	if rollingUpgradePolicy_STATUS_ARMGenerator != nil {
		return rollingUpgradePolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicy_STATUS_ARM(generators)
	rollingUpgradePolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_STATUS_ARM{}), generators)

	return rollingUpgradePolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_VirtualMachineScaleSetExtensionProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_STATUS_ARM, VirtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_STATUS_ARM(subject VirtualMachineScaleSetExtensionProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProfile_STATUS_ARM instances for property testing - lazily instantiated
// by VirtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator()
var virtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUS_ARM(generators)
	virtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUS_ARM(generators)
	virtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_STATUS_ARM{}), generators)

	return virtualMachineScaleSetExtensionProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Extensions"] = gen.SliceOf(VirtualMachineScaleSetExtension_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetHardwareProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetHardwareProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetHardwareProfile_STATUS_ARM, VirtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetHardwareProfile_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetHardwareProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetHardwareProfile_STATUS_ARM(subject VirtualMachineScaleSetHardwareProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetHardwareProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetHardwareProfile_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator()
var virtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetHardwareProfile_STATUS_ARM instances for property testing.
func VirtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetHardwareProfile_STATUS_ARM(generators)
	virtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetHardwareProfile_STATUS_ARM{}), generators)

	return virtualMachineScaleSetHardwareProfile_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetHardwareProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetHardwareProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["VmSizeProperties"] = gen.PtrOf(VMSizeProperties_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_STATUS_ARM, VirtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_STATUS_ARM(subject VirtualMachineScaleSetNetworkProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkProfile_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator()
var virtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUS_ARM(generators)
	virtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUS_ARM(generators)
	virtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_STATUS_ARM{}), generators)

	return virtualMachineScaleSetNetworkProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["NetworkApiVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetNetworkProfile_NetworkApiVersion_STATUS_20201101))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReference_STATUS_ARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_STATUS_ARM, VirtualMachineScaleSetOSProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_STATUS_ARM(subject VirtualMachineScaleSetOSProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSProfile_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSProfile_STATUS_ARMGenerator()
var virtualMachineScaleSetOSProfile_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfile_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfile_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfile_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetOSProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUS_ARM(generators)
	virtualMachineScaleSetOSProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUS_ARM(generators)
	virtualMachineScaleSetOSProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_STATUS_ARM{}), generators)

	return virtualMachineScaleSetOSProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["AllowExtensionOperations"] = gen.PtrOf(gen.Bool())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfiguration_STATUS_ARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroup_STATUS_ARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfiguration_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_STATUS_ARM, VirtualMachineScaleSetStorageProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_STATUS_ARM(subject VirtualMachineScaleSetStorageProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetStorageProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetStorageProfile_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetStorageProfile_STATUS_ARMGenerator()
var virtualMachineScaleSetStorageProfile_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfile_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_STATUS_ARM instances for property testing.
func VirtualMachineScaleSetStorageProfile_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfile_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetStorageProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_STATUS_ARM(generators)
	virtualMachineScaleSetStorageProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_STATUS_ARM{}), generators)

	return virtualMachineScaleSetStorageProfile_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDisk_STATUS_ARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReference_STATUS_ARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDisk_STATUS_ARMGenerator())
}

func Test_ApiEntityReference_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReference_STATUS_ARM, ApiEntityReference_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReference_STATUS_ARM runs a test to see if a specific instance of ApiEntityReference_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReference_STATUS_ARM(subject ApiEntityReference_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiEntityReference_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiEntityReference_STATUS_ARM instances for property testing - lazily instantiated by
// ApiEntityReference_STATUS_ARMGenerator()
var apiEntityReference_STATUS_ARMGenerator gopter.Gen

// ApiEntityReference_STATUS_ARMGenerator returns a generator of ApiEntityReference_STATUS_ARM instances for property testing.
func ApiEntityReference_STATUS_ARMGenerator() gopter.Gen {
	if apiEntityReference_STATUS_ARMGenerator != nil {
		return apiEntityReference_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReference_STATUS_ARM(generators)
	apiEntityReference_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_STATUS_ARM{}), generators)

	return apiEntityReference_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReference_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReference_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetDataDisk_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_STATUS_ARM, VirtualMachineScaleSetDataDisk_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_STATUS_ARM(subject VirtualMachineScaleSetDataDisk_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetDataDisk_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetDataDisk_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetDataDisk_STATUS_ARMGenerator()
var virtualMachineScaleSetDataDisk_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDisk_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDisk_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDisk_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDisk_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetDataDisk_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUS_ARM(generators)
	virtualMachineScaleSetDataDisk_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUS_ARM(generators)
	virtualMachineScaleSetDataDisk_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_STATUS_ARM{}), generators)

	return virtualMachineScaleSetDataDisk_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_STATUS_None, Caching_STATUS_ReadOnly, Caching_STATUS_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_STATUS_Attach, CreateOption_STATUS_Empty, CreateOption_STATUS_FromImage))
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(DeleteOption_STATUS_Delete, DeleteOption_STATUS_Detach))
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetExtension_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtension_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtension_STATUS_ARM, VirtualMachineScaleSetExtension_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtension_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetExtension_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtension_STATUS_ARM(subject VirtualMachineScaleSetExtension_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtension_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtension_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtension_STATUS_ARMGenerator()
var virtualMachineScaleSetExtension_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetExtension_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetExtension_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetExtension_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtension_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtension_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetExtension_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUS_ARM(generators)
	virtualMachineScaleSetExtension_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUS_ARM(generators)
	virtualMachineScaleSetExtension_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_STATUS_ARM{}), generators)

	return virtualMachineScaleSetExtension_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM, VirtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM(subject VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator()
var virtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM(generators)
	virtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM(generators)
	virtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_STATUS_ARM{}), generators)

	return virtualMachineScaleSetNetworkConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_STATUS_ARM, VirtualMachineScaleSetOSDisk_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_STATUS_ARM(subject VirtualMachineScaleSetOSDisk_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSDisk_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSDisk_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSDisk_STATUS_ARMGenerator()
var virtualMachineScaleSetOSDisk_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDisk_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDisk_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDisk_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDisk_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetOSDisk_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUS_ARM(generators)
	virtualMachineScaleSetOSDisk_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUS_ARM(generators)
	virtualMachineScaleSetOSDisk_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_STATUS_ARM{}), generators)

	return virtualMachineScaleSetOSDisk_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_STATUS_None, Caching_STATUS_ReadOnly, Caching_STATUS_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_STATUS_Attach, CreateOption_STATUS_Empty, CreateOption_STATUS_FromImage))
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(DeleteOption_STATUS_Delete, DeleteOption_STATUS_Detach))
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetOSDisk_OsType_STATUS_Linux, VirtualMachineScaleSetOSDisk_OsType_STATUS_Windows))
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettings_STATUS_ARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDisk_STATUS_ARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_STATUS_ARM, VirtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_STATUS_ARM(subject VirtualMachineScaleSetExtensionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProperties_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator()
var virtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetExtensionProperties_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUS_ARM(generators)
	virtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUS_ARM(generators)
	virtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProperties_STATUS_ARM{}), generators)

	return virtualMachineScaleSetExtensionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradeMinorVersion"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticUpgrade"] = gen.PtrOf(gen.Bool())
	gens["ForceUpdateTag"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisionAfterExtensions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["SuppressFailures"] = gen.PtrOf(gen.Bool())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProtectedSettingsFromKeyVault"] = gen.PtrOf(KeyVaultSecretReference_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM, VirtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM(subject VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator()
var virtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM(generators)
	virtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM(generators)
	virtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_STATUS_ARM{}), generators)

	return virtualMachineScaleSetManagedDiskParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_STATUS_PremiumV2_LRS,
		StorageAccountType_STATUS_Premium_LRS,
		StorageAccountType_STATUS_Premium_ZRS,
		StorageAccountType_STATUS_StandardSSD_LRS,
		StorageAccountType_STATUS_StandardSSD_ZRS,
		StorageAccountType_STATUS_Standard_LRS,
		StorageAccountType_STATUS_UltraSSD_LRS))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(VMDiskSecurityProfile_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM, VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator()
var virtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetNetworkConfigurationProperties_DeleteOption_STATUS_Delete, VirtualMachineScaleSetNetworkConfigurationProperties_DeleteOption_STATUS_Detach))
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetIPConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_STATUS_ARM, VirtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_STATUS_ARM(subject VirtualMachineScaleSetIPConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator()
var virtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUS_ARM(generators)
	virtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUS_ARM(generators)
	virtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_STATUS_ARM{}), generators)

	return virtualMachineScaleSetIPConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM, VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM, VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM(subject VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator()
var virtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM{}), generators)

	return virtualMachineScaleSetIPConfigurationProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIPConfigurationProperties_PrivateIPAddressVersion_STATUS_IPv4, VirtualMachineScaleSetIPConfigurationProperties_PrivateIPAddressVersion_STATUS_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResource_STATUS_ARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResource_STATUS_ARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResource_STATUS_ARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResource_STATUS_ARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReference_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM, VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM instances for property testing -
// lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_DeleteOption_STATUS_Delete, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_DeleteOption_STATUS_Detach))
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_PublicIPAddressVersion_STATUS_IPv4, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_PublicIPAddressVersion_STATUS_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTag_STATUS_ARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTag_STATUS_ARM, VirtualMachineScaleSetIpTag_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTag_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTag_STATUS_ARM(subject VirtualMachineScaleSetIpTag_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIpTag_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIpTag_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIpTag_STATUS_ARMGenerator()
var virtualMachineScaleSetIpTag_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTag_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetIpTag_STATUS_ARM instances for property testing.
func VirtualMachineScaleSetIpTag_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTag_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetIpTag_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_STATUS_ARM(generators)
	virtualMachineScaleSetIpTag_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_STATUS_ARM{}), generators)

	return virtualMachineScaleSetIpTag_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM instances for property testing
// - lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
}
