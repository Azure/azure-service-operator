// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20241101

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/compute/v1api20241101/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CapacityReservationGroup_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationGroup to hub returns original",
		prop.ForAll(RunResourceConversionTestForCapacityReservationGroup, CapacityReservationGroupGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForCapacityReservationGroup tests if a specific instance of CapacityReservationGroup round trips to the hub storage version and back losslessly
func RunResourceConversionTestForCapacityReservationGroup(subject CapacityReservationGroup) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.CapacityReservationGroup
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual CapacityReservationGroup
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationGroup_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationGroup to CapacityReservationGroup via AssignProperties_To_CapacityReservationGroup & AssignProperties_From_CapacityReservationGroup returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapacityReservationGroup, CapacityReservationGroupGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapacityReservationGroup tests if a specific instance of CapacityReservationGroup can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForCapacityReservationGroup(subject CapacityReservationGroup) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.CapacityReservationGroup
	err := copied.AssignProperties_To_CapacityReservationGroup(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CapacityReservationGroup
	err = actual.AssignProperties_From_CapacityReservationGroup(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationGroup_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroup via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroup, CapacityReservationGroupGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroup runs a test to see if a specific instance of CapacityReservationGroup round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroup(subject CapacityReservationGroup) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroup
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroup instances for property testing - lazily instantiated by
// CapacityReservationGroupGenerator()
var capacityReservationGroupGenerator gopter.Gen

// CapacityReservationGroupGenerator returns a generator of CapacityReservationGroup instances for property testing.
func CapacityReservationGroupGenerator() gopter.Gen {
	if capacityReservationGroupGenerator != nil {
		return capacityReservationGroupGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservationGroup(generators)
	capacityReservationGroupGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup{}), generators)

	return capacityReservationGroupGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroup is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroup(gens map[string]gopter.Gen) {
	gens["Spec"] = CapacityReservationGroup_SpecGenerator()
	gens["Status"] = CapacityReservationGroup_STATUSGenerator()
}

func Test_CapacityReservationGroupInstanceView_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationGroupInstanceView_STATUS to CapacityReservationGroupInstanceView_STATUS via AssignProperties_To_CapacityReservationGroupInstanceView_STATUS & AssignProperties_From_CapacityReservationGroupInstanceView_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapacityReservationGroupInstanceView_STATUS, CapacityReservationGroupInstanceView_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapacityReservationGroupInstanceView_STATUS tests if a specific instance of CapacityReservationGroupInstanceView_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForCapacityReservationGroupInstanceView_STATUS(subject CapacityReservationGroupInstanceView_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.CapacityReservationGroupInstanceView_STATUS
	err := copied.AssignProperties_To_CapacityReservationGroupInstanceView_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CapacityReservationGroupInstanceView_STATUS
	err = actual.AssignProperties_From_CapacityReservationGroupInstanceView_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationGroupInstanceView_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroupInstanceView_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroupInstanceView_STATUS, CapacityReservationGroupInstanceView_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroupInstanceView_STATUS runs a test to see if a specific instance of CapacityReservationGroupInstanceView_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroupInstanceView_STATUS(subject CapacityReservationGroupInstanceView_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroupInstanceView_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroupInstanceView_STATUS instances for property testing - lazily instantiated by
// CapacityReservationGroupInstanceView_STATUSGenerator()
var capacityReservationGroupInstanceView_STATUSGenerator gopter.Gen

// CapacityReservationGroupInstanceView_STATUSGenerator returns a generator of CapacityReservationGroupInstanceView_STATUS instances for property testing.
func CapacityReservationGroupInstanceView_STATUSGenerator() gopter.Gen {
	if capacityReservationGroupInstanceView_STATUSGenerator != nil {
		return capacityReservationGroupInstanceView_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservationGroupInstanceView_STATUS(generators)
	capacityReservationGroupInstanceView_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroupInstanceView_STATUS{}), generators)

	return capacityReservationGroupInstanceView_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroupInstanceView_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroupInstanceView_STATUS(gens map[string]gopter.Gen) {
	gens["CapacityReservations"] = gen.SliceOf(CapacityReservationInstanceViewWithName_STATUSGenerator())
	gens["SharedSubscriptionIds"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_CapacityReservationGroupOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationGroupOperatorSpec to CapacityReservationGroupOperatorSpec via AssignProperties_To_CapacityReservationGroupOperatorSpec & AssignProperties_From_CapacityReservationGroupOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapacityReservationGroupOperatorSpec, CapacityReservationGroupOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapacityReservationGroupOperatorSpec tests if a specific instance of CapacityReservationGroupOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForCapacityReservationGroupOperatorSpec(subject CapacityReservationGroupOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.CapacityReservationGroupOperatorSpec
	err := copied.AssignProperties_To_CapacityReservationGroupOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CapacityReservationGroupOperatorSpec
	err = actual.AssignProperties_From_CapacityReservationGroupOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationGroupOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroupOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroupOperatorSpec, CapacityReservationGroupOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroupOperatorSpec runs a test to see if a specific instance of CapacityReservationGroupOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroupOperatorSpec(subject CapacityReservationGroupOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroupOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroupOperatorSpec instances for property testing - lazily instantiated by
// CapacityReservationGroupOperatorSpecGenerator()
var capacityReservationGroupOperatorSpecGenerator gopter.Gen

// CapacityReservationGroupOperatorSpecGenerator returns a generator of CapacityReservationGroupOperatorSpec instances for property testing.
func CapacityReservationGroupOperatorSpecGenerator() gopter.Gen {
	if capacityReservationGroupOperatorSpecGenerator != nil {
		return capacityReservationGroupOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	capacityReservationGroupOperatorSpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroupOperatorSpec{}), generators)

	return capacityReservationGroupOperatorSpecGenerator
}

func Test_CapacityReservationGroup_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationGroup_STATUS to CapacityReservationGroup_STATUS via AssignProperties_To_CapacityReservationGroup_STATUS & AssignProperties_From_CapacityReservationGroup_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapacityReservationGroup_STATUS, CapacityReservationGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapacityReservationGroup_STATUS tests if a specific instance of CapacityReservationGroup_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForCapacityReservationGroup_STATUS(subject CapacityReservationGroup_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.CapacityReservationGroup_STATUS
	err := copied.AssignProperties_To_CapacityReservationGroup_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CapacityReservationGroup_STATUS
	err = actual.AssignProperties_From_CapacityReservationGroup_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationGroup_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroup_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroup_STATUS, CapacityReservationGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroup_STATUS runs a test to see if a specific instance of CapacityReservationGroup_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroup_STATUS(subject CapacityReservationGroup_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroup_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroup_STATUS instances for property testing - lazily instantiated by
// CapacityReservationGroup_STATUSGenerator()
var capacityReservationGroup_STATUSGenerator gopter.Gen

// CapacityReservationGroup_STATUSGenerator returns a generator of CapacityReservationGroup_STATUS instances for property testing.
// We first initialize capacityReservationGroup_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationGroup_STATUSGenerator() gopter.Gen {
	if capacityReservationGroup_STATUSGenerator != nil {
		return capacityReservationGroup_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS(generators)
	capacityReservationGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationGroup_STATUS(generators)
	capacityReservationGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_STATUS{}), generators)

	return capacityReservationGroup_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroup_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroup_STATUS(gens map[string]gopter.Gen) {
	gens["CapacityReservations"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
	gens["InstanceView"] = gen.PtrOf(CapacityReservationGroupInstanceView_STATUSGenerator())
	gens["SharingProfile"] = gen.PtrOf(ResourceSharingProfile_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
	gens["VirtualMachinesAssociated"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_CapacityReservationGroup_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationGroup_Spec to CapacityReservationGroup_Spec via AssignProperties_To_CapacityReservationGroup_Spec & AssignProperties_From_CapacityReservationGroup_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapacityReservationGroup_Spec, CapacityReservationGroup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapacityReservationGroup_Spec tests if a specific instance of CapacityReservationGroup_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForCapacityReservationGroup_Spec(subject CapacityReservationGroup_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.CapacityReservationGroup_Spec
	err := copied.AssignProperties_To_CapacityReservationGroup_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CapacityReservationGroup_Spec
	err = actual.AssignProperties_From_CapacityReservationGroup_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationGroup_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroup_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroup_Spec, CapacityReservationGroup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroup_Spec runs a test to see if a specific instance of CapacityReservationGroup_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroup_Spec(subject CapacityReservationGroup_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroup_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroup_Spec instances for property testing - lazily instantiated by
// CapacityReservationGroup_SpecGenerator()
var capacityReservationGroup_SpecGenerator gopter.Gen

// CapacityReservationGroup_SpecGenerator returns a generator of CapacityReservationGroup_Spec instances for property testing.
// We first initialize capacityReservationGroup_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationGroup_SpecGenerator() gopter.Gen {
	if capacityReservationGroup_SpecGenerator != nil {
		return capacityReservationGroup_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec(generators)
	capacityReservationGroup_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationGroup_Spec(generators)
	capacityReservationGroup_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_Spec{}), generators)

	return capacityReservationGroup_SpecGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroup_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroup_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(CapacityReservationGroupOperatorSpecGenerator())
	gens["SharingProfile"] = gen.PtrOf(ResourceSharingProfileGenerator())
}

func Test_CapacityReservationInstanceViewWithName_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationInstanceViewWithName_STATUS to CapacityReservationInstanceViewWithName_STATUS via AssignProperties_To_CapacityReservationInstanceViewWithName_STATUS & AssignProperties_From_CapacityReservationInstanceViewWithName_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapacityReservationInstanceViewWithName_STATUS, CapacityReservationInstanceViewWithName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapacityReservationInstanceViewWithName_STATUS tests if a specific instance of CapacityReservationInstanceViewWithName_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForCapacityReservationInstanceViewWithName_STATUS(subject CapacityReservationInstanceViewWithName_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.CapacityReservationInstanceViewWithName_STATUS
	err := copied.AssignProperties_To_CapacityReservationInstanceViewWithName_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CapacityReservationInstanceViewWithName_STATUS
	err = actual.AssignProperties_From_CapacityReservationInstanceViewWithName_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationInstanceViewWithName_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationInstanceViewWithName_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationInstanceViewWithName_STATUS, CapacityReservationInstanceViewWithName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationInstanceViewWithName_STATUS runs a test to see if a specific instance of CapacityReservationInstanceViewWithName_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationInstanceViewWithName_STATUS(subject CapacityReservationInstanceViewWithName_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationInstanceViewWithName_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationInstanceViewWithName_STATUS instances for property testing - lazily instantiated by
// CapacityReservationInstanceViewWithName_STATUSGenerator()
var capacityReservationInstanceViewWithName_STATUSGenerator gopter.Gen

// CapacityReservationInstanceViewWithName_STATUSGenerator returns a generator of CapacityReservationInstanceViewWithName_STATUS instances for property testing.
// We first initialize capacityReservationInstanceViewWithName_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationInstanceViewWithName_STATUSGenerator() gopter.Gen {
	if capacityReservationInstanceViewWithName_STATUSGenerator != nil {
		return capacityReservationInstanceViewWithName_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(generators)
	capacityReservationInstanceViewWithName_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationInstanceViewWithName_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(generators)
	capacityReservationInstanceViewWithName_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationInstanceViewWithName_STATUS{}), generators)

	return capacityReservationInstanceViewWithName_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(gens map[string]gopter.Gen) {
	gens["Statuses"] = gen.SliceOf(InstanceViewStatus_STATUSGenerator())
	gens["UtilizationInfo"] = gen.PtrOf(CapacityReservationUtilization_STATUSGenerator())
}

func Test_CapacityReservationUtilization_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from CapacityReservationUtilization_STATUS to CapacityReservationUtilization_STATUS via AssignProperties_To_CapacityReservationUtilization_STATUS & AssignProperties_From_CapacityReservationUtilization_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapacityReservationUtilization_STATUS, CapacityReservationUtilization_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapacityReservationUtilization_STATUS tests if a specific instance of CapacityReservationUtilization_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForCapacityReservationUtilization_STATUS(subject CapacityReservationUtilization_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.CapacityReservationUtilization_STATUS
	err := copied.AssignProperties_To_CapacityReservationUtilization_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual CapacityReservationUtilization_STATUS
	err = actual.AssignProperties_From_CapacityReservationUtilization_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_CapacityReservationUtilization_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationUtilization_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationUtilization_STATUS, CapacityReservationUtilization_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationUtilization_STATUS runs a test to see if a specific instance of CapacityReservationUtilization_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationUtilization_STATUS(subject CapacityReservationUtilization_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationUtilization_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationUtilization_STATUS instances for property testing - lazily instantiated by
// CapacityReservationUtilization_STATUSGenerator()
var capacityReservationUtilization_STATUSGenerator gopter.Gen

// CapacityReservationUtilization_STATUSGenerator returns a generator of CapacityReservationUtilization_STATUS instances for property testing.
// We first initialize capacityReservationUtilization_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationUtilization_STATUSGenerator() gopter.Gen {
	if capacityReservationUtilization_STATUSGenerator != nil {
		return capacityReservationUtilization_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	capacityReservationUtilization_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationUtilization_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	capacityReservationUtilization_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationUtilization_STATUS{}), generators)

	return capacityReservationUtilization_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(gens map[string]gopter.Gen) {
	gens["CurrentCapacity"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS(gens map[string]gopter.Gen) {
	gens["VirtualMachinesAllocated"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_ResourceSharingProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ResourceSharingProfile to ResourceSharingProfile via AssignProperties_To_ResourceSharingProfile & AssignProperties_From_ResourceSharingProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForResourceSharingProfile, ResourceSharingProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForResourceSharingProfile tests if a specific instance of ResourceSharingProfile can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForResourceSharingProfile(subject ResourceSharingProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ResourceSharingProfile
	err := copied.AssignProperties_To_ResourceSharingProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ResourceSharingProfile
	err = actual.AssignProperties_From_ResourceSharingProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ResourceSharingProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSharingProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSharingProfile, ResourceSharingProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSharingProfile runs a test to see if a specific instance of ResourceSharingProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSharingProfile(subject ResourceSharingProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSharingProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSharingProfile instances for property testing - lazily instantiated by
// ResourceSharingProfileGenerator()
var resourceSharingProfileGenerator gopter.Gen

// ResourceSharingProfileGenerator returns a generator of ResourceSharingProfile instances for property testing.
func ResourceSharingProfileGenerator() gopter.Gen {
	if resourceSharingProfileGenerator != nil {
		return resourceSharingProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceSharingProfile(generators)
	resourceSharingProfileGenerator = gen.Struct(reflect.TypeOf(ResourceSharingProfile{}), generators)

	return resourceSharingProfileGenerator
}

// AddRelatedPropertyGeneratorsForResourceSharingProfile is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceSharingProfile(gens map[string]gopter.Gen) {
	gens["SubscriptionIds"] = gen.SliceOf(SubResourceGenerator())
}

func Test_ResourceSharingProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ResourceSharingProfile_STATUS to ResourceSharingProfile_STATUS via AssignProperties_To_ResourceSharingProfile_STATUS & AssignProperties_From_ResourceSharingProfile_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForResourceSharingProfile_STATUS, ResourceSharingProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForResourceSharingProfile_STATUS tests if a specific instance of ResourceSharingProfile_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForResourceSharingProfile_STATUS(subject ResourceSharingProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ResourceSharingProfile_STATUS
	err := copied.AssignProperties_To_ResourceSharingProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ResourceSharingProfile_STATUS
	err = actual.AssignProperties_From_ResourceSharingProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ResourceSharingProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSharingProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSharingProfile_STATUS, ResourceSharingProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSharingProfile_STATUS runs a test to see if a specific instance of ResourceSharingProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSharingProfile_STATUS(subject ResourceSharingProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSharingProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSharingProfile_STATUS instances for property testing - lazily instantiated by
// ResourceSharingProfile_STATUSGenerator()
var resourceSharingProfile_STATUSGenerator gopter.Gen

// ResourceSharingProfile_STATUSGenerator returns a generator of ResourceSharingProfile_STATUS instances for property testing.
func ResourceSharingProfile_STATUSGenerator() gopter.Gen {
	if resourceSharingProfile_STATUSGenerator != nil {
		return resourceSharingProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceSharingProfile_STATUS(generators)
	resourceSharingProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ResourceSharingProfile_STATUS{}), generators)

	return resourceSharingProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForResourceSharingProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceSharingProfile_STATUS(gens map[string]gopter.Gen) {
	gens["SubscriptionIds"] = gen.SliceOf(SubResource_STATUSGenerator())
}

func Test_SubResourceReadOnly_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SubResourceReadOnly_STATUS to SubResourceReadOnly_STATUS via AssignProperties_To_SubResourceReadOnly_STATUS & AssignProperties_From_SubResourceReadOnly_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForSubResourceReadOnly_STATUS, SubResourceReadOnly_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSubResourceReadOnly_STATUS tests if a specific instance of SubResourceReadOnly_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForSubResourceReadOnly_STATUS(subject SubResourceReadOnly_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.SubResourceReadOnly_STATUS
	err := copied.AssignProperties_To_SubResourceReadOnly_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SubResourceReadOnly_STATUS
	err = actual.AssignProperties_From_SubResourceReadOnly_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SubResourceReadOnly_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResourceReadOnly_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceReadOnly_STATUS, SubResourceReadOnly_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceReadOnly_STATUS runs a test to see if a specific instance of SubResourceReadOnly_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceReadOnly_STATUS(subject SubResourceReadOnly_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResourceReadOnly_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResourceReadOnly_STATUS instances for property testing - lazily instantiated by
// SubResourceReadOnly_STATUSGenerator()
var subResourceReadOnly_STATUSGenerator gopter.Gen

// SubResourceReadOnly_STATUSGenerator returns a generator of SubResourceReadOnly_STATUS instances for property testing.
func SubResourceReadOnly_STATUSGenerator() gopter.Gen {
	if subResourceReadOnly_STATUSGenerator != nil {
		return subResourceReadOnly_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS(generators)
	subResourceReadOnly_STATUSGenerator = gen.Struct(reflect.TypeOf(SubResourceReadOnly_STATUS{}), generators)

	return subResourceReadOnly_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
