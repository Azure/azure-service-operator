// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20241101

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/compute/v1api20241101/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/compute/v1api20241101/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,compute}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2024-11-01/ComputeRP.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}
type CapacityReservationGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CapacityReservationGroup_Spec   `json:"spec,omitempty"`
	Status            CapacityReservationGroup_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &CapacityReservationGroup{}

// GetConditions returns the conditions of the resource
func (group *CapacityReservationGroup) GetConditions() conditions.Conditions {
	return group.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (group *CapacityReservationGroup) SetConditions(conditions conditions.Conditions) {
	group.Status.Conditions = conditions
}

var _ conversion.Convertible = &CapacityReservationGroup{}

// ConvertFrom populates our CapacityReservationGroup from the provided hub CapacityReservationGroup
func (group *CapacityReservationGroup) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.CapacityReservationGroup)
	if !ok {
		return fmt.Errorf("expected compute/v1api20241101/storage/CapacityReservationGroup but received %T instead", hub)
	}

	return group.AssignProperties_From_CapacityReservationGroup(source)
}

// ConvertTo populates the provided hub CapacityReservationGroup from our CapacityReservationGroup
func (group *CapacityReservationGroup) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.CapacityReservationGroup)
	if !ok {
		return fmt.Errorf("expected compute/v1api20241101/storage/CapacityReservationGroup but received %T instead", hub)
	}

	return group.AssignProperties_To_CapacityReservationGroup(destination)
}

var _ configmaps.Exporter = &CapacityReservationGroup{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (group *CapacityReservationGroup) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if group.Spec.OperatorSpec == nil {
		return nil
	}
	return group.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &CapacityReservationGroup{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (group *CapacityReservationGroup) SecretDestinationExpressions() []*core.DestinationExpression {
	if group.Spec.OperatorSpec == nil {
		return nil
	}
	return group.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &CapacityReservationGroup{}

// InitializeSpec initializes the spec for this resource from the given status
func (group *CapacityReservationGroup) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*CapacityReservationGroup_STATUS); ok {
		return group.Spec.Initialize_From_CapacityReservationGroup_STATUS(s)
	}

	return fmt.Errorf("expected Status of type CapacityReservationGroup_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &CapacityReservationGroup{}

// AzureName returns the Azure name of the resource
func (group *CapacityReservationGroup) AzureName() string {
	return group.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-11-01"
func (group CapacityReservationGroup) GetAPIVersion() string {
	return "2024-11-01"
}

// GetResourceScope returns the scope of the resource
func (group *CapacityReservationGroup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (group *CapacityReservationGroup) GetSpec() genruntime.ConvertibleSpec {
	return &group.Spec
}

// GetStatus returns the status of this resource
func (group *CapacityReservationGroup) GetStatus() genruntime.ConvertibleStatus {
	return &group.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (group *CapacityReservationGroup) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/capacityReservationGroups"
func (group *CapacityReservationGroup) GetType() string {
	return "Microsoft.Compute/capacityReservationGroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (group *CapacityReservationGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &CapacityReservationGroup_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (group *CapacityReservationGroup) Owner() *genruntime.ResourceReference {
	if group.Spec.Owner == nil {
		return nil
	}

	ownerGroup, ownerKind := genruntime.LookupOwnerGroupKind(group.Spec)
	return group.Spec.Owner.AsResourceReference(ownerGroup, ownerKind)
}

// SetStatus sets the status of this resource
func (group *CapacityReservationGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*CapacityReservationGroup_STATUS); ok {
		group.Status = *st
		return nil
	}

	// Convert status to required version
	var st CapacityReservationGroup_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	group.Status = st
	return nil
}

// AssignProperties_From_CapacityReservationGroup populates our CapacityReservationGroup from the provided source CapacityReservationGroup
func (group *CapacityReservationGroup) AssignProperties_From_CapacityReservationGroup(source *storage.CapacityReservationGroup) error {

	// ObjectMeta
	group.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec CapacityReservationGroup_Spec
	err := spec.AssignProperties_From_CapacityReservationGroup_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationGroup_Spec() to populate field Spec")
	}
	group.Spec = spec

	// Status
	var status CapacityReservationGroup_STATUS
	err = status.AssignProperties_From_CapacityReservationGroup_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationGroup_STATUS() to populate field Status")
	}
	group.Status = status

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationGroup populates the provided destination CapacityReservationGroup from our CapacityReservationGroup
func (group *CapacityReservationGroup) AssignProperties_To_CapacityReservationGroup(destination *storage.CapacityReservationGroup) error {

	// ObjectMeta
	destination.ObjectMeta = *group.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.CapacityReservationGroup_Spec
	err := group.Spec.AssignProperties_To_CapacityReservationGroup_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationGroup_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.CapacityReservationGroup_STATUS
	err = group.Status.AssignProperties_To_CapacityReservationGroup_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationGroup_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (group *CapacityReservationGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: group.Spec.OriginalVersion(),
		Kind:    "CapacityReservationGroup",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2024-11-01/ComputeRP.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}
type CapacityReservationGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CapacityReservationGroup `json:"items"`
}

type CapacityReservationGroup_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *CapacityReservationGroupOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// SharingProfile: Specifies the settings to enable sharing across subscriptions for the capacity reservation group
	// resource. The capacity reservation group resource can generally be shared across subscriptions belonging to a single
	// Azure AAD tenant or across AAD tenants if there is a trust relationship established between the tenants.  Block capacity
	// reservation does not support sharing across subscriptions. Note: Minimum api-version: 2023-09-01. Please refer to
	// https://aka.ms/computereservationsharing for more details.
	SharingProfile *ResourceSharingProfile `json:"sharingProfile,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Zones: The availability zones.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &CapacityReservationGroup_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (group *CapacityReservationGroup_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if group == nil {
		return nil, nil
	}
	result := &arm.CapacityReservationGroup_Spec{}

	// Set property "Location":
	if group.Location != nil {
		location := *group.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if group.SharingProfile != nil {
		result.Properties = &arm.CapacityReservationGroupProperties{}
	}
	if group.SharingProfile != nil {
		sharingProfile_ARM, err := group.SharingProfile.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sharingProfile := *sharingProfile_ARM.(*arm.ResourceSharingProfile)
		result.Properties.SharingProfile = &sharingProfile
	}

	// Set property "Tags":
	if group.Tags != nil {
		result.Tags = make(map[string]string, len(group.Tags))
		for key, value := range group.Tags {
			result.Tags[key] = value
		}
	}

	// Set property "Zones":
	for _, item := range group.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *CapacityReservationGroup_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservationGroup_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *CapacityReservationGroup_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservationGroup_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservationGroup_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	group.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		group.Location = &location
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	group.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "SharingProfile":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SharingProfile != nil {
			var sharingProfile1 ResourceSharingProfile
			err := sharingProfile1.PopulateFromARM(owner, *typedInput.Properties.SharingProfile)
			if err != nil {
				return err
			}
			sharingProfile := sharingProfile1
			group.SharingProfile = &sharingProfile
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		group.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			group.Tags[key] = value
		}
	}

	// Set property "Zones":
	for _, item := range typedInput.Zones {
		group.Zones = append(group.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &CapacityReservationGroup_Spec{}

// ConvertSpecFrom populates our CapacityReservationGroup_Spec from the provided source
func (group *CapacityReservationGroup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.CapacityReservationGroup_Spec)
	if ok {
		// Populate our instance from source
		return group.AssignProperties_From_CapacityReservationGroup_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.CapacityReservationGroup_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = group.AssignProperties_From_CapacityReservationGroup_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our CapacityReservationGroup_Spec
func (group *CapacityReservationGroup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.CapacityReservationGroup_Spec)
	if ok {
		// Populate destination from our instance
		return group.AssignProperties_To_CapacityReservationGroup_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.CapacityReservationGroup_Spec{}
	err := group.AssignProperties_To_CapacityReservationGroup_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_CapacityReservationGroup_Spec populates our CapacityReservationGroup_Spec from the provided source CapacityReservationGroup_Spec
func (group *CapacityReservationGroup_Spec) AssignProperties_From_CapacityReservationGroup_Spec(source *storage.CapacityReservationGroup_Spec) error {

	// AzureName
	group.AzureName = source.AzureName

	// Location
	group.Location = genruntime.ClonePointerToString(source.Location)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec CapacityReservationGroupOperatorSpec
		err := operatorSpec.AssignProperties_From_CapacityReservationGroupOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationGroupOperatorSpec() to populate field OperatorSpec")
		}
		group.OperatorSpec = &operatorSpec
	} else {
		group.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		group.Owner = &owner
	} else {
		group.Owner = nil
	}

	// SharingProfile
	if source.SharingProfile != nil {
		var sharingProfile ResourceSharingProfile
		err := sharingProfile.AssignProperties_From_ResourceSharingProfile(source.SharingProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_ResourceSharingProfile() to populate field SharingProfile")
		}
		group.SharingProfile = &sharingProfile
	} else {
		group.SharingProfile = nil
	}

	// Tags
	group.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	group.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationGroup_Spec populates the provided destination CapacityReservationGroup_Spec from our CapacityReservationGroup_Spec
func (group *CapacityReservationGroup_Spec) AssignProperties_To_CapacityReservationGroup_Spec(destination *storage.CapacityReservationGroup_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = group.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(group.Location)

	// OperatorSpec
	if group.OperatorSpec != nil {
		var operatorSpec storage.CapacityReservationGroupOperatorSpec
		err := group.OperatorSpec.AssignProperties_To_CapacityReservationGroupOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationGroupOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = group.OriginalVersion()

	// Owner
	if group.Owner != nil {
		owner := group.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// SharingProfile
	if group.SharingProfile != nil {
		var sharingProfile storage.ResourceSharingProfile
		err := group.SharingProfile.AssignProperties_To_ResourceSharingProfile(&sharingProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_ResourceSharingProfile() to populate field SharingProfile")
		}
		destination.SharingProfile = &sharingProfile
	} else {
		destination.SharingProfile = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(group.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(group.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_CapacityReservationGroup_STATUS populates our CapacityReservationGroup_Spec from the provided source CapacityReservationGroup_STATUS
func (group *CapacityReservationGroup_Spec) Initialize_From_CapacityReservationGroup_STATUS(source *CapacityReservationGroup_STATUS) error {

	// Location
	group.Location = genruntime.ClonePointerToString(source.Location)

	// SharingProfile
	if source.SharingProfile != nil {
		var sharingProfile ResourceSharingProfile
		err := sharingProfile.Initialize_From_ResourceSharingProfile_STATUS(source.SharingProfile)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_ResourceSharingProfile_STATUS() to populate field SharingProfile")
		}
		group.SharingProfile = &sharingProfile
	} else {
		group.SharingProfile = nil
	}

	// Tags
	group.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	group.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (group *CapacityReservationGroup_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (group *CapacityReservationGroup_Spec) SetAzureName(azureName string) {
	group.AzureName = azureName
}

// Specifies information about the capacity reservation group that the capacity reservations should be assigned to.
// Currently, a capacity reservation can only be added to a capacity reservation group at creation time. An existing
// capacity reservation cannot be added or moved to another capacity reservation group.
type CapacityReservationGroup_STATUS struct {
	// CapacityReservations: A list of all capacity reservation resource ids that belong to capacity reservation group.
	CapacityReservations []SubResourceReadOnly_STATUS `json:"capacityReservations,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// InstanceView: The capacity reservation group instance view which has the list of instance views for all the capacity
	// reservations that belong to the capacity reservation group.
	InstanceView *CapacityReservationGroupInstanceView_STATUS `json:"instanceView,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// SharingProfile: Specifies the settings to enable sharing across subscriptions for the capacity reservation group
	// resource. The capacity reservation group resource can generally be shared across subscriptions belonging to a single
	// Azure AAD tenant or across AAD tenants if there is a trust relationship established between the tenants.  Block capacity
	// reservation does not support sharing across subscriptions. Note: Minimum api-version: 2023-09-01. Please refer to
	// https://aka.ms/computereservationsharing for more details.
	SharingProfile *ResourceSharingProfile_STATUS `json:"sharingProfile,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	// VirtualMachinesAssociated: A list of references to all virtual machines associated to the capacity reservation group.
	VirtualMachinesAssociated []SubResourceReadOnly_STATUS `json:"virtualMachinesAssociated,omitempty"`

	// Zones: The availability zones.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &CapacityReservationGroup_STATUS{}

// ConvertStatusFrom populates our CapacityReservationGroup_STATUS from the provided source
func (group *CapacityReservationGroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.CapacityReservationGroup_STATUS)
	if ok {
		// Populate our instance from source
		return group.AssignProperties_From_CapacityReservationGroup_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.CapacityReservationGroup_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = group.AssignProperties_From_CapacityReservationGroup_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our CapacityReservationGroup_STATUS
func (group *CapacityReservationGroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.CapacityReservationGroup_STATUS)
	if ok {
		// Populate destination from our instance
		return group.AssignProperties_To_CapacityReservationGroup_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.CapacityReservationGroup_STATUS{}
	err := group.AssignProperties_To_CapacityReservationGroup_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &CapacityReservationGroup_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *CapacityReservationGroup_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservationGroup_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *CapacityReservationGroup_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservationGroup_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservationGroup_STATUS, got %T", armInput)
	}

	// Set property "CapacityReservations":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.CapacityReservations {
			var item1 SubResourceReadOnly_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			group.CapacityReservations = append(group.CapacityReservations, item1)
		}
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		group.Id = &id
	}

	// Set property "InstanceView":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InstanceView != nil {
			var instanceView1 CapacityReservationGroupInstanceView_STATUS
			err := instanceView1.PopulateFromARM(owner, *typedInput.Properties.InstanceView)
			if err != nil {
				return err
			}
			instanceView := instanceView1
			group.InstanceView = &instanceView
		}
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		group.Location = &location
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		group.Name = &name
	}

	// Set property "SharingProfile":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SharingProfile != nil {
			var sharingProfile1 ResourceSharingProfile_STATUS
			err := sharingProfile1.PopulateFromARM(owner, *typedInput.Properties.SharingProfile)
			if err != nil {
				return err
			}
			sharingProfile := sharingProfile1
			group.SharingProfile = &sharingProfile
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		group.SystemData = &systemData
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		group.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			group.Tags[key] = value
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		group.Type = &typeVar
	}

	// Set property "VirtualMachinesAssociated":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.VirtualMachinesAssociated {
			var item1 SubResourceReadOnly_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			group.VirtualMachinesAssociated = append(group.VirtualMachinesAssociated, item1)
		}
	}

	// Set property "Zones":
	for _, item := range typedInput.Zones {
		group.Zones = append(group.Zones, item)
	}

	// No error
	return nil
}

// AssignProperties_From_CapacityReservationGroup_STATUS populates our CapacityReservationGroup_STATUS from the provided source CapacityReservationGroup_STATUS
func (group *CapacityReservationGroup_STATUS) AssignProperties_From_CapacityReservationGroup_STATUS(source *storage.CapacityReservationGroup_STATUS) error {

	// CapacityReservations
	if source.CapacityReservations != nil {
		capacityReservationList := make([]SubResourceReadOnly_STATUS, len(source.CapacityReservations))
		for capacityReservationIndex, capacityReservationItem := range source.CapacityReservations {
			var capacityReservation SubResourceReadOnly_STATUS
			err := capacityReservation.AssignProperties_From_SubResourceReadOnly_STATUS(&capacityReservationItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResourceReadOnly_STATUS() to populate field CapacityReservations")
			}
			capacityReservationList[capacityReservationIndex] = capacityReservation
		}
		group.CapacityReservations = capacityReservationList
	} else {
		group.CapacityReservations = nil
	}

	// Conditions
	group.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	group.Id = genruntime.ClonePointerToString(source.Id)

	// InstanceView
	if source.InstanceView != nil {
		var instanceView CapacityReservationGroupInstanceView_STATUS
		err := instanceView.AssignProperties_From_CapacityReservationGroupInstanceView_STATUS(source.InstanceView)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationGroupInstanceView_STATUS() to populate field InstanceView")
		}
		group.InstanceView = &instanceView
	} else {
		group.InstanceView = nil
	}

	// Location
	group.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	group.Name = genruntime.ClonePointerToString(source.Name)

	// SharingProfile
	if source.SharingProfile != nil {
		var sharingProfile ResourceSharingProfile_STATUS
		err := sharingProfile.AssignProperties_From_ResourceSharingProfile_STATUS(source.SharingProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_ResourceSharingProfile_STATUS() to populate field SharingProfile")
		}
		group.SharingProfile = &sharingProfile
	} else {
		group.SharingProfile = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		group.SystemData = &systemDatum
	} else {
		group.SystemData = nil
	}

	// Tags
	group.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	group.Type = genruntime.ClonePointerToString(source.Type)

	// VirtualMachinesAssociated
	if source.VirtualMachinesAssociated != nil {
		virtualMachinesAssociatedList := make([]SubResourceReadOnly_STATUS, len(source.VirtualMachinesAssociated))
		for virtualMachinesAssociatedIndex, virtualMachinesAssociatedItem := range source.VirtualMachinesAssociated {
			var virtualMachinesAssociated SubResourceReadOnly_STATUS
			err := virtualMachinesAssociated.AssignProperties_From_SubResourceReadOnly_STATUS(&virtualMachinesAssociatedItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAssociated")
			}
			virtualMachinesAssociatedList[virtualMachinesAssociatedIndex] = virtualMachinesAssociated
		}
		group.VirtualMachinesAssociated = virtualMachinesAssociatedList
	} else {
		group.VirtualMachinesAssociated = nil
	}

	// Zones
	group.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationGroup_STATUS populates the provided destination CapacityReservationGroup_STATUS from our CapacityReservationGroup_STATUS
func (group *CapacityReservationGroup_STATUS) AssignProperties_To_CapacityReservationGroup_STATUS(destination *storage.CapacityReservationGroup_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CapacityReservations
	if group.CapacityReservations != nil {
		capacityReservationList := make([]storage.SubResourceReadOnly_STATUS, len(group.CapacityReservations))
		for capacityReservationIndex, capacityReservationItem := range group.CapacityReservations {
			var capacityReservation storage.SubResourceReadOnly_STATUS
			err := capacityReservationItem.AssignProperties_To_SubResourceReadOnly_STATUS(&capacityReservation)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResourceReadOnly_STATUS() to populate field CapacityReservations")
			}
			capacityReservationList[capacityReservationIndex] = capacityReservation
		}
		destination.CapacityReservations = capacityReservationList
	} else {
		destination.CapacityReservations = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(group.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(group.Id)

	// InstanceView
	if group.InstanceView != nil {
		var instanceView storage.CapacityReservationGroupInstanceView_STATUS
		err := group.InstanceView.AssignProperties_To_CapacityReservationGroupInstanceView_STATUS(&instanceView)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationGroupInstanceView_STATUS() to populate field InstanceView")
		}
		destination.InstanceView = &instanceView
	} else {
		destination.InstanceView = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(group.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(group.Name)

	// SharingProfile
	if group.SharingProfile != nil {
		var sharingProfile storage.ResourceSharingProfile_STATUS
		err := group.SharingProfile.AssignProperties_To_ResourceSharingProfile_STATUS(&sharingProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_ResourceSharingProfile_STATUS() to populate field SharingProfile")
		}
		destination.SharingProfile = &sharingProfile
	} else {
		destination.SharingProfile = nil
	}

	// SystemData
	if group.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := group.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(group.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(group.Type)

	// VirtualMachinesAssociated
	if group.VirtualMachinesAssociated != nil {
		virtualMachinesAssociatedList := make([]storage.SubResourceReadOnly_STATUS, len(group.VirtualMachinesAssociated))
		for virtualMachinesAssociatedIndex, virtualMachinesAssociatedItem := range group.VirtualMachinesAssociated {
			var virtualMachinesAssociated storage.SubResourceReadOnly_STATUS
			err := virtualMachinesAssociatedItem.AssignProperties_To_SubResourceReadOnly_STATUS(&virtualMachinesAssociated)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAssociated")
			}
			virtualMachinesAssociatedList[virtualMachinesAssociatedIndex] = virtualMachinesAssociated
		}
		destination.VirtualMachinesAssociated = virtualMachinesAssociatedList
	} else {
		destination.VirtualMachinesAssociated = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(group.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CapacityReservationGroupInstanceView_STATUS struct {
	// CapacityReservations: List of instance view of the capacity reservations under the capacity reservation group.
	CapacityReservations []CapacityReservationInstanceViewWithName_STATUS `json:"capacityReservations,omitempty"`

	// SharedSubscriptionIds: List of the subscriptions that the capacity reservation group is shared with. Note: Minimum
	// api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
	SharedSubscriptionIds []SubResourceReadOnly_STATUS `json:"sharedSubscriptionIds,omitempty"`
}

var _ genruntime.FromARMConverter = &CapacityReservationGroupInstanceView_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *CapacityReservationGroupInstanceView_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservationGroupInstanceView_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *CapacityReservationGroupInstanceView_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservationGroupInstanceView_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservationGroupInstanceView_STATUS, got %T", armInput)
	}

	// Set property "CapacityReservations":
	for _, item := range typedInput.CapacityReservations {
		var item1 CapacityReservationInstanceViewWithName_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.CapacityReservations = append(view.CapacityReservations, item1)
	}

	// Set property "SharedSubscriptionIds":
	for _, item := range typedInput.SharedSubscriptionIds {
		var item1 SubResourceReadOnly_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.SharedSubscriptionIds = append(view.SharedSubscriptionIds, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_CapacityReservationGroupInstanceView_STATUS populates our CapacityReservationGroupInstanceView_STATUS from the provided source CapacityReservationGroupInstanceView_STATUS
func (view *CapacityReservationGroupInstanceView_STATUS) AssignProperties_From_CapacityReservationGroupInstanceView_STATUS(source *storage.CapacityReservationGroupInstanceView_STATUS) error {

	// CapacityReservations
	if source.CapacityReservations != nil {
		capacityReservationList := make([]CapacityReservationInstanceViewWithName_STATUS, len(source.CapacityReservations))
		for capacityReservationIndex, capacityReservationItem := range source.CapacityReservations {
			var capacityReservation CapacityReservationInstanceViewWithName_STATUS
			err := capacityReservation.AssignProperties_From_CapacityReservationInstanceViewWithName_STATUS(&capacityReservationItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationInstanceViewWithName_STATUS() to populate field CapacityReservations")
			}
			capacityReservationList[capacityReservationIndex] = capacityReservation
		}
		view.CapacityReservations = capacityReservationList
	} else {
		view.CapacityReservations = nil
	}

	// SharedSubscriptionIds
	if source.SharedSubscriptionIds != nil {
		sharedSubscriptionIdList := make([]SubResourceReadOnly_STATUS, len(source.SharedSubscriptionIds))
		for sharedSubscriptionIdIndex, sharedSubscriptionIdItem := range source.SharedSubscriptionIds {
			var sharedSubscriptionId SubResourceReadOnly_STATUS
			err := sharedSubscriptionId.AssignProperties_From_SubResourceReadOnly_STATUS(&sharedSubscriptionIdItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResourceReadOnly_STATUS() to populate field SharedSubscriptionIds")
			}
			sharedSubscriptionIdList[sharedSubscriptionIdIndex] = sharedSubscriptionId
		}
		view.SharedSubscriptionIds = sharedSubscriptionIdList
	} else {
		view.SharedSubscriptionIds = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationGroupInstanceView_STATUS populates the provided destination CapacityReservationGroupInstanceView_STATUS from our CapacityReservationGroupInstanceView_STATUS
func (view *CapacityReservationGroupInstanceView_STATUS) AssignProperties_To_CapacityReservationGroupInstanceView_STATUS(destination *storage.CapacityReservationGroupInstanceView_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CapacityReservations
	if view.CapacityReservations != nil {
		capacityReservationList := make([]storage.CapacityReservationInstanceViewWithName_STATUS, len(view.CapacityReservations))
		for capacityReservationIndex, capacityReservationItem := range view.CapacityReservations {
			var capacityReservation storage.CapacityReservationInstanceViewWithName_STATUS
			err := capacityReservationItem.AssignProperties_To_CapacityReservationInstanceViewWithName_STATUS(&capacityReservation)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationInstanceViewWithName_STATUS() to populate field CapacityReservations")
			}
			capacityReservationList[capacityReservationIndex] = capacityReservation
		}
		destination.CapacityReservations = capacityReservationList
	} else {
		destination.CapacityReservations = nil
	}

	// SharedSubscriptionIds
	if view.SharedSubscriptionIds != nil {
		sharedSubscriptionIdList := make([]storage.SubResourceReadOnly_STATUS, len(view.SharedSubscriptionIds))
		for sharedSubscriptionIdIndex, sharedSubscriptionIdItem := range view.SharedSubscriptionIds {
			var sharedSubscriptionId storage.SubResourceReadOnly_STATUS
			err := sharedSubscriptionIdItem.AssignProperties_To_SubResourceReadOnly_STATUS(&sharedSubscriptionId)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResourceReadOnly_STATUS() to populate field SharedSubscriptionIds")
			}
			sharedSubscriptionIdList[sharedSubscriptionIdIndex] = sharedSubscriptionId
		}
		destination.SharedSubscriptionIds = sharedSubscriptionIdList
	} else {
		destination.SharedSubscriptionIds = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type CapacityReservationGroupOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_CapacityReservationGroupOperatorSpec populates our CapacityReservationGroupOperatorSpec from the provided source CapacityReservationGroupOperatorSpec
func (operator *CapacityReservationGroupOperatorSpec) AssignProperties_From_CapacityReservationGroupOperatorSpec(source *storage.CapacityReservationGroupOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationGroupOperatorSpec populates the provided destination CapacityReservationGroupOperatorSpec from our CapacityReservationGroupOperatorSpec
func (operator *CapacityReservationGroupOperatorSpec) AssignProperties_To_CapacityReservationGroupOperatorSpec(destination *storage.CapacityReservationGroupOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceSharingProfile struct {
	// SubscriptionIds: Specifies an array of subscription resource IDs that capacity reservation group is shared with. Block
	// Capacity Reservations does not support sharing across subscriptions. Note: Minimum api-version: 2023-09-01. Please refer
	// to https://aka.ms/computereservationsharing for more details.
	SubscriptionIds []SubResource `json:"subscriptionIds,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceSharingProfile{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *ResourceSharingProfile) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	result := &arm.ResourceSharingProfile{}

	// Set property "SubscriptionIds":
	for _, item := range profile.SubscriptionIds {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.SubscriptionIds = append(result.SubscriptionIds, *item_ARM.(*arm.SubResource))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *ResourceSharingProfile) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ResourceSharingProfile{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *ResourceSharingProfile) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ResourceSharingProfile)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ResourceSharingProfile, got %T", armInput)
	}

	// Set property "SubscriptionIds":
	for _, item := range typedInput.SubscriptionIds {
		var item1 SubResource
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.SubscriptionIds = append(profile.SubscriptionIds, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_ResourceSharingProfile populates our ResourceSharingProfile from the provided source ResourceSharingProfile
func (profile *ResourceSharingProfile) AssignProperties_From_ResourceSharingProfile(source *storage.ResourceSharingProfile) error {

	// SubscriptionIds
	if source.SubscriptionIds != nil {
		subscriptionIdList := make([]SubResource, len(source.SubscriptionIds))
		for subscriptionIdIndex, subscriptionIdItem := range source.SubscriptionIds {
			var subscriptionId SubResource
			err := subscriptionId.AssignProperties_From_SubResource(&subscriptionIdItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResource() to populate field SubscriptionIds")
			}
			subscriptionIdList[subscriptionIdIndex] = subscriptionId
		}
		profile.SubscriptionIds = subscriptionIdList
	} else {
		profile.SubscriptionIds = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ResourceSharingProfile populates the provided destination ResourceSharingProfile from our ResourceSharingProfile
func (profile *ResourceSharingProfile) AssignProperties_To_ResourceSharingProfile(destination *storage.ResourceSharingProfile) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SubscriptionIds
	if profile.SubscriptionIds != nil {
		subscriptionIdList := make([]storage.SubResource, len(profile.SubscriptionIds))
		for subscriptionIdIndex, subscriptionIdItem := range profile.SubscriptionIds {
			var subscriptionId storage.SubResource
			err := subscriptionIdItem.AssignProperties_To_SubResource(&subscriptionId)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResource() to populate field SubscriptionIds")
			}
			subscriptionIdList[subscriptionIdIndex] = subscriptionId
		}
		destination.SubscriptionIds = subscriptionIdList
	} else {
		destination.SubscriptionIds = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ResourceSharingProfile_STATUS populates our ResourceSharingProfile from the provided source ResourceSharingProfile_STATUS
func (profile *ResourceSharingProfile) Initialize_From_ResourceSharingProfile_STATUS(source *ResourceSharingProfile_STATUS) error {

	// SubscriptionIds
	if source.SubscriptionIds != nil {
		subscriptionIdList := make([]SubResource, len(source.SubscriptionIds))
		for subscriptionIdIndex, subscriptionIdItem := range source.SubscriptionIds {
			var subscriptionId SubResource
			err := subscriptionId.Initialize_From_SubResource_STATUS(&subscriptionIdItem)
			if err != nil {
				return eris.Wrap(err, "calling Initialize_From_SubResource_STATUS() to populate field SubscriptionIds")
			}
			subscriptionIdList[subscriptionIdIndex] = subscriptionId
		}
		profile.SubscriptionIds = subscriptionIdList
	} else {
		profile.SubscriptionIds = nil
	}

	// No error
	return nil
}

type ResourceSharingProfile_STATUS struct {
	// SubscriptionIds: Specifies an array of subscription resource IDs that capacity reservation group is shared with. Block
	// Capacity Reservations does not support sharing across subscriptions. Note: Minimum api-version: 2023-09-01. Please refer
	// to https://aka.ms/computereservationsharing for more details.
	SubscriptionIds []SubResource_STATUS `json:"subscriptionIds,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceSharingProfile_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *ResourceSharingProfile_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ResourceSharingProfile_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *ResourceSharingProfile_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ResourceSharingProfile_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ResourceSharingProfile_STATUS, got %T", armInput)
	}

	// Set property "SubscriptionIds":
	for _, item := range typedInput.SubscriptionIds {
		var item1 SubResource_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.SubscriptionIds = append(profile.SubscriptionIds, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_ResourceSharingProfile_STATUS populates our ResourceSharingProfile_STATUS from the provided source ResourceSharingProfile_STATUS
func (profile *ResourceSharingProfile_STATUS) AssignProperties_From_ResourceSharingProfile_STATUS(source *storage.ResourceSharingProfile_STATUS) error {

	// SubscriptionIds
	if source.SubscriptionIds != nil {
		subscriptionIdList := make([]SubResource_STATUS, len(source.SubscriptionIds))
		for subscriptionIdIndex, subscriptionIdItem := range source.SubscriptionIds {
			var subscriptionId SubResource_STATUS
			err := subscriptionId.AssignProperties_From_SubResource_STATUS(&subscriptionIdItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResource_STATUS() to populate field SubscriptionIds")
			}
			subscriptionIdList[subscriptionIdIndex] = subscriptionId
		}
		profile.SubscriptionIds = subscriptionIdList
	} else {
		profile.SubscriptionIds = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ResourceSharingProfile_STATUS populates the provided destination ResourceSharingProfile_STATUS from our ResourceSharingProfile_STATUS
func (profile *ResourceSharingProfile_STATUS) AssignProperties_To_ResourceSharingProfile_STATUS(destination *storage.ResourceSharingProfile_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SubscriptionIds
	if profile.SubscriptionIds != nil {
		subscriptionIdList := make([]storage.SubResource_STATUS, len(profile.SubscriptionIds))
		for subscriptionIdIndex, subscriptionIdItem := range profile.SubscriptionIds {
			var subscriptionId storage.SubResource_STATUS
			err := subscriptionIdItem.AssignProperties_To_SubResource_STATUS(&subscriptionId)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResource_STATUS() to populate field SubscriptionIds")
			}
			subscriptionIdList[subscriptionIdIndex] = subscriptionId
		}
		destination.SubscriptionIds = subscriptionIdList
	} else {
		destination.SubscriptionIds = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SubResourceReadOnly_STATUS struct {
	// Id: Resource Id
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SubResourceReadOnly_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (only *SubResourceReadOnly_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SubResourceReadOnly_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (only *SubResourceReadOnly_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SubResourceReadOnly_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SubResourceReadOnly_STATUS, got %T", armInput)
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		only.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_SubResourceReadOnly_STATUS populates our SubResourceReadOnly_STATUS from the provided source SubResourceReadOnly_STATUS
func (only *SubResourceReadOnly_STATUS) AssignProperties_From_SubResourceReadOnly_STATUS(source *storage.SubResourceReadOnly_STATUS) error {

	// Id
	only.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_SubResourceReadOnly_STATUS populates the provided destination SubResourceReadOnly_STATUS from our SubResourceReadOnly_STATUS
func (only *SubResourceReadOnly_STATUS) AssignProperties_To_SubResourceReadOnly_STATUS(destination *storage.SubResourceReadOnly_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(only.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the
// response to the instance view of a capacity reservation group.
type CapacityReservationInstanceViewWithName_STATUS struct {
	// Name: The name of the capacity reservation.
	Name *string `json:"name,omitempty"`

	// Statuses: The resource status information.
	Statuses []InstanceViewStatus_STATUS `json:"statuses,omitempty"`

	// UtilizationInfo: Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilization_STATUS `json:"utilizationInfo,omitempty"`
}

var _ genruntime.FromARMConverter = &CapacityReservationInstanceViewWithName_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (name *CapacityReservationInstanceViewWithName_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservationInstanceViewWithName_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (name *CapacityReservationInstanceViewWithName_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservationInstanceViewWithName_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservationInstanceViewWithName_STATUS, got %T", armInput)
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name1 := *typedInput.Name
		name.Name = &name1
	}

	// Set property "Statuses":
	for _, item := range typedInput.Statuses {
		var item1 InstanceViewStatus_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		name.Statuses = append(name.Statuses, item1)
	}

	// Set property "UtilizationInfo":
	if typedInput.UtilizationInfo != nil {
		var utilizationInfo1 CapacityReservationUtilization_STATUS
		err := utilizationInfo1.PopulateFromARM(owner, *typedInput.UtilizationInfo)
		if err != nil {
			return err
		}
		utilizationInfo := utilizationInfo1
		name.UtilizationInfo = &utilizationInfo
	}

	// No error
	return nil
}

// AssignProperties_From_CapacityReservationInstanceViewWithName_STATUS populates our CapacityReservationInstanceViewWithName_STATUS from the provided source CapacityReservationInstanceViewWithName_STATUS
func (name *CapacityReservationInstanceViewWithName_STATUS) AssignProperties_From_CapacityReservationInstanceViewWithName_STATUS(source *storage.CapacityReservationInstanceViewWithName_STATUS) error {

	// Name
	name.Name = genruntime.ClonePointerToString(source.Name)

	// Statuses
	if source.Statuses != nil {
		statusList := make([]InstanceViewStatus_STATUS, len(source.Statuses))
		for statusIndex, statusItem := range source.Statuses {
			var status InstanceViewStatus_STATUS
			err := status.AssignProperties_From_InstanceViewStatus_STATUS(&statusItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_InstanceViewStatus_STATUS() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		name.Statuses = statusList
	} else {
		name.Statuses = nil
	}

	// UtilizationInfo
	if source.UtilizationInfo != nil {
		var utilizationInfo CapacityReservationUtilization_STATUS
		err := utilizationInfo.AssignProperties_From_CapacityReservationUtilization_STATUS(source.UtilizationInfo)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationUtilization_STATUS() to populate field UtilizationInfo")
		}
		name.UtilizationInfo = &utilizationInfo
	} else {
		name.UtilizationInfo = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationInstanceViewWithName_STATUS populates the provided destination CapacityReservationInstanceViewWithName_STATUS from our CapacityReservationInstanceViewWithName_STATUS
func (name *CapacityReservationInstanceViewWithName_STATUS) AssignProperties_To_CapacityReservationInstanceViewWithName_STATUS(destination *storage.CapacityReservationInstanceViewWithName_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(name.Name)

	// Statuses
	if name.Statuses != nil {
		statusList := make([]storage.InstanceViewStatus_STATUS, len(name.Statuses))
		for statusIndex, statusItem := range name.Statuses {
			var status storage.InstanceViewStatus_STATUS
			err := statusItem.AssignProperties_To_InstanceViewStatus_STATUS(&status)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_InstanceViewStatus_STATUS() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		destination.Statuses = statusList
	} else {
		destination.Statuses = nil
	}

	// UtilizationInfo
	if name.UtilizationInfo != nil {
		var utilizationInfo storage.CapacityReservationUtilization_STATUS
		err := name.UtilizationInfo.AssignProperties_To_CapacityReservationUtilization_STATUS(&utilizationInfo)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationUtilization_STATUS() to populate field UtilizationInfo")
		}
		destination.UtilizationInfo = &utilizationInfo
	} else {
		destination.UtilizationInfo = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Represents the capacity reservation utilization in terms of resources allocated.
type CapacityReservationUtilization_STATUS struct {
	// CurrentCapacity: The value provides the current capacity of the VM size which was reserved successfully and for which
	// the customer is getting billed. Minimum api-version: 2022-08-01.
	CurrentCapacity *int `json:"currentCapacity,omitempty"`

	// VirtualMachinesAllocated: A list of all virtual machines resource ids allocated against the capacity reservation.
	VirtualMachinesAllocated []SubResourceReadOnly_STATUS `json:"virtualMachinesAllocated,omitempty"`
}

var _ genruntime.FromARMConverter = &CapacityReservationUtilization_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (utilization *CapacityReservationUtilization_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservationUtilization_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (utilization *CapacityReservationUtilization_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservationUtilization_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservationUtilization_STATUS, got %T", armInput)
	}

	// Set property "CurrentCapacity":
	if typedInput.CurrentCapacity != nil {
		currentCapacity := *typedInput.CurrentCapacity
		utilization.CurrentCapacity = &currentCapacity
	}

	// Set property "VirtualMachinesAllocated":
	for _, item := range typedInput.VirtualMachinesAllocated {
		var item1 SubResourceReadOnly_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		utilization.VirtualMachinesAllocated = append(utilization.VirtualMachinesAllocated, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_CapacityReservationUtilization_STATUS populates our CapacityReservationUtilization_STATUS from the provided source CapacityReservationUtilization_STATUS
func (utilization *CapacityReservationUtilization_STATUS) AssignProperties_From_CapacityReservationUtilization_STATUS(source *storage.CapacityReservationUtilization_STATUS) error {

	// CurrentCapacity
	utilization.CurrentCapacity = genruntime.ClonePointerToInt(source.CurrentCapacity)

	// VirtualMachinesAllocated
	if source.VirtualMachinesAllocated != nil {
		virtualMachinesAllocatedList := make([]SubResourceReadOnly_STATUS, len(source.VirtualMachinesAllocated))
		for virtualMachinesAllocatedIndex, virtualMachinesAllocatedItem := range source.VirtualMachinesAllocated {
			var virtualMachinesAllocated SubResourceReadOnly_STATUS
			err := virtualMachinesAllocated.AssignProperties_From_SubResourceReadOnly_STATUS(&virtualMachinesAllocatedItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAllocated")
			}
			virtualMachinesAllocatedList[virtualMachinesAllocatedIndex] = virtualMachinesAllocated
		}
		utilization.VirtualMachinesAllocated = virtualMachinesAllocatedList
	} else {
		utilization.VirtualMachinesAllocated = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationUtilization_STATUS populates the provided destination CapacityReservationUtilization_STATUS from our CapacityReservationUtilization_STATUS
func (utilization *CapacityReservationUtilization_STATUS) AssignProperties_To_CapacityReservationUtilization_STATUS(destination *storage.CapacityReservationUtilization_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CurrentCapacity
	destination.CurrentCapacity = genruntime.ClonePointerToInt(utilization.CurrentCapacity)

	// VirtualMachinesAllocated
	if utilization.VirtualMachinesAllocated != nil {
		virtualMachinesAllocatedList := make([]storage.SubResourceReadOnly_STATUS, len(utilization.VirtualMachinesAllocated))
		for virtualMachinesAllocatedIndex, virtualMachinesAllocatedItem := range utilization.VirtualMachinesAllocated {
			var virtualMachinesAllocated storage.SubResourceReadOnly_STATUS
			err := virtualMachinesAllocatedItem.AssignProperties_To_SubResourceReadOnly_STATUS(&virtualMachinesAllocated)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAllocated")
			}
			virtualMachinesAllocatedList[virtualMachinesAllocatedIndex] = virtualMachinesAllocated
		}
		destination.VirtualMachinesAllocated = virtualMachinesAllocatedList
	} else {
		destination.VirtualMachinesAllocated = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&CapacityReservationGroup{}, &CapacityReservationGroupList{})
}
