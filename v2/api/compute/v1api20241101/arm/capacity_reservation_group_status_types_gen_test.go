// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CapacityReservationGroupInstanceView_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroupInstanceView_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroupInstanceView_STATUS, CapacityReservationGroupInstanceView_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroupInstanceView_STATUS runs a test to see if a specific instance of CapacityReservationGroupInstanceView_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroupInstanceView_STATUS(subject CapacityReservationGroupInstanceView_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroupInstanceView_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroupInstanceView_STATUS instances for property testing - lazily instantiated by
// CapacityReservationGroupInstanceView_STATUSGenerator()
var capacityReservationGroupInstanceView_STATUSGenerator gopter.Gen

// CapacityReservationGroupInstanceView_STATUSGenerator returns a generator of CapacityReservationGroupInstanceView_STATUS instances for property testing.
func CapacityReservationGroupInstanceView_STATUSGenerator() gopter.Gen {
	if capacityReservationGroupInstanceView_STATUSGenerator != nil {
		return capacityReservationGroupInstanceView_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservationGroupInstanceView_STATUS(generators)
	capacityReservationGroupInstanceView_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroupInstanceView_STATUS{}), generators)

	return capacityReservationGroupInstanceView_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroupInstanceView_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroupInstanceView_STATUS(gens map[string]gopter.Gen) {
	gens["CapacityReservations"] = gen.SliceOf(CapacityReservationInstanceViewWithName_STATUSGenerator())
	gens["SharedSubscriptionIds"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_CapacityReservationGroupProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroupProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroupProperties_STATUS, CapacityReservationGroupProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroupProperties_STATUS runs a test to see if a specific instance of CapacityReservationGroupProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroupProperties_STATUS(subject CapacityReservationGroupProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroupProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroupProperties_STATUS instances for property testing - lazily instantiated by
// CapacityReservationGroupProperties_STATUSGenerator()
var capacityReservationGroupProperties_STATUSGenerator gopter.Gen

// CapacityReservationGroupProperties_STATUSGenerator returns a generator of CapacityReservationGroupProperties_STATUS instances for property testing.
func CapacityReservationGroupProperties_STATUSGenerator() gopter.Gen {
	if capacityReservationGroupProperties_STATUSGenerator != nil {
		return capacityReservationGroupProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservationGroupProperties_STATUS(generators)
	capacityReservationGroupProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroupProperties_STATUS{}), generators)

	return capacityReservationGroupProperties_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroupProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroupProperties_STATUS(gens map[string]gopter.Gen) {
	gens["CapacityReservations"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
	gens["InstanceView"] = gen.PtrOf(CapacityReservationGroupInstanceView_STATUSGenerator())
	gens["SharingProfile"] = gen.PtrOf(ResourceSharingProfile_STATUSGenerator())
	gens["VirtualMachinesAssociated"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_CapacityReservationGroup_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroup_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroup_STATUS, CapacityReservationGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroup_STATUS runs a test to see if a specific instance of CapacityReservationGroup_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroup_STATUS(subject CapacityReservationGroup_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroup_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroup_STATUS instances for property testing - lazily instantiated by
// CapacityReservationGroup_STATUSGenerator()
var capacityReservationGroup_STATUSGenerator gopter.Gen

// CapacityReservationGroup_STATUSGenerator returns a generator of CapacityReservationGroup_STATUS instances for property testing.
// We first initialize capacityReservationGroup_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationGroup_STATUSGenerator() gopter.Gen {
	if capacityReservationGroup_STATUSGenerator != nil {
		return capacityReservationGroup_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS(generators)
	capacityReservationGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationGroup_STATUS(generators)
	capacityReservationGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_STATUS{}), generators)

	return capacityReservationGroup_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationGroup_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroup_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroup_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(CapacityReservationGroupProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_CapacityReservationInstanceViewWithName_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationInstanceViewWithName_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationInstanceViewWithName_STATUS, CapacityReservationInstanceViewWithName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationInstanceViewWithName_STATUS runs a test to see if a specific instance of CapacityReservationInstanceViewWithName_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationInstanceViewWithName_STATUS(subject CapacityReservationInstanceViewWithName_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationInstanceViewWithName_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationInstanceViewWithName_STATUS instances for property testing - lazily instantiated by
// CapacityReservationInstanceViewWithName_STATUSGenerator()
var capacityReservationInstanceViewWithName_STATUSGenerator gopter.Gen

// CapacityReservationInstanceViewWithName_STATUSGenerator returns a generator of CapacityReservationInstanceViewWithName_STATUS instances for property testing.
// We first initialize capacityReservationInstanceViewWithName_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationInstanceViewWithName_STATUSGenerator() gopter.Gen {
	if capacityReservationInstanceViewWithName_STATUSGenerator != nil {
		return capacityReservationInstanceViewWithName_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(generators)
	capacityReservationInstanceViewWithName_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationInstanceViewWithName_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(generators)
	capacityReservationInstanceViewWithName_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationInstanceViewWithName_STATUS{}), generators)

	return capacityReservationInstanceViewWithName_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationInstanceViewWithName_STATUS(gens map[string]gopter.Gen) {
	gens["Statuses"] = gen.SliceOf(InstanceViewStatus_STATUSGenerator())
	gens["UtilizationInfo"] = gen.PtrOf(CapacityReservationUtilization_STATUSGenerator())
}

func Test_CapacityReservationUtilization_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationUtilization_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationUtilization_STATUS, CapacityReservationUtilization_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationUtilization_STATUS runs a test to see if a specific instance of CapacityReservationUtilization_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationUtilization_STATUS(subject CapacityReservationUtilization_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationUtilization_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationUtilization_STATUS instances for property testing - lazily instantiated by
// CapacityReservationUtilization_STATUSGenerator()
var capacityReservationUtilization_STATUSGenerator gopter.Gen

// CapacityReservationUtilization_STATUSGenerator returns a generator of CapacityReservationUtilization_STATUS instances for property testing.
// We first initialize capacityReservationUtilization_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationUtilization_STATUSGenerator() gopter.Gen {
	if capacityReservationUtilization_STATUSGenerator != nil {
		return capacityReservationUtilization_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	capacityReservationUtilization_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationUtilization_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	capacityReservationUtilization_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationUtilization_STATUS{}), generators)

	return capacityReservationUtilization_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(gens map[string]gopter.Gen) {
	gens["CurrentCapacity"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS(gens map[string]gopter.Gen) {
	gens["VirtualMachinesAllocated"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_ResourceSharingProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSharingProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSharingProfile_STATUS, ResourceSharingProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSharingProfile_STATUS runs a test to see if a specific instance of ResourceSharingProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSharingProfile_STATUS(subject ResourceSharingProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSharingProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSharingProfile_STATUS instances for property testing - lazily instantiated by
// ResourceSharingProfile_STATUSGenerator()
var resourceSharingProfile_STATUSGenerator gopter.Gen

// ResourceSharingProfile_STATUSGenerator returns a generator of ResourceSharingProfile_STATUS instances for property testing.
func ResourceSharingProfile_STATUSGenerator() gopter.Gen {
	if resourceSharingProfile_STATUSGenerator != nil {
		return resourceSharingProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceSharingProfile_STATUS(generators)
	resourceSharingProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ResourceSharingProfile_STATUS{}), generators)

	return resourceSharingProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForResourceSharingProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceSharingProfile_STATUS(gens map[string]gopter.Gen) {
	gens["SubscriptionIds"] = gen.SliceOf(SubResource_STATUSGenerator())
}

func Test_SubResourceReadOnly_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResourceReadOnly_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceReadOnly_STATUS, SubResourceReadOnly_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceReadOnly_STATUS runs a test to see if a specific instance of SubResourceReadOnly_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceReadOnly_STATUS(subject SubResourceReadOnly_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResourceReadOnly_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResourceReadOnly_STATUS instances for property testing - lazily instantiated by
// SubResourceReadOnly_STATUSGenerator()
var subResourceReadOnly_STATUSGenerator gopter.Gen

// SubResourceReadOnly_STATUSGenerator returns a generator of SubResourceReadOnly_STATUS instances for property testing.
func SubResourceReadOnly_STATUSGenerator() gopter.Gen {
	if subResourceReadOnly_STATUSGenerator != nil {
		return subResourceReadOnly_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS(generators)
	subResourceReadOnly_STATUSGenerator = gen.Struct(reflect.TypeOf(SubResourceReadOnly_STATUS{}), generators)

	return subResourceReadOnly_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
