// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CapacityReservationGroupProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroupProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroupProperties, CapacityReservationGroupPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroupProperties runs a test to see if a specific instance of CapacityReservationGroupProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroupProperties(subject CapacityReservationGroupProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroupProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroupProperties instances for property testing - lazily instantiated by
// CapacityReservationGroupPropertiesGenerator()
var capacityReservationGroupPropertiesGenerator gopter.Gen

// CapacityReservationGroupPropertiesGenerator returns a generator of CapacityReservationGroupProperties instances for property testing.
func CapacityReservationGroupPropertiesGenerator() gopter.Gen {
	if capacityReservationGroupPropertiesGenerator != nil {
		return capacityReservationGroupPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservationGroupProperties(generators)
	capacityReservationGroupPropertiesGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroupProperties{}), generators)

	return capacityReservationGroupPropertiesGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroupProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroupProperties(gens map[string]gopter.Gen) {
	gens["SharingProfile"] = gen.PtrOf(ResourceSharingProfileGenerator())
}

func Test_CapacityReservationGroup_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationGroup_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationGroup_Spec, CapacityReservationGroup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationGroup_Spec runs a test to see if a specific instance of CapacityReservationGroup_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationGroup_Spec(subject CapacityReservationGroup_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationGroup_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationGroup_Spec instances for property testing - lazily instantiated by
// CapacityReservationGroup_SpecGenerator()
var capacityReservationGroup_SpecGenerator gopter.Gen

// CapacityReservationGroup_SpecGenerator returns a generator of CapacityReservationGroup_Spec instances for property testing.
// We first initialize capacityReservationGroup_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationGroup_SpecGenerator() gopter.Gen {
	if capacityReservationGroup_SpecGenerator != nil {
		return capacityReservationGroup_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec(generators)
	capacityReservationGroup_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationGroup_Spec(generators)
	capacityReservationGroup_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservationGroup_Spec{}), generators)

	return capacityReservationGroup_SpecGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationGroup_Spec(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservationGroup_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationGroup_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(CapacityReservationGroupPropertiesGenerator())
}

func Test_ResourceSharingProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSharingProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSharingProfile, ResourceSharingProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSharingProfile runs a test to see if a specific instance of ResourceSharingProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSharingProfile(subject ResourceSharingProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSharingProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSharingProfile instances for property testing - lazily instantiated by
// ResourceSharingProfileGenerator()
var resourceSharingProfileGenerator gopter.Gen

// ResourceSharingProfileGenerator returns a generator of ResourceSharingProfile instances for property testing.
func ResourceSharingProfileGenerator() gopter.Gen {
	if resourceSharingProfileGenerator != nil {
		return resourceSharingProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceSharingProfile(generators)
	resourceSharingProfileGenerator = gen.Struct(reflect.TypeOf(ResourceSharingProfile{}), generators)

	return resourceSharingProfileGenerator
}

// AddRelatedPropertyGeneratorsForResourceSharingProfile is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceSharingProfile(gens map[string]gopter.Gen) {
	gens["SubscriptionIds"] = gen.SliceOf(SubResourceGenerator())
}
