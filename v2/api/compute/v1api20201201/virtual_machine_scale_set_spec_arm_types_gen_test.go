// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSet_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSet_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSet_Spec_ARM, VirtualMachineScaleSet_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSet_Spec_ARM runs a test to see if a specific instance of VirtualMachineScaleSet_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSet_Spec_ARM(subject VirtualMachineScaleSet_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSet_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSet_Spec_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSet_Spec_ARMGenerator()
var virtualMachineScaleSet_Spec_ARMGenerator gopter.Gen

// VirtualMachineScaleSet_Spec_ARMGenerator returns a generator of VirtualMachineScaleSet_Spec_ARM instances for property testing.
// We first initialize virtualMachineScaleSet_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSet_Spec_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSet_Spec_ARMGenerator != nil {
		return virtualMachineScaleSet_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_Spec_ARM(generators)
	virtualMachineScaleSet_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_Spec_ARM(generators)
	virtualMachineScaleSet_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_Spec_ARM{}), generators)

	return virtualMachineScaleSet_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_ARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentity_ARMGenerator())
	gens["Plan"] = gen.PtrOf(Plan_ARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetProperties_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_ARMGenerator())
}

func Test_ExtendedLocation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_ARM, ExtendedLocation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_ARM runs a test to see if a specific instance of ExtendedLocation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_ARM(subject ExtendedLocation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_ARM instances for property testing - lazily instantiated by
// ExtendedLocation_ARMGenerator()
var extendedLocation_ARMGenerator gopter.Gen

// ExtendedLocation_ARMGenerator returns a generator of ExtendedLocation_ARM instances for property testing.
func ExtendedLocation_ARMGenerator() gopter.Gen {
	if extendedLocation_ARMGenerator != nil {
		return extendedLocation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_ARM(generators)
	extendedLocation_ARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_ARM{}), generators)

	return extendedLocation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_EdgeZone))
}

func Test_Plan_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlan_ARM, Plan_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlan_ARM runs a test to see if a specific instance of Plan_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlan_ARM(subject Plan_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_ARM instances for property testing - lazily instantiated by Plan_ARMGenerator()
var plan_ARMGenerator gopter.Gen

// Plan_ARMGenerator returns a generator of Plan_ARM instances for property testing.
func Plan_ARMGenerator() gopter.Gen {
	if plan_ARMGenerator != nil {
		return plan_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlan_ARM(generators)
	plan_ARMGenerator = gen.Struct(reflect.TypeOf(Plan_ARM{}), generators)

	return plan_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPlan_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlan_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_ARM, Sku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_ARM runs a test to see if a specific instance of Sku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_ARM(subject Sku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_ARM instances for property testing - lazily instantiated by Sku_ARMGenerator()
var sku_ARMGenerator gopter.Gen

// Sku_ARMGenerator returns a generator of Sku_ARM instances for property testing.
func Sku_ARMGenerator() gopter.Gen {
	if sku_ARMGenerator != nil {
		return sku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_ARM(generators)
	sku_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_ARM{}), generators)

	return sku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentity_ARM, VirtualMachineScaleSetIdentity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentity_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentity_ARM(subject VirtualMachineScaleSetIdentity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIdentity_ARMGenerator()
var virtualMachineScaleSetIdentity_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentity_ARMGenerator returns a generator of VirtualMachineScaleSetIdentity_ARM instances for property testing.
// We first initialize virtualMachineScaleSetIdentity_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIdentity_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentity_ARMGenerator != nil {
		return virtualMachineScaleSetIdentity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_ARM(generators)
	virtualMachineScaleSetIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_ARM(generators)
	virtualMachineScaleSetIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_ARM{}), generators)

	return virtualMachineScaleSetIdentity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachineScaleSetIdentity_Type_None,
		VirtualMachineScaleSetIdentity_Type_SystemAssigned,
		VirtualMachineScaleSetIdentity_Type_SystemAssignedUserAssigned,
		VirtualMachineScaleSetIdentity_Type_UserAssigned))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentityDetails_ARMGenerator())
}

func Test_VirtualMachineScaleSetProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetProperties_ARM, VirtualMachineScaleSetProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetProperties_ARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetProperties_ARM(subject VirtualMachineScaleSetProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetProperties_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetProperties_ARMGenerator()
var virtualMachineScaleSetProperties_ARMGenerator gopter.Gen

// VirtualMachineScaleSetProperties_ARMGenerator returns a generator of VirtualMachineScaleSetProperties_ARM instances for property testing.
// We first initialize virtualMachineScaleSetProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetProperties_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetProperties_ARMGenerator != nil {
		return virtualMachineScaleSetProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_ARM(generators)
	virtualMachineScaleSetProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_ARM(generators)
	virtualMachineScaleSetProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_ARM{}), generators)

	return virtualMachineScaleSetProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_ARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.OneConstOf(OrchestrationMode_Flexible, OrchestrationMode_Uniform))
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilities_ARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicy_ARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicy_ARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicy_ARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfile_ARMGenerator())
}

func Test_AdditionalCapabilities_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilities_ARM, AdditionalCapabilities_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilities_ARM runs a test to see if a specific instance of AdditionalCapabilities_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilities_ARM(subject AdditionalCapabilities_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalCapabilities_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalCapabilities_ARM instances for property testing - lazily instantiated by
// AdditionalCapabilities_ARMGenerator()
var additionalCapabilities_ARMGenerator gopter.Gen

// AdditionalCapabilities_ARMGenerator returns a generator of AdditionalCapabilities_ARM instances for property testing.
func AdditionalCapabilities_ARMGenerator() gopter.Gen {
	if additionalCapabilities_ARMGenerator != nil {
		return additionalCapabilities_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilities_ARM(generators)
	additionalCapabilities_ARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_ARM{}), generators)

	return additionalCapabilities_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilities_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilities_ARM(gens map[string]gopter.Gen) {
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicy_ARM, AutomaticRepairsPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicy_ARM runs a test to see if a specific instance of AutomaticRepairsPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicy_ARM(subject AutomaticRepairsPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticRepairsPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticRepairsPolicy_ARM instances for property testing - lazily instantiated by
// AutomaticRepairsPolicy_ARMGenerator()
var automaticRepairsPolicy_ARMGenerator gopter.Gen

// AutomaticRepairsPolicy_ARMGenerator returns a generator of AutomaticRepairsPolicy_ARM instances for property testing.
func AutomaticRepairsPolicy_ARMGenerator() gopter.Gen {
	if automaticRepairsPolicy_ARMGenerator != nil {
		return automaticRepairsPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_ARM(generators)
	automaticRepairsPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_ARM{}), generators)

	return automaticRepairsPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScaleInPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicy_ARM, ScaleInPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicy_ARM runs a test to see if a specific instance of ScaleInPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicy_ARM(subject ScaleInPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleInPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleInPolicy_ARM instances for property testing - lazily instantiated by ScaleInPolicy_ARMGenerator()
var scaleInPolicy_ARMGenerator gopter.Gen

// ScaleInPolicy_ARMGenerator returns a generator of ScaleInPolicy_ARM instances for property testing.
func ScaleInPolicy_ARMGenerator() gopter.Gen {
	if scaleInPolicy_ARMGenerator != nil {
		return scaleInPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicy_ARM(generators)
	scaleInPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_ARM{}), generators)

	return scaleInPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(gen.OneConstOf(ScaleInPolicy_Rules_Default, ScaleInPolicy_Rules_NewestVM, ScaleInPolicy_Rules_OldestVM))
}

func Test_SubResource_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_ARM, SubResource_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_ARM runs a test to see if a specific instance of SubResource_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_ARM(subject SubResource_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_ARM instances for property testing - lazily instantiated by SubResource_ARMGenerator()
var subResource_ARMGenerator gopter.Gen

// SubResource_ARMGenerator returns a generator of SubResource_ARM instances for property testing.
func SubResource_ARMGenerator() gopter.Gen {
	if subResource_ARMGenerator != nil {
		return subResource_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_ARM(generators)
	subResource_ARMGenerator = gen.Struct(reflect.TypeOf(SubResource_ARM{}), generators)

	return subResource_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicy_ARM, UpgradePolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicy_ARM runs a test to see if a specific instance of UpgradePolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicy_ARM(subject UpgradePolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpgradePolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpgradePolicy_ARM instances for property testing - lazily instantiated by UpgradePolicy_ARMGenerator()
var upgradePolicy_ARMGenerator gopter.Gen

// UpgradePolicy_ARMGenerator returns a generator of UpgradePolicy_ARM instances for property testing.
// We first initialize upgradePolicy_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicy_ARMGenerator() gopter.Gen {
	if upgradePolicy_ARMGenerator != nil {
		return upgradePolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_ARM(generators)
	upgradePolicy_ARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_ARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicy_ARM(generators)
	upgradePolicy_ARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_ARM{}), generators)

	return upgradePolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicy_ARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(UpgradePolicy_Mode_Automatic, UpgradePolicy_Mode_Manual, UpgradePolicy_Mode_Rolling))
}

// AddRelatedPropertyGeneratorsForUpgradePolicy_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicy_ARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicy_ARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicy_ARMGenerator())
}

func Test_UserAssignedIdentityDetails_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityDetails_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityDetails_ARM, UserAssignedIdentityDetails_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityDetails_ARM runs a test to see if a specific instance of UserAssignedIdentityDetails_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityDetails_ARM(subject UserAssignedIdentityDetails_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityDetails_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityDetails_ARM instances for property testing - lazily instantiated by
// UserAssignedIdentityDetails_ARMGenerator()
var userAssignedIdentityDetails_ARMGenerator gopter.Gen

// UserAssignedIdentityDetails_ARMGenerator returns a generator of UserAssignedIdentityDetails_ARM instances for property testing.
func UserAssignedIdentityDetails_ARMGenerator() gopter.Gen {
	if userAssignedIdentityDetails_ARMGenerator != nil {
		return userAssignedIdentityDetails_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	userAssignedIdentityDetails_ARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityDetails_ARM{}), generators)

	return userAssignedIdentityDetails_ARMGenerator
}

func Test_VirtualMachineScaleSetVMProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_ARM, VirtualMachineScaleSetVMProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_ARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_ARM(subject VirtualMachineScaleSetVMProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetVMProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetVMProfile_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetVMProfile_ARMGenerator()
var virtualMachineScaleSetVMProfile_ARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfile_ARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_ARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfile_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfile_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfile_ARMGenerator != nil {
		return virtualMachineScaleSetVMProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_ARM(generators)
	virtualMachineScaleSetVMProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_ARM(generators)
	virtualMachineScaleSetVMProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_ARM{}), generators)

	return virtualMachineScaleSetVMProfile_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_ARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_Deallocate, EvictionPolicy_Delete))
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_Low, Priority_Regular, Priority_Spot))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_ARM(gens map[string]gopter.Gen) {
	gens["BillingProfile"] = gen.PtrOf(BillingProfile_ARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfile_ARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfile_ARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfile_ARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfile_ARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfile_ARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfile_ARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfile_ARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicy_ARM, AutomaticOSUpgradePolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicy_ARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicy_ARM(subject AutomaticOSUpgradePolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticOSUpgradePolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticOSUpgradePolicy_ARM instances for property testing - lazily instantiated by
// AutomaticOSUpgradePolicy_ARMGenerator()
var automaticOSUpgradePolicy_ARMGenerator gopter.Gen

// AutomaticOSUpgradePolicy_ARMGenerator returns a generator of AutomaticOSUpgradePolicy_ARM instances for property testing.
func AutomaticOSUpgradePolicy_ARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicy_ARMGenerator != nil {
		return automaticOSUpgradePolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_ARM(generators)
	automaticOSUpgradePolicy_ARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_ARM{}), generators)

	return automaticOSUpgradePolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_ARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
}

func Test_RollingUpgradePolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicy_ARM, RollingUpgradePolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicy_ARM runs a test to see if a specific instance of RollingUpgradePolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicy_ARM(subject RollingUpgradePolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RollingUpgradePolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RollingUpgradePolicy_ARM instances for property testing - lazily instantiated by
// RollingUpgradePolicy_ARMGenerator()
var rollingUpgradePolicy_ARMGenerator gopter.Gen

// RollingUpgradePolicy_ARMGenerator returns a generator of RollingUpgradePolicy_ARM instances for property testing.
func RollingUpgradePolicy_ARMGenerator() gopter.Gen {
	if rollingUpgradePolicy_ARMGenerator != nil {
		return rollingUpgradePolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicy_ARM(generators)
	rollingUpgradePolicy_ARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_ARM{}), generators)

	return rollingUpgradePolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicy_ARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_ScheduledEventsProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduledEventsProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduledEventsProfile_ARM, ScheduledEventsProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduledEventsProfile_ARM runs a test to see if a specific instance of ScheduledEventsProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduledEventsProfile_ARM(subject ScheduledEventsProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduledEventsProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduledEventsProfile_ARM instances for property testing - lazily instantiated by
// ScheduledEventsProfile_ARMGenerator()
var scheduledEventsProfile_ARMGenerator gopter.Gen

// ScheduledEventsProfile_ARMGenerator returns a generator of ScheduledEventsProfile_ARM instances for property testing.
func ScheduledEventsProfile_ARMGenerator() gopter.Gen {
	if scheduledEventsProfile_ARMGenerator != nil {
		return scheduledEventsProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduledEventsProfile_ARM(generators)
	scheduledEventsProfile_ARMGenerator = gen.Struct(reflect.TypeOf(ScheduledEventsProfile_ARM{}), generators)

	return scheduledEventsProfile_ARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduledEventsProfile_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduledEventsProfile_ARM(gens map[string]gopter.Gen) {
	gens["TerminateNotificationProfile"] = gen.PtrOf(TerminateNotificationProfile_ARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_ARM, VirtualMachineScaleSetExtensionProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_ARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_ARM(subject VirtualMachineScaleSetExtensionProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProfile_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtensionProfile_ARMGenerator()
var virtualMachineScaleSetExtensionProfile_ARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfile_ARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_ARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionProfile_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionProfile_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfile_ARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_ARM(generators)
	virtualMachineScaleSetExtensionProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_ARM(generators)
	virtualMachineScaleSetExtensionProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_ARM{}), generators)

	return virtualMachineScaleSetExtensionProfile_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_ARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_ARM(gens map[string]gopter.Gen) {
	gens["Extensions"] = gen.SliceOf(VirtualMachineScaleSetExtension_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_ARM, VirtualMachineScaleSetNetworkProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_ARM(subject VirtualMachineScaleSetNetworkProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkProfile_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetNetworkProfile_ARMGenerator()
var virtualMachineScaleSetNetworkProfile_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfile_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_ARM instances for property testing.
func VirtualMachineScaleSetNetworkProfile_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfile_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_ARM(generators)
	virtualMachineScaleSetNetworkProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_ARM{}), generators)

	return virtualMachineScaleSetNetworkProfile_ARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_ARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReference_ARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfiguration_ARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_ARM, VirtualMachineScaleSetOSProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_ARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_ARM(subject VirtualMachineScaleSetOSProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSProfile_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSProfile_ARMGenerator()
var virtualMachineScaleSetOSProfile_ARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfile_ARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_ARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfile_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfile_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfile_ARMGenerator != nil {
		return virtualMachineScaleSetOSProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_ARM(generators)
	virtualMachineScaleSetOSProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_ARM(generators)
	virtualMachineScaleSetOSProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_ARM{}), generators)

	return virtualMachineScaleSetOSProfile_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_ARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_ARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfiguration_ARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroup_ARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfiguration_ARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_ARM, VirtualMachineScaleSetStorageProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_ARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_ARM(subject VirtualMachineScaleSetStorageProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetStorageProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetStorageProfile_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetStorageProfile_ARMGenerator()
var virtualMachineScaleSetStorageProfile_ARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfile_ARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_ARM instances for property testing.
func VirtualMachineScaleSetStorageProfile_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfile_ARMGenerator != nil {
		return virtualMachineScaleSetStorageProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_ARM(generators)
	virtualMachineScaleSetStorageProfile_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_ARM{}), generators)

	return virtualMachineScaleSetStorageProfile_ARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_ARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDisk_ARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReference_ARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDisk_ARMGenerator())
}

func Test_ApiEntityReference_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReference_ARM, ApiEntityReference_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReference_ARM runs a test to see if a specific instance of ApiEntityReference_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReference_ARM(subject ApiEntityReference_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiEntityReference_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiEntityReference_ARM instances for property testing - lazily instantiated by
// ApiEntityReference_ARMGenerator()
var apiEntityReference_ARMGenerator gopter.Gen

// ApiEntityReference_ARMGenerator returns a generator of ApiEntityReference_ARM instances for property testing.
func ApiEntityReference_ARMGenerator() gopter.Gen {
	if apiEntityReference_ARMGenerator != nil {
		return apiEntityReference_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReference_ARM(generators)
	apiEntityReference_ARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_ARM{}), generators)

	return apiEntityReference_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReference_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReference_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_TerminateNotificationProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TerminateNotificationProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTerminateNotificationProfile_ARM, TerminateNotificationProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTerminateNotificationProfile_ARM runs a test to see if a specific instance of TerminateNotificationProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTerminateNotificationProfile_ARM(subject TerminateNotificationProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TerminateNotificationProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TerminateNotificationProfile_ARM instances for property testing - lazily instantiated by
// TerminateNotificationProfile_ARMGenerator()
var terminateNotificationProfile_ARMGenerator gopter.Gen

// TerminateNotificationProfile_ARMGenerator returns a generator of TerminateNotificationProfile_ARM instances for property testing.
func TerminateNotificationProfile_ARMGenerator() gopter.Gen {
	if terminateNotificationProfile_ARMGenerator != nil {
		return terminateNotificationProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTerminateNotificationProfile_ARM(generators)
	terminateNotificationProfile_ARMGenerator = gen.Struct(reflect.TypeOf(TerminateNotificationProfile_ARM{}), generators)

	return terminateNotificationProfile_ARMGenerator
}

// AddIndependentPropertyGeneratorsForTerminateNotificationProfile_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTerminateNotificationProfile_ARM(gens map[string]gopter.Gen) {
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["NotBeforeTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetDataDisk_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_ARM, VirtualMachineScaleSetDataDisk_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_ARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_ARM(subject VirtualMachineScaleSetDataDisk_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetDataDisk_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetDataDisk_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetDataDisk_ARMGenerator()
var virtualMachineScaleSetDataDisk_ARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDisk_ARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_ARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDisk_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDisk_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDisk_ARMGenerator != nil {
		return virtualMachineScaleSetDataDisk_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_ARM(generators)
	virtualMachineScaleSetDataDisk_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_ARM(generators)
	virtualMachineScaleSetDataDisk_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_ARM{}), generators)

	return virtualMachineScaleSetDataDisk_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_ARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_None, Caching_ReadOnly, Caching_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_Attach, CreateOption_Empty, CreateOption_FromImage))
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_ARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_ARMGenerator())
}

func Test_VirtualMachineScaleSetExtension_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtension_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtension_ARM, VirtualMachineScaleSetExtension_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtension_ARM runs a test to see if a specific instance of VirtualMachineScaleSetExtension_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtension_ARM(subject VirtualMachineScaleSetExtension_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtension_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtension_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtension_ARMGenerator()
var virtualMachineScaleSetExtension_ARMGenerator gopter.Gen

// VirtualMachineScaleSetExtension_ARMGenerator returns a generator of VirtualMachineScaleSetExtension_ARM instances for property testing.
// We first initialize virtualMachineScaleSetExtension_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtension_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtension_ARMGenerator != nil {
		return virtualMachineScaleSetExtension_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_ARM(generators)
	virtualMachineScaleSetExtension_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_ARM(generators)
	virtualMachineScaleSetExtension_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_ARM{}), generators)

	return virtualMachineScaleSetExtension_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetExtensionProperties_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_ARM, VirtualMachineScaleSetNetworkConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_ARM(subject VirtualMachineScaleSetNetworkConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfiguration_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetNetworkConfiguration_ARMGenerator()
var virtualMachineScaleSetNetworkConfiguration_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfiguration_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_ARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfiguration_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfiguration_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_ARM(generators)
	virtualMachineScaleSetNetworkConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_ARM(generators)
	virtualMachineScaleSetNetworkConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_ARM{}), generators)

	return virtualMachineScaleSetNetworkConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_ARM, VirtualMachineScaleSetOSDisk_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_ARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_ARM(subject VirtualMachineScaleSetOSDisk_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSDisk_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSDisk_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSDisk_ARMGenerator()
var virtualMachineScaleSetOSDisk_ARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDisk_ARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_ARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDisk_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDisk_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDisk_ARMGenerator != nil {
		return virtualMachineScaleSetOSDisk_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_ARM(generators)
	virtualMachineScaleSetOSDisk_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_ARM(generators)
	virtualMachineScaleSetOSDisk_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_ARM{}), generators)

	return virtualMachineScaleSetOSDisk_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_ARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_None, Caching_ReadOnly, Caching_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_Attach, CreateOption_Empty, CreateOption_FromImage))
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetOSDisk_OsType_Linux, VirtualMachineScaleSetOSDisk_OsType_Windows))
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_ARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettings_ARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDisk_ARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_ARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_ARM, VirtualMachineScaleSetExtensionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_ARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_ARM(subject VirtualMachineScaleSetExtensionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProperties_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtensionProperties_ARMGenerator()
var virtualMachineScaleSetExtensionProperties_ARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProperties_ARMGenerator returns a generator of VirtualMachineScaleSetExtensionProperties_ARM instances for property testing.
func VirtualMachineScaleSetExtensionProperties_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProperties_ARMGenerator != nil {
		return virtualMachineScaleSetExtensionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_ARM(generators)
	virtualMachineScaleSetExtensionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProperties_ARM{}), generators)

	return virtualMachineScaleSetExtensionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradeMinorVersion"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticUpgrade"] = gen.PtrOf(gen.Bool())
	gens["ForceUpdateTag"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisionAfterExtensions"] = gen.SliceOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_ARM, VirtualMachineScaleSetManagedDiskParameters_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_ARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_ARM(subject VirtualMachineScaleSetManagedDiskParameters_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetManagedDiskParameters_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetManagedDiskParameters_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetManagedDiskParameters_ARMGenerator()
var virtualMachineScaleSetManagedDiskParameters_ARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParameters_ARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_ARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParameters_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParameters_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParameters_ARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParameters_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_ARM(generators)
	virtualMachineScaleSetManagedDiskParameters_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_ARM(generators)
	virtualMachineScaleSetManagedDiskParameters_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_ARM{}), generators)

	return virtualMachineScaleSetManagedDiskParameters_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_ARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_Premium_LRS,
		StorageAccountType_Premium_ZRS,
		StorageAccountType_StandardSSD_LRS,
		StorageAccountType_StandardSSD_ZRS,
		StorageAccountType_Standard_LRS,
		StorageAccountType_UltraSSD_LRS))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_ARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResource_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_ARM, VirtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_ARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationProperties_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator()
var virtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_ARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_ARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_ARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_ARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfiguration_ARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResource_ARMGenerator())
}

func Test_VirtualMachineScaleSetIPConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_ARM, VirtualMachineScaleSetIPConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_ARM(subject VirtualMachineScaleSetIPConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfiguration_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIPConfiguration_ARMGenerator()
var virtualMachineScaleSetIPConfiguration_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfiguration_ARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_ARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfiguration_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfiguration_ARMGenerator != nil {
		return virtualMachineScaleSetIPConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_ARM(generators)
	virtualMachineScaleSetIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_ARM(generators)
	virtualMachineScaleSetIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_ARM{}), generators)

	return virtualMachineScaleSetIPConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationProperties_ARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM, VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_ARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_ARM, VirtualMachineScaleSetIPConfigurationProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_ARM(subject VirtualMachineScaleSetIPConfigurationProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfigurationProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfigurationProperties_ARM instances for property testing - lazily instantiated
// by VirtualMachineScaleSetIPConfigurationProperties_ARMGenerator()
var virtualMachineScaleSetIPConfigurationProperties_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationProperties_ARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_ARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationProperties_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationProperties_ARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_ARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_ARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_ARM{}), generators)

	return virtualMachineScaleSetIPConfigurationProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIPConfigurationProperties_PrivateIPAddressVersion_IPv4, VirtualMachineScaleSetIPConfigurationProperties_PrivateIPAddressVersion_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResource_ARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResource_ARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResource_ARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResource_ARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReference_ARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM, VirtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_ARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_ARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_PublicIPAddressVersion_IPv4, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_PublicIPAddressVersion_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTag_ARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_ARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTag_ARM, VirtualMachineScaleSetIpTag_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTag_ARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTag_ARM(subject VirtualMachineScaleSetIpTag_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIpTag_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIpTag_ARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIpTag_ARMGenerator()
var virtualMachineScaleSetIpTag_ARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTag_ARMGenerator returns a generator of VirtualMachineScaleSetIpTag_ARM instances for property testing.
func VirtualMachineScaleSetIpTag_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTag_ARMGenerator != nil {
		return virtualMachineScaleSetIpTag_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_ARM(generators)
	virtualMachineScaleSetIpTag_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_ARM{}), generators)

	return virtualMachineScaleSetIpTag_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_ARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM instances for property testing -
// lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_ARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
}
