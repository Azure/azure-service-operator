// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSets_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSets_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSets_SPECARM, VirtualMachineScaleSets_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSets_SPECARM runs a test to see if a specific instance of VirtualMachineScaleSets_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSets_SPECARM(subject VirtualMachineScaleSets_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSets_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSets_SPECARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSets_SPECARMGenerator()
var virtualMachineScaleSets_specarmGenerator gopter.Gen

// VirtualMachineScaleSets_SPECARMGenerator returns a generator of VirtualMachineScaleSets_SPECARM instances for property testing.
// We first initialize virtualMachineScaleSets_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSets_SPECARMGenerator() gopter.Gen {
	if virtualMachineScaleSets_specarmGenerator != nil {
		return virtualMachineScaleSets_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSets_SPECARM(generators)
	virtualMachineScaleSets_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSets_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSets_SPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSets_SPECARM(generators)
	virtualMachineScaleSets_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSets_SPECARM{}), generators)

	return virtualMachineScaleSets_specarmGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSets_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSets_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSets_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSets_SPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentity_SpecARMGenerator())
	gens["Plan"] = gen.PtrOf(Plan_SpecARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetProperties_SpecARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_SpecARMGenerator())
}

func Test_ExtendedLocation_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_SpecARM, ExtendedLocation_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_SpecARM runs a test to see if a specific instance of ExtendedLocation_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_SpecARM(subject ExtendedLocation_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_SpecARM instances for property testing - lazily instantiated by
//ExtendedLocation_SpecARMGenerator()
var extendedLocation_specARMGenerator gopter.Gen

// ExtendedLocation_SpecARMGenerator returns a generator of ExtendedLocation_SpecARM instances for property testing.
func ExtendedLocation_SpecARMGenerator() gopter.Gen {
	if extendedLocation_specARMGenerator != nil {
		return extendedLocation_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_SpecARM(generators)
	extendedLocation_specARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_SpecARM{}), generators)

	return extendedLocation_specARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_SpecEdgeZone))
}

func Test_Plan_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlan_SpecARM, Plan_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlan_SpecARM runs a test to see if a specific instance of Plan_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlan_SpecARM(subject Plan_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_SpecARM instances for property testing - lazily instantiated by Plan_SpecARMGenerator()
var plan_specARMGenerator gopter.Gen

// Plan_SpecARMGenerator returns a generator of Plan_SpecARM instances for property testing.
func Plan_SpecARMGenerator() gopter.Gen {
	if plan_specARMGenerator != nil {
		return plan_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlan_SpecARM(generators)
	plan_specARMGenerator = gen.Struct(reflect.TypeOf(Plan_SpecARM{}), generators)

	return plan_specARMGenerator
}

// AddIndependentPropertyGeneratorsForPlan_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlan_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_SpecARM, Sku_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_SpecARM runs a test to see if a specific instance of Sku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_SpecARM(subject Sku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_SpecARM instances for property testing - lazily instantiated by Sku_SpecARMGenerator()
var sku_specARMGenerator gopter.Gen

// Sku_SpecARMGenerator returns a generator of Sku_SpecARM instances for property testing.
func Sku_SpecARMGenerator() gopter.Gen {
	if sku_specARMGenerator != nil {
		return sku_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_SpecARM(generators)
	sku_specARMGenerator = gen.Struct(reflect.TypeOf(Sku_SpecARM{}), generators)

	return sku_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_SpecARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentity_SpecARM, VirtualMachineScaleSetIdentity_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentity_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentity_SpecARM(subject VirtualMachineScaleSetIdentity_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIdentity_SpecARMGenerator()
var virtualMachineScaleSetIdentity_specARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentity_SpecARMGenerator returns a generator of VirtualMachineScaleSetIdentity_SpecARM instances for property testing.
func VirtualMachineScaleSetIdentity_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentity_specARMGenerator != nil {
		return virtualMachineScaleSetIdentity_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_SpecARM(generators)
	virtualMachineScaleSetIdentity_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_SpecARM{}), generators)

	return virtualMachineScaleSetIdentity_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_SpecARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachineScaleSetIdentity_Type_SpecNone,
		VirtualMachineScaleSetIdentity_Type_SpecSystemAssigned,
		VirtualMachineScaleSetIdentity_Type_SpecSystemAssignedUserAssigned,
		VirtualMachineScaleSetIdentity_Type_SpecUserAssigned))
}

func Test_VirtualMachineScaleSetProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetProperties_SpecARM, VirtualMachineScaleSetProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetProperties_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetProperties_SpecARM(subject VirtualMachineScaleSetProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetProperties_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetProperties_SpecARMGenerator()
var virtualMachineScaleSetProperties_specARMGenerator gopter.Gen

// VirtualMachineScaleSetProperties_SpecARMGenerator returns a generator of VirtualMachineScaleSetProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetProperties_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetProperties_specARMGenerator != nil {
		return virtualMachineScaleSetProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_SpecARM(generators)
	virtualMachineScaleSetProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_SpecARM(generators)
	virtualMachineScaleSetProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_SpecARM{}), generators)

	return virtualMachineScaleSetProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.OneConstOf(OrchestrationMode_SpecFlexible, OrchestrationMode_SpecUniform))
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilities_SpecARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicy_SpecARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResource_SpecARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResource_SpecARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicy_SpecARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicy_SpecARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfile_SpecARMGenerator())
}

func Test_AdditionalCapabilities_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilities_SpecARM, AdditionalCapabilities_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilities_SpecARM runs a test to see if a specific instance of AdditionalCapabilities_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilities_SpecARM(subject AdditionalCapabilities_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalCapabilities_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalCapabilities_SpecARM instances for property testing - lazily instantiated by
//AdditionalCapabilities_SpecARMGenerator()
var additionalCapabilities_specARMGenerator gopter.Gen

// AdditionalCapabilities_SpecARMGenerator returns a generator of AdditionalCapabilities_SpecARM instances for property testing.
func AdditionalCapabilities_SpecARMGenerator() gopter.Gen {
	if additionalCapabilities_specARMGenerator != nil {
		return additionalCapabilities_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilities_SpecARM(generators)
	additionalCapabilities_specARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_SpecARM{}), generators)

	return additionalCapabilities_specARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilities_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilities_SpecARM(gens map[string]gopter.Gen) {
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicy_SpecARM, AutomaticRepairsPolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicy_SpecARM runs a test to see if a specific instance of AutomaticRepairsPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicy_SpecARM(subject AutomaticRepairsPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticRepairsPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticRepairsPolicy_SpecARM instances for property testing - lazily instantiated by
//AutomaticRepairsPolicy_SpecARMGenerator()
var automaticRepairsPolicy_specARMGenerator gopter.Gen

// AutomaticRepairsPolicy_SpecARMGenerator returns a generator of AutomaticRepairsPolicy_SpecARM instances for property testing.
func AutomaticRepairsPolicy_SpecARMGenerator() gopter.Gen {
	if automaticRepairsPolicy_specARMGenerator != nil {
		return automaticRepairsPolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_SpecARM(generators)
	automaticRepairsPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_SpecARM{}), generators)

	return automaticRepairsPolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScaleInPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicy_SpecARM, ScaleInPolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicy_SpecARM runs a test to see if a specific instance of ScaleInPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicy_SpecARM(subject ScaleInPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleInPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleInPolicy_SpecARM instances for property testing - lazily instantiated by
//ScaleInPolicy_SpecARMGenerator()
var scaleInPolicy_specARMGenerator gopter.Gen

// ScaleInPolicy_SpecARMGenerator returns a generator of ScaleInPolicy_SpecARM instances for property testing.
func ScaleInPolicy_SpecARMGenerator() gopter.Gen {
	if scaleInPolicy_specARMGenerator != nil {
		return scaleInPolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicy_SpecARM(generators)
	scaleInPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_SpecARM{}), generators)

	return scaleInPolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(gen.OneConstOf(ScaleInPolicy_Rules_SpecDefault, ScaleInPolicy_Rules_SpecNewestVM, ScaleInPolicy_Rules_SpecOldestVM))
}

func Test_SubResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_SpecARM, SubResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_SpecARM runs a test to see if a specific instance of SubResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_SpecARM(subject SubResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_SpecARM instances for property testing - lazily instantiated by
//SubResource_SpecARMGenerator()
var subResource_specARMGenerator gopter.Gen

// SubResource_SpecARMGenerator returns a generator of SubResource_SpecARM instances for property testing.
func SubResource_SpecARMGenerator() gopter.Gen {
	if subResource_specARMGenerator != nil {
		return subResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_SpecARM(generators)
	subResource_specARMGenerator = gen.Struct(reflect.TypeOf(SubResource_SpecARM{}), generators)

	return subResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicy_SpecARM, UpgradePolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicy_SpecARM runs a test to see if a specific instance of UpgradePolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicy_SpecARM(subject UpgradePolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpgradePolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpgradePolicy_SpecARM instances for property testing - lazily instantiated by
//UpgradePolicy_SpecARMGenerator()
var upgradePolicy_specARMGenerator gopter.Gen

// UpgradePolicy_SpecARMGenerator returns a generator of UpgradePolicy_SpecARM instances for property testing.
// We first initialize upgradePolicy_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicy_SpecARMGenerator() gopter.Gen {
	if upgradePolicy_specARMGenerator != nil {
		return upgradePolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_SpecARM(generators)
	upgradePolicy_specARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_SpecARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicy_SpecARM(generators)
	upgradePolicy_specARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_SpecARM{}), generators)

	return upgradePolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(UpgradePolicy_Mode_SpecAutomatic, UpgradePolicy_Mode_SpecManual, UpgradePolicy_Mode_SpecRolling))
}

// AddRelatedPropertyGeneratorsForUpgradePolicy_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicy_SpecARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicy_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetVMProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_SpecARM, VirtualMachineScaleSetVMProfile_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_SpecARM(subject VirtualMachineScaleSetVMProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetVMProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetVMProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetVMProfile_SpecARMGenerator()
var virtualMachineScaleSetVMProfile_specARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfile_SpecARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfile_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfile_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfile_specARMGenerator != nil {
		return virtualMachineScaleSetVMProfile_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_SpecARM(generators)
	virtualMachineScaleSetVMProfile_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_SpecARM(generators)
	virtualMachineScaleSetVMProfile_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_SpecARM{}), generators)

	return virtualMachineScaleSetVMProfile_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_SpecDeallocate, EvictionPolicy_SpecDelete))
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_SpecLow, Priority_SpecRegular, Priority_SpecSpot))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["BillingProfile"] = gen.PtrOf(BillingProfile_SpecARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfile_SpecARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfile_SpecARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfile_SpecARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfile_SpecARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfile_SpecARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfile_SpecARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfile_SpecARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicy_SpecARM, AutomaticOSUpgradePolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicy_SpecARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicy_SpecARM(subject AutomaticOSUpgradePolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticOSUpgradePolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticOSUpgradePolicy_SpecARM instances for property testing - lazily instantiated by
//AutomaticOSUpgradePolicy_SpecARMGenerator()
var automaticOSUpgradePolicy_specARMGenerator gopter.Gen

// AutomaticOSUpgradePolicy_SpecARMGenerator returns a generator of AutomaticOSUpgradePolicy_SpecARM instances for property testing.
func AutomaticOSUpgradePolicy_SpecARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicy_specARMGenerator != nil {
		return automaticOSUpgradePolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_SpecARM(generators)
	automaticOSUpgradePolicy_specARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_SpecARM{}), generators)

	return automaticOSUpgradePolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
}

func Test_RollingUpgradePolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicy_SpecARM, RollingUpgradePolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicy_SpecARM runs a test to see if a specific instance of RollingUpgradePolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicy_SpecARM(subject RollingUpgradePolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RollingUpgradePolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RollingUpgradePolicy_SpecARM instances for property testing - lazily instantiated by
//RollingUpgradePolicy_SpecARMGenerator()
var rollingUpgradePolicy_specARMGenerator gopter.Gen

// RollingUpgradePolicy_SpecARMGenerator returns a generator of RollingUpgradePolicy_SpecARM instances for property testing.
func RollingUpgradePolicy_SpecARMGenerator() gopter.Gen {
	if rollingUpgradePolicy_specARMGenerator != nil {
		return rollingUpgradePolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicy_SpecARM(generators)
	rollingUpgradePolicy_specARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_SpecARM{}), generators)

	return rollingUpgradePolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_ScheduledEventsProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduledEventsProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduledEventsProfile_SpecARM, ScheduledEventsProfile_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduledEventsProfile_SpecARM runs a test to see if a specific instance of ScheduledEventsProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduledEventsProfile_SpecARM(subject ScheduledEventsProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduledEventsProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduledEventsProfile_SpecARM instances for property testing - lazily instantiated by
//ScheduledEventsProfile_SpecARMGenerator()
var scheduledEventsProfile_specARMGenerator gopter.Gen

// ScheduledEventsProfile_SpecARMGenerator returns a generator of ScheduledEventsProfile_SpecARM instances for property testing.
func ScheduledEventsProfile_SpecARMGenerator() gopter.Gen {
	if scheduledEventsProfile_specARMGenerator != nil {
		return scheduledEventsProfile_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduledEventsProfile_SpecARM(generators)
	scheduledEventsProfile_specARMGenerator = gen.Struct(reflect.TypeOf(ScheduledEventsProfile_SpecARM{}), generators)

	return scheduledEventsProfile_specARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduledEventsProfile_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduledEventsProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["TerminateNotificationProfile"] = gen.PtrOf(TerminateNotificationProfile_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_SpecARM, VirtualMachineScaleSetExtensionProfile_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_SpecARM(subject VirtualMachineScaleSetExtensionProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetExtensionProfile_SpecARMGenerator()
var virtualMachineScaleSetExtensionProfile_specARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfile_SpecARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_SpecARM instances for property testing.
func VirtualMachineScaleSetExtensionProfile_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfile_specARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfile_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_SpecARM(generators)
	virtualMachineScaleSetExtensionProfile_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_SpecARM{}), generators)

	return virtualMachineScaleSetExtensionProfile_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetNetworkProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_SpecARM, VirtualMachineScaleSetNetworkProfile_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_SpecARM(subject VirtualMachineScaleSetNetworkProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetNetworkProfile_SpecARMGenerator()
var virtualMachineScaleSetNetworkProfile_specARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfile_SpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_SpecARM instances for property testing.
func VirtualMachineScaleSetNetworkProfile_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfile_specARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfile_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_SpecARM(generators)
	virtualMachineScaleSetNetworkProfile_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkProfile_specARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReference_SpecARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfiguration_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_SpecARM, VirtualMachineScaleSetOSProfile_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_SpecARM(subject VirtualMachineScaleSetOSProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetOSProfile_SpecARMGenerator()
var virtualMachineScaleSetOSProfile_specARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfile_SpecARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfile_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfile_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfile_specARMGenerator != nil {
		return virtualMachineScaleSetOSProfile_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_SpecARM(generators)
	virtualMachineScaleSetOSProfile_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_SpecARM(generators)
	virtualMachineScaleSetOSProfile_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_SpecARM{}), generators)

	return virtualMachineScaleSetOSProfile_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfiguration_SpecARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroup_SpecARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfiguration_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_SpecARM, VirtualMachineScaleSetStorageProfile_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_SpecARM(subject VirtualMachineScaleSetStorageProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetStorageProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetStorageProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetStorageProfile_SpecARMGenerator()
var virtualMachineScaleSetStorageProfile_specARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfile_SpecARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_SpecARM instances for property testing.
func VirtualMachineScaleSetStorageProfile_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfile_specARMGenerator != nil {
		return virtualMachineScaleSetStorageProfile_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_SpecARM(generators)
	virtualMachineScaleSetStorageProfile_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_SpecARM{}), generators)

	return virtualMachineScaleSetStorageProfile_specARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDisk_SpecARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReference_SpecARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDisk_SpecARMGenerator())
}

func Test_ApiEntityReference_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReference_SpecARM, ApiEntityReference_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReference_SpecARM runs a test to see if a specific instance of ApiEntityReference_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReference_SpecARM(subject ApiEntityReference_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiEntityReference_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiEntityReference_SpecARM instances for property testing - lazily instantiated by
//ApiEntityReference_SpecARMGenerator()
var apiEntityReference_specARMGenerator gopter.Gen

// ApiEntityReference_SpecARMGenerator returns a generator of ApiEntityReference_SpecARM instances for property testing.
func ApiEntityReference_SpecARMGenerator() gopter.Gen {
	if apiEntityReference_specARMGenerator != nil {
		return apiEntityReference_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReference_SpecARM(generators)
	apiEntityReference_specARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_SpecARM{}), generators)

	return apiEntityReference_specARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReference_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReference_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_TerminateNotificationProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TerminateNotificationProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTerminateNotificationProfile_SpecARM, TerminateNotificationProfile_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTerminateNotificationProfile_SpecARM runs a test to see if a specific instance of TerminateNotificationProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTerminateNotificationProfile_SpecARM(subject TerminateNotificationProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TerminateNotificationProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TerminateNotificationProfile_SpecARM instances for property testing - lazily instantiated by
//TerminateNotificationProfile_SpecARMGenerator()
var terminateNotificationProfile_specARMGenerator gopter.Gen

// TerminateNotificationProfile_SpecARMGenerator returns a generator of TerminateNotificationProfile_SpecARM instances for property testing.
func TerminateNotificationProfile_SpecARMGenerator() gopter.Gen {
	if terminateNotificationProfile_specARMGenerator != nil {
		return terminateNotificationProfile_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTerminateNotificationProfile_SpecARM(generators)
	terminateNotificationProfile_specARMGenerator = gen.Struct(reflect.TypeOf(TerminateNotificationProfile_SpecARM{}), generators)

	return terminateNotificationProfile_specARMGenerator
}

// AddIndependentPropertyGeneratorsForTerminateNotificationProfile_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTerminateNotificationProfile_SpecARM(gens map[string]gopter.Gen) {
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["NotBeforeTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetDataDisk_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_SpecARM, VirtualMachineScaleSetDataDisk_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_SpecARM(subject VirtualMachineScaleSetDataDisk_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetDataDisk_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetDataDisk_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetDataDisk_SpecARMGenerator()
var virtualMachineScaleSetDataDisk_specARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDisk_SpecARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDisk_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDisk_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDisk_specARMGenerator != nil {
		return virtualMachineScaleSetDataDisk_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_SpecARM(generators)
	virtualMachineScaleSetDataDisk_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_SpecARM(generators)
	virtualMachineScaleSetDataDisk_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_SpecARM{}), generators)

	return virtualMachineScaleSetDataDisk_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_SpecARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_SpecNone, Caching_SpecReadOnly, Caching_SpecReadWrite))
	gens["CreateOption"] = gen.OneConstOf(CreateOption_SpecAttach, CreateOption_SpecEmpty, CreateOption_SpecFromImage)
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.Int()
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_SpecARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_SpecARM, VirtualMachineScaleSetNetworkConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_SpecARM(subject VirtualMachineScaleSetNetworkConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfiguration_SpecARM instances for property testing - lazily instantiated
//by VirtualMachineScaleSetNetworkConfiguration_SpecARMGenerator()
var virtualMachineScaleSetNetworkConfiguration_specARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfiguration_SpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfiguration_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfiguration_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfiguration_specARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfiguration_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_SpecARM(generators)
	virtualMachineScaleSetNetworkConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_SpecARM(generators)
	virtualMachineScaleSetNetworkConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkConfiguration_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationProperties_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_SpecARM, VirtualMachineScaleSetOSDisk_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_SpecARM(subject VirtualMachineScaleSetOSDisk_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSDisk_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSDisk_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetOSDisk_SpecARMGenerator()
var virtualMachineScaleSetOSDisk_specARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDisk_SpecARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDisk_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDisk_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDisk_specARMGenerator != nil {
		return virtualMachineScaleSetOSDisk_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_SpecARM(generators)
	virtualMachineScaleSetOSDisk_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_SpecARM(generators)
	virtualMachineScaleSetOSDisk_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_SpecARM{}), generators)

	return virtualMachineScaleSetOSDisk_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_SpecARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_SpecNone, Caching_SpecReadOnly, Caching_SpecReadWrite))
	gens["CreateOption"] = gen.OneConstOf(CreateOption_SpecAttach, CreateOption_SpecEmpty, CreateOption_SpecFromImage)
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetOSDisk_OsType_SpecLinux, VirtualMachineScaleSetOSDisk_OsType_SpecWindows))
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_SpecARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettings_SpecARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDisk_SpecARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_SpecARM, VirtualMachineScaleSetManagedDiskParameters_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_SpecARM(subject VirtualMachineScaleSetManagedDiskParameters_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetManagedDiskParameters_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetManagedDiskParameters_SpecARM instances for property testing - lazily instantiated
//by VirtualMachineScaleSetManagedDiskParameters_SpecARMGenerator()
var virtualMachineScaleSetManagedDiskParameters_specARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParameters_SpecARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParameters_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParameters_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParameters_specARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParameters_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_SpecARM(generators)
	virtualMachineScaleSetManagedDiskParameters_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_SpecARM(generators)
	virtualMachineScaleSetManagedDiskParameters_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_SpecARM{}), generators)

	return virtualMachineScaleSetManagedDiskParameters_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_SpecARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_SpecPremium_LRS,
		StorageAccountType_SpecPremium_ZRS,
		StorageAccountType_SpecStandardSSD_LRS,
		StorageAccountType_SpecStandardSSD_ZRS,
		StorageAccountType_SpecStandard_LRS,
		StorageAccountType_SpecUltraSSD_LRS))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_SpecARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResource_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM, VirtualMachineScaleSetNetworkConfigurationProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetNetworkConfigurationProperties_SpecARMGenerator()
var virtualMachineScaleSetNetworkConfigurationProperties_specARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationProperties_SpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationProperties_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationProperties_specARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfiguration_SpecARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResource_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetIPConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_SpecARM, VirtualMachineScaleSetIPConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_SpecARM(subject VirtualMachineScaleSetIPConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfiguration_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIPConfiguration_SpecARMGenerator()
var virtualMachineScaleSetIPConfiguration_specARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfiguration_SpecARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfiguration_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfiguration_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfiguration_specARMGenerator != nil {
		return virtualMachineScaleSetIPConfiguration_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_SpecARM(generators)
	virtualMachineScaleSetIPConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_SpecARM(generators)
	virtualMachineScaleSetIPConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_SpecARM{}), generators)

	return virtualMachineScaleSetIPConfiguration_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationProperties_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM, VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettings_specARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettings_specARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettings_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettings_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettings_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_SpecARM, VirtualMachineScaleSetIPConfigurationProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_SpecARM(subject VirtualMachineScaleSetIPConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfigurationProperties_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetIPConfigurationProperties_SpecARMGenerator()
var virtualMachineScaleSetIPConfigurationProperties_specARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationProperties_SpecARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationProperties_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationProperties_specARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_SpecARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_SpecARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_SpecARM{}), generators)

	return virtualMachineScaleSetIPConfigurationProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIPConfigurationProperties_PrivateIPAddressVersion_SpecIPv4, VirtualMachineScaleSetIPConfigurationProperties_PrivateIPAddressVersion_SpecIPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResource_SpecARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResource_SpecARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResource_SpecARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResource_SpecARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReference_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM, VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfiguration_specARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfiguration_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfiguration_specARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfiguration_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfiguration_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM instances for property testing -
//lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationProperties_specARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationProperties_specARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_PublicIPAddressVersion_SpecIPv4, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_PublicIPAddressVersion_SpecIPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTag_SpecARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_SpecARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTag_SpecARM, VirtualMachineScaleSetIpTag_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTag_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTag_SpecARM(subject VirtualMachineScaleSetIpTag_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIpTag_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIpTag_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIpTag_SpecARMGenerator()
var virtualMachineScaleSetIpTag_specARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTag_SpecARMGenerator returns a generator of VirtualMachineScaleSetIpTag_SpecARM instances for property testing.
func VirtualMachineScaleSetIpTag_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTag_specARMGenerator != nil {
		return virtualMachineScaleSetIpTag_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_SpecARM(generators)
	virtualMachineScaleSetIpTag_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_SpecARM{}), generators)

	return virtualMachineScaleSetIpTag_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_SpecARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM instances for property testing -
//lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_specARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_specARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.AlphaString()
}
