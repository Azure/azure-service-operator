// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSets_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSets_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetsSPECARM, VirtualMachineScaleSetsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetsSPECARM runs a test to see if a specific instance of VirtualMachineScaleSets_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetsSPECARM(subject VirtualMachineScaleSets_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSets_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSets_SPECARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetsSPECARMGenerator()
var virtualMachineScaleSetsSPECARMGenerator gopter.Gen

// VirtualMachineScaleSetsSPECARMGenerator returns a generator of VirtualMachineScaleSets_SPECARM instances for property testing.
// We first initialize virtualMachineScaleSetsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetsSPECARMGenerator() gopter.Gen {
	if virtualMachineScaleSetsSPECARMGenerator != nil {
		return virtualMachineScaleSetsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetsSPECARM(generators)
	virtualMachineScaleSetsSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSets_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetsSPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetsSPECARM(generators)
	virtualMachineScaleSetsSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSets_SPECARM{}), generators)

	return virtualMachineScaleSetsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetsSPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentitySpecARMGenerator())
	gens["Plan"] = gen.PtrOf(PlanSpecARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPropertiesSpecARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuSpecARMGenerator())
}

func Test_ExtendedLocation_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationSpecARM, ExtendedLocationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationSpecARM runs a test to see if a specific instance of ExtendedLocation_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationSpecARM(subject ExtendedLocation_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_SpecARM instances for property testing - lazily instantiated by
//ExtendedLocationSpecARMGenerator()
var extendedLocationSpecARMGenerator gopter.Gen

// ExtendedLocationSpecARMGenerator returns a generator of ExtendedLocation_SpecARM instances for property testing.
func ExtendedLocationSpecARMGenerator() gopter.Gen {
	if extendedLocationSpecARMGenerator != nil {
		return extendedLocationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationSpecARM(generators)
	extendedLocationSpecARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_SpecARM{}), generators)

	return extendedLocationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_SpecEdgeZone))
}

func Test_Plan_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlanSpecARM, PlanSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlanSpecARM runs a test to see if a specific instance of Plan_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlanSpecARM(subject Plan_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_SpecARM instances for property testing - lazily instantiated by PlanSpecARMGenerator()
var planSpecARMGenerator gopter.Gen

// PlanSpecARMGenerator returns a generator of Plan_SpecARM instances for property testing.
func PlanSpecARMGenerator() gopter.Gen {
	if planSpecARMGenerator != nil {
		return planSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlanSpecARM(generators)
	planSpecARMGenerator = gen.Struct(reflect.TypeOf(Plan_SpecARM{}), generators)

	return planSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForPlanSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlanSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuSpecARM, SkuSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuSpecARM runs a test to see if a specific instance of Sku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuSpecARM(subject Sku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_SpecARM instances for property testing - lazily instantiated by SkuSpecARMGenerator()
var skuSpecARMGenerator gopter.Gen

// SkuSpecARMGenerator returns a generator of Sku_SpecARM instances for property testing.
func SkuSpecARMGenerator() gopter.Gen {
	if skuSpecARMGenerator != nil {
		return skuSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuSpecARM(generators)
	skuSpecARMGenerator = gen.Struct(reflect.TypeOf(Sku_SpecARM{}), generators)

	return skuSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuSpecARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentitySpecARM, VirtualMachineScaleSetIdentitySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentitySpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentitySpecARM(subject VirtualMachineScaleSetIdentity_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIdentitySpecARMGenerator()
var virtualMachineScaleSetIdentitySpecARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentitySpecARMGenerator returns a generator of VirtualMachineScaleSetIdentity_SpecARM instances for property testing.
func VirtualMachineScaleSetIdentitySpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentitySpecARMGenerator != nil {
		return virtualMachineScaleSetIdentitySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentitySpecARM(generators)
	virtualMachineScaleSetIdentitySpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_SpecARM{}), generators)

	return virtualMachineScaleSetIdentitySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentitySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentitySpecARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachineScaleSetIdentitySpecTypeNone,
		VirtualMachineScaleSetIdentitySpecTypeSystemAssigned,
		VirtualMachineScaleSetIdentitySpecTypeSystemAssignedUserAssigned,
		VirtualMachineScaleSetIdentitySpecTypeUserAssigned))
}

func Test_VirtualMachineScaleSetProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPropertiesSpecARM, VirtualMachineScaleSetPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPropertiesSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPropertiesSpecARM(subject VirtualMachineScaleSetProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetProperties_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetPropertiesSpecARMGenerator()
var virtualMachineScaleSetPropertiesSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetPropertiesSpecARMGenerator returns a generator of VirtualMachineScaleSetProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetPropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPropertiesSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPropertiesSpecARMGenerator != nil {
		return virtualMachineScaleSetPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSpecARM(generators)
	virtualMachineScaleSetPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesSpecARM(generators)
	virtualMachineScaleSetPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_SpecARM{}), generators)

	return virtualMachineScaleSetPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.OneConstOf(OrchestrationMode_SpecFlexible, OrchestrationMode_SpecUniform))
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilitiesSpecARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicySpecARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResourceSpecARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResourceSpecARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicySpecARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicySpecARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfileSpecARMGenerator())
}

func Test_AdditionalCapabilities_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilitiesSpecARM, AdditionalCapabilitiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilitiesSpecARM runs a test to see if a specific instance of AdditionalCapabilities_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilitiesSpecARM(subject AdditionalCapabilities_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalCapabilities_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalCapabilities_SpecARM instances for property testing - lazily instantiated by
//AdditionalCapabilitiesSpecARMGenerator()
var additionalCapabilitiesSpecARMGenerator gopter.Gen

// AdditionalCapabilitiesSpecARMGenerator returns a generator of AdditionalCapabilities_SpecARM instances for property testing.
func AdditionalCapabilitiesSpecARMGenerator() gopter.Gen {
	if additionalCapabilitiesSpecARMGenerator != nil {
		return additionalCapabilitiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilitiesSpecARM(generators)
	additionalCapabilitiesSpecARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_SpecARM{}), generators)

	return additionalCapabilitiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilitiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilitiesSpecARM(gens map[string]gopter.Gen) {
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicySpecARM, AutomaticRepairsPolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicySpecARM runs a test to see if a specific instance of AutomaticRepairsPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicySpecARM(subject AutomaticRepairsPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticRepairsPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticRepairsPolicy_SpecARM instances for property testing - lazily instantiated by
//AutomaticRepairsPolicySpecARMGenerator()
var automaticRepairsPolicySpecARMGenerator gopter.Gen

// AutomaticRepairsPolicySpecARMGenerator returns a generator of AutomaticRepairsPolicy_SpecARM instances for property testing.
func AutomaticRepairsPolicySpecARMGenerator() gopter.Gen {
	if automaticRepairsPolicySpecARMGenerator != nil {
		return automaticRepairsPolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicySpecARM(generators)
	automaticRepairsPolicySpecARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_SpecARM{}), generators)

	return automaticRepairsPolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicySpecARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScaleInPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicySpecARM, ScaleInPolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicySpecARM runs a test to see if a specific instance of ScaleInPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicySpecARM(subject ScaleInPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleInPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleInPolicy_SpecARM instances for property testing - lazily instantiated by
//ScaleInPolicySpecARMGenerator()
var scaleInPolicySpecARMGenerator gopter.Gen

// ScaleInPolicySpecARMGenerator returns a generator of ScaleInPolicy_SpecARM instances for property testing.
func ScaleInPolicySpecARMGenerator() gopter.Gen {
	if scaleInPolicySpecARMGenerator != nil {
		return scaleInPolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicySpecARM(generators)
	scaleInPolicySpecARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_SpecARM{}), generators)

	return scaleInPolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicySpecARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(gen.OneConstOf(ScaleInPolicySpecRulesDefault, ScaleInPolicySpecRulesNewestVM, ScaleInPolicySpecRulesOldestVM))
}

func Test_SubResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceSpecARM, SubResourceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceSpecARM runs a test to see if a specific instance of SubResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceSpecARM(subject SubResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_SpecARM instances for property testing - lazily instantiated by SubResourceSpecARMGenerator()
var subResourceSpecARMGenerator gopter.Gen

// SubResourceSpecARMGenerator returns a generator of SubResource_SpecARM instances for property testing.
func SubResourceSpecARMGenerator() gopter.Gen {
	if subResourceSpecARMGenerator != nil {
		return subResourceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceSpecARM(generators)
	subResourceSpecARMGenerator = gen.Struct(reflect.TypeOf(SubResource_SpecARM{}), generators)

	return subResourceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicySpecARM, UpgradePolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicySpecARM runs a test to see if a specific instance of UpgradePolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicySpecARM(subject UpgradePolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpgradePolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpgradePolicy_SpecARM instances for property testing - lazily instantiated by
//UpgradePolicySpecARMGenerator()
var upgradePolicySpecARMGenerator gopter.Gen

// UpgradePolicySpecARMGenerator returns a generator of UpgradePolicy_SpecARM instances for property testing.
// We first initialize upgradePolicySpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicySpecARMGenerator() gopter.Gen {
	if upgradePolicySpecARMGenerator != nil {
		return upgradePolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicySpecARM(generators)
	upgradePolicySpecARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicySpecARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicySpecARM(generators)
	upgradePolicySpecARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_SpecARM{}), generators)

	return upgradePolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicySpecARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(UpgradePolicySpecModeAutomatic, UpgradePolicySpecModeManual, UpgradePolicySpecModeRolling))
}

// AddRelatedPropertyGeneratorsForUpgradePolicySpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicySpecARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicySpecARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicySpecARMGenerator())
}

func Test_VirtualMachineScaleSetVMProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfileSpecARM, VirtualMachineScaleSetVMProfileSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfileSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfileSpecARM(subject VirtualMachineScaleSetVMProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetVMProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetVMProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetVMProfileSpecARMGenerator()
var virtualMachineScaleSetVMProfileSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfileSpecARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfileSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfileSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfileSpecARMGenerator != nil {
		return virtualMachineScaleSetVMProfileSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSpecARM(generators)
	virtualMachineScaleSetVMProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileSpecARM(generators)
	virtualMachineScaleSetVMProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_SpecARM{}), generators)

	return virtualMachineScaleSetVMProfileSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSpecARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_SpecDeallocate, EvictionPolicy_SpecDelete))
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_SpecLow, Priority_SpecRegular, Priority_SpecSpot))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileSpecARM(gens map[string]gopter.Gen) {
	gens["BillingProfile"] = gen.PtrOf(BillingProfileSpecARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfileSpecARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfileSpecARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfileSpecARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfileSpecARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfileSpecARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfileSpecARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfileSpecARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicySpecARM, AutomaticOSUpgradePolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicySpecARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicySpecARM(subject AutomaticOSUpgradePolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticOSUpgradePolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticOSUpgradePolicy_SpecARM instances for property testing - lazily instantiated by
//AutomaticOSUpgradePolicySpecARMGenerator()
var automaticOSUpgradePolicySpecARMGenerator gopter.Gen

// AutomaticOSUpgradePolicySpecARMGenerator returns a generator of AutomaticOSUpgradePolicy_SpecARM instances for property testing.
func AutomaticOSUpgradePolicySpecARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicySpecARMGenerator != nil {
		return automaticOSUpgradePolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicySpecARM(generators)
	automaticOSUpgradePolicySpecARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_SpecARM{}), generators)

	return automaticOSUpgradePolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicySpecARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
}

func Test_RollingUpgradePolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicySpecARM, RollingUpgradePolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicySpecARM runs a test to see if a specific instance of RollingUpgradePolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicySpecARM(subject RollingUpgradePolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RollingUpgradePolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RollingUpgradePolicy_SpecARM instances for property testing - lazily instantiated by
//RollingUpgradePolicySpecARMGenerator()
var rollingUpgradePolicySpecARMGenerator gopter.Gen

// RollingUpgradePolicySpecARMGenerator returns a generator of RollingUpgradePolicy_SpecARM instances for property testing.
func RollingUpgradePolicySpecARMGenerator() gopter.Gen {
	if rollingUpgradePolicySpecARMGenerator != nil {
		return rollingUpgradePolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicySpecARM(generators)
	rollingUpgradePolicySpecARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_SpecARM{}), generators)

	return rollingUpgradePolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicySpecARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_ScheduledEventsProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduledEventsProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduledEventsProfileSpecARM, ScheduledEventsProfileSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduledEventsProfileSpecARM runs a test to see if a specific instance of ScheduledEventsProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduledEventsProfileSpecARM(subject ScheduledEventsProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduledEventsProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduledEventsProfile_SpecARM instances for property testing - lazily instantiated by
//ScheduledEventsProfileSpecARMGenerator()
var scheduledEventsProfileSpecARMGenerator gopter.Gen

// ScheduledEventsProfileSpecARMGenerator returns a generator of ScheduledEventsProfile_SpecARM instances for property testing.
func ScheduledEventsProfileSpecARMGenerator() gopter.Gen {
	if scheduledEventsProfileSpecARMGenerator != nil {
		return scheduledEventsProfileSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduledEventsProfileSpecARM(generators)
	scheduledEventsProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(ScheduledEventsProfile_SpecARM{}), generators)

	return scheduledEventsProfileSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduledEventsProfileSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduledEventsProfileSpecARM(gens map[string]gopter.Gen) {
	gens["TerminateNotificationProfile"] = gen.PtrOf(TerminateNotificationProfileSpecARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileSpecARM, VirtualMachineScaleSetExtensionProfileSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileSpecARM(subject VirtualMachineScaleSetExtensionProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetExtensionProfileSpecARMGenerator()
var virtualMachineScaleSetExtensionProfileSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfileSpecARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_SpecARM instances for property testing.
func VirtualMachineScaleSetExtensionProfileSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfileSpecARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfileSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSpecARM(generators)
	virtualMachineScaleSetExtensionProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_SpecARM{}), generators)

	return virtualMachineScaleSetExtensionProfileSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSpecARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetNetworkProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileSpecARM, VirtualMachineScaleSetNetworkProfileSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileSpecARM(subject VirtualMachineScaleSetNetworkProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetNetworkProfileSpecARMGenerator()
var virtualMachineScaleSetNetworkProfileSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfileSpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_SpecARM instances for property testing.
func VirtualMachineScaleSetNetworkProfileSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfileSpecARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfileSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSpecARM(generators)
	virtualMachineScaleSetNetworkProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkProfileSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSpecARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReferenceSpecARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfigurationSpecARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfileSpecARM, VirtualMachineScaleSetOSProfileSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfileSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfileSpecARM(subject VirtualMachineScaleSetOSProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetOSProfileSpecARMGenerator()
var virtualMachineScaleSetOSProfileSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfileSpecARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfileSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfileSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfileSpecARMGenerator != nil {
		return virtualMachineScaleSetOSProfileSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSpecARM(generators)
	virtualMachineScaleSetOSProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileSpecARM(generators)
	virtualMachineScaleSetOSProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_SpecARM{}), generators)

	return virtualMachineScaleSetOSProfileSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSpecARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileSpecARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfigurationSpecARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroupSpecARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfigurationSpecARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileSpecARM, VirtualMachineScaleSetStorageProfileSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileSpecARM(subject VirtualMachineScaleSetStorageProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetStorageProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetStorageProfile_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetStorageProfileSpecARMGenerator()
var virtualMachineScaleSetStorageProfileSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfileSpecARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_SpecARM instances for property testing.
func VirtualMachineScaleSetStorageProfileSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfileSpecARMGenerator != nil {
		return virtualMachineScaleSetStorageProfileSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileSpecARM(generators)
	virtualMachineScaleSetStorageProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_SpecARM{}), generators)

	return virtualMachineScaleSetStorageProfileSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileSpecARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDiskSpecARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReferenceSpecARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDiskSpecARMGenerator())
}

func Test_ApiEntityReference_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReferenceSpecARM, ApiEntityReferenceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReferenceSpecARM runs a test to see if a specific instance of ApiEntityReference_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReferenceSpecARM(subject ApiEntityReference_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiEntityReference_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiEntityReference_SpecARM instances for property testing - lazily instantiated by
//ApiEntityReferenceSpecARMGenerator()
var apiEntityReferenceSpecARMGenerator gopter.Gen

// ApiEntityReferenceSpecARMGenerator returns a generator of ApiEntityReference_SpecARM instances for property testing.
func ApiEntityReferenceSpecARMGenerator() gopter.Gen {
	if apiEntityReferenceSpecARMGenerator != nil {
		return apiEntityReferenceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReferenceSpecARM(generators)
	apiEntityReferenceSpecARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_SpecARM{}), generators)

	return apiEntityReferenceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReferenceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReferenceSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_TerminateNotificationProfile_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TerminateNotificationProfile_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTerminateNotificationProfileSpecARM, TerminateNotificationProfileSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTerminateNotificationProfileSpecARM runs a test to see if a specific instance of TerminateNotificationProfile_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTerminateNotificationProfileSpecARM(subject TerminateNotificationProfile_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TerminateNotificationProfile_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TerminateNotificationProfile_SpecARM instances for property testing - lazily instantiated by
//TerminateNotificationProfileSpecARMGenerator()
var terminateNotificationProfileSpecARMGenerator gopter.Gen

// TerminateNotificationProfileSpecARMGenerator returns a generator of TerminateNotificationProfile_SpecARM instances for property testing.
func TerminateNotificationProfileSpecARMGenerator() gopter.Gen {
	if terminateNotificationProfileSpecARMGenerator != nil {
		return terminateNotificationProfileSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTerminateNotificationProfileSpecARM(generators)
	terminateNotificationProfileSpecARMGenerator = gen.Struct(reflect.TypeOf(TerminateNotificationProfile_SpecARM{}), generators)

	return terminateNotificationProfileSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForTerminateNotificationProfileSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTerminateNotificationProfileSpecARM(gens map[string]gopter.Gen) {
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["NotBeforeTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetDataDisk_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDiskSpecARM, VirtualMachineScaleSetDataDiskSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDiskSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDiskSpecARM(subject VirtualMachineScaleSetDataDisk_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetDataDisk_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetDataDisk_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetDataDiskSpecARMGenerator()
var virtualMachineScaleSetDataDiskSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDiskSpecARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDiskSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDiskSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDiskSpecARMGenerator != nil {
		return virtualMachineScaleSetDataDiskSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSpecARM(generators)
	virtualMachineScaleSetDataDiskSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskSpecARM(generators)
	virtualMachineScaleSetDataDiskSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_SpecARM{}), generators)

	return virtualMachineScaleSetDataDiskSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSpecARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_SpecNone, Caching_SpecReadOnly, Caching_SpecReadWrite))
	gens["CreateOption"] = gen.OneConstOf(CreateOption_SpecAttach, CreateOption_SpecEmpty, CreateOption_SpecFromImage)
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.Int()
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskSpecARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParametersSpecARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationSpecARM, VirtualMachineScaleSetNetworkConfigurationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationSpecARM(subject VirtualMachineScaleSetNetworkConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfiguration_SpecARM instances for property testing - lazily instantiated
//by VirtualMachineScaleSetNetworkConfigurationSpecARMGenerator()
var virtualMachineScaleSetNetworkConfigurationSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationSpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationSpecARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDiskSpecARM, VirtualMachineScaleSetOSDiskSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDiskSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDiskSpecARM(subject VirtualMachineScaleSetOSDisk_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSDisk_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSDisk_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetOSDiskSpecARMGenerator()
var virtualMachineScaleSetOSDiskSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDiskSpecARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDiskSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDiskSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDiskSpecARMGenerator != nil {
		return virtualMachineScaleSetOSDiskSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSpecARM(generators)
	virtualMachineScaleSetOSDiskSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskSpecARM(generators)
	virtualMachineScaleSetOSDiskSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_SpecARM{}), generators)

	return virtualMachineScaleSetOSDiskSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSpecARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_SpecNone, Caching_SpecReadOnly, Caching_SpecReadWrite))
	gens["CreateOption"] = gen.OneConstOf(CreateOption_SpecAttach, CreateOption_SpecEmpty, CreateOption_SpecFromImage)
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetOSDiskSpecOsTypeLinux, VirtualMachineScaleSetOSDiskSpecOsTypeWindows))
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskSpecARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettingsSpecARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDiskSpecARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParametersSpecARMGenerator())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersSpecARM, VirtualMachineScaleSetManagedDiskParametersSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersSpecARM(subject VirtualMachineScaleSetManagedDiskParameters_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetManagedDiskParameters_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetManagedDiskParameters_SpecARM instances for property testing - lazily instantiated
//by VirtualMachineScaleSetManagedDiskParametersSpecARMGenerator()
var virtualMachineScaleSetManagedDiskParametersSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParametersSpecARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParametersSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParametersSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParametersSpecARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParametersSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSpecARM(generators)
	virtualMachineScaleSetManagedDiskParametersSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSpecARM(generators)
	virtualMachineScaleSetManagedDiskParametersSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_SpecARM{}), generators)

	return virtualMachineScaleSetManagedDiskParametersSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSpecARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_SpecPremiumLRS,
		StorageAccountType_SpecPremiumZRS,
		StorageAccountType_SpecStandardLRS,
		StorageAccountType_SpecStandardSSDLRS,
		StorageAccountType_SpecStandardSSDZRS,
		StorageAccountType_SpecUltraSSDLRS))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSpecARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResourceSpecARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM, VirtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator()
var virtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfigurationSpecARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResourceSpecARMGenerator())
}

func Test_VirtualMachineScaleSetIPConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationSpecARM, VirtualMachineScaleSetIPConfigurationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationSpecARM(subject VirtualMachineScaleSetIPConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfiguration_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIPConfigurationSpecARMGenerator()
var virtualMachineScaleSetIPConfigurationSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationSpecARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationSpecARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSpecARM(generators)
	virtualMachineScaleSetIPConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSpecARM(generators)
	virtualMachineScaleSetIPConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_SpecARM{}), generators)

	return virtualMachineScaleSetIPConfigurationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARM, VirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_SpecARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSpecARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM, VirtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM(subject VirtualMachineScaleSetIPConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfigurationProperties_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator()
var virtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM(generators)
	virtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM(generators)
	virtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_SpecARM{}), generators)

	return virtualMachineScaleSetIPConfigurationPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIPConfigurationPropertiesSpecPrivateIPAddressVersionIPv4, VirtualMachineScaleSetIPConfigurationPropertiesSpecPrivateIPAddressVersionIPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResourceSpecARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResourceSpecARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResourceSpecARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResourceSpecARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReferenceSpecARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM, VirtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_SpecARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM, VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM instances for property testing -
//lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_SpecARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecPublicIPAddressVersionIPv4, VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecPublicIPAddressVersionIPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTagSpecARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceSpecARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTagSpecARM, VirtualMachineScaleSetIpTagSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTagSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTagSpecARM(subject VirtualMachineScaleSetIpTag_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIpTag_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIpTag_SpecARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIpTagSpecARMGenerator()
var virtualMachineScaleSetIpTagSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTagSpecARMGenerator returns a generator of VirtualMachineScaleSetIpTag_SpecARM instances for property testing.
func VirtualMachineScaleSetIpTagSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTagSpecARMGenerator != nil {
		return virtualMachineScaleSetIpTagSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagSpecARM(generators)
	virtualMachineScaleSetIpTagSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_SpecARM{}), generators)

	return virtualMachineScaleSetIpTagSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagSpecARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM instances for property testing -
//lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_SpecARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSpecARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.AlphaString()
}
