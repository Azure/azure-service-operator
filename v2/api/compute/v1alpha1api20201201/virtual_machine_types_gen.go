// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20201201storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /compute/resource-manager/Microsoft.Compute/stable/2020-12-01/compute.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}
type VirtualMachine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualMachines_SPEC  `json:"spec,omitempty"`
	Status            VirtualMachine_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualMachine{}

// GetConditions returns the conditions of the resource
func (machine *VirtualMachine) GetConditions() conditions.Conditions {
	return machine.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (machine *VirtualMachine) SetConditions(conditions conditions.Conditions) {
	machine.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualMachine{}

// ConvertFrom populates our VirtualMachine from the provided hub VirtualMachine
func (machine *VirtualMachine) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201201storage.VirtualMachine)
	if !ok {
		return fmt.Errorf("expected storage:compute/v1alpha1api20201201storage/VirtualMachine but received %T instead", hub)
	}

	return machine.AssignPropertiesFromVirtualMachine(source)
}

// ConvertTo populates the provided hub VirtualMachine from our VirtualMachine
func (machine *VirtualMachine) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201201storage.VirtualMachine)
	if !ok {
		return fmt.Errorf("expected storage:compute/v1alpha1api20201201storage/VirtualMachine but received %T instead", hub)
	}

	return machine.AssignPropertiesToVirtualMachine(destination)
}

// +kubebuilder:webhook:path=/mutate-compute-azure-com-v1alpha1api20201201-virtualmachine,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=virtualmachines,verbs=create;update,versions=v1alpha1api20201201,name=default.v1alpha1api20201201.virtualmachines.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualMachine{}

// Default applies defaults to the VirtualMachine resource
func (machine *VirtualMachine) Default() {
	machine.defaultImpl()
	var temp interface{} = machine
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (machine *VirtualMachine) defaultAzureName() {
	if machine.Spec.AzureName == "" {
		machine.Spec.AzureName = machine.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualMachine resource
func (machine *VirtualMachine) defaultImpl() { machine.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualMachine{}

// AzureName returns the Azure name of the resource
func (machine *VirtualMachine) AzureName() string {
	return machine.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-12-01"
func (machine VirtualMachine) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (machine *VirtualMachine) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (machine *VirtualMachine) GetSpec() genruntime.ConvertibleSpec {
	return &machine.Spec
}

// GetStatus returns the status of this resource
func (machine *VirtualMachine) GetStatus() genruntime.ConvertibleStatus {
	return &machine.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (machine *VirtualMachine) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (machine *VirtualMachine) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &VirtualMachine_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (machine *VirtualMachine) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(machine.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  machine.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (machine *VirtualMachine) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*VirtualMachine_Status); ok {
		machine.Status = *st
		return nil
	}

	// Convert status to required version
	var st VirtualMachine_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	machine.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-compute-azure-com-v1alpha1api20201201-virtualmachine,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=virtualmachines,verbs=create;update,versions=v1alpha1api20201201,name=validate.v1alpha1api20201201.virtualmachines.compute.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualMachine{}

// ValidateCreate validates the creation of the resource
func (machine *VirtualMachine) ValidateCreate() error {
	validations := machine.createValidations()
	var temp interface{} = machine
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (machine *VirtualMachine) ValidateDelete() error {
	validations := machine.deleteValidations()
	var temp interface{} = machine
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (machine *VirtualMachine) ValidateUpdate(old runtime.Object) error {
	validations := machine.updateValidations()
	var temp interface{} = machine
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (machine *VirtualMachine) createValidations() []func() error {
	return []func() error{machine.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (machine *VirtualMachine) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (machine *VirtualMachine) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return machine.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (machine *VirtualMachine) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&machine.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromVirtualMachine populates our VirtualMachine from the provided source VirtualMachine
func (machine *VirtualMachine) AssignPropertiesFromVirtualMachine(source *v1alpha1api20201201storage.VirtualMachine) error {

	// ObjectMeta
	machine.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualMachines_SPEC
	err := spec.AssignPropertiesFromVirtualMachinesSPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachinesSPEC() to populate field Spec")
	}
	machine.Spec = spec

	// Status
	var status VirtualMachine_Status
	err = status.AssignPropertiesFromVirtualMachineStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineStatus() to populate field Status")
	}
	machine.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualMachine populates the provided destination VirtualMachine from our VirtualMachine
func (machine *VirtualMachine) AssignPropertiesToVirtualMachine(destination *v1alpha1api20201201storage.VirtualMachine) error {

	// ObjectMeta
	destination.ObjectMeta = *machine.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201201storage.VirtualMachines_SPEC
	err := machine.Spec.AssignPropertiesToVirtualMachinesSPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualMachinesSPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201201storage.VirtualMachine_Status
	err = machine.Status.AssignPropertiesToVirtualMachineStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (machine *VirtualMachine) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: machine.Spec.OriginalVersion(),
		Kind:    "VirtualMachine",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /compute/resource-manager/Microsoft.Compute/stable/2020-12-01/compute.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}
type VirtualMachineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMachine `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-12-01"}
type APIVersion string

const APIVersionValue = APIVersion("2020-12-01")

type VirtualMachine_Status struct {
	//AdditionalCapabilities: Specifies additional capabilities enabled or disabled on
	//the virtual machine.
	AdditionalCapabilities *AdditionalCapabilities_Status `json:"additionalCapabilities,omitempty"`

	//AvailabilitySet: Specifies information about the availability set that the
	//virtual machine should be assigned to. Virtual machines specified in the same
	//availability set are allocated to different nodes to maximize availability. For
	//more information about availability sets, see [Manage the availability of
	//virtual
	//machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	//For more information on Azure planned maintenance, see [Planned maintenance for
	//virtual machines in
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	//Currently, a VM can only be added to availability set at creation time. The
	//availability set to which the VM is being added should be under the same
	//resource group as the availability set resource. An existing VM cannot be added
	//to an availability set.
	//This property cannot exist along with a non-null
	//properties.virtualMachineScaleSet reference.
	AvailabilitySet *SubResource_Status `json:"availabilitySet,omitempty"`

	//BillingProfile: Specifies the billing related details of a Azure Spot virtual
	//machine.
	//Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile_Status `json:"billingProfile,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DiagnosticsProfile: Specifies the boot diagnostic settings state.
	//Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile_Status `json:"diagnosticsProfile,omitempty"`

	//EvictionPolicy: Specifies the eviction policy for the Azure Spot virtual machine
	//and Azure Spot scale set.
	//For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported
	//and the minimum api-version is 2019-03-01.
	//For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the
	//minimum api-version is 2017-10-30-preview.
	EvictionPolicy *EvictionPolicy_Status `json:"evictionPolicy,omitempty"`

	//ExtendedLocation: The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//ExtensionsTimeBudget: Specifies the time alloted for all extensions to start.
	//The time duration should be between 15 minutes and 120 minutes (inclusive) and
	//should be specified in ISO 8601 format. The default value is 90 minutes
	//(PT1H30M).
	//Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty"`

	//HardwareProfile: Specifies the hardware settings for the virtual machine.
	HardwareProfile *HardwareProfile_Status `json:"hardwareProfile,omitempty"`

	//Host: Specifies information about the dedicated host that the virtual machine
	//resides in.
	//Minimum api-version: 2018-10-01.
	Host *SubResource_Status `json:"host,omitempty"`

	//HostGroup: Specifies information about the dedicated host group that the virtual
	//machine resides in.
	//Minimum api-version: 2020-06-01.
	//NOTE: User cannot specify both host and hostGroup properties.
	HostGroup *SubResource_Status `json:"hostGroup,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Identity: The identity of the virtual machine, if configured.
	Identity *VirtualMachineIdentity_Status `json:"identity,omitempty"`

	//InstanceView: The virtual machine instance view.
	InstanceView *VirtualMachineInstanceView_Status `json:"instanceView,omitempty"`

	//LicenseType: Specifies that the image or disk that is being used was licensed
	//on-premises.
	//Possible values for Windows Server operating system are:
	//Windows_Client
	//Windows_Server
	//Possible values for Linux Server operating system are:
	//RHEL_BYOS (for RHEL)
	//SLES_BYOS (for SUSE)
	//For more information, see [Azure Hybrid Use Benefit for Windows
	//Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
	//[Azure Hybrid Use Benefit for Linux
	//Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)
	//Minimum api-version: 2015-06-15
	LicenseType *string `json:"licenseType,omitempty"`

	//Location: Resource location
	Location *string `json:"location,omitempty"`

	//Name: Resource name
	Name *string `json:"name,omitempty"`

	//NetworkProfile: Specifies the network interfaces of the virtual machine.
	NetworkProfile *NetworkProfile_Status `json:"networkProfile,omitempty"`

	//OsProfile: Specifies the operating system settings used while creating the
	//virtual machine. Some of the settings cannot be changed once VM is provisioned.
	OsProfile *OSProfile_Status `json:"osProfile,omitempty"`

	//Plan: Specifies information about the marketplace image used to create the
	//virtual machine. This element is only used for marketplace images. Before you
	//can use a marketplace image from an API, you must enable the image for
	//programmatic use.  In the Azure portal, find the marketplace image that you want
	//to use and then click Want to deploy programmatically, Get Started ->. Enter any
	//required information and then click Save.
	Plan *Plan_Status `json:"plan,omitempty"`

	//PlatformFaultDomain: Specifies the scale set logical fault domain into which the
	//Virtual Machine will be created. By default, the Virtual Machine will by
	//automatically assigned to a fault domain that best maintains balance across
	//available fault domains.
	//<li>This is applicable only if the 'virtualMachineScaleSet' property of this
	//Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced,
	//must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated
	//once the Virtual Machine is created.<li>Fault domain assignment can be viewed in
	//the Virtual Machine Instance View.
	//Minimum api‐version: 2020‐12‐01
	PlatformFaultDomain *int `json:"platformFaultDomain,omitempty"`

	//Priority: Specifies the priority for the virtual machine.
	//Minimum api-version: 2019-03-01
	Priority *Priority_Status `json:"priority,omitempty"`

	//ProvisioningState: The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ProximityPlacementGroup: Specifies information about the proximity placement
	//group that the virtual machine should be assigned to.
	//Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource_Status `json:"proximityPlacementGroup,omitempty"`

	//Resources: The virtual machine child extension resources.
	Resources []VirtualMachineExtension_Status `json:"resources,omitempty"`

	//SecurityProfile: Specifies the Security related profile settings for the virtual
	//machine.
	SecurityProfile *SecurityProfile_Status `json:"securityProfile,omitempty"`

	//StorageProfile: Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile_Status `json:"storageProfile,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//VirtualMachineScaleSet: Specifies information about the virtual machine scale
	//set that the virtual machine should be assigned to. Virtual machines specified
	//in the same virtual machine scale set are allocated to different nodes to
	//maximize availability. Currently, a VM can only be added to virtual machine
	//scale set at creation time. An existing VM cannot be added to a virtual machine
	//scale set.
	//This property cannot exist along with a non-null properties.availabilitySet
	//reference.
	//Minimum api‐version: 2019‐03‐01
	VirtualMachineScaleSet *SubResource_Status `json:"virtualMachineScaleSet,omitempty"`

	//VmId: Specifies the VM unique ID which is a 128-bits identifier that is encoded
	//and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS
	//commands.
	VmId *string `json:"vmId,omitempty"`

	//Zones: The virtual machine zones.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualMachine_Status{}

// ConvertStatusFrom populates our VirtualMachine_Status from the provided source
func (machine *VirtualMachine_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201201storage.VirtualMachine_Status)
	if ok {
		// Populate our instance from source
		return machine.AssignPropertiesFromVirtualMachineStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.VirtualMachine_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = machine.AssignPropertiesFromVirtualMachineStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualMachine_Status
func (machine *VirtualMachine_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201201storage.VirtualMachine_Status)
	if ok {
		// Populate destination from our instance
		return machine.AssignPropertiesToVirtualMachineStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.VirtualMachine_Status{}
	err := machine.AssignPropertiesToVirtualMachineStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualMachine_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (machine *VirtualMachine_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachine_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (machine *VirtualMachine_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachine_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachine_StatusARM, got %T", armInput)
	}

	// Set property ‘AdditionalCapabilities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdditionalCapabilities != nil {
			var additionalCapabilities1 AdditionalCapabilities_Status
			err := additionalCapabilities1.PopulateFromARM(owner, *typedInput.Properties.AdditionalCapabilities)
			if err != nil {
				return err
			}
			additionalCapabilities := additionalCapabilities1
			machine.AdditionalCapabilities = &additionalCapabilities
		}
	}

	// Set property ‘AvailabilitySet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AvailabilitySet != nil {
			var availabilitySet1 SubResource_Status
			err := availabilitySet1.PopulateFromARM(owner, *typedInput.Properties.AvailabilitySet)
			if err != nil {
				return err
			}
			availabilitySet := availabilitySet1
			machine.AvailabilitySet = &availabilitySet
		}
	}

	// Set property ‘BillingProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BillingProfile != nil {
			var billingProfile1 BillingProfile_Status
			err := billingProfile1.PopulateFromARM(owner, *typedInput.Properties.BillingProfile)
			if err != nil {
				return err
			}
			billingProfile := billingProfile1
			machine.BillingProfile = &billingProfile
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DiagnosticsProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiagnosticsProfile != nil {
			var diagnosticsProfile1 DiagnosticsProfile_Status
			err := diagnosticsProfile1.PopulateFromARM(owner, *typedInput.Properties.DiagnosticsProfile)
			if err != nil {
				return err
			}
			diagnosticsProfile := diagnosticsProfile1
			machine.DiagnosticsProfile = &diagnosticsProfile
		}
	}

	// Set property ‘EvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EvictionPolicy != nil {
			evictionPolicy := *typedInput.Properties.EvictionPolicy
			machine.EvictionPolicy = &evictionPolicy
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		machine.ExtendedLocation = &extendedLocation
	}

	// Set property ‘ExtensionsTimeBudget’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExtensionsTimeBudget != nil {
			extensionsTimeBudget := *typedInput.Properties.ExtensionsTimeBudget
			machine.ExtensionsTimeBudget = &extensionsTimeBudget
		}
	}

	// Set property ‘HardwareProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HardwareProfile != nil {
			var hardwareProfile1 HardwareProfile_Status
			err := hardwareProfile1.PopulateFromARM(owner, *typedInput.Properties.HardwareProfile)
			if err != nil {
				return err
			}
			hardwareProfile := hardwareProfile1
			machine.HardwareProfile = &hardwareProfile
		}
	}

	// Set property ‘Host’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Host != nil {
			var host1 SubResource_Status
			err := host1.PopulateFromARM(owner, *typedInput.Properties.Host)
			if err != nil {
				return err
			}
			host := host1
			machine.Host = &host
		}
	}

	// Set property ‘HostGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostGroup != nil {
			var hostGroup1 SubResource_Status
			err := hostGroup1.PopulateFromARM(owner, *typedInput.Properties.HostGroup)
			if err != nil {
				return err
			}
			hostGroup := hostGroup1
			machine.HostGroup = &hostGroup
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		machine.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 VirtualMachineIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		machine.Identity = &identity
	}

	// Set property ‘InstanceView’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InstanceView != nil {
			var instanceView1 VirtualMachineInstanceView_Status
			err := instanceView1.PopulateFromARM(owner, *typedInput.Properties.InstanceView)
			if err != nil {
				return err
			}
			instanceView := instanceView1
			machine.InstanceView = &instanceView
		}
	}

	// Set property ‘LicenseType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LicenseType != nil {
			licenseType := *typedInput.Properties.LicenseType
			machine.LicenseType = &licenseType
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		machine.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		machine.Name = &name
	}

	// Set property ‘NetworkProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkProfile != nil {
			var networkProfile1 NetworkProfile_Status
			err := networkProfile1.PopulateFromARM(owner, *typedInput.Properties.NetworkProfile)
			if err != nil {
				return err
			}
			networkProfile := networkProfile1
			machine.NetworkProfile = &networkProfile
		}
	}

	// Set property ‘OsProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsProfile != nil {
			var osProfile1 OSProfile_Status
			err := osProfile1.PopulateFromARM(owner, *typedInput.Properties.OsProfile)
			if err != nil {
				return err
			}
			osProfile := osProfile1
			machine.OsProfile = &osProfile
		}
	}

	// Set property ‘Plan’:
	if typedInput.Plan != nil {
		var plan1 Plan_Status
		err := plan1.PopulateFromARM(owner, *typedInput.Plan)
		if err != nil {
			return err
		}
		plan := plan1
		machine.Plan = &plan
	}

	// Set property ‘PlatformFaultDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PlatformFaultDomain != nil {
			platformFaultDomain := *typedInput.Properties.PlatformFaultDomain
			machine.PlatformFaultDomain = &platformFaultDomain
		}
	}

	// Set property ‘Priority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Priority != nil {
			priority := *typedInput.Properties.Priority
			machine.Priority = &priority
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			machine.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ProximityPlacementGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProximityPlacementGroup != nil {
			var proximityPlacementGroup1 SubResource_Status
			err := proximityPlacementGroup1.PopulateFromARM(owner, *typedInput.Properties.ProximityPlacementGroup)
			if err != nil {
				return err
			}
			proximityPlacementGroup := proximityPlacementGroup1
			machine.ProximityPlacementGroup = &proximityPlacementGroup
		}
	}

	// Set property ‘Resources’:
	for _, item := range typedInput.Resources {
		var item1 VirtualMachineExtension_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		machine.Resources = append(machine.Resources, item1)
	}

	// Set property ‘SecurityProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecurityProfile != nil {
			var securityProfile1 SecurityProfile_Status
			err := securityProfile1.PopulateFromARM(owner, *typedInput.Properties.SecurityProfile)
			if err != nil {
				return err
			}
			securityProfile := securityProfile1
			machine.SecurityProfile = &securityProfile
		}
	}

	// Set property ‘StorageProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageProfile != nil {
			var storageProfile1 StorageProfile_Status
			err := storageProfile1.PopulateFromARM(owner, *typedInput.Properties.StorageProfile)
			if err != nil {
				return err
			}
			storageProfile := storageProfile1
			machine.StorageProfile = &storageProfile
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		machine.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			machine.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		machine.Type = &typeVar
	}

	// Set property ‘VirtualMachineScaleSet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VirtualMachineScaleSet != nil {
			var virtualMachineScaleSet1 SubResource_Status
			err := virtualMachineScaleSet1.PopulateFromARM(owner, *typedInput.Properties.VirtualMachineScaleSet)
			if err != nil {
				return err
			}
			virtualMachineScaleSet := virtualMachineScaleSet1
			machine.VirtualMachineScaleSet = &virtualMachineScaleSet
		}
	}

	// Set property ‘VmId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VmId != nil {
			vmId := *typedInput.Properties.VmId
			machine.VmId = &vmId
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		machine.Zones = append(machine.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineStatus populates our VirtualMachine_Status from the provided source VirtualMachine_Status
func (machine *VirtualMachine_Status) AssignPropertiesFromVirtualMachineStatus(source *v1alpha1api20201201storage.VirtualMachine_Status) error {

	// AdditionalCapabilities
	if source.AdditionalCapabilities != nil {
		var additionalCapability AdditionalCapabilities_Status
		err := additionalCapability.AssignPropertiesFromAdditionalCapabilitiesStatus(source.AdditionalCapabilities)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdditionalCapabilitiesStatus() to populate field AdditionalCapabilities")
		}
		machine.AdditionalCapabilities = &additionalCapability
	} else {
		machine.AdditionalCapabilities = nil
	}

	// AvailabilitySet
	if source.AvailabilitySet != nil {
		var availabilitySet SubResource_Status
		err := availabilitySet.AssignPropertiesFromSubResourceStatus(source.AvailabilitySet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field AvailabilitySet")
		}
		machine.AvailabilitySet = &availabilitySet
	} else {
		machine.AvailabilitySet = nil
	}

	// BillingProfile
	if source.BillingProfile != nil {
		var billingProfile BillingProfile_Status
		err := billingProfile.AssignPropertiesFromBillingProfileStatus(source.BillingProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBillingProfileStatus() to populate field BillingProfile")
		}
		machine.BillingProfile = &billingProfile
	} else {
		machine.BillingProfile = nil
	}

	// Conditions
	machine.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DiagnosticsProfile
	if source.DiagnosticsProfile != nil {
		var diagnosticsProfile DiagnosticsProfile_Status
		err := diagnosticsProfile.AssignPropertiesFromDiagnosticsProfileStatus(source.DiagnosticsProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiagnosticsProfileStatus() to populate field DiagnosticsProfile")
		}
		machine.DiagnosticsProfile = &diagnosticsProfile
	} else {
		machine.DiagnosticsProfile = nil
	}

	// EvictionPolicy
	if source.EvictionPolicy != nil {
		evictionPolicy := EvictionPolicy_Status(*source.EvictionPolicy)
		machine.EvictionPolicy = &evictionPolicy
	} else {
		machine.EvictionPolicy = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationStatus() to populate field ExtendedLocation")
		}
		machine.ExtendedLocation = &extendedLocation
	} else {
		machine.ExtendedLocation = nil
	}

	// ExtensionsTimeBudget
	machine.ExtensionsTimeBudget = genruntime.ClonePointerToString(source.ExtensionsTimeBudget)

	// HardwareProfile
	if source.HardwareProfile != nil {
		var hardwareProfile HardwareProfile_Status
		err := hardwareProfile.AssignPropertiesFromHardwareProfileStatus(source.HardwareProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHardwareProfileStatus() to populate field HardwareProfile")
		}
		machine.HardwareProfile = &hardwareProfile
	} else {
		machine.HardwareProfile = nil
	}

	// Host
	if source.Host != nil {
		var host SubResource_Status
		err := host.AssignPropertiesFromSubResourceStatus(source.Host)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field Host")
		}
		machine.Host = &host
	} else {
		machine.Host = nil
	}

	// HostGroup
	if source.HostGroup != nil {
		var hostGroup SubResource_Status
		err := hostGroup.AssignPropertiesFromSubResourceStatus(source.HostGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field HostGroup")
		}
		machine.HostGroup = &hostGroup
	} else {
		machine.HostGroup = nil
	}

	// Id
	machine.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity VirtualMachineIdentity_Status
		err := identity.AssignPropertiesFromVirtualMachineIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineIdentityStatus() to populate field Identity")
		}
		machine.Identity = &identity
	} else {
		machine.Identity = nil
	}

	// InstanceView
	if source.InstanceView != nil {
		var instanceView VirtualMachineInstanceView_Status
		err := instanceView.AssignPropertiesFromVirtualMachineInstanceViewStatus(source.InstanceView)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineInstanceViewStatus() to populate field InstanceView")
		}
		machine.InstanceView = &instanceView
	} else {
		machine.InstanceView = nil
	}

	// LicenseType
	machine.LicenseType = genruntime.ClonePointerToString(source.LicenseType)

	// Location
	machine.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	machine.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkProfile
	if source.NetworkProfile != nil {
		var networkProfile NetworkProfile_Status
		err := networkProfile.AssignPropertiesFromNetworkProfileStatus(source.NetworkProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkProfileStatus() to populate field NetworkProfile")
		}
		machine.NetworkProfile = &networkProfile
	} else {
		machine.NetworkProfile = nil
	}

	// OsProfile
	if source.OsProfile != nil {
		var osProfile OSProfile_Status
		err := osProfile.AssignPropertiesFromOSProfileStatus(source.OsProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromOSProfileStatus() to populate field OsProfile")
		}
		machine.OsProfile = &osProfile
	} else {
		machine.OsProfile = nil
	}

	// Plan
	if source.Plan != nil {
		var plan Plan_Status
		err := plan.AssignPropertiesFromPlanStatus(source.Plan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPlanStatus() to populate field Plan")
		}
		machine.Plan = &plan
	} else {
		machine.Plan = nil
	}

	// PlatformFaultDomain
	machine.PlatformFaultDomain = genruntime.ClonePointerToInt(source.PlatformFaultDomain)

	// Priority
	if source.Priority != nil {
		priority := Priority_Status(*source.Priority)
		machine.Priority = &priority
	} else {
		machine.Priority = nil
	}

	// ProvisioningState
	machine.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ProximityPlacementGroup
	if source.ProximityPlacementGroup != nil {
		var proximityPlacementGroup SubResource_Status
		err := proximityPlacementGroup.AssignPropertiesFromSubResourceStatus(source.ProximityPlacementGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field ProximityPlacementGroup")
		}
		machine.ProximityPlacementGroup = &proximityPlacementGroup
	} else {
		machine.ProximityPlacementGroup = nil
	}

	// Resources
	if source.Resources != nil {
		resourceList := make([]VirtualMachineExtension_Status, len(source.Resources))
		for resourceIndex, resourceItem := range source.Resources {
			// Shadow the loop variable to avoid aliasing
			resourceItem := resourceItem
			var resource VirtualMachineExtension_Status
			err := resource.AssignPropertiesFromVirtualMachineExtensionStatus(&resourceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineExtensionStatus() to populate field Resources")
			}
			resourceList[resourceIndex] = resource
		}
		machine.Resources = resourceList
	} else {
		machine.Resources = nil
	}

	// SecurityProfile
	if source.SecurityProfile != nil {
		var securityProfile SecurityProfile_Status
		err := securityProfile.AssignPropertiesFromSecurityProfileStatus(source.SecurityProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSecurityProfileStatus() to populate field SecurityProfile")
		}
		machine.SecurityProfile = &securityProfile
	} else {
		machine.SecurityProfile = nil
	}

	// StorageProfile
	if source.StorageProfile != nil {
		var storageProfile StorageProfile_Status
		err := storageProfile.AssignPropertiesFromStorageProfileStatus(source.StorageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageProfileStatus() to populate field StorageProfile")
		}
		machine.StorageProfile = &storageProfile
	} else {
		machine.StorageProfile = nil
	}

	// Tags
	machine.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	machine.Type = genruntime.ClonePointerToString(source.Type)

	// VirtualMachineScaleSet
	if source.VirtualMachineScaleSet != nil {
		var virtualMachineScaleSet SubResource_Status
		err := virtualMachineScaleSet.AssignPropertiesFromSubResourceStatus(source.VirtualMachineScaleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field VirtualMachineScaleSet")
		}
		machine.VirtualMachineScaleSet = &virtualMachineScaleSet
	} else {
		machine.VirtualMachineScaleSet = nil
	}

	// VmId
	machine.VmId = genruntime.ClonePointerToString(source.VmId)

	// Zones
	machine.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineStatus populates the provided destination VirtualMachine_Status from our VirtualMachine_Status
func (machine *VirtualMachine_Status) AssignPropertiesToVirtualMachineStatus(destination *v1alpha1api20201201storage.VirtualMachine_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalCapabilities
	if machine.AdditionalCapabilities != nil {
		var additionalCapability v1alpha1api20201201storage.AdditionalCapabilities_Status
		err := machine.AdditionalCapabilities.AssignPropertiesToAdditionalCapabilitiesStatus(&additionalCapability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdditionalCapabilitiesStatus() to populate field AdditionalCapabilities")
		}
		destination.AdditionalCapabilities = &additionalCapability
	} else {
		destination.AdditionalCapabilities = nil
	}

	// AvailabilitySet
	if machine.AvailabilitySet != nil {
		var availabilitySet v1alpha1api20201201storage.SubResource_Status
		err := machine.AvailabilitySet.AssignPropertiesToSubResourceStatus(&availabilitySet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field AvailabilitySet")
		}
		destination.AvailabilitySet = &availabilitySet
	} else {
		destination.AvailabilitySet = nil
	}

	// BillingProfile
	if machine.BillingProfile != nil {
		var billingProfile v1alpha1api20201201storage.BillingProfile_Status
		err := machine.BillingProfile.AssignPropertiesToBillingProfileStatus(&billingProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBillingProfileStatus() to populate field BillingProfile")
		}
		destination.BillingProfile = &billingProfile
	} else {
		destination.BillingProfile = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(machine.Conditions)

	// DiagnosticsProfile
	if machine.DiagnosticsProfile != nil {
		var diagnosticsProfile v1alpha1api20201201storage.DiagnosticsProfile_Status
		err := machine.DiagnosticsProfile.AssignPropertiesToDiagnosticsProfileStatus(&diagnosticsProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiagnosticsProfileStatus() to populate field DiagnosticsProfile")
		}
		destination.DiagnosticsProfile = &diagnosticsProfile
	} else {
		destination.DiagnosticsProfile = nil
	}

	// EvictionPolicy
	if machine.EvictionPolicy != nil {
		evictionPolicy := string(*machine.EvictionPolicy)
		destination.EvictionPolicy = &evictionPolicy
	} else {
		destination.EvictionPolicy = nil
	}

	// ExtendedLocation
	if machine.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201201storage.ExtendedLocation_Status
		err := machine.ExtendedLocation.AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationStatus() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// ExtensionsTimeBudget
	destination.ExtensionsTimeBudget = genruntime.ClonePointerToString(machine.ExtensionsTimeBudget)

	// HardwareProfile
	if machine.HardwareProfile != nil {
		var hardwareProfile v1alpha1api20201201storage.HardwareProfile_Status
		err := machine.HardwareProfile.AssignPropertiesToHardwareProfileStatus(&hardwareProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHardwareProfileStatus() to populate field HardwareProfile")
		}
		destination.HardwareProfile = &hardwareProfile
	} else {
		destination.HardwareProfile = nil
	}

	// Host
	if machine.Host != nil {
		var host v1alpha1api20201201storage.SubResource_Status
		err := machine.Host.AssignPropertiesToSubResourceStatus(&host)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field Host")
		}
		destination.Host = &host
	} else {
		destination.Host = nil
	}

	// HostGroup
	if machine.HostGroup != nil {
		var hostGroup v1alpha1api20201201storage.SubResource_Status
		err := machine.HostGroup.AssignPropertiesToSubResourceStatus(&hostGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field HostGroup")
		}
		destination.HostGroup = &hostGroup
	} else {
		destination.HostGroup = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(machine.Id)

	// Identity
	if machine.Identity != nil {
		var identity v1alpha1api20201201storage.VirtualMachineIdentity_Status
		err := machine.Identity.AssignPropertiesToVirtualMachineIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// InstanceView
	if machine.InstanceView != nil {
		var instanceView v1alpha1api20201201storage.VirtualMachineInstanceView_Status
		err := machine.InstanceView.AssignPropertiesToVirtualMachineInstanceViewStatus(&instanceView)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineInstanceViewStatus() to populate field InstanceView")
		}
		destination.InstanceView = &instanceView
	} else {
		destination.InstanceView = nil
	}

	// LicenseType
	destination.LicenseType = genruntime.ClonePointerToString(machine.LicenseType)

	// Location
	destination.Location = genruntime.ClonePointerToString(machine.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(machine.Name)

	// NetworkProfile
	if machine.NetworkProfile != nil {
		var networkProfile v1alpha1api20201201storage.NetworkProfile_Status
		err := machine.NetworkProfile.AssignPropertiesToNetworkProfileStatus(&networkProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkProfileStatus() to populate field NetworkProfile")
		}
		destination.NetworkProfile = &networkProfile
	} else {
		destination.NetworkProfile = nil
	}

	// OsProfile
	if machine.OsProfile != nil {
		var osProfile v1alpha1api20201201storage.OSProfile_Status
		err := machine.OsProfile.AssignPropertiesToOSProfileStatus(&osProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToOSProfileStatus() to populate field OsProfile")
		}
		destination.OsProfile = &osProfile
	} else {
		destination.OsProfile = nil
	}

	// Plan
	if machine.Plan != nil {
		var plan v1alpha1api20201201storage.Plan_Status
		err := machine.Plan.AssignPropertiesToPlanStatus(&plan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPlanStatus() to populate field Plan")
		}
		destination.Plan = &plan
	} else {
		destination.Plan = nil
	}

	// PlatformFaultDomain
	destination.PlatformFaultDomain = genruntime.ClonePointerToInt(machine.PlatformFaultDomain)

	// Priority
	if machine.Priority != nil {
		priority := string(*machine.Priority)
		destination.Priority = &priority
	} else {
		destination.Priority = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(machine.ProvisioningState)

	// ProximityPlacementGroup
	if machine.ProximityPlacementGroup != nil {
		var proximityPlacementGroup v1alpha1api20201201storage.SubResource_Status
		err := machine.ProximityPlacementGroup.AssignPropertiesToSubResourceStatus(&proximityPlacementGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field ProximityPlacementGroup")
		}
		destination.ProximityPlacementGroup = &proximityPlacementGroup
	} else {
		destination.ProximityPlacementGroup = nil
	}

	// Resources
	if machine.Resources != nil {
		resourceList := make([]v1alpha1api20201201storage.VirtualMachineExtension_Status, len(machine.Resources))
		for resourceIndex, resourceItem := range machine.Resources {
			// Shadow the loop variable to avoid aliasing
			resourceItem := resourceItem
			var resource v1alpha1api20201201storage.VirtualMachineExtension_Status
			err := resourceItem.AssignPropertiesToVirtualMachineExtensionStatus(&resource)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineExtensionStatus() to populate field Resources")
			}
			resourceList[resourceIndex] = resource
		}
		destination.Resources = resourceList
	} else {
		destination.Resources = nil
	}

	// SecurityProfile
	if machine.SecurityProfile != nil {
		var securityProfile v1alpha1api20201201storage.SecurityProfile_Status
		err := machine.SecurityProfile.AssignPropertiesToSecurityProfileStatus(&securityProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSecurityProfileStatus() to populate field SecurityProfile")
		}
		destination.SecurityProfile = &securityProfile
	} else {
		destination.SecurityProfile = nil
	}

	// StorageProfile
	if machine.StorageProfile != nil {
		var storageProfile v1alpha1api20201201storage.StorageProfile_Status
		err := machine.StorageProfile.AssignPropertiesToStorageProfileStatus(&storageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageProfileStatus() to populate field StorageProfile")
		}
		destination.StorageProfile = &storageProfile
	} else {
		destination.StorageProfile = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(machine.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(machine.Type)

	// VirtualMachineScaleSet
	if machine.VirtualMachineScaleSet != nil {
		var virtualMachineScaleSet v1alpha1api20201201storage.SubResource_Status
		err := machine.VirtualMachineScaleSet.AssignPropertiesToSubResourceStatus(&virtualMachineScaleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field VirtualMachineScaleSet")
		}
		destination.VirtualMachineScaleSet = &virtualMachineScaleSet
	} else {
		destination.VirtualMachineScaleSet = nil
	}

	// VmId
	destination.VmId = genruntime.ClonePointerToString(machine.VmId)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(machine.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachines_SPEC struct {
	//AdditionalCapabilities: Specifies additional capabilities enabled or disabled on
	//the virtual machine.
	AdditionalCapabilities *AdditionalCapabilities_Spec `json:"additionalCapabilities,omitempty"`

	//AvailabilitySet: Specifies information about the availability set that the
	//virtual machine should be assigned to. Virtual machines specified in the same
	//availability set are allocated to different nodes to maximize availability. For
	//more information about availability sets, see [Manage the availability of
	//virtual
	//machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	//For more information on Azure planned maintenance, see [Planned maintenance for
	//virtual machines in
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	//Currently, a VM can only be added to availability set at creation time. The
	//availability set to which the VM is being added should be under the same
	//resource group as the availability set resource. An existing VM cannot be added
	//to an availability set.
	//This property cannot exist along with a non-null
	//properties.virtualMachineScaleSet reference.
	AvailabilitySet *SubResource_Spec `json:"availabilitySet,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BillingProfile: Specifies the billing related details of a Azure Spot virtual
	//machine.
	//Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile_Spec `json:"billingProfile,omitempty"`

	//DiagnosticsProfile: Specifies the boot diagnostic settings state.
	//Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile_Spec `json:"diagnosticsProfile,omitempty"`

	//EvictionPolicy: Specifies the eviction policy for the Azure Spot virtual machine
	//and Azure Spot scale set.
	//For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported
	//and the minimum api-version is 2019-03-01.
	//For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the
	//minimum api-version is 2017-10-30-preview.
	EvictionPolicy *EvictionPolicy_Spec `json:"evictionPolicy,omitempty"`

	//ExtendedLocation: The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation_Spec `json:"extendedLocation,omitempty"`

	//ExtensionsTimeBudget: Specifies the time alloted for all extensions to start.
	//The time duration should be between 15 minutes and 120 minutes (inclusive) and
	//should be specified in ISO 8601 format. The default value is 90 minutes
	//(PT1H30M).
	//Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty"`

	//HardwareProfile: Specifies the hardware settings for the virtual machine.
	HardwareProfile *HardwareProfile_Spec `json:"hardwareProfile,omitempty"`

	//Host: Specifies information about the dedicated host that the virtual machine
	//resides in.
	//Minimum api-version: 2018-10-01.
	Host *SubResource_Spec `json:"host,omitempty"`

	//HostGroup: Specifies information about the dedicated host group that the virtual
	//machine resides in.
	//Minimum api-version: 2020-06-01.
	//NOTE: User cannot specify both host and hostGroup properties.
	HostGroup *SubResource_Spec `json:"hostGroup,omitempty"`

	//Identity: The identity of the virtual machine, if configured.
	Identity *VirtualMachineIdentity_Spec `json:"identity,omitempty"`

	//LicenseType: Specifies that the image or disk that is being used was licensed
	//on-premises.
	//Possible values for Windows Server operating system are:
	//Windows_Client
	//Windows_Server
	//Possible values for Linux Server operating system are:
	//RHEL_BYOS (for RHEL)
	//SLES_BYOS (for SUSE)
	//For more information, see [Azure Hybrid Use Benefit for Windows
	//Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
	//[Azure Hybrid Use Benefit for Linux
	//Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)
	//Minimum api-version: 2015-06-15
	LicenseType *string `json:"licenseType,omitempty"`

	// +kubebuilder:validation:Required
	//Location: Resource location
	Location string `json:"location"`

	//NetworkProfile: Specifies the network interfaces of the virtual machine.
	NetworkProfile *NetworkProfile_Spec `json:"networkProfile,omitempty"`

	//OsProfile: Specifies the operating system settings used while creating the
	//virtual machine. Some of the settings cannot be changed once VM is provisioned.
	OsProfile *OSProfile_Spec `json:"osProfile,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Plan: Specifies information about the marketplace image used to create the
	//virtual machine. This element is only used for marketplace images. Before you
	//can use a marketplace image from an API, you must enable the image for
	//programmatic use.  In the Azure portal, find the marketplace image that you want
	//to use and then click Want to deploy programmatically, Get Started ->. Enter any
	//required information and then click Save.
	Plan *Plan_Spec `json:"plan,omitempty"`

	//PlatformFaultDomain: Specifies the scale set logical fault domain into which the
	//Virtual Machine will be created. By default, the Virtual Machine will by
	//automatically assigned to a fault domain that best maintains balance across
	//available fault domains.
	//<li>This is applicable only if the 'virtualMachineScaleSet' property of this
	//Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced,
	//must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated
	//once the Virtual Machine is created.<li>Fault domain assignment can be viewed in
	//the Virtual Machine Instance View.
	//Minimum api‐version: 2020‐12‐01
	PlatformFaultDomain *int `json:"platformFaultDomain,omitempty"`

	//Priority: Specifies the priority for the virtual machine.
	//Minimum api-version: 2019-03-01
	Priority *Priority_Spec `json:"priority,omitempty"`

	//ProximityPlacementGroup: Specifies information about the proximity placement
	//group that the virtual machine should be assigned to.
	//Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource_Spec `json:"proximityPlacementGroup,omitempty"`

	//SecurityProfile: Specifies the Security related profile settings for the virtual
	//machine.
	SecurityProfile *SecurityProfile_Spec `json:"securityProfile,omitempty"`

	//StorageProfile: Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile_Spec `json:"storageProfile,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//VirtualMachineScaleSet: Specifies information about the virtual machine scale
	//set that the virtual machine should be assigned to. Virtual machines specified
	//in the same virtual machine scale set are allocated to different nodes to
	//maximize availability. Currently, a VM can only be added to virtual machine
	//scale set at creation time. An existing VM cannot be added to a virtual machine
	//scale set.
	//This property cannot exist along with a non-null properties.availabilitySet
	//reference.
	//Minimum api‐version: 2019‐03‐01
	VirtualMachineScaleSet *SubResource_Spec `json:"virtualMachineScaleSet,omitempty"`

	//Zones: The virtual machine zones.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualMachines_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *VirtualMachines_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result VirtualMachines_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘ExtendedLocation’:
	if spec.ExtendedLocation != nil {
		extendedLocationARM, err := (*spec.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocation_SpecARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if spec.Identity != nil {
		identityARM, err := (*spec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(VirtualMachineIdentity_SpecARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	result.Location = spec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Plan’:
	if spec.Plan != nil {
		planARM, err := (*spec.Plan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		plan := planARM.(Plan_SpecARM)
		result.Plan = &plan
	}

	// Set property ‘Properties’:
	if spec.AdditionalCapabilities != nil ||
		spec.AvailabilitySet != nil ||
		spec.BillingProfile != nil ||
		spec.DiagnosticsProfile != nil ||
		spec.EvictionPolicy != nil ||
		spec.ExtensionsTimeBudget != nil ||
		spec.HardwareProfile != nil ||
		spec.Host != nil ||
		spec.HostGroup != nil ||
		spec.LicenseType != nil ||
		spec.NetworkProfile != nil ||
		spec.OsProfile != nil ||
		spec.PlatformFaultDomain != nil ||
		spec.Priority != nil ||
		spec.ProximityPlacementGroup != nil ||
		spec.SecurityProfile != nil ||
		spec.StorageProfile != nil ||
		spec.VirtualMachineScaleSet != nil {
		result.Properties = &VirtualMachineProperties_SpecARM{}
	}
	if spec.AdditionalCapabilities != nil {
		additionalCapabilitiesARM, err := (*spec.AdditionalCapabilities).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		additionalCapabilities := additionalCapabilitiesARM.(AdditionalCapabilities_SpecARM)
		result.Properties.AdditionalCapabilities = &additionalCapabilities
	}
	if spec.AvailabilitySet != nil {
		availabilitySetARM, err := (*spec.AvailabilitySet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		availabilitySet := availabilitySetARM.(SubResource_SpecARM)
		result.Properties.AvailabilitySet = &availabilitySet
	}
	if spec.BillingProfile != nil {
		billingProfileARM, err := (*spec.BillingProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		billingProfile := billingProfileARM.(BillingProfile_SpecARM)
		result.Properties.BillingProfile = &billingProfile
	}
	if spec.DiagnosticsProfile != nil {
		diagnosticsProfileARM, err := (*spec.DiagnosticsProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diagnosticsProfile := diagnosticsProfileARM.(DiagnosticsProfile_SpecARM)
		result.Properties.DiagnosticsProfile = &diagnosticsProfile
	}
	if spec.EvictionPolicy != nil {
		evictionPolicy := *spec.EvictionPolicy
		result.Properties.EvictionPolicy = &evictionPolicy
	}
	if spec.ExtensionsTimeBudget != nil {
		extensionsTimeBudget := *spec.ExtensionsTimeBudget
		result.Properties.ExtensionsTimeBudget = &extensionsTimeBudget
	}
	if spec.HardwareProfile != nil {
		hardwareProfileARM, err := (*spec.HardwareProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		hardwareProfile := hardwareProfileARM.(HardwareProfile_SpecARM)
		result.Properties.HardwareProfile = &hardwareProfile
	}
	if spec.Host != nil {
		hostARM, err := (*spec.Host).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		host := hostARM.(SubResource_SpecARM)
		result.Properties.Host = &host
	}
	if spec.HostGroup != nil {
		hostGroupARM, err := (*spec.HostGroup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		hostGroup := hostGroupARM.(SubResource_SpecARM)
		result.Properties.HostGroup = &hostGroup
	}
	if spec.LicenseType != nil {
		licenseType := *spec.LicenseType
		result.Properties.LicenseType = &licenseType
	}
	if spec.NetworkProfile != nil {
		networkProfileARM, err := (*spec.NetworkProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkProfile := networkProfileARM.(NetworkProfile_SpecARM)
		result.Properties.NetworkProfile = &networkProfile
	}
	if spec.OsProfile != nil {
		osProfileARM, err := (*spec.OsProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		osProfile := osProfileARM.(OSProfile_SpecARM)
		result.Properties.OsProfile = &osProfile
	}
	if spec.PlatformFaultDomain != nil {
		platformFaultDomain := *spec.PlatformFaultDomain
		result.Properties.PlatformFaultDomain = &platformFaultDomain
	}
	if spec.Priority != nil {
		priority := *spec.Priority
		result.Properties.Priority = &priority
	}
	if spec.ProximityPlacementGroup != nil {
		proximityPlacementGroupARM, err := (*spec.ProximityPlacementGroup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		proximityPlacementGroup := proximityPlacementGroupARM.(SubResource_SpecARM)
		result.Properties.ProximityPlacementGroup = &proximityPlacementGroup
	}
	if spec.SecurityProfile != nil {
		securityProfileARM, err := (*spec.SecurityProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		securityProfile := securityProfileARM.(SecurityProfile_SpecARM)
		result.Properties.SecurityProfile = &securityProfile
	}
	if spec.StorageProfile != nil {
		storageProfileARM, err := (*spec.StorageProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storageProfile := storageProfileARM.(StorageProfile_SpecARM)
		result.Properties.StorageProfile = &storageProfile
	}
	if spec.VirtualMachineScaleSet != nil {
		virtualMachineScaleSetARM, err := (*spec.VirtualMachineScaleSet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		virtualMachineScaleSet := virtualMachineScaleSetARM.(SubResource_SpecARM)
		result.Properties.VirtualMachineScaleSet = &virtualMachineScaleSet
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range spec.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *VirtualMachines_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachines_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *VirtualMachines_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachines_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachines_SPECARM, got %T", armInput)
	}

	// Set property ‘AdditionalCapabilities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdditionalCapabilities != nil {
			var additionalCapabilities1 AdditionalCapabilities_Spec
			err := additionalCapabilities1.PopulateFromARM(owner, *typedInput.Properties.AdditionalCapabilities)
			if err != nil {
				return err
			}
			additionalCapabilities := additionalCapabilities1
			spec.AdditionalCapabilities = &additionalCapabilities
		}
	}

	// Set property ‘AvailabilitySet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AvailabilitySet != nil {
			var availabilitySet1 SubResource_Spec
			err := availabilitySet1.PopulateFromARM(owner, *typedInput.Properties.AvailabilitySet)
			if err != nil {
				return err
			}
			availabilitySet := availabilitySet1
			spec.AvailabilitySet = &availabilitySet
		}
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BillingProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BillingProfile != nil {
			var billingProfile1 BillingProfile_Spec
			err := billingProfile1.PopulateFromARM(owner, *typedInput.Properties.BillingProfile)
			if err != nil {
				return err
			}
			billingProfile := billingProfile1
			spec.BillingProfile = &billingProfile
		}
	}

	// Set property ‘DiagnosticsProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DiagnosticsProfile != nil {
			var diagnosticsProfile1 DiagnosticsProfile_Spec
			err := diagnosticsProfile1.PopulateFromARM(owner, *typedInput.Properties.DiagnosticsProfile)
			if err != nil {
				return err
			}
			diagnosticsProfile := diagnosticsProfile1
			spec.DiagnosticsProfile = &diagnosticsProfile
		}
	}

	// Set property ‘EvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EvictionPolicy != nil {
			evictionPolicy := *typedInput.Properties.EvictionPolicy
			spec.EvictionPolicy = &evictionPolicy
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Spec
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		spec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘ExtensionsTimeBudget’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExtensionsTimeBudget != nil {
			extensionsTimeBudget := *typedInput.Properties.ExtensionsTimeBudget
			spec.ExtensionsTimeBudget = &extensionsTimeBudget
		}
	}

	// Set property ‘HardwareProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HardwareProfile != nil {
			var hardwareProfile1 HardwareProfile_Spec
			err := hardwareProfile1.PopulateFromARM(owner, *typedInput.Properties.HardwareProfile)
			if err != nil {
				return err
			}
			hardwareProfile := hardwareProfile1
			spec.HardwareProfile = &hardwareProfile
		}
	}

	// Set property ‘Host’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Host != nil {
			var host1 SubResource_Spec
			err := host1.PopulateFromARM(owner, *typedInput.Properties.Host)
			if err != nil {
				return err
			}
			host := host1
			spec.Host = &host
		}
	}

	// Set property ‘HostGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostGroup != nil {
			var hostGroup1 SubResource_Spec
			err := hostGroup1.PopulateFromARM(owner, *typedInput.Properties.HostGroup)
			if err != nil {
				return err
			}
			hostGroup := hostGroup1
			spec.HostGroup = &hostGroup
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 VirtualMachineIdentity_Spec
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		spec.Identity = &identity
	}

	// Set property ‘LicenseType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LicenseType != nil {
			licenseType := *typedInput.Properties.LicenseType
			spec.LicenseType = &licenseType
		}
	}

	// Set property ‘Location’:
	spec.Location = typedInput.Location

	// Set property ‘NetworkProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkProfile != nil {
			var networkProfile1 NetworkProfile_Spec
			err := networkProfile1.PopulateFromARM(owner, *typedInput.Properties.NetworkProfile)
			if err != nil {
				return err
			}
			networkProfile := networkProfile1
			spec.NetworkProfile = &networkProfile
		}
	}

	// Set property ‘OsProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsProfile != nil {
			var osProfile1 OSProfile_Spec
			err := osProfile1.PopulateFromARM(owner, *typedInput.Properties.OsProfile)
			if err != nil {
				return err
			}
			osProfile := osProfile1
			spec.OsProfile = &osProfile
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Plan’:
	if typedInput.Plan != nil {
		var plan1 Plan_Spec
		err := plan1.PopulateFromARM(owner, *typedInput.Plan)
		if err != nil {
			return err
		}
		plan := plan1
		spec.Plan = &plan
	}

	// Set property ‘PlatformFaultDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PlatformFaultDomain != nil {
			platformFaultDomain := *typedInput.Properties.PlatformFaultDomain
			spec.PlatformFaultDomain = &platformFaultDomain
		}
	}

	// Set property ‘Priority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Priority != nil {
			priority := *typedInput.Properties.Priority
			spec.Priority = &priority
		}
	}

	// Set property ‘ProximityPlacementGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProximityPlacementGroup != nil {
			var proximityPlacementGroup1 SubResource_Spec
			err := proximityPlacementGroup1.PopulateFromARM(owner, *typedInput.Properties.ProximityPlacementGroup)
			if err != nil {
				return err
			}
			proximityPlacementGroup := proximityPlacementGroup1
			spec.ProximityPlacementGroup = &proximityPlacementGroup
		}
	}

	// Set property ‘SecurityProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecurityProfile != nil {
			var securityProfile1 SecurityProfile_Spec
			err := securityProfile1.PopulateFromARM(owner, *typedInput.Properties.SecurityProfile)
			if err != nil {
				return err
			}
			securityProfile := securityProfile1
			spec.SecurityProfile = &securityProfile
		}
	}

	// Set property ‘StorageProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageProfile != nil {
			var storageProfile1 StorageProfile_Spec
			err := storageProfile1.PopulateFromARM(owner, *typedInput.Properties.StorageProfile)
			if err != nil {
				return err
			}
			storageProfile := storageProfile1
			spec.StorageProfile = &storageProfile
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// Set property ‘VirtualMachineScaleSet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VirtualMachineScaleSet != nil {
			var virtualMachineScaleSet1 SubResource_Spec
			err := virtualMachineScaleSet1.PopulateFromARM(owner, *typedInput.Properties.VirtualMachineScaleSet)
			if err != nil {
				return err
			}
			virtualMachineScaleSet := virtualMachineScaleSet1
			spec.VirtualMachineScaleSet = &virtualMachineScaleSet
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		spec.Zones = append(spec.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualMachines_SPEC{}

// ConvertSpecFrom populates our VirtualMachines_SPEC from the provided source
func (spec *VirtualMachines_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201201storage.VirtualMachines_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromVirtualMachinesSPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.VirtualMachines_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromVirtualMachinesSPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualMachines_SPEC
func (spec *VirtualMachines_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201201storage.VirtualMachines_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToVirtualMachinesSPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.VirtualMachines_SPEC{}
	err := spec.AssignPropertiesToVirtualMachinesSPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualMachinesSPEC populates our VirtualMachines_SPEC from the provided source VirtualMachines_SPEC
func (spec *VirtualMachines_SPEC) AssignPropertiesFromVirtualMachinesSPEC(source *v1alpha1api20201201storage.VirtualMachines_SPEC) error {

	// AdditionalCapabilities
	if source.AdditionalCapabilities != nil {
		var additionalCapability AdditionalCapabilities_Spec
		err := additionalCapability.AssignPropertiesFromAdditionalCapabilitiesSpec(source.AdditionalCapabilities)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAdditionalCapabilitiesSpec() to populate field AdditionalCapabilities")
		}
		spec.AdditionalCapabilities = &additionalCapability
	} else {
		spec.AdditionalCapabilities = nil
	}

	// AvailabilitySet
	if source.AvailabilitySet != nil {
		var availabilitySet SubResource_Spec
		err := availabilitySet.AssignPropertiesFromSubResourceSpec(source.AvailabilitySet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field AvailabilitySet")
		}
		spec.AvailabilitySet = &availabilitySet
	} else {
		spec.AvailabilitySet = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// BillingProfile
	if source.BillingProfile != nil {
		var billingProfile BillingProfile_Spec
		err := billingProfile.AssignPropertiesFromBillingProfileSpec(source.BillingProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBillingProfileSpec() to populate field BillingProfile")
		}
		spec.BillingProfile = &billingProfile
	} else {
		spec.BillingProfile = nil
	}

	// DiagnosticsProfile
	if source.DiagnosticsProfile != nil {
		var diagnosticsProfile DiagnosticsProfile_Spec
		err := diagnosticsProfile.AssignPropertiesFromDiagnosticsProfileSpec(source.DiagnosticsProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiagnosticsProfileSpec() to populate field DiagnosticsProfile")
		}
		spec.DiagnosticsProfile = &diagnosticsProfile
	} else {
		spec.DiagnosticsProfile = nil
	}

	// EvictionPolicy
	if source.EvictionPolicy != nil {
		evictionPolicy := EvictionPolicy_Spec(*source.EvictionPolicy)
		spec.EvictionPolicy = &evictionPolicy
	} else {
		spec.EvictionPolicy = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Spec
		err := extendedLocation.AssignPropertiesFromExtendedLocationSpec(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationSpec() to populate field ExtendedLocation")
		}
		spec.ExtendedLocation = &extendedLocation
	} else {
		spec.ExtendedLocation = nil
	}

	// ExtensionsTimeBudget
	spec.ExtensionsTimeBudget = genruntime.ClonePointerToString(source.ExtensionsTimeBudget)

	// HardwareProfile
	if source.HardwareProfile != nil {
		var hardwareProfile HardwareProfile_Spec
		err := hardwareProfile.AssignPropertiesFromHardwareProfileSpec(source.HardwareProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHardwareProfileSpec() to populate field HardwareProfile")
		}
		spec.HardwareProfile = &hardwareProfile
	} else {
		spec.HardwareProfile = nil
	}

	// Host
	if source.Host != nil {
		var host SubResource_Spec
		err := host.AssignPropertiesFromSubResourceSpec(source.Host)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field Host")
		}
		spec.Host = &host
	} else {
		spec.Host = nil
	}

	// HostGroup
	if source.HostGroup != nil {
		var hostGroup SubResource_Spec
		err := hostGroup.AssignPropertiesFromSubResourceSpec(source.HostGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field HostGroup")
		}
		spec.HostGroup = &hostGroup
	} else {
		spec.HostGroup = nil
	}

	// Identity
	if source.Identity != nil {
		var identity VirtualMachineIdentity_Spec
		err := identity.AssignPropertiesFromVirtualMachineIdentitySpec(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineIdentitySpec() to populate field Identity")
		}
		spec.Identity = &identity
	} else {
		spec.Identity = nil
	}

	// LicenseType
	spec.LicenseType = genruntime.ClonePointerToString(source.LicenseType)

	// Location
	spec.Location = genruntime.GetOptionalStringValue(source.Location)

	// NetworkProfile
	if source.NetworkProfile != nil {
		var networkProfile NetworkProfile_Spec
		err := networkProfile.AssignPropertiesFromNetworkProfileSpec(source.NetworkProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkProfileSpec() to populate field NetworkProfile")
		}
		spec.NetworkProfile = &networkProfile
	} else {
		spec.NetworkProfile = nil
	}

	// OsProfile
	if source.OsProfile != nil {
		var osProfile OSProfile_Spec
		err := osProfile.AssignPropertiesFromOSProfileSpec(source.OsProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromOSProfileSpec() to populate field OsProfile")
		}
		spec.OsProfile = &osProfile
	} else {
		spec.OsProfile = nil
	}

	// Owner
	spec.Owner = source.Owner.Copy()

	// Plan
	if source.Plan != nil {
		var plan Plan_Spec
		err := plan.AssignPropertiesFromPlanSpec(source.Plan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPlanSpec() to populate field Plan")
		}
		spec.Plan = &plan
	} else {
		spec.Plan = nil
	}

	// PlatformFaultDomain
	spec.PlatformFaultDomain = genruntime.ClonePointerToInt(source.PlatformFaultDomain)

	// Priority
	if source.Priority != nil {
		priority := Priority_Spec(*source.Priority)
		spec.Priority = &priority
	} else {
		spec.Priority = nil
	}

	// ProximityPlacementGroup
	if source.ProximityPlacementGroup != nil {
		var proximityPlacementGroup SubResource_Spec
		err := proximityPlacementGroup.AssignPropertiesFromSubResourceSpec(source.ProximityPlacementGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field ProximityPlacementGroup")
		}
		spec.ProximityPlacementGroup = &proximityPlacementGroup
	} else {
		spec.ProximityPlacementGroup = nil
	}

	// SecurityProfile
	if source.SecurityProfile != nil {
		var securityProfile SecurityProfile_Spec
		err := securityProfile.AssignPropertiesFromSecurityProfileSpec(source.SecurityProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSecurityProfileSpec() to populate field SecurityProfile")
		}
		spec.SecurityProfile = &securityProfile
	} else {
		spec.SecurityProfile = nil
	}

	// StorageProfile
	if source.StorageProfile != nil {
		var storageProfile StorageProfile_Spec
		err := storageProfile.AssignPropertiesFromStorageProfileSpec(source.StorageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageProfileSpec() to populate field StorageProfile")
		}
		spec.StorageProfile = &storageProfile
	} else {
		spec.StorageProfile = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// VirtualMachineScaleSet
	if source.VirtualMachineScaleSet != nil {
		var virtualMachineScaleSet SubResource_Spec
		err := virtualMachineScaleSet.AssignPropertiesFromSubResourceSpec(source.VirtualMachineScaleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field VirtualMachineScaleSet")
		}
		spec.VirtualMachineScaleSet = &virtualMachineScaleSet
	} else {
		spec.VirtualMachineScaleSet = nil
	}

	// Zones
	spec.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachinesSPEC populates the provided destination VirtualMachines_SPEC from our VirtualMachines_SPEC
func (spec *VirtualMachines_SPEC) AssignPropertiesToVirtualMachinesSPEC(destination *v1alpha1api20201201storage.VirtualMachines_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalCapabilities
	if spec.AdditionalCapabilities != nil {
		var additionalCapability v1alpha1api20201201storage.AdditionalCapabilities_Spec
		err := spec.AdditionalCapabilities.AssignPropertiesToAdditionalCapabilitiesSpec(&additionalCapability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAdditionalCapabilitiesSpec() to populate field AdditionalCapabilities")
		}
		destination.AdditionalCapabilities = &additionalCapability
	} else {
		destination.AdditionalCapabilities = nil
	}

	// AvailabilitySet
	if spec.AvailabilitySet != nil {
		var availabilitySet v1alpha1api20201201storage.SubResource_Spec
		err := spec.AvailabilitySet.AssignPropertiesToSubResourceSpec(&availabilitySet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field AvailabilitySet")
		}
		destination.AvailabilitySet = &availabilitySet
	} else {
		destination.AvailabilitySet = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// BillingProfile
	if spec.BillingProfile != nil {
		var billingProfile v1alpha1api20201201storage.BillingProfile_Spec
		err := spec.BillingProfile.AssignPropertiesToBillingProfileSpec(&billingProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBillingProfileSpec() to populate field BillingProfile")
		}
		destination.BillingProfile = &billingProfile
	} else {
		destination.BillingProfile = nil
	}

	// DiagnosticsProfile
	if spec.DiagnosticsProfile != nil {
		var diagnosticsProfile v1alpha1api20201201storage.DiagnosticsProfile_Spec
		err := spec.DiagnosticsProfile.AssignPropertiesToDiagnosticsProfileSpec(&diagnosticsProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiagnosticsProfileSpec() to populate field DiagnosticsProfile")
		}
		destination.DiagnosticsProfile = &diagnosticsProfile
	} else {
		destination.DiagnosticsProfile = nil
	}

	// EvictionPolicy
	if spec.EvictionPolicy != nil {
		evictionPolicy := string(*spec.EvictionPolicy)
		destination.EvictionPolicy = &evictionPolicy
	} else {
		destination.EvictionPolicy = nil
	}

	// ExtendedLocation
	if spec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201201storage.ExtendedLocation_Spec
		err := spec.ExtendedLocation.AssignPropertiesToExtendedLocationSpec(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationSpec() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// ExtensionsTimeBudget
	destination.ExtensionsTimeBudget = genruntime.ClonePointerToString(spec.ExtensionsTimeBudget)

	// HardwareProfile
	if spec.HardwareProfile != nil {
		var hardwareProfile v1alpha1api20201201storage.HardwareProfile_Spec
		err := spec.HardwareProfile.AssignPropertiesToHardwareProfileSpec(&hardwareProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHardwareProfileSpec() to populate field HardwareProfile")
		}
		destination.HardwareProfile = &hardwareProfile
	} else {
		destination.HardwareProfile = nil
	}

	// Host
	if spec.Host != nil {
		var host v1alpha1api20201201storage.SubResource_Spec
		err := spec.Host.AssignPropertiesToSubResourceSpec(&host)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field Host")
		}
		destination.Host = &host
	} else {
		destination.Host = nil
	}

	// HostGroup
	if spec.HostGroup != nil {
		var hostGroup v1alpha1api20201201storage.SubResource_Spec
		err := spec.HostGroup.AssignPropertiesToSubResourceSpec(&hostGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field HostGroup")
		}
		destination.HostGroup = &hostGroup
	} else {
		destination.HostGroup = nil
	}

	// Identity
	if spec.Identity != nil {
		var identity v1alpha1api20201201storage.VirtualMachineIdentity_Spec
		err := spec.Identity.AssignPropertiesToVirtualMachineIdentitySpec(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineIdentitySpec() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// LicenseType
	destination.LicenseType = genruntime.ClonePointerToString(spec.LicenseType)

	// Location
	location := spec.Location
	destination.Location = &location

	// NetworkProfile
	if spec.NetworkProfile != nil {
		var networkProfile v1alpha1api20201201storage.NetworkProfile_Spec
		err := spec.NetworkProfile.AssignPropertiesToNetworkProfileSpec(&networkProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkProfileSpec() to populate field NetworkProfile")
		}
		destination.NetworkProfile = &networkProfile
	} else {
		destination.NetworkProfile = nil
	}

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// OsProfile
	if spec.OsProfile != nil {
		var osProfile v1alpha1api20201201storage.OSProfile_Spec
		err := spec.OsProfile.AssignPropertiesToOSProfileSpec(&osProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToOSProfileSpec() to populate field OsProfile")
		}
		destination.OsProfile = &osProfile
	} else {
		destination.OsProfile = nil
	}

	// Owner
	destination.Owner = spec.Owner.Copy()

	// Plan
	if spec.Plan != nil {
		var plan v1alpha1api20201201storage.Plan_Spec
		err := spec.Plan.AssignPropertiesToPlanSpec(&plan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPlanSpec() to populate field Plan")
		}
		destination.Plan = &plan
	} else {
		destination.Plan = nil
	}

	// PlatformFaultDomain
	destination.PlatformFaultDomain = genruntime.ClonePointerToInt(spec.PlatformFaultDomain)

	// Priority
	if spec.Priority != nil {
		priority := string(*spec.Priority)
		destination.Priority = &priority
	} else {
		destination.Priority = nil
	}

	// ProximityPlacementGroup
	if spec.ProximityPlacementGroup != nil {
		var proximityPlacementGroup v1alpha1api20201201storage.SubResource_Spec
		err := spec.ProximityPlacementGroup.AssignPropertiesToSubResourceSpec(&proximityPlacementGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field ProximityPlacementGroup")
		}
		destination.ProximityPlacementGroup = &proximityPlacementGroup
	} else {
		destination.ProximityPlacementGroup = nil
	}

	// SecurityProfile
	if spec.SecurityProfile != nil {
		var securityProfile v1alpha1api20201201storage.SecurityProfile_Spec
		err := spec.SecurityProfile.AssignPropertiesToSecurityProfileSpec(&securityProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSecurityProfileSpec() to populate field SecurityProfile")
		}
		destination.SecurityProfile = &securityProfile
	} else {
		destination.SecurityProfile = nil
	}

	// StorageProfile
	if spec.StorageProfile != nil {
		var storageProfile v1alpha1api20201201storage.StorageProfile_Spec
		err := spec.StorageProfile.AssignPropertiesToStorageProfileSpec(&storageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageProfileSpec() to populate field StorageProfile")
		}
		destination.StorageProfile = &storageProfile
	} else {
		destination.StorageProfile = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// VirtualMachineScaleSet
	if spec.VirtualMachineScaleSet != nil {
		var virtualMachineScaleSet v1alpha1api20201201storage.SubResource_Spec
		err := spec.VirtualMachineScaleSet.AssignPropertiesToSubResourceSpec(&virtualMachineScaleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field VirtualMachineScaleSet")
		}
		destination.VirtualMachineScaleSet = &virtualMachineScaleSet
	} else {
		destination.VirtualMachineScaleSet = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(spec.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *VirtualMachines_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *VirtualMachines_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type AdditionalCapabilities_Spec struct {
	//UltraSSDEnabled: The flag that enables or disables a capability to have one or
	//more managed data disks with UltraSSD_LRS storage account type on the VM or
	//VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a
	//virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `json:"ultraSSDEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &AdditionalCapabilities_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (capabilities *AdditionalCapabilities_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if capabilities == nil {
		return nil, nil
	}
	var result AdditionalCapabilities_SpecARM

	// Set property ‘UltraSSDEnabled’:
	if capabilities.UltraSSDEnabled != nil {
		ultraSSDEnabled := *capabilities.UltraSSDEnabled
		result.UltraSSDEnabled = &ultraSSDEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capabilities *AdditionalCapabilities_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdditionalCapabilities_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capabilities *AdditionalCapabilities_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdditionalCapabilities_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdditionalCapabilities_SpecARM, got %T", armInput)
	}

	// Set property ‘UltraSSDEnabled’:
	if typedInput.UltraSSDEnabled != nil {
		ultraSSDEnabled := *typedInput.UltraSSDEnabled
		capabilities.UltraSSDEnabled = &ultraSSDEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromAdditionalCapabilitiesSpec populates our AdditionalCapabilities_Spec from the provided source AdditionalCapabilities_Spec
func (capabilities *AdditionalCapabilities_Spec) AssignPropertiesFromAdditionalCapabilitiesSpec(source *v1alpha1api20201201storage.AdditionalCapabilities_Spec) error {

	// UltraSSDEnabled
	if source.UltraSSDEnabled != nil {
		ultraSSDEnabled := *source.UltraSSDEnabled
		capabilities.UltraSSDEnabled = &ultraSSDEnabled
	} else {
		capabilities.UltraSSDEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdditionalCapabilitiesSpec populates the provided destination AdditionalCapabilities_Spec from our AdditionalCapabilities_Spec
func (capabilities *AdditionalCapabilities_Spec) AssignPropertiesToAdditionalCapabilitiesSpec(destination *v1alpha1api20201201storage.AdditionalCapabilities_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UltraSSDEnabled
	if capabilities.UltraSSDEnabled != nil {
		ultraSSDEnabled := *capabilities.UltraSSDEnabled
		destination.UltraSSDEnabled = &ultraSSDEnabled
	} else {
		destination.UltraSSDEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdditionalCapabilities_Status struct {
	//UltraSSDEnabled: The flag that enables or disables a capability to have one or
	//more managed data disks with UltraSSD_LRS storage account type on the VM or
	//VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a
	//virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `json:"ultraSSDEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &AdditionalCapabilities_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capabilities *AdditionalCapabilities_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdditionalCapabilities_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capabilities *AdditionalCapabilities_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdditionalCapabilities_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdditionalCapabilities_StatusARM, got %T", armInput)
	}

	// Set property ‘UltraSSDEnabled’:
	if typedInput.UltraSSDEnabled != nil {
		ultraSSDEnabled := *typedInput.UltraSSDEnabled
		capabilities.UltraSSDEnabled = &ultraSSDEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromAdditionalCapabilitiesStatus populates our AdditionalCapabilities_Status from the provided source AdditionalCapabilities_Status
func (capabilities *AdditionalCapabilities_Status) AssignPropertiesFromAdditionalCapabilitiesStatus(source *v1alpha1api20201201storage.AdditionalCapabilities_Status) error {

	// UltraSSDEnabled
	if source.UltraSSDEnabled != nil {
		ultraSSDEnabled := *source.UltraSSDEnabled
		capabilities.UltraSSDEnabled = &ultraSSDEnabled
	} else {
		capabilities.UltraSSDEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdditionalCapabilitiesStatus populates the provided destination AdditionalCapabilities_Status from our AdditionalCapabilities_Status
func (capabilities *AdditionalCapabilities_Status) AssignPropertiesToAdditionalCapabilitiesStatus(destination *v1alpha1api20201201storage.AdditionalCapabilities_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UltraSSDEnabled
	if capabilities.UltraSSDEnabled != nil {
		ultraSSDEnabled := *capabilities.UltraSSDEnabled
		destination.UltraSSDEnabled = &ultraSSDEnabled
	} else {
		destination.UltraSSDEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BillingProfile_Spec struct {
	//MaxPrice: Specifies the maximum price you are willing to pay for a Azure Spot
	//VM/VMSS. This price is in US Dollars.
	//This price will be compared with the current Azure Spot price for the VM size.
	//Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS
	//and the operation will only succeed if  the maxPrice is greater than the current
	//Azure Spot price.
	//The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current
	//Azure Spot price goes beyond the maxPrice after creation of VM/VMSS.
	//Possible values are:
	//- Any decimal value greater than zero. Example: 0.01538
	//-1 – indicates default price to be up-to on-demand.
	//You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should
	//not be evicted for price reasons. Also, the default max price is -1 if it is not
	//provided by you.
	//Minimum api-version: 2019-03-01.
	MaxPrice *float64 `json:"maxPrice,omitempty"`
}

var _ genruntime.ARMTransformer = &BillingProfile_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *BillingProfile_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	var result BillingProfile_SpecARM

	// Set property ‘MaxPrice’:
	if profile.MaxPrice != nil {
		maxPrice := *profile.MaxPrice
		result.MaxPrice = &maxPrice
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *BillingProfile_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BillingProfile_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *BillingProfile_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BillingProfile_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BillingProfile_SpecARM, got %T", armInput)
	}

	// Set property ‘MaxPrice’:
	if typedInput.MaxPrice != nil {
		maxPrice := *typedInput.MaxPrice
		profile.MaxPrice = &maxPrice
	}

	// No error
	return nil
}

// AssignPropertiesFromBillingProfileSpec populates our BillingProfile_Spec from the provided source BillingProfile_Spec
func (profile *BillingProfile_Spec) AssignPropertiesFromBillingProfileSpec(source *v1alpha1api20201201storage.BillingProfile_Spec) error {

	// MaxPrice
	if source.MaxPrice != nil {
		maxPrice := *source.MaxPrice
		profile.MaxPrice = &maxPrice
	} else {
		profile.MaxPrice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBillingProfileSpec populates the provided destination BillingProfile_Spec from our BillingProfile_Spec
func (profile *BillingProfile_Spec) AssignPropertiesToBillingProfileSpec(destination *v1alpha1api20201201storage.BillingProfile_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxPrice
	if profile.MaxPrice != nil {
		maxPrice := *profile.MaxPrice
		destination.MaxPrice = &maxPrice
	} else {
		destination.MaxPrice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BillingProfile_Status struct {
	//MaxPrice: Specifies the maximum price you are willing to pay for a Azure Spot
	//VM/VMSS. This price is in US Dollars.
	//This price will be compared with the current Azure Spot price for the VM size.
	//Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS
	//and the operation will only succeed if  the maxPrice is greater than the current
	//Azure Spot price.
	//The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current
	//Azure Spot price goes beyond the maxPrice after creation of VM/VMSS.
	//Possible values are:
	//- Any decimal value greater than zero. Example: 0.01538
	//-1 – indicates default price to be up-to on-demand.
	//You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should
	//not be evicted for price reasons. Also, the default max price is -1 if it is not
	//provided by you.
	//Minimum api-version: 2019-03-01.
	MaxPrice *float64 `json:"maxPrice,omitempty"`
}

var _ genruntime.FromARMConverter = &BillingProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *BillingProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BillingProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *BillingProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BillingProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BillingProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘MaxPrice’:
	if typedInput.MaxPrice != nil {
		maxPrice := *typedInput.MaxPrice
		profile.MaxPrice = &maxPrice
	}

	// No error
	return nil
}

// AssignPropertiesFromBillingProfileStatus populates our BillingProfile_Status from the provided source BillingProfile_Status
func (profile *BillingProfile_Status) AssignPropertiesFromBillingProfileStatus(source *v1alpha1api20201201storage.BillingProfile_Status) error {

	// MaxPrice
	if source.MaxPrice != nil {
		maxPrice := *source.MaxPrice
		profile.MaxPrice = &maxPrice
	} else {
		profile.MaxPrice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBillingProfileStatus populates the provided destination BillingProfile_Status from our BillingProfile_Status
func (profile *BillingProfile_Status) AssignPropertiesToBillingProfileStatus(destination *v1alpha1api20201201storage.BillingProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxPrice
	if profile.MaxPrice != nil {
		maxPrice := *profile.MaxPrice
		destination.MaxPrice = &maxPrice
	} else {
		destination.MaxPrice = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DiagnosticsProfile_Spec struct {
	//BootDiagnostics: Boot Diagnostics is a debugging feature which allows you to
	//view Console Output and Screenshot to diagnose VM status.
	//You can easily view the output of your console log.
	//Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnostics_Spec `json:"bootDiagnostics,omitempty"`
}

var _ genruntime.ARMTransformer = &DiagnosticsProfile_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *DiagnosticsProfile_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	var result DiagnosticsProfile_SpecARM

	// Set property ‘BootDiagnostics’:
	if profile.BootDiagnostics != nil {
		bootDiagnosticsARM, err := (*profile.BootDiagnostics).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		bootDiagnostics := bootDiagnosticsARM.(BootDiagnostics_SpecARM)
		result.BootDiagnostics = &bootDiagnostics
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *DiagnosticsProfile_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiagnosticsProfile_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *DiagnosticsProfile_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiagnosticsProfile_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiagnosticsProfile_SpecARM, got %T", armInput)
	}

	// Set property ‘BootDiagnostics’:
	if typedInput.BootDiagnostics != nil {
		var bootDiagnostics1 BootDiagnostics_Spec
		err := bootDiagnostics1.PopulateFromARM(owner, *typedInput.BootDiagnostics)
		if err != nil {
			return err
		}
		bootDiagnostics := bootDiagnostics1
		profile.BootDiagnostics = &bootDiagnostics
	}

	// No error
	return nil
}

// AssignPropertiesFromDiagnosticsProfileSpec populates our DiagnosticsProfile_Spec from the provided source DiagnosticsProfile_Spec
func (profile *DiagnosticsProfile_Spec) AssignPropertiesFromDiagnosticsProfileSpec(source *v1alpha1api20201201storage.DiagnosticsProfile_Spec) error {

	// BootDiagnostics
	if source.BootDiagnostics != nil {
		var bootDiagnostic BootDiagnostics_Spec
		err := bootDiagnostic.AssignPropertiesFromBootDiagnosticsSpec(source.BootDiagnostics)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBootDiagnosticsSpec() to populate field BootDiagnostics")
		}
		profile.BootDiagnostics = &bootDiagnostic
	} else {
		profile.BootDiagnostics = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiagnosticsProfileSpec populates the provided destination DiagnosticsProfile_Spec from our DiagnosticsProfile_Spec
func (profile *DiagnosticsProfile_Spec) AssignPropertiesToDiagnosticsProfileSpec(destination *v1alpha1api20201201storage.DiagnosticsProfile_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BootDiagnostics
	if profile.BootDiagnostics != nil {
		var bootDiagnostic v1alpha1api20201201storage.BootDiagnostics_Spec
		err := profile.BootDiagnostics.AssignPropertiesToBootDiagnosticsSpec(&bootDiagnostic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBootDiagnosticsSpec() to populate field BootDiagnostics")
		}
		destination.BootDiagnostics = &bootDiagnostic
	} else {
		destination.BootDiagnostics = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DiagnosticsProfile_Status struct {
	//BootDiagnostics: Boot Diagnostics is a debugging feature which allows you to
	//view Console Output and Screenshot to diagnose VM status.
	//You can easily view the output of your console log.
	//Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnostics_Status `json:"bootDiagnostics,omitempty"`
}

var _ genruntime.FromARMConverter = &DiagnosticsProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *DiagnosticsProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiagnosticsProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *DiagnosticsProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiagnosticsProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiagnosticsProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘BootDiagnostics’:
	if typedInput.BootDiagnostics != nil {
		var bootDiagnostics1 BootDiagnostics_Status
		err := bootDiagnostics1.PopulateFromARM(owner, *typedInput.BootDiagnostics)
		if err != nil {
			return err
		}
		bootDiagnostics := bootDiagnostics1
		profile.BootDiagnostics = &bootDiagnostics
	}

	// No error
	return nil
}

// AssignPropertiesFromDiagnosticsProfileStatus populates our DiagnosticsProfile_Status from the provided source DiagnosticsProfile_Status
func (profile *DiagnosticsProfile_Status) AssignPropertiesFromDiagnosticsProfileStatus(source *v1alpha1api20201201storage.DiagnosticsProfile_Status) error {

	// BootDiagnostics
	if source.BootDiagnostics != nil {
		var bootDiagnostic BootDiagnostics_Status
		err := bootDiagnostic.AssignPropertiesFromBootDiagnosticsStatus(source.BootDiagnostics)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBootDiagnosticsStatus() to populate field BootDiagnostics")
		}
		profile.BootDiagnostics = &bootDiagnostic
	} else {
		profile.BootDiagnostics = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiagnosticsProfileStatus populates the provided destination DiagnosticsProfile_Status from our DiagnosticsProfile_Status
func (profile *DiagnosticsProfile_Status) AssignPropertiesToDiagnosticsProfileStatus(destination *v1alpha1api20201201storage.DiagnosticsProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BootDiagnostics
	if profile.BootDiagnostics != nil {
		var bootDiagnostic v1alpha1api20201201storage.BootDiagnostics_Status
		err := profile.BootDiagnostics.AssignPropertiesToBootDiagnosticsStatus(&bootDiagnostic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBootDiagnosticsStatus() to populate field BootDiagnostics")
		}
		destination.BootDiagnostics = &bootDiagnostic
	} else {
		destination.BootDiagnostics = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Deallocate","Delete"}
type EvictionPolicy_Spec string

const (
	EvictionPolicy_SpecDeallocate = EvictionPolicy_Spec("Deallocate")
	EvictionPolicy_SpecDelete     = EvictionPolicy_Spec("Delete")
)

type EvictionPolicy_Status string

const (
	EvictionPolicy_StatusDeallocate = EvictionPolicy_Status("Deallocate")
	EvictionPolicy_StatusDelete     = EvictionPolicy_Status("Delete")
)

type ExtendedLocation_Spec struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	var result ExtendedLocation_SpecARM

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationSpec populates our ExtendedLocation_Spec from the provided source ExtendedLocation_Spec
func (location *ExtendedLocation_Spec) AssignPropertiesFromExtendedLocationSpec(source *v1alpha1api20201201storage.ExtendedLocation_Spec) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Spec(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationSpec populates the provided destination ExtendedLocation_Spec from our ExtendedLocation_Spec
func (location *ExtendedLocation_Spec) AssignPropertiesToExtendedLocationSpec(destination *v1alpha1api20201201storage.ExtendedLocation_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExtendedLocation_Status struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationStatus populates our ExtendedLocation_Status from the provided source ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesFromExtendedLocationStatus(source *v1alpha1api20201201storage.ExtendedLocation_Status) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Status(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationStatus populates the provided destination ExtendedLocation_Status from our ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesToExtendedLocationStatus(destination *v1alpha1api20201201storage.ExtendedLocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HardwareProfile_Spec struct {
	//VmSize: Specifies the size of the virtual machine.
	//The enum data type is currently deprecated and will be removed by December 23rd
	//2023.
	//Recommended way to get the list of available sizes is using these APIs:
	//[List all available virtual machine sizes in an availability
	//set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes)
	//[List all available virtual machine sizes in a region](
	//https://docs.microsoft.com/en-us/rest/api/compute/resourceskus/list)
	//[List all available virtual machine sizes for
	//resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes).
	//For more information about virtual machine sizes, see [Sizes for virtual
	//machines](https://docs.microsoft.com/en-us/azure/virtual-machines/sizes).
	//The available VM sizes depend on region and availability set.
	VmSize *HardwareProfileSpecVmSize `json:"vmSize,omitempty"`
}

var _ genruntime.ARMTransformer = &HardwareProfile_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *HardwareProfile_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	var result HardwareProfile_SpecARM

	// Set property ‘VmSize’:
	if profile.VmSize != nil {
		vmSize := *profile.VmSize
		result.VmSize = &vmSize
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *HardwareProfile_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HardwareProfile_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *HardwareProfile_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HardwareProfile_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HardwareProfile_SpecARM, got %T", armInput)
	}

	// Set property ‘VmSize’:
	if typedInput.VmSize != nil {
		vmSize := *typedInput.VmSize
		profile.VmSize = &vmSize
	}

	// No error
	return nil
}

// AssignPropertiesFromHardwareProfileSpec populates our HardwareProfile_Spec from the provided source HardwareProfile_Spec
func (profile *HardwareProfile_Spec) AssignPropertiesFromHardwareProfileSpec(source *v1alpha1api20201201storage.HardwareProfile_Spec) error {

	// VmSize
	if source.VmSize != nil {
		vmSize := HardwareProfileSpecVmSize(*source.VmSize)
		profile.VmSize = &vmSize
	} else {
		profile.VmSize = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHardwareProfileSpec populates the provided destination HardwareProfile_Spec from our HardwareProfile_Spec
func (profile *HardwareProfile_Spec) AssignPropertiesToHardwareProfileSpec(destination *v1alpha1api20201201storage.HardwareProfile_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// VmSize
	if profile.VmSize != nil {
		vmSize := string(*profile.VmSize)
		destination.VmSize = &vmSize
	} else {
		destination.VmSize = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HardwareProfile_Status struct {
	//VmSize: Specifies the size of the virtual machine.
	//The enum data type is currently deprecated and will be removed by December 23rd
	//2023.
	//Recommended way to get the list of available sizes is using these APIs:
	//[List all available virtual machine sizes in an availability
	//set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes)
	//[List all available virtual machine sizes in a region](
	//https://docs.microsoft.com/en-us/rest/api/compute/resourceskus/list)
	//[List all available virtual machine sizes for
	//resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes).
	//For more information about virtual machine sizes, see [Sizes for virtual
	//machines](https://docs.microsoft.com/en-us/azure/virtual-machines/sizes).
	//The available VM sizes depend on region and availability set.
	VmSize *HardwareProfileStatusVmSize `json:"vmSize,omitempty"`
}

var _ genruntime.FromARMConverter = &HardwareProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *HardwareProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HardwareProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *HardwareProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HardwareProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HardwareProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘VmSize’:
	if typedInput.VmSize != nil {
		vmSize := *typedInput.VmSize
		profile.VmSize = &vmSize
	}

	// No error
	return nil
}

// AssignPropertiesFromHardwareProfileStatus populates our HardwareProfile_Status from the provided source HardwareProfile_Status
func (profile *HardwareProfile_Status) AssignPropertiesFromHardwareProfileStatus(source *v1alpha1api20201201storage.HardwareProfile_Status) error {

	// VmSize
	if source.VmSize != nil {
		vmSize := HardwareProfileStatusVmSize(*source.VmSize)
		profile.VmSize = &vmSize
	} else {
		profile.VmSize = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHardwareProfileStatus populates the provided destination HardwareProfile_Status from our HardwareProfile_Status
func (profile *HardwareProfile_Status) AssignPropertiesToHardwareProfileStatus(destination *v1alpha1api20201201storage.HardwareProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// VmSize
	if profile.VmSize != nil {
		vmSize := string(*profile.VmSize)
		destination.VmSize = &vmSize
	} else {
		destination.VmSize = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkProfile_Spec struct {
	//NetworkInterfaces: Specifies the list of resource Ids for the network interfaces
	//associated with the virtual machine.
	NetworkInterfaces []NetworkInterfaceReference_Spec `json:"networkInterfaces,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkProfile_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *NetworkProfile_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	var result NetworkProfile_SpecARM

	// Set property ‘NetworkInterfaces’:
	for _, item := range profile.NetworkInterfaces {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.NetworkInterfaces = append(result.NetworkInterfaces, itemARM.(NetworkInterfaceReference_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *NetworkProfile_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkProfile_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *NetworkProfile_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkProfile_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkProfile_SpecARM, got %T", armInput)
	}

	// Set property ‘NetworkInterfaces’:
	for _, item := range typedInput.NetworkInterfaces {
		var item1 NetworkInterfaceReference_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.NetworkInterfaces = append(profile.NetworkInterfaces, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkProfileSpec populates our NetworkProfile_Spec from the provided source NetworkProfile_Spec
func (profile *NetworkProfile_Spec) AssignPropertiesFromNetworkProfileSpec(source *v1alpha1api20201201storage.NetworkProfile_Spec) error {

	// NetworkInterfaces
	if source.NetworkInterfaces != nil {
		networkInterfaceList := make([]NetworkInterfaceReference_Spec, len(source.NetworkInterfaces))
		for networkInterfaceIndex, networkInterfaceItem := range source.NetworkInterfaces {
			// Shadow the loop variable to avoid aliasing
			networkInterfaceItem := networkInterfaceItem
			var networkInterface NetworkInterfaceReference_Spec
			err := networkInterface.AssignPropertiesFromNetworkInterfaceReferenceSpec(&networkInterfaceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromNetworkInterfaceReferenceSpec() to populate field NetworkInterfaces")
			}
			networkInterfaceList[networkInterfaceIndex] = networkInterface
		}
		profile.NetworkInterfaces = networkInterfaceList
	} else {
		profile.NetworkInterfaces = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkProfileSpec populates the provided destination NetworkProfile_Spec from our NetworkProfile_Spec
func (profile *NetworkProfile_Spec) AssignPropertiesToNetworkProfileSpec(destination *v1alpha1api20201201storage.NetworkProfile_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// NetworkInterfaces
	if profile.NetworkInterfaces != nil {
		networkInterfaceList := make([]v1alpha1api20201201storage.NetworkInterfaceReference_Spec, len(profile.NetworkInterfaces))
		for networkInterfaceIndex, networkInterfaceItem := range profile.NetworkInterfaces {
			// Shadow the loop variable to avoid aliasing
			networkInterfaceItem := networkInterfaceItem
			var networkInterface v1alpha1api20201201storage.NetworkInterfaceReference_Spec
			err := networkInterfaceItem.AssignPropertiesToNetworkInterfaceReferenceSpec(&networkInterface)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToNetworkInterfaceReferenceSpec() to populate field NetworkInterfaces")
			}
			networkInterfaceList[networkInterfaceIndex] = networkInterface
		}
		destination.NetworkInterfaces = networkInterfaceList
	} else {
		destination.NetworkInterfaces = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkProfile_Status struct {
	//NetworkInterfaces: Specifies the list of resource Ids for the network interfaces
	//associated with the virtual machine.
	NetworkInterfaces []NetworkInterfaceReference_Status `json:"networkInterfaces,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *NetworkProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *NetworkProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘NetworkInterfaces’:
	for _, item := range typedInput.NetworkInterfaces {
		var item1 NetworkInterfaceReference_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.NetworkInterfaces = append(profile.NetworkInterfaces, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkProfileStatus populates our NetworkProfile_Status from the provided source NetworkProfile_Status
func (profile *NetworkProfile_Status) AssignPropertiesFromNetworkProfileStatus(source *v1alpha1api20201201storage.NetworkProfile_Status) error {

	// NetworkInterfaces
	if source.NetworkInterfaces != nil {
		networkInterfaceList := make([]NetworkInterfaceReference_Status, len(source.NetworkInterfaces))
		for networkInterfaceIndex, networkInterfaceItem := range source.NetworkInterfaces {
			// Shadow the loop variable to avoid aliasing
			networkInterfaceItem := networkInterfaceItem
			var networkInterface NetworkInterfaceReference_Status
			err := networkInterface.AssignPropertiesFromNetworkInterfaceReferenceStatus(&networkInterfaceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromNetworkInterfaceReferenceStatus() to populate field NetworkInterfaces")
			}
			networkInterfaceList[networkInterfaceIndex] = networkInterface
		}
		profile.NetworkInterfaces = networkInterfaceList
	} else {
		profile.NetworkInterfaces = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkProfileStatus populates the provided destination NetworkProfile_Status from our NetworkProfile_Status
func (profile *NetworkProfile_Status) AssignPropertiesToNetworkProfileStatus(destination *v1alpha1api20201201storage.NetworkProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// NetworkInterfaces
	if profile.NetworkInterfaces != nil {
		networkInterfaceList := make([]v1alpha1api20201201storage.NetworkInterfaceReference_Status, len(profile.NetworkInterfaces))
		for networkInterfaceIndex, networkInterfaceItem := range profile.NetworkInterfaces {
			// Shadow the loop variable to avoid aliasing
			networkInterfaceItem := networkInterfaceItem
			var networkInterface v1alpha1api20201201storage.NetworkInterfaceReference_Status
			err := networkInterfaceItem.AssignPropertiesToNetworkInterfaceReferenceStatus(&networkInterface)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToNetworkInterfaceReferenceStatus() to populate field NetworkInterfaces")
			}
			networkInterfaceList[networkInterfaceIndex] = networkInterface
		}
		destination.NetworkInterfaces = networkInterfaceList
	} else {
		destination.NetworkInterfaces = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type OSProfile_Spec struct {
	//AdminPassword: Specifies the password of the administrator account.
	//Minimum-length (Windows): 8 characters
	//Minimum-length (Linux): 6 characters
	//Max-length (Windows): 123 characters
	//Max-length (Linux): 72 characters
	//Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	//Has lower characters
	//Has upper characters
	//Has a digit
	//Has a special character (Regex match [\W_])
	//Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word",
	//"pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	//For resetting the password, see [How to reset the Remote Desktop service or its
	//login password in a Windows
	//VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	//For resetting root password, see [Manage users, SSH, and check or repair disks
	//on Azure Linux VMs using the VMAccess
	//Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword *string `json:"adminPassword,omitempty"`

	//AdminUsername: Specifies the name of the administrator account.
	//This property cannot be updated after the VM is created.
	//Windows-only restriction: Cannot end in "."
	//Disallowed values: "administrator", "admin", "user", "user1", "test", "user2",
	//"test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2",
	//"aspnet", "backup", "console", "david", "guest", "john", "owner", "root",
	//"server", "sql", "support", "support_388945a0", "sys", "test2", "test3",
	//"user4", "user5".
	//Minimum-length (Linux): 1  character
	//Max-length (Linux): 64 characters
	//Max-length (Windows): 20 characters
	//<li> For root access to the Linux VM, see [Using root privileges on Linux
	//virtual machines in
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	//<li> For a list of built-in system users on Linux that should not be used in
	//this field, see [Selecting User Names for Linux on
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername *string `json:"adminUsername,omitempty"`

	//AllowExtensionOperations: Specifies whether extension operations should be
	//allowed on the virtual machine.
	//This may only be set to False when no extensions are present on the virtual
	//machine.
	AllowExtensionOperations *bool `json:"allowExtensionOperations,omitempty"`

	//ComputerName: Specifies the host OS name of the virtual machine.
	//This name cannot be updated after the VM is created.
	//Max-length (Windows): 15 characters
	//Max-length (Linux): 64 characters.
	//For naming conventions and restrictions see [Azure infrastructure services
	//implementation
	//guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
	ComputerName *string `json:"computerName,omitempty"`

	//CustomData: Specifies a base-64 encoded string of custom data. The base-64
	//encoded string is decoded to a binary array that is saved as a file on the
	//Virtual Machine. The maximum length of the binary array is 65535 bytes.
	//Note: Do not pass any secrets or passwords in customData property
	//This property cannot be updated after the VM is created.
	//customData is passed to the VM to be saved as a file, for more information see
	//[Custom Data on Azure
	//VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/)
	//For using cloud-init for your Linux VM, see [Using cloud-init to customize a
	//Linux VM during
	//creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData *string `json:"customData,omitempty"`

	//LinuxConfiguration: Specifies the Linux operating system settings on the virtual
	//machine.
	//For a list of supported Linux distributions, see [Linux on Azure-Endorsed
	//Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	//For running non-endorsed distributions, see [Information for Non-Endorsed
	//Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration *LinuxConfiguration_Spec `json:"linuxConfiguration,omitempty"`

	//RequireGuestProvisionSignal: Specifies whether the guest provision signal is
	//required to infer provision success of the virtual machine.  Note: This property
	//is for private testing only, and all customers must not set the property to
	//false.
	RequireGuestProvisionSignal *bool `json:"requireGuestProvisionSignal,omitempty"`

	//Secrets: Specifies set of certificates that should be installed onto the virtual
	//machine.
	Secrets []VaultSecretGroup_Spec `json:"secrets,omitempty"`

	//WindowsConfiguration: Specifies Windows operating system settings on the virtual
	//machine.
	WindowsConfiguration *WindowsConfiguration_Spec `json:"windowsConfiguration,omitempty"`
}

var _ genruntime.ARMTransformer = &OSProfile_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *OSProfile_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	var result OSProfile_SpecARM

	// Set property ‘AdminPassword’:
	if profile.AdminPassword != nil {
		adminPassword := *profile.AdminPassword
		result.AdminPassword = &adminPassword
	}

	// Set property ‘AdminUsername’:
	if profile.AdminUsername != nil {
		adminUsername := *profile.AdminUsername
		result.AdminUsername = &adminUsername
	}

	// Set property ‘AllowExtensionOperations’:
	if profile.AllowExtensionOperations != nil {
		allowExtensionOperations := *profile.AllowExtensionOperations
		result.AllowExtensionOperations = &allowExtensionOperations
	}

	// Set property ‘ComputerName’:
	if profile.ComputerName != nil {
		computerName := *profile.ComputerName
		result.ComputerName = &computerName
	}

	// Set property ‘CustomData’:
	if profile.CustomData != nil {
		customData := *profile.CustomData
		result.CustomData = &customData
	}

	// Set property ‘LinuxConfiguration’:
	if profile.LinuxConfiguration != nil {
		linuxConfigurationARM, err := (*profile.LinuxConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		linuxConfiguration := linuxConfigurationARM.(LinuxConfiguration_SpecARM)
		result.LinuxConfiguration = &linuxConfiguration
	}

	// Set property ‘RequireGuestProvisionSignal’:
	if profile.RequireGuestProvisionSignal != nil {
		requireGuestProvisionSignal := *profile.RequireGuestProvisionSignal
		result.RequireGuestProvisionSignal = &requireGuestProvisionSignal
	}

	// Set property ‘Secrets’:
	for _, item := range profile.Secrets {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Secrets = append(result.Secrets, itemARM.(VaultSecretGroup_SpecARM))
	}

	// Set property ‘WindowsConfiguration’:
	if profile.WindowsConfiguration != nil {
		windowsConfigurationARM, err := (*profile.WindowsConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		windowsConfiguration := windowsConfigurationARM.(WindowsConfiguration_SpecARM)
		result.WindowsConfiguration = &windowsConfiguration
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *OSProfile_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OSProfile_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *OSProfile_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OSProfile_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OSProfile_SpecARM, got %T", armInput)
	}

	// Set property ‘AdminPassword’:
	if typedInput.AdminPassword != nil {
		adminPassword := *typedInput.AdminPassword
		profile.AdminPassword = &adminPassword
	}

	// Set property ‘AdminUsername’:
	if typedInput.AdminUsername != nil {
		adminUsername := *typedInput.AdminUsername
		profile.AdminUsername = &adminUsername
	}

	// Set property ‘AllowExtensionOperations’:
	if typedInput.AllowExtensionOperations != nil {
		allowExtensionOperations := *typedInput.AllowExtensionOperations
		profile.AllowExtensionOperations = &allowExtensionOperations
	}

	// Set property ‘ComputerName’:
	if typedInput.ComputerName != nil {
		computerName := *typedInput.ComputerName
		profile.ComputerName = &computerName
	}

	// Set property ‘CustomData’:
	if typedInput.CustomData != nil {
		customData := *typedInput.CustomData
		profile.CustomData = &customData
	}

	// Set property ‘LinuxConfiguration’:
	if typedInput.LinuxConfiguration != nil {
		var linuxConfiguration1 LinuxConfiguration_Spec
		err := linuxConfiguration1.PopulateFromARM(owner, *typedInput.LinuxConfiguration)
		if err != nil {
			return err
		}
		linuxConfiguration := linuxConfiguration1
		profile.LinuxConfiguration = &linuxConfiguration
	}

	// Set property ‘RequireGuestProvisionSignal’:
	if typedInput.RequireGuestProvisionSignal != nil {
		requireGuestProvisionSignal := *typedInput.RequireGuestProvisionSignal
		profile.RequireGuestProvisionSignal = &requireGuestProvisionSignal
	}

	// Set property ‘Secrets’:
	for _, item := range typedInput.Secrets {
		var item1 VaultSecretGroup_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.Secrets = append(profile.Secrets, item1)
	}

	// Set property ‘WindowsConfiguration’:
	if typedInput.WindowsConfiguration != nil {
		var windowsConfiguration1 WindowsConfiguration_Spec
		err := windowsConfiguration1.PopulateFromARM(owner, *typedInput.WindowsConfiguration)
		if err != nil {
			return err
		}
		windowsConfiguration := windowsConfiguration1
		profile.WindowsConfiguration = &windowsConfiguration
	}

	// No error
	return nil
}

// AssignPropertiesFromOSProfileSpec populates our OSProfile_Spec from the provided source OSProfile_Spec
func (profile *OSProfile_Spec) AssignPropertiesFromOSProfileSpec(source *v1alpha1api20201201storage.OSProfile_Spec) error {

	// AdminPassword
	profile.AdminPassword = genruntime.ClonePointerToString(source.AdminPassword)

	// AdminUsername
	profile.AdminUsername = genruntime.ClonePointerToString(source.AdminUsername)

	// AllowExtensionOperations
	if source.AllowExtensionOperations != nil {
		allowExtensionOperation := *source.AllowExtensionOperations
		profile.AllowExtensionOperations = &allowExtensionOperation
	} else {
		profile.AllowExtensionOperations = nil
	}

	// ComputerName
	profile.ComputerName = genruntime.ClonePointerToString(source.ComputerName)

	// CustomData
	profile.CustomData = genruntime.ClonePointerToString(source.CustomData)

	// LinuxConfiguration
	if source.LinuxConfiguration != nil {
		var linuxConfiguration LinuxConfiguration_Spec
		err := linuxConfiguration.AssignPropertiesFromLinuxConfigurationSpec(source.LinuxConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLinuxConfigurationSpec() to populate field LinuxConfiguration")
		}
		profile.LinuxConfiguration = &linuxConfiguration
	} else {
		profile.LinuxConfiguration = nil
	}

	// RequireGuestProvisionSignal
	if source.RequireGuestProvisionSignal != nil {
		requireGuestProvisionSignal := *source.RequireGuestProvisionSignal
		profile.RequireGuestProvisionSignal = &requireGuestProvisionSignal
	} else {
		profile.RequireGuestProvisionSignal = nil
	}

	// Secrets
	if source.Secrets != nil {
		secretList := make([]VaultSecretGroup_Spec, len(source.Secrets))
		for secretIndex, secretItem := range source.Secrets {
			// Shadow the loop variable to avoid aliasing
			secretItem := secretItem
			var secret VaultSecretGroup_Spec
			err := secret.AssignPropertiesFromVaultSecretGroupSpec(&secretItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVaultSecretGroupSpec() to populate field Secrets")
			}
			secretList[secretIndex] = secret
		}
		profile.Secrets = secretList
	} else {
		profile.Secrets = nil
	}

	// WindowsConfiguration
	if source.WindowsConfiguration != nil {
		var windowsConfiguration WindowsConfiguration_Spec
		err := windowsConfiguration.AssignPropertiesFromWindowsConfigurationSpec(source.WindowsConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWindowsConfigurationSpec() to populate field WindowsConfiguration")
		}
		profile.WindowsConfiguration = &windowsConfiguration
	} else {
		profile.WindowsConfiguration = nil
	}

	// No error
	return nil
}

// AssignPropertiesToOSProfileSpec populates the provided destination OSProfile_Spec from our OSProfile_Spec
func (profile *OSProfile_Spec) AssignPropertiesToOSProfileSpec(destination *v1alpha1api20201201storage.OSProfile_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdminPassword
	destination.AdminPassword = genruntime.ClonePointerToString(profile.AdminPassword)

	// AdminUsername
	destination.AdminUsername = genruntime.ClonePointerToString(profile.AdminUsername)

	// AllowExtensionOperations
	if profile.AllowExtensionOperations != nil {
		allowExtensionOperation := *profile.AllowExtensionOperations
		destination.AllowExtensionOperations = &allowExtensionOperation
	} else {
		destination.AllowExtensionOperations = nil
	}

	// ComputerName
	destination.ComputerName = genruntime.ClonePointerToString(profile.ComputerName)

	// CustomData
	destination.CustomData = genruntime.ClonePointerToString(profile.CustomData)

	// LinuxConfiguration
	if profile.LinuxConfiguration != nil {
		var linuxConfiguration v1alpha1api20201201storage.LinuxConfiguration_Spec
		err := profile.LinuxConfiguration.AssignPropertiesToLinuxConfigurationSpec(&linuxConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLinuxConfigurationSpec() to populate field LinuxConfiguration")
		}
		destination.LinuxConfiguration = &linuxConfiguration
	} else {
		destination.LinuxConfiguration = nil
	}

	// RequireGuestProvisionSignal
	if profile.RequireGuestProvisionSignal != nil {
		requireGuestProvisionSignal := *profile.RequireGuestProvisionSignal
		destination.RequireGuestProvisionSignal = &requireGuestProvisionSignal
	} else {
		destination.RequireGuestProvisionSignal = nil
	}

	// Secrets
	if profile.Secrets != nil {
		secretList := make([]v1alpha1api20201201storage.VaultSecretGroup_Spec, len(profile.Secrets))
		for secretIndex, secretItem := range profile.Secrets {
			// Shadow the loop variable to avoid aliasing
			secretItem := secretItem
			var secret v1alpha1api20201201storage.VaultSecretGroup_Spec
			err := secretItem.AssignPropertiesToVaultSecretGroupSpec(&secret)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVaultSecretGroupSpec() to populate field Secrets")
			}
			secretList[secretIndex] = secret
		}
		destination.Secrets = secretList
	} else {
		destination.Secrets = nil
	}

	// WindowsConfiguration
	if profile.WindowsConfiguration != nil {
		var windowsConfiguration v1alpha1api20201201storage.WindowsConfiguration_Spec
		err := profile.WindowsConfiguration.AssignPropertiesToWindowsConfigurationSpec(&windowsConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWindowsConfigurationSpec() to populate field WindowsConfiguration")
		}
		destination.WindowsConfiguration = &windowsConfiguration
	} else {
		destination.WindowsConfiguration = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type OSProfile_Status struct {
	//AdminPassword: Specifies the password of the administrator account.
	//Minimum-length (Windows): 8 characters
	//Minimum-length (Linux): 6 characters
	//Max-length (Windows): 123 characters
	//Max-length (Linux): 72 characters
	//Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	//Has lower characters
	//Has upper characters
	//Has a digit
	//Has a special character (Regex match [\W_])
	//Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word",
	//"pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	//For resetting the password, see [How to reset the Remote Desktop service or its
	//login password in a Windows
	//VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	//For resetting root password, see [Manage users, SSH, and check or repair disks
	//on Azure Linux VMs using the VMAccess
	//Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword *string `json:"adminPassword,omitempty"`

	//AdminUsername: Specifies the name of the administrator account.
	//This property cannot be updated after the VM is created.
	//Windows-only restriction: Cannot end in "."
	//Disallowed values: "administrator", "admin", "user", "user1", "test", "user2",
	//"test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2",
	//"aspnet", "backup", "console", "david", "guest", "john", "owner", "root",
	//"server", "sql", "support", "support_388945a0", "sys", "test2", "test3",
	//"user4", "user5".
	//Minimum-length (Linux): 1  character
	//Max-length (Linux): 64 characters
	//Max-length (Windows): 20 characters
	//<li> For root access to the Linux VM, see [Using root privileges on Linux
	//virtual machines in
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	//<li> For a list of built-in system users on Linux that should not be used in
	//this field, see [Selecting User Names for Linux on
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername *string `json:"adminUsername,omitempty"`

	//AllowExtensionOperations: Specifies whether extension operations should be
	//allowed on the virtual machine.
	//This may only be set to False when no extensions are present on the virtual
	//machine.
	AllowExtensionOperations *bool `json:"allowExtensionOperations,omitempty"`

	//ComputerName: Specifies the host OS name of the virtual machine.
	//This name cannot be updated after the VM is created.
	//Max-length (Windows): 15 characters
	//Max-length (Linux): 64 characters.
	//For naming conventions and restrictions see [Azure infrastructure services
	//implementation
	//guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
	ComputerName *string `json:"computerName,omitempty"`

	//CustomData: Specifies a base-64 encoded string of custom data. The base-64
	//encoded string is decoded to a binary array that is saved as a file on the
	//Virtual Machine. The maximum length of the binary array is 65535 bytes.
	//Note: Do not pass any secrets or passwords in customData property
	//This property cannot be updated after the VM is created.
	//customData is passed to the VM to be saved as a file, for more information see
	//[Custom Data on Azure
	//VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/)
	//For using cloud-init for your Linux VM, see [Using cloud-init to customize a
	//Linux VM during
	//creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData *string `json:"customData,omitempty"`

	//LinuxConfiguration: Specifies the Linux operating system settings on the virtual
	//machine.
	//For a list of supported Linux distributions, see [Linux on Azure-Endorsed
	//Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	//For running non-endorsed distributions, see [Information for Non-Endorsed
	//Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration *LinuxConfiguration_Status `json:"linuxConfiguration,omitempty"`

	//RequireGuestProvisionSignal: Specifies whether the guest provision signal is
	//required to infer provision success of the virtual machine.  Note: This property
	//is for private testing only, and all customers must not set the property to
	//false.
	RequireGuestProvisionSignal *bool `json:"requireGuestProvisionSignal,omitempty"`

	//Secrets: Specifies set of certificates that should be installed onto the virtual
	//machine.
	Secrets []VaultSecretGroup_Status `json:"secrets,omitempty"`

	//WindowsConfiguration: Specifies Windows operating system settings on the virtual
	//machine.
	WindowsConfiguration *WindowsConfiguration_Status `json:"windowsConfiguration,omitempty"`
}

var _ genruntime.FromARMConverter = &OSProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *OSProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OSProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *OSProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OSProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OSProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘AdminPassword’:
	if typedInput.AdminPassword != nil {
		adminPassword := *typedInput.AdminPassword
		profile.AdminPassword = &adminPassword
	}

	// Set property ‘AdminUsername’:
	if typedInput.AdminUsername != nil {
		adminUsername := *typedInput.AdminUsername
		profile.AdminUsername = &adminUsername
	}

	// Set property ‘AllowExtensionOperations’:
	if typedInput.AllowExtensionOperations != nil {
		allowExtensionOperations := *typedInput.AllowExtensionOperations
		profile.AllowExtensionOperations = &allowExtensionOperations
	}

	// Set property ‘ComputerName’:
	if typedInput.ComputerName != nil {
		computerName := *typedInput.ComputerName
		profile.ComputerName = &computerName
	}

	// Set property ‘CustomData’:
	if typedInput.CustomData != nil {
		customData := *typedInput.CustomData
		profile.CustomData = &customData
	}

	// Set property ‘LinuxConfiguration’:
	if typedInput.LinuxConfiguration != nil {
		var linuxConfiguration1 LinuxConfiguration_Status
		err := linuxConfiguration1.PopulateFromARM(owner, *typedInput.LinuxConfiguration)
		if err != nil {
			return err
		}
		linuxConfiguration := linuxConfiguration1
		profile.LinuxConfiguration = &linuxConfiguration
	}

	// Set property ‘RequireGuestProvisionSignal’:
	if typedInput.RequireGuestProvisionSignal != nil {
		requireGuestProvisionSignal := *typedInput.RequireGuestProvisionSignal
		profile.RequireGuestProvisionSignal = &requireGuestProvisionSignal
	}

	// Set property ‘Secrets’:
	for _, item := range typedInput.Secrets {
		var item1 VaultSecretGroup_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.Secrets = append(profile.Secrets, item1)
	}

	// Set property ‘WindowsConfiguration’:
	if typedInput.WindowsConfiguration != nil {
		var windowsConfiguration1 WindowsConfiguration_Status
		err := windowsConfiguration1.PopulateFromARM(owner, *typedInput.WindowsConfiguration)
		if err != nil {
			return err
		}
		windowsConfiguration := windowsConfiguration1
		profile.WindowsConfiguration = &windowsConfiguration
	}

	// No error
	return nil
}

// AssignPropertiesFromOSProfileStatus populates our OSProfile_Status from the provided source OSProfile_Status
func (profile *OSProfile_Status) AssignPropertiesFromOSProfileStatus(source *v1alpha1api20201201storage.OSProfile_Status) error {

	// AdminPassword
	profile.AdminPassword = genruntime.ClonePointerToString(source.AdminPassword)

	// AdminUsername
	profile.AdminUsername = genruntime.ClonePointerToString(source.AdminUsername)

	// AllowExtensionOperations
	if source.AllowExtensionOperations != nil {
		allowExtensionOperation := *source.AllowExtensionOperations
		profile.AllowExtensionOperations = &allowExtensionOperation
	} else {
		profile.AllowExtensionOperations = nil
	}

	// ComputerName
	profile.ComputerName = genruntime.ClonePointerToString(source.ComputerName)

	// CustomData
	profile.CustomData = genruntime.ClonePointerToString(source.CustomData)

	// LinuxConfiguration
	if source.LinuxConfiguration != nil {
		var linuxConfiguration LinuxConfiguration_Status
		err := linuxConfiguration.AssignPropertiesFromLinuxConfigurationStatus(source.LinuxConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLinuxConfigurationStatus() to populate field LinuxConfiguration")
		}
		profile.LinuxConfiguration = &linuxConfiguration
	} else {
		profile.LinuxConfiguration = nil
	}

	// RequireGuestProvisionSignal
	if source.RequireGuestProvisionSignal != nil {
		requireGuestProvisionSignal := *source.RequireGuestProvisionSignal
		profile.RequireGuestProvisionSignal = &requireGuestProvisionSignal
	} else {
		profile.RequireGuestProvisionSignal = nil
	}

	// Secrets
	if source.Secrets != nil {
		secretList := make([]VaultSecretGroup_Status, len(source.Secrets))
		for secretIndex, secretItem := range source.Secrets {
			// Shadow the loop variable to avoid aliasing
			secretItem := secretItem
			var secret VaultSecretGroup_Status
			err := secret.AssignPropertiesFromVaultSecretGroupStatus(&secretItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVaultSecretGroupStatus() to populate field Secrets")
			}
			secretList[secretIndex] = secret
		}
		profile.Secrets = secretList
	} else {
		profile.Secrets = nil
	}

	// WindowsConfiguration
	if source.WindowsConfiguration != nil {
		var windowsConfiguration WindowsConfiguration_Status
		err := windowsConfiguration.AssignPropertiesFromWindowsConfigurationStatus(source.WindowsConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWindowsConfigurationStatus() to populate field WindowsConfiguration")
		}
		profile.WindowsConfiguration = &windowsConfiguration
	} else {
		profile.WindowsConfiguration = nil
	}

	// No error
	return nil
}

// AssignPropertiesToOSProfileStatus populates the provided destination OSProfile_Status from our OSProfile_Status
func (profile *OSProfile_Status) AssignPropertiesToOSProfileStatus(destination *v1alpha1api20201201storage.OSProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdminPassword
	destination.AdminPassword = genruntime.ClonePointerToString(profile.AdminPassword)

	// AdminUsername
	destination.AdminUsername = genruntime.ClonePointerToString(profile.AdminUsername)

	// AllowExtensionOperations
	if profile.AllowExtensionOperations != nil {
		allowExtensionOperation := *profile.AllowExtensionOperations
		destination.AllowExtensionOperations = &allowExtensionOperation
	} else {
		destination.AllowExtensionOperations = nil
	}

	// ComputerName
	destination.ComputerName = genruntime.ClonePointerToString(profile.ComputerName)

	// CustomData
	destination.CustomData = genruntime.ClonePointerToString(profile.CustomData)

	// LinuxConfiguration
	if profile.LinuxConfiguration != nil {
		var linuxConfiguration v1alpha1api20201201storage.LinuxConfiguration_Status
		err := profile.LinuxConfiguration.AssignPropertiesToLinuxConfigurationStatus(&linuxConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLinuxConfigurationStatus() to populate field LinuxConfiguration")
		}
		destination.LinuxConfiguration = &linuxConfiguration
	} else {
		destination.LinuxConfiguration = nil
	}

	// RequireGuestProvisionSignal
	if profile.RequireGuestProvisionSignal != nil {
		requireGuestProvisionSignal := *profile.RequireGuestProvisionSignal
		destination.RequireGuestProvisionSignal = &requireGuestProvisionSignal
	} else {
		destination.RequireGuestProvisionSignal = nil
	}

	// Secrets
	if profile.Secrets != nil {
		secretList := make([]v1alpha1api20201201storage.VaultSecretGroup_Status, len(profile.Secrets))
		for secretIndex, secretItem := range profile.Secrets {
			// Shadow the loop variable to avoid aliasing
			secretItem := secretItem
			var secret v1alpha1api20201201storage.VaultSecretGroup_Status
			err := secretItem.AssignPropertiesToVaultSecretGroupStatus(&secret)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVaultSecretGroupStatus() to populate field Secrets")
			}
			secretList[secretIndex] = secret
		}
		destination.Secrets = secretList
	} else {
		destination.Secrets = nil
	}

	// WindowsConfiguration
	if profile.WindowsConfiguration != nil {
		var windowsConfiguration v1alpha1api20201201storage.WindowsConfiguration_Status
		err := profile.WindowsConfiguration.AssignPropertiesToWindowsConfigurationStatus(&windowsConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWindowsConfigurationStatus() to populate field WindowsConfiguration")
		}
		destination.WindowsConfiguration = &windowsConfiguration
	} else {
		destination.WindowsConfiguration = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Plan_Spec struct {
	//Name: The plan ID.
	Name *string `json:"name,omitempty"`

	//Product: Specifies the product of the image from the marketplace. This is the
	//same value as Offer under the imageReference element.
	Product *string `json:"product,omitempty"`

	//PromotionCode: The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	//Publisher: The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

var _ genruntime.ARMTransformer = &Plan_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (plan *Plan_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if plan == nil {
		return nil, nil
	}
	var result Plan_SpecARM

	// Set property ‘Name’:
	if plan.Name != nil {
		name := *plan.Name
		result.Name = &name
	}

	// Set property ‘Product’:
	if plan.Product != nil {
		product := *plan.Product
		result.Product = &product
	}

	// Set property ‘PromotionCode’:
	if plan.PromotionCode != nil {
		promotionCode := *plan.PromotionCode
		result.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	if plan.Publisher != nil {
		publisher := *plan.Publisher
		result.Publisher = &publisher
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (plan *Plan_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Plan_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (plan *Plan_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Plan_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Plan_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		plan.Name = &name
	}

	// Set property ‘Product’:
	if typedInput.Product != nil {
		product := *typedInput.Product
		plan.Product = &product
	}

	// Set property ‘PromotionCode’:
	if typedInput.PromotionCode != nil {
		promotionCode := *typedInput.PromotionCode
		plan.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	if typedInput.Publisher != nil {
		publisher := *typedInput.Publisher
		plan.Publisher = &publisher
	}

	// No error
	return nil
}

// AssignPropertiesFromPlanSpec populates our Plan_Spec from the provided source Plan_Spec
func (plan *Plan_Spec) AssignPropertiesFromPlanSpec(source *v1alpha1api20201201storage.Plan_Spec) error {

	// Name
	plan.Name = genruntime.ClonePointerToString(source.Name)

	// Product
	plan.Product = genruntime.ClonePointerToString(source.Product)

	// PromotionCode
	plan.PromotionCode = genruntime.ClonePointerToString(source.PromotionCode)

	// Publisher
	plan.Publisher = genruntime.ClonePointerToString(source.Publisher)

	// No error
	return nil
}

// AssignPropertiesToPlanSpec populates the provided destination Plan_Spec from our Plan_Spec
func (plan *Plan_Spec) AssignPropertiesToPlanSpec(destination *v1alpha1api20201201storage.Plan_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(plan.Name)

	// Product
	destination.Product = genruntime.ClonePointerToString(plan.Product)

	// PromotionCode
	destination.PromotionCode = genruntime.ClonePointerToString(plan.PromotionCode)

	// Publisher
	destination.Publisher = genruntime.ClonePointerToString(plan.Publisher)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Plan_Status struct {
	//Name: The plan ID.
	Name *string `json:"name,omitempty"`

	//Product: Specifies the product of the image from the marketplace. This is the
	//same value as Offer under the imageReference element.
	Product *string `json:"product,omitempty"`

	//PromotionCode: The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	//Publisher: The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

var _ genruntime.FromARMConverter = &Plan_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (plan *Plan_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Plan_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (plan *Plan_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Plan_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Plan_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		plan.Name = &name
	}

	// Set property ‘Product’:
	if typedInput.Product != nil {
		product := *typedInput.Product
		plan.Product = &product
	}

	// Set property ‘PromotionCode’:
	if typedInput.PromotionCode != nil {
		promotionCode := *typedInput.PromotionCode
		plan.PromotionCode = &promotionCode
	}

	// Set property ‘Publisher’:
	if typedInput.Publisher != nil {
		publisher := *typedInput.Publisher
		plan.Publisher = &publisher
	}

	// No error
	return nil
}

// AssignPropertiesFromPlanStatus populates our Plan_Status from the provided source Plan_Status
func (plan *Plan_Status) AssignPropertiesFromPlanStatus(source *v1alpha1api20201201storage.Plan_Status) error {

	// Name
	plan.Name = genruntime.ClonePointerToString(source.Name)

	// Product
	plan.Product = genruntime.ClonePointerToString(source.Product)

	// PromotionCode
	plan.PromotionCode = genruntime.ClonePointerToString(source.PromotionCode)

	// Publisher
	plan.Publisher = genruntime.ClonePointerToString(source.Publisher)

	// No error
	return nil
}

// AssignPropertiesToPlanStatus populates the provided destination Plan_Status from our Plan_Status
func (plan *Plan_Status) AssignPropertiesToPlanStatus(destination *v1alpha1api20201201storage.Plan_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(plan.Name)

	// Product
	destination.Product = genruntime.ClonePointerToString(plan.Product)

	// PromotionCode
	destination.PromotionCode = genruntime.ClonePointerToString(plan.PromotionCode)

	// Publisher
	destination.Publisher = genruntime.ClonePointerToString(plan.Publisher)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Low","Regular","Spot"}
type Priority_Spec string

const (
	Priority_SpecLow     = Priority_Spec("Low")
	Priority_SpecRegular = Priority_Spec("Regular")
	Priority_SpecSpot    = Priority_Spec("Spot")
)

type Priority_Status string

const (
	Priority_StatusLow     = Priority_Status("Low")
	Priority_StatusRegular = Priority_Status("Regular")
	Priority_StatusSpot    = Priority_Status("Spot")
)

type SecurityProfile_Spec struct {
	//EncryptionAtHost: This property can be used by user in the request to enable or
	//disable the Host Encryption for the virtual machine or virtual machine scale
	//set. This will enable the encryption for all the disks including Resource/Temp
	//disk at host itself.
	//Default: The Encryption at host will be disabled unless this property is set to
	//true for the resource.
	EncryptionAtHost *bool `json:"encryptionAtHost,omitempty"`

	//SecurityType: Specifies the SecurityType of the virtual machine. It is set as
	//TrustedLaunch to enable UefiSettings.
	//Default: UefiSettings will not be enabled unless this property is set as
	//TrustedLaunch.
	SecurityType *SecurityProfileSpecSecurityType `json:"securityType,omitempty"`

	//UefiSettings: Specifies the security settings like secure boot and vTPM used
	//while creating the virtual machine.
	//Minimum api-version: 2020-12-01
	UefiSettings *UefiSettings_Spec `json:"uefiSettings,omitempty"`
}

var _ genruntime.ARMTransformer = &SecurityProfile_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *SecurityProfile_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	var result SecurityProfile_SpecARM

	// Set property ‘EncryptionAtHost’:
	if profile.EncryptionAtHost != nil {
		encryptionAtHost := *profile.EncryptionAtHost
		result.EncryptionAtHost = &encryptionAtHost
	}

	// Set property ‘SecurityType’:
	if profile.SecurityType != nil {
		securityType := *profile.SecurityType
		result.SecurityType = &securityType
	}

	// Set property ‘UefiSettings’:
	if profile.UefiSettings != nil {
		uefiSettingsARM, err := (*profile.UefiSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		uefiSettings := uefiSettingsARM.(UefiSettings_SpecARM)
		result.UefiSettings = &uefiSettings
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *SecurityProfile_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityProfile_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *SecurityProfile_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityProfile_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityProfile_SpecARM, got %T", armInput)
	}

	// Set property ‘EncryptionAtHost’:
	if typedInput.EncryptionAtHost != nil {
		encryptionAtHost := *typedInput.EncryptionAtHost
		profile.EncryptionAtHost = &encryptionAtHost
	}

	// Set property ‘SecurityType’:
	if typedInput.SecurityType != nil {
		securityType := *typedInput.SecurityType
		profile.SecurityType = &securityType
	}

	// Set property ‘UefiSettings’:
	if typedInput.UefiSettings != nil {
		var uefiSettings1 UefiSettings_Spec
		err := uefiSettings1.PopulateFromARM(owner, *typedInput.UefiSettings)
		if err != nil {
			return err
		}
		uefiSettings := uefiSettings1
		profile.UefiSettings = &uefiSettings
	}

	// No error
	return nil
}

// AssignPropertiesFromSecurityProfileSpec populates our SecurityProfile_Spec from the provided source SecurityProfile_Spec
func (profile *SecurityProfile_Spec) AssignPropertiesFromSecurityProfileSpec(source *v1alpha1api20201201storage.SecurityProfile_Spec) error {

	// EncryptionAtHost
	if source.EncryptionAtHost != nil {
		encryptionAtHost := *source.EncryptionAtHost
		profile.EncryptionAtHost = &encryptionAtHost
	} else {
		profile.EncryptionAtHost = nil
	}

	// SecurityType
	if source.SecurityType != nil {
		securityType := SecurityProfileSpecSecurityType(*source.SecurityType)
		profile.SecurityType = &securityType
	} else {
		profile.SecurityType = nil
	}

	// UefiSettings
	if source.UefiSettings != nil {
		var uefiSetting UefiSettings_Spec
		err := uefiSetting.AssignPropertiesFromUefiSettingsSpec(source.UefiSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUefiSettingsSpec() to populate field UefiSettings")
		}
		profile.UefiSettings = &uefiSetting
	} else {
		profile.UefiSettings = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSecurityProfileSpec populates the provided destination SecurityProfile_Spec from our SecurityProfile_Spec
func (profile *SecurityProfile_Spec) AssignPropertiesToSecurityProfileSpec(destination *v1alpha1api20201201storage.SecurityProfile_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EncryptionAtHost
	if profile.EncryptionAtHost != nil {
		encryptionAtHost := *profile.EncryptionAtHost
		destination.EncryptionAtHost = &encryptionAtHost
	} else {
		destination.EncryptionAtHost = nil
	}

	// SecurityType
	if profile.SecurityType != nil {
		securityType := string(*profile.SecurityType)
		destination.SecurityType = &securityType
	} else {
		destination.SecurityType = nil
	}

	// UefiSettings
	if profile.UefiSettings != nil {
		var uefiSetting v1alpha1api20201201storage.UefiSettings_Spec
		err := profile.UefiSettings.AssignPropertiesToUefiSettingsSpec(&uefiSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUefiSettingsSpec() to populate field UefiSettings")
		}
		destination.UefiSettings = &uefiSetting
	} else {
		destination.UefiSettings = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SecurityProfile_Status struct {
	//EncryptionAtHost: This property can be used by user in the request to enable or
	//disable the Host Encryption for the virtual machine or virtual machine scale
	//set. This will enable the encryption for all the disks including Resource/Temp
	//disk at host itself.
	//Default: The Encryption at host will be disabled unless this property is set to
	//true for the resource.
	EncryptionAtHost *bool `json:"encryptionAtHost,omitempty"`

	//SecurityType: Specifies the SecurityType of the virtual machine. It is set as
	//TrustedLaunch to enable UefiSettings.
	//Default: UefiSettings will not be enabled unless this property is set as
	//TrustedLaunch.
	SecurityType *SecurityProfileStatusSecurityType `json:"securityType,omitempty"`

	//UefiSettings: Specifies the security settings like secure boot and vTPM used
	//while creating the virtual machine.
	//Minimum api-version: 2020-12-01
	UefiSettings *UefiSettings_Status `json:"uefiSettings,omitempty"`
}

var _ genruntime.FromARMConverter = &SecurityProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *SecurityProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *SecurityProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘EncryptionAtHost’:
	if typedInput.EncryptionAtHost != nil {
		encryptionAtHost := *typedInput.EncryptionAtHost
		profile.EncryptionAtHost = &encryptionAtHost
	}

	// Set property ‘SecurityType’:
	if typedInput.SecurityType != nil {
		securityType := *typedInput.SecurityType
		profile.SecurityType = &securityType
	}

	// Set property ‘UefiSettings’:
	if typedInput.UefiSettings != nil {
		var uefiSettings1 UefiSettings_Status
		err := uefiSettings1.PopulateFromARM(owner, *typedInput.UefiSettings)
		if err != nil {
			return err
		}
		uefiSettings := uefiSettings1
		profile.UefiSettings = &uefiSettings
	}

	// No error
	return nil
}

// AssignPropertiesFromSecurityProfileStatus populates our SecurityProfile_Status from the provided source SecurityProfile_Status
func (profile *SecurityProfile_Status) AssignPropertiesFromSecurityProfileStatus(source *v1alpha1api20201201storage.SecurityProfile_Status) error {

	// EncryptionAtHost
	if source.EncryptionAtHost != nil {
		encryptionAtHost := *source.EncryptionAtHost
		profile.EncryptionAtHost = &encryptionAtHost
	} else {
		profile.EncryptionAtHost = nil
	}

	// SecurityType
	if source.SecurityType != nil {
		securityType := SecurityProfileStatusSecurityType(*source.SecurityType)
		profile.SecurityType = &securityType
	} else {
		profile.SecurityType = nil
	}

	// UefiSettings
	if source.UefiSettings != nil {
		var uefiSetting UefiSettings_Status
		err := uefiSetting.AssignPropertiesFromUefiSettingsStatus(source.UefiSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUefiSettingsStatus() to populate field UefiSettings")
		}
		profile.UefiSettings = &uefiSetting
	} else {
		profile.UefiSettings = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSecurityProfileStatus populates the provided destination SecurityProfile_Status from our SecurityProfile_Status
func (profile *SecurityProfile_Status) AssignPropertiesToSecurityProfileStatus(destination *v1alpha1api20201201storage.SecurityProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EncryptionAtHost
	if profile.EncryptionAtHost != nil {
		encryptionAtHost := *profile.EncryptionAtHost
		destination.EncryptionAtHost = &encryptionAtHost
	} else {
		destination.EncryptionAtHost = nil
	}

	// SecurityType
	if profile.SecurityType != nil {
		securityType := string(*profile.SecurityType)
		destination.SecurityType = &securityType
	} else {
		destination.SecurityType = nil
	}

	// UefiSettings
	if profile.UefiSettings != nil {
		var uefiSetting v1alpha1api20201201storage.UefiSettings_Status
		err := profile.UefiSettings.AssignPropertiesToUefiSettingsStatus(&uefiSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUefiSettingsStatus() to populate field UefiSettings")
		}
		destination.UefiSettings = &uefiSetting
	} else {
		destination.UefiSettings = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageProfile_Spec struct {
	//DataDisks: Specifies the parameters that are used to add a data disk to a
	//virtual machine.
	//For more information about disks, see [About disks and VHDs for Azure virtual
	//machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []DataDisk_Spec `json:"dataDisks,omitempty"`

	//ImageReference: Specifies information about the image to use. You can specify
	//information about platform images, marketplace images, or virtual machine
	//images. This element is required when you want to use a platform image,
	//marketplace image, or virtual machine image, but is not used in other creation
	//operations.
	ImageReference *ImageReference_Spec `json:"imageReference,omitempty"`

	//OsDisk: Specifies information about the operating system disk used by the
	//virtual machine.
	//For more information about disks, see [About disks and VHDs for Azure virtual
	//machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *OSDisk_Spec `json:"osDisk,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageProfile_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *StorageProfile_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	var result StorageProfile_SpecARM

	// Set property ‘DataDisks’:
	for _, item := range profile.DataDisks {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.DataDisks = append(result.DataDisks, itemARM.(DataDisk_SpecARM))
	}

	// Set property ‘ImageReference’:
	if profile.ImageReference != nil {
		imageReferenceARM, err := (*profile.ImageReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		imageReference := imageReferenceARM.(ImageReference_SpecARM)
		result.ImageReference = &imageReference
	}

	// Set property ‘OsDisk’:
	if profile.OsDisk != nil {
		osDiskARM, err := (*profile.OsDisk).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		osDisk := osDiskARM.(OSDisk_SpecARM)
		result.OsDisk = &osDisk
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *StorageProfile_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageProfile_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *StorageProfile_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageProfile_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageProfile_SpecARM, got %T", armInput)
	}

	// Set property ‘DataDisks’:
	for _, item := range typedInput.DataDisks {
		var item1 DataDisk_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.DataDisks = append(profile.DataDisks, item1)
	}

	// Set property ‘ImageReference’:
	if typedInput.ImageReference != nil {
		var imageReference1 ImageReference_Spec
		err := imageReference1.PopulateFromARM(owner, *typedInput.ImageReference)
		if err != nil {
			return err
		}
		imageReference := imageReference1
		profile.ImageReference = &imageReference
	}

	// Set property ‘OsDisk’:
	if typedInput.OsDisk != nil {
		var osDisk1 OSDisk_Spec
		err := osDisk1.PopulateFromARM(owner, *typedInput.OsDisk)
		if err != nil {
			return err
		}
		osDisk := osDisk1
		profile.OsDisk = &osDisk
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageProfileSpec populates our StorageProfile_Spec from the provided source StorageProfile_Spec
func (profile *StorageProfile_Spec) AssignPropertiesFromStorageProfileSpec(source *v1alpha1api20201201storage.StorageProfile_Spec) error {

	// DataDisks
	if source.DataDisks != nil {
		dataDiskList := make([]DataDisk_Spec, len(source.DataDisks))
		for dataDiskIndex, dataDiskItem := range source.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk DataDisk_Spec
			err := dataDisk.AssignPropertiesFromDataDiskSpec(&dataDiskItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDataDiskSpec() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		profile.DataDisks = dataDiskList
	} else {
		profile.DataDisks = nil
	}

	// ImageReference
	if source.ImageReference != nil {
		var imageReference ImageReference_Spec
		err := imageReference.AssignPropertiesFromImageReferenceSpec(source.ImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageReferenceSpec() to populate field ImageReference")
		}
		profile.ImageReference = &imageReference
	} else {
		profile.ImageReference = nil
	}

	// OsDisk
	if source.OsDisk != nil {
		var osDisk OSDisk_Spec
		err := osDisk.AssignPropertiesFromOSDiskSpec(source.OsDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromOSDiskSpec() to populate field OsDisk")
		}
		profile.OsDisk = &osDisk
	} else {
		profile.OsDisk = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageProfileSpec populates the provided destination StorageProfile_Spec from our StorageProfile_Spec
func (profile *StorageProfile_Spec) AssignPropertiesToStorageProfileSpec(destination *v1alpha1api20201201storage.StorageProfile_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataDisks
	if profile.DataDisks != nil {
		dataDiskList := make([]v1alpha1api20201201storage.DataDisk_Spec, len(profile.DataDisks))
		for dataDiskIndex, dataDiskItem := range profile.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk v1alpha1api20201201storage.DataDisk_Spec
			err := dataDiskItem.AssignPropertiesToDataDiskSpec(&dataDisk)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDataDiskSpec() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		destination.DataDisks = dataDiskList
	} else {
		destination.DataDisks = nil
	}

	// ImageReference
	if profile.ImageReference != nil {
		var imageReference v1alpha1api20201201storage.ImageReference_Spec
		err := profile.ImageReference.AssignPropertiesToImageReferenceSpec(&imageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageReferenceSpec() to populate field ImageReference")
		}
		destination.ImageReference = &imageReference
	} else {
		destination.ImageReference = nil
	}

	// OsDisk
	if profile.OsDisk != nil {
		var osDisk v1alpha1api20201201storage.OSDisk_Spec
		err := profile.OsDisk.AssignPropertiesToOSDiskSpec(&osDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToOSDiskSpec() to populate field OsDisk")
		}
		destination.OsDisk = &osDisk
	} else {
		destination.OsDisk = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type StorageProfile_Status struct {
	//DataDisks: Specifies the parameters that are used to add a data disk to a
	//virtual machine.
	//For more information about disks, see [About disks and VHDs for Azure virtual
	//machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []DataDisk_Status `json:"dataDisks,omitempty"`

	//ImageReference: Specifies information about the image to use. You can specify
	//information about platform images, marketplace images, or virtual machine
	//images. This element is required when you want to use a platform image,
	//marketplace image, or virtual machine image, but is not used in other creation
	//operations.
	ImageReference *ImageReference_Status `json:"imageReference,omitempty"`

	//OsDisk: Specifies information about the operating system disk used by the
	//virtual machine.
	//For more information about disks, see [About disks and VHDs for Azure virtual
	//machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *OSDisk_Status `json:"osDisk,omitempty"`
}

var _ genruntime.FromARMConverter = &StorageProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *StorageProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *StorageProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘DataDisks’:
	for _, item := range typedInput.DataDisks {
		var item1 DataDisk_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.DataDisks = append(profile.DataDisks, item1)
	}

	// Set property ‘ImageReference’:
	if typedInput.ImageReference != nil {
		var imageReference1 ImageReference_Status
		err := imageReference1.PopulateFromARM(owner, *typedInput.ImageReference)
		if err != nil {
			return err
		}
		imageReference := imageReference1
		profile.ImageReference = &imageReference
	}

	// Set property ‘OsDisk’:
	if typedInput.OsDisk != nil {
		var osDisk1 OSDisk_Status
		err := osDisk1.PopulateFromARM(owner, *typedInput.OsDisk)
		if err != nil {
			return err
		}
		osDisk := osDisk1
		profile.OsDisk = &osDisk
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageProfileStatus populates our StorageProfile_Status from the provided source StorageProfile_Status
func (profile *StorageProfile_Status) AssignPropertiesFromStorageProfileStatus(source *v1alpha1api20201201storage.StorageProfile_Status) error {

	// DataDisks
	if source.DataDisks != nil {
		dataDiskList := make([]DataDisk_Status, len(source.DataDisks))
		for dataDiskIndex, dataDiskItem := range source.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk DataDisk_Status
			err := dataDisk.AssignPropertiesFromDataDiskStatus(&dataDiskItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDataDiskStatus() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		profile.DataDisks = dataDiskList
	} else {
		profile.DataDisks = nil
	}

	// ImageReference
	if source.ImageReference != nil {
		var imageReference ImageReference_Status
		err := imageReference.AssignPropertiesFromImageReferenceStatus(source.ImageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageReferenceStatus() to populate field ImageReference")
		}
		profile.ImageReference = &imageReference
	} else {
		profile.ImageReference = nil
	}

	// OsDisk
	if source.OsDisk != nil {
		var osDisk OSDisk_Status
		err := osDisk.AssignPropertiesFromOSDiskStatus(source.OsDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromOSDiskStatus() to populate field OsDisk")
		}
		profile.OsDisk = &osDisk
	} else {
		profile.OsDisk = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageProfileStatus populates the provided destination StorageProfile_Status from our StorageProfile_Status
func (profile *StorageProfile_Status) AssignPropertiesToStorageProfileStatus(destination *v1alpha1api20201201storage.StorageProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataDisks
	if profile.DataDisks != nil {
		dataDiskList := make([]v1alpha1api20201201storage.DataDisk_Status, len(profile.DataDisks))
		for dataDiskIndex, dataDiskItem := range profile.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk v1alpha1api20201201storage.DataDisk_Status
			err := dataDiskItem.AssignPropertiesToDataDiskStatus(&dataDisk)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDataDiskStatus() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		destination.DataDisks = dataDiskList
	} else {
		destination.DataDisks = nil
	}

	// ImageReference
	if profile.ImageReference != nil {
		var imageReference v1alpha1api20201201storage.ImageReference_Status
		err := profile.ImageReference.AssignPropertiesToImageReferenceStatus(&imageReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageReferenceStatus() to populate field ImageReference")
		}
		destination.ImageReference = &imageReference
	} else {
		destination.ImageReference = nil
	}

	// OsDisk
	if profile.OsDisk != nil {
		var osDisk v1alpha1api20201201storage.OSDisk_Status
		err := profile.OsDisk.AssignPropertiesToOSDiskStatus(&osDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToOSDiskStatus() to populate field OsDisk")
		}
		destination.OsDisk = &osDisk
	} else {
		destination.OsDisk = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SubResource_Spec struct {
	//Reference: Resource Id
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &SubResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *SubResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result SubResource_SpecARM

	// Set property ‘Id’:
	if resource.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*resource.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SubResource_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SubResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(SubResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResource_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSubResourceSpec populates our SubResource_Spec from the provided source SubResource_Spec
func (resource *SubResource_Spec) AssignPropertiesFromSubResourceSpec(source *v1alpha1api20201201storage.SubResource_Spec) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		resource.Reference = &reference
	} else {
		resource.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubResourceSpec populates the provided destination SubResource_Spec from our SubResource_Spec
func (resource *SubResource_Spec) AssignPropertiesToSubResourceSpec(destination *v1alpha1api20201201storage.SubResource_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if resource.Reference != nil {
		reference := resource.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SubResource_Status struct {
	//Id: Resource Id
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SubResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SubResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SubResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SubResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResource_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubResourceStatus populates our SubResource_Status from the provided source SubResource_Status
func (resource *SubResource_Status) AssignPropertiesFromSubResourceStatus(source *v1alpha1api20201201storage.SubResource_Status) error {

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSubResourceStatus populates the provided destination SubResource_Status from our SubResource_Status
func (resource *SubResource_Status) AssignPropertiesToSubResourceStatus(destination *v1alpha1api20201201storage.SubResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineExtension_Status struct {
	//AutoUpgradeMinorVersion: Indicates whether the extension should use a newer
	//minor version if one is available at deployment time. Once deployed, however,
	//the extension will not upgrade minor versions unless redeployed, even with this
	//property set to true.
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty"`

	//EnableAutomaticUpgrade: Indicates whether the extension should be automatically
	//upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `json:"enableAutomaticUpgrade,omitempty"`

	//ForceUpdateTag: How the extension handler should be forced to update even if the
	//extension configuration has not changed.
	ForceUpdateTag *string `json:"forceUpdateTag,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//InstanceView: The virtual machine extension instance view.
	InstanceView *VirtualMachineExtensionInstanceView_Status `json:"instanceView,omitempty"`

	//Location: Resource location
	Location *string `json:"location,omitempty"`

	//Name: Resource name
	Name *string `json:"name,omitempty"`

	//PropertiesType: Specifies the type of the extension; an example is
	//"CustomScriptExtension".
	PropertiesType *string `json:"properties_type,omitempty"`

	//ProtectedSettings: The extension can contain either protectedSettings or
	//protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings map[string]v1.JSON `json:"protectedSettings,omitempty"`

	//ProvisioningState: The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Publisher: The name of the extension handler publisher.
	Publisher *string `json:"publisher,omitempty"`

	//Settings: Json formatted public settings for the extension.
	Settings map[string]v1.JSON `json:"settings,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//TypeHandlerVersion: Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineExtension_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (extension *VirtualMachineExtension_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineExtension_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (extension *VirtualMachineExtension_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineExtension_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineExtension_StatusARM, got %T", armInput)
	}

	// Set property ‘AutoUpgradeMinorVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoUpgradeMinorVersion != nil {
			autoUpgradeMinorVersion := *typedInput.Properties.AutoUpgradeMinorVersion
			extension.AutoUpgradeMinorVersion = &autoUpgradeMinorVersion
		}
	}

	// Set property ‘EnableAutomaticUpgrade’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAutomaticUpgrade != nil {
			enableAutomaticUpgrade := *typedInput.Properties.EnableAutomaticUpgrade
			extension.EnableAutomaticUpgrade = &enableAutomaticUpgrade
		}
	}

	// Set property ‘ForceUpdateTag’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForceUpdateTag != nil {
			forceUpdateTag := *typedInput.Properties.ForceUpdateTag
			extension.ForceUpdateTag = &forceUpdateTag
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		extension.Id = &id
	}

	// Set property ‘InstanceView’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InstanceView != nil {
			var instanceView1 VirtualMachineExtensionInstanceView_Status
			err := instanceView1.PopulateFromARM(owner, *typedInput.Properties.InstanceView)
			if err != nil {
				return err
			}
			instanceView := instanceView1
			extension.InstanceView = &instanceView
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		extension.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		extension.Name = &name
	}

	// Set property ‘PropertiesType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Type != nil {
			propertiesType := *typedInput.Properties.Type
			extension.PropertiesType = &propertiesType
		}
	}

	// Set property ‘ProtectedSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProtectedSettings != nil {
			extension.ProtectedSettings = make(map[string]v1.JSON)
			for key, value := range typedInput.Properties.ProtectedSettings {
				extension.ProtectedSettings[key] = *value.DeepCopy()
			}
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			extension.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Publisher’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Publisher != nil {
			publisher := *typedInput.Properties.Publisher
			extension.Publisher = &publisher
		}
	}

	// Set property ‘Settings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Settings != nil {
			extension.Settings = make(map[string]v1.JSON)
			for key, value := range typedInput.Properties.Settings {
				extension.Settings[key] = *value.DeepCopy()
			}
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		extension.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			extension.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		extension.Type = &typeVar
	}

	// Set property ‘TypeHandlerVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TypeHandlerVersion != nil {
			typeHandlerVersion := *typedInput.Properties.TypeHandlerVersion
			extension.TypeHandlerVersion = &typeHandlerVersion
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineExtensionStatus populates our VirtualMachineExtension_Status from the provided source VirtualMachineExtension_Status
func (extension *VirtualMachineExtension_Status) AssignPropertiesFromVirtualMachineExtensionStatus(source *v1alpha1api20201201storage.VirtualMachineExtension_Status) error {

	// AutoUpgradeMinorVersion
	if source.AutoUpgradeMinorVersion != nil {
		autoUpgradeMinorVersion := *source.AutoUpgradeMinorVersion
		extension.AutoUpgradeMinorVersion = &autoUpgradeMinorVersion
	} else {
		extension.AutoUpgradeMinorVersion = nil
	}

	// EnableAutomaticUpgrade
	if source.EnableAutomaticUpgrade != nil {
		enableAutomaticUpgrade := *source.EnableAutomaticUpgrade
		extension.EnableAutomaticUpgrade = &enableAutomaticUpgrade
	} else {
		extension.EnableAutomaticUpgrade = nil
	}

	// ForceUpdateTag
	extension.ForceUpdateTag = genruntime.ClonePointerToString(source.ForceUpdateTag)

	// Id
	extension.Id = genruntime.ClonePointerToString(source.Id)

	// InstanceView
	if source.InstanceView != nil {
		var instanceView VirtualMachineExtensionInstanceView_Status
		err := instanceView.AssignPropertiesFromVirtualMachineExtensionInstanceViewStatus(source.InstanceView)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineExtensionInstanceViewStatus() to populate field InstanceView")
		}
		extension.InstanceView = &instanceView
	} else {
		extension.InstanceView = nil
	}

	// Location
	extension.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	extension.Name = genruntime.ClonePointerToString(source.Name)

	// PropertiesType
	extension.PropertiesType = genruntime.ClonePointerToString(source.PropertiesType)

	// ProtectedSettings
	if source.ProtectedSettings != nil {
		protectedSettingMap := make(map[string]v1.JSON, len(source.ProtectedSettings))
		for protectedSettingKey, protectedSettingValue := range source.ProtectedSettings {
			// Shadow the loop variable to avoid aliasing
			protectedSettingValue := protectedSettingValue
			protectedSettingMap[protectedSettingKey] = *protectedSettingValue.DeepCopy()
		}
		extension.ProtectedSettings = protectedSettingMap
	} else {
		extension.ProtectedSettings = nil
	}

	// ProvisioningState
	extension.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Publisher
	extension.Publisher = genruntime.ClonePointerToString(source.Publisher)

	// Settings
	if source.Settings != nil {
		settingMap := make(map[string]v1.JSON, len(source.Settings))
		for settingKey, settingValue := range source.Settings {
			// Shadow the loop variable to avoid aliasing
			settingValue := settingValue
			settingMap[settingKey] = *settingValue.DeepCopy()
		}
		extension.Settings = settingMap
	} else {
		extension.Settings = nil
	}

	// Tags
	extension.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	extension.Type = genruntime.ClonePointerToString(source.Type)

	// TypeHandlerVersion
	extension.TypeHandlerVersion = genruntime.ClonePointerToString(source.TypeHandlerVersion)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineExtensionStatus populates the provided destination VirtualMachineExtension_Status from our VirtualMachineExtension_Status
func (extension *VirtualMachineExtension_Status) AssignPropertiesToVirtualMachineExtensionStatus(destination *v1alpha1api20201201storage.VirtualMachineExtension_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoUpgradeMinorVersion
	if extension.AutoUpgradeMinorVersion != nil {
		autoUpgradeMinorVersion := *extension.AutoUpgradeMinorVersion
		destination.AutoUpgradeMinorVersion = &autoUpgradeMinorVersion
	} else {
		destination.AutoUpgradeMinorVersion = nil
	}

	// EnableAutomaticUpgrade
	if extension.EnableAutomaticUpgrade != nil {
		enableAutomaticUpgrade := *extension.EnableAutomaticUpgrade
		destination.EnableAutomaticUpgrade = &enableAutomaticUpgrade
	} else {
		destination.EnableAutomaticUpgrade = nil
	}

	// ForceUpdateTag
	destination.ForceUpdateTag = genruntime.ClonePointerToString(extension.ForceUpdateTag)

	// Id
	destination.Id = genruntime.ClonePointerToString(extension.Id)

	// InstanceView
	if extension.InstanceView != nil {
		var instanceView v1alpha1api20201201storage.VirtualMachineExtensionInstanceView_Status
		err := extension.InstanceView.AssignPropertiesToVirtualMachineExtensionInstanceViewStatus(&instanceView)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineExtensionInstanceViewStatus() to populate field InstanceView")
		}
		destination.InstanceView = &instanceView
	} else {
		destination.InstanceView = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(extension.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(extension.Name)

	// PropertiesType
	destination.PropertiesType = genruntime.ClonePointerToString(extension.PropertiesType)

	// ProtectedSettings
	if extension.ProtectedSettings != nil {
		protectedSettingMap := make(map[string]v1.JSON, len(extension.ProtectedSettings))
		for protectedSettingKey, protectedSettingValue := range extension.ProtectedSettings {
			// Shadow the loop variable to avoid aliasing
			protectedSettingValue := protectedSettingValue
			protectedSettingMap[protectedSettingKey] = *protectedSettingValue.DeepCopy()
		}
		destination.ProtectedSettings = protectedSettingMap
	} else {
		destination.ProtectedSettings = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(extension.ProvisioningState)

	// Publisher
	destination.Publisher = genruntime.ClonePointerToString(extension.Publisher)

	// Settings
	if extension.Settings != nil {
		settingMap := make(map[string]v1.JSON, len(extension.Settings))
		for settingKey, settingValue := range extension.Settings {
			// Shadow the loop variable to avoid aliasing
			settingValue := settingValue
			settingMap[settingKey] = *settingValue.DeepCopy()
		}
		destination.Settings = settingMap
	} else {
		destination.Settings = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(extension.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(extension.Type)

	// TypeHandlerVersion
	destination.TypeHandlerVersion = genruntime.ClonePointerToString(extension.TypeHandlerVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineIdentity_Spec struct {
	//Type: The type of identity used for the virtual machine. The type
	//'SystemAssigned, UserAssigned' includes both an implicitly created identity and
	//a set of user assigned identities. The type 'None' will remove any identities
	//from the virtual machine.
	Type *VirtualMachineIdentitySpecType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualMachineIdentity_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *VirtualMachineIdentity_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result VirtualMachineIdentity_SpecARM

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *VirtualMachineIdentity_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineIdentity_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *VirtualMachineIdentity_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineIdentity_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineIdentity_SpecARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineIdentitySpec populates our VirtualMachineIdentity_Spec from the provided source VirtualMachineIdentity_Spec
func (identity *VirtualMachineIdentity_Spec) AssignPropertiesFromVirtualMachineIdentitySpec(source *v1alpha1api20201201storage.VirtualMachineIdentity_Spec) error {

	// Type
	if source.Type != nil {
		typeVar := VirtualMachineIdentitySpecType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineIdentitySpec populates the provided destination VirtualMachineIdentity_Spec from our VirtualMachineIdentity_Spec
func (identity *VirtualMachineIdentity_Spec) AssignPropertiesToVirtualMachineIdentitySpec(destination *v1alpha1api20201201storage.VirtualMachineIdentity_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineIdentity_Status struct {
	//PrincipalId: The principal id of virtual machine identity. This property will
	//only be provided for a system assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant id associated with the virtual machine. This property will
	//only be provided for a system assigned identity.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The type of identity used for the virtual machine. The type
	//'SystemAssigned, UserAssigned' includes both an implicitly created identity and
	//a set of user assigned identities. The type 'None' will remove any identities
	//from the virtual machine.
	Type *VirtualMachineIdentityStatusType `json:"type,omitempty"`

	//UserAssignedIdentities: The list of user identities associated with the Virtual
	//Machine. The user identity dictionary key references will be ARM resource ids in
	//the form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]VirtualMachineIdentity_Status_UserAssignedIdentities `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *VirtualMachineIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *VirtualMachineIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]VirtualMachineIdentity_Status_UserAssignedIdentities)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 VirtualMachineIdentity_Status_UserAssignedIdentities
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineIdentityStatus populates our VirtualMachineIdentity_Status from the provided source VirtualMachineIdentity_Status
func (identity *VirtualMachineIdentity_Status) AssignPropertiesFromVirtualMachineIdentityStatus(source *v1alpha1api20201201storage.VirtualMachineIdentity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := VirtualMachineIdentityStatusType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]VirtualMachineIdentity_Status_UserAssignedIdentities, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity VirtualMachineIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentity.AssignPropertiesFromVirtualMachineIdentityStatusUserAssignedIdentities(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineIdentityStatusUserAssignedIdentities() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineIdentityStatus populates the provided destination VirtualMachineIdentity_Status from our VirtualMachineIdentity_Status
func (identity *VirtualMachineIdentity_Status) AssignPropertiesToVirtualMachineIdentityStatus(destination *v1alpha1api20201201storage.VirtualMachineIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20201201storage.VirtualMachineIdentity_Status_UserAssignedIdentities, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20201201storage.VirtualMachineIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentityValue.AssignPropertiesToVirtualMachineIdentityStatusUserAssignedIdentities(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineIdentityStatusUserAssignedIdentities() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineInstanceView_Status struct {
	//AssignedHost: Resource id of the dedicated host, on which the virtual machine is
	//allocated through automatic placement, when the virtual machine is associated
	//with a dedicated host group that has automatic placement enabled.
	//Minimum api-version: 2020-06-01.
	AssignedHost *string `json:"assignedHost,omitempty"`

	//BootDiagnostics: Boot Diagnostics is a debugging feature which allows you to
	//view Console Output and Screenshot to diagnose VM status.
	//You can easily view the output of your console log.
	//Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceView_Status `json:"bootDiagnostics,omitempty"`

	//ComputerName: The computer name assigned to the virtual machine.
	ComputerName *string `json:"computerName,omitempty"`

	//Disks: The virtual machine disk information.
	Disks []DiskInstanceView_Status `json:"disks,omitempty"`

	//Extensions: The extensions information.
	Extensions []VirtualMachineExtensionInstanceView_Status `json:"extensions,omitempty"`

	//HyperVGeneration: Specifies the HyperVGeneration Type associated with a resource
	HyperVGeneration *VirtualMachineInstanceViewStatusHyperVGeneration `json:"hyperVGeneration,omitempty"`

	//MaintenanceRedeployStatus: The Maintenance Operation status on the virtual
	//machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatus_Status `json:"maintenanceRedeployStatus,omitempty"`

	//OsName: The Operating System running on the virtual machine.
	OsName *string `json:"osName,omitempty"`

	//OsVersion: The version of Operating System running on the virtual machine.
	OsVersion *string `json:"osVersion,omitempty"`

	//PatchStatus: [Preview Feature] The status of virtual machine patch operations.
	PatchStatus *VirtualMachinePatchStatus_Status `json:"patchStatus,omitempty"`

	//PlatformFaultDomain: Specifies the fault domain of the virtual machine.
	PlatformFaultDomain *int `json:"platformFaultDomain,omitempty"`

	//PlatformUpdateDomain: Specifies the update domain of the virtual machine.
	PlatformUpdateDomain *int `json:"platformUpdateDomain,omitempty"`

	//RdpThumbPrint: The Remote desktop certificate thumbprint.
	RdpThumbPrint *string `json:"rdpThumbPrint,omitempty"`

	//Statuses: The resource status information.
	Statuses []InstanceViewStatus_Status `json:"statuses,omitempty"`

	//VmAgent: The VM Agent running on the virtual machine.
	VmAgent *VirtualMachineAgentInstanceView_Status `json:"vmAgent,omitempty"`

	//VmHealth: The health status for the VM.
	VmHealth *VirtualMachineHealthStatus_Status `json:"vmHealth,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineInstanceView_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *VirtualMachineInstanceView_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineInstanceView_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *VirtualMachineInstanceView_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineInstanceView_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineInstanceView_StatusARM, got %T", armInput)
	}

	// Set property ‘AssignedHost’:
	if typedInput.AssignedHost != nil {
		assignedHost := *typedInput.AssignedHost
		view.AssignedHost = &assignedHost
	}

	// Set property ‘BootDiagnostics’:
	if typedInput.BootDiagnostics != nil {
		var bootDiagnostics1 BootDiagnosticsInstanceView_Status
		err := bootDiagnostics1.PopulateFromARM(owner, *typedInput.BootDiagnostics)
		if err != nil {
			return err
		}
		bootDiagnostics := bootDiagnostics1
		view.BootDiagnostics = &bootDiagnostics
	}

	// Set property ‘ComputerName’:
	if typedInput.ComputerName != nil {
		computerName := *typedInput.ComputerName
		view.ComputerName = &computerName
	}

	// Set property ‘Disks’:
	for _, item := range typedInput.Disks {
		var item1 DiskInstanceView_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Disks = append(view.Disks, item1)
	}

	// Set property ‘Extensions’:
	for _, item := range typedInput.Extensions {
		var item1 VirtualMachineExtensionInstanceView_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Extensions = append(view.Extensions, item1)
	}

	// Set property ‘HyperVGeneration’:
	if typedInput.HyperVGeneration != nil {
		hyperVGeneration := *typedInput.HyperVGeneration
		view.HyperVGeneration = &hyperVGeneration
	}

	// Set property ‘MaintenanceRedeployStatus’:
	if typedInput.MaintenanceRedeployStatus != nil {
		var maintenanceRedeployStatus1 MaintenanceRedeployStatus_Status
		err := maintenanceRedeployStatus1.PopulateFromARM(owner, *typedInput.MaintenanceRedeployStatus)
		if err != nil {
			return err
		}
		maintenanceRedeployStatus := maintenanceRedeployStatus1
		view.MaintenanceRedeployStatus = &maintenanceRedeployStatus
	}

	// Set property ‘OsName’:
	if typedInput.OsName != nil {
		osName := *typedInput.OsName
		view.OsName = &osName
	}

	// Set property ‘OsVersion’:
	if typedInput.OsVersion != nil {
		osVersion := *typedInput.OsVersion
		view.OsVersion = &osVersion
	}

	// Set property ‘PatchStatus’:
	if typedInput.PatchStatus != nil {
		var patchStatus1 VirtualMachinePatchStatus_Status
		err := patchStatus1.PopulateFromARM(owner, *typedInput.PatchStatus)
		if err != nil {
			return err
		}
		patchStatus := patchStatus1
		view.PatchStatus = &patchStatus
	}

	// Set property ‘PlatformFaultDomain’:
	if typedInput.PlatformFaultDomain != nil {
		platformFaultDomain := *typedInput.PlatformFaultDomain
		view.PlatformFaultDomain = &platformFaultDomain
	}

	// Set property ‘PlatformUpdateDomain’:
	if typedInput.PlatformUpdateDomain != nil {
		platformUpdateDomain := *typedInput.PlatformUpdateDomain
		view.PlatformUpdateDomain = &platformUpdateDomain
	}

	// Set property ‘RdpThumbPrint’:
	if typedInput.RdpThumbPrint != nil {
		rdpThumbPrint := *typedInput.RdpThumbPrint
		view.RdpThumbPrint = &rdpThumbPrint
	}

	// Set property ‘Statuses’:
	for _, item := range typedInput.Statuses {
		var item1 InstanceViewStatus_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Statuses = append(view.Statuses, item1)
	}

	// Set property ‘VmAgent’:
	if typedInput.VmAgent != nil {
		var vmAgent1 VirtualMachineAgentInstanceView_Status
		err := vmAgent1.PopulateFromARM(owner, *typedInput.VmAgent)
		if err != nil {
			return err
		}
		vmAgent := vmAgent1
		view.VmAgent = &vmAgent
	}

	// Set property ‘VmHealth’:
	if typedInput.VmHealth != nil {
		var vmHealth1 VirtualMachineHealthStatus_Status
		err := vmHealth1.PopulateFromARM(owner, *typedInput.VmHealth)
		if err != nil {
			return err
		}
		vmHealth := vmHealth1
		view.VmHealth = &vmHealth
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineInstanceViewStatus populates our VirtualMachineInstanceView_Status from the provided source VirtualMachineInstanceView_Status
func (view *VirtualMachineInstanceView_Status) AssignPropertiesFromVirtualMachineInstanceViewStatus(source *v1alpha1api20201201storage.VirtualMachineInstanceView_Status) error {

	// AssignedHost
	view.AssignedHost = genruntime.ClonePointerToString(source.AssignedHost)

	// BootDiagnostics
	if source.BootDiagnostics != nil {
		var bootDiagnostic BootDiagnosticsInstanceView_Status
		err := bootDiagnostic.AssignPropertiesFromBootDiagnosticsInstanceViewStatus(source.BootDiagnostics)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBootDiagnosticsInstanceViewStatus() to populate field BootDiagnostics")
		}
		view.BootDiagnostics = &bootDiagnostic
	} else {
		view.BootDiagnostics = nil
	}

	// ComputerName
	view.ComputerName = genruntime.ClonePointerToString(source.ComputerName)

	// Disks
	if source.Disks != nil {
		diskList := make([]DiskInstanceView_Status, len(source.Disks))
		for diskIndex, diskItem := range source.Disks {
			// Shadow the loop variable to avoid aliasing
			diskItem := diskItem
			var disk DiskInstanceView_Status
			err := disk.AssignPropertiesFromDiskInstanceViewStatus(&diskItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDiskInstanceViewStatus() to populate field Disks")
			}
			diskList[diskIndex] = disk
		}
		view.Disks = diskList
	} else {
		view.Disks = nil
	}

	// Extensions
	if source.Extensions != nil {
		extensionList := make([]VirtualMachineExtensionInstanceView_Status, len(source.Extensions))
		for extensionIndex, extensionItem := range source.Extensions {
			// Shadow the loop variable to avoid aliasing
			extensionItem := extensionItem
			var extension VirtualMachineExtensionInstanceView_Status
			err := extension.AssignPropertiesFromVirtualMachineExtensionInstanceViewStatus(&extensionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineExtensionInstanceViewStatus() to populate field Extensions")
			}
			extensionList[extensionIndex] = extension
		}
		view.Extensions = extensionList
	} else {
		view.Extensions = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := VirtualMachineInstanceViewStatusHyperVGeneration(*source.HyperVGeneration)
		view.HyperVGeneration = &hyperVGeneration
	} else {
		view.HyperVGeneration = nil
	}

	// MaintenanceRedeployStatus
	if source.MaintenanceRedeployStatus != nil {
		var maintenanceRedeployStatus MaintenanceRedeployStatus_Status
		err := maintenanceRedeployStatus.AssignPropertiesFromMaintenanceRedeployStatusStatus(source.MaintenanceRedeployStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMaintenanceRedeployStatusStatus() to populate field MaintenanceRedeployStatus")
		}
		view.MaintenanceRedeployStatus = &maintenanceRedeployStatus
	} else {
		view.MaintenanceRedeployStatus = nil
	}

	// OsName
	view.OsName = genruntime.ClonePointerToString(source.OsName)

	// OsVersion
	view.OsVersion = genruntime.ClonePointerToString(source.OsVersion)

	// PatchStatus
	if source.PatchStatus != nil {
		var patchStatus VirtualMachinePatchStatus_Status
		err := patchStatus.AssignPropertiesFromVirtualMachinePatchStatusStatus(source.PatchStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachinePatchStatusStatus() to populate field PatchStatus")
		}
		view.PatchStatus = &patchStatus
	} else {
		view.PatchStatus = nil
	}

	// PlatformFaultDomain
	view.PlatformFaultDomain = genruntime.ClonePointerToInt(source.PlatformFaultDomain)

	// PlatformUpdateDomain
	view.PlatformUpdateDomain = genruntime.ClonePointerToInt(source.PlatformUpdateDomain)

	// RdpThumbPrint
	view.RdpThumbPrint = genruntime.ClonePointerToString(source.RdpThumbPrint)

	// Statuses
	if source.Statuses != nil {
		statusList := make([]InstanceViewStatus_Status, len(source.Statuses))
		for statusIndex, statusItem := range source.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status InstanceViewStatus_Status
			err := status.AssignPropertiesFromInstanceViewStatusStatus(&statusItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		view.Statuses = statusList
	} else {
		view.Statuses = nil
	}

	// VmAgent
	if source.VmAgent != nil {
		var vmAgent VirtualMachineAgentInstanceView_Status
		err := vmAgent.AssignPropertiesFromVirtualMachineAgentInstanceViewStatus(source.VmAgent)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineAgentInstanceViewStatus() to populate field VmAgent")
		}
		view.VmAgent = &vmAgent
	} else {
		view.VmAgent = nil
	}

	// VmHealth
	if source.VmHealth != nil {
		var vmHealth VirtualMachineHealthStatus_Status
		err := vmHealth.AssignPropertiesFromVirtualMachineHealthStatusStatus(source.VmHealth)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineHealthStatusStatus() to populate field VmHealth")
		}
		view.VmHealth = &vmHealth
	} else {
		view.VmHealth = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineInstanceViewStatus populates the provided destination VirtualMachineInstanceView_Status from our VirtualMachineInstanceView_Status
func (view *VirtualMachineInstanceView_Status) AssignPropertiesToVirtualMachineInstanceViewStatus(destination *v1alpha1api20201201storage.VirtualMachineInstanceView_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AssignedHost
	destination.AssignedHost = genruntime.ClonePointerToString(view.AssignedHost)

	// BootDiagnostics
	if view.BootDiagnostics != nil {
		var bootDiagnostic v1alpha1api20201201storage.BootDiagnosticsInstanceView_Status
		err := view.BootDiagnostics.AssignPropertiesToBootDiagnosticsInstanceViewStatus(&bootDiagnostic)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBootDiagnosticsInstanceViewStatus() to populate field BootDiagnostics")
		}
		destination.BootDiagnostics = &bootDiagnostic
	} else {
		destination.BootDiagnostics = nil
	}

	// ComputerName
	destination.ComputerName = genruntime.ClonePointerToString(view.ComputerName)

	// Disks
	if view.Disks != nil {
		diskList := make([]v1alpha1api20201201storage.DiskInstanceView_Status, len(view.Disks))
		for diskIndex, diskItem := range view.Disks {
			// Shadow the loop variable to avoid aliasing
			diskItem := diskItem
			var disk v1alpha1api20201201storage.DiskInstanceView_Status
			err := diskItem.AssignPropertiesToDiskInstanceViewStatus(&disk)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDiskInstanceViewStatus() to populate field Disks")
			}
			diskList[diskIndex] = disk
		}
		destination.Disks = diskList
	} else {
		destination.Disks = nil
	}

	// Extensions
	if view.Extensions != nil {
		extensionList := make([]v1alpha1api20201201storage.VirtualMachineExtensionInstanceView_Status, len(view.Extensions))
		for extensionIndex, extensionItem := range view.Extensions {
			// Shadow the loop variable to avoid aliasing
			extensionItem := extensionItem
			var extension v1alpha1api20201201storage.VirtualMachineExtensionInstanceView_Status
			err := extensionItem.AssignPropertiesToVirtualMachineExtensionInstanceViewStatus(&extension)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineExtensionInstanceViewStatus() to populate field Extensions")
			}
			extensionList[extensionIndex] = extension
		}
		destination.Extensions = extensionList
	} else {
		destination.Extensions = nil
	}

	// HyperVGeneration
	if view.HyperVGeneration != nil {
		hyperVGeneration := string(*view.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// MaintenanceRedeployStatus
	if view.MaintenanceRedeployStatus != nil {
		var maintenanceRedeployStatus v1alpha1api20201201storage.MaintenanceRedeployStatus_Status
		err := view.MaintenanceRedeployStatus.AssignPropertiesToMaintenanceRedeployStatusStatus(&maintenanceRedeployStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMaintenanceRedeployStatusStatus() to populate field MaintenanceRedeployStatus")
		}
		destination.MaintenanceRedeployStatus = &maintenanceRedeployStatus
	} else {
		destination.MaintenanceRedeployStatus = nil
	}

	// OsName
	destination.OsName = genruntime.ClonePointerToString(view.OsName)

	// OsVersion
	destination.OsVersion = genruntime.ClonePointerToString(view.OsVersion)

	// PatchStatus
	if view.PatchStatus != nil {
		var patchStatus v1alpha1api20201201storage.VirtualMachinePatchStatus_Status
		err := view.PatchStatus.AssignPropertiesToVirtualMachinePatchStatusStatus(&patchStatus)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualMachinePatchStatusStatus() to populate field PatchStatus")
		}
		destination.PatchStatus = &patchStatus
	} else {
		destination.PatchStatus = nil
	}

	// PlatformFaultDomain
	destination.PlatformFaultDomain = genruntime.ClonePointerToInt(view.PlatformFaultDomain)

	// PlatformUpdateDomain
	destination.PlatformUpdateDomain = genruntime.ClonePointerToInt(view.PlatformUpdateDomain)

	// RdpThumbPrint
	destination.RdpThumbPrint = genruntime.ClonePointerToString(view.RdpThumbPrint)

	// Statuses
	if view.Statuses != nil {
		statusList := make([]v1alpha1api20201201storage.InstanceViewStatus_Status, len(view.Statuses))
		for statusIndex, statusItem := range view.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status v1alpha1api20201201storage.InstanceViewStatus_Status
			err := statusItem.AssignPropertiesToInstanceViewStatusStatus(&status)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		destination.Statuses = statusList
	} else {
		destination.Statuses = nil
	}

	// VmAgent
	if view.VmAgent != nil {
		var vmAgent v1alpha1api20201201storage.VirtualMachineAgentInstanceView_Status
		err := view.VmAgent.AssignPropertiesToVirtualMachineAgentInstanceViewStatus(&vmAgent)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineAgentInstanceViewStatus() to populate field VmAgent")
		}
		destination.VmAgent = &vmAgent
	} else {
		destination.VmAgent = nil
	}

	// VmHealth
	if view.VmHealth != nil {
		var vmHealth v1alpha1api20201201storage.VirtualMachineHealthStatus_Status
		err := view.VmHealth.AssignPropertiesToVirtualMachineHealthStatusStatus(&vmHealth)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineHealthStatusStatus() to populate field VmHealth")
		}
		destination.VmHealth = &vmHealth
	} else {
		destination.VmHealth = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BootDiagnosticsInstanceView_Status struct {
	//ConsoleScreenshotBlobUri: The console screenshot blob URI.
	//NOTE: This will not be set if boot diagnostics is currently enabled with managed
	//storage.
	ConsoleScreenshotBlobUri *string `json:"consoleScreenshotBlobUri,omitempty"`

	//SerialConsoleLogBlobUri: The serial console log blob Uri.
	//NOTE: This will not be set if boot diagnostics is currently enabled with managed
	//storage.
	SerialConsoleLogBlobUri *string `json:"serialConsoleLogBlobUri,omitempty"`

	//Status: The boot diagnostics status information for the VM.
	//NOTE: It will be set only if there are errors encountered in enabling boot
	//diagnostics.
	Status *InstanceViewStatus_Status `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &BootDiagnosticsInstanceView_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *BootDiagnosticsInstanceView_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BootDiagnosticsInstanceView_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *BootDiagnosticsInstanceView_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BootDiagnosticsInstanceView_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BootDiagnosticsInstanceView_StatusARM, got %T", armInput)
	}

	// Set property ‘ConsoleScreenshotBlobUri’:
	if typedInput.ConsoleScreenshotBlobUri != nil {
		consoleScreenshotBlobUri := *typedInput.ConsoleScreenshotBlobUri
		view.ConsoleScreenshotBlobUri = &consoleScreenshotBlobUri
	}

	// Set property ‘SerialConsoleLogBlobUri’:
	if typedInput.SerialConsoleLogBlobUri != nil {
		serialConsoleLogBlobUri := *typedInput.SerialConsoleLogBlobUri
		view.SerialConsoleLogBlobUri = &serialConsoleLogBlobUri
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		var status1 InstanceViewStatus_Status
		err := status1.PopulateFromARM(owner, *typedInput.Status)
		if err != nil {
			return err
		}
		status := status1
		view.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromBootDiagnosticsInstanceViewStatus populates our BootDiagnosticsInstanceView_Status from the provided source BootDiagnosticsInstanceView_Status
func (view *BootDiagnosticsInstanceView_Status) AssignPropertiesFromBootDiagnosticsInstanceViewStatus(source *v1alpha1api20201201storage.BootDiagnosticsInstanceView_Status) error {

	// ConsoleScreenshotBlobUri
	view.ConsoleScreenshotBlobUri = genruntime.ClonePointerToString(source.ConsoleScreenshotBlobUri)

	// SerialConsoleLogBlobUri
	view.SerialConsoleLogBlobUri = genruntime.ClonePointerToString(source.SerialConsoleLogBlobUri)

	// Status
	if source.Status != nil {
		var status InstanceViewStatus_Status
		err := status.AssignPropertiesFromInstanceViewStatusStatus(source.Status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Status")
		}
		view.Status = &status
	} else {
		view.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBootDiagnosticsInstanceViewStatus populates the provided destination BootDiagnosticsInstanceView_Status from our BootDiagnosticsInstanceView_Status
func (view *BootDiagnosticsInstanceView_Status) AssignPropertiesToBootDiagnosticsInstanceViewStatus(destination *v1alpha1api20201201storage.BootDiagnosticsInstanceView_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConsoleScreenshotBlobUri
	destination.ConsoleScreenshotBlobUri = genruntime.ClonePointerToString(view.ConsoleScreenshotBlobUri)

	// SerialConsoleLogBlobUri
	destination.SerialConsoleLogBlobUri = genruntime.ClonePointerToString(view.SerialConsoleLogBlobUri)

	// Status
	if view.Status != nil {
		var status v1alpha1api20201201storage.InstanceViewStatus_Status
		err := view.Status.AssignPropertiesToInstanceViewStatusStatus(&status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Status")
		}
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BootDiagnostics_Spec struct {
	//Enabled: Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `json:"enabled,omitempty"`

	//StorageUri: Uri of the storage account to use for placing the console output and
	//screenshot.
	//If storageUri is not specified while enabling boot diagnostics, managed storage
	//will be used.
	StorageUri *string `json:"storageUri,omitempty"`
}

var _ genruntime.ARMTransformer = &BootDiagnostics_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (diagnostics *BootDiagnostics_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if diagnostics == nil {
		return nil, nil
	}
	var result BootDiagnostics_SpecARM

	// Set property ‘Enabled’:
	if diagnostics.Enabled != nil {
		enabled := *diagnostics.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘StorageUri’:
	if diagnostics.StorageUri != nil {
		storageUri := *diagnostics.StorageUri
		result.StorageUri = &storageUri
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (diagnostics *BootDiagnostics_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BootDiagnostics_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (diagnostics *BootDiagnostics_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BootDiagnostics_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BootDiagnostics_SpecARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		diagnostics.Enabled = &enabled
	}

	// Set property ‘StorageUri’:
	if typedInput.StorageUri != nil {
		storageUri := *typedInput.StorageUri
		diagnostics.StorageUri = &storageUri
	}

	// No error
	return nil
}

// AssignPropertiesFromBootDiagnosticsSpec populates our BootDiagnostics_Spec from the provided source BootDiagnostics_Spec
func (diagnostics *BootDiagnostics_Spec) AssignPropertiesFromBootDiagnosticsSpec(source *v1alpha1api20201201storage.BootDiagnostics_Spec) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		diagnostics.Enabled = &enabled
	} else {
		diagnostics.Enabled = nil
	}

	// StorageUri
	diagnostics.StorageUri = genruntime.ClonePointerToString(source.StorageUri)

	// No error
	return nil
}

// AssignPropertiesToBootDiagnosticsSpec populates the provided destination BootDiagnostics_Spec from our BootDiagnostics_Spec
func (diagnostics *BootDiagnostics_Spec) AssignPropertiesToBootDiagnosticsSpec(destination *v1alpha1api20201201storage.BootDiagnostics_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if diagnostics.Enabled != nil {
		enabled := *diagnostics.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// StorageUri
	destination.StorageUri = genruntime.ClonePointerToString(diagnostics.StorageUri)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BootDiagnostics_Status struct {
	//Enabled: Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `json:"enabled,omitempty"`

	//StorageUri: Uri of the storage account to use for placing the console output and
	//screenshot.
	//If storageUri is not specified while enabling boot diagnostics, managed storage
	//will be used.
	StorageUri *string `json:"storageUri,omitempty"`
}

var _ genruntime.FromARMConverter = &BootDiagnostics_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (diagnostics *BootDiagnostics_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BootDiagnostics_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (diagnostics *BootDiagnostics_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BootDiagnostics_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BootDiagnostics_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		diagnostics.Enabled = &enabled
	}

	// Set property ‘StorageUri’:
	if typedInput.StorageUri != nil {
		storageUri := *typedInput.StorageUri
		diagnostics.StorageUri = &storageUri
	}

	// No error
	return nil
}

// AssignPropertiesFromBootDiagnosticsStatus populates our BootDiagnostics_Status from the provided source BootDiagnostics_Status
func (diagnostics *BootDiagnostics_Status) AssignPropertiesFromBootDiagnosticsStatus(source *v1alpha1api20201201storage.BootDiagnostics_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		diagnostics.Enabled = &enabled
	} else {
		diagnostics.Enabled = nil
	}

	// StorageUri
	diagnostics.StorageUri = genruntime.ClonePointerToString(source.StorageUri)

	// No error
	return nil
}

// AssignPropertiesToBootDiagnosticsStatus populates the provided destination BootDiagnostics_Status from our BootDiagnostics_Status
func (diagnostics *BootDiagnostics_Status) AssignPropertiesToBootDiagnosticsStatus(destination *v1alpha1api20201201storage.BootDiagnostics_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if diagnostics.Enabled != nil {
		enabled := *diagnostics.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// StorageUri
	destination.StorageUri = genruntime.ClonePointerToString(diagnostics.StorageUri)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DataDisk_Spec struct {
	//Caching: Specifies the caching requirements.
	//Possible values are:
	//None
	//ReadOnly
	//ReadWrite
	//Default: None for Standard storage. ReadOnly for Premium storage
	Caching *Caching_Spec `json:"caching,omitempty"`

	// +kubebuilder:validation:Required
	//CreateOption: Specifies how the virtual machine should be created.
	//Possible values are:
	//Attach \u2013 This value is used when you are using a specialized disk to create
	//the virtual machine.
	//FromImage \u2013 This value is used when you are using an image to create the
	//virtual machine. If you are using a platform image, you also use the
	//imageReference element described above. If you are using a marketplace image,
	//you  also use the plan element previously described.
	CreateOption CreateOption_Spec `json:"createOption"`

	//DetachOption: Specifies the detach behavior to be used while detaching a disk or
	//which is already in the process of detachment from the virtual machine.
	//Supported values: ForceDetach.
	//detachOption: ForceDetach is applicable only for managed data disks. If a
	//previous detachment attempt of the data disk did not complete due to an
	//unexpected failure from the virtual machine and the disk is still not released
	//then use force-detach as a last resort option to detach the disk forcibly from
	//the VM. All writes might not have been flushed when using this detach behavior.
	//This feature is still in preview mode and is not supported for
	//VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to
	//'true' along with setting detachOption: 'ForceDetach'.
	DetachOption *DetachOption_Spec `json:"detachOption,omitempty"`

	//DiskSizeGB: Specifies the size of an empty data disk in gigabytes. This element
	//can be used to overwrite the size of the disk in a virtual machine image.
	//This value cannot be larger than 1023 GB
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//Image: The source user image virtual hard disk. The virtual hard disk will be
	//copied before being attached to the virtual machine. If SourceImage is provided,
	//the destination virtual hard drive must not exist.
	Image *VirtualHardDisk_Spec `json:"image,omitempty"`

	// +kubebuilder:validation:Required
	//Lun: Specifies the logical unit number of the data disk. This value is used to
	//identify data disks within the VM and therefore must be unique for each data
	//disk attached to a VM.
	Lun int `json:"lun"`

	//ManagedDisk: The managed disk parameters.
	ManagedDisk *ManagedDiskParameters_Spec `json:"managedDisk,omitempty"`

	//Name: The disk name.
	Name *string `json:"name,omitempty"`

	//ToBeDetached: Specifies whether the data disk is in process of detachment from
	//the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool `json:"toBeDetached,omitempty"`

	//Vhd: The virtual hard disk.
	Vhd *VirtualHardDisk_Spec `json:"vhd,omitempty"`

	//WriteAcceleratorEnabled: Specifies whether writeAccelerator should be enabled or
	//disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &DataDisk_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (disk *DataDisk_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if disk == nil {
		return nil, nil
	}
	var result DataDisk_SpecARM

	// Set property ‘Caching’:
	if disk.Caching != nil {
		caching := *disk.Caching
		result.Caching = &caching
	}

	// Set property ‘CreateOption’:
	result.CreateOption = disk.CreateOption

	// Set property ‘DetachOption’:
	if disk.DetachOption != nil {
		detachOption := *disk.DetachOption
		result.DetachOption = &detachOption
	}

	// Set property ‘DiskSizeGB’:
	if disk.DiskSizeGB != nil {
		diskSizeGB := *disk.DiskSizeGB
		result.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘Image’:
	if disk.Image != nil {
		imageARM, err := (*disk.Image).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		image := imageARM.(VirtualHardDisk_SpecARM)
		result.Image = &image
	}

	// Set property ‘Lun’:
	result.Lun = disk.Lun

	// Set property ‘ManagedDisk’:
	if disk.ManagedDisk != nil {
		managedDiskARM, err := (*disk.ManagedDisk).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		managedDisk := managedDiskARM.(ManagedDiskParameters_SpecARM)
		result.ManagedDisk = &managedDisk
	}

	// Set property ‘Name’:
	if disk.Name != nil {
		name := *disk.Name
		result.Name = &name
	}

	// Set property ‘ToBeDetached’:
	if disk.ToBeDetached != nil {
		toBeDetached := *disk.ToBeDetached
		result.ToBeDetached = &toBeDetached
	}

	// Set property ‘Vhd’:
	if disk.Vhd != nil {
		vhdARM, err := (*disk.Vhd).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vhd := vhdARM.(VirtualHardDisk_SpecARM)
		result.Vhd = &vhd
	}

	// Set property ‘WriteAcceleratorEnabled’:
	if disk.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *disk.WriteAcceleratorEnabled
		result.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *DataDisk_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DataDisk_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *DataDisk_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DataDisk_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DataDisk_SpecARM, got %T", armInput)
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘CreateOption’:
	disk.CreateOption = typedInput.CreateOption

	// Set property ‘DetachOption’:
	if typedInput.DetachOption != nil {
		detachOption := *typedInput.DetachOption
		disk.DetachOption = &detachOption
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘Image’:
	if typedInput.Image != nil {
		var image1 VirtualHardDisk_Spec
		err := image1.PopulateFromARM(owner, *typedInput.Image)
		if err != nil {
			return err
		}
		image := image1
		disk.Image = &image
	}

	// Set property ‘Lun’:
	disk.Lun = typedInput.Lun

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 ManagedDiskParameters_Spec
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		disk.Name = &name
	}

	// Set property ‘ToBeDetached’:
	if typedInput.ToBeDetached != nil {
		toBeDetached := *typedInput.ToBeDetached
		disk.ToBeDetached = &toBeDetached
	}

	// Set property ‘Vhd’:
	if typedInput.Vhd != nil {
		var vhd1 VirtualHardDisk_Spec
		err := vhd1.PopulateFromARM(owner, *typedInput.Vhd)
		if err != nil {
			return err
		}
		vhd := vhd1
		disk.Vhd = &vhd
	}

	// Set property ‘WriteAcceleratorEnabled’:
	if typedInput.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *typedInput.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromDataDiskSpec populates our DataDisk_Spec from the provided source DataDisk_Spec
func (disk *DataDisk_Spec) AssignPropertiesFromDataDiskSpec(source *v1alpha1api20201201storage.DataDisk_Spec) error {

	// Caching
	if source.Caching != nil {
		caching := Caching_Spec(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// CreateOption
	if source.CreateOption != nil {
		disk.CreateOption = CreateOption_Spec(*source.CreateOption)
	} else {
		disk.CreateOption = ""
	}

	// DetachOption
	if source.DetachOption != nil {
		detachOption := DetachOption_Spec(*source.DetachOption)
		disk.DetachOption = &detachOption
	} else {
		disk.DetachOption = nil
	}

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// Image
	if source.Image != nil {
		var image VirtualHardDisk_Spec
		err := image.AssignPropertiesFromVirtualHardDiskSpec(source.Image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskSpec() to populate field Image")
		}
		disk.Image = &image
	} else {
		disk.Image = nil
	}

	// Lun
	disk.Lun = genruntime.GetOptionalIntValue(source.Lun)

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk ManagedDiskParameters_Spec
		err := managedDisk.AssignPropertiesFromManagedDiskParametersSpec(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedDiskParametersSpec() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// Name
	disk.Name = genruntime.ClonePointerToString(source.Name)

	// ToBeDetached
	if source.ToBeDetached != nil {
		toBeDetached := *source.ToBeDetached
		disk.ToBeDetached = &toBeDetached
	} else {
		disk.ToBeDetached = nil
	}

	// Vhd
	if source.Vhd != nil {
		var vhd VirtualHardDisk_Spec
		err := vhd.AssignPropertiesFromVirtualHardDiskSpec(source.Vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskSpec() to populate field Vhd")
		}
		disk.Vhd = &vhd
	} else {
		disk.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if source.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *source.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		disk.WriteAcceleratorEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDataDiskSpec populates the provided destination DataDisk_Spec from our DataDisk_Spec
func (disk *DataDisk_Spec) AssignPropertiesToDataDiskSpec(destination *v1alpha1api20201201storage.DataDisk_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// CreateOption
	createOption := string(disk.CreateOption)
	destination.CreateOption = &createOption

	// DetachOption
	if disk.DetachOption != nil {
		detachOption := string(*disk.DetachOption)
		destination.DetachOption = &detachOption
	} else {
		destination.DetachOption = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// Image
	if disk.Image != nil {
		var image v1alpha1api20201201storage.VirtualHardDisk_Spec
		err := disk.Image.AssignPropertiesToVirtualHardDiskSpec(&image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskSpec() to populate field Image")
		}
		destination.Image = &image
	} else {
		destination.Image = nil
	}

	// Lun
	lun := disk.Lun
	destination.Lun = &lun

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk v1alpha1api20201201storage.ManagedDiskParameters_Spec
		err := disk.ManagedDisk.AssignPropertiesToManagedDiskParametersSpec(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedDiskParametersSpec() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(disk.Name)

	// ToBeDetached
	if disk.ToBeDetached != nil {
		toBeDetached := *disk.ToBeDetached
		destination.ToBeDetached = &toBeDetached
	} else {
		destination.ToBeDetached = nil
	}

	// Vhd
	if disk.Vhd != nil {
		var vhd v1alpha1api20201201storage.VirtualHardDisk_Spec
		err := disk.Vhd.AssignPropertiesToVirtualHardDiskSpec(&vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskSpec() to populate field Vhd")
		}
		destination.Vhd = &vhd
	} else {
		destination.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if disk.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *disk.WriteAcceleratorEnabled
		destination.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		destination.WriteAcceleratorEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DataDisk_Status struct {
	//Caching: Specifies the caching requirements.
	//Possible values are:
	//None
	//ReadOnly
	//ReadWrite
	//Default: None for Standard storage. ReadOnly for Premium storage
	Caching *Caching_Status `json:"caching,omitempty"`

	// +kubebuilder:validation:Required
	//CreateOption: Specifies how the virtual machine should be created.
	//Possible values are:
	//Attach \u2013 This value is used when you are using a specialized disk to create
	//the virtual machine.
	//FromImage \u2013 This value is used when you are using an image to create the
	//virtual machine. If you are using a platform image, you also use the
	//imageReference element described above. If you are using a marketplace image,
	//you  also use the plan element previously described.
	CreateOption CreateOption_Status `json:"createOption"`

	//DetachOption: Specifies the detach behavior to be used while detaching a disk or
	//which is already in the process of detachment from the virtual machine.
	//Supported values: ForceDetach.
	//detachOption: ForceDetach is applicable only for managed data disks. If a
	//previous detachment attempt of the data disk did not complete due to an
	//unexpected failure from the virtual machine and the disk is still not released
	//then use force-detach as a last resort option to detach the disk forcibly from
	//the VM. All writes might not have been flushed when using this detach behavior.
	//This feature is still in preview mode and is not supported for
	//VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to
	//'true' along with setting detachOption: 'ForceDetach'.
	DetachOption *DetachOption_Status `json:"detachOption,omitempty"`

	//DiskIOPSReadWrite: Specifies the Read-Write IOPS for the managed disk when
	//StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM
	//disks. Can be updated only via updates to the VirtualMachine Scale Set.
	DiskIOPSReadWrite *int `json:"diskIOPSReadWrite,omitempty"`

	//DiskMBpsReadWrite: Specifies the bandwidth in MB per second for the managed disk
	//when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine
	//ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale
	//Set.
	DiskMBpsReadWrite *int `json:"diskMBpsReadWrite,omitempty"`

	//DiskSizeGB: Specifies the size of an empty data disk in gigabytes. This element
	//can be used to overwrite the size of the disk in a virtual machine image.
	//This value cannot be larger than 1023 GB
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//Image: The source user image virtual hard disk. The virtual hard disk will be
	//copied before being attached to the virtual machine. If SourceImage is provided,
	//the destination virtual hard drive must not exist.
	Image *VirtualHardDisk_Status `json:"image,omitempty"`

	// +kubebuilder:validation:Required
	//Lun: Specifies the logical unit number of the data disk. This value is used to
	//identify data disks within the VM and therefore must be unique for each data
	//disk attached to a VM.
	Lun int `json:"lun"`

	//ManagedDisk: The managed disk parameters.
	ManagedDisk *ManagedDiskParameters_Status `json:"managedDisk,omitempty"`

	//Name: The disk name.
	Name *string `json:"name,omitempty"`

	//ToBeDetached: Specifies whether the data disk is in process of detachment from
	//the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool `json:"toBeDetached,omitempty"`

	//Vhd: The virtual hard disk.
	Vhd *VirtualHardDisk_Status `json:"vhd,omitempty"`

	//WriteAcceleratorEnabled: Specifies whether writeAccelerator should be enabled or
	//disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &DataDisk_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *DataDisk_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DataDisk_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *DataDisk_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DataDisk_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DataDisk_StatusARM, got %T", armInput)
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘CreateOption’:
	disk.CreateOption = typedInput.CreateOption

	// Set property ‘DetachOption’:
	if typedInput.DetachOption != nil {
		detachOption := *typedInput.DetachOption
		disk.DetachOption = &detachOption
	}

	// Set property ‘DiskIOPSReadWrite’:
	if typedInput.DiskIOPSReadWrite != nil {
		diskIOPSReadWrite := *typedInput.DiskIOPSReadWrite
		disk.DiskIOPSReadWrite = &diskIOPSReadWrite
	}

	// Set property ‘DiskMBpsReadWrite’:
	if typedInput.DiskMBpsReadWrite != nil {
		diskMBpsReadWrite := *typedInput.DiskMBpsReadWrite
		disk.DiskMBpsReadWrite = &diskMBpsReadWrite
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘Image’:
	if typedInput.Image != nil {
		var image1 VirtualHardDisk_Status
		err := image1.PopulateFromARM(owner, *typedInput.Image)
		if err != nil {
			return err
		}
		image := image1
		disk.Image = &image
	}

	// Set property ‘Lun’:
	disk.Lun = typedInput.Lun

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 ManagedDiskParameters_Status
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		disk.Name = &name
	}

	// Set property ‘ToBeDetached’:
	if typedInput.ToBeDetached != nil {
		toBeDetached := *typedInput.ToBeDetached
		disk.ToBeDetached = &toBeDetached
	}

	// Set property ‘Vhd’:
	if typedInput.Vhd != nil {
		var vhd1 VirtualHardDisk_Status
		err := vhd1.PopulateFromARM(owner, *typedInput.Vhd)
		if err != nil {
			return err
		}
		vhd := vhd1
		disk.Vhd = &vhd
	}

	// Set property ‘WriteAcceleratorEnabled’:
	if typedInput.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *typedInput.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromDataDiskStatus populates our DataDisk_Status from the provided source DataDisk_Status
func (disk *DataDisk_Status) AssignPropertiesFromDataDiskStatus(source *v1alpha1api20201201storage.DataDisk_Status) error {

	// Caching
	if source.Caching != nil {
		caching := Caching_Status(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// CreateOption
	if source.CreateOption != nil {
		disk.CreateOption = CreateOption_Status(*source.CreateOption)
	} else {
		disk.CreateOption = ""
	}

	// DetachOption
	if source.DetachOption != nil {
		detachOption := DetachOption_Status(*source.DetachOption)
		disk.DetachOption = &detachOption
	} else {
		disk.DetachOption = nil
	}

	// DiskIOPSReadWrite
	disk.DiskIOPSReadWrite = genruntime.ClonePointerToInt(source.DiskIOPSReadWrite)

	// DiskMBpsReadWrite
	disk.DiskMBpsReadWrite = genruntime.ClonePointerToInt(source.DiskMBpsReadWrite)

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// Image
	if source.Image != nil {
		var image VirtualHardDisk_Status
		err := image.AssignPropertiesFromVirtualHardDiskStatus(source.Image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskStatus() to populate field Image")
		}
		disk.Image = &image
	} else {
		disk.Image = nil
	}

	// Lun
	disk.Lun = genruntime.GetOptionalIntValue(source.Lun)

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk ManagedDiskParameters_Status
		err := managedDisk.AssignPropertiesFromManagedDiskParametersStatus(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedDiskParametersStatus() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// Name
	disk.Name = genruntime.ClonePointerToString(source.Name)

	// ToBeDetached
	if source.ToBeDetached != nil {
		toBeDetached := *source.ToBeDetached
		disk.ToBeDetached = &toBeDetached
	} else {
		disk.ToBeDetached = nil
	}

	// Vhd
	if source.Vhd != nil {
		var vhd VirtualHardDisk_Status
		err := vhd.AssignPropertiesFromVirtualHardDiskStatus(source.Vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskStatus() to populate field Vhd")
		}
		disk.Vhd = &vhd
	} else {
		disk.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if source.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *source.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		disk.WriteAcceleratorEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDataDiskStatus populates the provided destination DataDisk_Status from our DataDisk_Status
func (disk *DataDisk_Status) AssignPropertiesToDataDiskStatus(destination *v1alpha1api20201201storage.DataDisk_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// CreateOption
	createOption := string(disk.CreateOption)
	destination.CreateOption = &createOption

	// DetachOption
	if disk.DetachOption != nil {
		detachOption := string(*disk.DetachOption)
		destination.DetachOption = &detachOption
	} else {
		destination.DetachOption = nil
	}

	// DiskIOPSReadWrite
	destination.DiskIOPSReadWrite = genruntime.ClonePointerToInt(disk.DiskIOPSReadWrite)

	// DiskMBpsReadWrite
	destination.DiskMBpsReadWrite = genruntime.ClonePointerToInt(disk.DiskMBpsReadWrite)

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// Image
	if disk.Image != nil {
		var image v1alpha1api20201201storage.VirtualHardDisk_Status
		err := disk.Image.AssignPropertiesToVirtualHardDiskStatus(&image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskStatus() to populate field Image")
		}
		destination.Image = &image
	} else {
		destination.Image = nil
	}

	// Lun
	lun := disk.Lun
	destination.Lun = &lun

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk v1alpha1api20201201storage.ManagedDiskParameters_Status
		err := disk.ManagedDisk.AssignPropertiesToManagedDiskParametersStatus(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedDiskParametersStatus() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(disk.Name)

	// ToBeDetached
	if disk.ToBeDetached != nil {
		toBeDetached := *disk.ToBeDetached
		destination.ToBeDetached = &toBeDetached
	} else {
		destination.ToBeDetached = nil
	}

	// Vhd
	if disk.Vhd != nil {
		var vhd v1alpha1api20201201storage.VirtualHardDisk_Status
		err := disk.Vhd.AssignPropertiesToVirtualHardDiskStatus(&vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskStatus() to populate field Vhd")
		}
		destination.Vhd = &vhd
	} else {
		destination.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if disk.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *disk.WriteAcceleratorEnabled
		destination.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		destination.WriteAcceleratorEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DiskInstanceView_Status struct {
	//EncryptionSettings: Specifies the encryption settings for the OS Disk.
	//Minimum api-version: 2015-06-15
	EncryptionSettings []DiskEncryptionSettings_Status `json:"encryptionSettings,omitempty"`

	//Name: The disk name.
	Name *string `json:"name,omitempty"`

	//Statuses: The resource status information.
	Statuses []InstanceViewStatus_Status `json:"statuses,omitempty"`
}

var _ genruntime.FromARMConverter = &DiskInstanceView_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *DiskInstanceView_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskInstanceView_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *DiskInstanceView_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiskInstanceView_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskInstanceView_StatusARM, got %T", armInput)
	}

	// Set property ‘EncryptionSettings’:
	for _, item := range typedInput.EncryptionSettings {
		var item1 DiskEncryptionSettings_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.EncryptionSettings = append(view.EncryptionSettings, item1)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		view.Name = &name
	}

	// Set property ‘Statuses’:
	for _, item := range typedInput.Statuses {
		var item1 InstanceViewStatus_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Statuses = append(view.Statuses, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskInstanceViewStatus populates our DiskInstanceView_Status from the provided source DiskInstanceView_Status
func (view *DiskInstanceView_Status) AssignPropertiesFromDiskInstanceViewStatus(source *v1alpha1api20201201storage.DiskInstanceView_Status) error {

	// EncryptionSettings
	if source.EncryptionSettings != nil {
		encryptionSettingList := make([]DiskEncryptionSettings_Status, len(source.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range source.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting DiskEncryptionSettings_Status
			err := encryptionSetting.AssignPropertiesFromDiskEncryptionSettingsStatus(&encryptionSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDiskEncryptionSettingsStatus() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		view.EncryptionSettings = encryptionSettingList
	} else {
		view.EncryptionSettings = nil
	}

	// Name
	view.Name = genruntime.ClonePointerToString(source.Name)

	// Statuses
	if source.Statuses != nil {
		statusList := make([]InstanceViewStatus_Status, len(source.Statuses))
		for statusIndex, statusItem := range source.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status InstanceViewStatus_Status
			err := status.AssignPropertiesFromInstanceViewStatusStatus(&statusItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		view.Statuses = statusList
	} else {
		view.Statuses = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiskInstanceViewStatus populates the provided destination DiskInstanceView_Status from our DiskInstanceView_Status
func (view *DiskInstanceView_Status) AssignPropertiesToDiskInstanceViewStatus(destination *v1alpha1api20201201storage.DiskInstanceView_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EncryptionSettings
	if view.EncryptionSettings != nil {
		encryptionSettingList := make([]v1alpha1api20201201storage.DiskEncryptionSettings_Status, len(view.EncryptionSettings))
		for encryptionSettingIndex, encryptionSettingItem := range view.EncryptionSettings {
			// Shadow the loop variable to avoid aliasing
			encryptionSettingItem := encryptionSettingItem
			var encryptionSetting v1alpha1api20201201storage.DiskEncryptionSettings_Status
			err := encryptionSettingItem.AssignPropertiesToDiskEncryptionSettingsStatus(&encryptionSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDiskEncryptionSettingsStatus() to populate field EncryptionSettings")
			}
			encryptionSettingList[encryptionSettingIndex] = encryptionSetting
		}
		destination.EncryptionSettings = encryptionSettingList
	} else {
		destination.EncryptionSettings = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(view.Name)

	// Statuses
	if view.Statuses != nil {
		statusList := make([]v1alpha1api20201201storage.InstanceViewStatus_Status, len(view.Statuses))
		for statusIndex, statusItem := range view.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status v1alpha1api20201201storage.InstanceViewStatus_Status
			err := statusItem.AssignPropertiesToInstanceViewStatusStatus(&status)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		destination.Statuses = statusList
	} else {
		destination.Statuses = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Basic_A0","Basic_A1","Basic_A2","Basic_A3","Basic_A4","Standard_A0","Standard_A1","Standard_A10","Standard_A11","Standard_A1_v2","Standard_A2","Standard_A2m_v2","Standard_A2_v2","Standard_A3","Standard_A4","Standard_A4m_v2","Standard_A4_v2","Standard_A5","Standard_A6","Standard_A7","Standard_A8","Standard_A8m_v2","Standard_A8_v2","Standard_A9","Standard_B1ms","Standard_B1s","Standard_B2ms","Standard_B2s","Standard_B4ms","Standard_B8ms","Standard_D1","Standard_D11","Standard_D11_v2","Standard_D12","Standard_D12_v2","Standard_D13","Standard_D13_v2","Standard_D14","Standard_D14_v2","Standard_D15_v2","Standard_D16s_v3","Standard_D16_v3","Standard_D1_v2","Standard_D2","Standard_D2s_v3","Standard_D2_v2","Standard_D2_v3","Standard_D3","Standard_D32s_v3","Standard_D32_v3","Standard_D3_v2","Standard_D4","Standard_D4s_v3","Standard_D4_v2","Standard_D4_v3","Standard_D5_v2","Standard_D64s_v3","Standard_D64_v3","Standard_D8s_v3","Standard_D8_v3","Standard_DS1","Standard_DS11","Standard_DS11_v2","Standard_DS12","Standard_DS12_v2","Standard_DS13","Standard_DS13-2_v2","Standard_DS13-4_v2","Standard_DS13_v2","Standard_DS14","Standard_DS14-4_v2","Standard_DS14-8_v2","Standard_DS14_v2","Standard_DS15_v2","Standard_DS1_v2","Standard_DS2","Standard_DS2_v2","Standard_DS3","Standard_DS3_v2","Standard_DS4","Standard_DS4_v2","Standard_DS5_v2","Standard_E16s_v3","Standard_E16_v3","Standard_E2s_v3","Standard_E2_v3","Standard_E32-16_v3","Standard_E32-8s_v3","Standard_E32s_v3","Standard_E32_v3","Standard_E4s_v3","Standard_E4_v3","Standard_E64-16s_v3","Standard_E64-32s_v3","Standard_E64s_v3","Standard_E64_v3","Standard_E8s_v3","Standard_E8_v3","Standard_F1","Standard_F16","Standard_F16s","Standard_F16s_v2","Standard_F1s","Standard_F2","Standard_F2s","Standard_F2s_v2","Standard_F32s_v2","Standard_F4","Standard_F4s","Standard_F4s_v2","Standard_F64s_v2","Standard_F72s_v2","Standard_F8","Standard_F8s","Standard_F8s_v2","Standard_G1","Standard_G2","Standard_G3","Standard_G4","Standard_G5","Standard_GS1","Standard_GS2","Standard_GS3","Standard_GS4","Standard_GS4-4","Standard_GS4-8","Standard_GS5","Standard_GS5-16","Standard_GS5-8","Standard_H16","Standard_H16m","Standard_H16mr","Standard_H16r","Standard_H8","Standard_H8m","Standard_L16s","Standard_L32s","Standard_L4s","Standard_L8s","Standard_M128-32ms","Standard_M128-64ms","Standard_M128ms","Standard_M128s","Standard_M64-16ms","Standard_M64-32ms","Standard_M64ms","Standard_M64s","Standard_NC12","Standard_NC12s_v2","Standard_NC12s_v3","Standard_NC24","Standard_NC24r","Standard_NC24rs_v2","Standard_NC24rs_v3","Standard_NC24s_v2","Standard_NC24s_v3","Standard_NC6","Standard_NC6s_v2","Standard_NC6s_v3","Standard_ND12s","Standard_ND24rs","Standard_ND24s","Standard_ND6s","Standard_NV12","Standard_NV24","Standard_NV6"}
type HardwareProfileSpecVmSize string

const (
	HardwareProfileSpecVmSizeBasicA0          = HardwareProfileSpecVmSize("Basic_A0")
	HardwareProfileSpecVmSizeBasicA1          = HardwareProfileSpecVmSize("Basic_A1")
	HardwareProfileSpecVmSizeBasicA2          = HardwareProfileSpecVmSize("Basic_A2")
	HardwareProfileSpecVmSizeBasicA3          = HardwareProfileSpecVmSize("Basic_A3")
	HardwareProfileSpecVmSizeBasicA4          = HardwareProfileSpecVmSize("Basic_A4")
	HardwareProfileSpecVmSizeStandardA0       = HardwareProfileSpecVmSize("Standard_A0")
	HardwareProfileSpecVmSizeStandardA1       = HardwareProfileSpecVmSize("Standard_A1")
	HardwareProfileSpecVmSizeStandardA10      = HardwareProfileSpecVmSize("Standard_A10")
	HardwareProfileSpecVmSizeStandardA11      = HardwareProfileSpecVmSize("Standard_A11")
	HardwareProfileSpecVmSizeStandardA1V2     = HardwareProfileSpecVmSize("Standard_A1_v2")
	HardwareProfileSpecVmSizeStandardA2       = HardwareProfileSpecVmSize("Standard_A2")
	HardwareProfileSpecVmSizeStandardA2MV2    = HardwareProfileSpecVmSize("Standard_A2m_v2")
	HardwareProfileSpecVmSizeStandardA2V2     = HardwareProfileSpecVmSize("Standard_A2_v2")
	HardwareProfileSpecVmSizeStandardA3       = HardwareProfileSpecVmSize("Standard_A3")
	HardwareProfileSpecVmSizeStandardA4       = HardwareProfileSpecVmSize("Standard_A4")
	HardwareProfileSpecVmSizeStandardA4MV2    = HardwareProfileSpecVmSize("Standard_A4m_v2")
	HardwareProfileSpecVmSizeStandardA4V2     = HardwareProfileSpecVmSize("Standard_A4_v2")
	HardwareProfileSpecVmSizeStandardA5       = HardwareProfileSpecVmSize("Standard_A5")
	HardwareProfileSpecVmSizeStandardA6       = HardwareProfileSpecVmSize("Standard_A6")
	HardwareProfileSpecVmSizeStandardA7       = HardwareProfileSpecVmSize("Standard_A7")
	HardwareProfileSpecVmSizeStandardA8       = HardwareProfileSpecVmSize("Standard_A8")
	HardwareProfileSpecVmSizeStandardA8MV2    = HardwareProfileSpecVmSize("Standard_A8m_v2")
	HardwareProfileSpecVmSizeStandardA8V2     = HardwareProfileSpecVmSize("Standard_A8_v2")
	HardwareProfileSpecVmSizeStandardA9       = HardwareProfileSpecVmSize("Standard_A9")
	HardwareProfileSpecVmSizeStandardB1Ms     = HardwareProfileSpecVmSize("Standard_B1ms")
	HardwareProfileSpecVmSizeStandardB1S      = HardwareProfileSpecVmSize("Standard_B1s")
	HardwareProfileSpecVmSizeStandardB2Ms     = HardwareProfileSpecVmSize("Standard_B2ms")
	HardwareProfileSpecVmSizeStandardB2S      = HardwareProfileSpecVmSize("Standard_B2s")
	HardwareProfileSpecVmSizeStandardB4Ms     = HardwareProfileSpecVmSize("Standard_B4ms")
	HardwareProfileSpecVmSizeStandardB8Ms     = HardwareProfileSpecVmSize("Standard_B8ms")
	HardwareProfileSpecVmSizeStandardD1       = HardwareProfileSpecVmSize("Standard_D1")
	HardwareProfileSpecVmSizeStandardD11      = HardwareProfileSpecVmSize("Standard_D11")
	HardwareProfileSpecVmSizeStandardD11V2    = HardwareProfileSpecVmSize("Standard_D11_v2")
	HardwareProfileSpecVmSizeStandardD12      = HardwareProfileSpecVmSize("Standard_D12")
	HardwareProfileSpecVmSizeStandardD12V2    = HardwareProfileSpecVmSize("Standard_D12_v2")
	HardwareProfileSpecVmSizeStandardD13      = HardwareProfileSpecVmSize("Standard_D13")
	HardwareProfileSpecVmSizeStandardD13V2    = HardwareProfileSpecVmSize("Standard_D13_v2")
	HardwareProfileSpecVmSizeStandardD14      = HardwareProfileSpecVmSize("Standard_D14")
	HardwareProfileSpecVmSizeStandardD14V2    = HardwareProfileSpecVmSize("Standard_D14_v2")
	HardwareProfileSpecVmSizeStandardD15V2    = HardwareProfileSpecVmSize("Standard_D15_v2")
	HardwareProfileSpecVmSizeStandardD16SV3   = HardwareProfileSpecVmSize("Standard_D16s_v3")
	HardwareProfileSpecVmSizeStandardD16V3    = HardwareProfileSpecVmSize("Standard_D16_v3")
	HardwareProfileSpecVmSizeStandardD1V2     = HardwareProfileSpecVmSize("Standard_D1_v2")
	HardwareProfileSpecVmSizeStandardD2       = HardwareProfileSpecVmSize("Standard_D2")
	HardwareProfileSpecVmSizeStandardD2SV3    = HardwareProfileSpecVmSize("Standard_D2s_v3")
	HardwareProfileSpecVmSizeStandardD2V2     = HardwareProfileSpecVmSize("Standard_D2_v2")
	HardwareProfileSpecVmSizeStandardD2V3     = HardwareProfileSpecVmSize("Standard_D2_v3")
	HardwareProfileSpecVmSizeStandardD3       = HardwareProfileSpecVmSize("Standard_D3")
	HardwareProfileSpecVmSizeStandardD32SV3   = HardwareProfileSpecVmSize("Standard_D32s_v3")
	HardwareProfileSpecVmSizeStandardD32V3    = HardwareProfileSpecVmSize("Standard_D32_v3")
	HardwareProfileSpecVmSizeStandardD3V2     = HardwareProfileSpecVmSize("Standard_D3_v2")
	HardwareProfileSpecVmSizeStandardD4       = HardwareProfileSpecVmSize("Standard_D4")
	HardwareProfileSpecVmSizeStandardD4SV3    = HardwareProfileSpecVmSize("Standard_D4s_v3")
	HardwareProfileSpecVmSizeStandardD4V2     = HardwareProfileSpecVmSize("Standard_D4_v2")
	HardwareProfileSpecVmSizeStandardD4V3     = HardwareProfileSpecVmSize("Standard_D4_v3")
	HardwareProfileSpecVmSizeStandardD5V2     = HardwareProfileSpecVmSize("Standard_D5_v2")
	HardwareProfileSpecVmSizeStandardD64SV3   = HardwareProfileSpecVmSize("Standard_D64s_v3")
	HardwareProfileSpecVmSizeStandardD64V3    = HardwareProfileSpecVmSize("Standard_D64_v3")
	HardwareProfileSpecVmSizeStandardD8SV3    = HardwareProfileSpecVmSize("Standard_D8s_v3")
	HardwareProfileSpecVmSizeStandardD8V3     = HardwareProfileSpecVmSize("Standard_D8_v3")
	HardwareProfileSpecVmSizeStandardDS1      = HardwareProfileSpecVmSize("Standard_DS1")
	HardwareProfileSpecVmSizeStandardDS11     = HardwareProfileSpecVmSize("Standard_DS11")
	HardwareProfileSpecVmSizeStandardDS11V2   = HardwareProfileSpecVmSize("Standard_DS11_v2")
	HardwareProfileSpecVmSizeStandardDS12     = HardwareProfileSpecVmSize("Standard_DS12")
	HardwareProfileSpecVmSizeStandardDS12V2   = HardwareProfileSpecVmSize("Standard_DS12_v2")
	HardwareProfileSpecVmSizeStandardDS13     = HardwareProfileSpecVmSize("Standard_DS13")
	HardwareProfileSpecVmSizeStandardDS132V2  = HardwareProfileSpecVmSize("Standard_DS13-2_v2")
	HardwareProfileSpecVmSizeStandardDS134V2  = HardwareProfileSpecVmSize("Standard_DS13-4_v2")
	HardwareProfileSpecVmSizeStandardDS13V2   = HardwareProfileSpecVmSize("Standard_DS13_v2")
	HardwareProfileSpecVmSizeStandardDS14     = HardwareProfileSpecVmSize("Standard_DS14")
	HardwareProfileSpecVmSizeStandardDS144V2  = HardwareProfileSpecVmSize("Standard_DS14-4_v2")
	HardwareProfileSpecVmSizeStandardDS148V2  = HardwareProfileSpecVmSize("Standard_DS14-8_v2")
	HardwareProfileSpecVmSizeStandardDS14V2   = HardwareProfileSpecVmSize("Standard_DS14_v2")
	HardwareProfileSpecVmSizeStandardDS15V2   = HardwareProfileSpecVmSize("Standard_DS15_v2")
	HardwareProfileSpecVmSizeStandardDS1V2    = HardwareProfileSpecVmSize("Standard_DS1_v2")
	HardwareProfileSpecVmSizeStandardDS2      = HardwareProfileSpecVmSize("Standard_DS2")
	HardwareProfileSpecVmSizeStandardDS2V2    = HardwareProfileSpecVmSize("Standard_DS2_v2")
	HardwareProfileSpecVmSizeStandardDS3      = HardwareProfileSpecVmSize("Standard_DS3")
	HardwareProfileSpecVmSizeStandardDS3V2    = HardwareProfileSpecVmSize("Standard_DS3_v2")
	HardwareProfileSpecVmSizeStandardDS4      = HardwareProfileSpecVmSize("Standard_DS4")
	HardwareProfileSpecVmSizeStandardDS4V2    = HardwareProfileSpecVmSize("Standard_DS4_v2")
	HardwareProfileSpecVmSizeStandardDS5V2    = HardwareProfileSpecVmSize("Standard_DS5_v2")
	HardwareProfileSpecVmSizeStandardE16SV3   = HardwareProfileSpecVmSize("Standard_E16s_v3")
	HardwareProfileSpecVmSizeStandardE16V3    = HardwareProfileSpecVmSize("Standard_E16_v3")
	HardwareProfileSpecVmSizeStandardE2SV3    = HardwareProfileSpecVmSize("Standard_E2s_v3")
	HardwareProfileSpecVmSizeStandardE2V3     = HardwareProfileSpecVmSize("Standard_E2_v3")
	HardwareProfileSpecVmSizeStandardE3216V3  = HardwareProfileSpecVmSize("Standard_E32-16_v3")
	HardwareProfileSpecVmSizeStandardE328SV3  = HardwareProfileSpecVmSize("Standard_E32-8s_v3")
	HardwareProfileSpecVmSizeStandardE32SV3   = HardwareProfileSpecVmSize("Standard_E32s_v3")
	HardwareProfileSpecVmSizeStandardE32V3    = HardwareProfileSpecVmSize("Standard_E32_v3")
	HardwareProfileSpecVmSizeStandardE4SV3    = HardwareProfileSpecVmSize("Standard_E4s_v3")
	HardwareProfileSpecVmSizeStandardE4V3     = HardwareProfileSpecVmSize("Standard_E4_v3")
	HardwareProfileSpecVmSizeStandardE6416SV3 = HardwareProfileSpecVmSize("Standard_E64-16s_v3")
	HardwareProfileSpecVmSizeStandardE6432SV3 = HardwareProfileSpecVmSize("Standard_E64-32s_v3")
	HardwareProfileSpecVmSizeStandardE64SV3   = HardwareProfileSpecVmSize("Standard_E64s_v3")
	HardwareProfileSpecVmSizeStandardE64V3    = HardwareProfileSpecVmSize("Standard_E64_v3")
	HardwareProfileSpecVmSizeStandardE8SV3    = HardwareProfileSpecVmSize("Standard_E8s_v3")
	HardwareProfileSpecVmSizeStandardE8V3     = HardwareProfileSpecVmSize("Standard_E8_v3")
	HardwareProfileSpecVmSizeStandardF1       = HardwareProfileSpecVmSize("Standard_F1")
	HardwareProfileSpecVmSizeStandardF16      = HardwareProfileSpecVmSize("Standard_F16")
	HardwareProfileSpecVmSizeStandardF16S     = HardwareProfileSpecVmSize("Standard_F16s")
	HardwareProfileSpecVmSizeStandardF16SV2   = HardwareProfileSpecVmSize("Standard_F16s_v2")
	HardwareProfileSpecVmSizeStandardF1S      = HardwareProfileSpecVmSize("Standard_F1s")
	HardwareProfileSpecVmSizeStandardF2       = HardwareProfileSpecVmSize("Standard_F2")
	HardwareProfileSpecVmSizeStandardF2S      = HardwareProfileSpecVmSize("Standard_F2s")
	HardwareProfileSpecVmSizeStandardF2SV2    = HardwareProfileSpecVmSize("Standard_F2s_v2")
	HardwareProfileSpecVmSizeStandardF32SV2   = HardwareProfileSpecVmSize("Standard_F32s_v2")
	HardwareProfileSpecVmSizeStandardF4       = HardwareProfileSpecVmSize("Standard_F4")
	HardwareProfileSpecVmSizeStandardF4S      = HardwareProfileSpecVmSize("Standard_F4s")
	HardwareProfileSpecVmSizeStandardF4SV2    = HardwareProfileSpecVmSize("Standard_F4s_v2")
	HardwareProfileSpecVmSizeStandardF64SV2   = HardwareProfileSpecVmSize("Standard_F64s_v2")
	HardwareProfileSpecVmSizeStandardF72SV2   = HardwareProfileSpecVmSize("Standard_F72s_v2")
	HardwareProfileSpecVmSizeStandardF8       = HardwareProfileSpecVmSize("Standard_F8")
	HardwareProfileSpecVmSizeStandardF8S      = HardwareProfileSpecVmSize("Standard_F8s")
	HardwareProfileSpecVmSizeStandardF8SV2    = HardwareProfileSpecVmSize("Standard_F8s_v2")
	HardwareProfileSpecVmSizeStandardG1       = HardwareProfileSpecVmSize("Standard_G1")
	HardwareProfileSpecVmSizeStandardG2       = HardwareProfileSpecVmSize("Standard_G2")
	HardwareProfileSpecVmSizeStandardG3       = HardwareProfileSpecVmSize("Standard_G3")
	HardwareProfileSpecVmSizeStandardG4       = HardwareProfileSpecVmSize("Standard_G4")
	HardwareProfileSpecVmSizeStandardG5       = HardwareProfileSpecVmSize("Standard_G5")
	HardwareProfileSpecVmSizeStandardGS1      = HardwareProfileSpecVmSize("Standard_GS1")
	HardwareProfileSpecVmSizeStandardGS2      = HardwareProfileSpecVmSize("Standard_GS2")
	HardwareProfileSpecVmSizeStandardGS3      = HardwareProfileSpecVmSize("Standard_GS3")
	HardwareProfileSpecVmSizeStandardGS4      = HardwareProfileSpecVmSize("Standard_GS4")
	HardwareProfileSpecVmSizeStandardGS44     = HardwareProfileSpecVmSize("Standard_GS4-4")
	HardwareProfileSpecVmSizeStandardGS48     = HardwareProfileSpecVmSize("Standard_GS4-8")
	HardwareProfileSpecVmSizeStandardGS5      = HardwareProfileSpecVmSize("Standard_GS5")
	HardwareProfileSpecVmSizeStandardGS516    = HardwareProfileSpecVmSize("Standard_GS5-16")
	HardwareProfileSpecVmSizeStandardGS58     = HardwareProfileSpecVmSize("Standard_GS5-8")
	HardwareProfileSpecVmSizeStandardH16      = HardwareProfileSpecVmSize("Standard_H16")
	HardwareProfileSpecVmSizeStandardH16M     = HardwareProfileSpecVmSize("Standard_H16m")
	HardwareProfileSpecVmSizeStandardH16Mr    = HardwareProfileSpecVmSize("Standard_H16mr")
	HardwareProfileSpecVmSizeStandardH16R     = HardwareProfileSpecVmSize("Standard_H16r")
	HardwareProfileSpecVmSizeStandardH8       = HardwareProfileSpecVmSize("Standard_H8")
	HardwareProfileSpecVmSizeStandardH8M      = HardwareProfileSpecVmSize("Standard_H8m")
	HardwareProfileSpecVmSizeStandardL16S     = HardwareProfileSpecVmSize("Standard_L16s")
	HardwareProfileSpecVmSizeStandardL32S     = HardwareProfileSpecVmSize("Standard_L32s")
	HardwareProfileSpecVmSizeStandardL4S      = HardwareProfileSpecVmSize("Standard_L4s")
	HardwareProfileSpecVmSizeStandardL8S      = HardwareProfileSpecVmSize("Standard_L8s")
	HardwareProfileSpecVmSizeStandardM12832Ms = HardwareProfileSpecVmSize("Standard_M128-32ms")
	HardwareProfileSpecVmSizeStandardM12864Ms = HardwareProfileSpecVmSize("Standard_M128-64ms")
	HardwareProfileSpecVmSizeStandardM128Ms   = HardwareProfileSpecVmSize("Standard_M128ms")
	HardwareProfileSpecVmSizeStandardM128S    = HardwareProfileSpecVmSize("Standard_M128s")
	HardwareProfileSpecVmSizeStandardM6416Ms  = HardwareProfileSpecVmSize("Standard_M64-16ms")
	HardwareProfileSpecVmSizeStandardM6432Ms  = HardwareProfileSpecVmSize("Standard_M64-32ms")
	HardwareProfileSpecVmSizeStandardM64Ms    = HardwareProfileSpecVmSize("Standard_M64ms")
	HardwareProfileSpecVmSizeStandardM64S     = HardwareProfileSpecVmSize("Standard_M64s")
	HardwareProfileSpecVmSizeStandardNC12     = HardwareProfileSpecVmSize("Standard_NC12")
	HardwareProfileSpecVmSizeStandardNC12SV2  = HardwareProfileSpecVmSize("Standard_NC12s_v2")
	HardwareProfileSpecVmSizeStandardNC12SV3  = HardwareProfileSpecVmSize("Standard_NC12s_v3")
	HardwareProfileSpecVmSizeStandardNC24     = HardwareProfileSpecVmSize("Standard_NC24")
	HardwareProfileSpecVmSizeStandardNC24R    = HardwareProfileSpecVmSize("Standard_NC24r")
	HardwareProfileSpecVmSizeStandardNC24RsV2 = HardwareProfileSpecVmSize("Standard_NC24rs_v2")
	HardwareProfileSpecVmSizeStandardNC24RsV3 = HardwareProfileSpecVmSize("Standard_NC24rs_v3")
	HardwareProfileSpecVmSizeStandardNC24SV2  = HardwareProfileSpecVmSize("Standard_NC24s_v2")
	HardwareProfileSpecVmSizeStandardNC24SV3  = HardwareProfileSpecVmSize("Standard_NC24s_v3")
	HardwareProfileSpecVmSizeStandardNC6      = HardwareProfileSpecVmSize("Standard_NC6")
	HardwareProfileSpecVmSizeStandardNC6SV2   = HardwareProfileSpecVmSize("Standard_NC6s_v2")
	HardwareProfileSpecVmSizeStandardNC6SV3   = HardwareProfileSpecVmSize("Standard_NC6s_v3")
	HardwareProfileSpecVmSizeStandardND12S    = HardwareProfileSpecVmSize("Standard_ND12s")
	HardwareProfileSpecVmSizeStandardND24Rs   = HardwareProfileSpecVmSize("Standard_ND24rs")
	HardwareProfileSpecVmSizeStandardND24S    = HardwareProfileSpecVmSize("Standard_ND24s")
	HardwareProfileSpecVmSizeStandardND6S     = HardwareProfileSpecVmSize("Standard_ND6s")
	HardwareProfileSpecVmSizeStandardNV12     = HardwareProfileSpecVmSize("Standard_NV12")
	HardwareProfileSpecVmSizeStandardNV24     = HardwareProfileSpecVmSize("Standard_NV24")
	HardwareProfileSpecVmSizeStandardNV6      = HardwareProfileSpecVmSize("Standard_NV6")
)

type HardwareProfileStatusVmSize string

const (
	HardwareProfileStatusVmSizeBasicA0          = HardwareProfileStatusVmSize("Basic_A0")
	HardwareProfileStatusVmSizeBasicA1          = HardwareProfileStatusVmSize("Basic_A1")
	HardwareProfileStatusVmSizeBasicA2          = HardwareProfileStatusVmSize("Basic_A2")
	HardwareProfileStatusVmSizeBasicA3          = HardwareProfileStatusVmSize("Basic_A3")
	HardwareProfileStatusVmSizeBasicA4          = HardwareProfileStatusVmSize("Basic_A4")
	HardwareProfileStatusVmSizeStandardA0       = HardwareProfileStatusVmSize("Standard_A0")
	HardwareProfileStatusVmSizeStandardA1       = HardwareProfileStatusVmSize("Standard_A1")
	HardwareProfileStatusVmSizeStandardA10      = HardwareProfileStatusVmSize("Standard_A10")
	HardwareProfileStatusVmSizeStandardA11      = HardwareProfileStatusVmSize("Standard_A11")
	HardwareProfileStatusVmSizeStandardA1V2     = HardwareProfileStatusVmSize("Standard_A1_v2")
	HardwareProfileStatusVmSizeStandardA2       = HardwareProfileStatusVmSize("Standard_A2")
	HardwareProfileStatusVmSizeStandardA2MV2    = HardwareProfileStatusVmSize("Standard_A2m_v2")
	HardwareProfileStatusVmSizeStandardA2V2     = HardwareProfileStatusVmSize("Standard_A2_v2")
	HardwareProfileStatusVmSizeStandardA3       = HardwareProfileStatusVmSize("Standard_A3")
	HardwareProfileStatusVmSizeStandardA4       = HardwareProfileStatusVmSize("Standard_A4")
	HardwareProfileStatusVmSizeStandardA4MV2    = HardwareProfileStatusVmSize("Standard_A4m_v2")
	HardwareProfileStatusVmSizeStandardA4V2     = HardwareProfileStatusVmSize("Standard_A4_v2")
	HardwareProfileStatusVmSizeStandardA5       = HardwareProfileStatusVmSize("Standard_A5")
	HardwareProfileStatusVmSizeStandardA6       = HardwareProfileStatusVmSize("Standard_A6")
	HardwareProfileStatusVmSizeStandardA7       = HardwareProfileStatusVmSize("Standard_A7")
	HardwareProfileStatusVmSizeStandardA8       = HardwareProfileStatusVmSize("Standard_A8")
	HardwareProfileStatusVmSizeStandardA8MV2    = HardwareProfileStatusVmSize("Standard_A8m_v2")
	HardwareProfileStatusVmSizeStandardA8V2     = HardwareProfileStatusVmSize("Standard_A8_v2")
	HardwareProfileStatusVmSizeStandardA9       = HardwareProfileStatusVmSize("Standard_A9")
	HardwareProfileStatusVmSizeStandardB1Ms     = HardwareProfileStatusVmSize("Standard_B1ms")
	HardwareProfileStatusVmSizeStandardB1S      = HardwareProfileStatusVmSize("Standard_B1s")
	HardwareProfileStatusVmSizeStandardB2Ms     = HardwareProfileStatusVmSize("Standard_B2ms")
	HardwareProfileStatusVmSizeStandardB2S      = HardwareProfileStatusVmSize("Standard_B2s")
	HardwareProfileStatusVmSizeStandardB4Ms     = HardwareProfileStatusVmSize("Standard_B4ms")
	HardwareProfileStatusVmSizeStandardB8Ms     = HardwareProfileStatusVmSize("Standard_B8ms")
	HardwareProfileStatusVmSizeStandardD1       = HardwareProfileStatusVmSize("Standard_D1")
	HardwareProfileStatusVmSizeStandardD11      = HardwareProfileStatusVmSize("Standard_D11")
	HardwareProfileStatusVmSizeStandardD11V2    = HardwareProfileStatusVmSize("Standard_D11_v2")
	HardwareProfileStatusVmSizeStandardD12      = HardwareProfileStatusVmSize("Standard_D12")
	HardwareProfileStatusVmSizeStandardD12V2    = HardwareProfileStatusVmSize("Standard_D12_v2")
	HardwareProfileStatusVmSizeStandardD13      = HardwareProfileStatusVmSize("Standard_D13")
	HardwareProfileStatusVmSizeStandardD13V2    = HardwareProfileStatusVmSize("Standard_D13_v2")
	HardwareProfileStatusVmSizeStandardD14      = HardwareProfileStatusVmSize("Standard_D14")
	HardwareProfileStatusVmSizeStandardD14V2    = HardwareProfileStatusVmSize("Standard_D14_v2")
	HardwareProfileStatusVmSizeStandardD15V2    = HardwareProfileStatusVmSize("Standard_D15_v2")
	HardwareProfileStatusVmSizeStandardD16SV3   = HardwareProfileStatusVmSize("Standard_D16s_v3")
	HardwareProfileStatusVmSizeStandardD16V3    = HardwareProfileStatusVmSize("Standard_D16_v3")
	HardwareProfileStatusVmSizeStandardD1V2     = HardwareProfileStatusVmSize("Standard_D1_v2")
	HardwareProfileStatusVmSizeStandardD2       = HardwareProfileStatusVmSize("Standard_D2")
	HardwareProfileStatusVmSizeStandardD2SV3    = HardwareProfileStatusVmSize("Standard_D2s_v3")
	HardwareProfileStatusVmSizeStandardD2V2     = HardwareProfileStatusVmSize("Standard_D2_v2")
	HardwareProfileStatusVmSizeStandardD2V3     = HardwareProfileStatusVmSize("Standard_D2_v3")
	HardwareProfileStatusVmSizeStandardD3       = HardwareProfileStatusVmSize("Standard_D3")
	HardwareProfileStatusVmSizeStandardD32SV3   = HardwareProfileStatusVmSize("Standard_D32s_v3")
	HardwareProfileStatusVmSizeStandardD32V3    = HardwareProfileStatusVmSize("Standard_D32_v3")
	HardwareProfileStatusVmSizeStandardD3V2     = HardwareProfileStatusVmSize("Standard_D3_v2")
	HardwareProfileStatusVmSizeStandardD4       = HardwareProfileStatusVmSize("Standard_D4")
	HardwareProfileStatusVmSizeStandardD4SV3    = HardwareProfileStatusVmSize("Standard_D4s_v3")
	HardwareProfileStatusVmSizeStandardD4V2     = HardwareProfileStatusVmSize("Standard_D4_v2")
	HardwareProfileStatusVmSizeStandardD4V3     = HardwareProfileStatusVmSize("Standard_D4_v3")
	HardwareProfileStatusVmSizeStandardD5V2     = HardwareProfileStatusVmSize("Standard_D5_v2")
	HardwareProfileStatusVmSizeStandardD64SV3   = HardwareProfileStatusVmSize("Standard_D64s_v3")
	HardwareProfileStatusVmSizeStandardD64V3    = HardwareProfileStatusVmSize("Standard_D64_v3")
	HardwareProfileStatusVmSizeStandardD8SV3    = HardwareProfileStatusVmSize("Standard_D8s_v3")
	HardwareProfileStatusVmSizeStandardD8V3     = HardwareProfileStatusVmSize("Standard_D8_v3")
	HardwareProfileStatusVmSizeStandardDS1      = HardwareProfileStatusVmSize("Standard_DS1")
	HardwareProfileStatusVmSizeStandardDS11     = HardwareProfileStatusVmSize("Standard_DS11")
	HardwareProfileStatusVmSizeStandardDS11V2   = HardwareProfileStatusVmSize("Standard_DS11_v2")
	HardwareProfileStatusVmSizeStandardDS12     = HardwareProfileStatusVmSize("Standard_DS12")
	HardwareProfileStatusVmSizeStandardDS12V2   = HardwareProfileStatusVmSize("Standard_DS12_v2")
	HardwareProfileStatusVmSizeStandardDS13     = HardwareProfileStatusVmSize("Standard_DS13")
	HardwareProfileStatusVmSizeStandardDS132V2  = HardwareProfileStatusVmSize("Standard_DS13-2_v2")
	HardwareProfileStatusVmSizeStandardDS134V2  = HardwareProfileStatusVmSize("Standard_DS13-4_v2")
	HardwareProfileStatusVmSizeStandardDS13V2   = HardwareProfileStatusVmSize("Standard_DS13_v2")
	HardwareProfileStatusVmSizeStandardDS14     = HardwareProfileStatusVmSize("Standard_DS14")
	HardwareProfileStatusVmSizeStandardDS144V2  = HardwareProfileStatusVmSize("Standard_DS14-4_v2")
	HardwareProfileStatusVmSizeStandardDS148V2  = HardwareProfileStatusVmSize("Standard_DS14-8_v2")
	HardwareProfileStatusVmSizeStandardDS14V2   = HardwareProfileStatusVmSize("Standard_DS14_v2")
	HardwareProfileStatusVmSizeStandardDS15V2   = HardwareProfileStatusVmSize("Standard_DS15_v2")
	HardwareProfileStatusVmSizeStandardDS1V2    = HardwareProfileStatusVmSize("Standard_DS1_v2")
	HardwareProfileStatusVmSizeStandardDS2      = HardwareProfileStatusVmSize("Standard_DS2")
	HardwareProfileStatusVmSizeStandardDS2V2    = HardwareProfileStatusVmSize("Standard_DS2_v2")
	HardwareProfileStatusVmSizeStandardDS3      = HardwareProfileStatusVmSize("Standard_DS3")
	HardwareProfileStatusVmSizeStandardDS3V2    = HardwareProfileStatusVmSize("Standard_DS3_v2")
	HardwareProfileStatusVmSizeStandardDS4      = HardwareProfileStatusVmSize("Standard_DS4")
	HardwareProfileStatusVmSizeStandardDS4V2    = HardwareProfileStatusVmSize("Standard_DS4_v2")
	HardwareProfileStatusVmSizeStandardDS5V2    = HardwareProfileStatusVmSize("Standard_DS5_v2")
	HardwareProfileStatusVmSizeStandardE16SV3   = HardwareProfileStatusVmSize("Standard_E16s_v3")
	HardwareProfileStatusVmSizeStandardE16V3    = HardwareProfileStatusVmSize("Standard_E16_v3")
	HardwareProfileStatusVmSizeStandardE2SV3    = HardwareProfileStatusVmSize("Standard_E2s_v3")
	HardwareProfileStatusVmSizeStandardE2V3     = HardwareProfileStatusVmSize("Standard_E2_v3")
	HardwareProfileStatusVmSizeStandardE3216V3  = HardwareProfileStatusVmSize("Standard_E32-16_v3")
	HardwareProfileStatusVmSizeStandardE328SV3  = HardwareProfileStatusVmSize("Standard_E32-8s_v3")
	HardwareProfileStatusVmSizeStandardE32SV3   = HardwareProfileStatusVmSize("Standard_E32s_v3")
	HardwareProfileStatusVmSizeStandardE32V3    = HardwareProfileStatusVmSize("Standard_E32_v3")
	HardwareProfileStatusVmSizeStandardE4SV3    = HardwareProfileStatusVmSize("Standard_E4s_v3")
	HardwareProfileStatusVmSizeStandardE4V3     = HardwareProfileStatusVmSize("Standard_E4_v3")
	HardwareProfileStatusVmSizeStandardE6416SV3 = HardwareProfileStatusVmSize("Standard_E64-16s_v3")
	HardwareProfileStatusVmSizeStandardE6432SV3 = HardwareProfileStatusVmSize("Standard_E64-32s_v3")
	HardwareProfileStatusVmSizeStandardE64SV3   = HardwareProfileStatusVmSize("Standard_E64s_v3")
	HardwareProfileStatusVmSizeStandardE64V3    = HardwareProfileStatusVmSize("Standard_E64_v3")
	HardwareProfileStatusVmSizeStandardE8SV3    = HardwareProfileStatusVmSize("Standard_E8s_v3")
	HardwareProfileStatusVmSizeStandardE8V3     = HardwareProfileStatusVmSize("Standard_E8_v3")
	HardwareProfileStatusVmSizeStandardF1       = HardwareProfileStatusVmSize("Standard_F1")
	HardwareProfileStatusVmSizeStandardF16      = HardwareProfileStatusVmSize("Standard_F16")
	HardwareProfileStatusVmSizeStandardF16S     = HardwareProfileStatusVmSize("Standard_F16s")
	HardwareProfileStatusVmSizeStandardF16SV2   = HardwareProfileStatusVmSize("Standard_F16s_v2")
	HardwareProfileStatusVmSizeStandardF1S      = HardwareProfileStatusVmSize("Standard_F1s")
	HardwareProfileStatusVmSizeStandardF2       = HardwareProfileStatusVmSize("Standard_F2")
	HardwareProfileStatusVmSizeStandardF2S      = HardwareProfileStatusVmSize("Standard_F2s")
	HardwareProfileStatusVmSizeStandardF2SV2    = HardwareProfileStatusVmSize("Standard_F2s_v2")
	HardwareProfileStatusVmSizeStandardF32SV2   = HardwareProfileStatusVmSize("Standard_F32s_v2")
	HardwareProfileStatusVmSizeStandardF4       = HardwareProfileStatusVmSize("Standard_F4")
	HardwareProfileStatusVmSizeStandardF4S      = HardwareProfileStatusVmSize("Standard_F4s")
	HardwareProfileStatusVmSizeStandardF4SV2    = HardwareProfileStatusVmSize("Standard_F4s_v2")
	HardwareProfileStatusVmSizeStandardF64SV2   = HardwareProfileStatusVmSize("Standard_F64s_v2")
	HardwareProfileStatusVmSizeStandardF72SV2   = HardwareProfileStatusVmSize("Standard_F72s_v2")
	HardwareProfileStatusVmSizeStandardF8       = HardwareProfileStatusVmSize("Standard_F8")
	HardwareProfileStatusVmSizeStandardF8S      = HardwareProfileStatusVmSize("Standard_F8s")
	HardwareProfileStatusVmSizeStandardF8SV2    = HardwareProfileStatusVmSize("Standard_F8s_v2")
	HardwareProfileStatusVmSizeStandardG1       = HardwareProfileStatusVmSize("Standard_G1")
	HardwareProfileStatusVmSizeStandardG2       = HardwareProfileStatusVmSize("Standard_G2")
	HardwareProfileStatusVmSizeStandardG3       = HardwareProfileStatusVmSize("Standard_G3")
	HardwareProfileStatusVmSizeStandardG4       = HardwareProfileStatusVmSize("Standard_G4")
	HardwareProfileStatusVmSizeStandardG5       = HardwareProfileStatusVmSize("Standard_G5")
	HardwareProfileStatusVmSizeStandardGS1      = HardwareProfileStatusVmSize("Standard_GS1")
	HardwareProfileStatusVmSizeStandardGS2      = HardwareProfileStatusVmSize("Standard_GS2")
	HardwareProfileStatusVmSizeStandardGS3      = HardwareProfileStatusVmSize("Standard_GS3")
	HardwareProfileStatusVmSizeStandardGS4      = HardwareProfileStatusVmSize("Standard_GS4")
	HardwareProfileStatusVmSizeStandardGS44     = HardwareProfileStatusVmSize("Standard_GS4-4")
	HardwareProfileStatusVmSizeStandardGS48     = HardwareProfileStatusVmSize("Standard_GS4-8")
	HardwareProfileStatusVmSizeStandardGS5      = HardwareProfileStatusVmSize("Standard_GS5")
	HardwareProfileStatusVmSizeStandardGS516    = HardwareProfileStatusVmSize("Standard_GS5-16")
	HardwareProfileStatusVmSizeStandardGS58     = HardwareProfileStatusVmSize("Standard_GS5-8")
	HardwareProfileStatusVmSizeStandardH16      = HardwareProfileStatusVmSize("Standard_H16")
	HardwareProfileStatusVmSizeStandardH16M     = HardwareProfileStatusVmSize("Standard_H16m")
	HardwareProfileStatusVmSizeStandardH16Mr    = HardwareProfileStatusVmSize("Standard_H16mr")
	HardwareProfileStatusVmSizeStandardH16R     = HardwareProfileStatusVmSize("Standard_H16r")
	HardwareProfileStatusVmSizeStandardH8       = HardwareProfileStatusVmSize("Standard_H8")
	HardwareProfileStatusVmSizeStandardH8M      = HardwareProfileStatusVmSize("Standard_H8m")
	HardwareProfileStatusVmSizeStandardL16S     = HardwareProfileStatusVmSize("Standard_L16s")
	HardwareProfileStatusVmSizeStandardL32S     = HardwareProfileStatusVmSize("Standard_L32s")
	HardwareProfileStatusVmSizeStandardL4S      = HardwareProfileStatusVmSize("Standard_L4s")
	HardwareProfileStatusVmSizeStandardL8S      = HardwareProfileStatusVmSize("Standard_L8s")
	HardwareProfileStatusVmSizeStandardM12832Ms = HardwareProfileStatusVmSize("Standard_M128-32ms")
	HardwareProfileStatusVmSizeStandardM12864Ms = HardwareProfileStatusVmSize("Standard_M128-64ms")
	HardwareProfileStatusVmSizeStandardM128Ms   = HardwareProfileStatusVmSize("Standard_M128ms")
	HardwareProfileStatusVmSizeStandardM128S    = HardwareProfileStatusVmSize("Standard_M128s")
	HardwareProfileStatusVmSizeStandardM6416Ms  = HardwareProfileStatusVmSize("Standard_M64-16ms")
	HardwareProfileStatusVmSizeStandardM6432Ms  = HardwareProfileStatusVmSize("Standard_M64-32ms")
	HardwareProfileStatusVmSizeStandardM64Ms    = HardwareProfileStatusVmSize("Standard_M64ms")
	HardwareProfileStatusVmSizeStandardM64S     = HardwareProfileStatusVmSize("Standard_M64s")
	HardwareProfileStatusVmSizeStandardNC12     = HardwareProfileStatusVmSize("Standard_NC12")
	HardwareProfileStatusVmSizeStandardNC12SV2  = HardwareProfileStatusVmSize("Standard_NC12s_v2")
	HardwareProfileStatusVmSizeStandardNC12SV3  = HardwareProfileStatusVmSize("Standard_NC12s_v3")
	HardwareProfileStatusVmSizeStandardNC24     = HardwareProfileStatusVmSize("Standard_NC24")
	HardwareProfileStatusVmSizeStandardNC24R    = HardwareProfileStatusVmSize("Standard_NC24r")
	HardwareProfileStatusVmSizeStandardNC24RsV2 = HardwareProfileStatusVmSize("Standard_NC24rs_v2")
	HardwareProfileStatusVmSizeStandardNC24RsV3 = HardwareProfileStatusVmSize("Standard_NC24rs_v3")
	HardwareProfileStatusVmSizeStandardNC24SV2  = HardwareProfileStatusVmSize("Standard_NC24s_v2")
	HardwareProfileStatusVmSizeStandardNC24SV3  = HardwareProfileStatusVmSize("Standard_NC24s_v3")
	HardwareProfileStatusVmSizeStandardNC6      = HardwareProfileStatusVmSize("Standard_NC6")
	HardwareProfileStatusVmSizeStandardNC6SV2   = HardwareProfileStatusVmSize("Standard_NC6s_v2")
	HardwareProfileStatusVmSizeStandardNC6SV3   = HardwareProfileStatusVmSize("Standard_NC6s_v3")
	HardwareProfileStatusVmSizeStandardND12S    = HardwareProfileStatusVmSize("Standard_ND12s")
	HardwareProfileStatusVmSizeStandardND24Rs   = HardwareProfileStatusVmSize("Standard_ND24rs")
	HardwareProfileStatusVmSizeStandardND24S    = HardwareProfileStatusVmSize("Standard_ND24s")
	HardwareProfileStatusVmSizeStandardND6S     = HardwareProfileStatusVmSize("Standard_ND6s")
	HardwareProfileStatusVmSizeStandardNV12     = HardwareProfileStatusVmSize("Standard_NV12")
	HardwareProfileStatusVmSizeStandardNV24     = HardwareProfileStatusVmSize("Standard_NV24")
	HardwareProfileStatusVmSizeStandardNV6      = HardwareProfileStatusVmSize("Standard_NV6")
)

type ImageReference_Spec struct {
	//Offer: Specifies the offer of the platform image or marketplace image used to
	//create the virtual machine.
	Offer *string `json:"offer,omitempty"`

	//Publisher: The image publisher.
	Publisher *string `json:"publisher,omitempty"`

	//Reference: Resource Id
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//Sku: The image SKU.
	Sku *string `json:"sku,omitempty"`

	//Version: Specifies the version of the platform image or marketplace image used
	//to create the virtual machine. The allowed formats are Major.Minor.Build or
	//'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use
	//the latest version of an image available at deploy time. Even if you use
	//'latest', the VM image will not automatically update after deploy time even if a
	//new version becomes available.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &ImageReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *ImageReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result ImageReference_SpecARM

	// Set property ‘Id’:
	if reference.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*reference.Reference)
		if err != nil {
			return nil, err
		}
		reference1 := referenceARMID
		result.Id = &reference1
	}

	// Set property ‘Offer’:
	if reference.Offer != nil {
		offer := *reference.Offer
		result.Offer = &offer
	}

	// Set property ‘Publisher’:
	if reference.Publisher != nil {
		publisher := *reference.Publisher
		result.Publisher = &publisher
	}

	// Set property ‘Sku’:
	if reference.Sku != nil {
		sku := *reference.Sku
		result.Sku = &sku
	}

	// Set property ‘Version’:
	if reference.Version != nil {
		version := *reference.Version
		result.Version = &version
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ImageReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ImageReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageReference_SpecARM, got %T", armInput)
	}

	// Set property ‘Offer’:
	if typedInput.Offer != nil {
		offer := *typedInput.Offer
		reference.Offer = &offer
	}

	// Set property ‘Publisher’:
	if typedInput.Publisher != nil {
		publisher := *typedInput.Publisher
		reference.Publisher = &publisher
	}

	// no assignment for property ‘Reference’

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		sku := *typedInput.Sku
		reference.Sku = &sku
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		reference.Version = &version
	}

	// No error
	return nil
}

// AssignPropertiesFromImageReferenceSpec populates our ImageReference_Spec from the provided source ImageReference_Spec
func (reference *ImageReference_Spec) AssignPropertiesFromImageReferenceSpec(source *v1alpha1api20201201storage.ImageReference_Spec) error {

	// Offer
	reference.Offer = genruntime.ClonePointerToString(source.Offer)

	// Publisher
	reference.Publisher = genruntime.ClonePointerToString(source.Publisher)

	// Reference
	if source.Reference != nil {
		referenceTemp := source.Reference.Copy()
		reference.Reference = &referenceTemp
	} else {
		reference.Reference = nil
	}

	// Sku
	reference.Sku = genruntime.ClonePointerToString(source.Sku)

	// Version
	reference.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToImageReferenceSpec populates the provided destination ImageReference_Spec from our ImageReference_Spec
func (reference *ImageReference_Spec) AssignPropertiesToImageReferenceSpec(destination *v1alpha1api20201201storage.ImageReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Offer
	destination.Offer = genruntime.ClonePointerToString(reference.Offer)

	// Publisher
	destination.Publisher = genruntime.ClonePointerToString(reference.Publisher)

	// Reference
	if reference.Reference != nil {
		referenceTemp := reference.Reference.Copy()
		destination.Reference = &referenceTemp
	} else {
		destination.Reference = nil
	}

	// Sku
	destination.Sku = genruntime.ClonePointerToString(reference.Sku)

	// Version
	destination.Version = genruntime.ClonePointerToString(reference.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ImageReference_Status struct {
	//ExactVersion: Specifies in decimal numbers, the version of platform image or
	//marketplace image used to create the virtual machine. This readonly field
	//differs from 'version', only if the value specified in 'version' field is
	//'latest'.
	ExactVersion *string `json:"exactVersion,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Offer: Specifies the offer of the platform image or marketplace image used to
	//create the virtual machine.
	Offer *string `json:"offer,omitempty"`

	//Publisher: The image publisher.
	Publisher *string `json:"publisher,omitempty"`

	//Sku: The image SKU.
	Sku *string `json:"sku,omitempty"`

	//Version: Specifies the version of the platform image or marketplace image used
	//to create the virtual machine. The allowed formats are Major.Minor.Build or
	//'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use
	//the latest version of an image available at deploy time. Even if you use
	//'latest', the VM image will not automatically update after deploy time even if a
	//new version becomes available.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.FromARMConverter = &ImageReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ImageReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ImageReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageReference_StatusARM, got %T", armInput)
	}

	// Set property ‘ExactVersion’:
	if typedInput.ExactVersion != nil {
		exactVersion := *typedInput.ExactVersion
		reference.ExactVersion = &exactVersion
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		reference.Id = &id
	}

	// Set property ‘Offer’:
	if typedInput.Offer != nil {
		offer := *typedInput.Offer
		reference.Offer = &offer
	}

	// Set property ‘Publisher’:
	if typedInput.Publisher != nil {
		publisher := *typedInput.Publisher
		reference.Publisher = &publisher
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		sku := *typedInput.Sku
		reference.Sku = &sku
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		reference.Version = &version
	}

	// No error
	return nil
}

// AssignPropertiesFromImageReferenceStatus populates our ImageReference_Status from the provided source ImageReference_Status
func (reference *ImageReference_Status) AssignPropertiesFromImageReferenceStatus(source *v1alpha1api20201201storage.ImageReference_Status) error {

	// ExactVersion
	reference.ExactVersion = genruntime.ClonePointerToString(source.ExactVersion)

	// Id
	reference.Id = genruntime.ClonePointerToString(source.Id)

	// Offer
	reference.Offer = genruntime.ClonePointerToString(source.Offer)

	// Publisher
	reference.Publisher = genruntime.ClonePointerToString(source.Publisher)

	// Sku
	reference.Sku = genruntime.ClonePointerToString(source.Sku)

	// Version
	reference.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToImageReferenceStatus populates the provided destination ImageReference_Status from our ImageReference_Status
func (reference *ImageReference_Status) AssignPropertiesToImageReferenceStatus(destination *v1alpha1api20201201storage.ImageReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExactVersion
	destination.ExactVersion = genruntime.ClonePointerToString(reference.ExactVersion)

	// Id
	destination.Id = genruntime.ClonePointerToString(reference.Id)

	// Offer
	destination.Offer = genruntime.ClonePointerToString(reference.Offer)

	// Publisher
	destination.Publisher = genruntime.ClonePointerToString(reference.Publisher)

	// Sku
	destination.Sku = genruntime.ClonePointerToString(reference.Sku)

	// Version
	destination.Version = genruntime.ClonePointerToString(reference.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type InstanceViewStatus_Status struct {
	//Code: The status code.
	Code *string `json:"code,omitempty"`

	//DisplayStatus: The short localizable label for the status.
	DisplayStatus *string `json:"displayStatus,omitempty"`

	//Level: The level code.
	Level *InstanceViewStatusStatusLevel `json:"level,omitempty"`

	//Message: The detailed status message, including for alerts and error messages.
	Message *string `json:"message,omitempty"`

	//Time: The time of the status.
	Time *string `json:"time,omitempty"`
}

var _ genruntime.FromARMConverter = &InstanceViewStatus_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *InstanceViewStatus_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &InstanceViewStatus_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *InstanceViewStatus_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(InstanceViewStatus_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected InstanceViewStatus_StatusARM, got %T", armInput)
	}

	// Set property ‘Code’:
	if typedInput.Code != nil {
		code := *typedInput.Code
		view.Code = &code
	}

	// Set property ‘DisplayStatus’:
	if typedInput.DisplayStatus != nil {
		displayStatus := *typedInput.DisplayStatus
		view.DisplayStatus = &displayStatus
	}

	// Set property ‘Level’:
	if typedInput.Level != nil {
		level := *typedInput.Level
		view.Level = &level
	}

	// Set property ‘Message’:
	if typedInput.Message != nil {
		message := *typedInput.Message
		view.Message = &message
	}

	// Set property ‘Time’:
	if typedInput.Time != nil {
		time := *typedInput.Time
		view.Time = &time
	}

	// No error
	return nil
}

// AssignPropertiesFromInstanceViewStatusStatus populates our InstanceViewStatus_Status from the provided source InstanceViewStatus_Status
func (view *InstanceViewStatus_Status) AssignPropertiesFromInstanceViewStatusStatus(source *v1alpha1api20201201storage.InstanceViewStatus_Status) error {

	// Code
	view.Code = genruntime.ClonePointerToString(source.Code)

	// DisplayStatus
	view.DisplayStatus = genruntime.ClonePointerToString(source.DisplayStatus)

	// Level
	if source.Level != nil {
		level := InstanceViewStatusStatusLevel(*source.Level)
		view.Level = &level
	} else {
		view.Level = nil
	}

	// Message
	view.Message = genruntime.ClonePointerToString(source.Message)

	// Time
	view.Time = genruntime.ClonePointerToString(source.Time)

	// No error
	return nil
}

// AssignPropertiesToInstanceViewStatusStatus populates the provided destination InstanceViewStatus_Status from our InstanceViewStatus_Status
func (view *InstanceViewStatus_Status) AssignPropertiesToInstanceViewStatusStatus(destination *v1alpha1api20201201storage.InstanceViewStatus_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Code
	destination.Code = genruntime.ClonePointerToString(view.Code)

	// DisplayStatus
	destination.DisplayStatus = genruntime.ClonePointerToString(view.DisplayStatus)

	// Level
	if view.Level != nil {
		level := string(*view.Level)
		destination.Level = &level
	} else {
		destination.Level = nil
	}

	// Message
	destination.Message = genruntime.ClonePointerToString(view.Message)

	// Time
	destination.Time = genruntime.ClonePointerToString(view.Time)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LinuxConfiguration_Spec struct {
	//DisablePasswordAuthentication: Specifies whether password authentication should
	//be disabled.
	DisablePasswordAuthentication *bool `json:"disablePasswordAuthentication,omitempty"`

	//PatchSettings: [Preview Feature] Specifies settings related to VM Guest Patching
	//on Linux.
	PatchSettings *LinuxPatchSettings_Spec `json:"patchSettings,omitempty"`

	//ProvisionVMAgent: Indicates whether virtual machine agent should be provisioned
	//on the virtual machine.
	//When this property is not specified in the request body, default behavior is to
	//set it to true.  This will ensure that VM Agent is installed on the VM so that
	//extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	//Ssh: Specifies the ssh key configuration for a Linux OS.
	Ssh *SshConfiguration_Spec `json:"ssh,omitempty"`
}

var _ genruntime.ARMTransformer = &LinuxConfiguration_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *LinuxConfiguration_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result LinuxConfiguration_SpecARM

	// Set property ‘DisablePasswordAuthentication’:
	if configuration.DisablePasswordAuthentication != nil {
		disablePasswordAuthentication := *configuration.DisablePasswordAuthentication
		result.DisablePasswordAuthentication = &disablePasswordAuthentication
	}

	// Set property ‘PatchSettings’:
	if configuration.PatchSettings != nil {
		patchSettingsARM, err := (*configuration.PatchSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		patchSettings := patchSettingsARM.(LinuxPatchSettings_SpecARM)
		result.PatchSettings = &patchSettings
	}

	// Set property ‘ProvisionVMAgent’:
	if configuration.ProvisionVMAgent != nil {
		provisionVMAgent := *configuration.ProvisionVMAgent
		result.ProvisionVMAgent = &provisionVMAgent
	}

	// Set property ‘Ssh’:
	if configuration.Ssh != nil {
		sshARM, err := (*configuration.Ssh).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ssh := sshARM.(SshConfiguration_SpecARM)
		result.Ssh = &ssh
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *LinuxConfiguration_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxConfiguration_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *LinuxConfiguration_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxConfiguration_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxConfiguration_SpecARM, got %T", armInput)
	}

	// Set property ‘DisablePasswordAuthentication’:
	if typedInput.DisablePasswordAuthentication != nil {
		disablePasswordAuthentication := *typedInput.DisablePasswordAuthentication
		configuration.DisablePasswordAuthentication = &disablePasswordAuthentication
	}

	// Set property ‘PatchSettings’:
	if typedInput.PatchSettings != nil {
		var patchSettings1 LinuxPatchSettings_Spec
		err := patchSettings1.PopulateFromARM(owner, *typedInput.PatchSettings)
		if err != nil {
			return err
		}
		patchSettings := patchSettings1
		configuration.PatchSettings = &patchSettings
	}

	// Set property ‘ProvisionVMAgent’:
	if typedInput.ProvisionVMAgent != nil {
		provisionVMAgent := *typedInput.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	}

	// Set property ‘Ssh’:
	if typedInput.Ssh != nil {
		var ssh1 SshConfiguration_Spec
		err := ssh1.PopulateFromARM(owner, *typedInput.Ssh)
		if err != nil {
			return err
		}
		ssh := ssh1
		configuration.Ssh = &ssh
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxConfigurationSpec populates our LinuxConfiguration_Spec from the provided source LinuxConfiguration_Spec
func (configuration *LinuxConfiguration_Spec) AssignPropertiesFromLinuxConfigurationSpec(source *v1alpha1api20201201storage.LinuxConfiguration_Spec) error {

	// DisablePasswordAuthentication
	if source.DisablePasswordAuthentication != nil {
		disablePasswordAuthentication := *source.DisablePasswordAuthentication
		configuration.DisablePasswordAuthentication = &disablePasswordAuthentication
	} else {
		configuration.DisablePasswordAuthentication = nil
	}

	// PatchSettings
	if source.PatchSettings != nil {
		var patchSetting LinuxPatchSettings_Spec
		err := patchSetting.AssignPropertiesFromLinuxPatchSettingsSpec(source.PatchSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLinuxPatchSettingsSpec() to populate field PatchSettings")
		}
		configuration.PatchSettings = &patchSetting
	} else {
		configuration.PatchSettings = nil
	}

	// ProvisionVMAgent
	if source.ProvisionVMAgent != nil {
		provisionVMAgent := *source.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	} else {
		configuration.ProvisionVMAgent = nil
	}

	// Ssh
	if source.Ssh != nil {
		var ssh SshConfiguration_Spec
		err := ssh.AssignPropertiesFromSshConfigurationSpec(source.Ssh)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSshConfigurationSpec() to populate field Ssh")
		}
		configuration.Ssh = &ssh
	} else {
		configuration.Ssh = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLinuxConfigurationSpec populates the provided destination LinuxConfiguration_Spec from our LinuxConfiguration_Spec
func (configuration *LinuxConfiguration_Spec) AssignPropertiesToLinuxConfigurationSpec(destination *v1alpha1api20201201storage.LinuxConfiguration_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DisablePasswordAuthentication
	if configuration.DisablePasswordAuthentication != nil {
		disablePasswordAuthentication := *configuration.DisablePasswordAuthentication
		destination.DisablePasswordAuthentication = &disablePasswordAuthentication
	} else {
		destination.DisablePasswordAuthentication = nil
	}

	// PatchSettings
	if configuration.PatchSettings != nil {
		var patchSetting v1alpha1api20201201storage.LinuxPatchSettings_Spec
		err := configuration.PatchSettings.AssignPropertiesToLinuxPatchSettingsSpec(&patchSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLinuxPatchSettingsSpec() to populate field PatchSettings")
		}
		destination.PatchSettings = &patchSetting
	} else {
		destination.PatchSettings = nil
	}

	// ProvisionVMAgent
	if configuration.ProvisionVMAgent != nil {
		provisionVMAgent := *configuration.ProvisionVMAgent
		destination.ProvisionVMAgent = &provisionVMAgent
	} else {
		destination.ProvisionVMAgent = nil
	}

	// Ssh
	if configuration.Ssh != nil {
		var ssh v1alpha1api20201201storage.SshConfiguration_Spec
		err := configuration.Ssh.AssignPropertiesToSshConfigurationSpec(&ssh)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSshConfigurationSpec() to populate field Ssh")
		}
		destination.Ssh = &ssh
	} else {
		destination.Ssh = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LinuxConfiguration_Status struct {
	//DisablePasswordAuthentication: Specifies whether password authentication should
	//be disabled.
	DisablePasswordAuthentication *bool `json:"disablePasswordAuthentication,omitempty"`

	//PatchSettings: [Preview Feature] Specifies settings related to VM Guest Patching
	//on Linux.
	PatchSettings *LinuxPatchSettings_Status `json:"patchSettings,omitempty"`

	//ProvisionVMAgent: Indicates whether virtual machine agent should be provisioned
	//on the virtual machine.
	//When this property is not specified in the request body, default behavior is to
	//set it to true.  This will ensure that VM Agent is installed on the VM so that
	//extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	//Ssh: Specifies the ssh key configuration for a Linux OS.
	Ssh *SshConfiguration_Status `json:"ssh,omitempty"`
}

var _ genruntime.FromARMConverter = &LinuxConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *LinuxConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *LinuxConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘DisablePasswordAuthentication’:
	if typedInput.DisablePasswordAuthentication != nil {
		disablePasswordAuthentication := *typedInput.DisablePasswordAuthentication
		configuration.DisablePasswordAuthentication = &disablePasswordAuthentication
	}

	// Set property ‘PatchSettings’:
	if typedInput.PatchSettings != nil {
		var patchSettings1 LinuxPatchSettings_Status
		err := patchSettings1.PopulateFromARM(owner, *typedInput.PatchSettings)
		if err != nil {
			return err
		}
		patchSettings := patchSettings1
		configuration.PatchSettings = &patchSettings
	}

	// Set property ‘ProvisionVMAgent’:
	if typedInput.ProvisionVMAgent != nil {
		provisionVMAgent := *typedInput.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	}

	// Set property ‘Ssh’:
	if typedInput.Ssh != nil {
		var ssh1 SshConfiguration_Status
		err := ssh1.PopulateFromARM(owner, *typedInput.Ssh)
		if err != nil {
			return err
		}
		ssh := ssh1
		configuration.Ssh = &ssh
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxConfigurationStatus populates our LinuxConfiguration_Status from the provided source LinuxConfiguration_Status
func (configuration *LinuxConfiguration_Status) AssignPropertiesFromLinuxConfigurationStatus(source *v1alpha1api20201201storage.LinuxConfiguration_Status) error {

	// DisablePasswordAuthentication
	if source.DisablePasswordAuthentication != nil {
		disablePasswordAuthentication := *source.DisablePasswordAuthentication
		configuration.DisablePasswordAuthentication = &disablePasswordAuthentication
	} else {
		configuration.DisablePasswordAuthentication = nil
	}

	// PatchSettings
	if source.PatchSettings != nil {
		var patchSetting LinuxPatchSettings_Status
		err := patchSetting.AssignPropertiesFromLinuxPatchSettingsStatus(source.PatchSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLinuxPatchSettingsStatus() to populate field PatchSettings")
		}
		configuration.PatchSettings = &patchSetting
	} else {
		configuration.PatchSettings = nil
	}

	// ProvisionVMAgent
	if source.ProvisionVMAgent != nil {
		provisionVMAgent := *source.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	} else {
		configuration.ProvisionVMAgent = nil
	}

	// Ssh
	if source.Ssh != nil {
		var ssh SshConfiguration_Status
		err := ssh.AssignPropertiesFromSshConfigurationStatus(source.Ssh)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSshConfigurationStatus() to populate field Ssh")
		}
		configuration.Ssh = &ssh
	} else {
		configuration.Ssh = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLinuxConfigurationStatus populates the provided destination LinuxConfiguration_Status from our LinuxConfiguration_Status
func (configuration *LinuxConfiguration_Status) AssignPropertiesToLinuxConfigurationStatus(destination *v1alpha1api20201201storage.LinuxConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DisablePasswordAuthentication
	if configuration.DisablePasswordAuthentication != nil {
		disablePasswordAuthentication := *configuration.DisablePasswordAuthentication
		destination.DisablePasswordAuthentication = &disablePasswordAuthentication
	} else {
		destination.DisablePasswordAuthentication = nil
	}

	// PatchSettings
	if configuration.PatchSettings != nil {
		var patchSetting v1alpha1api20201201storage.LinuxPatchSettings_Status
		err := configuration.PatchSettings.AssignPropertiesToLinuxPatchSettingsStatus(&patchSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLinuxPatchSettingsStatus() to populate field PatchSettings")
		}
		destination.PatchSettings = &patchSetting
	} else {
		destination.PatchSettings = nil
	}

	// ProvisionVMAgent
	if configuration.ProvisionVMAgent != nil {
		provisionVMAgent := *configuration.ProvisionVMAgent
		destination.ProvisionVMAgent = &provisionVMAgent
	} else {
		destination.ProvisionVMAgent = nil
	}

	// Ssh
	if configuration.Ssh != nil {
		var ssh v1alpha1api20201201storage.SshConfiguration_Status
		err := configuration.Ssh.AssignPropertiesToSshConfigurationStatus(&ssh)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSshConfigurationStatus() to populate field Ssh")
		}
		destination.Ssh = &ssh
	} else {
		destination.Ssh = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MaintenanceRedeployStatus_Status struct {
	//IsCustomerInitiatedMaintenanceAllowed: True, if customer is allowed to perform
	//Maintenance.
	IsCustomerInitiatedMaintenanceAllowed *bool `json:"isCustomerInitiatedMaintenanceAllowed,omitempty"`

	//LastOperationMessage: Message returned for the last Maintenance Operation.
	LastOperationMessage *string `json:"lastOperationMessage,omitempty"`

	//LastOperationResultCode: The Last Maintenance Operation Result Code.
	LastOperationResultCode *MaintenanceRedeployStatusStatusLastOperationResultCode `json:"lastOperationResultCode,omitempty"`

	//MaintenanceWindowEndTime: End Time for the Maintenance Window.
	MaintenanceWindowEndTime *string `json:"maintenanceWindowEndTime,omitempty"`

	//MaintenanceWindowStartTime: Start Time for the Maintenance Window.
	MaintenanceWindowStartTime *string `json:"maintenanceWindowStartTime,omitempty"`

	//PreMaintenanceWindowEndTime: End Time for the Pre Maintenance Window.
	PreMaintenanceWindowEndTime *string `json:"preMaintenanceWindowEndTime,omitempty"`

	//PreMaintenanceWindowStartTime: Start Time for the Pre Maintenance Window.
	PreMaintenanceWindowStartTime *string `json:"preMaintenanceWindowStartTime,omitempty"`
}

var _ genruntime.FromARMConverter = &MaintenanceRedeployStatus_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redeploy *MaintenanceRedeployStatus_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MaintenanceRedeployStatus_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redeploy *MaintenanceRedeployStatus_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MaintenanceRedeployStatus_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MaintenanceRedeployStatus_StatusARM, got %T", armInput)
	}

	// Set property ‘IsCustomerInitiatedMaintenanceAllowed’:
	if typedInput.IsCustomerInitiatedMaintenanceAllowed != nil {
		isCustomerInitiatedMaintenanceAllowed := *typedInput.IsCustomerInitiatedMaintenanceAllowed
		redeploy.IsCustomerInitiatedMaintenanceAllowed = &isCustomerInitiatedMaintenanceAllowed
	}

	// Set property ‘LastOperationMessage’:
	if typedInput.LastOperationMessage != nil {
		lastOperationMessage := *typedInput.LastOperationMessage
		redeploy.LastOperationMessage = &lastOperationMessage
	}

	// Set property ‘LastOperationResultCode’:
	if typedInput.LastOperationResultCode != nil {
		lastOperationResultCode := *typedInput.LastOperationResultCode
		redeploy.LastOperationResultCode = &lastOperationResultCode
	}

	// Set property ‘MaintenanceWindowEndTime’:
	if typedInput.MaintenanceWindowEndTime != nil {
		maintenanceWindowEndTime := *typedInput.MaintenanceWindowEndTime
		redeploy.MaintenanceWindowEndTime = &maintenanceWindowEndTime
	}

	// Set property ‘MaintenanceWindowStartTime’:
	if typedInput.MaintenanceWindowStartTime != nil {
		maintenanceWindowStartTime := *typedInput.MaintenanceWindowStartTime
		redeploy.MaintenanceWindowStartTime = &maintenanceWindowStartTime
	}

	// Set property ‘PreMaintenanceWindowEndTime’:
	if typedInput.PreMaintenanceWindowEndTime != nil {
		preMaintenanceWindowEndTime := *typedInput.PreMaintenanceWindowEndTime
		redeploy.PreMaintenanceWindowEndTime = &preMaintenanceWindowEndTime
	}

	// Set property ‘PreMaintenanceWindowStartTime’:
	if typedInput.PreMaintenanceWindowStartTime != nil {
		preMaintenanceWindowStartTime := *typedInput.PreMaintenanceWindowStartTime
		redeploy.PreMaintenanceWindowStartTime = &preMaintenanceWindowStartTime
	}

	// No error
	return nil
}

// AssignPropertiesFromMaintenanceRedeployStatusStatus populates our MaintenanceRedeployStatus_Status from the provided source MaintenanceRedeployStatus_Status
func (redeploy *MaintenanceRedeployStatus_Status) AssignPropertiesFromMaintenanceRedeployStatusStatus(source *v1alpha1api20201201storage.MaintenanceRedeployStatus_Status) error {

	// IsCustomerInitiatedMaintenanceAllowed
	if source.IsCustomerInitiatedMaintenanceAllowed != nil {
		isCustomerInitiatedMaintenanceAllowed := *source.IsCustomerInitiatedMaintenanceAllowed
		redeploy.IsCustomerInitiatedMaintenanceAllowed = &isCustomerInitiatedMaintenanceAllowed
	} else {
		redeploy.IsCustomerInitiatedMaintenanceAllowed = nil
	}

	// LastOperationMessage
	redeploy.LastOperationMessage = genruntime.ClonePointerToString(source.LastOperationMessage)

	// LastOperationResultCode
	if source.LastOperationResultCode != nil {
		lastOperationResultCode := MaintenanceRedeployStatusStatusLastOperationResultCode(*source.LastOperationResultCode)
		redeploy.LastOperationResultCode = &lastOperationResultCode
	} else {
		redeploy.LastOperationResultCode = nil
	}

	// MaintenanceWindowEndTime
	redeploy.MaintenanceWindowEndTime = genruntime.ClonePointerToString(source.MaintenanceWindowEndTime)

	// MaintenanceWindowStartTime
	redeploy.MaintenanceWindowStartTime = genruntime.ClonePointerToString(source.MaintenanceWindowStartTime)

	// PreMaintenanceWindowEndTime
	redeploy.PreMaintenanceWindowEndTime = genruntime.ClonePointerToString(source.PreMaintenanceWindowEndTime)

	// PreMaintenanceWindowStartTime
	redeploy.PreMaintenanceWindowStartTime = genruntime.ClonePointerToString(source.PreMaintenanceWindowStartTime)

	// No error
	return nil
}

// AssignPropertiesToMaintenanceRedeployStatusStatus populates the provided destination MaintenanceRedeployStatus_Status from our MaintenanceRedeployStatus_Status
func (redeploy *MaintenanceRedeployStatus_Status) AssignPropertiesToMaintenanceRedeployStatusStatus(destination *v1alpha1api20201201storage.MaintenanceRedeployStatus_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IsCustomerInitiatedMaintenanceAllowed
	if redeploy.IsCustomerInitiatedMaintenanceAllowed != nil {
		isCustomerInitiatedMaintenanceAllowed := *redeploy.IsCustomerInitiatedMaintenanceAllowed
		destination.IsCustomerInitiatedMaintenanceAllowed = &isCustomerInitiatedMaintenanceAllowed
	} else {
		destination.IsCustomerInitiatedMaintenanceAllowed = nil
	}

	// LastOperationMessage
	destination.LastOperationMessage = genruntime.ClonePointerToString(redeploy.LastOperationMessage)

	// LastOperationResultCode
	if redeploy.LastOperationResultCode != nil {
		lastOperationResultCode := string(*redeploy.LastOperationResultCode)
		destination.LastOperationResultCode = &lastOperationResultCode
	} else {
		destination.LastOperationResultCode = nil
	}

	// MaintenanceWindowEndTime
	destination.MaintenanceWindowEndTime = genruntime.ClonePointerToString(redeploy.MaintenanceWindowEndTime)

	// MaintenanceWindowStartTime
	destination.MaintenanceWindowStartTime = genruntime.ClonePointerToString(redeploy.MaintenanceWindowStartTime)

	// PreMaintenanceWindowEndTime
	destination.PreMaintenanceWindowEndTime = genruntime.ClonePointerToString(redeploy.PreMaintenanceWindowEndTime)

	// PreMaintenanceWindowStartTime
	destination.PreMaintenanceWindowStartTime = genruntime.ClonePointerToString(redeploy.PreMaintenanceWindowStartTime)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkInterfaceReference_Spec struct {
	//Primary: Specifies the primary network interface in case the virtual machine has
	//more than 1 network interface.
	Primary *bool `json:"primary,omitempty"`

	//Reference: Resource Id
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkInterfaceReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *NetworkInterfaceReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result NetworkInterfaceReference_SpecARM

	// Set property ‘Id’:
	if reference.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*reference.Reference)
		if err != nil {
			return nil, err
		}
		reference1 := referenceARMID
		result.Id = &reference1
	}

	// Set property ‘Properties’:
	if reference.Primary != nil {
		result.Properties = &NetworkInterfaceReferenceProperties_SpecARM{}
	}
	if reference.Primary != nil {
		primary := *reference.Primary
		result.Properties.Primary = &primary
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *NetworkInterfaceReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkInterfaceReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *NetworkInterfaceReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkInterfaceReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkInterfaceReference_SpecARM, got %T", armInput)
	}

	// Set property ‘Primary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Primary != nil {
			primary := *typedInput.Properties.Primary
			reference.Primary = &primary
		}
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromNetworkInterfaceReferenceSpec populates our NetworkInterfaceReference_Spec from the provided source NetworkInterfaceReference_Spec
func (reference *NetworkInterfaceReference_Spec) AssignPropertiesFromNetworkInterfaceReferenceSpec(source *v1alpha1api20201201storage.NetworkInterfaceReference_Spec) error {

	// Primary
	if source.Primary != nil {
		primary := *source.Primary
		reference.Primary = &primary
	} else {
		reference.Primary = nil
	}

	// Reference
	if source.Reference != nil {
		referenceTemp := source.Reference.Copy()
		reference.Reference = &referenceTemp
	} else {
		reference.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkInterfaceReferenceSpec populates the provided destination NetworkInterfaceReference_Spec from our NetworkInterfaceReference_Spec
func (reference *NetworkInterfaceReference_Spec) AssignPropertiesToNetworkInterfaceReferenceSpec(destination *v1alpha1api20201201storage.NetworkInterfaceReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Primary
	if reference.Primary != nil {
		primary := *reference.Primary
		destination.Primary = &primary
	} else {
		destination.Primary = nil
	}

	// Reference
	if reference.Reference != nil {
		referenceTemp := reference.Reference.Copy()
		destination.Reference = &referenceTemp
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkInterfaceReference_Status struct {
	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Primary: Specifies the primary network interface in case the virtual machine has
	//more than 1 network interface.
	Primary *bool `json:"primary,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkInterfaceReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *NetworkInterfaceReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkInterfaceReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *NetworkInterfaceReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkInterfaceReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkInterfaceReference_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		reference.Id = &id
	}

	// Set property ‘Primary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Primary != nil {
			primary := *typedInput.Properties.Primary
			reference.Primary = &primary
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkInterfaceReferenceStatus populates our NetworkInterfaceReference_Status from the provided source NetworkInterfaceReference_Status
func (reference *NetworkInterfaceReference_Status) AssignPropertiesFromNetworkInterfaceReferenceStatus(source *v1alpha1api20201201storage.NetworkInterfaceReference_Status) error {

	// Id
	reference.Id = genruntime.ClonePointerToString(source.Id)

	// Primary
	if source.Primary != nil {
		primary := *source.Primary
		reference.Primary = &primary
	} else {
		reference.Primary = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkInterfaceReferenceStatus populates the provided destination NetworkInterfaceReference_Status from our NetworkInterfaceReference_Status
func (reference *NetworkInterfaceReference_Status) AssignPropertiesToNetworkInterfaceReferenceStatus(destination *v1alpha1api20201201storage.NetworkInterfaceReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(reference.Id)

	// Primary
	if reference.Primary != nil {
		primary := *reference.Primary
		destination.Primary = &primary
	} else {
		destination.Primary = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type OSDisk_Spec struct {
	//Caching: Specifies the caching requirements.
	//Possible values are:
	//None
	//ReadOnly
	//ReadWrite
	//Default: None for Standard storage. ReadOnly for Premium storage.
	Caching *Caching_Spec `json:"caching,omitempty"`

	// +kubebuilder:validation:Required
	//CreateOption: Specifies how the virtual machine should be created.
	//Possible values are:
	//Attach \u2013 This value is used when you are using a specialized disk to create
	//the virtual machine.
	//FromImage \u2013 This value is used when you are using an image to create the
	//virtual machine. If you are using a platform image, you also use the
	//imageReference element described above. If you are using a marketplace image,
	//you  also use the plan element previously described.
	CreateOption CreateOption_Spec `json:"createOption"`

	//DiffDiskSettings: Specifies the ephemeral Disk Settings for the operating system
	//disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettings_Spec `json:"diffDiskSettings,omitempty"`

	//DiskSizeGB: Specifies the size of an empty data disk in gigabytes. This element
	//can be used to overwrite the size of the disk in a virtual machine image.
	//This value cannot be larger than 1023 GB
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//EncryptionSettings: Specifies the encryption settings for the OS Disk.
	//Minimum api-version: 2015-06-15
	EncryptionSettings *DiskEncryptionSettings_Spec `json:"encryptionSettings,omitempty"`

	//Image: The source user image virtual hard disk. The virtual hard disk will be
	//copied before being attached to the virtual machine. If SourceImage is provided,
	//the destination virtual hard drive must not exist.
	Image *VirtualHardDisk_Spec `json:"image,omitempty"`

	//ManagedDisk: The managed disk parameters.
	ManagedDisk *ManagedDiskParameters_Spec `json:"managedDisk,omitempty"`

	//Name: The disk name.
	Name *string `json:"name,omitempty"`

	//OsType: This property allows you to specify the type of the OS that is included
	//in the disk if creating a VM from user-image or a specialized VHD.
	//Possible values are:
	//Windows
	//Linux
	OsType *OSDiskSpecOsType `json:"osType,omitempty"`

	//Vhd: The virtual hard disk.
	Vhd *VirtualHardDisk_Spec `json:"vhd,omitempty"`

	//WriteAcceleratorEnabled: Specifies whether writeAccelerator should be enabled or
	//disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &OSDisk_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (disk *OSDisk_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if disk == nil {
		return nil, nil
	}
	var result OSDisk_SpecARM

	// Set property ‘Caching’:
	if disk.Caching != nil {
		caching := *disk.Caching
		result.Caching = &caching
	}

	// Set property ‘CreateOption’:
	result.CreateOption = disk.CreateOption

	// Set property ‘DiffDiskSettings’:
	if disk.DiffDiskSettings != nil {
		diffDiskSettingsARM, err := (*disk.DiffDiskSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diffDiskSettings := diffDiskSettingsARM.(DiffDiskSettings_SpecARM)
		result.DiffDiskSettings = &diffDiskSettings
	}

	// Set property ‘DiskSizeGB’:
	if disk.DiskSizeGB != nil {
		diskSizeGB := *disk.DiskSizeGB
		result.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘EncryptionSettings’:
	if disk.EncryptionSettings != nil {
		encryptionSettingsARM, err := (*disk.EncryptionSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryptionSettings := encryptionSettingsARM.(DiskEncryptionSettings_SpecARM)
		result.EncryptionSettings = &encryptionSettings
	}

	// Set property ‘Image’:
	if disk.Image != nil {
		imageARM, err := (*disk.Image).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		image := imageARM.(VirtualHardDisk_SpecARM)
		result.Image = &image
	}

	// Set property ‘ManagedDisk’:
	if disk.ManagedDisk != nil {
		managedDiskARM, err := (*disk.ManagedDisk).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		managedDisk := managedDiskARM.(ManagedDiskParameters_SpecARM)
		result.ManagedDisk = &managedDisk
	}

	// Set property ‘Name’:
	if disk.Name != nil {
		name := *disk.Name
		result.Name = &name
	}

	// Set property ‘OsType’:
	if disk.OsType != nil {
		osType := *disk.OsType
		result.OsType = &osType
	}

	// Set property ‘Vhd’:
	if disk.Vhd != nil {
		vhdARM, err := (*disk.Vhd).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vhd := vhdARM.(VirtualHardDisk_SpecARM)
		result.Vhd = &vhd
	}

	// Set property ‘WriteAcceleratorEnabled’:
	if disk.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *disk.WriteAcceleratorEnabled
		result.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *OSDisk_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OSDisk_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *OSDisk_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OSDisk_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OSDisk_SpecARM, got %T", armInput)
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘CreateOption’:
	disk.CreateOption = typedInput.CreateOption

	// Set property ‘DiffDiskSettings’:
	if typedInput.DiffDiskSettings != nil {
		var diffDiskSettings1 DiffDiskSettings_Spec
		err := diffDiskSettings1.PopulateFromARM(owner, *typedInput.DiffDiskSettings)
		if err != nil {
			return err
		}
		diffDiskSettings := diffDiskSettings1
		disk.DiffDiskSettings = &diffDiskSettings
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘EncryptionSettings’:
	if typedInput.EncryptionSettings != nil {
		var encryptionSettings1 DiskEncryptionSettings_Spec
		err := encryptionSettings1.PopulateFromARM(owner, *typedInput.EncryptionSettings)
		if err != nil {
			return err
		}
		encryptionSettings := encryptionSettings1
		disk.EncryptionSettings = &encryptionSettings
	}

	// Set property ‘Image’:
	if typedInput.Image != nil {
		var image1 VirtualHardDisk_Spec
		err := image1.PopulateFromARM(owner, *typedInput.Image)
		if err != nil {
			return err
		}
		image := image1
		disk.Image = &image
	}

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 ManagedDiskParameters_Spec
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		disk.Name = &name
	}

	// Set property ‘OsType’:
	if typedInput.OsType != nil {
		osType := *typedInput.OsType
		disk.OsType = &osType
	}

	// Set property ‘Vhd’:
	if typedInput.Vhd != nil {
		var vhd1 VirtualHardDisk_Spec
		err := vhd1.PopulateFromARM(owner, *typedInput.Vhd)
		if err != nil {
			return err
		}
		vhd := vhd1
		disk.Vhd = &vhd
	}

	// Set property ‘WriteAcceleratorEnabled’:
	if typedInput.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *typedInput.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromOSDiskSpec populates our OSDisk_Spec from the provided source OSDisk_Spec
func (disk *OSDisk_Spec) AssignPropertiesFromOSDiskSpec(source *v1alpha1api20201201storage.OSDisk_Spec) error {

	// Caching
	if source.Caching != nil {
		caching := Caching_Spec(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// CreateOption
	if source.CreateOption != nil {
		disk.CreateOption = CreateOption_Spec(*source.CreateOption)
	} else {
		disk.CreateOption = ""
	}

	// DiffDiskSettings
	if source.DiffDiskSettings != nil {
		var diffDiskSetting DiffDiskSettings_Spec
		err := diffDiskSetting.AssignPropertiesFromDiffDiskSettingsSpec(source.DiffDiskSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiffDiskSettingsSpec() to populate field DiffDiskSettings")
		}
		disk.DiffDiskSettings = &diffDiskSetting
	} else {
		disk.DiffDiskSettings = nil
	}

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// EncryptionSettings
	if source.EncryptionSettings != nil {
		var encryptionSetting DiskEncryptionSettings_Spec
		err := encryptionSetting.AssignPropertiesFromDiskEncryptionSettingsSpec(source.EncryptionSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskEncryptionSettingsSpec() to populate field EncryptionSettings")
		}
		disk.EncryptionSettings = &encryptionSetting
	} else {
		disk.EncryptionSettings = nil
	}

	// Image
	if source.Image != nil {
		var image VirtualHardDisk_Spec
		err := image.AssignPropertiesFromVirtualHardDiskSpec(source.Image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskSpec() to populate field Image")
		}
		disk.Image = &image
	} else {
		disk.Image = nil
	}

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk ManagedDiskParameters_Spec
		err := managedDisk.AssignPropertiesFromManagedDiskParametersSpec(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedDiskParametersSpec() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// Name
	disk.Name = genruntime.ClonePointerToString(source.Name)

	// OsType
	if source.OsType != nil {
		osType := OSDiskSpecOsType(*source.OsType)
		disk.OsType = &osType
	} else {
		disk.OsType = nil
	}

	// Vhd
	if source.Vhd != nil {
		var vhd VirtualHardDisk_Spec
		err := vhd.AssignPropertiesFromVirtualHardDiskSpec(source.Vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskSpec() to populate field Vhd")
		}
		disk.Vhd = &vhd
	} else {
		disk.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if source.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *source.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		disk.WriteAcceleratorEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToOSDiskSpec populates the provided destination OSDisk_Spec from our OSDisk_Spec
func (disk *OSDisk_Spec) AssignPropertiesToOSDiskSpec(destination *v1alpha1api20201201storage.OSDisk_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// CreateOption
	createOption := string(disk.CreateOption)
	destination.CreateOption = &createOption

	// DiffDiskSettings
	if disk.DiffDiskSettings != nil {
		var diffDiskSetting v1alpha1api20201201storage.DiffDiskSettings_Spec
		err := disk.DiffDiskSettings.AssignPropertiesToDiffDiskSettingsSpec(&diffDiskSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiffDiskSettingsSpec() to populate field DiffDiskSettings")
		}
		destination.DiffDiskSettings = &diffDiskSetting
	} else {
		destination.DiffDiskSettings = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// EncryptionSettings
	if disk.EncryptionSettings != nil {
		var encryptionSetting v1alpha1api20201201storage.DiskEncryptionSettings_Spec
		err := disk.EncryptionSettings.AssignPropertiesToDiskEncryptionSettingsSpec(&encryptionSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskEncryptionSettingsSpec() to populate field EncryptionSettings")
		}
		destination.EncryptionSettings = &encryptionSetting
	} else {
		destination.EncryptionSettings = nil
	}

	// Image
	if disk.Image != nil {
		var image v1alpha1api20201201storage.VirtualHardDisk_Spec
		err := disk.Image.AssignPropertiesToVirtualHardDiskSpec(&image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskSpec() to populate field Image")
		}
		destination.Image = &image
	} else {
		destination.Image = nil
	}

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk v1alpha1api20201201storage.ManagedDiskParameters_Spec
		err := disk.ManagedDisk.AssignPropertiesToManagedDiskParametersSpec(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedDiskParametersSpec() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(disk.Name)

	// OsType
	if disk.OsType != nil {
		osType := string(*disk.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Vhd
	if disk.Vhd != nil {
		var vhd v1alpha1api20201201storage.VirtualHardDisk_Spec
		err := disk.Vhd.AssignPropertiesToVirtualHardDiskSpec(&vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskSpec() to populate field Vhd")
		}
		destination.Vhd = &vhd
	} else {
		destination.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if disk.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *disk.WriteAcceleratorEnabled
		destination.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		destination.WriteAcceleratorEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type OSDisk_Status struct {
	//Caching: Specifies the caching requirements.
	//Possible values are:
	//None
	//ReadOnly
	//ReadWrite
	//Default: None for Standard storage. ReadOnly for Premium storage.
	Caching *Caching_Status `json:"caching,omitempty"`

	// +kubebuilder:validation:Required
	//CreateOption: Specifies how the virtual machine should be created.
	//Possible values are:
	//Attach \u2013 This value is used when you are using a specialized disk to create
	//the virtual machine.
	//FromImage \u2013 This value is used when you are using an image to create the
	//virtual machine. If you are using a platform image, you also use the
	//imageReference element described above. If you are using a marketplace image,
	//you  also use the plan element previously described.
	CreateOption CreateOption_Status `json:"createOption"`

	//DiffDiskSettings: Specifies the ephemeral Disk Settings for the operating system
	//disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettings_Status `json:"diffDiskSettings,omitempty"`

	//DiskSizeGB: Specifies the size of an empty data disk in gigabytes. This element
	//can be used to overwrite the size of the disk in a virtual machine image.
	//This value cannot be larger than 1023 GB
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//EncryptionSettings: Specifies the encryption settings for the OS Disk.
	//Minimum api-version: 2015-06-15
	EncryptionSettings *DiskEncryptionSettings_Status `json:"encryptionSettings,omitempty"`

	//Image: The source user image virtual hard disk. The virtual hard disk will be
	//copied before being attached to the virtual machine. If SourceImage is provided,
	//the destination virtual hard drive must not exist.
	Image *VirtualHardDisk_Status `json:"image,omitempty"`

	//ManagedDisk: The managed disk parameters.
	ManagedDisk *ManagedDiskParameters_Status `json:"managedDisk,omitempty"`

	//Name: The disk name.
	Name *string `json:"name,omitempty"`

	//OsType: This property allows you to specify the type of the OS that is included
	//in the disk if creating a VM from user-image or a specialized VHD.
	//Possible values are:
	//Windows
	//Linux
	OsType *OSDiskStatusOsType `json:"osType,omitempty"`

	//Vhd: The virtual hard disk.
	Vhd *VirtualHardDisk_Status `json:"vhd,omitempty"`

	//WriteAcceleratorEnabled: Specifies whether writeAccelerator should be enabled or
	//disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &OSDisk_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *OSDisk_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OSDisk_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *OSDisk_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OSDisk_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OSDisk_StatusARM, got %T", armInput)
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘CreateOption’:
	disk.CreateOption = typedInput.CreateOption

	// Set property ‘DiffDiskSettings’:
	if typedInput.DiffDiskSettings != nil {
		var diffDiskSettings1 DiffDiskSettings_Status
		err := diffDiskSettings1.PopulateFromARM(owner, *typedInput.DiffDiskSettings)
		if err != nil {
			return err
		}
		diffDiskSettings := diffDiskSettings1
		disk.DiffDiskSettings = &diffDiskSettings
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘EncryptionSettings’:
	if typedInput.EncryptionSettings != nil {
		var encryptionSettings1 DiskEncryptionSettings_Status
		err := encryptionSettings1.PopulateFromARM(owner, *typedInput.EncryptionSettings)
		if err != nil {
			return err
		}
		encryptionSettings := encryptionSettings1
		disk.EncryptionSettings = &encryptionSettings
	}

	// Set property ‘Image’:
	if typedInput.Image != nil {
		var image1 VirtualHardDisk_Status
		err := image1.PopulateFromARM(owner, *typedInput.Image)
		if err != nil {
			return err
		}
		image := image1
		disk.Image = &image
	}

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 ManagedDiskParameters_Status
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		disk.Name = &name
	}

	// Set property ‘OsType’:
	if typedInput.OsType != nil {
		osType := *typedInput.OsType
		disk.OsType = &osType
	}

	// Set property ‘Vhd’:
	if typedInput.Vhd != nil {
		var vhd1 VirtualHardDisk_Status
		err := vhd1.PopulateFromARM(owner, *typedInput.Vhd)
		if err != nil {
			return err
		}
		vhd := vhd1
		disk.Vhd = &vhd
	}

	// Set property ‘WriteAcceleratorEnabled’:
	if typedInput.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *typedInput.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromOSDiskStatus populates our OSDisk_Status from the provided source OSDisk_Status
func (disk *OSDisk_Status) AssignPropertiesFromOSDiskStatus(source *v1alpha1api20201201storage.OSDisk_Status) error {

	// Caching
	if source.Caching != nil {
		caching := Caching_Status(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// CreateOption
	if source.CreateOption != nil {
		disk.CreateOption = CreateOption_Status(*source.CreateOption)
	} else {
		disk.CreateOption = ""
	}

	// DiffDiskSettings
	if source.DiffDiskSettings != nil {
		var diffDiskSetting DiffDiskSettings_Status
		err := diffDiskSetting.AssignPropertiesFromDiffDiskSettingsStatus(source.DiffDiskSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiffDiskSettingsStatus() to populate field DiffDiskSettings")
		}
		disk.DiffDiskSettings = &diffDiskSetting
	} else {
		disk.DiffDiskSettings = nil
	}

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// EncryptionSettings
	if source.EncryptionSettings != nil {
		var encryptionSetting DiskEncryptionSettings_Status
		err := encryptionSetting.AssignPropertiesFromDiskEncryptionSettingsStatus(source.EncryptionSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskEncryptionSettingsStatus() to populate field EncryptionSettings")
		}
		disk.EncryptionSettings = &encryptionSetting
	} else {
		disk.EncryptionSettings = nil
	}

	// Image
	if source.Image != nil {
		var image VirtualHardDisk_Status
		err := image.AssignPropertiesFromVirtualHardDiskStatus(source.Image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskStatus() to populate field Image")
		}
		disk.Image = &image
	} else {
		disk.Image = nil
	}

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk ManagedDiskParameters_Status
		err := managedDisk.AssignPropertiesFromManagedDiskParametersStatus(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedDiskParametersStatus() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// Name
	disk.Name = genruntime.ClonePointerToString(source.Name)

	// OsType
	if source.OsType != nil {
		osType := OSDiskStatusOsType(*source.OsType)
		disk.OsType = &osType
	} else {
		disk.OsType = nil
	}

	// Vhd
	if source.Vhd != nil {
		var vhd VirtualHardDisk_Status
		err := vhd.AssignPropertiesFromVirtualHardDiskStatus(source.Vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualHardDiskStatus() to populate field Vhd")
		}
		disk.Vhd = &vhd
	} else {
		disk.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if source.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *source.WriteAcceleratorEnabled
		disk.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		disk.WriteAcceleratorEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToOSDiskStatus populates the provided destination OSDisk_Status from our OSDisk_Status
func (disk *OSDisk_Status) AssignPropertiesToOSDiskStatus(destination *v1alpha1api20201201storage.OSDisk_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// CreateOption
	createOption := string(disk.CreateOption)
	destination.CreateOption = &createOption

	// DiffDiskSettings
	if disk.DiffDiskSettings != nil {
		var diffDiskSetting v1alpha1api20201201storage.DiffDiskSettings_Status
		err := disk.DiffDiskSettings.AssignPropertiesToDiffDiskSettingsStatus(&diffDiskSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiffDiskSettingsStatus() to populate field DiffDiskSettings")
		}
		destination.DiffDiskSettings = &diffDiskSetting
	} else {
		destination.DiffDiskSettings = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// EncryptionSettings
	if disk.EncryptionSettings != nil {
		var encryptionSetting v1alpha1api20201201storage.DiskEncryptionSettings_Status
		err := disk.EncryptionSettings.AssignPropertiesToDiskEncryptionSettingsStatus(&encryptionSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskEncryptionSettingsStatus() to populate field EncryptionSettings")
		}
		destination.EncryptionSettings = &encryptionSetting
	} else {
		destination.EncryptionSettings = nil
	}

	// Image
	if disk.Image != nil {
		var image v1alpha1api20201201storage.VirtualHardDisk_Status
		err := disk.Image.AssignPropertiesToVirtualHardDiskStatus(&image)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskStatus() to populate field Image")
		}
		destination.Image = &image
	} else {
		destination.Image = nil
	}

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk v1alpha1api20201201storage.ManagedDiskParameters_Status
		err := disk.ManagedDisk.AssignPropertiesToManagedDiskParametersStatus(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedDiskParametersStatus() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(disk.Name)

	// OsType
	if disk.OsType != nil {
		osType := string(*disk.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Vhd
	if disk.Vhd != nil {
		var vhd v1alpha1api20201201storage.VirtualHardDisk_Status
		err := disk.Vhd.AssignPropertiesToVirtualHardDiskStatus(&vhd)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualHardDiskStatus() to populate field Vhd")
		}
		destination.Vhd = &vhd
	} else {
		destination.Vhd = nil
	}

	// WriteAcceleratorEnabled
	if disk.WriteAcceleratorEnabled != nil {
		writeAcceleratorEnabled := *disk.WriteAcceleratorEnabled
		destination.WriteAcceleratorEnabled = &writeAcceleratorEnabled
	} else {
		destination.WriteAcceleratorEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"TrustedLaunch"}
type SecurityProfileSpecSecurityType string

const SecurityProfileSpecSecurityTypeTrustedLaunch = SecurityProfileSpecSecurityType("TrustedLaunch")

type SecurityProfileStatusSecurityType string

const SecurityProfileStatusSecurityTypeTrustedLaunch = SecurityProfileStatusSecurityType("TrustedLaunch")

type UefiSettings_Spec struct {
	//SecureBootEnabled: Specifies whether secure boot should be enabled on the
	//virtual machine.
	//Minimum api-version: 2020-12-01
	SecureBootEnabled *bool `json:"secureBootEnabled,omitempty"`

	//VTpmEnabled: Specifies whether vTPM should be enabled on the virtual machine.
	//Minimum api-version: 2020-12-01
	VTpmEnabled *bool `json:"vTpmEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &UefiSettings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *UefiSettings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result UefiSettings_SpecARM

	// Set property ‘SecureBootEnabled’:
	if settings.SecureBootEnabled != nil {
		secureBootEnabled := *settings.SecureBootEnabled
		result.SecureBootEnabled = &secureBootEnabled
	}

	// Set property ‘VTpmEnabled’:
	if settings.VTpmEnabled != nil {
		vTpmEnabled := *settings.VTpmEnabled
		result.VTpmEnabled = &vTpmEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *UefiSettings_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UefiSettings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *UefiSettings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UefiSettings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UefiSettings_SpecARM, got %T", armInput)
	}

	// Set property ‘SecureBootEnabled’:
	if typedInput.SecureBootEnabled != nil {
		secureBootEnabled := *typedInput.SecureBootEnabled
		settings.SecureBootEnabled = &secureBootEnabled
	}

	// Set property ‘VTpmEnabled’:
	if typedInput.VTpmEnabled != nil {
		vTpmEnabled := *typedInput.VTpmEnabled
		settings.VTpmEnabled = &vTpmEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromUefiSettingsSpec populates our UefiSettings_Spec from the provided source UefiSettings_Spec
func (settings *UefiSettings_Spec) AssignPropertiesFromUefiSettingsSpec(source *v1alpha1api20201201storage.UefiSettings_Spec) error {

	// SecureBootEnabled
	if source.SecureBootEnabled != nil {
		secureBootEnabled := *source.SecureBootEnabled
		settings.SecureBootEnabled = &secureBootEnabled
	} else {
		settings.SecureBootEnabled = nil
	}

	// VTpmEnabled
	if source.VTpmEnabled != nil {
		vTpmEnabled := *source.VTpmEnabled
		settings.VTpmEnabled = &vTpmEnabled
	} else {
		settings.VTpmEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUefiSettingsSpec populates the provided destination UefiSettings_Spec from our UefiSettings_Spec
func (settings *UefiSettings_Spec) AssignPropertiesToUefiSettingsSpec(destination *v1alpha1api20201201storage.UefiSettings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecureBootEnabled
	if settings.SecureBootEnabled != nil {
		secureBootEnabled := *settings.SecureBootEnabled
		destination.SecureBootEnabled = &secureBootEnabled
	} else {
		destination.SecureBootEnabled = nil
	}

	// VTpmEnabled
	if settings.VTpmEnabled != nil {
		vTpmEnabled := *settings.VTpmEnabled
		destination.VTpmEnabled = &vTpmEnabled
	} else {
		destination.VTpmEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UefiSettings_Status struct {
	//SecureBootEnabled: Specifies whether secure boot should be enabled on the
	//virtual machine.
	//Minimum api-version: 2020-12-01
	SecureBootEnabled *bool `json:"secureBootEnabled,omitempty"`

	//VTpmEnabled: Specifies whether vTPM should be enabled on the virtual machine.
	//Minimum api-version: 2020-12-01
	VTpmEnabled *bool `json:"vTpmEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &UefiSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *UefiSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UefiSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *UefiSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UefiSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UefiSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘SecureBootEnabled’:
	if typedInput.SecureBootEnabled != nil {
		secureBootEnabled := *typedInput.SecureBootEnabled
		settings.SecureBootEnabled = &secureBootEnabled
	}

	// Set property ‘VTpmEnabled’:
	if typedInput.VTpmEnabled != nil {
		vTpmEnabled := *typedInput.VTpmEnabled
		settings.VTpmEnabled = &vTpmEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromUefiSettingsStatus populates our UefiSettings_Status from the provided source UefiSettings_Status
func (settings *UefiSettings_Status) AssignPropertiesFromUefiSettingsStatus(source *v1alpha1api20201201storage.UefiSettings_Status) error {

	// SecureBootEnabled
	if source.SecureBootEnabled != nil {
		secureBootEnabled := *source.SecureBootEnabled
		settings.SecureBootEnabled = &secureBootEnabled
	} else {
		settings.SecureBootEnabled = nil
	}

	// VTpmEnabled
	if source.VTpmEnabled != nil {
		vTpmEnabled := *source.VTpmEnabled
		settings.VTpmEnabled = &vTpmEnabled
	} else {
		settings.VTpmEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUefiSettingsStatus populates the provided destination UefiSettings_Status from our UefiSettings_Status
func (settings *UefiSettings_Status) AssignPropertiesToUefiSettingsStatus(destination *v1alpha1api20201201storage.UefiSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecureBootEnabled
	if settings.SecureBootEnabled != nil {
		secureBootEnabled := *settings.SecureBootEnabled
		destination.SecureBootEnabled = &secureBootEnabled
	} else {
		destination.SecureBootEnabled = nil
	}

	// VTpmEnabled
	if settings.VTpmEnabled != nil {
		vTpmEnabled := *settings.VTpmEnabled
		destination.VTpmEnabled = &vTpmEnabled
	} else {
		destination.VTpmEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VaultSecretGroup_Spec struct {
	//SourceVault: The relative URL of the Key Vault containing all of the
	//certificates in VaultCertificates.
	SourceVault *SubResource_Spec `json:"sourceVault,omitempty"`

	//VaultCertificates: The list of key vault references in SourceVault which contain
	//certificates.
	VaultCertificates []VaultCertificate_Spec `json:"vaultCertificates,omitempty"`
}

var _ genruntime.ARMTransformer = &VaultSecretGroup_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (group *VaultSecretGroup_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if group == nil {
		return nil, nil
	}
	var result VaultSecretGroup_SpecARM

	// Set property ‘SourceVault’:
	if group.SourceVault != nil {
		sourceVaultARM, err := (*group.SourceVault).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sourceVault := sourceVaultARM.(SubResource_SpecARM)
		result.SourceVault = &sourceVault
	}

	// Set property ‘VaultCertificates’:
	for _, item := range group.VaultCertificates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VaultCertificates = append(result.VaultCertificates, itemARM.(VaultCertificate_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *VaultSecretGroup_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VaultSecretGroup_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *VaultSecretGroup_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VaultSecretGroup_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VaultSecretGroup_SpecARM, got %T", armInput)
	}

	// Set property ‘SourceVault’:
	if typedInput.SourceVault != nil {
		var sourceVault1 SubResource_Spec
		err := sourceVault1.PopulateFromARM(owner, *typedInput.SourceVault)
		if err != nil {
			return err
		}
		sourceVault := sourceVault1
		group.SourceVault = &sourceVault
	}

	// Set property ‘VaultCertificates’:
	for _, item := range typedInput.VaultCertificates {
		var item1 VaultCertificate_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		group.VaultCertificates = append(group.VaultCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVaultSecretGroupSpec populates our VaultSecretGroup_Spec from the provided source VaultSecretGroup_Spec
func (group *VaultSecretGroup_Spec) AssignPropertiesFromVaultSecretGroupSpec(source *v1alpha1api20201201storage.VaultSecretGroup_Spec) error {

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SubResource_Spec
		err := sourceVault.AssignPropertiesFromSubResourceSpec(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field SourceVault")
		}
		group.SourceVault = &sourceVault
	} else {
		group.SourceVault = nil
	}

	// VaultCertificates
	if source.VaultCertificates != nil {
		vaultCertificateList := make([]VaultCertificate_Spec, len(source.VaultCertificates))
		for vaultCertificateIndex, vaultCertificateItem := range source.VaultCertificates {
			// Shadow the loop variable to avoid aliasing
			vaultCertificateItem := vaultCertificateItem
			var vaultCertificate VaultCertificate_Spec
			err := vaultCertificate.AssignPropertiesFromVaultCertificateSpec(&vaultCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVaultCertificateSpec() to populate field VaultCertificates")
			}
			vaultCertificateList[vaultCertificateIndex] = vaultCertificate
		}
		group.VaultCertificates = vaultCertificateList
	} else {
		group.VaultCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVaultSecretGroupSpec populates the provided destination VaultSecretGroup_Spec from our VaultSecretGroup_Spec
func (group *VaultSecretGroup_Spec) AssignPropertiesToVaultSecretGroupSpec(destination *v1alpha1api20201201storage.VaultSecretGroup_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SourceVault
	if group.SourceVault != nil {
		var sourceVault v1alpha1api20201201storage.SubResource_Spec
		err := group.SourceVault.AssignPropertiesToSubResourceSpec(&sourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field SourceVault")
		}
		destination.SourceVault = &sourceVault
	} else {
		destination.SourceVault = nil
	}

	// VaultCertificates
	if group.VaultCertificates != nil {
		vaultCertificateList := make([]v1alpha1api20201201storage.VaultCertificate_Spec, len(group.VaultCertificates))
		for vaultCertificateIndex, vaultCertificateItem := range group.VaultCertificates {
			// Shadow the loop variable to avoid aliasing
			vaultCertificateItem := vaultCertificateItem
			var vaultCertificate v1alpha1api20201201storage.VaultCertificate_Spec
			err := vaultCertificateItem.AssignPropertiesToVaultCertificateSpec(&vaultCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVaultCertificateSpec() to populate field VaultCertificates")
			}
			vaultCertificateList[vaultCertificateIndex] = vaultCertificate
		}
		destination.VaultCertificates = vaultCertificateList
	} else {
		destination.VaultCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VaultSecretGroup_Status struct {
	//SourceVault: The relative URL of the Key Vault containing all of the
	//certificates in VaultCertificates.
	SourceVault *SubResource_Status `json:"sourceVault,omitempty"`

	//VaultCertificates: The list of key vault references in SourceVault which contain
	//certificates.
	VaultCertificates []VaultCertificate_Status `json:"vaultCertificates,omitempty"`
}

var _ genruntime.FromARMConverter = &VaultSecretGroup_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *VaultSecretGroup_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VaultSecretGroup_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *VaultSecretGroup_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VaultSecretGroup_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VaultSecretGroup_StatusARM, got %T", armInput)
	}

	// Set property ‘SourceVault’:
	if typedInput.SourceVault != nil {
		var sourceVault1 SubResource_Status
		err := sourceVault1.PopulateFromARM(owner, *typedInput.SourceVault)
		if err != nil {
			return err
		}
		sourceVault := sourceVault1
		group.SourceVault = &sourceVault
	}

	// Set property ‘VaultCertificates’:
	for _, item := range typedInput.VaultCertificates {
		var item1 VaultCertificate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		group.VaultCertificates = append(group.VaultCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVaultSecretGroupStatus populates our VaultSecretGroup_Status from the provided source VaultSecretGroup_Status
func (group *VaultSecretGroup_Status) AssignPropertiesFromVaultSecretGroupStatus(source *v1alpha1api20201201storage.VaultSecretGroup_Status) error {

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SubResource_Status
		err := sourceVault.AssignPropertiesFromSubResourceStatus(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field SourceVault")
		}
		group.SourceVault = &sourceVault
	} else {
		group.SourceVault = nil
	}

	// VaultCertificates
	if source.VaultCertificates != nil {
		vaultCertificateList := make([]VaultCertificate_Status, len(source.VaultCertificates))
		for vaultCertificateIndex, vaultCertificateItem := range source.VaultCertificates {
			// Shadow the loop variable to avoid aliasing
			vaultCertificateItem := vaultCertificateItem
			var vaultCertificate VaultCertificate_Status
			err := vaultCertificate.AssignPropertiesFromVaultCertificateStatus(&vaultCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVaultCertificateStatus() to populate field VaultCertificates")
			}
			vaultCertificateList[vaultCertificateIndex] = vaultCertificate
		}
		group.VaultCertificates = vaultCertificateList
	} else {
		group.VaultCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVaultSecretGroupStatus populates the provided destination VaultSecretGroup_Status from our VaultSecretGroup_Status
func (group *VaultSecretGroup_Status) AssignPropertiesToVaultSecretGroupStatus(destination *v1alpha1api20201201storage.VaultSecretGroup_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SourceVault
	if group.SourceVault != nil {
		var sourceVault v1alpha1api20201201storage.SubResource_Status
		err := group.SourceVault.AssignPropertiesToSubResourceStatus(&sourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field SourceVault")
		}
		destination.SourceVault = &sourceVault
	} else {
		destination.SourceVault = nil
	}

	// VaultCertificates
	if group.VaultCertificates != nil {
		vaultCertificateList := make([]v1alpha1api20201201storage.VaultCertificate_Status, len(group.VaultCertificates))
		for vaultCertificateIndex, vaultCertificateItem := range group.VaultCertificates {
			// Shadow the loop variable to avoid aliasing
			vaultCertificateItem := vaultCertificateItem
			var vaultCertificate v1alpha1api20201201storage.VaultCertificate_Status
			err := vaultCertificateItem.AssignPropertiesToVaultCertificateStatus(&vaultCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVaultCertificateStatus() to populate field VaultCertificates")
			}
			vaultCertificateList[vaultCertificateIndex] = vaultCertificate
		}
		destination.VaultCertificates = vaultCertificateList
	} else {
		destination.VaultCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineAgentInstanceView_Status struct {
	//ExtensionHandlers: The virtual machine extension handler instance view.
	ExtensionHandlers []VirtualMachineExtensionHandlerInstanceView_Status `json:"extensionHandlers,omitempty"`

	//Statuses: The resource status information.
	Statuses []InstanceViewStatus_Status `json:"statuses,omitempty"`

	//VmAgentVersion: The VM Agent full version.
	VmAgentVersion *string `json:"vmAgentVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineAgentInstanceView_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *VirtualMachineAgentInstanceView_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineAgentInstanceView_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *VirtualMachineAgentInstanceView_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineAgentInstanceView_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineAgentInstanceView_StatusARM, got %T", armInput)
	}

	// Set property ‘ExtensionHandlers’:
	for _, item := range typedInput.ExtensionHandlers {
		var item1 VirtualMachineExtensionHandlerInstanceView_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.ExtensionHandlers = append(view.ExtensionHandlers, item1)
	}

	// Set property ‘Statuses’:
	for _, item := range typedInput.Statuses {
		var item1 InstanceViewStatus_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Statuses = append(view.Statuses, item1)
	}

	// Set property ‘VmAgentVersion’:
	if typedInput.VmAgentVersion != nil {
		vmAgentVersion := *typedInput.VmAgentVersion
		view.VmAgentVersion = &vmAgentVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineAgentInstanceViewStatus populates our VirtualMachineAgentInstanceView_Status from the provided source VirtualMachineAgentInstanceView_Status
func (view *VirtualMachineAgentInstanceView_Status) AssignPropertiesFromVirtualMachineAgentInstanceViewStatus(source *v1alpha1api20201201storage.VirtualMachineAgentInstanceView_Status) error {

	// ExtensionHandlers
	if source.ExtensionHandlers != nil {
		extensionHandlerList := make([]VirtualMachineExtensionHandlerInstanceView_Status, len(source.ExtensionHandlers))
		for extensionHandlerIndex, extensionHandlerItem := range source.ExtensionHandlers {
			// Shadow the loop variable to avoid aliasing
			extensionHandlerItem := extensionHandlerItem
			var extensionHandler VirtualMachineExtensionHandlerInstanceView_Status
			err := extensionHandler.AssignPropertiesFromVirtualMachineExtensionHandlerInstanceViewStatus(&extensionHandlerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineExtensionHandlerInstanceViewStatus() to populate field ExtensionHandlers")
			}
			extensionHandlerList[extensionHandlerIndex] = extensionHandler
		}
		view.ExtensionHandlers = extensionHandlerList
	} else {
		view.ExtensionHandlers = nil
	}

	// Statuses
	if source.Statuses != nil {
		statusList := make([]InstanceViewStatus_Status, len(source.Statuses))
		for statusIndex, statusItem := range source.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status InstanceViewStatus_Status
			err := status.AssignPropertiesFromInstanceViewStatusStatus(&statusItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		view.Statuses = statusList
	} else {
		view.Statuses = nil
	}

	// VmAgentVersion
	view.VmAgentVersion = genruntime.ClonePointerToString(source.VmAgentVersion)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineAgentInstanceViewStatus populates the provided destination VirtualMachineAgentInstanceView_Status from our VirtualMachineAgentInstanceView_Status
func (view *VirtualMachineAgentInstanceView_Status) AssignPropertiesToVirtualMachineAgentInstanceViewStatus(destination *v1alpha1api20201201storage.VirtualMachineAgentInstanceView_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtensionHandlers
	if view.ExtensionHandlers != nil {
		extensionHandlerList := make([]v1alpha1api20201201storage.VirtualMachineExtensionHandlerInstanceView_Status, len(view.ExtensionHandlers))
		for extensionHandlerIndex, extensionHandlerItem := range view.ExtensionHandlers {
			// Shadow the loop variable to avoid aliasing
			extensionHandlerItem := extensionHandlerItem
			var extensionHandler v1alpha1api20201201storage.VirtualMachineExtensionHandlerInstanceView_Status
			err := extensionHandlerItem.AssignPropertiesToVirtualMachineExtensionHandlerInstanceViewStatus(&extensionHandler)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineExtensionHandlerInstanceViewStatus() to populate field ExtensionHandlers")
			}
			extensionHandlerList[extensionHandlerIndex] = extensionHandler
		}
		destination.ExtensionHandlers = extensionHandlerList
	} else {
		destination.ExtensionHandlers = nil
	}

	// Statuses
	if view.Statuses != nil {
		statusList := make([]v1alpha1api20201201storage.InstanceViewStatus_Status, len(view.Statuses))
		for statusIndex, statusItem := range view.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status v1alpha1api20201201storage.InstanceViewStatus_Status
			err := statusItem.AssignPropertiesToInstanceViewStatusStatus(&status)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		destination.Statuses = statusList
	} else {
		destination.Statuses = nil
	}

	// VmAgentVersion
	destination.VmAgentVersion = genruntime.ClonePointerToString(view.VmAgentVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineExtensionInstanceView_Status struct {
	//Name: The virtual machine extension name.
	Name *string `json:"name,omitempty"`

	//Statuses: The resource status information.
	Statuses []InstanceViewStatus_Status `json:"statuses,omitempty"`

	//Substatuses: The resource status information.
	Substatuses []InstanceViewStatus_Status `json:"substatuses,omitempty"`

	//Type: Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `json:"type,omitempty"`

	//TypeHandlerVersion: Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineExtensionInstanceView_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *VirtualMachineExtensionInstanceView_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineExtensionInstanceView_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *VirtualMachineExtensionInstanceView_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineExtensionInstanceView_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineExtensionInstanceView_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		view.Name = &name
	}

	// Set property ‘Statuses’:
	for _, item := range typedInput.Statuses {
		var item1 InstanceViewStatus_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Statuses = append(view.Statuses, item1)
	}

	// Set property ‘Substatuses’:
	for _, item := range typedInput.Substatuses {
		var item1 InstanceViewStatus_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Substatuses = append(view.Substatuses, item1)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		view.Type = &typeVar
	}

	// Set property ‘TypeHandlerVersion’:
	if typedInput.TypeHandlerVersion != nil {
		typeHandlerVersion := *typedInput.TypeHandlerVersion
		view.TypeHandlerVersion = &typeHandlerVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineExtensionInstanceViewStatus populates our VirtualMachineExtensionInstanceView_Status from the provided source VirtualMachineExtensionInstanceView_Status
func (view *VirtualMachineExtensionInstanceView_Status) AssignPropertiesFromVirtualMachineExtensionInstanceViewStatus(source *v1alpha1api20201201storage.VirtualMachineExtensionInstanceView_Status) error {

	// Name
	view.Name = genruntime.ClonePointerToString(source.Name)

	// Statuses
	if source.Statuses != nil {
		statusList := make([]InstanceViewStatus_Status, len(source.Statuses))
		for statusIndex, statusItem := range source.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status InstanceViewStatus_Status
			err := status.AssignPropertiesFromInstanceViewStatusStatus(&statusItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		view.Statuses = statusList
	} else {
		view.Statuses = nil
	}

	// Substatuses
	if source.Substatuses != nil {
		substatusList := make([]InstanceViewStatus_Status, len(source.Substatuses))
		for substatusIndex, substatusItem := range source.Substatuses {
			// Shadow the loop variable to avoid aliasing
			substatusItem := substatusItem
			var substatus InstanceViewStatus_Status
			err := substatus.AssignPropertiesFromInstanceViewStatusStatus(&substatusItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Substatuses")
			}
			substatusList[substatusIndex] = substatus
		}
		view.Substatuses = substatusList
	} else {
		view.Substatuses = nil
	}

	// Type
	view.Type = genruntime.ClonePointerToString(source.Type)

	// TypeHandlerVersion
	view.TypeHandlerVersion = genruntime.ClonePointerToString(source.TypeHandlerVersion)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineExtensionInstanceViewStatus populates the provided destination VirtualMachineExtensionInstanceView_Status from our VirtualMachineExtensionInstanceView_Status
func (view *VirtualMachineExtensionInstanceView_Status) AssignPropertiesToVirtualMachineExtensionInstanceViewStatus(destination *v1alpha1api20201201storage.VirtualMachineExtensionInstanceView_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(view.Name)

	// Statuses
	if view.Statuses != nil {
		statusList := make([]v1alpha1api20201201storage.InstanceViewStatus_Status, len(view.Statuses))
		for statusIndex, statusItem := range view.Statuses {
			// Shadow the loop variable to avoid aliasing
			statusItem := statusItem
			var status v1alpha1api20201201storage.InstanceViewStatus_Status
			err := statusItem.AssignPropertiesToInstanceViewStatusStatus(&status)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		destination.Statuses = statusList
	} else {
		destination.Statuses = nil
	}

	// Substatuses
	if view.Substatuses != nil {
		substatusList := make([]v1alpha1api20201201storage.InstanceViewStatus_Status, len(view.Substatuses))
		for substatusIndex, substatusItem := range view.Substatuses {
			// Shadow the loop variable to avoid aliasing
			substatusItem := substatusItem
			var substatus v1alpha1api20201201storage.InstanceViewStatus_Status
			err := substatusItem.AssignPropertiesToInstanceViewStatusStatus(&substatus)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Substatuses")
			}
			substatusList[substatusIndex] = substatus
		}
		destination.Substatuses = substatusList
	} else {
		destination.Substatuses = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(view.Type)

	// TypeHandlerVersion
	destination.TypeHandlerVersion = genruntime.ClonePointerToString(view.TypeHandlerVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineHealthStatus_Status struct {
	//Status: The health status information for the VM.
	Status *InstanceViewStatus_Status `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineHealthStatus_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (health *VirtualMachineHealthStatus_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineHealthStatus_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (health *VirtualMachineHealthStatus_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineHealthStatus_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineHealthStatus_StatusARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		var status1 InstanceViewStatus_Status
		err := status1.PopulateFromARM(owner, *typedInput.Status)
		if err != nil {
			return err
		}
		status := status1
		health.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineHealthStatusStatus populates our VirtualMachineHealthStatus_Status from the provided source VirtualMachineHealthStatus_Status
func (health *VirtualMachineHealthStatus_Status) AssignPropertiesFromVirtualMachineHealthStatusStatus(source *v1alpha1api20201201storage.VirtualMachineHealthStatus_Status) error {

	// Status
	if source.Status != nil {
		var status InstanceViewStatus_Status
		err := status.AssignPropertiesFromInstanceViewStatusStatus(source.Status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Status")
		}
		health.Status = &status
	} else {
		health.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineHealthStatusStatus populates the provided destination VirtualMachineHealthStatus_Status from our VirtualMachineHealthStatus_Status
func (health *VirtualMachineHealthStatus_Status) AssignPropertiesToVirtualMachineHealthStatusStatus(destination *v1alpha1api20201201storage.VirtualMachineHealthStatus_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if health.Status != nil {
		var status v1alpha1api20201201storage.InstanceViewStatus_Status
		err := health.Status.AssignPropertiesToInstanceViewStatusStatus(&status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Status")
		}
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineIdentity_Status_UserAssignedIdentities struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineIdentity_Status_UserAssignedIdentities{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identities *VirtualMachineIdentity_Status_UserAssignedIdentities) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineIdentity_Status_UserAssignedIdentitiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identities *VirtualMachineIdentity_Status_UserAssignedIdentities) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineIdentity_Status_UserAssignedIdentitiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineIdentity_Status_UserAssignedIdentitiesARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identities.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identities.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineIdentityStatusUserAssignedIdentities populates our VirtualMachineIdentity_Status_UserAssignedIdentities from the provided source VirtualMachineIdentity_Status_UserAssignedIdentities
func (identities *VirtualMachineIdentity_Status_UserAssignedIdentities) AssignPropertiesFromVirtualMachineIdentityStatusUserAssignedIdentities(source *v1alpha1api20201201storage.VirtualMachineIdentity_Status_UserAssignedIdentities) error {

	// ClientId
	identities.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identities.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineIdentityStatusUserAssignedIdentities populates the provided destination VirtualMachineIdentity_Status_UserAssignedIdentities from our VirtualMachineIdentity_Status_UserAssignedIdentities
func (identities *VirtualMachineIdentity_Status_UserAssignedIdentities) AssignPropertiesToVirtualMachineIdentityStatusUserAssignedIdentities(destination *v1alpha1api20201201storage.VirtualMachineIdentity_Status_UserAssignedIdentities) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identities.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identities.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineInstanceViewStatusHyperVGeneration string

const (
	VirtualMachineInstanceViewStatusHyperVGenerationV1 = VirtualMachineInstanceViewStatusHyperVGeneration("V1")
	VirtualMachineInstanceViewStatusHyperVGenerationV2 = VirtualMachineInstanceViewStatusHyperVGeneration("V2")
)

type VirtualMachinePatchStatus_Status struct {
	//AvailablePatchSummary: The available patch summary of the latest assessment
	//operation for the virtual machine.
	AvailablePatchSummary *AvailablePatchSummary_Status `json:"availablePatchSummary,omitempty"`

	//ConfigurationStatuses: The enablement status of the specified patchMode
	ConfigurationStatuses []InstanceViewStatus_Status `json:"configurationStatuses,omitempty"`

	//LastPatchInstallationSummary: The installation summary of the latest
	//installation operation for the virtual machine.
	LastPatchInstallationSummary *LastPatchInstallationSummary_Status `json:"lastPatchInstallationSummary,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachinePatchStatus_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (patch *VirtualMachinePatchStatus_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachinePatchStatus_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (patch *VirtualMachinePatchStatus_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachinePatchStatus_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachinePatchStatus_StatusARM, got %T", armInput)
	}

	// Set property ‘AvailablePatchSummary’:
	if typedInput.AvailablePatchSummary != nil {
		var availablePatchSummary1 AvailablePatchSummary_Status
		err := availablePatchSummary1.PopulateFromARM(owner, *typedInput.AvailablePatchSummary)
		if err != nil {
			return err
		}
		availablePatchSummary := availablePatchSummary1
		patch.AvailablePatchSummary = &availablePatchSummary
	}

	// Set property ‘ConfigurationStatuses’:
	for _, item := range typedInput.ConfigurationStatuses {
		var item1 InstanceViewStatus_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		patch.ConfigurationStatuses = append(patch.ConfigurationStatuses, item1)
	}

	// Set property ‘LastPatchInstallationSummary’:
	if typedInput.LastPatchInstallationSummary != nil {
		var lastPatchInstallationSummary1 LastPatchInstallationSummary_Status
		err := lastPatchInstallationSummary1.PopulateFromARM(owner, *typedInput.LastPatchInstallationSummary)
		if err != nil {
			return err
		}
		lastPatchInstallationSummary := lastPatchInstallationSummary1
		patch.LastPatchInstallationSummary = &lastPatchInstallationSummary
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachinePatchStatusStatus populates our VirtualMachinePatchStatus_Status from the provided source VirtualMachinePatchStatus_Status
func (patch *VirtualMachinePatchStatus_Status) AssignPropertiesFromVirtualMachinePatchStatusStatus(source *v1alpha1api20201201storage.VirtualMachinePatchStatus_Status) error {

	// AvailablePatchSummary
	if source.AvailablePatchSummary != nil {
		var availablePatchSummary AvailablePatchSummary_Status
		err := availablePatchSummary.AssignPropertiesFromAvailablePatchSummaryStatus(source.AvailablePatchSummary)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAvailablePatchSummaryStatus() to populate field AvailablePatchSummary")
		}
		patch.AvailablePatchSummary = &availablePatchSummary
	} else {
		patch.AvailablePatchSummary = nil
	}

	// ConfigurationStatuses
	if source.ConfigurationStatuses != nil {
		configurationStatusList := make([]InstanceViewStatus_Status, len(source.ConfigurationStatuses))
		for configurationStatusIndex, configurationStatusItem := range source.ConfigurationStatuses {
			// Shadow the loop variable to avoid aliasing
			configurationStatusItem := configurationStatusItem
			var configurationStatus InstanceViewStatus_Status
			err := configurationStatus.AssignPropertiesFromInstanceViewStatusStatus(&configurationStatusItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field ConfigurationStatuses")
			}
			configurationStatusList[configurationStatusIndex] = configurationStatus
		}
		patch.ConfigurationStatuses = configurationStatusList
	} else {
		patch.ConfigurationStatuses = nil
	}

	// LastPatchInstallationSummary
	if source.LastPatchInstallationSummary != nil {
		var lastPatchInstallationSummary LastPatchInstallationSummary_Status
		err := lastPatchInstallationSummary.AssignPropertiesFromLastPatchInstallationSummaryStatus(source.LastPatchInstallationSummary)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLastPatchInstallationSummaryStatus() to populate field LastPatchInstallationSummary")
		}
		patch.LastPatchInstallationSummary = &lastPatchInstallationSummary
	} else {
		patch.LastPatchInstallationSummary = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualMachinePatchStatusStatus populates the provided destination VirtualMachinePatchStatus_Status from our VirtualMachinePatchStatus_Status
func (patch *VirtualMachinePatchStatus_Status) AssignPropertiesToVirtualMachinePatchStatusStatus(destination *v1alpha1api20201201storage.VirtualMachinePatchStatus_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AvailablePatchSummary
	if patch.AvailablePatchSummary != nil {
		var availablePatchSummary v1alpha1api20201201storage.AvailablePatchSummary_Status
		err := patch.AvailablePatchSummary.AssignPropertiesToAvailablePatchSummaryStatus(&availablePatchSummary)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAvailablePatchSummaryStatus() to populate field AvailablePatchSummary")
		}
		destination.AvailablePatchSummary = &availablePatchSummary
	} else {
		destination.AvailablePatchSummary = nil
	}

	// ConfigurationStatuses
	if patch.ConfigurationStatuses != nil {
		configurationStatusList := make([]v1alpha1api20201201storage.InstanceViewStatus_Status, len(patch.ConfigurationStatuses))
		for configurationStatusIndex, configurationStatusItem := range patch.ConfigurationStatuses {
			// Shadow the loop variable to avoid aliasing
			configurationStatusItem := configurationStatusItem
			var configurationStatus v1alpha1api20201201storage.InstanceViewStatus_Status
			err := configurationStatusItem.AssignPropertiesToInstanceViewStatusStatus(&configurationStatus)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field ConfigurationStatuses")
			}
			configurationStatusList[configurationStatusIndex] = configurationStatus
		}
		destination.ConfigurationStatuses = configurationStatusList
	} else {
		destination.ConfigurationStatuses = nil
	}

	// LastPatchInstallationSummary
	if patch.LastPatchInstallationSummary != nil {
		var lastPatchInstallationSummary v1alpha1api20201201storage.LastPatchInstallationSummary_Status
		err := patch.LastPatchInstallationSummary.AssignPropertiesToLastPatchInstallationSummaryStatus(&lastPatchInstallationSummary)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLastPatchInstallationSummaryStatus() to populate field LastPatchInstallationSummary")
		}
		destination.LastPatchInstallationSummary = &lastPatchInstallationSummary
	} else {
		destination.LastPatchInstallationSummary = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WindowsConfiguration_Spec struct {
	//AdditionalUnattendContent: Specifies additional base-64 encoded XML formatted
	//information that can be included in the Unattend.xml file, which is used by
	//Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContent_Spec `json:"additionalUnattendContent,omitempty"`

	//EnableAutomaticUpdates: Indicates whether Automatic Updates is enabled for the
	//Windows virtual machine. Default value is true.
	//For virtual machine scale sets, this property can be updated and updates will
	//take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty"`

	//PatchSettings: [Preview Feature] Specifies settings related to VM Guest Patching
	//on Windows.
	PatchSettings *PatchSettings_Spec `json:"patchSettings,omitempty"`

	//ProvisionVMAgent: Indicates whether virtual machine agent should be provisioned
	//on the virtual machine.
	//When this property is not specified in the request body, default behavior is to
	//set it to true.  This will ensure that VM Agent is installed on the VM so that
	//extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	//TimeZone: Specifies the time zone of the virtual machine. e.g. "Pacific Standard
	//Time".
	//Possible values can be
	//[TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id)
	//value from time zones returned by
	//[TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone *string `json:"timeZone,omitempty"`

	//WinRM: Specifies the Windows Remote Management listeners. This enables remote
	//Windows PowerShell.
	WinRM *WinRMConfiguration_Spec `json:"winRM,omitempty"`
}

var _ genruntime.ARMTransformer = &WindowsConfiguration_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *WindowsConfiguration_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result WindowsConfiguration_SpecARM

	// Set property ‘AdditionalUnattendContent’:
	for _, item := range configuration.AdditionalUnattendContent {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.AdditionalUnattendContent = append(result.AdditionalUnattendContent, itemARM.(AdditionalUnattendContent_SpecARM))
	}

	// Set property ‘EnableAutomaticUpdates’:
	if configuration.EnableAutomaticUpdates != nil {
		enableAutomaticUpdates := *configuration.EnableAutomaticUpdates
		result.EnableAutomaticUpdates = &enableAutomaticUpdates
	}

	// Set property ‘PatchSettings’:
	if configuration.PatchSettings != nil {
		patchSettingsARM, err := (*configuration.PatchSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		patchSettings := patchSettingsARM.(PatchSettings_SpecARM)
		result.PatchSettings = &patchSettings
	}

	// Set property ‘ProvisionVMAgent’:
	if configuration.ProvisionVMAgent != nil {
		provisionVMAgent := *configuration.ProvisionVMAgent
		result.ProvisionVMAgent = &provisionVMAgent
	}

	// Set property ‘TimeZone’:
	if configuration.TimeZone != nil {
		timeZone := *configuration.TimeZone
		result.TimeZone = &timeZone
	}

	// Set property ‘WinRM’:
	if configuration.WinRM != nil {
		winRMARM, err := (*configuration.WinRM).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		winRM := winRMARM.(WinRMConfiguration_SpecARM)
		result.WinRM = &winRM
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WindowsConfiguration_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WindowsConfiguration_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WindowsConfiguration_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WindowsConfiguration_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WindowsConfiguration_SpecARM, got %T", armInput)
	}

	// Set property ‘AdditionalUnattendContent’:
	for _, item := range typedInput.AdditionalUnattendContent {
		var item1 AdditionalUnattendContent_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.AdditionalUnattendContent = append(configuration.AdditionalUnattendContent, item1)
	}

	// Set property ‘EnableAutomaticUpdates’:
	if typedInput.EnableAutomaticUpdates != nil {
		enableAutomaticUpdates := *typedInput.EnableAutomaticUpdates
		configuration.EnableAutomaticUpdates = &enableAutomaticUpdates
	}

	// Set property ‘PatchSettings’:
	if typedInput.PatchSettings != nil {
		var patchSettings1 PatchSettings_Spec
		err := patchSettings1.PopulateFromARM(owner, *typedInput.PatchSettings)
		if err != nil {
			return err
		}
		patchSettings := patchSettings1
		configuration.PatchSettings = &patchSettings
	}

	// Set property ‘ProvisionVMAgent’:
	if typedInput.ProvisionVMAgent != nil {
		provisionVMAgent := *typedInput.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	}

	// Set property ‘TimeZone’:
	if typedInput.TimeZone != nil {
		timeZone := *typedInput.TimeZone
		configuration.TimeZone = &timeZone
	}

	// Set property ‘WinRM’:
	if typedInput.WinRM != nil {
		var winRM1 WinRMConfiguration_Spec
		err := winRM1.PopulateFromARM(owner, *typedInput.WinRM)
		if err != nil {
			return err
		}
		winRM := winRM1
		configuration.WinRM = &winRM
	}

	// No error
	return nil
}

// AssignPropertiesFromWindowsConfigurationSpec populates our WindowsConfiguration_Spec from the provided source WindowsConfiguration_Spec
func (configuration *WindowsConfiguration_Spec) AssignPropertiesFromWindowsConfigurationSpec(source *v1alpha1api20201201storage.WindowsConfiguration_Spec) error {

	// AdditionalUnattendContent
	if source.AdditionalUnattendContent != nil {
		additionalUnattendContentList := make([]AdditionalUnattendContent_Spec, len(source.AdditionalUnattendContent))
		for additionalUnattendContentIndex, additionalUnattendContentItem := range source.AdditionalUnattendContent {
			// Shadow the loop variable to avoid aliasing
			additionalUnattendContentItem := additionalUnattendContentItem
			var additionalUnattendContent AdditionalUnattendContent_Spec
			err := additionalUnattendContent.AssignPropertiesFromAdditionalUnattendContentSpec(&additionalUnattendContentItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdditionalUnattendContentSpec() to populate field AdditionalUnattendContent")
			}
			additionalUnattendContentList[additionalUnattendContentIndex] = additionalUnattendContent
		}
		configuration.AdditionalUnattendContent = additionalUnattendContentList
	} else {
		configuration.AdditionalUnattendContent = nil
	}

	// EnableAutomaticUpdates
	if source.EnableAutomaticUpdates != nil {
		enableAutomaticUpdate := *source.EnableAutomaticUpdates
		configuration.EnableAutomaticUpdates = &enableAutomaticUpdate
	} else {
		configuration.EnableAutomaticUpdates = nil
	}

	// PatchSettings
	if source.PatchSettings != nil {
		var patchSetting PatchSettings_Spec
		err := patchSetting.AssignPropertiesFromPatchSettingsSpec(source.PatchSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPatchSettingsSpec() to populate field PatchSettings")
		}
		configuration.PatchSettings = &patchSetting
	} else {
		configuration.PatchSettings = nil
	}

	// ProvisionVMAgent
	if source.ProvisionVMAgent != nil {
		provisionVMAgent := *source.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	} else {
		configuration.ProvisionVMAgent = nil
	}

	// TimeZone
	configuration.TimeZone = genruntime.ClonePointerToString(source.TimeZone)

	// WinRM
	if source.WinRM != nil {
		var winRM WinRMConfiguration_Spec
		err := winRM.AssignPropertiesFromWinRMConfigurationSpec(source.WinRM)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWinRMConfigurationSpec() to populate field WinRM")
		}
		configuration.WinRM = &winRM
	} else {
		configuration.WinRM = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWindowsConfigurationSpec populates the provided destination WindowsConfiguration_Spec from our WindowsConfiguration_Spec
func (configuration *WindowsConfiguration_Spec) AssignPropertiesToWindowsConfigurationSpec(destination *v1alpha1api20201201storage.WindowsConfiguration_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalUnattendContent
	if configuration.AdditionalUnattendContent != nil {
		additionalUnattendContentList := make([]v1alpha1api20201201storage.AdditionalUnattendContent_Spec, len(configuration.AdditionalUnattendContent))
		for additionalUnattendContentIndex, additionalUnattendContentItem := range configuration.AdditionalUnattendContent {
			// Shadow the loop variable to avoid aliasing
			additionalUnattendContentItem := additionalUnattendContentItem
			var additionalUnattendContent v1alpha1api20201201storage.AdditionalUnattendContent_Spec
			err := additionalUnattendContentItem.AssignPropertiesToAdditionalUnattendContentSpec(&additionalUnattendContent)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdditionalUnattendContentSpec() to populate field AdditionalUnattendContent")
			}
			additionalUnattendContentList[additionalUnattendContentIndex] = additionalUnattendContent
		}
		destination.AdditionalUnattendContent = additionalUnattendContentList
	} else {
		destination.AdditionalUnattendContent = nil
	}

	// EnableAutomaticUpdates
	if configuration.EnableAutomaticUpdates != nil {
		enableAutomaticUpdate := *configuration.EnableAutomaticUpdates
		destination.EnableAutomaticUpdates = &enableAutomaticUpdate
	} else {
		destination.EnableAutomaticUpdates = nil
	}

	// PatchSettings
	if configuration.PatchSettings != nil {
		var patchSetting v1alpha1api20201201storage.PatchSettings_Spec
		err := configuration.PatchSettings.AssignPropertiesToPatchSettingsSpec(&patchSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPatchSettingsSpec() to populate field PatchSettings")
		}
		destination.PatchSettings = &patchSetting
	} else {
		destination.PatchSettings = nil
	}

	// ProvisionVMAgent
	if configuration.ProvisionVMAgent != nil {
		provisionVMAgent := *configuration.ProvisionVMAgent
		destination.ProvisionVMAgent = &provisionVMAgent
	} else {
		destination.ProvisionVMAgent = nil
	}

	// TimeZone
	destination.TimeZone = genruntime.ClonePointerToString(configuration.TimeZone)

	// WinRM
	if configuration.WinRM != nil {
		var winRM v1alpha1api20201201storage.WinRMConfiguration_Spec
		err := configuration.WinRM.AssignPropertiesToWinRMConfigurationSpec(&winRM)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWinRMConfigurationSpec() to populate field WinRM")
		}
		destination.WinRM = &winRM
	} else {
		destination.WinRM = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WindowsConfiguration_Status struct {
	//AdditionalUnattendContent: Specifies additional base-64 encoded XML formatted
	//information that can be included in the Unattend.xml file, which is used by
	//Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContent_Status `json:"additionalUnattendContent,omitempty"`

	//EnableAutomaticUpdates: Indicates whether Automatic Updates is enabled for the
	//Windows virtual machine. Default value is true.
	//For virtual machine scale sets, this property can be updated and updates will
	//take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty"`

	//PatchSettings: [Preview Feature] Specifies settings related to VM Guest Patching
	//on Windows.
	PatchSettings *PatchSettings_Status `json:"patchSettings,omitempty"`

	//ProvisionVMAgent: Indicates whether virtual machine agent should be provisioned
	//on the virtual machine.
	//When this property is not specified in the request body, default behavior is to
	//set it to true.  This will ensure that VM Agent is installed on the VM so that
	//extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	//TimeZone: Specifies the time zone of the virtual machine. e.g. "Pacific Standard
	//Time".
	//Possible values can be
	//[TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id)
	//value from time zones returned by
	//[TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone *string `json:"timeZone,omitempty"`

	//WinRM: Specifies the Windows Remote Management listeners. This enables remote
	//Windows PowerShell.
	WinRM *WinRMConfiguration_Status `json:"winRM,omitempty"`
}

var _ genruntime.FromARMConverter = &WindowsConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WindowsConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WindowsConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WindowsConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WindowsConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WindowsConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘AdditionalUnattendContent’:
	for _, item := range typedInput.AdditionalUnattendContent {
		var item1 AdditionalUnattendContent_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.AdditionalUnattendContent = append(configuration.AdditionalUnattendContent, item1)
	}

	// Set property ‘EnableAutomaticUpdates’:
	if typedInput.EnableAutomaticUpdates != nil {
		enableAutomaticUpdates := *typedInput.EnableAutomaticUpdates
		configuration.EnableAutomaticUpdates = &enableAutomaticUpdates
	}

	// Set property ‘PatchSettings’:
	if typedInput.PatchSettings != nil {
		var patchSettings1 PatchSettings_Status
		err := patchSettings1.PopulateFromARM(owner, *typedInput.PatchSettings)
		if err != nil {
			return err
		}
		patchSettings := patchSettings1
		configuration.PatchSettings = &patchSettings
	}

	// Set property ‘ProvisionVMAgent’:
	if typedInput.ProvisionVMAgent != nil {
		provisionVMAgent := *typedInput.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	}

	// Set property ‘TimeZone’:
	if typedInput.TimeZone != nil {
		timeZone := *typedInput.TimeZone
		configuration.TimeZone = &timeZone
	}

	// Set property ‘WinRM’:
	if typedInput.WinRM != nil {
		var winRM1 WinRMConfiguration_Status
		err := winRM1.PopulateFromARM(owner, *typedInput.WinRM)
		if err != nil {
			return err
		}
		winRM := winRM1
		configuration.WinRM = &winRM
	}

	// No error
	return nil
}

// AssignPropertiesFromWindowsConfigurationStatus populates our WindowsConfiguration_Status from the provided source WindowsConfiguration_Status
func (configuration *WindowsConfiguration_Status) AssignPropertiesFromWindowsConfigurationStatus(source *v1alpha1api20201201storage.WindowsConfiguration_Status) error {

	// AdditionalUnattendContent
	if source.AdditionalUnattendContent != nil {
		additionalUnattendContentList := make([]AdditionalUnattendContent_Status, len(source.AdditionalUnattendContent))
		for additionalUnattendContentIndex, additionalUnattendContentItem := range source.AdditionalUnattendContent {
			// Shadow the loop variable to avoid aliasing
			additionalUnattendContentItem := additionalUnattendContentItem
			var additionalUnattendContent AdditionalUnattendContent_Status
			err := additionalUnattendContent.AssignPropertiesFromAdditionalUnattendContentStatus(&additionalUnattendContentItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromAdditionalUnattendContentStatus() to populate field AdditionalUnattendContent")
			}
			additionalUnattendContentList[additionalUnattendContentIndex] = additionalUnattendContent
		}
		configuration.AdditionalUnattendContent = additionalUnattendContentList
	} else {
		configuration.AdditionalUnattendContent = nil
	}

	// EnableAutomaticUpdates
	if source.EnableAutomaticUpdates != nil {
		enableAutomaticUpdate := *source.EnableAutomaticUpdates
		configuration.EnableAutomaticUpdates = &enableAutomaticUpdate
	} else {
		configuration.EnableAutomaticUpdates = nil
	}

	// PatchSettings
	if source.PatchSettings != nil {
		var patchSetting PatchSettings_Status
		err := patchSetting.AssignPropertiesFromPatchSettingsStatus(source.PatchSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPatchSettingsStatus() to populate field PatchSettings")
		}
		configuration.PatchSettings = &patchSetting
	} else {
		configuration.PatchSettings = nil
	}

	// ProvisionVMAgent
	if source.ProvisionVMAgent != nil {
		provisionVMAgent := *source.ProvisionVMAgent
		configuration.ProvisionVMAgent = &provisionVMAgent
	} else {
		configuration.ProvisionVMAgent = nil
	}

	// TimeZone
	configuration.TimeZone = genruntime.ClonePointerToString(source.TimeZone)

	// WinRM
	if source.WinRM != nil {
		var winRM WinRMConfiguration_Status
		err := winRM.AssignPropertiesFromWinRMConfigurationStatus(source.WinRM)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromWinRMConfigurationStatus() to populate field WinRM")
		}
		configuration.WinRM = &winRM
	} else {
		configuration.WinRM = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWindowsConfigurationStatus populates the provided destination WindowsConfiguration_Status from our WindowsConfiguration_Status
func (configuration *WindowsConfiguration_Status) AssignPropertiesToWindowsConfigurationStatus(destination *v1alpha1api20201201storage.WindowsConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalUnattendContent
	if configuration.AdditionalUnattendContent != nil {
		additionalUnattendContentList := make([]v1alpha1api20201201storage.AdditionalUnattendContent_Status, len(configuration.AdditionalUnattendContent))
		for additionalUnattendContentIndex, additionalUnattendContentItem := range configuration.AdditionalUnattendContent {
			// Shadow the loop variable to avoid aliasing
			additionalUnattendContentItem := additionalUnattendContentItem
			var additionalUnattendContent v1alpha1api20201201storage.AdditionalUnattendContent_Status
			err := additionalUnattendContentItem.AssignPropertiesToAdditionalUnattendContentStatus(&additionalUnattendContent)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToAdditionalUnattendContentStatus() to populate field AdditionalUnattendContent")
			}
			additionalUnattendContentList[additionalUnattendContentIndex] = additionalUnattendContent
		}
		destination.AdditionalUnattendContent = additionalUnattendContentList
	} else {
		destination.AdditionalUnattendContent = nil
	}

	// EnableAutomaticUpdates
	if configuration.EnableAutomaticUpdates != nil {
		enableAutomaticUpdate := *configuration.EnableAutomaticUpdates
		destination.EnableAutomaticUpdates = &enableAutomaticUpdate
	} else {
		destination.EnableAutomaticUpdates = nil
	}

	// PatchSettings
	if configuration.PatchSettings != nil {
		var patchSetting v1alpha1api20201201storage.PatchSettings_Status
		err := configuration.PatchSettings.AssignPropertiesToPatchSettingsStatus(&patchSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPatchSettingsStatus() to populate field PatchSettings")
		}
		destination.PatchSettings = &patchSetting
	} else {
		destination.PatchSettings = nil
	}

	// ProvisionVMAgent
	if configuration.ProvisionVMAgent != nil {
		provisionVMAgent := *configuration.ProvisionVMAgent
		destination.ProvisionVMAgent = &provisionVMAgent
	} else {
		destination.ProvisionVMAgent = nil
	}

	// TimeZone
	destination.TimeZone = genruntime.ClonePointerToString(configuration.TimeZone)

	// WinRM
	if configuration.WinRM != nil {
		var winRM v1alpha1api20201201storage.WinRMConfiguration_Status
		err := configuration.WinRM.AssignPropertiesToWinRMConfigurationStatus(&winRM)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToWinRMConfigurationStatus() to populate field WinRM")
		}
		destination.WinRM = &winRM
	} else {
		destination.WinRM = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdditionalUnattendContent_Spec struct {
	//ComponentName: The component name. Currently, the only allowable value is
	//Microsoft-Windows-Shell-Setup.
	ComponentName *AdditionalUnattendContentSpecComponentName `json:"componentName,omitempty"`

	//Content: Specifies the XML formatted content that is added to the unattend.xml
	//file for the specified path and component. The XML must be less than 4KB and
	//must include the root element for the setting or feature that is being inserted.
	Content *string `json:"content,omitempty"`

	//PassName: The pass name. Currently, the only allowable value is OobeSystem.
	PassName *AdditionalUnattendContentSpecPassName `json:"passName,omitempty"`

	//SettingName: Specifies the name of the setting to which the content applies.
	//Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *AdditionalUnattendContentSpecSettingName `json:"settingName,omitempty"`
}

var _ genruntime.ARMTransformer = &AdditionalUnattendContent_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (content *AdditionalUnattendContent_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	var result AdditionalUnattendContent_SpecARM

	// Set property ‘ComponentName’:
	if content.ComponentName != nil {
		componentName := *content.ComponentName
		result.ComponentName = &componentName
	}

	// Set property ‘Content’:
	if content.Content != nil {
		content1 := *content.Content
		result.Content = &content1
	}

	// Set property ‘PassName’:
	if content.PassName != nil {
		passName := *content.PassName
		result.PassName = &passName
	}

	// Set property ‘SettingName’:
	if content.SettingName != nil {
		settingName := *content.SettingName
		result.SettingName = &settingName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (content *AdditionalUnattendContent_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdditionalUnattendContent_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (content *AdditionalUnattendContent_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdditionalUnattendContent_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdditionalUnattendContent_SpecARM, got %T", armInput)
	}

	// Set property ‘ComponentName’:
	if typedInput.ComponentName != nil {
		componentName := *typedInput.ComponentName
		content.ComponentName = &componentName
	}

	// Set property ‘Content’:
	if typedInput.Content != nil {
		content1 := *typedInput.Content
		content.Content = &content1
	}

	// Set property ‘PassName’:
	if typedInput.PassName != nil {
		passName := *typedInput.PassName
		content.PassName = &passName
	}

	// Set property ‘SettingName’:
	if typedInput.SettingName != nil {
		settingName := *typedInput.SettingName
		content.SettingName = &settingName
	}

	// No error
	return nil
}

// AssignPropertiesFromAdditionalUnattendContentSpec populates our AdditionalUnattendContent_Spec from the provided source AdditionalUnattendContent_Spec
func (content *AdditionalUnattendContent_Spec) AssignPropertiesFromAdditionalUnattendContentSpec(source *v1alpha1api20201201storage.AdditionalUnattendContent_Spec) error {

	// ComponentName
	if source.ComponentName != nil {
		componentName := AdditionalUnattendContentSpecComponentName(*source.ComponentName)
		content.ComponentName = &componentName
	} else {
		content.ComponentName = nil
	}

	// Content
	content.Content = genruntime.ClonePointerToString(source.Content)

	// PassName
	if source.PassName != nil {
		passName := AdditionalUnattendContentSpecPassName(*source.PassName)
		content.PassName = &passName
	} else {
		content.PassName = nil
	}

	// SettingName
	if source.SettingName != nil {
		settingName := AdditionalUnattendContentSpecSettingName(*source.SettingName)
		content.SettingName = &settingName
	} else {
		content.SettingName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdditionalUnattendContentSpec populates the provided destination AdditionalUnattendContent_Spec from our AdditionalUnattendContent_Spec
func (content *AdditionalUnattendContent_Spec) AssignPropertiesToAdditionalUnattendContentSpec(destination *v1alpha1api20201201storage.AdditionalUnattendContent_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ComponentName
	if content.ComponentName != nil {
		componentName := string(*content.ComponentName)
		destination.ComponentName = &componentName
	} else {
		destination.ComponentName = nil
	}

	// Content
	destination.Content = genruntime.ClonePointerToString(content.Content)

	// PassName
	if content.PassName != nil {
		passName := string(*content.PassName)
		destination.PassName = &passName
	} else {
		destination.PassName = nil
	}

	// SettingName
	if content.SettingName != nil {
		settingName := string(*content.SettingName)
		destination.SettingName = &settingName
	} else {
		destination.SettingName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdditionalUnattendContent_Status struct {
	//ComponentName: The component name. Currently, the only allowable value is
	//Microsoft-Windows-Shell-Setup.
	ComponentName *AdditionalUnattendContentStatusComponentName `json:"componentName,omitempty"`

	//Content: Specifies the XML formatted content that is added to the unattend.xml
	//file for the specified path and component. The XML must be less than 4KB and
	//must include the root element for the setting or feature that is being inserted.
	Content *string `json:"content,omitempty"`

	//PassName: The pass name. Currently, the only allowable value is OobeSystem.
	PassName *AdditionalUnattendContentStatusPassName `json:"passName,omitempty"`

	//SettingName: Specifies the name of the setting to which the content applies.
	//Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *AdditionalUnattendContentStatusSettingName `json:"settingName,omitempty"`
}

var _ genruntime.FromARMConverter = &AdditionalUnattendContent_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (content *AdditionalUnattendContent_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdditionalUnattendContent_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (content *AdditionalUnattendContent_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdditionalUnattendContent_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdditionalUnattendContent_StatusARM, got %T", armInput)
	}

	// Set property ‘ComponentName’:
	if typedInput.ComponentName != nil {
		componentName := *typedInput.ComponentName
		content.ComponentName = &componentName
	}

	// Set property ‘Content’:
	if typedInput.Content != nil {
		content1 := *typedInput.Content
		content.Content = &content1
	}

	// Set property ‘PassName’:
	if typedInput.PassName != nil {
		passName := *typedInput.PassName
		content.PassName = &passName
	}

	// Set property ‘SettingName’:
	if typedInput.SettingName != nil {
		settingName := *typedInput.SettingName
		content.SettingName = &settingName
	}

	// No error
	return nil
}

// AssignPropertiesFromAdditionalUnattendContentStatus populates our AdditionalUnattendContent_Status from the provided source AdditionalUnattendContent_Status
func (content *AdditionalUnattendContent_Status) AssignPropertiesFromAdditionalUnattendContentStatus(source *v1alpha1api20201201storage.AdditionalUnattendContent_Status) error {

	// ComponentName
	if source.ComponentName != nil {
		componentName := AdditionalUnattendContentStatusComponentName(*source.ComponentName)
		content.ComponentName = &componentName
	} else {
		content.ComponentName = nil
	}

	// Content
	content.Content = genruntime.ClonePointerToString(source.Content)

	// PassName
	if source.PassName != nil {
		passName := AdditionalUnattendContentStatusPassName(*source.PassName)
		content.PassName = &passName
	} else {
		content.PassName = nil
	}

	// SettingName
	if source.SettingName != nil {
		settingName := AdditionalUnattendContentStatusSettingName(*source.SettingName)
		content.SettingName = &settingName
	} else {
		content.SettingName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdditionalUnattendContentStatus populates the provided destination AdditionalUnattendContent_Status from our AdditionalUnattendContent_Status
func (content *AdditionalUnattendContent_Status) AssignPropertiesToAdditionalUnattendContentStatus(destination *v1alpha1api20201201storage.AdditionalUnattendContent_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ComponentName
	if content.ComponentName != nil {
		componentName := string(*content.ComponentName)
		destination.ComponentName = &componentName
	} else {
		destination.ComponentName = nil
	}

	// Content
	destination.Content = genruntime.ClonePointerToString(content.Content)

	// PassName
	if content.PassName != nil {
		passName := string(*content.PassName)
		destination.PassName = &passName
	} else {
		destination.PassName = nil
	}

	// SettingName
	if content.SettingName != nil {
		settingName := string(*content.SettingName)
		destination.SettingName = &settingName
	} else {
		destination.SettingName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AvailablePatchSummary_Status struct {
	//AssessmentActivityId: The activity ID of the operation that produced this
	//result. It is used to correlate across CRP and extension logs.
	AssessmentActivityId *string `json:"assessmentActivityId,omitempty"`

	//CriticalAndSecurityPatchCount: The number of critical or security patches that
	//have been detected as available and not yet installed.
	CriticalAndSecurityPatchCount *int `json:"criticalAndSecurityPatchCount,omitempty"`

	//Error: The errors that were encountered during execution of the operation. The
	//details array contains the list of them.
	Error *ApiError_Status `json:"error,omitempty"`

	//LastModifiedTime: The UTC timestamp when the operation began.
	LastModifiedTime *string `json:"lastModifiedTime,omitempty"`

	//OtherPatchCount: The number of all available patches excluding critical and
	//security.
	OtherPatchCount *int `json:"otherPatchCount,omitempty"`

	//RebootPending: The overall reboot status of the VM. It will be true when
	//partially installed patches require a reboot to complete installation but the
	//reboot has not yet occurred.
	RebootPending *bool `json:"rebootPending,omitempty"`

	//StartTime: The UTC timestamp when the operation began.
	StartTime *string `json:"startTime,omitempty"`

	//Status: The overall success or failure status of the operation. It remains
	//"InProgress" until the operation completes. At that point it will become
	//"Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
	Status *AvailablePatchSummaryStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &AvailablePatchSummary_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (summary *AvailablePatchSummary_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AvailablePatchSummary_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (summary *AvailablePatchSummary_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AvailablePatchSummary_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AvailablePatchSummary_StatusARM, got %T", armInput)
	}

	// Set property ‘AssessmentActivityId’:
	if typedInput.AssessmentActivityId != nil {
		assessmentActivityId := *typedInput.AssessmentActivityId
		summary.AssessmentActivityId = &assessmentActivityId
	}

	// Set property ‘CriticalAndSecurityPatchCount’:
	if typedInput.CriticalAndSecurityPatchCount != nil {
		criticalAndSecurityPatchCount := *typedInput.CriticalAndSecurityPatchCount
		summary.CriticalAndSecurityPatchCount = &criticalAndSecurityPatchCount
	}

	// Set property ‘Error’:
	if typedInput.Error != nil {
		var error1 ApiError_Status
		err := error1.PopulateFromARM(owner, *typedInput.Error)
		if err != nil {
			return err
		}
		error := error1
		summary.Error = &error
	}

	// Set property ‘LastModifiedTime’:
	if typedInput.LastModifiedTime != nil {
		lastModifiedTime := *typedInput.LastModifiedTime
		summary.LastModifiedTime = &lastModifiedTime
	}

	// Set property ‘OtherPatchCount’:
	if typedInput.OtherPatchCount != nil {
		otherPatchCount := *typedInput.OtherPatchCount
		summary.OtherPatchCount = &otherPatchCount
	}

	// Set property ‘RebootPending’:
	if typedInput.RebootPending != nil {
		rebootPending := *typedInput.RebootPending
		summary.RebootPending = &rebootPending
	}

	// Set property ‘StartTime’:
	if typedInput.StartTime != nil {
		startTime := *typedInput.StartTime
		summary.StartTime = &startTime
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		summary.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromAvailablePatchSummaryStatus populates our AvailablePatchSummary_Status from the provided source AvailablePatchSummary_Status
func (summary *AvailablePatchSummary_Status) AssignPropertiesFromAvailablePatchSummaryStatus(source *v1alpha1api20201201storage.AvailablePatchSummary_Status) error {

	// AssessmentActivityId
	summary.AssessmentActivityId = genruntime.ClonePointerToString(source.AssessmentActivityId)

	// CriticalAndSecurityPatchCount
	summary.CriticalAndSecurityPatchCount = genruntime.ClonePointerToInt(source.CriticalAndSecurityPatchCount)

	// Error
	if source.Error != nil {
		var error ApiError_Status
		err := error.AssignPropertiesFromApiErrorStatus(source.Error)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromApiErrorStatus() to populate field Error")
		}
		summary.Error = &error
	} else {
		summary.Error = nil
	}

	// LastModifiedTime
	summary.LastModifiedTime = genruntime.ClonePointerToString(source.LastModifiedTime)

	// OtherPatchCount
	summary.OtherPatchCount = genruntime.ClonePointerToInt(source.OtherPatchCount)

	// RebootPending
	if source.RebootPending != nil {
		rebootPending := *source.RebootPending
		summary.RebootPending = &rebootPending
	} else {
		summary.RebootPending = nil
	}

	// StartTime
	summary.StartTime = genruntime.ClonePointerToString(source.StartTime)

	// Status
	if source.Status != nil {
		status := AvailablePatchSummaryStatusStatus(*source.Status)
		summary.Status = &status
	} else {
		summary.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAvailablePatchSummaryStatus populates the provided destination AvailablePatchSummary_Status from our AvailablePatchSummary_Status
func (summary *AvailablePatchSummary_Status) AssignPropertiesToAvailablePatchSummaryStatus(destination *v1alpha1api20201201storage.AvailablePatchSummary_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AssessmentActivityId
	destination.AssessmentActivityId = genruntime.ClonePointerToString(summary.AssessmentActivityId)

	// CriticalAndSecurityPatchCount
	destination.CriticalAndSecurityPatchCount = genruntime.ClonePointerToInt(summary.CriticalAndSecurityPatchCount)

	// Error
	if summary.Error != nil {
		var error v1alpha1api20201201storage.ApiError_Status
		err := summary.Error.AssignPropertiesToApiErrorStatus(&error)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToApiErrorStatus() to populate field Error")
		}
		destination.Error = &error
	} else {
		destination.Error = nil
	}

	// LastModifiedTime
	destination.LastModifiedTime = genruntime.ClonePointerToString(summary.LastModifiedTime)

	// OtherPatchCount
	destination.OtherPatchCount = genruntime.ClonePointerToInt(summary.OtherPatchCount)

	// RebootPending
	if summary.RebootPending != nil {
		rebootPending := *summary.RebootPending
		destination.RebootPending = &rebootPending
	} else {
		destination.RebootPending = nil
	}

	// StartTime
	destination.StartTime = genruntime.ClonePointerToString(summary.StartTime)

	// Status
	if summary.Status != nil {
		status := string(*summary.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"None","ReadOnly","ReadWrite"}
type Caching_Spec string

const (
	Caching_SpecNone      = Caching_Spec("None")
	Caching_SpecReadOnly  = Caching_Spec("ReadOnly")
	Caching_SpecReadWrite = Caching_Spec("ReadWrite")
)

type Caching_Status string

const (
	Caching_StatusNone      = Caching_Status("None")
	Caching_StatusReadOnly  = Caching_Status("ReadOnly")
	Caching_StatusReadWrite = Caching_Status("ReadWrite")
)

// +kubebuilder:validation:Enum={"Attach","Empty","FromImage"}
type CreateOption_Spec string

const (
	CreateOption_SpecAttach    = CreateOption_Spec("Attach")
	CreateOption_SpecEmpty     = CreateOption_Spec("Empty")
	CreateOption_SpecFromImage = CreateOption_Spec("FromImage")
)

type CreateOption_Status string

const (
	CreateOption_StatusAttach    = CreateOption_Status("Attach")
	CreateOption_StatusEmpty     = CreateOption_Status("Empty")
	CreateOption_StatusFromImage = CreateOption_Status("FromImage")
)

// +kubebuilder:validation:Enum={"ForceDetach"}
type DetachOption_Spec string

const DetachOption_SpecForceDetach = DetachOption_Spec("ForceDetach")

type DetachOption_Status string

const DetachOption_StatusForceDetach = DetachOption_Status("ForceDetach")

type DiffDiskSettings_Spec struct {
	//Option: Specifies the ephemeral disk settings for operating system disk.
	Option *DiffDiskOption_Spec `json:"option,omitempty"`

	//Placement: Specifies the ephemeral disk placement for operating system disk.
	//Possible values are:
	//CacheDisk
	//ResourceDisk
	//Default: CacheDisk if one is configured for the VM size otherwise ResourceDisk
	//is used.
	//Refer to VM size documentation for Windows VM at
	//https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux
	//VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to
	//check which VM sizes exposes a cache disk.
	Placement *DiffDiskPlacement_Spec `json:"placement,omitempty"`
}

var _ genruntime.ARMTransformer = &DiffDiskSettings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *DiffDiskSettings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result DiffDiskSettings_SpecARM

	// Set property ‘Option’:
	if settings.Option != nil {
		option := *settings.Option
		result.Option = &option
	}

	// Set property ‘Placement’:
	if settings.Placement != nil {
		placement := *settings.Placement
		result.Placement = &placement
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DiffDiskSettings_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiffDiskSettings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DiffDiskSettings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiffDiskSettings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiffDiskSettings_SpecARM, got %T", armInput)
	}

	// Set property ‘Option’:
	if typedInput.Option != nil {
		option := *typedInput.Option
		settings.Option = &option
	}

	// Set property ‘Placement’:
	if typedInput.Placement != nil {
		placement := *typedInput.Placement
		settings.Placement = &placement
	}

	// No error
	return nil
}

// AssignPropertiesFromDiffDiskSettingsSpec populates our DiffDiskSettings_Spec from the provided source DiffDiskSettings_Spec
func (settings *DiffDiskSettings_Spec) AssignPropertiesFromDiffDiskSettingsSpec(source *v1alpha1api20201201storage.DiffDiskSettings_Spec) error {

	// Option
	if source.Option != nil {
		option := DiffDiskOption_Spec(*source.Option)
		settings.Option = &option
	} else {
		settings.Option = nil
	}

	// Placement
	if source.Placement != nil {
		placement := DiffDiskPlacement_Spec(*source.Placement)
		settings.Placement = &placement
	} else {
		settings.Placement = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiffDiskSettingsSpec populates the provided destination DiffDiskSettings_Spec from our DiffDiskSettings_Spec
func (settings *DiffDiskSettings_Spec) AssignPropertiesToDiffDiskSettingsSpec(destination *v1alpha1api20201201storage.DiffDiskSettings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Option
	if settings.Option != nil {
		option := string(*settings.Option)
		destination.Option = &option
	} else {
		destination.Option = nil
	}

	// Placement
	if settings.Placement != nil {
		placement := string(*settings.Placement)
		destination.Placement = &placement
	} else {
		destination.Placement = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DiffDiskSettings_Status struct {
	//Option: Specifies the ephemeral disk settings for operating system disk.
	Option *DiffDiskOption_Status `json:"option,omitempty"`

	//Placement: Specifies the ephemeral disk placement for operating system disk.
	//Possible values are:
	//CacheDisk
	//ResourceDisk
	//Default: CacheDisk if one is configured for the VM size otherwise ResourceDisk
	//is used.
	//Refer to VM size documentation for Windows VM at
	//https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux
	//VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to
	//check which VM sizes exposes a cache disk.
	Placement *DiffDiskPlacement_Status `json:"placement,omitempty"`
}

var _ genruntime.FromARMConverter = &DiffDiskSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DiffDiskSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiffDiskSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DiffDiskSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiffDiskSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiffDiskSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Option’:
	if typedInput.Option != nil {
		option := *typedInput.Option
		settings.Option = &option
	}

	// Set property ‘Placement’:
	if typedInput.Placement != nil {
		placement := *typedInput.Placement
		settings.Placement = &placement
	}

	// No error
	return nil
}

// AssignPropertiesFromDiffDiskSettingsStatus populates our DiffDiskSettings_Status from the provided source DiffDiskSettings_Status
func (settings *DiffDiskSettings_Status) AssignPropertiesFromDiffDiskSettingsStatus(source *v1alpha1api20201201storage.DiffDiskSettings_Status) error {

	// Option
	if source.Option != nil {
		option := DiffDiskOption_Status(*source.Option)
		settings.Option = &option
	} else {
		settings.Option = nil
	}

	// Placement
	if source.Placement != nil {
		placement := DiffDiskPlacement_Status(*source.Placement)
		settings.Placement = &placement
	} else {
		settings.Placement = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiffDiskSettingsStatus populates the provided destination DiffDiskSettings_Status from our DiffDiskSettings_Status
func (settings *DiffDiskSettings_Status) AssignPropertiesToDiffDiskSettingsStatus(destination *v1alpha1api20201201storage.DiffDiskSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Option
	if settings.Option != nil {
		option := string(*settings.Option)
		destination.Option = &option
	} else {
		destination.Option = nil
	}

	// Placement
	if settings.Placement != nil {
		placement := string(*settings.Placement)
		destination.Placement = &placement
	} else {
		destination.Placement = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DiskEncryptionSettings_Spec struct {
	//DiskEncryptionKey: Specifies the location of the disk encryption key, which is a
	//Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReference_Spec `json:"diskEncryptionKey,omitempty"`

	//Enabled: Specifies whether disk encryption should be enabled on the virtual
	//machine.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyEncryptionKey: Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference_Spec `json:"keyEncryptionKey,omitempty"`
}

var _ genruntime.ARMTransformer = &DiskEncryptionSettings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *DiskEncryptionSettings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result DiskEncryptionSettings_SpecARM

	// Set property ‘DiskEncryptionKey’:
	if settings.DiskEncryptionKey != nil {
		diskEncryptionKeyARM, err := (*settings.DiskEncryptionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diskEncryptionKey := diskEncryptionKeyARM.(KeyVaultSecretReference_SpecARM)
		result.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘Enabled’:
	if settings.Enabled != nil {
		enabled := *settings.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘KeyEncryptionKey’:
	if settings.KeyEncryptionKey != nil {
		keyEncryptionKeyARM, err := (*settings.KeyEncryptionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyEncryptionKey := keyEncryptionKeyARM.(KeyVaultKeyReference_SpecARM)
		result.KeyEncryptionKey = &keyEncryptionKey
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DiskEncryptionSettings_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskEncryptionSettings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DiskEncryptionSettings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiskEncryptionSettings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskEncryptionSettings_SpecARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionKey’:
	if typedInput.DiskEncryptionKey != nil {
		var diskEncryptionKey1 KeyVaultSecretReference_Spec
		err := diskEncryptionKey1.PopulateFromARM(owner, *typedInput.DiskEncryptionKey)
		if err != nil {
			return err
		}
		diskEncryptionKey := diskEncryptionKey1
		settings.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		settings.Enabled = &enabled
	}

	// Set property ‘KeyEncryptionKey’:
	if typedInput.KeyEncryptionKey != nil {
		var keyEncryptionKey1 KeyVaultKeyReference_Spec
		err := keyEncryptionKey1.PopulateFromARM(owner, *typedInput.KeyEncryptionKey)
		if err != nil {
			return err
		}
		keyEncryptionKey := keyEncryptionKey1
		settings.KeyEncryptionKey = &keyEncryptionKey
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskEncryptionSettingsSpec populates our DiskEncryptionSettings_Spec from the provided source DiskEncryptionSettings_Spec
func (settings *DiskEncryptionSettings_Spec) AssignPropertiesFromDiskEncryptionSettingsSpec(source *v1alpha1api20201201storage.DiskEncryptionSettings_Spec) error {

	// DiskEncryptionKey
	if source.DiskEncryptionKey != nil {
		var diskEncryptionKey KeyVaultSecretReference_Spec
		err := diskEncryptionKey.AssignPropertiesFromKeyVaultSecretReferenceSpec(source.DiskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultSecretReferenceSpec() to populate field DiskEncryptionKey")
		}
		settings.DiskEncryptionKey = &diskEncryptionKey
	} else {
		settings.DiskEncryptionKey = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		settings.Enabled = &enabled
	} else {
		settings.Enabled = nil
	}

	// KeyEncryptionKey
	if source.KeyEncryptionKey != nil {
		var keyEncryptionKey KeyVaultKeyReference_Spec
		err := keyEncryptionKey.AssignPropertiesFromKeyVaultKeyReferenceSpec(source.KeyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultKeyReferenceSpec() to populate field KeyEncryptionKey")
		}
		settings.KeyEncryptionKey = &keyEncryptionKey
	} else {
		settings.KeyEncryptionKey = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiskEncryptionSettingsSpec populates the provided destination DiskEncryptionSettings_Spec from our DiskEncryptionSettings_Spec
func (settings *DiskEncryptionSettings_Spec) AssignPropertiesToDiskEncryptionSettingsSpec(destination *v1alpha1api20201201storage.DiskEncryptionSettings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionKey
	if settings.DiskEncryptionKey != nil {
		var diskEncryptionKey v1alpha1api20201201storage.KeyVaultSecretReference_Spec
		err := settings.DiskEncryptionKey.AssignPropertiesToKeyVaultSecretReferenceSpec(&diskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultSecretReferenceSpec() to populate field DiskEncryptionKey")
		}
		destination.DiskEncryptionKey = &diskEncryptionKey
	} else {
		destination.DiskEncryptionKey = nil
	}

	// Enabled
	if settings.Enabled != nil {
		enabled := *settings.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyEncryptionKey
	if settings.KeyEncryptionKey != nil {
		var keyEncryptionKey v1alpha1api20201201storage.KeyVaultKeyReference_Spec
		err := settings.KeyEncryptionKey.AssignPropertiesToKeyVaultKeyReferenceSpec(&keyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultKeyReferenceSpec() to populate field KeyEncryptionKey")
		}
		destination.KeyEncryptionKey = &keyEncryptionKey
	} else {
		destination.KeyEncryptionKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DiskEncryptionSettings_Status struct {
	//DiskEncryptionKey: Specifies the location of the disk encryption key, which is a
	//Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReference_Status `json:"diskEncryptionKey,omitempty"`

	//Enabled: Specifies whether disk encryption should be enabled on the virtual
	//machine.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyEncryptionKey: Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference_Status `json:"keyEncryptionKey,omitempty"`
}

var _ genruntime.FromARMConverter = &DiskEncryptionSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DiskEncryptionSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskEncryptionSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DiskEncryptionSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DiskEncryptionSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskEncryptionSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionKey’:
	if typedInput.DiskEncryptionKey != nil {
		var diskEncryptionKey1 KeyVaultSecretReference_Status
		err := diskEncryptionKey1.PopulateFromARM(owner, *typedInput.DiskEncryptionKey)
		if err != nil {
			return err
		}
		diskEncryptionKey := diskEncryptionKey1
		settings.DiskEncryptionKey = &diskEncryptionKey
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		settings.Enabled = &enabled
	}

	// Set property ‘KeyEncryptionKey’:
	if typedInput.KeyEncryptionKey != nil {
		var keyEncryptionKey1 KeyVaultKeyReference_Status
		err := keyEncryptionKey1.PopulateFromARM(owner, *typedInput.KeyEncryptionKey)
		if err != nil {
			return err
		}
		keyEncryptionKey := keyEncryptionKey1
		settings.KeyEncryptionKey = &keyEncryptionKey
	}

	// No error
	return nil
}

// AssignPropertiesFromDiskEncryptionSettingsStatus populates our DiskEncryptionSettings_Status from the provided source DiskEncryptionSettings_Status
func (settings *DiskEncryptionSettings_Status) AssignPropertiesFromDiskEncryptionSettingsStatus(source *v1alpha1api20201201storage.DiskEncryptionSettings_Status) error {

	// DiskEncryptionKey
	if source.DiskEncryptionKey != nil {
		var diskEncryptionKey KeyVaultSecretReference_Status
		err := diskEncryptionKey.AssignPropertiesFromKeyVaultSecretReferenceStatus(source.DiskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultSecretReferenceStatus() to populate field DiskEncryptionKey")
		}
		settings.DiskEncryptionKey = &diskEncryptionKey
	} else {
		settings.DiskEncryptionKey = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		settings.Enabled = &enabled
	} else {
		settings.Enabled = nil
	}

	// KeyEncryptionKey
	if source.KeyEncryptionKey != nil {
		var keyEncryptionKey KeyVaultKeyReference_Status
		err := keyEncryptionKey.AssignPropertiesFromKeyVaultKeyReferenceStatus(source.KeyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultKeyReferenceStatus() to populate field KeyEncryptionKey")
		}
		settings.KeyEncryptionKey = &keyEncryptionKey
	} else {
		settings.KeyEncryptionKey = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiskEncryptionSettingsStatus populates the provided destination DiskEncryptionSettings_Status from our DiskEncryptionSettings_Status
func (settings *DiskEncryptionSettings_Status) AssignPropertiesToDiskEncryptionSettingsStatus(destination *v1alpha1api20201201storage.DiskEncryptionSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionKey
	if settings.DiskEncryptionKey != nil {
		var diskEncryptionKey v1alpha1api20201201storage.KeyVaultSecretReference_Status
		err := settings.DiskEncryptionKey.AssignPropertiesToKeyVaultSecretReferenceStatus(&diskEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultSecretReferenceStatus() to populate field DiskEncryptionKey")
		}
		destination.DiskEncryptionKey = &diskEncryptionKey
	} else {
		destination.DiskEncryptionKey = nil
	}

	// Enabled
	if settings.Enabled != nil {
		enabled := *settings.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyEncryptionKey
	if settings.KeyEncryptionKey != nil {
		var keyEncryptionKey v1alpha1api20201201storage.KeyVaultKeyReference_Status
		err := settings.KeyEncryptionKey.AssignPropertiesToKeyVaultKeyReferenceStatus(&keyEncryptionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultKeyReferenceStatus() to populate field KeyEncryptionKey")
		}
		destination.KeyEncryptionKey = &keyEncryptionKey
	} else {
		destination.KeyEncryptionKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type InstanceViewStatusStatusLevel string

const (
	InstanceViewStatusStatusLevelError   = InstanceViewStatusStatusLevel("Error")
	InstanceViewStatusStatusLevelInfo    = InstanceViewStatusStatusLevel("Info")
	InstanceViewStatusStatusLevelWarning = InstanceViewStatusStatusLevel("Warning")
)

type LastPatchInstallationSummary_Status struct {
	//Error: The errors that were encountered during execution of the operation. The
	//details array contains the list of them.
	Error *ApiError_Status `json:"error,omitempty"`

	//ExcludedPatchCount: The number of all available patches but excluded explicitly
	//by a customer-specified exclusion list match.
	ExcludedPatchCount *int `json:"excludedPatchCount,omitempty"`

	//FailedPatchCount: The count of patches that failed installation.
	FailedPatchCount *int `json:"failedPatchCount,omitempty"`

	//InstallationActivityId: The activity ID of the operation that produced this
	//result. It is used to correlate across CRP and extension logs.
	InstallationActivityId *string `json:"installationActivityId,omitempty"`

	//InstalledPatchCount: The count of patches that successfully installed.
	InstalledPatchCount *int `json:"installedPatchCount,omitempty"`

	//LastModifiedTime: The UTC timestamp when the operation began.
	LastModifiedTime *string `json:"lastModifiedTime,omitempty"`

	//MaintenanceWindowExceeded: Describes whether the operation ran out of time
	//before it completed all its intended actions
	MaintenanceWindowExceeded *bool `json:"maintenanceWindowExceeded,omitempty"`

	//NotSelectedPatchCount: The number of all available patches but not going to be
	//installed because it didn't match a classification or inclusion list entry.
	NotSelectedPatchCount *int `json:"notSelectedPatchCount,omitempty"`

	//PendingPatchCount: The number of all available patches expected to be installed
	//over the course of the patch installation operation.
	PendingPatchCount *int `json:"pendingPatchCount,omitempty"`

	//StartTime: The UTC timestamp when the operation began.
	StartTime *string `json:"startTime,omitempty"`

	//Status: The overall success or failure status of the operation. It remains
	//"InProgress" until the operation completes. At that point it will become
	//"Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
	Status *LastPatchInstallationSummaryStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &LastPatchInstallationSummary_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (summary *LastPatchInstallationSummary_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LastPatchInstallationSummary_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (summary *LastPatchInstallationSummary_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LastPatchInstallationSummary_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LastPatchInstallationSummary_StatusARM, got %T", armInput)
	}

	// Set property ‘Error’:
	if typedInput.Error != nil {
		var error1 ApiError_Status
		err := error1.PopulateFromARM(owner, *typedInput.Error)
		if err != nil {
			return err
		}
		error := error1
		summary.Error = &error
	}

	// Set property ‘ExcludedPatchCount’:
	if typedInput.ExcludedPatchCount != nil {
		excludedPatchCount := *typedInput.ExcludedPatchCount
		summary.ExcludedPatchCount = &excludedPatchCount
	}

	// Set property ‘FailedPatchCount’:
	if typedInput.FailedPatchCount != nil {
		failedPatchCount := *typedInput.FailedPatchCount
		summary.FailedPatchCount = &failedPatchCount
	}

	// Set property ‘InstallationActivityId’:
	if typedInput.InstallationActivityId != nil {
		installationActivityId := *typedInput.InstallationActivityId
		summary.InstallationActivityId = &installationActivityId
	}

	// Set property ‘InstalledPatchCount’:
	if typedInput.InstalledPatchCount != nil {
		installedPatchCount := *typedInput.InstalledPatchCount
		summary.InstalledPatchCount = &installedPatchCount
	}

	// Set property ‘LastModifiedTime’:
	if typedInput.LastModifiedTime != nil {
		lastModifiedTime := *typedInput.LastModifiedTime
		summary.LastModifiedTime = &lastModifiedTime
	}

	// Set property ‘MaintenanceWindowExceeded’:
	if typedInput.MaintenanceWindowExceeded != nil {
		maintenanceWindowExceeded := *typedInput.MaintenanceWindowExceeded
		summary.MaintenanceWindowExceeded = &maintenanceWindowExceeded
	}

	// Set property ‘NotSelectedPatchCount’:
	if typedInput.NotSelectedPatchCount != nil {
		notSelectedPatchCount := *typedInput.NotSelectedPatchCount
		summary.NotSelectedPatchCount = &notSelectedPatchCount
	}

	// Set property ‘PendingPatchCount’:
	if typedInput.PendingPatchCount != nil {
		pendingPatchCount := *typedInput.PendingPatchCount
		summary.PendingPatchCount = &pendingPatchCount
	}

	// Set property ‘StartTime’:
	if typedInput.StartTime != nil {
		startTime := *typedInput.StartTime
		summary.StartTime = &startTime
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		summary.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromLastPatchInstallationSummaryStatus populates our LastPatchInstallationSummary_Status from the provided source LastPatchInstallationSummary_Status
func (summary *LastPatchInstallationSummary_Status) AssignPropertiesFromLastPatchInstallationSummaryStatus(source *v1alpha1api20201201storage.LastPatchInstallationSummary_Status) error {

	// Error
	if source.Error != nil {
		var error ApiError_Status
		err := error.AssignPropertiesFromApiErrorStatus(source.Error)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromApiErrorStatus() to populate field Error")
		}
		summary.Error = &error
	} else {
		summary.Error = nil
	}

	// ExcludedPatchCount
	summary.ExcludedPatchCount = genruntime.ClonePointerToInt(source.ExcludedPatchCount)

	// FailedPatchCount
	summary.FailedPatchCount = genruntime.ClonePointerToInt(source.FailedPatchCount)

	// InstallationActivityId
	summary.InstallationActivityId = genruntime.ClonePointerToString(source.InstallationActivityId)

	// InstalledPatchCount
	summary.InstalledPatchCount = genruntime.ClonePointerToInt(source.InstalledPatchCount)

	// LastModifiedTime
	summary.LastModifiedTime = genruntime.ClonePointerToString(source.LastModifiedTime)

	// MaintenanceWindowExceeded
	if source.MaintenanceWindowExceeded != nil {
		maintenanceWindowExceeded := *source.MaintenanceWindowExceeded
		summary.MaintenanceWindowExceeded = &maintenanceWindowExceeded
	} else {
		summary.MaintenanceWindowExceeded = nil
	}

	// NotSelectedPatchCount
	summary.NotSelectedPatchCount = genruntime.ClonePointerToInt(source.NotSelectedPatchCount)

	// PendingPatchCount
	summary.PendingPatchCount = genruntime.ClonePointerToInt(source.PendingPatchCount)

	// StartTime
	summary.StartTime = genruntime.ClonePointerToString(source.StartTime)

	// Status
	if source.Status != nil {
		status := LastPatchInstallationSummaryStatusStatus(*source.Status)
		summary.Status = &status
	} else {
		summary.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLastPatchInstallationSummaryStatus populates the provided destination LastPatchInstallationSummary_Status from our LastPatchInstallationSummary_Status
func (summary *LastPatchInstallationSummary_Status) AssignPropertiesToLastPatchInstallationSummaryStatus(destination *v1alpha1api20201201storage.LastPatchInstallationSummary_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Error
	if summary.Error != nil {
		var error v1alpha1api20201201storage.ApiError_Status
		err := summary.Error.AssignPropertiesToApiErrorStatus(&error)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToApiErrorStatus() to populate field Error")
		}
		destination.Error = &error
	} else {
		destination.Error = nil
	}

	// ExcludedPatchCount
	destination.ExcludedPatchCount = genruntime.ClonePointerToInt(summary.ExcludedPatchCount)

	// FailedPatchCount
	destination.FailedPatchCount = genruntime.ClonePointerToInt(summary.FailedPatchCount)

	// InstallationActivityId
	destination.InstallationActivityId = genruntime.ClonePointerToString(summary.InstallationActivityId)

	// InstalledPatchCount
	destination.InstalledPatchCount = genruntime.ClonePointerToInt(summary.InstalledPatchCount)

	// LastModifiedTime
	destination.LastModifiedTime = genruntime.ClonePointerToString(summary.LastModifiedTime)

	// MaintenanceWindowExceeded
	if summary.MaintenanceWindowExceeded != nil {
		maintenanceWindowExceeded := *summary.MaintenanceWindowExceeded
		destination.MaintenanceWindowExceeded = &maintenanceWindowExceeded
	} else {
		destination.MaintenanceWindowExceeded = nil
	}

	// NotSelectedPatchCount
	destination.NotSelectedPatchCount = genruntime.ClonePointerToInt(summary.NotSelectedPatchCount)

	// PendingPatchCount
	destination.PendingPatchCount = genruntime.ClonePointerToInt(summary.PendingPatchCount)

	// StartTime
	destination.StartTime = genruntime.ClonePointerToString(summary.StartTime)

	// Status
	if summary.Status != nil {
		status := string(*summary.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LinuxPatchSettings_Spec struct {
	//PatchMode: Specifies the mode of VM Guest Patching to IaaS virtual machine.
	//Possible values are:
	//ImageDefault - The virtual machine's default patching configuration is used.
	//AutomaticByPlatform - The virtual machine will be automatically updated by the
	//platform. The property provisionVMAgent must be true
	PatchMode *LinuxPatchSettingsSpecPatchMode `json:"patchMode,omitempty"`
}

var _ genruntime.ARMTransformer = &LinuxPatchSettings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *LinuxPatchSettings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result LinuxPatchSettings_SpecARM

	// Set property ‘PatchMode’:
	if settings.PatchMode != nil {
		patchMode := *settings.PatchMode
		result.PatchMode = &patchMode
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *LinuxPatchSettings_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxPatchSettings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *LinuxPatchSettings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxPatchSettings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxPatchSettings_SpecARM, got %T", armInput)
	}

	// Set property ‘PatchMode’:
	if typedInput.PatchMode != nil {
		patchMode := *typedInput.PatchMode
		settings.PatchMode = &patchMode
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxPatchSettingsSpec populates our LinuxPatchSettings_Spec from the provided source LinuxPatchSettings_Spec
func (settings *LinuxPatchSettings_Spec) AssignPropertiesFromLinuxPatchSettingsSpec(source *v1alpha1api20201201storage.LinuxPatchSettings_Spec) error {

	// PatchMode
	if source.PatchMode != nil {
		patchMode := LinuxPatchSettingsSpecPatchMode(*source.PatchMode)
		settings.PatchMode = &patchMode
	} else {
		settings.PatchMode = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLinuxPatchSettingsSpec populates the provided destination LinuxPatchSettings_Spec from our LinuxPatchSettings_Spec
func (settings *LinuxPatchSettings_Spec) AssignPropertiesToLinuxPatchSettingsSpec(destination *v1alpha1api20201201storage.LinuxPatchSettings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PatchMode
	if settings.PatchMode != nil {
		patchMode := string(*settings.PatchMode)
		destination.PatchMode = &patchMode
	} else {
		destination.PatchMode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LinuxPatchSettings_Status struct {
	//PatchMode: Specifies the mode of VM Guest Patching to IaaS virtual machine.
	//Possible values are:
	//ImageDefault - The virtual machine's default patching configuration is used.
	//AutomaticByPlatform - The virtual machine will be automatically updated by the
	//platform. The property provisionVMAgent must be true
	PatchMode *LinuxPatchSettingsStatusPatchMode `json:"patchMode,omitempty"`
}

var _ genruntime.FromARMConverter = &LinuxPatchSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *LinuxPatchSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxPatchSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *LinuxPatchSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxPatchSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxPatchSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘PatchMode’:
	if typedInput.PatchMode != nil {
		patchMode := *typedInput.PatchMode
		settings.PatchMode = &patchMode
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxPatchSettingsStatus populates our LinuxPatchSettings_Status from the provided source LinuxPatchSettings_Status
func (settings *LinuxPatchSettings_Status) AssignPropertiesFromLinuxPatchSettingsStatus(source *v1alpha1api20201201storage.LinuxPatchSettings_Status) error {

	// PatchMode
	if source.PatchMode != nil {
		patchMode := LinuxPatchSettingsStatusPatchMode(*source.PatchMode)
		settings.PatchMode = &patchMode
	} else {
		settings.PatchMode = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLinuxPatchSettingsStatus populates the provided destination LinuxPatchSettings_Status from our LinuxPatchSettings_Status
func (settings *LinuxPatchSettings_Status) AssignPropertiesToLinuxPatchSettingsStatus(destination *v1alpha1api20201201storage.LinuxPatchSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PatchMode
	if settings.PatchMode != nil {
		patchMode := string(*settings.PatchMode)
		destination.PatchMode = &patchMode
	} else {
		destination.PatchMode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MaintenanceRedeployStatusStatusLastOperationResultCode string

const (
	MaintenanceRedeployStatusStatusLastOperationResultCodeMaintenanceAborted   = MaintenanceRedeployStatusStatusLastOperationResultCode("MaintenanceAborted")
	MaintenanceRedeployStatusStatusLastOperationResultCodeMaintenanceCompleted = MaintenanceRedeployStatusStatusLastOperationResultCode("MaintenanceCompleted")
	MaintenanceRedeployStatusStatusLastOperationResultCodeNone                 = MaintenanceRedeployStatusStatusLastOperationResultCode("None")
	MaintenanceRedeployStatusStatusLastOperationResultCodeRetryLater           = MaintenanceRedeployStatusStatusLastOperationResultCode("RetryLater")
)

type ManagedDiskParameters_Spec struct {
	//DiskEncryptionSet: Specifies the customer managed disk encryption set resource
	//id for the managed disk.
	DiskEncryptionSet *SubResource_Spec `json:"diskEncryptionSet,omitempty"`

	//Reference: Resource Id
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//StorageAccountType: Specifies the storage account type for the managed disk.
	//Managed OS disk storage account type can only be set when you create the scale
	//set. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with
	//OS Disk.
	StorageAccountType *StorageAccountType_Spec `json:"storageAccountType,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedDiskParameters_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *ManagedDiskParameters_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	var result ManagedDiskParameters_SpecARM

	// Set property ‘DiskEncryptionSet’:
	if parameters.DiskEncryptionSet != nil {
		diskEncryptionSetARM, err := (*parameters.DiskEncryptionSet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diskEncryptionSet := diskEncryptionSetARM.(SubResource_SpecARM)
		result.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘Id’:
	if parameters.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*parameters.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘StorageAccountType’:
	if parameters.StorageAccountType != nil {
		storageAccountType := *parameters.StorageAccountType
		result.StorageAccountType = &storageAccountType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *ManagedDiskParameters_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedDiskParameters_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *ManagedDiskParameters_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedDiskParameters_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedDiskParameters_SpecARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionSet’:
	if typedInput.DiskEncryptionSet != nil {
		var diskEncryptionSet1 SubResource_Spec
		err := diskEncryptionSet1.PopulateFromARM(owner, *typedInput.DiskEncryptionSet)
		if err != nil {
			return err
		}
		diskEncryptionSet := diskEncryptionSet1
		parameters.DiskEncryptionSet = &diskEncryptionSet
	}

	// no assignment for property ‘Reference’

	// Set property ‘StorageAccountType’:
	if typedInput.StorageAccountType != nil {
		storageAccountType := *typedInput.StorageAccountType
		parameters.StorageAccountType = &storageAccountType
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedDiskParametersSpec populates our ManagedDiskParameters_Spec from the provided source ManagedDiskParameters_Spec
func (parameters *ManagedDiskParameters_Spec) AssignPropertiesFromManagedDiskParametersSpec(source *v1alpha1api20201201storage.ManagedDiskParameters_Spec) error {

	// DiskEncryptionSet
	if source.DiskEncryptionSet != nil {
		var diskEncryptionSet SubResource_Spec
		err := diskEncryptionSet.AssignPropertiesFromSubResourceSpec(source.DiskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field DiskEncryptionSet")
		}
		parameters.DiskEncryptionSet = &diskEncryptionSet
	} else {
		parameters.DiskEncryptionSet = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		parameters.Reference = &reference
	} else {
		parameters.Reference = nil
	}

	// StorageAccountType
	if source.StorageAccountType != nil {
		storageAccountType := StorageAccountType_Spec(*source.StorageAccountType)
		parameters.StorageAccountType = &storageAccountType
	} else {
		parameters.StorageAccountType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedDiskParametersSpec populates the provided destination ManagedDiskParameters_Spec from our ManagedDiskParameters_Spec
func (parameters *ManagedDiskParameters_Spec) AssignPropertiesToManagedDiskParametersSpec(destination *v1alpha1api20201201storage.ManagedDiskParameters_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionSet
	if parameters.DiskEncryptionSet != nil {
		var diskEncryptionSet v1alpha1api20201201storage.SubResource_Spec
		err := parameters.DiskEncryptionSet.AssignPropertiesToSubResourceSpec(&diskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field DiskEncryptionSet")
		}
		destination.DiskEncryptionSet = &diskEncryptionSet
	} else {
		destination.DiskEncryptionSet = nil
	}

	// Reference
	if parameters.Reference != nil {
		reference := parameters.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// StorageAccountType
	if parameters.StorageAccountType != nil {
		storageAccountType := string(*parameters.StorageAccountType)
		destination.StorageAccountType = &storageAccountType
	} else {
		destination.StorageAccountType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedDiskParameters_Status struct {
	//DiskEncryptionSet: Specifies the customer managed disk encryption set resource
	//id for the managed disk.
	DiskEncryptionSet *SubResource_Status `json:"diskEncryptionSet,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//StorageAccountType: Specifies the storage account type for the managed disk.
	//Managed OS disk storage account type can only be set when you create the scale
	//set. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with
	//OS Disk.
	StorageAccountType *StorageAccountType_Status `json:"storageAccountType,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedDiskParameters_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *ManagedDiskParameters_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedDiskParameters_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *ManagedDiskParameters_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedDiskParameters_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedDiskParameters_StatusARM, got %T", armInput)
	}

	// Set property ‘DiskEncryptionSet’:
	if typedInput.DiskEncryptionSet != nil {
		var diskEncryptionSet1 SubResource_Status
		err := diskEncryptionSet1.PopulateFromARM(owner, *typedInput.DiskEncryptionSet)
		if err != nil {
			return err
		}
		diskEncryptionSet := diskEncryptionSet1
		parameters.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		parameters.Id = &id
	}

	// Set property ‘StorageAccountType’:
	if typedInput.StorageAccountType != nil {
		storageAccountType := *typedInput.StorageAccountType
		parameters.StorageAccountType = &storageAccountType
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedDiskParametersStatus populates our ManagedDiskParameters_Status from the provided source ManagedDiskParameters_Status
func (parameters *ManagedDiskParameters_Status) AssignPropertiesFromManagedDiskParametersStatus(source *v1alpha1api20201201storage.ManagedDiskParameters_Status) error {

	// DiskEncryptionSet
	if source.DiskEncryptionSet != nil {
		var diskEncryptionSet SubResource_Status
		err := diskEncryptionSet.AssignPropertiesFromSubResourceStatus(source.DiskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field DiskEncryptionSet")
		}
		parameters.DiskEncryptionSet = &diskEncryptionSet
	} else {
		parameters.DiskEncryptionSet = nil
	}

	// Id
	parameters.Id = genruntime.ClonePointerToString(source.Id)

	// StorageAccountType
	if source.StorageAccountType != nil {
		storageAccountType := StorageAccountType_Status(*source.StorageAccountType)
		parameters.StorageAccountType = &storageAccountType
	} else {
		parameters.StorageAccountType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedDiskParametersStatus populates the provided destination ManagedDiskParameters_Status from our ManagedDiskParameters_Status
func (parameters *ManagedDiskParameters_Status) AssignPropertiesToManagedDiskParametersStatus(destination *v1alpha1api20201201storage.ManagedDiskParameters_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DiskEncryptionSet
	if parameters.DiskEncryptionSet != nil {
		var diskEncryptionSet v1alpha1api20201201storage.SubResource_Status
		err := parameters.DiskEncryptionSet.AssignPropertiesToSubResourceStatus(&diskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field DiskEncryptionSet")
		}
		destination.DiskEncryptionSet = &diskEncryptionSet
	} else {
		destination.DiskEncryptionSet = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(parameters.Id)

	// StorageAccountType
	if parameters.StorageAccountType != nil {
		storageAccountType := string(*parameters.StorageAccountType)
		destination.StorageAccountType = &storageAccountType
	} else {
		destination.StorageAccountType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Linux","Windows"}
type OSDiskSpecOsType string

const (
	OSDiskSpecOsTypeLinux   = OSDiskSpecOsType("Linux")
	OSDiskSpecOsTypeWindows = OSDiskSpecOsType("Windows")
)

type OSDiskStatusOsType string

const (
	OSDiskStatusOsTypeLinux   = OSDiskStatusOsType("Linux")
	OSDiskStatusOsTypeWindows = OSDiskStatusOsType("Windows")
)

type PatchSettings_Spec struct {
	//EnableHotpatching: Enables customers to patch their Azure VMs without requiring
	//a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and
	//'patchMode' must be set to 'AutomaticByPlatform'.
	EnableHotpatching *bool `json:"enableHotpatching,omitempty"`

	//PatchMode: Specifies the mode of VM Guest Patching to IaaS virtual machine.
	//Possible values are:
	//Manual - You  control the application of patches to a virtual machine. You do
	//this by applying patches manually inside the VM. In this mode, automatic updates
	//are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be
	//false
	//AutomaticByOS - The virtual machine will automatically be updated by the OS. The
	//property WindowsConfiguration.enableAutomaticUpdates must be true.
	//AutomaticByPlatform - the virtual machine will automatically updated by the
	//platform. The properties provisionVMAgent and
	//WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode *PatchSettingsSpecPatchMode `json:"patchMode,omitempty"`
}

var _ genruntime.ARMTransformer = &PatchSettings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *PatchSettings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result PatchSettings_SpecARM

	// Set property ‘EnableHotpatching’:
	if settings.EnableHotpatching != nil {
		enableHotpatching := *settings.EnableHotpatching
		result.EnableHotpatching = &enableHotpatching
	}

	// Set property ‘PatchMode’:
	if settings.PatchMode != nil {
		patchMode := *settings.PatchMode
		result.PatchMode = &patchMode
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *PatchSettings_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PatchSettings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *PatchSettings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PatchSettings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PatchSettings_SpecARM, got %T", armInput)
	}

	// Set property ‘EnableHotpatching’:
	if typedInput.EnableHotpatching != nil {
		enableHotpatching := *typedInput.EnableHotpatching
		settings.EnableHotpatching = &enableHotpatching
	}

	// Set property ‘PatchMode’:
	if typedInput.PatchMode != nil {
		patchMode := *typedInput.PatchMode
		settings.PatchMode = &patchMode
	}

	// No error
	return nil
}

// AssignPropertiesFromPatchSettingsSpec populates our PatchSettings_Spec from the provided source PatchSettings_Spec
func (settings *PatchSettings_Spec) AssignPropertiesFromPatchSettingsSpec(source *v1alpha1api20201201storage.PatchSettings_Spec) error {

	// EnableHotpatching
	if source.EnableHotpatching != nil {
		enableHotpatching := *source.EnableHotpatching
		settings.EnableHotpatching = &enableHotpatching
	} else {
		settings.EnableHotpatching = nil
	}

	// PatchMode
	if source.PatchMode != nil {
		patchMode := PatchSettingsSpecPatchMode(*source.PatchMode)
		settings.PatchMode = &patchMode
	} else {
		settings.PatchMode = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPatchSettingsSpec populates the provided destination PatchSettings_Spec from our PatchSettings_Spec
func (settings *PatchSettings_Spec) AssignPropertiesToPatchSettingsSpec(destination *v1alpha1api20201201storage.PatchSettings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EnableHotpatching
	if settings.EnableHotpatching != nil {
		enableHotpatching := *settings.EnableHotpatching
		destination.EnableHotpatching = &enableHotpatching
	} else {
		destination.EnableHotpatching = nil
	}

	// PatchMode
	if settings.PatchMode != nil {
		patchMode := string(*settings.PatchMode)
		destination.PatchMode = &patchMode
	} else {
		destination.PatchMode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PatchSettings_Status struct {
	//EnableHotpatching: Enables customers to patch their Azure VMs without requiring
	//a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and
	//'patchMode' must be set to 'AutomaticByPlatform'.
	EnableHotpatching *bool `json:"enableHotpatching,omitempty"`

	//PatchMode: Specifies the mode of VM Guest Patching to IaaS virtual machine.
	//Possible values are:
	//Manual - You  control the application of patches to a virtual machine. You do
	//this by applying patches manually inside the VM. In this mode, automatic updates
	//are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be
	//false
	//AutomaticByOS - The virtual machine will automatically be updated by the OS. The
	//property WindowsConfiguration.enableAutomaticUpdates must be true.
	//AutomaticByPlatform - the virtual machine will automatically updated by the
	//platform. The properties provisionVMAgent and
	//WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode *PatchSettingsStatusPatchMode `json:"patchMode,omitempty"`
}

var _ genruntime.FromARMConverter = &PatchSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *PatchSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PatchSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *PatchSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PatchSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PatchSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘EnableHotpatching’:
	if typedInput.EnableHotpatching != nil {
		enableHotpatching := *typedInput.EnableHotpatching
		settings.EnableHotpatching = &enableHotpatching
	}

	// Set property ‘PatchMode’:
	if typedInput.PatchMode != nil {
		patchMode := *typedInput.PatchMode
		settings.PatchMode = &patchMode
	}

	// No error
	return nil
}

// AssignPropertiesFromPatchSettingsStatus populates our PatchSettings_Status from the provided source PatchSettings_Status
func (settings *PatchSettings_Status) AssignPropertiesFromPatchSettingsStatus(source *v1alpha1api20201201storage.PatchSettings_Status) error {

	// EnableHotpatching
	if source.EnableHotpatching != nil {
		enableHotpatching := *source.EnableHotpatching
		settings.EnableHotpatching = &enableHotpatching
	} else {
		settings.EnableHotpatching = nil
	}

	// PatchMode
	if source.PatchMode != nil {
		patchMode := PatchSettingsStatusPatchMode(*source.PatchMode)
		settings.PatchMode = &patchMode
	} else {
		settings.PatchMode = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPatchSettingsStatus populates the provided destination PatchSettings_Status from our PatchSettings_Status
func (settings *PatchSettings_Status) AssignPropertiesToPatchSettingsStatus(destination *v1alpha1api20201201storage.PatchSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EnableHotpatching
	if settings.EnableHotpatching != nil {
		enableHotpatching := *settings.EnableHotpatching
		destination.EnableHotpatching = &enableHotpatching
	} else {
		destination.EnableHotpatching = nil
	}

	// PatchMode
	if settings.PatchMode != nil {
		patchMode := string(*settings.PatchMode)
		destination.PatchMode = &patchMode
	} else {
		destination.PatchMode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SshConfiguration_Spec struct {
	//PublicKeys: The list of SSH public keys used to authenticate with linux based
	//VMs.
	PublicKeys []SshPublicKey_Spec `json:"publicKeys,omitempty"`
}

var _ genruntime.ARMTransformer = &SshConfiguration_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *SshConfiguration_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result SshConfiguration_SpecARM

	// Set property ‘PublicKeys’:
	for _, item := range configuration.PublicKeys {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.PublicKeys = append(result.PublicKeys, itemARM.(SshPublicKey_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *SshConfiguration_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SshConfiguration_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *SshConfiguration_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SshConfiguration_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SshConfiguration_SpecARM, got %T", armInput)
	}

	// Set property ‘PublicKeys’:
	for _, item := range typedInput.PublicKeys {
		var item1 SshPublicKey_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.PublicKeys = append(configuration.PublicKeys, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromSshConfigurationSpec populates our SshConfiguration_Spec from the provided source SshConfiguration_Spec
func (configuration *SshConfiguration_Spec) AssignPropertiesFromSshConfigurationSpec(source *v1alpha1api20201201storage.SshConfiguration_Spec) error {

	// PublicKeys
	if source.PublicKeys != nil {
		publicKeyList := make([]SshPublicKey_Spec, len(source.PublicKeys))
		for publicKeyIndex, publicKeyItem := range source.PublicKeys {
			// Shadow the loop variable to avoid aliasing
			publicKeyItem := publicKeyItem
			var publicKey SshPublicKey_Spec
			err := publicKey.AssignPropertiesFromSshPublicKeySpec(&publicKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSshPublicKeySpec() to populate field PublicKeys")
			}
			publicKeyList[publicKeyIndex] = publicKey
		}
		configuration.PublicKeys = publicKeyList
	} else {
		configuration.PublicKeys = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSshConfigurationSpec populates the provided destination SshConfiguration_Spec from our SshConfiguration_Spec
func (configuration *SshConfiguration_Spec) AssignPropertiesToSshConfigurationSpec(destination *v1alpha1api20201201storage.SshConfiguration_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublicKeys
	if configuration.PublicKeys != nil {
		publicKeyList := make([]v1alpha1api20201201storage.SshPublicKey_Spec, len(configuration.PublicKeys))
		for publicKeyIndex, publicKeyItem := range configuration.PublicKeys {
			// Shadow the loop variable to avoid aliasing
			publicKeyItem := publicKeyItem
			var publicKey v1alpha1api20201201storage.SshPublicKey_Spec
			err := publicKeyItem.AssignPropertiesToSshPublicKeySpec(&publicKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSshPublicKeySpec() to populate field PublicKeys")
			}
			publicKeyList[publicKeyIndex] = publicKey
		}
		destination.PublicKeys = publicKeyList
	} else {
		destination.PublicKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SshConfiguration_Status struct {
	//PublicKeys: The list of SSH public keys used to authenticate with linux based
	//VMs.
	PublicKeys []SshPublicKey_Status `json:"publicKeys,omitempty"`
}

var _ genruntime.FromARMConverter = &SshConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *SshConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SshConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *SshConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SshConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SshConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘PublicKeys’:
	for _, item := range typedInput.PublicKeys {
		var item1 SshPublicKey_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.PublicKeys = append(configuration.PublicKeys, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromSshConfigurationStatus populates our SshConfiguration_Status from the provided source SshConfiguration_Status
func (configuration *SshConfiguration_Status) AssignPropertiesFromSshConfigurationStatus(source *v1alpha1api20201201storage.SshConfiguration_Status) error {

	// PublicKeys
	if source.PublicKeys != nil {
		publicKeyList := make([]SshPublicKey_Status, len(source.PublicKeys))
		for publicKeyIndex, publicKeyItem := range source.PublicKeys {
			// Shadow the loop variable to avoid aliasing
			publicKeyItem := publicKeyItem
			var publicKey SshPublicKey_Status
			err := publicKey.AssignPropertiesFromSshPublicKeyStatus(&publicKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSshPublicKeyStatus() to populate field PublicKeys")
			}
			publicKeyList[publicKeyIndex] = publicKey
		}
		configuration.PublicKeys = publicKeyList
	} else {
		configuration.PublicKeys = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSshConfigurationStatus populates the provided destination SshConfiguration_Status from our SshConfiguration_Status
func (configuration *SshConfiguration_Status) AssignPropertiesToSshConfigurationStatus(destination *v1alpha1api20201201storage.SshConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublicKeys
	if configuration.PublicKeys != nil {
		publicKeyList := make([]v1alpha1api20201201storage.SshPublicKey_Status, len(configuration.PublicKeys))
		for publicKeyIndex, publicKeyItem := range configuration.PublicKeys {
			// Shadow the loop variable to avoid aliasing
			publicKeyItem := publicKeyItem
			var publicKey v1alpha1api20201201storage.SshPublicKey_Status
			err := publicKeyItem.AssignPropertiesToSshPublicKeyStatus(&publicKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSshPublicKeyStatus() to populate field PublicKeys")
			}
			publicKeyList[publicKeyIndex] = publicKey
		}
		destination.PublicKeys = publicKeyList
	} else {
		destination.PublicKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VaultCertificate_Spec struct {
	//CertificateStore: For Windows VMs, specifies the certificate store on the
	//Virtual Machine to which the certificate should be added. The specified
	//certificate store is implicitly in the LocalMachine account.
	//For Linux VMs, the certificate file is placed under the /var/lib/waagent
	//directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509
	//certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of
	//these files are .pem formatted.
	CertificateStore *string `json:"certificateStore,omitempty"`

	//CertificateUrl: This is the URL of a certificate that has been uploaded to Key
	//Vault as a secret. For adding a secret to the Key Vault, see [Add a key or
	//secret to the key
	//vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
	//In this case, your certificate needs to be It is the Base64 encoding of the
	//following JSON Object which is encoded in UTF-8:
	//{
	//"data":"<Base64-encoded-certificate>",
	//"dataType":"pfx",
	//"password":"<pfx-file-password>"
	//}
	CertificateUrl *string `json:"certificateUrl,omitempty"`
}

var _ genruntime.ARMTransformer = &VaultCertificate_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (certificate *VaultCertificate_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if certificate == nil {
		return nil, nil
	}
	var result VaultCertificate_SpecARM

	// Set property ‘CertificateStore’:
	if certificate.CertificateStore != nil {
		certificateStore := *certificate.CertificateStore
		result.CertificateStore = &certificateStore
	}

	// Set property ‘CertificateUrl’:
	if certificate.CertificateUrl != nil {
		certificateUrl := *certificate.CertificateUrl
		result.CertificateUrl = &certificateUrl
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VaultCertificate_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VaultCertificate_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VaultCertificate_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VaultCertificate_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VaultCertificate_SpecARM, got %T", armInput)
	}

	// Set property ‘CertificateStore’:
	if typedInput.CertificateStore != nil {
		certificateStore := *typedInput.CertificateStore
		certificate.CertificateStore = &certificateStore
	}

	// Set property ‘CertificateUrl’:
	if typedInput.CertificateUrl != nil {
		certificateUrl := *typedInput.CertificateUrl
		certificate.CertificateUrl = &certificateUrl
	}

	// No error
	return nil
}

// AssignPropertiesFromVaultCertificateSpec populates our VaultCertificate_Spec from the provided source VaultCertificate_Spec
func (certificate *VaultCertificate_Spec) AssignPropertiesFromVaultCertificateSpec(source *v1alpha1api20201201storage.VaultCertificate_Spec) error {

	// CertificateStore
	certificate.CertificateStore = genruntime.ClonePointerToString(source.CertificateStore)

	// CertificateUrl
	certificate.CertificateUrl = genruntime.ClonePointerToString(source.CertificateUrl)

	// No error
	return nil
}

// AssignPropertiesToVaultCertificateSpec populates the provided destination VaultCertificate_Spec from our VaultCertificate_Spec
func (certificate *VaultCertificate_Spec) AssignPropertiesToVaultCertificateSpec(destination *v1alpha1api20201201storage.VaultCertificate_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CertificateStore
	destination.CertificateStore = genruntime.ClonePointerToString(certificate.CertificateStore)

	// CertificateUrl
	destination.CertificateUrl = genruntime.ClonePointerToString(certificate.CertificateUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VaultCertificate_Status struct {
	//CertificateStore: For Windows VMs, specifies the certificate store on the
	//Virtual Machine to which the certificate should be added. The specified
	//certificate store is implicitly in the LocalMachine account.
	//For Linux VMs, the certificate file is placed under the /var/lib/waagent
	//directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509
	//certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of
	//these files are .pem formatted.
	CertificateStore *string `json:"certificateStore,omitempty"`

	//CertificateUrl: This is the URL of a certificate that has been uploaded to Key
	//Vault as a secret. For adding a secret to the Key Vault, see [Add a key or
	//secret to the key
	//vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
	//In this case, your certificate needs to be It is the Base64 encoding of the
	//following JSON Object which is encoded in UTF-8:
	//{
	//"data":"<Base64-encoded-certificate>",
	//"dataType":"pfx",
	//"password":"<pfx-file-password>"
	//}
	CertificateUrl *string `json:"certificateUrl,omitempty"`
}

var _ genruntime.FromARMConverter = &VaultCertificate_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VaultCertificate_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VaultCertificate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VaultCertificate_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VaultCertificate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VaultCertificate_StatusARM, got %T", armInput)
	}

	// Set property ‘CertificateStore’:
	if typedInput.CertificateStore != nil {
		certificateStore := *typedInput.CertificateStore
		certificate.CertificateStore = &certificateStore
	}

	// Set property ‘CertificateUrl’:
	if typedInput.CertificateUrl != nil {
		certificateUrl := *typedInput.CertificateUrl
		certificate.CertificateUrl = &certificateUrl
	}

	// No error
	return nil
}

// AssignPropertiesFromVaultCertificateStatus populates our VaultCertificate_Status from the provided source VaultCertificate_Status
func (certificate *VaultCertificate_Status) AssignPropertiesFromVaultCertificateStatus(source *v1alpha1api20201201storage.VaultCertificate_Status) error {

	// CertificateStore
	certificate.CertificateStore = genruntime.ClonePointerToString(source.CertificateStore)

	// CertificateUrl
	certificate.CertificateUrl = genruntime.ClonePointerToString(source.CertificateUrl)

	// No error
	return nil
}

// AssignPropertiesToVaultCertificateStatus populates the provided destination VaultCertificate_Status from our VaultCertificate_Status
func (certificate *VaultCertificate_Status) AssignPropertiesToVaultCertificateStatus(destination *v1alpha1api20201201storage.VaultCertificate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CertificateStore
	destination.CertificateStore = genruntime.ClonePointerToString(certificate.CertificateStore)

	// CertificateUrl
	destination.CertificateUrl = genruntime.ClonePointerToString(certificate.CertificateUrl)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualHardDisk_Spec struct {
	//Uri: Specifies the virtual hard disk's uri.
	Uri *string `json:"uri,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualHardDisk_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (disk *VirtualHardDisk_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if disk == nil {
		return nil, nil
	}
	var result VirtualHardDisk_SpecARM

	// Set property ‘Uri’:
	if disk.Uri != nil {
		uri := *disk.Uri
		result.Uri = &uri
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *VirtualHardDisk_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualHardDisk_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *VirtualHardDisk_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualHardDisk_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualHardDisk_SpecARM, got %T", armInput)
	}

	// Set property ‘Uri’:
	if typedInput.Uri != nil {
		uri := *typedInput.Uri
		disk.Uri = &uri
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualHardDiskSpec populates our VirtualHardDisk_Spec from the provided source VirtualHardDisk_Spec
func (disk *VirtualHardDisk_Spec) AssignPropertiesFromVirtualHardDiskSpec(source *v1alpha1api20201201storage.VirtualHardDisk_Spec) error {

	// Uri
	disk.Uri = genruntime.ClonePointerToString(source.Uri)

	// No error
	return nil
}

// AssignPropertiesToVirtualHardDiskSpec populates the provided destination VirtualHardDisk_Spec from our VirtualHardDisk_Spec
func (disk *VirtualHardDisk_Spec) AssignPropertiesToVirtualHardDiskSpec(destination *v1alpha1api20201201storage.VirtualHardDisk_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Uri
	destination.Uri = genruntime.ClonePointerToString(disk.Uri)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualHardDisk_Status struct {
	//Uri: Specifies the virtual hard disk's uri.
	Uri *string `json:"uri,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualHardDisk_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *VirtualHardDisk_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualHardDisk_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *VirtualHardDisk_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualHardDisk_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualHardDisk_StatusARM, got %T", armInput)
	}

	// Set property ‘Uri’:
	if typedInput.Uri != nil {
		uri := *typedInput.Uri
		disk.Uri = &uri
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualHardDiskStatus populates our VirtualHardDisk_Status from the provided source VirtualHardDisk_Status
func (disk *VirtualHardDisk_Status) AssignPropertiesFromVirtualHardDiskStatus(source *v1alpha1api20201201storage.VirtualHardDisk_Status) error {

	// Uri
	disk.Uri = genruntime.ClonePointerToString(source.Uri)

	// No error
	return nil
}

// AssignPropertiesToVirtualHardDiskStatus populates the provided destination VirtualHardDisk_Status from our VirtualHardDisk_Status
func (disk *VirtualHardDisk_Status) AssignPropertiesToVirtualHardDiskStatus(destination *v1alpha1api20201201storage.VirtualHardDisk_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Uri
	destination.Uri = genruntime.ClonePointerToString(disk.Uri)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualMachineExtensionHandlerInstanceView_Status struct {
	//Status: The extension handler status.
	Status *InstanceViewStatus_Status `json:"status,omitempty"`

	//Type: Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `json:"type,omitempty"`

	//TypeHandlerVersion: Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineExtensionHandlerInstanceView_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *VirtualMachineExtensionHandlerInstanceView_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineExtensionHandlerInstanceView_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *VirtualMachineExtensionHandlerInstanceView_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineExtensionHandlerInstanceView_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineExtensionHandlerInstanceView_StatusARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		var status1 InstanceViewStatus_Status
		err := status1.PopulateFromARM(owner, *typedInput.Status)
		if err != nil {
			return err
		}
		status := status1
		view.Status = &status
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		view.Type = &typeVar
	}

	// Set property ‘TypeHandlerVersion’:
	if typedInput.TypeHandlerVersion != nil {
		typeHandlerVersion := *typedInput.TypeHandlerVersion
		view.TypeHandlerVersion = &typeHandlerVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineExtensionHandlerInstanceViewStatus populates our VirtualMachineExtensionHandlerInstanceView_Status from the provided source VirtualMachineExtensionHandlerInstanceView_Status
func (view *VirtualMachineExtensionHandlerInstanceView_Status) AssignPropertiesFromVirtualMachineExtensionHandlerInstanceViewStatus(source *v1alpha1api20201201storage.VirtualMachineExtensionHandlerInstanceView_Status) error {

	// Status
	if source.Status != nil {
		var status InstanceViewStatus_Status
		err := status.AssignPropertiesFromInstanceViewStatusStatus(source.Status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromInstanceViewStatusStatus() to populate field Status")
		}
		view.Status = &status
	} else {
		view.Status = nil
	}

	// Type
	view.Type = genruntime.ClonePointerToString(source.Type)

	// TypeHandlerVersion
	view.TypeHandlerVersion = genruntime.ClonePointerToString(source.TypeHandlerVersion)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineExtensionHandlerInstanceViewStatus populates the provided destination VirtualMachineExtensionHandlerInstanceView_Status from our VirtualMachineExtensionHandlerInstanceView_Status
func (view *VirtualMachineExtensionHandlerInstanceView_Status) AssignPropertiesToVirtualMachineExtensionHandlerInstanceViewStatus(destination *v1alpha1api20201201storage.VirtualMachineExtensionHandlerInstanceView_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if view.Status != nil {
		var status v1alpha1api20201201storage.InstanceViewStatus_Status
		err := view.Status.AssignPropertiesToInstanceViewStatusStatus(&status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToInstanceViewStatusStatus() to populate field Status")
		}
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(view.Type)

	// TypeHandlerVersion
	destination.TypeHandlerVersion = genruntime.ClonePointerToString(view.TypeHandlerVersion)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WinRMConfiguration_Spec struct {
	//Listeners: The list of Windows Remote Management listeners
	Listeners []WinRMListener_Spec `json:"listeners,omitempty"`
}

var _ genruntime.ARMTransformer = &WinRMConfiguration_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *WinRMConfiguration_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result WinRMConfiguration_SpecARM

	// Set property ‘Listeners’:
	for _, item := range configuration.Listeners {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Listeners = append(result.Listeners, itemARM.(WinRMListener_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WinRMConfiguration_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WinRMConfiguration_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WinRMConfiguration_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WinRMConfiguration_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WinRMConfiguration_SpecARM, got %T", armInput)
	}

	// Set property ‘Listeners’:
	for _, item := range typedInput.Listeners {
		var item1 WinRMListener_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.Listeners = append(configuration.Listeners, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromWinRMConfigurationSpec populates our WinRMConfiguration_Spec from the provided source WinRMConfiguration_Spec
func (configuration *WinRMConfiguration_Spec) AssignPropertiesFromWinRMConfigurationSpec(source *v1alpha1api20201201storage.WinRMConfiguration_Spec) error {

	// Listeners
	if source.Listeners != nil {
		listenerList := make([]WinRMListener_Spec, len(source.Listeners))
		for listenerIndex, listenerItem := range source.Listeners {
			// Shadow the loop variable to avoid aliasing
			listenerItem := listenerItem
			var listener WinRMListener_Spec
			err := listener.AssignPropertiesFromWinRMListenerSpec(&listenerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromWinRMListenerSpec() to populate field Listeners")
			}
			listenerList[listenerIndex] = listener
		}
		configuration.Listeners = listenerList
	} else {
		configuration.Listeners = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWinRMConfigurationSpec populates the provided destination WinRMConfiguration_Spec from our WinRMConfiguration_Spec
func (configuration *WinRMConfiguration_Spec) AssignPropertiesToWinRMConfigurationSpec(destination *v1alpha1api20201201storage.WinRMConfiguration_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Listeners
	if configuration.Listeners != nil {
		listenerList := make([]v1alpha1api20201201storage.WinRMListener_Spec, len(configuration.Listeners))
		for listenerIndex, listenerItem := range configuration.Listeners {
			// Shadow the loop variable to avoid aliasing
			listenerItem := listenerItem
			var listener v1alpha1api20201201storage.WinRMListener_Spec
			err := listenerItem.AssignPropertiesToWinRMListenerSpec(&listener)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToWinRMListenerSpec() to populate field Listeners")
			}
			listenerList[listenerIndex] = listener
		}
		destination.Listeners = listenerList
	} else {
		destination.Listeners = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WinRMConfiguration_Status struct {
	//Listeners: The list of Windows Remote Management listeners
	Listeners []WinRMListener_Status `json:"listeners,omitempty"`
}

var _ genruntime.FromARMConverter = &WinRMConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *WinRMConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WinRMConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *WinRMConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WinRMConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WinRMConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘Listeners’:
	for _, item := range typedInput.Listeners {
		var item1 WinRMListener_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.Listeners = append(configuration.Listeners, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromWinRMConfigurationStatus populates our WinRMConfiguration_Status from the provided source WinRMConfiguration_Status
func (configuration *WinRMConfiguration_Status) AssignPropertiesFromWinRMConfigurationStatus(source *v1alpha1api20201201storage.WinRMConfiguration_Status) error {

	// Listeners
	if source.Listeners != nil {
		listenerList := make([]WinRMListener_Status, len(source.Listeners))
		for listenerIndex, listenerItem := range source.Listeners {
			// Shadow the loop variable to avoid aliasing
			listenerItem := listenerItem
			var listener WinRMListener_Status
			err := listener.AssignPropertiesFromWinRMListenerStatus(&listenerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromWinRMListenerStatus() to populate field Listeners")
			}
			listenerList[listenerIndex] = listener
		}
		configuration.Listeners = listenerList
	} else {
		configuration.Listeners = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWinRMConfigurationStatus populates the provided destination WinRMConfiguration_Status from our WinRMConfiguration_Status
func (configuration *WinRMConfiguration_Status) AssignPropertiesToWinRMConfigurationStatus(destination *v1alpha1api20201201storage.WinRMConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Listeners
	if configuration.Listeners != nil {
		listenerList := make([]v1alpha1api20201201storage.WinRMListener_Status, len(configuration.Listeners))
		for listenerIndex, listenerItem := range configuration.Listeners {
			// Shadow the loop variable to avoid aliasing
			listenerItem := listenerItem
			var listener v1alpha1api20201201storage.WinRMListener_Status
			err := listenerItem.AssignPropertiesToWinRMListenerStatus(&listener)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToWinRMListenerStatus() to populate field Listeners")
			}
			listenerList[listenerIndex] = listener
		}
		destination.Listeners = listenerList
	} else {
		destination.Listeners = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft-Windows-Shell-Setup"}
type AdditionalUnattendContentSpecComponentName string

const AdditionalUnattendContentSpecComponentNameMicrosoftWindowsShellSetup = AdditionalUnattendContentSpecComponentName("Microsoft-Windows-Shell-Setup")

// +kubebuilder:validation:Enum={"OobeSystem"}
type AdditionalUnattendContentSpecPassName string

const AdditionalUnattendContentSpecPassNameOobeSystem = AdditionalUnattendContentSpecPassName("OobeSystem")

// +kubebuilder:validation:Enum={"AutoLogon","FirstLogonCommands"}
type AdditionalUnattendContentSpecSettingName string

const (
	AdditionalUnattendContentSpecSettingNameAutoLogon          = AdditionalUnattendContentSpecSettingName("AutoLogon")
	AdditionalUnattendContentSpecSettingNameFirstLogonCommands = AdditionalUnattendContentSpecSettingName("FirstLogonCommands")
)

type AdditionalUnattendContentStatusComponentName string

const AdditionalUnattendContentStatusComponentNameMicrosoftWindowsShellSetup = AdditionalUnattendContentStatusComponentName("Microsoft-Windows-Shell-Setup")

type AdditionalUnattendContentStatusPassName string

const AdditionalUnattendContentStatusPassNameOobeSystem = AdditionalUnattendContentStatusPassName("OobeSystem")

type AdditionalUnattendContentStatusSettingName string

const (
	AdditionalUnattendContentStatusSettingNameAutoLogon          = AdditionalUnattendContentStatusSettingName("AutoLogon")
	AdditionalUnattendContentStatusSettingNameFirstLogonCommands = AdditionalUnattendContentStatusSettingName("FirstLogonCommands")
)

type ApiError_Status struct {
	//Code: The error code.
	Code *string `json:"code,omitempty"`

	//Details: The Api error details
	Details []ApiErrorBase_Status `json:"details,omitempty"`

	//Innererror: The Api inner error
	Innererror *InnerError_Status `json:"innererror,omitempty"`

	//Message: The error message.
	Message *string `json:"message,omitempty"`

	//Target: The target of the particular error.
	Target *string `json:"target,omitempty"`
}

var _ genruntime.FromARMConverter = &ApiError_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (error *ApiError_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiError_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (error *ApiError_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiError_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiError_StatusARM, got %T", armInput)
	}

	// Set property ‘Code’:
	if typedInput.Code != nil {
		code := *typedInput.Code
		error.Code = &code
	}

	// Set property ‘Details’:
	for _, item := range typedInput.Details {
		var item1 ApiErrorBase_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		error.Details = append(error.Details, item1)
	}

	// Set property ‘Innererror’:
	if typedInput.Innererror != nil {
		var innererror1 InnerError_Status
		err := innererror1.PopulateFromARM(owner, *typedInput.Innererror)
		if err != nil {
			return err
		}
		innererror := innererror1
		error.Innererror = &innererror
	}

	// Set property ‘Message’:
	if typedInput.Message != nil {
		message := *typedInput.Message
		error.Message = &message
	}

	// Set property ‘Target’:
	if typedInput.Target != nil {
		target := *typedInput.Target
		error.Target = &target
	}

	// No error
	return nil
}

// AssignPropertiesFromApiErrorStatus populates our ApiError_Status from the provided source ApiError_Status
func (error *ApiError_Status) AssignPropertiesFromApiErrorStatus(source *v1alpha1api20201201storage.ApiError_Status) error {

	// Code
	error.Code = genruntime.ClonePointerToString(source.Code)

	// Details
	if source.Details != nil {
		detailList := make([]ApiErrorBase_Status, len(source.Details))
		for detailIndex, detailItem := range source.Details {
			// Shadow the loop variable to avoid aliasing
			detailItem := detailItem
			var detail ApiErrorBase_Status
			err := detail.AssignPropertiesFromApiErrorBaseStatus(&detailItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApiErrorBaseStatus() to populate field Details")
			}
			detailList[detailIndex] = detail
		}
		error.Details = detailList
	} else {
		error.Details = nil
	}

	// Innererror
	if source.Innererror != nil {
		var innererror InnerError_Status
		err := innererror.AssignPropertiesFromInnerErrorStatus(source.Innererror)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromInnerErrorStatus() to populate field Innererror")
		}
		error.Innererror = &innererror
	} else {
		error.Innererror = nil
	}

	// Message
	error.Message = genruntime.ClonePointerToString(source.Message)

	// Target
	error.Target = genruntime.ClonePointerToString(source.Target)

	// No error
	return nil
}

// AssignPropertiesToApiErrorStatus populates the provided destination ApiError_Status from our ApiError_Status
func (error *ApiError_Status) AssignPropertiesToApiErrorStatus(destination *v1alpha1api20201201storage.ApiError_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Code
	destination.Code = genruntime.ClonePointerToString(error.Code)

	// Details
	if error.Details != nil {
		detailList := make([]v1alpha1api20201201storage.ApiErrorBase_Status, len(error.Details))
		for detailIndex, detailItem := range error.Details {
			// Shadow the loop variable to avoid aliasing
			detailItem := detailItem
			var detail v1alpha1api20201201storage.ApiErrorBase_Status
			err := detailItem.AssignPropertiesToApiErrorBaseStatus(&detail)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApiErrorBaseStatus() to populate field Details")
			}
			detailList[detailIndex] = detail
		}
		destination.Details = detailList
	} else {
		destination.Details = nil
	}

	// Innererror
	if error.Innererror != nil {
		var innererror v1alpha1api20201201storage.InnerError_Status
		err := error.Innererror.AssignPropertiesToInnerErrorStatus(&innererror)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToInnerErrorStatus() to populate field Innererror")
		}
		destination.Innererror = &innererror
	} else {
		destination.Innererror = nil
	}

	// Message
	destination.Message = genruntime.ClonePointerToString(error.Message)

	// Target
	destination.Target = genruntime.ClonePointerToString(error.Target)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AvailablePatchSummaryStatusStatus string

const (
	AvailablePatchSummaryStatusStatusCompletedWithWarnings = AvailablePatchSummaryStatusStatus("CompletedWithWarnings")
	AvailablePatchSummaryStatusStatusFailed                = AvailablePatchSummaryStatusStatus("Failed")
	AvailablePatchSummaryStatusStatusInProgress            = AvailablePatchSummaryStatusStatus("InProgress")
	AvailablePatchSummaryStatusStatusSucceeded             = AvailablePatchSummaryStatusStatus("Succeeded")
	AvailablePatchSummaryStatusStatusUnknown               = AvailablePatchSummaryStatusStatus("Unknown")
)

// +kubebuilder:validation:Enum={"Local"}
type DiffDiskOption_Spec string

const DiffDiskOption_SpecLocal = DiffDiskOption_Spec("Local")

type DiffDiskOption_Status string

const DiffDiskOption_StatusLocal = DiffDiskOption_Status("Local")

// +kubebuilder:validation:Enum={"CacheDisk","ResourceDisk"}
type DiffDiskPlacement_Spec string

const (
	DiffDiskPlacement_SpecCacheDisk    = DiffDiskPlacement_Spec("CacheDisk")
	DiffDiskPlacement_SpecResourceDisk = DiffDiskPlacement_Spec("ResourceDisk")
)

type DiffDiskPlacement_Status string

const (
	DiffDiskPlacement_StatusCacheDisk    = DiffDiskPlacement_Status("CacheDisk")
	DiffDiskPlacement_StatusResourceDisk = DiffDiskPlacement_Status("ResourceDisk")
)

type KeyVaultKeyReference_Spec struct {
	// +kubebuilder:validation:Required
	//KeyUrl: The URL referencing a key encryption key in Key Vault.
	KeyUrl string `json:"keyUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: The relative URL of the Key Vault containing the key.
	SourceVault SubResource_Spec `json:"sourceVault"`
}

var _ genruntime.ARMTransformer = &KeyVaultKeyReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultKeyReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultKeyReference_SpecARM

	// Set property ‘KeyUrl’:
	result.KeyUrl = reference.KeyUrl

	// Set property ‘SourceVault’:
	sourceVaultARM, err := reference.SourceVault.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.SourceVault = sourceVaultARM.(SubResource_SpecARM)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultKeyReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultKeyReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultKeyReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultKeyReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultKeyReference_SpecARM, got %T", armInput)
	}

	// Set property ‘KeyUrl’:
	reference.KeyUrl = typedInput.KeyUrl

	// Set property ‘SourceVault’:
	var sourceVault SubResource_Spec
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultKeyReferenceSpec populates our KeyVaultKeyReference_Spec from the provided source KeyVaultKeyReference_Spec
func (reference *KeyVaultKeyReference_Spec) AssignPropertiesFromKeyVaultKeyReferenceSpec(source *v1alpha1api20201201storage.KeyVaultKeyReference_Spec) error {

	// KeyUrl
	reference.KeyUrl = genruntime.GetOptionalStringValue(source.KeyUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SubResource_Spec
		err := sourceVault.AssignPropertiesFromSubResourceSpec(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SubResource_Spec{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultKeyReferenceSpec populates the provided destination KeyVaultKeyReference_Spec from our KeyVaultKeyReference_Spec
func (reference *KeyVaultKeyReference_Spec) AssignPropertiesToKeyVaultKeyReferenceSpec(destination *v1alpha1api20201201storage.KeyVaultKeyReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyUrl
	keyUrl := reference.KeyUrl
	destination.KeyUrl = &keyUrl

	// SourceVault
	var sourceVault v1alpha1api20201201storage.SubResource_Spec
	err := reference.SourceVault.AssignPropertiesToSubResourceSpec(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultKeyReference_Status struct {
	// +kubebuilder:validation:Required
	//KeyUrl: The URL referencing a key encryption key in Key Vault.
	KeyUrl string `json:"keyUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: The relative URL of the Key Vault containing the key.
	SourceVault SubResource_Status `json:"sourceVault"`
}

var _ genruntime.FromARMConverter = &KeyVaultKeyReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultKeyReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultKeyReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultKeyReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultKeyReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultKeyReference_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyUrl’:
	reference.KeyUrl = typedInput.KeyUrl

	// Set property ‘SourceVault’:
	var sourceVault SubResource_Status
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultKeyReferenceStatus populates our KeyVaultKeyReference_Status from the provided source KeyVaultKeyReference_Status
func (reference *KeyVaultKeyReference_Status) AssignPropertiesFromKeyVaultKeyReferenceStatus(source *v1alpha1api20201201storage.KeyVaultKeyReference_Status) error {

	// KeyUrl
	reference.KeyUrl = genruntime.GetOptionalStringValue(source.KeyUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SubResource_Status
		err := sourceVault.AssignPropertiesFromSubResourceStatus(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SubResource_Status{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultKeyReferenceStatus populates the provided destination KeyVaultKeyReference_Status from our KeyVaultKeyReference_Status
func (reference *KeyVaultKeyReference_Status) AssignPropertiesToKeyVaultKeyReferenceStatus(destination *v1alpha1api20201201storage.KeyVaultKeyReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyUrl
	keyUrl := reference.KeyUrl
	destination.KeyUrl = &keyUrl

	// SourceVault
	var sourceVault v1alpha1api20201201storage.SubResource_Status
	err := reference.SourceVault.AssignPropertiesToSubResourceStatus(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultSecretReference_Spec struct {
	// +kubebuilder:validation:Required
	//SecretUrl: The URL referencing a secret in a Key Vault.
	SecretUrl string `json:"secretUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: The relative URL of the Key Vault containing the secret.
	SourceVault SubResource_Spec `json:"sourceVault"`
}

var _ genruntime.ARMTransformer = &KeyVaultSecretReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultSecretReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultSecretReference_SpecARM

	// Set property ‘SecretUrl’:
	result.SecretUrl = reference.SecretUrl

	// Set property ‘SourceVault’:
	sourceVaultARM, err := reference.SourceVault.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.SourceVault = sourceVaultARM.(SubResource_SpecARM)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultSecretReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultSecretReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultSecretReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultSecretReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultSecretReference_SpecARM, got %T", armInput)
	}

	// Set property ‘SecretUrl’:
	reference.SecretUrl = typedInput.SecretUrl

	// Set property ‘SourceVault’:
	var sourceVault SubResource_Spec
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultSecretReferenceSpec populates our KeyVaultSecretReference_Spec from the provided source KeyVaultSecretReference_Spec
func (reference *KeyVaultSecretReference_Spec) AssignPropertiesFromKeyVaultSecretReferenceSpec(source *v1alpha1api20201201storage.KeyVaultSecretReference_Spec) error {

	// SecretUrl
	reference.SecretUrl = genruntime.GetOptionalStringValue(source.SecretUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SubResource_Spec
		err := sourceVault.AssignPropertiesFromSubResourceSpec(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSpec() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SubResource_Spec{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultSecretReferenceSpec populates the provided destination KeyVaultSecretReference_Spec from our KeyVaultSecretReference_Spec
func (reference *KeyVaultSecretReference_Spec) AssignPropertiesToKeyVaultSecretReferenceSpec(destination *v1alpha1api20201201storage.KeyVaultSecretReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecretUrl
	secretUrl := reference.SecretUrl
	destination.SecretUrl = &secretUrl

	// SourceVault
	var sourceVault v1alpha1api20201201storage.SubResource_Spec
	err := reference.SourceVault.AssignPropertiesToSubResourceSpec(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSubResourceSpec() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultSecretReference_Status struct {
	// +kubebuilder:validation:Required
	//SecretUrl: The URL referencing a secret in a Key Vault.
	SecretUrl string `json:"secretUrl"`

	// +kubebuilder:validation:Required
	//SourceVault: The relative URL of the Key Vault containing the secret.
	SourceVault SubResource_Status `json:"sourceVault"`
}

var _ genruntime.FromARMConverter = &KeyVaultSecretReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultSecretReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultSecretReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultSecretReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultSecretReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultSecretReference_StatusARM, got %T", armInput)
	}

	// Set property ‘SecretUrl’:
	reference.SecretUrl = typedInput.SecretUrl

	// Set property ‘SourceVault’:
	var sourceVault SubResource_Status
	err := sourceVault.PopulateFromARM(owner, typedInput.SourceVault)
	if err != nil {
		return err
	}
	reference.SourceVault = sourceVault

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultSecretReferenceStatus populates our KeyVaultSecretReference_Status from the provided source KeyVaultSecretReference_Status
func (reference *KeyVaultSecretReference_Status) AssignPropertiesFromKeyVaultSecretReferenceStatus(source *v1alpha1api20201201storage.KeyVaultSecretReference_Status) error {

	// SecretUrl
	reference.SecretUrl = genruntime.GetOptionalStringValue(source.SecretUrl)

	// SourceVault
	if source.SourceVault != nil {
		var sourceVault SubResource_Status
		err := sourceVault.AssignPropertiesFromSubResourceStatus(source.SourceVault)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field SourceVault")
		}
		reference.SourceVault = sourceVault
	} else {
		reference.SourceVault = SubResource_Status{}
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultSecretReferenceStatus populates the provided destination KeyVaultSecretReference_Status from our KeyVaultSecretReference_Status
func (reference *KeyVaultSecretReference_Status) AssignPropertiesToKeyVaultSecretReferenceStatus(destination *v1alpha1api20201201storage.KeyVaultSecretReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SecretUrl
	secretUrl := reference.SecretUrl
	destination.SecretUrl = &secretUrl

	// SourceVault
	var sourceVault v1alpha1api20201201storage.SubResource_Status
	err := reference.SourceVault.AssignPropertiesToSubResourceStatus(&sourceVault)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field SourceVault")
	}
	destination.SourceVault = &sourceVault

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LastPatchInstallationSummaryStatusStatus string

const (
	LastPatchInstallationSummaryStatusStatusCompletedWithWarnings = LastPatchInstallationSummaryStatusStatus("CompletedWithWarnings")
	LastPatchInstallationSummaryStatusStatusFailed                = LastPatchInstallationSummaryStatusStatus("Failed")
	LastPatchInstallationSummaryStatusStatusInProgress            = LastPatchInstallationSummaryStatusStatus("InProgress")
	LastPatchInstallationSummaryStatusStatusSucceeded             = LastPatchInstallationSummaryStatusStatus("Succeeded")
	LastPatchInstallationSummaryStatusStatusUnknown               = LastPatchInstallationSummaryStatusStatus("Unknown")
)

// +kubebuilder:validation:Enum={"AutomaticByPlatform","ImageDefault"}
type LinuxPatchSettingsSpecPatchMode string

const (
	LinuxPatchSettingsSpecPatchModeAutomaticByPlatform = LinuxPatchSettingsSpecPatchMode("AutomaticByPlatform")
	LinuxPatchSettingsSpecPatchModeImageDefault        = LinuxPatchSettingsSpecPatchMode("ImageDefault")
)

type LinuxPatchSettingsStatusPatchMode string

const (
	LinuxPatchSettingsStatusPatchModeAutomaticByPlatform = LinuxPatchSettingsStatusPatchMode("AutomaticByPlatform")
	LinuxPatchSettingsStatusPatchModeImageDefault        = LinuxPatchSettingsStatusPatchMode("ImageDefault")
)

// +kubebuilder:validation:Enum={"AutomaticByOS","AutomaticByPlatform","Manual"}
type PatchSettingsSpecPatchMode string

const (
	PatchSettingsSpecPatchModeAutomaticByOS       = PatchSettingsSpecPatchMode("AutomaticByOS")
	PatchSettingsSpecPatchModeAutomaticByPlatform = PatchSettingsSpecPatchMode("AutomaticByPlatform")
	PatchSettingsSpecPatchModeManual              = PatchSettingsSpecPatchMode("Manual")
)

type PatchSettingsStatusPatchMode string

const (
	PatchSettingsStatusPatchModeAutomaticByOS       = PatchSettingsStatusPatchMode("AutomaticByOS")
	PatchSettingsStatusPatchModeAutomaticByPlatform = PatchSettingsStatusPatchMode("AutomaticByPlatform")
	PatchSettingsStatusPatchModeManual              = PatchSettingsStatusPatchMode("Manual")
)

type SshPublicKey_Spec struct {
	//KeyData: SSH public key certificate used to authenticate with the VM through
	//ssh. The key needs to be at least 2048-bit and in ssh-rsa format.
	//For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in
	//Azure](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	KeyData *string `json:"keyData,omitempty"`

	//Path: Specifies the full path on the created VM where ssh public key is stored.
	//If the file already exists, the specified key is appended to the file. Example:
	///home/user/.ssh/authorized_keys
	Path *string `json:"path,omitempty"`
}

var _ genruntime.ARMTransformer = &SshPublicKey_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (publicKey *SshPublicKey_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if publicKey == nil {
		return nil, nil
	}
	var result SshPublicKey_SpecARM

	// Set property ‘KeyData’:
	if publicKey.KeyData != nil {
		keyData := *publicKey.KeyData
		result.KeyData = &keyData
	}

	// Set property ‘Path’:
	if publicKey.Path != nil {
		path := *publicKey.Path
		result.Path = &path
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicKey *SshPublicKey_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SshPublicKey_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicKey *SshPublicKey_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SshPublicKey_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SshPublicKey_SpecARM, got %T", armInput)
	}

	// Set property ‘KeyData’:
	if typedInput.KeyData != nil {
		keyData := *typedInput.KeyData
		publicKey.KeyData = &keyData
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		publicKey.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromSshPublicKeySpec populates our SshPublicKey_Spec from the provided source SshPublicKey_Spec
func (publicKey *SshPublicKey_Spec) AssignPropertiesFromSshPublicKeySpec(source *v1alpha1api20201201storage.SshPublicKey_Spec) error {

	// KeyData
	publicKey.KeyData = genruntime.ClonePointerToString(source.KeyData)

	// Path
	publicKey.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToSshPublicKeySpec populates the provided destination SshPublicKey_Spec from our SshPublicKey_Spec
func (publicKey *SshPublicKey_Spec) AssignPropertiesToSshPublicKeySpec(destination *v1alpha1api20201201storage.SshPublicKey_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyData
	destination.KeyData = genruntime.ClonePointerToString(publicKey.KeyData)

	// Path
	destination.Path = genruntime.ClonePointerToString(publicKey.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SshPublicKey_Status struct {
	//KeyData: SSH public key certificate used to authenticate with the VM through
	//ssh. The key needs to be at least 2048-bit and in ssh-rsa format.
	//For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in
	//Azure](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	KeyData *string `json:"keyData,omitempty"`

	//Path: Specifies the full path on the created VM where ssh public key is stored.
	//If the file already exists, the specified key is appended to the file. Example:
	///home/user/.ssh/authorized_keys
	Path *string `json:"path,omitempty"`
}

var _ genruntime.FromARMConverter = &SshPublicKey_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicKey *SshPublicKey_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SshPublicKey_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicKey *SshPublicKey_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SshPublicKey_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SshPublicKey_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyData’:
	if typedInput.KeyData != nil {
		keyData := *typedInput.KeyData
		publicKey.KeyData = &keyData
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		publicKey.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromSshPublicKeyStatus populates our SshPublicKey_Status from the provided source SshPublicKey_Status
func (publicKey *SshPublicKey_Status) AssignPropertiesFromSshPublicKeyStatus(source *v1alpha1api20201201storage.SshPublicKey_Status) error {

	// KeyData
	publicKey.KeyData = genruntime.ClonePointerToString(source.KeyData)

	// Path
	publicKey.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToSshPublicKeyStatus populates the provided destination SshPublicKey_Status from our SshPublicKey_Status
func (publicKey *SshPublicKey_Status) AssignPropertiesToSshPublicKeyStatus(destination *v1alpha1api20201201storage.SshPublicKey_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyData
	destination.KeyData = genruntime.ClonePointerToString(publicKey.KeyData)

	// Path
	destination.Path = genruntime.ClonePointerToString(publicKey.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Premium_LRS","Premium_ZRS","Standard_LRS","StandardSSD_LRS","StandardSSD_ZRS","UltraSSD_LRS"}
type StorageAccountType_Spec string

const (
	StorageAccountType_SpecPremiumLRS     = StorageAccountType_Spec("Premium_LRS")
	StorageAccountType_SpecPremiumZRS     = StorageAccountType_Spec("Premium_ZRS")
	StorageAccountType_SpecStandardLRS    = StorageAccountType_Spec("Standard_LRS")
	StorageAccountType_SpecStandardSSDLRS = StorageAccountType_Spec("StandardSSD_LRS")
	StorageAccountType_SpecStandardSSDZRS = StorageAccountType_Spec("StandardSSD_ZRS")
	StorageAccountType_SpecUltraSSDLRS    = StorageAccountType_Spec("UltraSSD_LRS")
)

type StorageAccountType_Status string

const (
	StorageAccountType_StatusPremiumLRS     = StorageAccountType_Status("Premium_LRS")
	StorageAccountType_StatusPremiumZRS     = StorageAccountType_Status("Premium_ZRS")
	StorageAccountType_StatusStandardLRS    = StorageAccountType_Status("Standard_LRS")
	StorageAccountType_StatusStandardSSDLRS = StorageAccountType_Status("StandardSSD_LRS")
	StorageAccountType_StatusStandardSSDZRS = StorageAccountType_Status("StandardSSD_ZRS")
	StorageAccountType_StatusUltraSSDLRS    = StorageAccountType_Status("UltraSSD_LRS")
)

type WinRMListener_Spec struct {
	//CertificateUrl: This is the URL of a certificate that has been uploaded to Key
	//Vault as a secret. For adding a secret to the Key Vault, see [Add a key or
	//secret to the key
	//vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
	//In this case, your certificate needs to be It is the Base64 encoding of the
	//following JSON Object which is encoded in UTF-8:
	//{
	//"data":"<Base64-encoded-certificate>",
	//"dataType":"pfx",
	//"password":"<pfx-file-password>"
	//}
	CertificateUrl *string `json:"certificateUrl,omitempty"`

	//Protocol: Specifies the protocol of WinRM listener.
	//Possible values are:
	//http
	//https
	Protocol *WinRMListenerSpecProtocol `json:"protocol,omitempty"`
}

var _ genruntime.ARMTransformer = &WinRMListener_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (listener *WinRMListener_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if listener == nil {
		return nil, nil
	}
	var result WinRMListener_SpecARM

	// Set property ‘CertificateUrl’:
	if listener.CertificateUrl != nil {
		certificateUrl := *listener.CertificateUrl
		result.CertificateUrl = &certificateUrl
	}

	// Set property ‘Protocol’:
	if listener.Protocol != nil {
		protocol := *listener.Protocol
		result.Protocol = &protocol
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (listener *WinRMListener_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WinRMListener_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (listener *WinRMListener_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WinRMListener_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WinRMListener_SpecARM, got %T", armInput)
	}

	// Set property ‘CertificateUrl’:
	if typedInput.CertificateUrl != nil {
		certificateUrl := *typedInput.CertificateUrl
		listener.CertificateUrl = &certificateUrl
	}

	// Set property ‘Protocol’:
	if typedInput.Protocol != nil {
		protocol := *typedInput.Protocol
		listener.Protocol = &protocol
	}

	// No error
	return nil
}

// AssignPropertiesFromWinRMListenerSpec populates our WinRMListener_Spec from the provided source WinRMListener_Spec
func (listener *WinRMListener_Spec) AssignPropertiesFromWinRMListenerSpec(source *v1alpha1api20201201storage.WinRMListener_Spec) error {

	// CertificateUrl
	listener.CertificateUrl = genruntime.ClonePointerToString(source.CertificateUrl)

	// Protocol
	if source.Protocol != nil {
		protocol := WinRMListenerSpecProtocol(*source.Protocol)
		listener.Protocol = &protocol
	} else {
		listener.Protocol = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWinRMListenerSpec populates the provided destination WinRMListener_Spec from our WinRMListener_Spec
func (listener *WinRMListener_Spec) AssignPropertiesToWinRMListenerSpec(destination *v1alpha1api20201201storage.WinRMListener_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CertificateUrl
	destination.CertificateUrl = genruntime.ClonePointerToString(listener.CertificateUrl)

	// Protocol
	if listener.Protocol != nil {
		protocol := string(*listener.Protocol)
		destination.Protocol = &protocol
	} else {
		destination.Protocol = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type WinRMListener_Status struct {
	//CertificateUrl: This is the URL of a certificate that has been uploaded to Key
	//Vault as a secret. For adding a secret to the Key Vault, see [Add a key or
	//secret to the key
	//vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
	//In this case, your certificate needs to be It is the Base64 encoding of the
	//following JSON Object which is encoded in UTF-8:
	//{
	//"data":"<Base64-encoded-certificate>",
	//"dataType":"pfx",
	//"password":"<pfx-file-password>"
	//}
	CertificateUrl *string `json:"certificateUrl,omitempty"`

	//Protocol: Specifies the protocol of WinRM listener.
	//Possible values are:
	//http
	//https
	Protocol *WinRMListenerStatusProtocol `json:"protocol,omitempty"`
}

var _ genruntime.FromARMConverter = &WinRMListener_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (listener *WinRMListener_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &WinRMListener_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (listener *WinRMListener_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WinRMListener_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WinRMListener_StatusARM, got %T", armInput)
	}

	// Set property ‘CertificateUrl’:
	if typedInput.CertificateUrl != nil {
		certificateUrl := *typedInput.CertificateUrl
		listener.CertificateUrl = &certificateUrl
	}

	// Set property ‘Protocol’:
	if typedInput.Protocol != nil {
		protocol := *typedInput.Protocol
		listener.Protocol = &protocol
	}

	// No error
	return nil
}

// AssignPropertiesFromWinRMListenerStatus populates our WinRMListener_Status from the provided source WinRMListener_Status
func (listener *WinRMListener_Status) AssignPropertiesFromWinRMListenerStatus(source *v1alpha1api20201201storage.WinRMListener_Status) error {

	// CertificateUrl
	listener.CertificateUrl = genruntime.ClonePointerToString(source.CertificateUrl)

	// Protocol
	if source.Protocol != nil {
		protocol := WinRMListenerStatusProtocol(*source.Protocol)
		listener.Protocol = &protocol
	} else {
		listener.Protocol = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWinRMListenerStatus populates the provided destination WinRMListener_Status from our WinRMListener_Status
func (listener *WinRMListener_Status) AssignPropertiesToWinRMListenerStatus(destination *v1alpha1api20201201storage.WinRMListener_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CertificateUrl
	destination.CertificateUrl = genruntime.ClonePointerToString(listener.CertificateUrl)

	// Protocol
	if listener.Protocol != nil {
		protocol := string(*listener.Protocol)
		destination.Protocol = &protocol
	} else {
		destination.Protocol = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ApiErrorBase_Status struct {
	//Code: The error code.
	Code *string `json:"code,omitempty"`

	//Message: The error message.
	Message *string `json:"message,omitempty"`

	//Target: The target of the particular error.
	Target *string `json:"target,omitempty"`
}

var _ genruntime.FromARMConverter = &ApiErrorBase_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (base *ApiErrorBase_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiErrorBase_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (base *ApiErrorBase_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiErrorBase_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiErrorBase_StatusARM, got %T", armInput)
	}

	// Set property ‘Code’:
	if typedInput.Code != nil {
		code := *typedInput.Code
		base.Code = &code
	}

	// Set property ‘Message’:
	if typedInput.Message != nil {
		message := *typedInput.Message
		base.Message = &message
	}

	// Set property ‘Target’:
	if typedInput.Target != nil {
		target := *typedInput.Target
		base.Target = &target
	}

	// No error
	return nil
}

// AssignPropertiesFromApiErrorBaseStatus populates our ApiErrorBase_Status from the provided source ApiErrorBase_Status
func (base *ApiErrorBase_Status) AssignPropertiesFromApiErrorBaseStatus(source *v1alpha1api20201201storage.ApiErrorBase_Status) error {

	// Code
	base.Code = genruntime.ClonePointerToString(source.Code)

	// Message
	base.Message = genruntime.ClonePointerToString(source.Message)

	// Target
	base.Target = genruntime.ClonePointerToString(source.Target)

	// No error
	return nil
}

// AssignPropertiesToApiErrorBaseStatus populates the provided destination ApiErrorBase_Status from our ApiErrorBase_Status
func (base *ApiErrorBase_Status) AssignPropertiesToApiErrorBaseStatus(destination *v1alpha1api20201201storage.ApiErrorBase_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Code
	destination.Code = genruntime.ClonePointerToString(base.Code)

	// Message
	destination.Message = genruntime.ClonePointerToString(base.Message)

	// Target
	destination.Target = genruntime.ClonePointerToString(base.Target)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type InnerError_Status struct {
	//Errordetail: The internal error message or exception dump.
	Errordetail *string `json:"errordetail,omitempty"`

	//Exceptiontype: The exception type.
	Exceptiontype *string `json:"exceptiontype,omitempty"`
}

var _ genruntime.FromARMConverter = &InnerError_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (error *InnerError_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &InnerError_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (error *InnerError_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(InnerError_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected InnerError_StatusARM, got %T", armInput)
	}

	// Set property ‘Errordetail’:
	if typedInput.Errordetail != nil {
		errordetail := *typedInput.Errordetail
		error.Errordetail = &errordetail
	}

	// Set property ‘Exceptiontype’:
	if typedInput.Exceptiontype != nil {
		exceptiontype := *typedInput.Exceptiontype
		error.Exceptiontype = &exceptiontype
	}

	// No error
	return nil
}

// AssignPropertiesFromInnerErrorStatus populates our InnerError_Status from the provided source InnerError_Status
func (error *InnerError_Status) AssignPropertiesFromInnerErrorStatus(source *v1alpha1api20201201storage.InnerError_Status) error {

	// Errordetail
	error.Errordetail = genruntime.ClonePointerToString(source.Errordetail)

	// Exceptiontype
	error.Exceptiontype = genruntime.ClonePointerToString(source.Exceptiontype)

	// No error
	return nil
}

// AssignPropertiesToInnerErrorStatus populates the provided destination InnerError_Status from our InnerError_Status
func (error *InnerError_Status) AssignPropertiesToInnerErrorStatus(destination *v1alpha1api20201201storage.InnerError_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Errordetail
	destination.Errordetail = genruntime.ClonePointerToString(error.Errordetail)

	// Exceptiontype
	destination.Exceptiontype = genruntime.ClonePointerToString(error.Exceptiontype)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Http","Https"}
type WinRMListenerSpecProtocol string

const (
	WinRMListenerSpecProtocolHttp  = WinRMListenerSpecProtocol("Http")
	WinRMListenerSpecProtocolHttps = WinRMListenerSpecProtocol("Https")
)

type WinRMListenerStatusProtocol string

const (
	WinRMListenerStatusProtocolHttp  = WinRMListenerStatusProtocol("Http")
	WinRMListenerStatusProtocolHttps = WinRMListenerStatusProtocol("Https")
)

func init() {
	SchemeBuilder.Register(&VirtualMachine{}, &VirtualMachineList{})
}
