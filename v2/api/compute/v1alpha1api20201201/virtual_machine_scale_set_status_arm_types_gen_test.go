// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSet_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSet_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSet_STATUSARM, VirtualMachineScaleSet_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSet_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSet_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSet_STATUSARM(subject VirtualMachineScaleSet_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSet_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSet_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSet_STATUSARMGenerator()
var virtualMachineScaleSet_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSet_STATUSARMGenerator returns a generator of VirtualMachineScaleSet_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSet_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSet_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSet_STATUSARMGenerator != nil {
		return virtualMachineScaleSet_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUSARM(generators)
	virtualMachineScaleSet_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_STATUSARM(generators)
	virtualMachineScaleSet_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_STATUSARM{}), generators)

	return virtualMachineScaleSet_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentity_STATUSARMGenerator())
	gens["Plan"] = gen.PtrOf(Plan_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetProperties_STATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUSARMGenerator())
}

func Test_ExtendedLocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUSARM, ExtendedLocation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUSARM runs a test to see if a specific instance of ExtendedLocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUSARM(subject ExtendedLocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUSARM instances for property testing - lazily instantiated by
// ExtendedLocation_STATUSARMGenerator()
var extendedLocation_STATUSARMGenerator gopter.Gen

// ExtendedLocation_STATUSARMGenerator returns a generator of ExtendedLocation_STATUSARM instances for property testing.
func ExtendedLocation_STATUSARMGenerator() gopter.Gen {
	if extendedLocation_STATUSARMGenerator != nil {
		return extendedLocation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(generators)
	extendedLocation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUSARM{}), generators)

	return extendedLocation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_STATUS_EdgeZone))
}

func Test_Plan_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlan_STATUSARM, Plan_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlan_STATUSARM runs a test to see if a specific instance of Plan_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlan_STATUSARM(subject Plan_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_STATUSARM instances for property testing - lazily instantiated by Plan_STATUSARMGenerator()
var plan_STATUSARMGenerator gopter.Gen

// Plan_STATUSARMGenerator returns a generator of Plan_STATUSARM instances for property testing.
func Plan_STATUSARMGenerator() gopter.Gen {
	if plan_STATUSARMGenerator != nil {
		return plan_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlan_STATUSARM(generators)
	plan_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Plan_STATUSARM{}), generators)

	return plan_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPlan_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlan_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUSARM, Sku_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUSARM runs a test to see if a specific instance of Sku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUSARM(subject Sku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUSARM instances for property testing - lazily instantiated by Sku_STATUSARMGenerator()
var sku_STATUSARMGenerator gopter.Gen

// Sku_STATUSARMGenerator returns a generator of Sku_STATUSARM instances for property testing.
func Sku_STATUSARMGenerator() gopter.Gen {
	if sku_STATUSARMGenerator != nil {
		return sku_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUSARM(generators)
	sku_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUSARM{}), generators)

	return sku_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentity_STATUSARM, VirtualMachineScaleSetIdentity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentity_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentity_STATUSARM(subject VirtualMachineScaleSetIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIdentity_STATUSARMGenerator()
var virtualMachineScaleSetIdentity_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentity_STATUSARMGenerator returns a generator of VirtualMachineScaleSetIdentity_STATUSARM instances for property testing.
func VirtualMachineScaleSetIdentity_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentity_STATUSARMGenerator != nil {
		return virtualMachineScaleSetIdentity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUSARM(generators)
	virtualMachineScaleSetIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_STATUSARM{}), generators)

	return virtualMachineScaleSetIdentity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachineScaleSetIdentity_STATUS_Type_None,
		VirtualMachineScaleSetIdentity_STATUS_Type_SystemAssigned,
		VirtualMachineScaleSetIdentity_STATUS_Type_SystemAssignedUserAssigned,
		VirtualMachineScaleSetIdentity_STATUS_Type_UserAssigned))
}

func Test_VirtualMachineScaleSetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetProperties_STATUSARM, VirtualMachineScaleSetProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetProperties_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetProperties_STATUSARM(subject VirtualMachineScaleSetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetProperties_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetProperties_STATUSARMGenerator()
var virtualMachineScaleSetProperties_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetProperties_STATUSARMGenerator returns a generator of VirtualMachineScaleSetProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetProperties_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetProperties_STATUSARMGenerator != nil {
		return virtualMachineScaleSetProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUSARM(generators)
	virtualMachineScaleSetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUSARM(generators)
	virtualMachineScaleSetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.OneConstOf(OrchestrationMode_STATUS_Flexible, OrchestrationMode_STATUS_Uniform))
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["UniqueId"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilities_STATUSARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicy_STATUSARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicy_STATUSARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicy_STATUSARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfile_STATUSARMGenerator())
}

func Test_AdditionalCapabilities_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilities_STATUSARM, AdditionalCapabilities_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilities_STATUSARM runs a test to see if a specific instance of AdditionalCapabilities_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilities_STATUSARM(subject AdditionalCapabilities_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalCapabilities_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalCapabilities_STATUSARM instances for property testing - lazily instantiated by
// AdditionalCapabilities_STATUSARMGenerator()
var additionalCapabilities_STATUSARMGenerator gopter.Gen

// AdditionalCapabilities_STATUSARMGenerator returns a generator of AdditionalCapabilities_STATUSARM instances for property testing.
func AdditionalCapabilities_STATUSARMGenerator() gopter.Gen {
	if additionalCapabilities_STATUSARMGenerator != nil {
		return additionalCapabilities_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilities_STATUSARM(generators)
	additionalCapabilities_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_STATUSARM{}), generators)

	return additionalCapabilities_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilities_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilities_STATUSARM(gens map[string]gopter.Gen) {
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicy_STATUSARM, AutomaticRepairsPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicy_STATUSARM runs a test to see if a specific instance of AutomaticRepairsPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicy_STATUSARM(subject AutomaticRepairsPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticRepairsPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticRepairsPolicy_STATUSARM instances for property testing - lazily instantiated by
// AutomaticRepairsPolicy_STATUSARMGenerator()
var automaticRepairsPolicy_STATUSARMGenerator gopter.Gen

// AutomaticRepairsPolicy_STATUSARMGenerator returns a generator of AutomaticRepairsPolicy_STATUSARM instances for property testing.
func AutomaticRepairsPolicy_STATUSARMGenerator() gopter.Gen {
	if automaticRepairsPolicy_STATUSARMGenerator != nil {
		return automaticRepairsPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_STATUSARM(generators)
	automaticRepairsPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_STATUSARM{}), generators)

	return automaticRepairsPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScaleInPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicy_STATUSARM, ScaleInPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicy_STATUSARM runs a test to see if a specific instance of ScaleInPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicy_STATUSARM(subject ScaleInPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleInPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleInPolicy_STATUSARM instances for property testing - lazily instantiated by
// ScaleInPolicy_STATUSARMGenerator()
var scaleInPolicy_STATUSARMGenerator gopter.Gen

// ScaleInPolicy_STATUSARMGenerator returns a generator of ScaleInPolicy_STATUSARM instances for property testing.
func ScaleInPolicy_STATUSARMGenerator() gopter.Gen {
	if scaleInPolicy_STATUSARMGenerator != nil {
		return scaleInPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicy_STATUSARM(generators)
	scaleInPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_STATUSARM{}), generators)

	return scaleInPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(gen.OneConstOf(ScaleInPolicy_STATUS_Rules_Default, ScaleInPolicy_STATUS_Rules_NewestVM, ScaleInPolicy_STATUS_Rules_OldestVM))
}

func Test_SubResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_STATUSARM, SubResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_STATUSARM runs a test to see if a specific instance of SubResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_STATUSARM(subject SubResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_STATUSARM instances for property testing - lazily instantiated by
// SubResource_STATUSARMGenerator()
var subResource_STATUSARMGenerator gopter.Gen

// SubResource_STATUSARMGenerator returns a generator of SubResource_STATUSARM instances for property testing.
func SubResource_STATUSARMGenerator() gopter.Gen {
	if subResource_STATUSARMGenerator != nil {
		return subResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_STATUSARM(generators)
	subResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SubResource_STATUSARM{}), generators)

	return subResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicy_STATUSARM, UpgradePolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicy_STATUSARM runs a test to see if a specific instance of UpgradePolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicy_STATUSARM(subject UpgradePolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpgradePolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpgradePolicy_STATUSARM instances for property testing - lazily instantiated by
// UpgradePolicy_STATUSARMGenerator()
var upgradePolicy_STATUSARMGenerator gopter.Gen

// UpgradePolicy_STATUSARMGenerator returns a generator of UpgradePolicy_STATUSARM instances for property testing.
// We first initialize upgradePolicy_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicy_STATUSARMGenerator() gopter.Gen {
	if upgradePolicy_STATUSARMGenerator != nil {
		return upgradePolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_STATUSARM(generators)
	upgradePolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicy_STATUSARM(generators)
	upgradePolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_STATUSARM{}), generators)

	return upgradePolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(UpgradePolicy_STATUS_Mode_Automatic, UpgradePolicy_STATUS_Mode_Manual, UpgradePolicy_STATUS_Mode_Rolling))
}

// AddRelatedPropertyGeneratorsForUpgradePolicy_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicy_STATUSARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicy_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetVMProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_STATUSARM, VirtualMachineScaleSetVMProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_STATUSARM(subject VirtualMachineScaleSetVMProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetVMProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetVMProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetVMProfile_STATUSARMGenerator()
var virtualMachineScaleSetVMProfile_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfile_STATUSARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfile_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfile_STATUSARMGenerator != nil {
		return virtualMachineScaleSetVMProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUSARM(generators)
	virtualMachineScaleSetVMProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUSARM(generators)
	virtualMachineScaleSetVMProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetVMProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_STATUS_Deallocate, EvictionPolicy_STATUS_Delete))
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_STATUS_Low, Priority_STATUS_Regular, Priority_STATUS_Spot))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["BillingProfile"] = gen.PtrOf(BillingProfile_STATUSARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfile_STATUSARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfile_STATUSARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfile_STATUSARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfile_STATUSARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfile_STATUSARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfile_STATUSARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfile_STATUSARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicy_STATUSARM, AutomaticOSUpgradePolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicy_STATUSARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicy_STATUSARM(subject AutomaticOSUpgradePolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticOSUpgradePolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticOSUpgradePolicy_STATUSARM instances for property testing - lazily instantiated by
// AutomaticOSUpgradePolicy_STATUSARMGenerator()
var automaticOSUpgradePolicy_STATUSARMGenerator gopter.Gen

// AutomaticOSUpgradePolicy_STATUSARMGenerator returns a generator of AutomaticOSUpgradePolicy_STATUSARM instances for property testing.
func AutomaticOSUpgradePolicy_STATUSARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicy_STATUSARMGenerator != nil {
		return automaticOSUpgradePolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_STATUSARM(generators)
	automaticOSUpgradePolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_STATUSARM{}), generators)

	return automaticOSUpgradePolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
}

func Test_RollingUpgradePolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicy_STATUSARM, RollingUpgradePolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicy_STATUSARM runs a test to see if a specific instance of RollingUpgradePolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicy_STATUSARM(subject RollingUpgradePolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RollingUpgradePolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RollingUpgradePolicy_STATUSARM instances for property testing - lazily instantiated by
// RollingUpgradePolicy_STATUSARMGenerator()
var rollingUpgradePolicy_STATUSARMGenerator gopter.Gen

// RollingUpgradePolicy_STATUSARMGenerator returns a generator of RollingUpgradePolicy_STATUSARM instances for property testing.
func RollingUpgradePolicy_STATUSARMGenerator() gopter.Gen {
	if rollingUpgradePolicy_STATUSARMGenerator != nil {
		return rollingUpgradePolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicy_STATUSARM(generators)
	rollingUpgradePolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_STATUSARM{}), generators)

	return rollingUpgradePolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_ScheduledEventsProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduledEventsProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduledEventsProfile_STATUSARM, ScheduledEventsProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduledEventsProfile_STATUSARM runs a test to see if a specific instance of ScheduledEventsProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduledEventsProfile_STATUSARM(subject ScheduledEventsProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduledEventsProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduledEventsProfile_STATUSARM instances for property testing - lazily instantiated by
// ScheduledEventsProfile_STATUSARMGenerator()
var scheduledEventsProfile_STATUSARMGenerator gopter.Gen

// ScheduledEventsProfile_STATUSARMGenerator returns a generator of ScheduledEventsProfile_STATUSARM instances for property testing.
func ScheduledEventsProfile_STATUSARMGenerator() gopter.Gen {
	if scheduledEventsProfile_STATUSARMGenerator != nil {
		return scheduledEventsProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduledEventsProfile_STATUSARM(generators)
	scheduledEventsProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ScheduledEventsProfile_STATUSARM{}), generators)

	return scheduledEventsProfile_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduledEventsProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduledEventsProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["TerminateNotificationProfile"] = gen.PtrOf(TerminateNotificationProfile_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_STATUSARM, VirtualMachineScaleSetExtensionProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_STATUSARM(subject VirtualMachineScaleSetExtensionProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtensionProfile_STATUSARMGenerator()
var virtualMachineScaleSetExtensionProfile_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfile_STATUSARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionProfile_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfile_STATUSARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUSARM(generators)
	virtualMachineScaleSetExtensionProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUSARM(generators)
	virtualMachineScaleSetExtensionProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetExtensionProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["Extensions"] = gen.SliceOf(VirtualMachineScaleSetExtension_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_STATUSARM, VirtualMachineScaleSetNetworkProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_STATUSARM(subject VirtualMachineScaleSetNetworkProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetNetworkProfile_STATUSARMGenerator()
var virtualMachineScaleSetNetworkProfile_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfile_STATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_STATUSARM instances for property testing.
func VirtualMachineScaleSetNetworkProfile_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfile_STATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUSARM(generators)
	virtualMachineScaleSetNetworkProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkProfile_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReference_STATUSARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_STATUSARM, VirtualMachineScaleSetOSProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_STATUSARM(subject VirtualMachineScaleSetOSProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSProfile_STATUSARMGenerator()
var virtualMachineScaleSetOSProfile_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfile_STATUSARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfile_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfile_STATUSARMGenerator != nil {
		return virtualMachineScaleSetOSProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUSARM(generators)
	virtualMachineScaleSetOSProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUSARM(generators)
	virtualMachineScaleSetOSProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetOSProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfiguration_STATUSARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroup_STATUSARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfiguration_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_STATUSARM, VirtualMachineScaleSetStorageProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_STATUSARM(subject VirtualMachineScaleSetStorageProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetStorageProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetStorageProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetStorageProfile_STATUSARMGenerator()
var virtualMachineScaleSetStorageProfile_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfile_STATUSARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_STATUSARM instances for property testing.
func VirtualMachineScaleSetStorageProfile_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfile_STATUSARMGenerator != nil {
		return virtualMachineScaleSetStorageProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_STATUSARM(generators)
	virtualMachineScaleSetStorageProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetStorageProfile_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDisk_STATUSARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReference_STATUSARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDisk_STATUSARMGenerator())
}

func Test_ApiEntityReference_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReference_STATUSARM, ApiEntityReference_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReference_STATUSARM runs a test to see if a specific instance of ApiEntityReference_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReference_STATUSARM(subject ApiEntityReference_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiEntityReference_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiEntityReference_STATUSARM instances for property testing - lazily instantiated by
// ApiEntityReference_STATUSARMGenerator()
var apiEntityReference_STATUSARMGenerator gopter.Gen

// ApiEntityReference_STATUSARMGenerator returns a generator of ApiEntityReference_STATUSARM instances for property testing.
func ApiEntityReference_STATUSARMGenerator() gopter.Gen {
	if apiEntityReference_STATUSARMGenerator != nil {
		return apiEntityReference_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReference_STATUSARM(generators)
	apiEntityReference_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_STATUSARM{}), generators)

	return apiEntityReference_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReference_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReference_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_TerminateNotificationProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TerminateNotificationProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTerminateNotificationProfile_STATUSARM, TerminateNotificationProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTerminateNotificationProfile_STATUSARM runs a test to see if a specific instance of TerminateNotificationProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTerminateNotificationProfile_STATUSARM(subject TerminateNotificationProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TerminateNotificationProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TerminateNotificationProfile_STATUSARM instances for property testing - lazily instantiated by
// TerminateNotificationProfile_STATUSARMGenerator()
var terminateNotificationProfile_STATUSARMGenerator gopter.Gen

// TerminateNotificationProfile_STATUSARMGenerator returns a generator of TerminateNotificationProfile_STATUSARM instances for property testing.
func TerminateNotificationProfile_STATUSARMGenerator() gopter.Gen {
	if terminateNotificationProfile_STATUSARMGenerator != nil {
		return terminateNotificationProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTerminateNotificationProfile_STATUSARM(generators)
	terminateNotificationProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(TerminateNotificationProfile_STATUSARM{}), generators)

	return terminateNotificationProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTerminateNotificationProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTerminateNotificationProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["NotBeforeTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetDataDisk_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_STATUSARM, VirtualMachineScaleSetDataDisk_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_STATUSARM(subject VirtualMachineScaleSetDataDisk_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetDataDisk_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetDataDisk_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetDataDisk_STATUSARMGenerator()
var virtualMachineScaleSetDataDisk_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDisk_STATUSARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDisk_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDisk_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDisk_STATUSARMGenerator != nil {
		return virtualMachineScaleSetDataDisk_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUSARM(generators)
	virtualMachineScaleSetDataDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUSARM(generators)
	virtualMachineScaleSetDataDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_STATUSARM{}), generators)

	return virtualMachineScaleSetDataDisk_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_STATUS_None, Caching_STATUS_ReadOnly, Caching_STATUS_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_STATUS_Attach, CreateOption_STATUS_Empty, CreateOption_STATUS_FromImage))
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetExtension_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtension_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtension_STATUSARM, VirtualMachineScaleSetExtension_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtension_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetExtension_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtension_STATUSARM(subject VirtualMachineScaleSetExtension_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtension_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtension_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtension_STATUSARMGenerator()
var virtualMachineScaleSetExtension_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetExtension_STATUSARMGenerator returns a generator of VirtualMachineScaleSetExtension_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetExtension_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtension_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtension_STATUSARMGenerator != nil {
		return virtualMachineScaleSetExtension_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUSARM(generators)
	virtualMachineScaleSetExtension_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUSARM(generators)
	virtualMachineScaleSetExtension_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_STATUSARM{}), generators)

	return virtualMachineScaleSetExtension_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtension_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetExtensionProperties_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_STATUSARM, VirtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_STATUSARM(subject VirtualMachineScaleSetNetworkConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfiguration_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator()
var virtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUSARM(generators)
	virtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUSARM(generators)
	virtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_STATUSARM, VirtualMachineScaleSetOSDisk_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_STATUSARM(subject VirtualMachineScaleSetOSDisk_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSDisk_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSDisk_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSDisk_STATUSARMGenerator()
var virtualMachineScaleSetOSDisk_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDisk_STATUSARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDisk_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDisk_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDisk_STATUSARMGenerator != nil {
		return virtualMachineScaleSetOSDisk_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUSARM(generators)
	virtualMachineScaleSetOSDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUSARM(generators)
	virtualMachineScaleSetOSDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_STATUSARM{}), generators)

	return virtualMachineScaleSetOSDisk_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_STATUS_None, Caching_STATUS_ReadOnly, Caching_STATUS_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_STATUS_Attach, CreateOption_STATUS_Empty, CreateOption_STATUS_FromImage))
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetOSDisk_STATUS_OsType_Linux, VirtualMachineScaleSetOSDisk_STATUS_OsType_Windows))
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettings_STATUSARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDisk_STATUSARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_STATUSARM, VirtualMachineScaleSetExtensionProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProperties_STATUSARM(subject VirtualMachineScaleSetExtensionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProperties_STATUSARM instances for property testing - lazily instantiated
// by VirtualMachineScaleSetExtensionProperties_STATUSARMGenerator()
var virtualMachineScaleSetExtensionProperties_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProperties_STATUSARMGenerator returns a generator of VirtualMachineScaleSetExtensionProperties_STATUSARM instances for property testing.
func VirtualMachineScaleSetExtensionProperties_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProperties_STATUSARMGenerator != nil {
		return virtualMachineScaleSetExtensionProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUSARM(generators)
	virtualMachineScaleSetExtensionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetExtensionProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradeMinorVersion"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticUpgrade"] = gen.PtrOf(gen.Bool())
	gens["ForceUpdateTag"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisionAfterExtensions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_STATUSARM, VirtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_STATUSARM(subject VirtualMachineScaleSetManagedDiskParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetManagedDiskParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetManagedDiskParameters_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator()
var virtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUSARM(generators)
	virtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUSARM(generators)
	virtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_STATUSARM{}), generators)

	return virtualMachineScaleSetManagedDiskParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_STATUS_Premium_LRS,
		StorageAccountType_STATUS_Premium_ZRS,
		StorageAccountType_STATUS_StandardSSD_LRS,
		StorageAccountType_STATUS_StandardSSD_ZRS,
		StorageAccountType_STATUS_Standard_LRS,
		StorageAccountType_STATUS_UltraSSD_LRS))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM, VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator()
var virtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfiguration_STATUSARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetIPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_STATUSARM, VirtualMachineScaleSetIPConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_STATUSARM(subject VirtualMachineScaleSetIPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIPConfiguration_STATUSARMGenerator()
var virtualMachineScaleSetIPConfiguration_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfiguration_STATUSARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfiguration_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfiguration_STATUSARMGenerator != nil {
		return virtualMachineScaleSetIPConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUSARM(generators)
	virtualMachineScaleSetIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUSARM(generators)
	virtualMachineScaleSetIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_STATUSARM{}), generators)

	return virtualMachineScaleSetIPConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM, VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM, VirtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM(subject VirtualMachineScaleSetIPConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator()
var virtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetIPConfigurationProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIPConfigurationProperties_STATUS_PrivateIPAddressVersion_IPv4, VirtualMachineScaleSetIPConfigurationProperties_STATUS_PrivateIPAddressVersion_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResource_STATUSARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResource_STATUSARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResource_STATUSARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResource_STATUSARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReference_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM, VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM instances for property testing -
// lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_PublicIPAddressVersion_IPv4, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUS_PublicIPAddressVersion_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTag_STATUSARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTag_STATUSARM, VirtualMachineScaleSetIpTag_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTag_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTag_STATUSARM(subject VirtualMachineScaleSetIpTag_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIpTag_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIpTag_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIpTag_STATUSARMGenerator()
var virtualMachineScaleSetIpTag_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTag_STATUSARMGenerator returns a generator of VirtualMachineScaleSetIpTag_STATUSARM instances for property testing.
func VirtualMachineScaleSetIpTag_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTag_STATUSARMGenerator != nil {
		return virtualMachineScaleSetIpTag_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_STATUSARM(generators)
	virtualMachineScaleSetIpTag_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_STATUSARM{}), generators)

	return virtualMachineScaleSetIpTag_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_STATUSARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM instances for property testing -
// lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
}
