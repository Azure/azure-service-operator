// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachine_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachine_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineStatusARM, VirtualMachineStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineStatusARM runs a test to see if a specific instance of VirtualMachine_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineStatusARM(subject VirtualMachine_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachine_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachine_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineStatusARMGenerator()
var virtualMachineStatusARMGenerator gopter.Gen

// VirtualMachineStatusARMGenerator returns a generator of VirtualMachine_StatusARM instances for property testing.
// We first initialize virtualMachineStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineStatusARMGenerator() gopter.Gen {
	if virtualMachineStatusARMGenerator != nil {
		return virtualMachineStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineStatusARM(generators)
	virtualMachineStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachine_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineStatusARM(generators)
	virtualMachineStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachine_StatusARM{}), generators)

	return virtualMachineStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineStatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineIdentityStatusARMGenerator())
	gens["Plan"] = gen.PtrOf(PlanStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachinePropertiesStatusARMGenerator())
	gens["Resources"] = gen.SliceOf(VirtualMachineExtensionStatusARMGenerator())
}

func Test_VirtualMachineExtension_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineExtension_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineExtensionStatusARM, VirtualMachineExtensionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineExtensionStatusARM runs a test to see if a specific instance of VirtualMachineExtension_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineExtensionStatusARM(subject VirtualMachineExtension_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineExtension_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineExtension_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineExtensionStatusARMGenerator()
var virtualMachineExtensionStatusARMGenerator gopter.Gen

// VirtualMachineExtensionStatusARMGenerator returns a generator of VirtualMachineExtension_StatusARM instances for property testing.
// We first initialize virtualMachineExtensionStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineExtensionStatusARMGenerator() gopter.Gen {
	if virtualMachineExtensionStatusARMGenerator != nil {
		return virtualMachineExtensionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionStatusARM(generators)
	virtualMachineExtensionStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtension_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineExtensionStatusARM(generators)
	virtualMachineExtensionStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtension_StatusARM{}), generators)

	return virtualMachineExtensionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineExtensionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineExtensionStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineExtensionStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineExtensionStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineExtensionPropertiesStatusARMGenerator())
}

func Test_VirtualMachineIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineIdentityStatusARM, VirtualMachineIdentityStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineIdentityStatusARM runs a test to see if a specific instance of VirtualMachineIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineIdentityStatusARM(subject VirtualMachineIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineIdentity_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineIdentityStatusARMGenerator()
var virtualMachineIdentityStatusARMGenerator gopter.Gen

// VirtualMachineIdentityStatusARMGenerator returns a generator of VirtualMachineIdentity_StatusARM instances for property testing.
// We first initialize virtualMachineIdentityStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineIdentityStatusARMGenerator() gopter.Gen {
	if virtualMachineIdentityStatusARMGenerator != nil {
		return virtualMachineIdentityStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineIdentityStatusARM(generators)
	virtualMachineIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineIdentityStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineIdentityStatusARM(generators)
	virtualMachineIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineIdentity_StatusARM{}), generators)

	return virtualMachineIdentityStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineIdentityStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachineIdentityStatusTypeNone,
		VirtualMachineIdentityStatusTypeSystemAssigned,
		VirtualMachineIdentityStatusTypeSystemAssignedUserAssigned,
		VirtualMachineIdentityStatusTypeUserAssigned))
}

// AddRelatedPropertyGeneratorsForVirtualMachineIdentityStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), VirtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator())
}

func Test_VirtualMachineProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachinePropertiesStatusARM, VirtualMachinePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachinePropertiesStatusARM runs a test to see if a specific instance of VirtualMachineProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachinePropertiesStatusARM(subject VirtualMachineProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineProperties_StatusARM instances for property testing - lazily instantiated by
//VirtualMachinePropertiesStatusARMGenerator()
var virtualMachinePropertiesStatusARMGenerator gopter.Gen

// VirtualMachinePropertiesStatusARMGenerator returns a generator of VirtualMachineProperties_StatusARM instances for property testing.
// We first initialize virtualMachinePropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachinePropertiesStatusARMGenerator() gopter.Gen {
	if virtualMachinePropertiesStatusARMGenerator != nil {
		return virtualMachinePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachinePropertiesStatusARM(generators)
	virtualMachinePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachinePropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachinePropertiesStatusARM(generators)
	virtualMachinePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineProperties_StatusARM{}), generators)

	return virtualMachinePropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachinePropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachinePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_StatusDeallocate, EvictionPolicy_StatusDelete))
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["PlatformFaultDomain"] = gen.PtrOf(gen.Int())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_StatusLow, Priority_StatusRegular, Priority_StatusSpot))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["VmId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachinePropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachinePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilitiesStatusARMGenerator())
	gens["AvailabilitySet"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["BillingProfile"] = gen.PtrOf(BillingProfileStatusARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfileStatusARMGenerator())
	gens["HardwareProfile"] = gen.PtrOf(HardwareProfileStatusARMGenerator())
	gens["Host"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["InstanceView"] = gen.PtrOf(VirtualMachineInstanceViewStatusARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(NetworkProfileStatusARMGenerator())
	gens["OsProfile"] = gen.PtrOf(OSProfileStatusARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfileStatusARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(StorageProfileStatusARMGenerator())
	gens["VirtualMachineScaleSet"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_BillingProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BillingProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBillingProfileStatusARM, BillingProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBillingProfileStatusARM runs a test to see if a specific instance of BillingProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBillingProfileStatusARM(subject BillingProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BillingProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BillingProfile_StatusARM instances for property testing - lazily instantiated by
//BillingProfileStatusARMGenerator()
var billingProfileStatusARMGenerator gopter.Gen

// BillingProfileStatusARMGenerator returns a generator of BillingProfile_StatusARM instances for property testing.
func BillingProfileStatusARMGenerator() gopter.Gen {
	if billingProfileStatusARMGenerator != nil {
		return billingProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBillingProfileStatusARM(generators)
	billingProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(BillingProfile_StatusARM{}), generators)

	return billingProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForBillingProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBillingProfileStatusARM(gens map[string]gopter.Gen) {
	gens["MaxPrice"] = gen.PtrOf(gen.Float64())
}

func Test_DiagnosticsProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiagnosticsProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiagnosticsProfileStatusARM, DiagnosticsProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiagnosticsProfileStatusARM runs a test to see if a specific instance of DiagnosticsProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiagnosticsProfileStatusARM(subject DiagnosticsProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiagnosticsProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiagnosticsProfile_StatusARM instances for property testing - lazily instantiated by
//DiagnosticsProfileStatusARMGenerator()
var diagnosticsProfileStatusARMGenerator gopter.Gen

// DiagnosticsProfileStatusARMGenerator returns a generator of DiagnosticsProfile_StatusARM instances for property testing.
func DiagnosticsProfileStatusARMGenerator() gopter.Gen {
	if diagnosticsProfileStatusARMGenerator != nil {
		return diagnosticsProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDiagnosticsProfileStatusARM(generators)
	diagnosticsProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticsProfile_StatusARM{}), generators)

	return diagnosticsProfileStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForDiagnosticsProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiagnosticsProfileStatusARM(gens map[string]gopter.Gen) {
	gens["BootDiagnostics"] = gen.PtrOf(BootDiagnosticsStatusARMGenerator())
}

func Test_HardwareProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HardwareProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHardwareProfileStatusARM, HardwareProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHardwareProfileStatusARM runs a test to see if a specific instance of HardwareProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHardwareProfileStatusARM(subject HardwareProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HardwareProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HardwareProfile_StatusARM instances for property testing - lazily instantiated by
//HardwareProfileStatusARMGenerator()
var hardwareProfileStatusARMGenerator gopter.Gen

// HardwareProfileStatusARMGenerator returns a generator of HardwareProfile_StatusARM instances for property testing.
func HardwareProfileStatusARMGenerator() gopter.Gen {
	if hardwareProfileStatusARMGenerator != nil {
		return hardwareProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHardwareProfileStatusARM(generators)
	hardwareProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(HardwareProfile_StatusARM{}), generators)

	return hardwareProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForHardwareProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHardwareProfileStatusARM(gens map[string]gopter.Gen) {
	gens["VmSize"] = gen.PtrOf(gen.OneConstOf(
		HardwareProfileStatusVmSizeBasicA0,
		HardwareProfileStatusVmSizeBasicA1,
		HardwareProfileStatusVmSizeBasicA2,
		HardwareProfileStatusVmSizeBasicA3,
		HardwareProfileStatusVmSizeBasicA4,
		HardwareProfileStatusVmSizeStandardA0,
		HardwareProfileStatusVmSizeStandardA1,
		HardwareProfileStatusVmSizeStandardA10,
		HardwareProfileStatusVmSizeStandardA11,
		HardwareProfileStatusVmSizeStandardA1V2,
		HardwareProfileStatusVmSizeStandardA2,
		HardwareProfileStatusVmSizeStandardA2MV2,
		HardwareProfileStatusVmSizeStandardA2V2,
		HardwareProfileStatusVmSizeStandardA3,
		HardwareProfileStatusVmSizeStandardA4,
		HardwareProfileStatusVmSizeStandardA4MV2,
		HardwareProfileStatusVmSizeStandardA4V2,
		HardwareProfileStatusVmSizeStandardA5,
		HardwareProfileStatusVmSizeStandardA6,
		HardwareProfileStatusVmSizeStandardA7,
		HardwareProfileStatusVmSizeStandardA8,
		HardwareProfileStatusVmSizeStandardA8MV2,
		HardwareProfileStatusVmSizeStandardA8V2,
		HardwareProfileStatusVmSizeStandardA9,
		HardwareProfileStatusVmSizeStandardB1Ms,
		HardwareProfileStatusVmSizeStandardB1S,
		HardwareProfileStatusVmSizeStandardB2Ms,
		HardwareProfileStatusVmSizeStandardB2S,
		HardwareProfileStatusVmSizeStandardB4Ms,
		HardwareProfileStatusVmSizeStandardB8Ms,
		HardwareProfileStatusVmSizeStandardD1,
		HardwareProfileStatusVmSizeStandardD11,
		HardwareProfileStatusVmSizeStandardD11V2,
		HardwareProfileStatusVmSizeStandardD12,
		HardwareProfileStatusVmSizeStandardD12V2,
		HardwareProfileStatusVmSizeStandardD13,
		HardwareProfileStatusVmSizeStandardD13V2,
		HardwareProfileStatusVmSizeStandardD14,
		HardwareProfileStatusVmSizeStandardD14V2,
		HardwareProfileStatusVmSizeStandardD15V2,
		HardwareProfileStatusVmSizeStandardD16SV3,
		HardwareProfileStatusVmSizeStandardD16V3,
		HardwareProfileStatusVmSizeStandardD1V2,
		HardwareProfileStatusVmSizeStandardD2,
		HardwareProfileStatusVmSizeStandardD2SV3,
		HardwareProfileStatusVmSizeStandardD2V2,
		HardwareProfileStatusVmSizeStandardD2V3,
		HardwareProfileStatusVmSizeStandardD3,
		HardwareProfileStatusVmSizeStandardD32SV3,
		HardwareProfileStatusVmSizeStandardD32V3,
		HardwareProfileStatusVmSizeStandardD3V2,
		HardwareProfileStatusVmSizeStandardD4,
		HardwareProfileStatusVmSizeStandardD4SV3,
		HardwareProfileStatusVmSizeStandardD4V2,
		HardwareProfileStatusVmSizeStandardD4V3,
		HardwareProfileStatusVmSizeStandardD5V2,
		HardwareProfileStatusVmSizeStandardD64SV3,
		HardwareProfileStatusVmSizeStandardD64V3,
		HardwareProfileStatusVmSizeStandardD8SV3,
		HardwareProfileStatusVmSizeStandardD8V3,
		HardwareProfileStatusVmSizeStandardDS1,
		HardwareProfileStatusVmSizeStandardDS11,
		HardwareProfileStatusVmSizeStandardDS11V2,
		HardwareProfileStatusVmSizeStandardDS12,
		HardwareProfileStatusVmSizeStandardDS12V2,
		HardwareProfileStatusVmSizeStandardDS13,
		HardwareProfileStatusVmSizeStandardDS132V2,
		HardwareProfileStatusVmSizeStandardDS134V2,
		HardwareProfileStatusVmSizeStandardDS13V2,
		HardwareProfileStatusVmSizeStandardDS14,
		HardwareProfileStatusVmSizeStandardDS144V2,
		HardwareProfileStatusVmSizeStandardDS148V2,
		HardwareProfileStatusVmSizeStandardDS14V2,
		HardwareProfileStatusVmSizeStandardDS15V2,
		HardwareProfileStatusVmSizeStandardDS1V2,
		HardwareProfileStatusVmSizeStandardDS2,
		HardwareProfileStatusVmSizeStandardDS2V2,
		HardwareProfileStatusVmSizeStandardDS3,
		HardwareProfileStatusVmSizeStandardDS3V2,
		HardwareProfileStatusVmSizeStandardDS4,
		HardwareProfileStatusVmSizeStandardDS4V2,
		HardwareProfileStatusVmSizeStandardDS5V2,
		HardwareProfileStatusVmSizeStandardE16SV3,
		HardwareProfileStatusVmSizeStandardE16V3,
		HardwareProfileStatusVmSizeStandardE2SV3,
		HardwareProfileStatusVmSizeStandardE2V3,
		HardwareProfileStatusVmSizeStandardE3216V3,
		HardwareProfileStatusVmSizeStandardE328SV3,
		HardwareProfileStatusVmSizeStandardE32SV3,
		HardwareProfileStatusVmSizeStandardE32V3,
		HardwareProfileStatusVmSizeStandardE4SV3,
		HardwareProfileStatusVmSizeStandardE4V3,
		HardwareProfileStatusVmSizeStandardE6416SV3,
		HardwareProfileStatusVmSizeStandardE6432SV3,
		HardwareProfileStatusVmSizeStandardE64SV3,
		HardwareProfileStatusVmSizeStandardE64V3,
		HardwareProfileStatusVmSizeStandardE8SV3,
		HardwareProfileStatusVmSizeStandardE8V3,
		HardwareProfileStatusVmSizeStandardF1,
		HardwareProfileStatusVmSizeStandardF16,
		HardwareProfileStatusVmSizeStandardF16S,
		HardwareProfileStatusVmSizeStandardF16SV2,
		HardwareProfileStatusVmSizeStandardF1S,
		HardwareProfileStatusVmSizeStandardF2,
		HardwareProfileStatusVmSizeStandardF2S,
		HardwareProfileStatusVmSizeStandardF2SV2,
		HardwareProfileStatusVmSizeStandardF32SV2,
		HardwareProfileStatusVmSizeStandardF4,
		HardwareProfileStatusVmSizeStandardF4S,
		HardwareProfileStatusVmSizeStandardF4SV2,
		HardwareProfileStatusVmSizeStandardF64SV2,
		HardwareProfileStatusVmSizeStandardF72SV2,
		HardwareProfileStatusVmSizeStandardF8,
		HardwareProfileStatusVmSizeStandardF8S,
		HardwareProfileStatusVmSizeStandardF8SV2,
		HardwareProfileStatusVmSizeStandardG1,
		HardwareProfileStatusVmSizeStandardG2,
		HardwareProfileStatusVmSizeStandardG3,
		HardwareProfileStatusVmSizeStandardG4,
		HardwareProfileStatusVmSizeStandardG5,
		HardwareProfileStatusVmSizeStandardGS1,
		HardwareProfileStatusVmSizeStandardGS2,
		HardwareProfileStatusVmSizeStandardGS3,
		HardwareProfileStatusVmSizeStandardGS4,
		HardwareProfileStatusVmSizeStandardGS44,
		HardwareProfileStatusVmSizeStandardGS48,
		HardwareProfileStatusVmSizeStandardGS5,
		HardwareProfileStatusVmSizeStandardGS516,
		HardwareProfileStatusVmSizeStandardGS58,
		HardwareProfileStatusVmSizeStandardH16,
		HardwareProfileStatusVmSizeStandardH16M,
		HardwareProfileStatusVmSizeStandardH16Mr,
		HardwareProfileStatusVmSizeStandardH16R,
		HardwareProfileStatusVmSizeStandardH8,
		HardwareProfileStatusVmSizeStandardH8M,
		HardwareProfileStatusVmSizeStandardL16S,
		HardwareProfileStatusVmSizeStandardL32S,
		HardwareProfileStatusVmSizeStandardL4S,
		HardwareProfileStatusVmSizeStandardL8S,
		HardwareProfileStatusVmSizeStandardM12832Ms,
		HardwareProfileStatusVmSizeStandardM12864Ms,
		HardwareProfileStatusVmSizeStandardM128Ms,
		HardwareProfileStatusVmSizeStandardM128S,
		HardwareProfileStatusVmSizeStandardM6416Ms,
		HardwareProfileStatusVmSizeStandardM6432Ms,
		HardwareProfileStatusVmSizeStandardM64Ms,
		HardwareProfileStatusVmSizeStandardM64S,
		HardwareProfileStatusVmSizeStandardNC12,
		HardwareProfileStatusVmSizeStandardNC12SV2,
		HardwareProfileStatusVmSizeStandardNC12SV3,
		HardwareProfileStatusVmSizeStandardNC24,
		HardwareProfileStatusVmSizeStandardNC24R,
		HardwareProfileStatusVmSizeStandardNC24RsV2,
		HardwareProfileStatusVmSizeStandardNC24RsV3,
		HardwareProfileStatusVmSizeStandardNC24SV2,
		HardwareProfileStatusVmSizeStandardNC24SV3,
		HardwareProfileStatusVmSizeStandardNC6,
		HardwareProfileStatusVmSizeStandardNC6SV2,
		HardwareProfileStatusVmSizeStandardNC6SV3,
		HardwareProfileStatusVmSizeStandardND12S,
		HardwareProfileStatusVmSizeStandardND24Rs,
		HardwareProfileStatusVmSizeStandardND24S,
		HardwareProfileStatusVmSizeStandardND6S,
		HardwareProfileStatusVmSizeStandardNV12,
		HardwareProfileStatusVmSizeStandardNV24,
		HardwareProfileStatusVmSizeStandardNV6))
}

func Test_NetworkProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkProfileStatusARM, NetworkProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkProfileStatusARM runs a test to see if a specific instance of NetworkProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkProfileStatusARM(subject NetworkProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkProfile_StatusARM instances for property testing - lazily instantiated by
//NetworkProfileStatusARMGenerator()
var networkProfileStatusARMGenerator gopter.Gen

// NetworkProfileStatusARMGenerator returns a generator of NetworkProfile_StatusARM instances for property testing.
func NetworkProfileStatusARMGenerator() gopter.Gen {
	if networkProfileStatusARMGenerator != nil {
		return networkProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNetworkProfileStatusARM(generators)
	networkProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkProfile_StatusARM{}), generators)

	return networkProfileStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForNetworkProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkProfileStatusARM(gens map[string]gopter.Gen) {
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterfaceReferenceStatusARMGenerator())
}

func Test_OSProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OSProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOSProfileStatusARM, OSProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOSProfileStatusARM runs a test to see if a specific instance of OSProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOSProfileStatusARM(subject OSProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OSProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OSProfile_StatusARM instances for property testing - lazily instantiated by OSProfileStatusARMGenerator()
var osProfileStatusARMGenerator gopter.Gen

// OSProfileStatusARMGenerator returns a generator of OSProfile_StatusARM instances for property testing.
// We first initialize osProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OSProfileStatusARMGenerator() gopter.Gen {
	if osProfileStatusARMGenerator != nil {
		return osProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOSProfileStatusARM(generators)
	osProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(OSProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOSProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForOSProfileStatusARM(generators)
	osProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(OSProfile_StatusARM{}), generators)

	return osProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForOSProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOSProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["AllowExtensionOperations"] = gen.PtrOf(gen.Bool())
	gens["ComputerName"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
	gens["RequireGuestProvisionSignal"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForOSProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOSProfileStatusARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfigurationStatusARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroupStatusARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfigurationStatusARMGenerator())
}

func Test_SecurityProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityProfileStatusARM, SecurityProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityProfileStatusARM runs a test to see if a specific instance of SecurityProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityProfileStatusARM(subject SecurityProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityProfile_StatusARM instances for property testing - lazily instantiated by
//SecurityProfileStatusARMGenerator()
var securityProfileStatusARMGenerator gopter.Gen

// SecurityProfileStatusARMGenerator returns a generator of SecurityProfile_StatusARM instances for property testing.
// We first initialize securityProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityProfileStatusARMGenerator() gopter.Gen {
	if securityProfileStatusARMGenerator != nil {
		return securityProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityProfileStatusARM(generators)
	securityProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(SecurityProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForSecurityProfileStatusARM(generators)
	securityProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(SecurityProfile_StatusARM{}), generators)

	return securityProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityProfileStatusARM(gens map[string]gopter.Gen) {
	gens["EncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["SecurityType"] = gen.PtrOf(gen.OneConstOf(SecurityProfileStatusSecurityTypeTrustedLaunch))
}

// AddRelatedPropertyGeneratorsForSecurityProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityProfileStatusARM(gens map[string]gopter.Gen) {
	gens["UefiSettings"] = gen.PtrOf(UefiSettingsStatusARMGenerator())
}

func Test_StorageProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageProfileStatusARM, StorageProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageProfileStatusARM runs a test to see if a specific instance of StorageProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageProfileStatusARM(subject StorageProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageProfile_StatusARM instances for property testing - lazily instantiated by
//StorageProfileStatusARMGenerator()
var storageProfileStatusARMGenerator gopter.Gen

// StorageProfileStatusARMGenerator returns a generator of StorageProfile_StatusARM instances for property testing.
func StorageProfileStatusARMGenerator() gopter.Gen {
	if storageProfileStatusARMGenerator != nil {
		return storageProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageProfileStatusARM(generators)
	storageProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(StorageProfile_StatusARM{}), generators)

	return storageProfileStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForStorageProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageProfileStatusARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(DataDiskStatusARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReferenceStatusARMGenerator())
	gens["OsDisk"] = gen.PtrOf(OSDiskStatusARMGenerator())
}

func Test_VirtualMachineExtensionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineExtensionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineExtensionPropertiesStatusARM, VirtualMachineExtensionPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineExtensionPropertiesStatusARM runs a test to see if a specific instance of VirtualMachineExtensionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineExtensionPropertiesStatusARM(subject VirtualMachineExtensionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineExtensionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineExtensionProperties_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineExtensionPropertiesStatusARMGenerator()
var virtualMachineExtensionPropertiesStatusARMGenerator gopter.Gen

// VirtualMachineExtensionPropertiesStatusARMGenerator returns a generator of VirtualMachineExtensionProperties_StatusARM instances for property testing.
// We first initialize virtualMachineExtensionPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineExtensionPropertiesStatusARMGenerator() gopter.Gen {
	if virtualMachineExtensionPropertiesStatusARMGenerator != nil {
		return virtualMachineExtensionPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionPropertiesStatusARM(generators)
	virtualMachineExtensionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtensionProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineExtensionPropertiesStatusARM(generators)
	virtualMachineExtensionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtensionProperties_StatusARM{}), generators)

	return virtualMachineExtensionPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineExtensionPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineExtensionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradeMinorVersion"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticUpgrade"] = gen.PtrOf(gen.Bool())
	gens["ForceUpdateTag"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineExtensionPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineExtensionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["InstanceView"] = gen.PtrOf(VirtualMachineExtensionInstanceViewStatusARMGenerator())
}

func Test_VirtualMachineIdentity_Status_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineIdentity_Status_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineIdentityStatusUserAssignedIdentitiesARM, VirtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineIdentityStatusUserAssignedIdentitiesARM runs a test to see if a specific instance of VirtualMachineIdentity_Status_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineIdentityStatusUserAssignedIdentitiesARM(subject VirtualMachineIdentity_Status_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineIdentity_Status_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineIdentity_Status_UserAssignedIdentitiesARM instances for property testing - lazily
//instantiated by VirtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator()
var virtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator gopter.Gen

// VirtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator returns a generator of VirtualMachineIdentity_Status_UserAssignedIdentitiesARM instances for property testing.
func VirtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if virtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator != nil {
		return virtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineIdentityStatusUserAssignedIdentitiesARM(generators)
	virtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineIdentity_Status_UserAssignedIdentitiesARM{}), generators)

	return virtualMachineIdentityStatusUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineIdentityStatusUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineIdentityStatusUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineInstanceView_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineInstanceView_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineInstanceViewStatusARM, VirtualMachineInstanceViewStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineInstanceViewStatusARM runs a test to see if a specific instance of VirtualMachineInstanceView_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineInstanceViewStatusARM(subject VirtualMachineInstanceView_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineInstanceView_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineInstanceView_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineInstanceViewStatusARMGenerator()
var virtualMachineInstanceViewStatusARMGenerator gopter.Gen

// VirtualMachineInstanceViewStatusARMGenerator returns a generator of VirtualMachineInstanceView_StatusARM instances for property testing.
// We first initialize virtualMachineInstanceViewStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineInstanceViewStatusARMGenerator() gopter.Gen {
	if virtualMachineInstanceViewStatusARMGenerator != nil {
		return virtualMachineInstanceViewStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineInstanceViewStatusARM(generators)
	virtualMachineInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineInstanceView_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineInstanceViewStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineInstanceViewStatusARM(generators)
	virtualMachineInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineInstanceView_StatusARM{}), generators)

	return virtualMachineInstanceViewStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineInstanceViewStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["AssignedHost"] = gen.PtrOf(gen.AlphaString())
	gens["ComputerName"] = gen.PtrOf(gen.AlphaString())
	gens["HyperVGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualMachineInstanceViewStatusHyperVGenerationV1, VirtualMachineInstanceViewStatusHyperVGenerationV2))
	gens["OsName"] = gen.PtrOf(gen.AlphaString())
	gens["OsVersion"] = gen.PtrOf(gen.AlphaString())
	gens["PlatformFaultDomain"] = gen.PtrOf(gen.Int())
	gens["PlatformUpdateDomain"] = gen.PtrOf(gen.Int())
	gens["RdpThumbPrint"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineInstanceViewStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["BootDiagnostics"] = gen.PtrOf(BootDiagnosticsInstanceViewStatusARMGenerator())
	gens["Disks"] = gen.SliceOf(DiskInstanceViewStatusARMGenerator())
	gens["Extensions"] = gen.SliceOf(VirtualMachineExtensionInstanceViewStatusARMGenerator())
	gens["MaintenanceRedeployStatus"] = gen.PtrOf(MaintenanceRedeployStatusStatusARMGenerator())
	gens["PatchStatus"] = gen.PtrOf(VirtualMachinePatchStatusStatusARMGenerator())
	gens["Statuses"] = gen.SliceOf(InstanceViewStatusStatusARMGenerator())
	gens["VmAgent"] = gen.PtrOf(VirtualMachineAgentInstanceViewStatusARMGenerator())
	gens["VmHealth"] = gen.PtrOf(VirtualMachineHealthStatusStatusARMGenerator())
}

func Test_BootDiagnosticsInstanceView_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BootDiagnosticsInstanceView_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBootDiagnosticsInstanceViewStatusARM, BootDiagnosticsInstanceViewStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBootDiagnosticsInstanceViewStatusARM runs a test to see if a specific instance of BootDiagnosticsInstanceView_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBootDiagnosticsInstanceViewStatusARM(subject BootDiagnosticsInstanceView_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BootDiagnosticsInstanceView_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BootDiagnosticsInstanceView_StatusARM instances for property testing - lazily instantiated by
//BootDiagnosticsInstanceViewStatusARMGenerator()
var bootDiagnosticsInstanceViewStatusARMGenerator gopter.Gen

// BootDiagnosticsInstanceViewStatusARMGenerator returns a generator of BootDiagnosticsInstanceView_StatusARM instances for property testing.
// We first initialize bootDiagnosticsInstanceViewStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BootDiagnosticsInstanceViewStatusARMGenerator() gopter.Gen {
	if bootDiagnosticsInstanceViewStatusARMGenerator != nil {
		return bootDiagnosticsInstanceViewStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBootDiagnosticsInstanceViewStatusARM(generators)
	bootDiagnosticsInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(BootDiagnosticsInstanceView_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBootDiagnosticsInstanceViewStatusARM(generators)
	AddRelatedPropertyGeneratorsForBootDiagnosticsInstanceViewStatusARM(generators)
	bootDiagnosticsInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(BootDiagnosticsInstanceView_StatusARM{}), generators)

	return bootDiagnosticsInstanceViewStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForBootDiagnosticsInstanceViewStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBootDiagnosticsInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["ConsoleScreenshotBlobUri"] = gen.PtrOf(gen.AlphaString())
	gens["SerialConsoleLogBlobUri"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBootDiagnosticsInstanceViewStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBootDiagnosticsInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(InstanceViewStatusStatusARMGenerator())
}

func Test_BootDiagnostics_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BootDiagnostics_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBootDiagnosticsStatusARM, BootDiagnosticsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBootDiagnosticsStatusARM runs a test to see if a specific instance of BootDiagnostics_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBootDiagnosticsStatusARM(subject BootDiagnostics_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BootDiagnostics_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BootDiagnostics_StatusARM instances for property testing - lazily instantiated by
//BootDiagnosticsStatusARMGenerator()
var bootDiagnosticsStatusARMGenerator gopter.Gen

// BootDiagnosticsStatusARMGenerator returns a generator of BootDiagnostics_StatusARM instances for property testing.
func BootDiagnosticsStatusARMGenerator() gopter.Gen {
	if bootDiagnosticsStatusARMGenerator != nil {
		return bootDiagnosticsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBootDiagnosticsStatusARM(generators)
	bootDiagnosticsStatusARMGenerator = gen.Struct(reflect.TypeOf(BootDiagnostics_StatusARM{}), generators)

	return bootDiagnosticsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForBootDiagnosticsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBootDiagnosticsStatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["StorageUri"] = gen.PtrOf(gen.AlphaString())
}

func Test_DataDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataDiskStatusARM, DataDiskStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataDiskStatusARM runs a test to see if a specific instance of DataDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDataDiskStatusARM(subject DataDisk_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataDisk_StatusARM instances for property testing - lazily instantiated by DataDiskStatusARMGenerator()
var dataDiskStatusARMGenerator gopter.Gen

// DataDiskStatusARMGenerator returns a generator of DataDisk_StatusARM instances for property testing.
// We first initialize dataDiskStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataDiskStatusARMGenerator() gopter.Gen {
	if dataDiskStatusARMGenerator != nil {
		return dataDiskStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataDiskStatusARM(generators)
	dataDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(DataDisk_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataDiskStatusARM(generators)
	AddRelatedPropertyGeneratorsForDataDiskStatusARM(generators)
	dataDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(DataDisk_StatusARM{}), generators)

	return dataDiskStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDataDiskStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataDiskStatusARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_StatusNone, Caching_StatusReadOnly, Caching_StatusReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_StatusAttach, CreateOption_StatusEmpty, CreateOption_StatusFromImage))
	gens["DetachOption"] = gen.PtrOf(gen.OneConstOf(DetachOption_StatusForceDetach))
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ToBeDetached"] = gen.PtrOf(gen.Bool())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForDataDiskStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataDiskStatusARM(gens map[string]gopter.Gen) {
	gens["Image"] = gen.PtrOf(VirtualHardDiskStatusARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(ManagedDiskParametersStatusARMGenerator())
	gens["Vhd"] = gen.PtrOf(VirtualHardDiskStatusARMGenerator())
}

func Test_DiskInstanceView_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiskInstanceView_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiskInstanceViewStatusARM, DiskInstanceViewStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiskInstanceViewStatusARM runs a test to see if a specific instance of DiskInstanceView_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiskInstanceViewStatusARM(subject DiskInstanceView_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiskInstanceView_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiskInstanceView_StatusARM instances for property testing - lazily instantiated by
//DiskInstanceViewStatusARMGenerator()
var diskInstanceViewStatusARMGenerator gopter.Gen

// DiskInstanceViewStatusARMGenerator returns a generator of DiskInstanceView_StatusARM instances for property testing.
// We first initialize diskInstanceViewStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiskInstanceViewStatusARMGenerator() gopter.Gen {
	if diskInstanceViewStatusARMGenerator != nil {
		return diskInstanceViewStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskInstanceViewStatusARM(generators)
	diskInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(DiskInstanceView_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskInstanceViewStatusARM(generators)
	AddRelatedPropertyGeneratorsForDiskInstanceViewStatusARM(generators)
	diskInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(DiskInstanceView_StatusARM{}), generators)

	return diskInstanceViewStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDiskInstanceViewStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiskInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDiskInstanceViewStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiskInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["EncryptionSettings"] = gen.SliceOf(DiskEncryptionSettingsStatusARMGenerator())
	gens["Statuses"] = gen.SliceOf(InstanceViewStatusStatusARMGenerator())
}

func Test_ImageReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageReferenceStatusARM, ImageReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageReferenceStatusARM runs a test to see if a specific instance of ImageReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageReferenceStatusARM(subject ImageReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageReference_StatusARM instances for property testing - lazily instantiated by
//ImageReferenceStatusARMGenerator()
var imageReferenceStatusARMGenerator gopter.Gen

// ImageReferenceStatusARMGenerator returns a generator of ImageReference_StatusARM instances for property testing.
func ImageReferenceStatusARMGenerator() gopter.Gen {
	if imageReferenceStatusARMGenerator != nil {
		return imageReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageReferenceStatusARM(generators)
	imageReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(ImageReference_StatusARM{}), generators)

	return imageReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForImageReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["ExactVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Offer"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["Sku"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_InstanceViewStatus_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InstanceViewStatus_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInstanceViewStatusStatusARM, InstanceViewStatusStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInstanceViewStatusStatusARM runs a test to see if a specific instance of InstanceViewStatus_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInstanceViewStatusStatusARM(subject InstanceViewStatus_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InstanceViewStatus_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InstanceViewStatus_StatusARM instances for property testing - lazily instantiated by
//InstanceViewStatusStatusARMGenerator()
var instanceViewStatusStatusARMGenerator gopter.Gen

// InstanceViewStatusStatusARMGenerator returns a generator of InstanceViewStatus_StatusARM instances for property testing.
func InstanceViewStatusStatusARMGenerator() gopter.Gen {
	if instanceViewStatusStatusARMGenerator != nil {
		return instanceViewStatusStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInstanceViewStatusStatusARM(generators)
	instanceViewStatusStatusARMGenerator = gen.Struct(reflect.TypeOf(InstanceViewStatus_StatusARM{}), generators)

	return instanceViewStatusStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForInstanceViewStatusStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInstanceViewStatusStatusARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayStatus"] = gen.PtrOf(gen.AlphaString())
	gens["Level"] = gen.PtrOf(gen.OneConstOf(InstanceViewStatusStatusLevelError, InstanceViewStatusStatusLevelInfo, InstanceViewStatusStatusLevelWarning))
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Time"] = gen.PtrOf(gen.AlphaString())
}

func Test_LinuxConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxConfigurationStatusARM, LinuxConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxConfigurationStatusARM runs a test to see if a specific instance of LinuxConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxConfigurationStatusARM(subject LinuxConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LinuxConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LinuxConfiguration_StatusARM instances for property testing - lazily instantiated by
//LinuxConfigurationStatusARMGenerator()
var linuxConfigurationStatusARMGenerator gopter.Gen

// LinuxConfigurationStatusARMGenerator returns a generator of LinuxConfiguration_StatusARM instances for property testing.
// We first initialize linuxConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LinuxConfigurationStatusARMGenerator() gopter.Gen {
	if linuxConfigurationStatusARMGenerator != nil {
		return linuxConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM(generators)
	linuxConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(LinuxConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForLinuxConfigurationStatusARM(generators)
	linuxConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(LinuxConfiguration_StatusARM{}), generators)

	return linuxConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["DisablePasswordAuthentication"] = gen.PtrOf(gen.Bool())
	gens["ProvisionVMAgent"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForLinuxConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLinuxConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["PatchSettings"] = gen.PtrOf(LinuxPatchSettingsStatusARMGenerator())
	gens["Ssh"] = gen.PtrOf(SshConfigurationStatusARMGenerator())
}

func Test_MaintenanceRedeployStatus_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MaintenanceRedeployStatus_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMaintenanceRedeployStatusStatusARM, MaintenanceRedeployStatusStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMaintenanceRedeployStatusStatusARM runs a test to see if a specific instance of MaintenanceRedeployStatus_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMaintenanceRedeployStatusStatusARM(subject MaintenanceRedeployStatus_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MaintenanceRedeployStatus_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MaintenanceRedeployStatus_StatusARM instances for property testing - lazily instantiated by
//MaintenanceRedeployStatusStatusARMGenerator()
var maintenanceRedeployStatusStatusARMGenerator gopter.Gen

// MaintenanceRedeployStatusStatusARMGenerator returns a generator of MaintenanceRedeployStatus_StatusARM instances for property testing.
func MaintenanceRedeployStatusStatusARMGenerator() gopter.Gen {
	if maintenanceRedeployStatusStatusARMGenerator != nil {
		return maintenanceRedeployStatusStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMaintenanceRedeployStatusStatusARM(generators)
	maintenanceRedeployStatusStatusARMGenerator = gen.Struct(reflect.TypeOf(MaintenanceRedeployStatus_StatusARM{}), generators)

	return maintenanceRedeployStatusStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMaintenanceRedeployStatusStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMaintenanceRedeployStatusStatusARM(gens map[string]gopter.Gen) {
	gens["IsCustomerInitiatedMaintenanceAllowed"] = gen.PtrOf(gen.Bool())
	gens["LastOperationMessage"] = gen.PtrOf(gen.AlphaString())
	gens["LastOperationResultCode"] = gen.PtrOf(gen.OneConstOf(
		MaintenanceRedeployStatusStatusLastOperationResultCodeMaintenanceAborted,
		MaintenanceRedeployStatusStatusLastOperationResultCodeMaintenanceCompleted,
		MaintenanceRedeployStatusStatusLastOperationResultCodeNone,
		MaintenanceRedeployStatusStatusLastOperationResultCodeRetryLater))
	gens["MaintenanceWindowEndTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaintenanceWindowStartTime"] = gen.PtrOf(gen.AlphaString())
	gens["PreMaintenanceWindowEndTime"] = gen.PtrOf(gen.AlphaString())
	gens["PreMaintenanceWindowStartTime"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceReferenceStatusARM, NetworkInterfaceReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceReferenceStatusARM runs a test to see if a specific instance of NetworkInterfaceReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceReferenceStatusARM(subject NetworkInterfaceReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceReference_StatusARM instances for property testing - lazily instantiated by
//NetworkInterfaceReferenceStatusARMGenerator()
var networkInterfaceReferenceStatusARMGenerator gopter.Gen

// NetworkInterfaceReferenceStatusARMGenerator returns a generator of NetworkInterfaceReference_StatusARM instances for property testing.
// We first initialize networkInterfaceReferenceStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceReferenceStatusARMGenerator() gopter.Gen {
	if networkInterfaceReferenceStatusARMGenerator != nil {
		return networkInterfaceReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceReferenceStatusARM(generators)
	networkInterfaceReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceReference_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceReferenceStatusARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceReferenceStatusARM(generators)
	networkInterfaceReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceReference_StatusARM{}), generators)

	return networkInterfaceReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceReferenceStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceReferencePropertiesStatusARMGenerator())
}

func Test_OSDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OSDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOSDiskStatusARM, OSDiskStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOSDiskStatusARM runs a test to see if a specific instance of OSDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOSDiskStatusARM(subject OSDisk_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OSDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OSDisk_StatusARM instances for property testing - lazily instantiated by OSDiskStatusARMGenerator()
var osDiskStatusARMGenerator gopter.Gen

// OSDiskStatusARMGenerator returns a generator of OSDisk_StatusARM instances for property testing.
// We first initialize osDiskStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OSDiskStatusARMGenerator() gopter.Gen {
	if osDiskStatusARMGenerator != nil {
		return osDiskStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOSDiskStatusARM(generators)
	osDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(OSDisk_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOSDiskStatusARM(generators)
	AddRelatedPropertyGeneratorsForOSDiskStatusARM(generators)
	osDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(OSDisk_StatusARM{}), generators)

	return osDiskStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForOSDiskStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOSDiskStatusARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_StatusNone, Caching_StatusReadOnly, Caching_StatusReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_StatusAttach, CreateOption_StatusEmpty, CreateOption_StatusFromImage))
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSDiskStatusOsTypeLinux, OSDiskStatusOsTypeWindows))
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForOSDiskStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOSDiskStatusARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettingsStatusARMGenerator())
	gens["EncryptionSettings"] = gen.PtrOf(DiskEncryptionSettingsStatusARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDiskStatusARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(ManagedDiskParametersStatusARMGenerator())
	gens["Vhd"] = gen.PtrOf(VirtualHardDiskStatusARMGenerator())
}

func Test_UefiSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UefiSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUefiSettingsStatusARM, UefiSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUefiSettingsStatusARM runs a test to see if a specific instance of UefiSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUefiSettingsStatusARM(subject UefiSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UefiSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UefiSettings_StatusARM instances for property testing - lazily instantiated by
//UefiSettingsStatusARMGenerator()
var uefiSettingsStatusARMGenerator gopter.Gen

// UefiSettingsStatusARMGenerator returns a generator of UefiSettings_StatusARM instances for property testing.
func UefiSettingsStatusARMGenerator() gopter.Gen {
	if uefiSettingsStatusARMGenerator != nil {
		return uefiSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUefiSettingsStatusARM(generators)
	uefiSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(UefiSettings_StatusARM{}), generators)

	return uefiSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUefiSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUefiSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["SecureBootEnabled"] = gen.PtrOf(gen.Bool())
	gens["VTpmEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_VaultSecretGroup_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultSecretGroup_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultSecretGroupStatusARM, VaultSecretGroupStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultSecretGroupStatusARM runs a test to see if a specific instance of VaultSecretGroup_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultSecretGroupStatusARM(subject VaultSecretGroup_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VaultSecretGroup_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VaultSecretGroup_StatusARM instances for property testing - lazily instantiated by
//VaultSecretGroupStatusARMGenerator()
var vaultSecretGroupStatusARMGenerator gopter.Gen

// VaultSecretGroupStatusARMGenerator returns a generator of VaultSecretGroup_StatusARM instances for property testing.
func VaultSecretGroupStatusARMGenerator() gopter.Gen {
	if vaultSecretGroupStatusARMGenerator != nil {
		return vaultSecretGroupStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVaultSecretGroupStatusARM(generators)
	vaultSecretGroupStatusARMGenerator = gen.Struct(reflect.TypeOf(VaultSecretGroup_StatusARM{}), generators)

	return vaultSecretGroupStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForVaultSecretGroupStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultSecretGroupStatusARM(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["VaultCertificates"] = gen.SliceOf(VaultCertificateStatusARMGenerator())
}

func Test_VirtualMachineAgentInstanceView_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineAgentInstanceView_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineAgentInstanceViewStatusARM, VirtualMachineAgentInstanceViewStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineAgentInstanceViewStatusARM runs a test to see if a specific instance of VirtualMachineAgentInstanceView_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineAgentInstanceViewStatusARM(subject VirtualMachineAgentInstanceView_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineAgentInstanceView_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineAgentInstanceView_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineAgentInstanceViewStatusARMGenerator()
var virtualMachineAgentInstanceViewStatusARMGenerator gopter.Gen

// VirtualMachineAgentInstanceViewStatusARMGenerator returns a generator of VirtualMachineAgentInstanceView_StatusARM instances for property testing.
// We first initialize virtualMachineAgentInstanceViewStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineAgentInstanceViewStatusARMGenerator() gopter.Gen {
	if virtualMachineAgentInstanceViewStatusARMGenerator != nil {
		return virtualMachineAgentInstanceViewStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineAgentInstanceViewStatusARM(generators)
	virtualMachineAgentInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineAgentInstanceView_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineAgentInstanceViewStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineAgentInstanceViewStatusARM(generators)
	virtualMachineAgentInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineAgentInstanceView_StatusARM{}), generators)

	return virtualMachineAgentInstanceViewStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineAgentInstanceViewStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineAgentInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["VmAgentVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineAgentInstanceViewStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineAgentInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["ExtensionHandlers"] = gen.SliceOf(VirtualMachineExtensionHandlerInstanceViewStatusARMGenerator())
	gens["Statuses"] = gen.SliceOf(InstanceViewStatusStatusARMGenerator())
}

func Test_VirtualMachineExtensionInstanceView_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineExtensionInstanceView_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineExtensionInstanceViewStatusARM, VirtualMachineExtensionInstanceViewStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineExtensionInstanceViewStatusARM runs a test to see if a specific instance of VirtualMachineExtensionInstanceView_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineExtensionInstanceViewStatusARM(subject VirtualMachineExtensionInstanceView_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineExtensionInstanceView_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineExtensionInstanceView_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineExtensionInstanceViewStatusARMGenerator()
var virtualMachineExtensionInstanceViewStatusARMGenerator gopter.Gen

// VirtualMachineExtensionInstanceViewStatusARMGenerator returns a generator of VirtualMachineExtensionInstanceView_StatusARM instances for property testing.
// We first initialize virtualMachineExtensionInstanceViewStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineExtensionInstanceViewStatusARMGenerator() gopter.Gen {
	if virtualMachineExtensionInstanceViewStatusARMGenerator != nil {
		return virtualMachineExtensionInstanceViewStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionInstanceViewStatusARM(generators)
	virtualMachineExtensionInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtensionInstanceView_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionInstanceViewStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineExtensionInstanceViewStatusARM(generators)
	virtualMachineExtensionInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtensionInstanceView_StatusARM{}), generators)

	return virtualMachineExtensionInstanceViewStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineExtensionInstanceViewStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineExtensionInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineExtensionInstanceViewStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineExtensionInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["Statuses"] = gen.SliceOf(InstanceViewStatusStatusARMGenerator())
	gens["Substatuses"] = gen.SliceOf(InstanceViewStatusStatusARMGenerator())
}

func Test_VirtualMachineHealthStatus_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineHealthStatus_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineHealthStatusStatusARM, VirtualMachineHealthStatusStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineHealthStatusStatusARM runs a test to see if a specific instance of VirtualMachineHealthStatus_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineHealthStatusStatusARM(subject VirtualMachineHealthStatus_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineHealthStatus_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineHealthStatus_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineHealthStatusStatusARMGenerator()
var virtualMachineHealthStatusStatusARMGenerator gopter.Gen

// VirtualMachineHealthStatusStatusARMGenerator returns a generator of VirtualMachineHealthStatus_StatusARM instances for property testing.
func VirtualMachineHealthStatusStatusARMGenerator() gopter.Gen {
	if virtualMachineHealthStatusStatusARMGenerator != nil {
		return virtualMachineHealthStatusStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineHealthStatusStatusARM(generators)
	virtualMachineHealthStatusStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineHealthStatus_StatusARM{}), generators)

	return virtualMachineHealthStatusStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineHealthStatusStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineHealthStatusStatusARM(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(InstanceViewStatusStatusARMGenerator())
}

func Test_VirtualMachinePatchStatus_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachinePatchStatus_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachinePatchStatusStatusARM, VirtualMachinePatchStatusStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachinePatchStatusStatusARM runs a test to see if a specific instance of VirtualMachinePatchStatus_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachinePatchStatusStatusARM(subject VirtualMachinePatchStatus_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachinePatchStatus_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachinePatchStatus_StatusARM instances for property testing - lazily instantiated by
//VirtualMachinePatchStatusStatusARMGenerator()
var virtualMachinePatchStatusStatusARMGenerator gopter.Gen

// VirtualMachinePatchStatusStatusARMGenerator returns a generator of VirtualMachinePatchStatus_StatusARM instances for property testing.
func VirtualMachinePatchStatusStatusARMGenerator() gopter.Gen {
	if virtualMachinePatchStatusStatusARMGenerator != nil {
		return virtualMachinePatchStatusStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachinePatchStatusStatusARM(generators)
	virtualMachinePatchStatusStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachinePatchStatus_StatusARM{}), generators)

	return virtualMachinePatchStatusStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachinePatchStatusStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachinePatchStatusStatusARM(gens map[string]gopter.Gen) {
	gens["AvailablePatchSummary"] = gen.PtrOf(AvailablePatchSummaryStatusARMGenerator())
	gens["ConfigurationStatuses"] = gen.SliceOf(InstanceViewStatusStatusARMGenerator())
	gens["LastPatchInstallationSummary"] = gen.PtrOf(LastPatchInstallationSummaryStatusARMGenerator())
}

func Test_WindowsConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WindowsConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWindowsConfigurationStatusARM, WindowsConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWindowsConfigurationStatusARM runs a test to see if a specific instance of WindowsConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWindowsConfigurationStatusARM(subject WindowsConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WindowsConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WindowsConfiguration_StatusARM instances for property testing - lazily instantiated by
//WindowsConfigurationStatusARMGenerator()
var windowsConfigurationStatusARMGenerator gopter.Gen

// WindowsConfigurationStatusARMGenerator returns a generator of WindowsConfiguration_StatusARM instances for property testing.
// We first initialize windowsConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WindowsConfigurationStatusARMGenerator() gopter.Gen {
	if windowsConfigurationStatusARMGenerator != nil {
		return windowsConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM(generators)
	windowsConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(WindowsConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForWindowsConfigurationStatusARM(generators)
	windowsConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(WindowsConfiguration_StatusARM{}), generators)

	return windowsConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["EnableAutomaticUpdates"] = gen.PtrOf(gen.Bool())
	gens["ProvisionVMAgent"] = gen.PtrOf(gen.Bool())
	gens["TimeZone"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWindowsConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWindowsConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["AdditionalUnattendContent"] = gen.SliceOf(AdditionalUnattendContentStatusARMGenerator())
	gens["PatchSettings"] = gen.PtrOf(PatchSettingsStatusARMGenerator())
	gens["WinRM"] = gen.PtrOf(WinRMConfigurationStatusARMGenerator())
}

func Test_AdditionalUnattendContent_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalUnattendContent_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalUnattendContentStatusARM, AdditionalUnattendContentStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalUnattendContentStatusARM runs a test to see if a specific instance of AdditionalUnattendContent_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalUnattendContentStatusARM(subject AdditionalUnattendContent_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalUnattendContent_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalUnattendContent_StatusARM instances for property testing - lazily instantiated by
//AdditionalUnattendContentStatusARMGenerator()
var additionalUnattendContentStatusARMGenerator gopter.Gen

// AdditionalUnattendContentStatusARMGenerator returns a generator of AdditionalUnattendContent_StatusARM instances for property testing.
func AdditionalUnattendContentStatusARMGenerator() gopter.Gen {
	if additionalUnattendContentStatusARMGenerator != nil {
		return additionalUnattendContentStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalUnattendContentStatusARM(generators)
	additionalUnattendContentStatusARMGenerator = gen.Struct(reflect.TypeOf(AdditionalUnattendContent_StatusARM{}), generators)

	return additionalUnattendContentStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalUnattendContentStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalUnattendContentStatusARM(gens map[string]gopter.Gen) {
	gens["ComponentName"] = gen.PtrOf(gen.OneConstOf(AdditionalUnattendContentStatusComponentNameMicrosoftWindowsShellSetup))
	gens["Content"] = gen.PtrOf(gen.AlphaString())
	gens["PassName"] = gen.PtrOf(gen.OneConstOf(AdditionalUnattendContentStatusPassNameOobeSystem))
	gens["SettingName"] = gen.PtrOf(gen.OneConstOf(AdditionalUnattendContentStatusSettingNameAutoLogon, AdditionalUnattendContentStatusSettingNameFirstLogonCommands))
}

func Test_AvailablePatchSummary_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AvailablePatchSummary_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAvailablePatchSummaryStatusARM, AvailablePatchSummaryStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAvailablePatchSummaryStatusARM runs a test to see if a specific instance of AvailablePatchSummary_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAvailablePatchSummaryStatusARM(subject AvailablePatchSummary_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AvailablePatchSummary_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AvailablePatchSummary_StatusARM instances for property testing - lazily instantiated by
//AvailablePatchSummaryStatusARMGenerator()
var availablePatchSummaryStatusARMGenerator gopter.Gen

// AvailablePatchSummaryStatusARMGenerator returns a generator of AvailablePatchSummary_StatusARM instances for property testing.
// We first initialize availablePatchSummaryStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AvailablePatchSummaryStatusARMGenerator() gopter.Gen {
	if availablePatchSummaryStatusARMGenerator != nil {
		return availablePatchSummaryStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAvailablePatchSummaryStatusARM(generators)
	availablePatchSummaryStatusARMGenerator = gen.Struct(reflect.TypeOf(AvailablePatchSummary_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAvailablePatchSummaryStatusARM(generators)
	AddRelatedPropertyGeneratorsForAvailablePatchSummaryStatusARM(generators)
	availablePatchSummaryStatusARMGenerator = gen.Struct(reflect.TypeOf(AvailablePatchSummary_StatusARM{}), generators)

	return availablePatchSummaryStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAvailablePatchSummaryStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAvailablePatchSummaryStatusARM(gens map[string]gopter.Gen) {
	gens["AssessmentActivityId"] = gen.PtrOf(gen.AlphaString())
	gens["CriticalAndSecurityPatchCount"] = gen.PtrOf(gen.Int())
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
	gens["OtherPatchCount"] = gen.PtrOf(gen.Int())
	gens["RebootPending"] = gen.PtrOf(gen.Bool())
	gens["StartTime"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		AvailablePatchSummaryStatusStatusCompletedWithWarnings,
		AvailablePatchSummaryStatusStatusFailed,
		AvailablePatchSummaryStatusStatusInProgress,
		AvailablePatchSummaryStatusStatusSucceeded,
		AvailablePatchSummaryStatusStatusUnknown))
}

// AddRelatedPropertyGeneratorsForAvailablePatchSummaryStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAvailablePatchSummaryStatusARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ApiErrorStatusARMGenerator())
}

func Test_DiffDiskSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiffDiskSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiffDiskSettingsStatusARM, DiffDiskSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiffDiskSettingsStatusARM runs a test to see if a specific instance of DiffDiskSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiffDiskSettingsStatusARM(subject DiffDiskSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiffDiskSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiffDiskSettings_StatusARM instances for property testing - lazily instantiated by
//DiffDiskSettingsStatusARMGenerator()
var diffDiskSettingsStatusARMGenerator gopter.Gen

// DiffDiskSettingsStatusARMGenerator returns a generator of DiffDiskSettings_StatusARM instances for property testing.
func DiffDiskSettingsStatusARMGenerator() gopter.Gen {
	if diffDiskSettingsStatusARMGenerator != nil {
		return diffDiskSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiffDiskSettingsStatusARM(generators)
	diffDiskSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(DiffDiskSettings_StatusARM{}), generators)

	return diffDiskSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDiffDiskSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiffDiskSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["Option"] = gen.PtrOf(gen.OneConstOf(DiffDiskOption_StatusLocal))
	gens["Placement"] = gen.PtrOf(gen.OneConstOf(DiffDiskPlacement_StatusCacheDisk, DiffDiskPlacement_StatusResourceDisk))
}

func Test_DiskEncryptionSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiskEncryptionSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiskEncryptionSettingsStatusARM, DiskEncryptionSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiskEncryptionSettingsStatusARM runs a test to see if a specific instance of DiskEncryptionSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiskEncryptionSettingsStatusARM(subject DiskEncryptionSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DiskEncryptionSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DiskEncryptionSettings_StatusARM instances for property testing - lazily instantiated by
//DiskEncryptionSettingsStatusARMGenerator()
var diskEncryptionSettingsStatusARMGenerator gopter.Gen

// DiskEncryptionSettingsStatusARMGenerator returns a generator of DiskEncryptionSettings_StatusARM instances for property testing.
// We first initialize diskEncryptionSettingsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DiskEncryptionSettingsStatusARMGenerator() gopter.Gen {
	if diskEncryptionSettingsStatusARMGenerator != nil {
		return diskEncryptionSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskEncryptionSettingsStatusARM(generators)
	diskEncryptionSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(DiskEncryptionSettings_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiskEncryptionSettingsStatusARM(generators)
	AddRelatedPropertyGeneratorsForDiskEncryptionSettingsStatusARM(generators)
	diskEncryptionSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(DiskEncryptionSettings_StatusARM{}), generators)

	return diskEncryptionSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDiskEncryptionSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiskEncryptionSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForDiskEncryptionSettingsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiskEncryptionSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionKey"] = gen.PtrOf(KeyVaultSecretReferenceStatusARMGenerator())
	gens["KeyEncryptionKey"] = gen.PtrOf(KeyVaultKeyReferenceStatusARMGenerator())
}

func Test_LastPatchInstallationSummary_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LastPatchInstallationSummary_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLastPatchInstallationSummaryStatusARM, LastPatchInstallationSummaryStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLastPatchInstallationSummaryStatusARM runs a test to see if a specific instance of LastPatchInstallationSummary_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLastPatchInstallationSummaryStatusARM(subject LastPatchInstallationSummary_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LastPatchInstallationSummary_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LastPatchInstallationSummary_StatusARM instances for property testing - lazily instantiated by
//LastPatchInstallationSummaryStatusARMGenerator()
var lastPatchInstallationSummaryStatusARMGenerator gopter.Gen

// LastPatchInstallationSummaryStatusARMGenerator returns a generator of LastPatchInstallationSummary_StatusARM instances for property testing.
// We first initialize lastPatchInstallationSummaryStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LastPatchInstallationSummaryStatusARMGenerator() gopter.Gen {
	if lastPatchInstallationSummaryStatusARMGenerator != nil {
		return lastPatchInstallationSummaryStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLastPatchInstallationSummaryStatusARM(generators)
	lastPatchInstallationSummaryStatusARMGenerator = gen.Struct(reflect.TypeOf(LastPatchInstallationSummary_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLastPatchInstallationSummaryStatusARM(generators)
	AddRelatedPropertyGeneratorsForLastPatchInstallationSummaryStatusARM(generators)
	lastPatchInstallationSummaryStatusARMGenerator = gen.Struct(reflect.TypeOf(LastPatchInstallationSummary_StatusARM{}), generators)

	return lastPatchInstallationSummaryStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLastPatchInstallationSummaryStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLastPatchInstallationSummaryStatusARM(gens map[string]gopter.Gen) {
	gens["ExcludedPatchCount"] = gen.PtrOf(gen.Int())
	gens["FailedPatchCount"] = gen.PtrOf(gen.Int())
	gens["InstallationActivityId"] = gen.PtrOf(gen.AlphaString())
	gens["InstalledPatchCount"] = gen.PtrOf(gen.Int())
	gens["LastModifiedTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaintenanceWindowExceeded"] = gen.PtrOf(gen.Bool())
	gens["NotSelectedPatchCount"] = gen.PtrOf(gen.Int())
	gens["PendingPatchCount"] = gen.PtrOf(gen.Int())
	gens["StartTime"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		LastPatchInstallationSummaryStatusStatusCompletedWithWarnings,
		LastPatchInstallationSummaryStatusStatusFailed,
		LastPatchInstallationSummaryStatusStatusInProgress,
		LastPatchInstallationSummaryStatusStatusSucceeded,
		LastPatchInstallationSummaryStatusStatusUnknown))
}

// AddRelatedPropertyGeneratorsForLastPatchInstallationSummaryStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLastPatchInstallationSummaryStatusARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ApiErrorStatusARMGenerator())
}

func Test_LinuxPatchSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxPatchSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxPatchSettingsStatusARM, LinuxPatchSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxPatchSettingsStatusARM runs a test to see if a specific instance of LinuxPatchSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxPatchSettingsStatusARM(subject LinuxPatchSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LinuxPatchSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LinuxPatchSettings_StatusARM instances for property testing - lazily instantiated by
//LinuxPatchSettingsStatusARMGenerator()
var linuxPatchSettingsStatusARMGenerator gopter.Gen

// LinuxPatchSettingsStatusARMGenerator returns a generator of LinuxPatchSettings_StatusARM instances for property testing.
func LinuxPatchSettingsStatusARMGenerator() gopter.Gen {
	if linuxPatchSettingsStatusARMGenerator != nil {
		return linuxPatchSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxPatchSettingsStatusARM(generators)
	linuxPatchSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(LinuxPatchSettings_StatusARM{}), generators)

	return linuxPatchSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLinuxPatchSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxPatchSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["PatchMode"] = gen.PtrOf(gen.OneConstOf(LinuxPatchSettingsStatusPatchModeAutomaticByPlatform, LinuxPatchSettingsStatusPatchModeImageDefault))
}

func Test_ManagedDiskParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedDiskParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedDiskParametersStatusARM, ManagedDiskParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedDiskParametersStatusARM runs a test to see if a specific instance of ManagedDiskParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedDiskParametersStatusARM(subject ManagedDiskParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedDiskParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedDiskParameters_StatusARM instances for property testing - lazily instantiated by
//ManagedDiskParametersStatusARMGenerator()
var managedDiskParametersStatusARMGenerator gopter.Gen

// ManagedDiskParametersStatusARMGenerator returns a generator of ManagedDiskParameters_StatusARM instances for property testing.
// We first initialize managedDiskParametersStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedDiskParametersStatusARMGenerator() gopter.Gen {
	if managedDiskParametersStatusARMGenerator != nil {
		return managedDiskParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedDiskParametersStatusARM(generators)
	managedDiskParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedDiskParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedDiskParametersStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedDiskParametersStatusARM(generators)
	managedDiskParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedDiskParameters_StatusARM{}), generators)

	return managedDiskParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedDiskParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedDiskParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_StatusPremiumLRS,
		StorageAccountType_StatusPremiumZRS,
		StorageAccountType_StatusStandardLRS,
		StorageAccountType_StatusStandardSSDLRS,
		StorageAccountType_StatusStandardSSDZRS,
		StorageAccountType_StatusUltraSSDLRS))
}

// AddRelatedPropertyGeneratorsForManagedDiskParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedDiskParametersStatusARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_NetworkInterfaceReferenceProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceReferenceProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceReferencePropertiesStatusARM, NetworkInterfaceReferencePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceReferencePropertiesStatusARM runs a test to see if a specific instance of NetworkInterfaceReferenceProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceReferencePropertiesStatusARM(subject NetworkInterfaceReferenceProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceReferenceProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceReferenceProperties_StatusARM instances for property testing - lazily instantiated by
//NetworkInterfaceReferencePropertiesStatusARMGenerator()
var networkInterfaceReferencePropertiesStatusARMGenerator gopter.Gen

// NetworkInterfaceReferencePropertiesStatusARMGenerator returns a generator of NetworkInterfaceReferenceProperties_StatusARM instances for property testing.
func NetworkInterfaceReferencePropertiesStatusARMGenerator() gopter.Gen {
	if networkInterfaceReferencePropertiesStatusARMGenerator != nil {
		return networkInterfaceReferencePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceReferencePropertiesStatusARM(generators)
	networkInterfaceReferencePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceReferenceProperties_StatusARM{}), generators)

	return networkInterfaceReferencePropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceReferencePropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceReferencePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

func Test_PatchSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PatchSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPatchSettingsStatusARM, PatchSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPatchSettingsStatusARM runs a test to see if a specific instance of PatchSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPatchSettingsStatusARM(subject PatchSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PatchSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PatchSettings_StatusARM instances for property testing - lazily instantiated by
//PatchSettingsStatusARMGenerator()
var patchSettingsStatusARMGenerator gopter.Gen

// PatchSettingsStatusARMGenerator returns a generator of PatchSettings_StatusARM instances for property testing.
func PatchSettingsStatusARMGenerator() gopter.Gen {
	if patchSettingsStatusARMGenerator != nil {
		return patchSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPatchSettingsStatusARM(generators)
	patchSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(PatchSettings_StatusARM{}), generators)

	return patchSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPatchSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPatchSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["EnableHotpatching"] = gen.PtrOf(gen.Bool())
	gens["PatchMode"] = gen.PtrOf(gen.OneConstOf(PatchSettingsStatusPatchModeAutomaticByOS, PatchSettingsStatusPatchModeAutomaticByPlatform, PatchSettingsStatusPatchModeManual))
}

func Test_SshConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SshConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSshConfigurationStatusARM, SshConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSshConfigurationStatusARM runs a test to see if a specific instance of SshConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSshConfigurationStatusARM(subject SshConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SshConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SshConfiguration_StatusARM instances for property testing - lazily instantiated by
//SshConfigurationStatusARMGenerator()
var sshConfigurationStatusARMGenerator gopter.Gen

// SshConfigurationStatusARMGenerator returns a generator of SshConfiguration_StatusARM instances for property testing.
func SshConfigurationStatusARMGenerator() gopter.Gen {
	if sshConfigurationStatusARMGenerator != nil {
		return sshConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSshConfigurationStatusARM(generators)
	sshConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(SshConfiguration_StatusARM{}), generators)

	return sshConfigurationStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForSshConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSshConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(SshPublicKeyStatusARMGenerator())
}

func Test_VaultCertificate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultCertificate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultCertificateStatusARM, VaultCertificateStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultCertificateStatusARM runs a test to see if a specific instance of VaultCertificate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultCertificateStatusARM(subject VaultCertificate_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VaultCertificate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VaultCertificate_StatusARM instances for property testing - lazily instantiated by
//VaultCertificateStatusARMGenerator()
var vaultCertificateStatusARMGenerator gopter.Gen

// VaultCertificateStatusARMGenerator returns a generator of VaultCertificate_StatusARM instances for property testing.
func VaultCertificateStatusARMGenerator() gopter.Gen {
	if vaultCertificateStatusARMGenerator != nil {
		return vaultCertificateStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultCertificateStatusARM(generators)
	vaultCertificateStatusARMGenerator = gen.Struct(reflect.TypeOf(VaultCertificate_StatusARM{}), generators)

	return vaultCertificateStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultCertificateStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultCertificateStatusARM(gens map[string]gopter.Gen) {
	gens["CertificateStore"] = gen.PtrOf(gen.AlphaString())
	gens["CertificateUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualHardDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualHardDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualHardDiskStatusARM, VirtualHardDiskStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualHardDiskStatusARM runs a test to see if a specific instance of VirtualHardDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualHardDiskStatusARM(subject VirtualHardDisk_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualHardDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualHardDisk_StatusARM instances for property testing - lazily instantiated by
//VirtualHardDiskStatusARMGenerator()
var virtualHardDiskStatusARMGenerator gopter.Gen

// VirtualHardDiskStatusARMGenerator returns a generator of VirtualHardDisk_StatusARM instances for property testing.
func VirtualHardDiskStatusARMGenerator() gopter.Gen {
	if virtualHardDiskStatusARMGenerator != nil {
		return virtualHardDiskStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualHardDiskStatusARM(generators)
	virtualHardDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualHardDisk_StatusARM{}), generators)

	return virtualHardDiskStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualHardDiskStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualHardDiskStatusARM(gens map[string]gopter.Gen) {
	gens["Uri"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineExtensionHandlerInstanceView_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineExtensionHandlerInstanceView_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineExtensionHandlerInstanceViewStatusARM, VirtualMachineExtensionHandlerInstanceViewStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineExtensionHandlerInstanceViewStatusARM runs a test to see if a specific instance of VirtualMachineExtensionHandlerInstanceView_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineExtensionHandlerInstanceViewStatusARM(subject VirtualMachineExtensionHandlerInstanceView_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineExtensionHandlerInstanceView_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineExtensionHandlerInstanceView_StatusARM instances for property testing - lazily
//instantiated by VirtualMachineExtensionHandlerInstanceViewStatusARMGenerator()
var virtualMachineExtensionHandlerInstanceViewStatusARMGenerator gopter.Gen

// VirtualMachineExtensionHandlerInstanceViewStatusARMGenerator returns a generator of VirtualMachineExtensionHandlerInstanceView_StatusARM instances for property testing.
// We first initialize virtualMachineExtensionHandlerInstanceViewStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineExtensionHandlerInstanceViewStatusARMGenerator() gopter.Gen {
	if virtualMachineExtensionHandlerInstanceViewStatusARMGenerator != nil {
		return virtualMachineExtensionHandlerInstanceViewStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionHandlerInstanceViewStatusARM(generators)
	virtualMachineExtensionHandlerInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtensionHandlerInstanceView_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineExtensionHandlerInstanceViewStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineExtensionHandlerInstanceViewStatusARM(generators)
	virtualMachineExtensionHandlerInstanceViewStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineExtensionHandlerInstanceView_StatusARM{}), generators)

	return virtualMachineExtensionHandlerInstanceViewStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineExtensionHandlerInstanceViewStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineExtensionHandlerInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineExtensionHandlerInstanceViewStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineExtensionHandlerInstanceViewStatusARM(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(InstanceViewStatusStatusARMGenerator())
}

func Test_WinRMConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WinRMConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWinRMConfigurationStatusARM, WinRMConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWinRMConfigurationStatusARM runs a test to see if a specific instance of WinRMConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWinRMConfigurationStatusARM(subject WinRMConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WinRMConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WinRMConfiguration_StatusARM instances for property testing - lazily instantiated by
//WinRMConfigurationStatusARMGenerator()
var winRMConfigurationStatusARMGenerator gopter.Gen

// WinRMConfigurationStatusARMGenerator returns a generator of WinRMConfiguration_StatusARM instances for property testing.
func WinRMConfigurationStatusARMGenerator() gopter.Gen {
	if winRMConfigurationStatusARMGenerator != nil {
		return winRMConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForWinRMConfigurationStatusARM(generators)
	winRMConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(WinRMConfiguration_StatusARM{}), generators)

	return winRMConfigurationStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForWinRMConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWinRMConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Listeners"] = gen.SliceOf(WinRMListenerStatusARMGenerator())
}

func Test_ApiError_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiError_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiErrorStatusARM, ApiErrorStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiErrorStatusARM runs a test to see if a specific instance of ApiError_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiErrorStatusARM(subject ApiError_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiError_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiError_StatusARM instances for property testing - lazily instantiated by ApiErrorStatusARMGenerator()
var apiErrorStatusARMGenerator gopter.Gen

// ApiErrorStatusARMGenerator returns a generator of ApiError_StatusARM instances for property testing.
// We first initialize apiErrorStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApiErrorStatusARMGenerator() gopter.Gen {
	if apiErrorStatusARMGenerator != nil {
		return apiErrorStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiErrorStatusARM(generators)
	apiErrorStatusARMGenerator = gen.Struct(reflect.TypeOf(ApiError_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiErrorStatusARM(generators)
	AddRelatedPropertyGeneratorsForApiErrorStatusARM(generators)
	apiErrorStatusARMGenerator = gen.Struct(reflect.TypeOf(ApiError_StatusARM{}), generators)

	return apiErrorStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApiErrorStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiErrorStatusARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApiErrorStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApiErrorStatusARM(gens map[string]gopter.Gen) {
	gens["Details"] = gen.SliceOf(ApiErrorBaseStatusARMGenerator())
	gens["Innererror"] = gen.PtrOf(InnerErrorStatusARMGenerator())
}

func Test_KeyVaultKeyReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultKeyReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultKeyReferenceStatusARM, KeyVaultKeyReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultKeyReferenceStatusARM runs a test to see if a specific instance of KeyVaultKeyReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultKeyReferenceStatusARM(subject KeyVaultKeyReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultKeyReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultKeyReference_StatusARM instances for property testing - lazily instantiated by
//KeyVaultKeyReferenceStatusARMGenerator()
var keyVaultKeyReferenceStatusARMGenerator gopter.Gen

// KeyVaultKeyReferenceStatusARMGenerator returns a generator of KeyVaultKeyReference_StatusARM instances for property testing.
// We first initialize keyVaultKeyReferenceStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultKeyReferenceStatusARMGenerator() gopter.Gen {
	if keyVaultKeyReferenceStatusARMGenerator != nil {
		return keyVaultKeyReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultKeyReferenceStatusARM(generators)
	keyVaultKeyReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultKeyReference_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultKeyReferenceStatusARM(generators)
	AddRelatedPropertyGeneratorsForKeyVaultKeyReferenceStatusARM(generators)
	keyVaultKeyReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultKeyReference_StatusARM{}), generators)

	return keyVaultKeyReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultKeyReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultKeyReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["KeyUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKeyVaultKeyReferenceStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultKeyReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_KeyVaultSecretReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSecretReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSecretReferenceStatusARM, KeyVaultSecretReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSecretReferenceStatusARM runs a test to see if a specific instance of KeyVaultSecretReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSecretReferenceStatusARM(subject KeyVaultSecretReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSecretReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSecretReference_StatusARM instances for property testing - lazily instantiated by
//KeyVaultSecretReferenceStatusARMGenerator()
var keyVaultSecretReferenceStatusARMGenerator gopter.Gen

// KeyVaultSecretReferenceStatusARMGenerator returns a generator of KeyVaultSecretReference_StatusARM instances for property testing.
// We first initialize keyVaultSecretReferenceStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KeyVaultSecretReferenceStatusARMGenerator() gopter.Gen {
	if keyVaultSecretReferenceStatusARMGenerator != nil {
		return keyVaultSecretReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSecretReferenceStatusARM(generators)
	keyVaultSecretReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSecretReference_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSecretReferenceStatusARM(generators)
	AddRelatedPropertyGeneratorsForKeyVaultSecretReferenceStatusARM(generators)
	keyVaultSecretReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSecretReference_StatusARM{}), generators)

	return keyVaultSecretReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSecretReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSecretReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["SecretUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKeyVaultSecretReferenceStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKeyVaultSecretReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_SshPublicKey_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SshPublicKey_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSshPublicKeyStatusARM, SshPublicKeyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSshPublicKeyStatusARM runs a test to see if a specific instance of SshPublicKey_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSshPublicKeyStatusARM(subject SshPublicKey_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SshPublicKey_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SshPublicKey_StatusARM instances for property testing - lazily instantiated by
//SshPublicKeyStatusARMGenerator()
var sshPublicKeyStatusARMGenerator gopter.Gen

// SshPublicKeyStatusARMGenerator returns a generator of SshPublicKey_StatusARM instances for property testing.
func SshPublicKeyStatusARMGenerator() gopter.Gen {
	if sshPublicKeyStatusARMGenerator != nil {
		return sshPublicKeyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSshPublicKeyStatusARM(generators)
	sshPublicKeyStatusARMGenerator = gen.Struct(reflect.TypeOf(SshPublicKey_StatusARM{}), generators)

	return sshPublicKeyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSshPublicKeyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSshPublicKeyStatusARM(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
}

func Test_WinRMListener_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WinRMListener_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWinRMListenerStatusARM, WinRMListenerStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWinRMListenerStatusARM runs a test to see if a specific instance of WinRMListener_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWinRMListenerStatusARM(subject WinRMListener_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WinRMListener_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WinRMListener_StatusARM instances for property testing - lazily instantiated by
//WinRMListenerStatusARMGenerator()
var winRMListenerStatusARMGenerator gopter.Gen

// WinRMListenerStatusARMGenerator returns a generator of WinRMListener_StatusARM instances for property testing.
func WinRMListenerStatusARMGenerator() gopter.Gen {
	if winRMListenerStatusARMGenerator != nil {
		return winRMListenerStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWinRMListenerStatusARM(generators)
	winRMListenerStatusARMGenerator = gen.Struct(reflect.TypeOf(WinRMListener_StatusARM{}), generators)

	return winRMListenerStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWinRMListenerStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWinRMListenerStatusARM(gens map[string]gopter.Gen) {
	gens["CertificateUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(WinRMListenerStatusProtocolHttp, WinRMListenerStatusProtocolHttps))
}

func Test_ApiErrorBase_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiErrorBase_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiErrorBaseStatusARM, ApiErrorBaseStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiErrorBaseStatusARM runs a test to see if a specific instance of ApiErrorBase_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiErrorBaseStatusARM(subject ApiErrorBase_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiErrorBase_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiErrorBase_StatusARM instances for property testing - lazily instantiated by
//ApiErrorBaseStatusARMGenerator()
var apiErrorBaseStatusARMGenerator gopter.Gen

// ApiErrorBaseStatusARMGenerator returns a generator of ApiErrorBase_StatusARM instances for property testing.
func ApiErrorBaseStatusARMGenerator() gopter.Gen {
	if apiErrorBaseStatusARMGenerator != nil {
		return apiErrorBaseStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiErrorBaseStatusARM(generators)
	apiErrorBaseStatusARMGenerator = gen.Struct(reflect.TypeOf(ApiErrorBase_StatusARM{}), generators)

	return apiErrorBaseStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApiErrorBaseStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiErrorBaseStatusARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

func Test_InnerError_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InnerError_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInnerErrorStatusARM, InnerErrorStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInnerErrorStatusARM runs a test to see if a specific instance of InnerError_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInnerErrorStatusARM(subject InnerError_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InnerError_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InnerError_StatusARM instances for property testing - lazily instantiated by
//InnerErrorStatusARMGenerator()
var innerErrorStatusARMGenerator gopter.Gen

// InnerErrorStatusARMGenerator returns a generator of InnerError_StatusARM instances for property testing.
func InnerErrorStatusARMGenerator() gopter.Gen {
	if innerErrorStatusARMGenerator != nil {
		return innerErrorStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInnerErrorStatusARM(generators)
	innerErrorStatusARMGenerator = gen.Struct(reflect.TypeOf(InnerError_StatusARM{}), generators)

	return innerErrorStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForInnerErrorStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInnerErrorStatusARM(gens map[string]gopter.Gen) {
	gens["Errordetail"] = gen.PtrOf(gen.AlphaString())
	gens["Exceptiontype"] = gen.PtrOf(gen.AlphaString())
}
