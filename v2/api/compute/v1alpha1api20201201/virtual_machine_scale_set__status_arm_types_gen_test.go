// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSet_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSet_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSet_StatusARM, VirtualMachineScaleSet_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSet_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSet_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSet_StatusARM(subject VirtualMachineScaleSet_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSet_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSet_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSet_StatusARMGenerator()
var virtualMachineScaleSet_statusARMGenerator gopter.Gen

// VirtualMachineScaleSet_StatusARMGenerator returns a generator of VirtualMachineScaleSet_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSet_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSet_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSet_statusARMGenerator != nil {
		return virtualMachineScaleSet_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_StatusARM(generators)
	virtualMachineScaleSet_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_StatusARM(generators)
	virtualMachineScaleSet_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_StatusARM{}), generators)

	return virtualMachineScaleSet_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSet_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSet_StatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentity_StatusARMGenerator())
	gens["Plan"] = gen.PtrOf(Plan_StatusARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetProperties_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_StatusARMGenerator())
}

func Test_ExtendedLocation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_StatusARM, ExtendedLocation_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_StatusARM runs a test to see if a specific instance of ExtendedLocation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_StatusARM(subject ExtendedLocation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_StatusARM instances for property testing - lazily instantiated by
//ExtendedLocation_StatusARMGenerator()
var extendedLocation_statusARMGenerator gopter.Gen

// ExtendedLocation_StatusARMGenerator returns a generator of ExtendedLocation_StatusARM instances for property testing.
func ExtendedLocation_StatusARMGenerator() gopter.Gen {
	if extendedLocation_statusARMGenerator != nil {
		return extendedLocation_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_StatusARM(generators)
	extendedLocation_statusARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_StatusARM{}), generators)

	return extendedLocation_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_Plan_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlan_StatusARM, Plan_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlan_StatusARM runs a test to see if a specific instance of Plan_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlan_StatusARM(subject Plan_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_StatusARM instances for property testing - lazily instantiated by Plan_StatusARMGenerator()
var plan_statusARMGenerator gopter.Gen

// Plan_StatusARMGenerator returns a generator of Plan_StatusARM instances for property testing.
func Plan_StatusARMGenerator() gopter.Gen {
	if plan_statusARMGenerator != nil {
		return plan_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlan_StatusARM(generators)
	plan_statusARMGenerator = gen.Struct(reflect.TypeOf(Plan_StatusARM{}), generators)

	return plan_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPlan_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlan_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_StatusARM, Sku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_StatusARM runs a test to see if a specific instance of Sku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_StatusARM(subject Sku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_StatusARM instances for property testing - lazily instantiated by Sku_StatusARMGenerator()
var sku_statusARMGenerator gopter.Gen

// Sku_StatusARMGenerator returns a generator of Sku_StatusARM instances for property testing.
func Sku_StatusARMGenerator() gopter.Gen {
	if sku_statusARMGenerator != nil {
		return sku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_StatusARM(generators)
	sku_statusARMGenerator = gen.Struct(reflect.TypeOf(Sku_StatusARM{}), generators)

	return sku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_StatusARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentity_StatusARM, VirtualMachineScaleSetIdentity_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentity_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentity_StatusARM(subject VirtualMachineScaleSetIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIdentity_StatusARMGenerator()
var virtualMachineScaleSetIdentity_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentity_StatusARMGenerator returns a generator of VirtualMachineScaleSetIdentity_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetIdentity_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIdentity_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentity_statusARMGenerator != nil {
		return virtualMachineScaleSetIdentity_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusARM(generators)
	virtualMachineScaleSetIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusARM(generators)
	virtualMachineScaleSetIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_StatusARM{}), generators)

	return virtualMachineScaleSetIdentity_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARMGenerator())
}

func Test_VirtualMachineScaleSetProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetProperties_StatusARM, VirtualMachineScaleSetProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetProperties_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetProperties_StatusARM(subject VirtualMachineScaleSetProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetProperties_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetProperties_StatusARMGenerator()
var virtualMachineScaleSetProperties_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetProperties_StatusARMGenerator returns a generator of VirtualMachineScaleSetProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetProperties_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetProperties_statusARMGenerator != nil {
		return virtualMachineScaleSetProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_StatusARM(generators)
	virtualMachineScaleSetProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_StatusARM(generators)
	virtualMachineScaleSetProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_StatusARM{}), generators)

	return virtualMachineScaleSetProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.AlphaString())
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["UniqueId"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilities_StatusARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicy_StatusARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResource_StatusARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResource_StatusARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicy_StatusARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicy_StatusARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfile_StatusARMGenerator())
}

func Test_AdditionalCapabilities_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilities_StatusARM, AdditionalCapabilities_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilities_StatusARM runs a test to see if a specific instance of AdditionalCapabilities_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilities_StatusARM(subject AdditionalCapabilities_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalCapabilities_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalCapabilities_StatusARM instances for property testing - lazily instantiated by
//AdditionalCapabilities_StatusARMGenerator()
var additionalCapabilities_statusARMGenerator gopter.Gen

// AdditionalCapabilities_StatusARMGenerator returns a generator of AdditionalCapabilities_StatusARM instances for property testing.
func AdditionalCapabilities_StatusARMGenerator() gopter.Gen {
	if additionalCapabilities_statusARMGenerator != nil {
		return additionalCapabilities_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilities_StatusARM(generators)
	additionalCapabilities_statusARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_StatusARM{}), generators)

	return additionalCapabilities_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilities_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilities_StatusARM(gens map[string]gopter.Gen) {
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicy_StatusARM, AutomaticRepairsPolicy_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicy_StatusARM runs a test to see if a specific instance of AutomaticRepairsPolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicy_StatusARM(subject AutomaticRepairsPolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticRepairsPolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticRepairsPolicy_StatusARM instances for property testing - lazily instantiated by
//AutomaticRepairsPolicy_StatusARMGenerator()
var automaticRepairsPolicy_statusARMGenerator gopter.Gen

// AutomaticRepairsPolicy_StatusARMGenerator returns a generator of AutomaticRepairsPolicy_StatusARM instances for property testing.
func AutomaticRepairsPolicy_StatusARMGenerator() gopter.Gen {
	if automaticRepairsPolicy_statusARMGenerator != nil {
		return automaticRepairsPolicy_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_StatusARM(generators)
	automaticRepairsPolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_StatusARM{}), generators)

	return automaticRepairsPolicy_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScaleInPolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicy_StatusARM, ScaleInPolicy_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicy_StatusARM runs a test to see if a specific instance of ScaleInPolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicy_StatusARM(subject ScaleInPolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleInPolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleInPolicy_StatusARM instances for property testing - lazily instantiated by
//ScaleInPolicy_StatusARMGenerator()
var scaleInPolicy_statusARMGenerator gopter.Gen

// ScaleInPolicy_StatusARMGenerator returns a generator of ScaleInPolicy_StatusARM instances for property testing.
func ScaleInPolicy_StatusARMGenerator() gopter.Gen {
	if scaleInPolicy_statusARMGenerator != nil {
		return scaleInPolicy_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicy_StatusARM(generators)
	scaleInPolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_StatusARM{}), generators)

	return scaleInPolicy_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicy_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(gen.AlphaString())
}

func Test_SubResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_StatusARM, SubResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_StatusARM runs a test to see if a specific instance of SubResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_StatusARM(subject SubResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_StatusARM instances for property testing - lazily instantiated by
//SubResource_StatusARMGenerator()
var subResource_statusARMGenerator gopter.Gen

// SubResource_StatusARMGenerator returns a generator of SubResource_StatusARM instances for property testing.
func SubResource_StatusARMGenerator() gopter.Gen {
	if subResource_statusARMGenerator != nil {
		return subResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_StatusARM(generators)
	subResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SubResource_StatusARM{}), generators)

	return subResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicy_StatusARM, UpgradePolicy_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicy_StatusARM runs a test to see if a specific instance of UpgradePolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicy_StatusARM(subject UpgradePolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpgradePolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpgradePolicy_StatusARM instances for property testing - lazily instantiated by
//UpgradePolicy_StatusARMGenerator()
var upgradePolicy_statusARMGenerator gopter.Gen

// UpgradePolicy_StatusARMGenerator returns a generator of UpgradePolicy_StatusARM instances for property testing.
// We first initialize upgradePolicy_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicy_StatusARMGenerator() gopter.Gen {
	if upgradePolicy_statusARMGenerator != nil {
		return upgradePolicy_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_StatusARM(generators)
	upgradePolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicy_StatusARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicy_StatusARM(generators)
	upgradePolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_StatusARM{}), generators)

	return upgradePolicy_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicy_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpgradePolicy_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicy_StatusARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicy_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM, VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM(subject VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARMGenerator()
var virtualMachineScaleSetIdentity_statusUserAssignedIdentitiesARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARMGenerator returns a generator of VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM instances for property testing.
func VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentity_statusUserAssignedIdentitiesARMGenerator != nil {
		return virtualMachineScaleSetIdentity_statusUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM(generators)
	virtualMachineScaleSetIdentity_statusUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM{}), generators)

	return virtualMachineScaleSetIdentity_statusUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentity_StatusUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetVMProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_StatusARM, VirtualMachineScaleSetVMProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfile_StatusARM(subject VirtualMachineScaleSetVMProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetVMProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetVMProfile_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetVMProfile_StatusARMGenerator()
var virtualMachineScaleSetVMProfile_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfile_StatusARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfile_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfile_statusARMGenerator != nil {
		return virtualMachineScaleSetVMProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_StatusARM(generators)
	virtualMachineScaleSetVMProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_StatusARM(generators)
	virtualMachineScaleSetVMProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_StatusARM{}), generators)

	return virtualMachineScaleSetVMProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["BillingProfile"] = gen.PtrOf(BillingProfile_StatusARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfile_StatusARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfile_StatusARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfile_StatusARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfile_StatusARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfile_StatusARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfile_StatusARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfile_StatusARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicy_StatusARM, AutomaticOSUpgradePolicy_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicy_StatusARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicy_StatusARM(subject AutomaticOSUpgradePolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticOSUpgradePolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticOSUpgradePolicy_StatusARM instances for property testing - lazily instantiated by
//AutomaticOSUpgradePolicy_StatusARMGenerator()
var automaticOSUpgradePolicy_statusARMGenerator gopter.Gen

// AutomaticOSUpgradePolicy_StatusARMGenerator returns a generator of AutomaticOSUpgradePolicy_StatusARM instances for property testing.
func AutomaticOSUpgradePolicy_StatusARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicy_statusARMGenerator != nil {
		return automaticOSUpgradePolicy_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_StatusARM(generators)
	automaticOSUpgradePolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_StatusARM{}), generators)

	return automaticOSUpgradePolicy_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
}

func Test_RollingUpgradePolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicy_StatusARM, RollingUpgradePolicy_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicy_StatusARM runs a test to see if a specific instance of RollingUpgradePolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicy_StatusARM(subject RollingUpgradePolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RollingUpgradePolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RollingUpgradePolicy_StatusARM instances for property testing - lazily instantiated by
//RollingUpgradePolicy_StatusARMGenerator()
var rollingUpgradePolicy_statusARMGenerator gopter.Gen

// RollingUpgradePolicy_StatusARMGenerator returns a generator of RollingUpgradePolicy_StatusARM instances for property testing.
func RollingUpgradePolicy_StatusARMGenerator() gopter.Gen {
	if rollingUpgradePolicy_statusARMGenerator != nil {
		return rollingUpgradePolicy_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicy_StatusARM(generators)
	rollingUpgradePolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_StatusARM{}), generators)

	return rollingUpgradePolicy_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicy_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_ScheduledEventsProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduledEventsProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduledEventsProfile_StatusARM, ScheduledEventsProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduledEventsProfile_StatusARM runs a test to see if a specific instance of ScheduledEventsProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduledEventsProfile_StatusARM(subject ScheduledEventsProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduledEventsProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduledEventsProfile_StatusARM instances for property testing - lazily instantiated by
//ScheduledEventsProfile_StatusARMGenerator()
var scheduledEventsProfile_statusARMGenerator gopter.Gen

// ScheduledEventsProfile_StatusARMGenerator returns a generator of ScheduledEventsProfile_StatusARM instances for property testing.
func ScheduledEventsProfile_StatusARMGenerator() gopter.Gen {
	if scheduledEventsProfile_statusARMGenerator != nil {
		return scheduledEventsProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduledEventsProfile_StatusARM(generators)
	scheduledEventsProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ScheduledEventsProfile_StatusARM{}), generators)

	return scheduledEventsProfile_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduledEventsProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduledEventsProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["TerminateNotificationProfile"] = gen.PtrOf(TerminateNotificationProfile_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_StatusARM, VirtualMachineScaleSetExtensionProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfile_StatusARM(subject VirtualMachineScaleSetExtensionProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProfile_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetExtensionProfile_StatusARMGenerator()
var virtualMachineScaleSetExtensionProfile_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfile_StatusARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionProfile_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfile_statusARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_StatusARM(generators)
	virtualMachineScaleSetExtensionProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_StatusARM(generators)
	virtualMachineScaleSetExtensionProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_StatusARM{}), generators)

	return virtualMachineScaleSetExtensionProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["Extensions"] = gen.SliceOf(VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_StatusARM, VirtualMachineScaleSetNetworkProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfile_StatusARM(subject VirtualMachineScaleSetNetworkProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkProfile_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetNetworkProfile_StatusARMGenerator()
var virtualMachineScaleSetNetworkProfile_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfile_StatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_StatusARM instances for property testing.
func VirtualMachineScaleSetNetworkProfile_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfile_statusARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_StatusARM(generators)
	virtualMachineScaleSetNetworkProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkProfile_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReference_StatusARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfiguration_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_StatusARM, VirtualMachineScaleSetOSProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfile_StatusARM(subject VirtualMachineScaleSetOSProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSProfile_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetOSProfile_StatusARMGenerator()
var virtualMachineScaleSetOSProfile_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfile_StatusARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfile_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfile_statusARMGenerator != nil {
		return virtualMachineScaleSetOSProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_StatusARM(generators)
	virtualMachineScaleSetOSProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_StatusARM(generators)
	virtualMachineScaleSetOSProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_StatusARM{}), generators)

	return virtualMachineScaleSetOSProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfiguration_StatusARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroup_StatusARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfiguration_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_StatusARM, VirtualMachineScaleSetStorageProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfile_StatusARM(subject VirtualMachineScaleSetStorageProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetStorageProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetStorageProfile_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetStorageProfile_StatusARMGenerator()
var virtualMachineScaleSetStorageProfile_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfile_StatusARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_StatusARM instances for property testing.
func VirtualMachineScaleSetStorageProfile_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfile_statusARMGenerator != nil {
		return virtualMachineScaleSetStorageProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_StatusARM(generators)
	virtualMachineScaleSetStorageProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_StatusARM{}), generators)

	return virtualMachineScaleSetStorageProfile_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDisk_StatusARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReference_StatusARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDisk_StatusARMGenerator())
}

func Test_ApiEntityReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReference_StatusARM, ApiEntityReference_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReference_StatusARM runs a test to see if a specific instance of ApiEntityReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReference_StatusARM(subject ApiEntityReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiEntityReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiEntityReference_StatusARM instances for property testing - lazily instantiated by
//ApiEntityReference_StatusARMGenerator()
var apiEntityReference_statusARMGenerator gopter.Gen

// ApiEntityReference_StatusARMGenerator returns a generator of ApiEntityReference_StatusARM instances for property testing.
func ApiEntityReference_StatusARMGenerator() gopter.Gen {
	if apiEntityReference_statusARMGenerator != nil {
		return apiEntityReference_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReference_StatusARM(generators)
	apiEntityReference_statusARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_StatusARM{}), generators)

	return apiEntityReference_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReference_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReference_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_TerminateNotificationProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TerminateNotificationProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTerminateNotificationProfile_StatusARM, TerminateNotificationProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTerminateNotificationProfile_StatusARM runs a test to see if a specific instance of TerminateNotificationProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTerminateNotificationProfile_StatusARM(subject TerminateNotificationProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TerminateNotificationProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TerminateNotificationProfile_StatusARM instances for property testing - lazily instantiated by
//TerminateNotificationProfile_StatusARMGenerator()
var terminateNotificationProfile_statusARMGenerator gopter.Gen

// TerminateNotificationProfile_StatusARMGenerator returns a generator of TerminateNotificationProfile_StatusARM instances for property testing.
func TerminateNotificationProfile_StatusARMGenerator() gopter.Gen {
	if terminateNotificationProfile_statusARMGenerator != nil {
		return terminateNotificationProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTerminateNotificationProfile_StatusARM(generators)
	terminateNotificationProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(TerminateNotificationProfile_StatusARM{}), generators)

	return terminateNotificationProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForTerminateNotificationProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTerminateNotificationProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["NotBeforeTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetDataDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_StatusARM, VirtualMachineScaleSetDataDisk_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDisk_StatusARM(subject VirtualMachineScaleSetDataDisk_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetDataDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetDataDisk_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetDataDisk_StatusARMGenerator()
var virtualMachineScaleSetDataDisk_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDisk_StatusARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDisk_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDisk_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDisk_statusARMGenerator != nil {
		return virtualMachineScaleSetDataDisk_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_StatusARM(generators)
	virtualMachineScaleSetDataDisk_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_StatusARM(generators)
	virtualMachineScaleSetDataDisk_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_StatusARM{}), generators)

	return virtualMachineScaleSetDataDisk_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDisk_StatusARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.AlphaString())
	gens["CreateOption"] = gen.AlphaString()
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.Int()
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDisk_StatusARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM, VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM runs a test to see if a specific instance of VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM(subject VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARMGenerator()
var virtualMachineScaleSetExtension_status_subResourceEmbeddedARMGenerator gopter.Gen

// VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARMGenerator returns a generator of VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM instances for property testing.
func VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtension_status_subResourceEmbeddedARMGenerator != nil {
		return virtualMachineScaleSetExtension_status_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM(generators)
	virtualMachineScaleSetExtension_status_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM{}), generators)

	return virtualMachineScaleSetExtension_status_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtension_Status_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_StatusARM, VirtualMachineScaleSetNetworkConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfiguration_StatusARM(subject VirtualMachineScaleSetNetworkConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfiguration_StatusARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetNetworkConfiguration_StatusARMGenerator()
var virtualMachineScaleSetNetworkConfiguration_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfiguration_StatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfiguration_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfiguration_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfiguration_statusARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_StatusARM(generators)
	virtualMachineScaleSetNetworkConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_StatusARM(generators)
	virtualMachineScaleSetNetworkConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkConfiguration_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationProperties_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_StatusARM, VirtualMachineScaleSetOSDisk_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDisk_StatusARM(subject VirtualMachineScaleSetOSDisk_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSDisk_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetOSDisk_StatusARMGenerator()
var virtualMachineScaleSetOSDisk_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDisk_StatusARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDisk_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDisk_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDisk_statusARMGenerator != nil {
		return virtualMachineScaleSetOSDisk_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_StatusARM(generators)
	virtualMachineScaleSetOSDisk_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_StatusARM(generators)
	virtualMachineScaleSetOSDisk_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_StatusARM{}), generators)

	return virtualMachineScaleSetOSDisk_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDisk_StatusARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.AlphaString())
	gens["CreateOption"] = gen.AlphaString()
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.AlphaString())
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDisk_StatusARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettings_StatusARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDisk_StatusARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParameters_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_StatusARM, VirtualMachineScaleSetManagedDiskParameters_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParameters_StatusARM(subject VirtualMachineScaleSetManagedDiskParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetManagedDiskParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetManagedDiskParameters_StatusARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetManagedDiskParameters_StatusARMGenerator()
var virtualMachineScaleSetManagedDiskParameters_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParameters_StatusARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParameters_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParameters_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParameters_statusARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParameters_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_StatusARM(generators)
	virtualMachineScaleSetManagedDiskParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_StatusARM(generators)
	virtualMachineScaleSetManagedDiskParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_StatusARM{}), generators)

	return virtualMachineScaleSetManagedDiskParameters_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResource_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM, VirtualMachineScaleSetNetworkConfigurationProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetNetworkConfigurationProperties_StatusARMGenerator()
var virtualMachineScaleSetNetworkConfigurationProperties_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationProperties_StatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationProperties_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationProperties_statusARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfiguration_StatusARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResource_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetIPConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_StatusARM, VirtualMachineScaleSetIPConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfiguration_StatusARM(subject VirtualMachineScaleSetIPConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfiguration_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIPConfiguration_StatusARMGenerator()
var virtualMachineScaleSetIPConfiguration_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfiguration_StatusARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfiguration_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfiguration_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfiguration_statusARMGenerator != nil {
		return virtualMachineScaleSetIPConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_StatusARM(generators)
	virtualMachineScaleSetIPConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_StatusARM(generators)
	virtualMachineScaleSetIPConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_StatusARM{}), generators)

	return virtualMachineScaleSetIPConfiguration_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationProperties_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM, VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettings_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettings_statusARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_StatusARM, VirtualMachineScaleSetIPConfigurationProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationProperties_StatusARM(subject VirtualMachineScaleSetIPConfigurationProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfigurationProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfigurationProperties_StatusARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetIPConfigurationProperties_StatusARMGenerator()
var virtualMachineScaleSetIPConfigurationProperties_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationProperties_StatusARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationProperties_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationProperties_statusARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_StatusARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_StatusARM(generators)
	virtualMachineScaleSetIPConfigurationProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_StatusARM{}), generators)

	return virtualMachineScaleSetIPConfigurationProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResource_StatusARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResource_StatusARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResource_StatusARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResource_StatusARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReference_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM, VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM instances for property testing - lazily
//instantiated by VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfiguration_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfiguration_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfiguration_statusARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfiguration_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM, VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM instances for property testing -
//lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationProperties_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationProperties_statusARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTag_StatusARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_StatusARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTag_StatusARM, VirtualMachineScaleSetIpTag_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTag_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTag_StatusARM(subject VirtualMachineScaleSetIpTag_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIpTag_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIpTag_StatusARM instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIpTag_StatusARMGenerator()
var virtualMachineScaleSetIpTag_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTag_StatusARMGenerator returns a generator of VirtualMachineScaleSetIpTag_StatusARM instances for property testing.
func VirtualMachineScaleSetIpTag_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTag_statusARMGenerator != nil {
		return virtualMachineScaleSetIpTag_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_StatusARM(generators)
	virtualMachineScaleSetIpTag_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_StatusARM{}), generators)

	return virtualMachineScaleSetIpTag_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTag_StatusARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM instances for property testing -
//lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_statusARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_statusARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.AlphaString()
}
