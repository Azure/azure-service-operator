// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSet_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSet_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetSTATUSARM, VirtualMachineScaleSetSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSet_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetSTATUSARM(subject VirtualMachineScaleSet_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSet_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSet_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetSTATUSARMGenerator()
var virtualMachineScaleSetSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetSTATUSARMGenerator returns a generator of VirtualMachineScaleSet_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetSTATUSARMGenerator != nil {
		return virtualMachineScaleSetSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetSTATUSARM(generators)
	virtualMachineScaleSetSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetSTATUSARM(generators)
	virtualMachineScaleSetSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_STATUSARM{}), generators)

	return virtualMachineScaleSetSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetSTATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentitySTATUSARMGenerator())
	gens["Plan"] = gen.PtrOf(PlanSTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPropertiesSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuSTATUSARMGenerator())
}

func Test_Plan_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlanSTATUSARM, PlanSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlanSTATUSARM runs a test to see if a specific instance of Plan_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlanSTATUSARM(subject Plan_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_STATUSARM instances for property testing - lazily instantiated by PlanSTATUSARMGenerator()
var planSTATUSARMGenerator gopter.Gen

// PlanSTATUSARMGenerator returns a generator of Plan_STATUSARM instances for property testing.
func PlanSTATUSARMGenerator() gopter.Gen {
	if planSTATUSARMGenerator != nil {
		return planSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlanSTATUSARM(generators)
	planSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Plan_STATUSARM{}), generators)

	return planSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPlanSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlanSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuSTATUSARM, SkuSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuSTATUSARM runs a test to see if a specific instance of Sku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuSTATUSARM(subject Sku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUSARM instances for property testing - lazily instantiated by SkuSTATUSARMGenerator()
var skuSTATUSARMGenerator gopter.Gen

// SkuSTATUSARMGenerator returns a generator of Sku_STATUSARM instances for property testing.
func SkuSTATUSARMGenerator() gopter.Gen {
	if skuSTATUSARMGenerator != nil {
		return skuSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuSTATUSARM(generators)
	skuSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUSARM{}), generators)

	return skuSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuSTATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentitySTATUSARM, VirtualMachineScaleSetIdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentitySTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentitySTATUSARM(subject VirtualMachineScaleSetIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIdentity_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIdentitySTATUSARMGenerator()
var virtualMachineScaleSetIdentitySTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentitySTATUSARMGenerator returns a generator of VirtualMachineScaleSetIdentity_STATUSARM instances for property testing.
func VirtualMachineScaleSetIdentitySTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentitySTATUSARMGenerator != nil {
		return virtualMachineScaleSetIdentitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentitySTATUSARM(generators)
	virtualMachineScaleSetIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_STATUSARM{}), generators)

	return virtualMachineScaleSetIdentitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachineScaleSetIdentitySTATUSType_None,
		VirtualMachineScaleSetIdentitySTATUSType_SystemAssigned,
		VirtualMachineScaleSetIdentitySTATUSType_SystemAssignedUserAssigned,
		VirtualMachineScaleSetIdentitySTATUSType_UserAssigned))
}

func Test_VirtualMachineScaleSetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPropertiesSTATUSARM, VirtualMachineScaleSetPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPropertiesSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPropertiesSTATUSARM(subject VirtualMachineScaleSetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetProperties_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetPropertiesSTATUSARMGenerator()
var virtualMachineScaleSetPropertiesSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetPropertiesSTATUSARMGenerator returns a generator of VirtualMachineScaleSetProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPropertiesSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPropertiesSTATUSARMGenerator != nil {
		return virtualMachineScaleSetPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSTATUSARM(generators)
	virtualMachineScaleSetPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesSTATUSARM(generators)
	virtualMachineScaleSetPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.OneConstOf(OrchestrationMode_STATUS_Flexible, OrchestrationMode_STATUS_Uniform))
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["TimeCreated"] = gen.PtrOf(gen.AlphaString())
	gens["UniqueId"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilitiesSTATUSARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicySTATUSARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicySTATUSARMGenerator())
	gens["SpotRestorePolicy"] = gen.PtrOf(SpotRestorePolicySTATUSARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicySTATUSARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfileSTATUSARMGenerator())
}

func Test_AdditionalCapabilities_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilitiesSTATUSARM, AdditionalCapabilitiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilitiesSTATUSARM runs a test to see if a specific instance of AdditionalCapabilities_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilitiesSTATUSARM(subject AdditionalCapabilities_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalCapabilities_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalCapabilities_STATUSARM instances for property testing - lazily instantiated by
// AdditionalCapabilitiesSTATUSARMGenerator()
var additionalCapabilitiesSTATUSARMGenerator gopter.Gen

// AdditionalCapabilitiesSTATUSARMGenerator returns a generator of AdditionalCapabilities_STATUSARM instances for property testing.
func AdditionalCapabilitiesSTATUSARMGenerator() gopter.Gen {
	if additionalCapabilitiesSTATUSARMGenerator != nil {
		return additionalCapabilitiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilitiesSTATUSARM(generators)
	additionalCapabilitiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_STATUSARM{}), generators)

	return additionalCapabilitiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilitiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilitiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["HibernationEnabled"] = gen.PtrOf(gen.Bool())
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicySTATUSARM, AutomaticRepairsPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicySTATUSARM runs a test to see if a specific instance of AutomaticRepairsPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicySTATUSARM(subject AutomaticRepairsPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticRepairsPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticRepairsPolicy_STATUSARM instances for property testing - lazily instantiated by
// AutomaticRepairsPolicySTATUSARMGenerator()
var automaticRepairsPolicySTATUSARMGenerator gopter.Gen

// AutomaticRepairsPolicySTATUSARMGenerator returns a generator of AutomaticRepairsPolicy_STATUSARM instances for property testing.
func AutomaticRepairsPolicySTATUSARMGenerator() gopter.Gen {
	if automaticRepairsPolicySTATUSARMGenerator != nil {
		return automaticRepairsPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicySTATUSARM(generators)
	automaticRepairsPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_STATUSARM{}), generators)

	return automaticRepairsPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
	gens["RepairAction"] = gen.PtrOf(gen.OneConstOf(AutomaticRepairsPolicySTATUSRepairAction_Reimage, AutomaticRepairsPolicySTATUSRepairAction_Replace, AutomaticRepairsPolicySTATUSRepairAction_Restart))
}

func Test_ScaleInPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicySTATUSARM, ScaleInPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicySTATUSARM runs a test to see if a specific instance of ScaleInPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicySTATUSARM(subject ScaleInPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleInPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleInPolicy_STATUSARM instances for property testing - lazily instantiated by
// ScaleInPolicySTATUSARMGenerator()
var scaleInPolicySTATUSARMGenerator gopter.Gen

// ScaleInPolicySTATUSARMGenerator returns a generator of ScaleInPolicy_STATUSARM instances for property testing.
func ScaleInPolicySTATUSARMGenerator() gopter.Gen {
	if scaleInPolicySTATUSARMGenerator != nil {
		return scaleInPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicySTATUSARM(generators)
	scaleInPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_STATUSARM{}), generators)

	return scaleInPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["ForceDeletion"] = gen.PtrOf(gen.Bool())
	gens["Rules"] = gen.SliceOf(gen.OneConstOf(ScaleInPolicySTATUSRules_Default, ScaleInPolicySTATUSRules_NewestVM, ScaleInPolicySTATUSRules_OldestVM))
}

func Test_SpotRestorePolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SpotRestorePolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSpotRestorePolicySTATUSARM, SpotRestorePolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSpotRestorePolicySTATUSARM runs a test to see if a specific instance of SpotRestorePolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSpotRestorePolicySTATUSARM(subject SpotRestorePolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SpotRestorePolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SpotRestorePolicy_STATUSARM instances for property testing - lazily instantiated by
// SpotRestorePolicySTATUSARMGenerator()
var spotRestorePolicySTATUSARMGenerator gopter.Gen

// SpotRestorePolicySTATUSARMGenerator returns a generator of SpotRestorePolicy_STATUSARM instances for property testing.
func SpotRestorePolicySTATUSARMGenerator() gopter.Gen {
	if spotRestorePolicySTATUSARMGenerator != nil {
		return spotRestorePolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSpotRestorePolicySTATUSARM(generators)
	spotRestorePolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(SpotRestorePolicy_STATUSARM{}), generators)

	return spotRestorePolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSpotRestorePolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSpotRestorePolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RestoreTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicySTATUSARM, UpgradePolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicySTATUSARM runs a test to see if a specific instance of UpgradePolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicySTATUSARM(subject UpgradePolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpgradePolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpgradePolicy_STATUSARM instances for property testing - lazily instantiated by
// UpgradePolicySTATUSARMGenerator()
var upgradePolicySTATUSARMGenerator gopter.Gen

// UpgradePolicySTATUSARMGenerator returns a generator of UpgradePolicy_STATUSARM instances for property testing.
// We first initialize upgradePolicySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicySTATUSARMGenerator() gopter.Gen {
	if upgradePolicySTATUSARMGenerator != nil {
		return upgradePolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicySTATUSARM(generators)
	upgradePolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicySTATUSARM(generators)
	upgradePolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_STATUSARM{}), generators)

	return upgradePolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(UpgradePolicySTATUSMode_Automatic, UpgradePolicySTATUSMode_Manual, UpgradePolicySTATUSMode_Rolling))
}

// AddRelatedPropertyGeneratorsForUpgradePolicySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicySTATUSARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicySTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetVMProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfileSTATUSARM, VirtualMachineScaleSetVMProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfileSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfileSTATUSARM(subject VirtualMachineScaleSetVMProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetVMProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetVMProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetVMProfileSTATUSARMGenerator()
var virtualMachineScaleSetVMProfileSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfileSTATUSARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfileSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfileSTATUSARMGenerator != nil {
		return virtualMachineScaleSetVMProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSTATUSARM(generators)
	virtualMachineScaleSetVMProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileSTATUSARM(generators)
	virtualMachineScaleSetVMProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetVMProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_STATUS_Deallocate, EvictionPolicy_STATUS_Delete))
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_STATUS_Low, Priority_STATUS_Regular, Priority_STATUS_Spot))
	gens["UserData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["ApplicationProfile"] = gen.PtrOf(ApplicationProfileSTATUSARMGenerator())
	gens["BillingProfile"] = gen.PtrOf(BillingProfileSTATUSARMGenerator())
	gens["CapacityReservation"] = gen.PtrOf(CapacityReservationProfileSTATUSARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfileSTATUSARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfileSTATUSARMGenerator())
	gens["HardwareProfile"] = gen.PtrOf(VirtualMachineScaleSetHardwareProfileSTATUSARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfileSTATUSARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfileSTATUSARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfileSTATUSARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfileSTATUSARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfileSTATUSARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicySTATUSARM, AutomaticOSUpgradePolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicySTATUSARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicySTATUSARM(subject AutomaticOSUpgradePolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutomaticOSUpgradePolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutomaticOSUpgradePolicy_STATUSARM instances for property testing - lazily instantiated by
// AutomaticOSUpgradePolicySTATUSARMGenerator()
var automaticOSUpgradePolicySTATUSARMGenerator gopter.Gen

// AutomaticOSUpgradePolicySTATUSARMGenerator returns a generator of AutomaticOSUpgradePolicy_STATUSARM instances for property testing.
func AutomaticOSUpgradePolicySTATUSARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicySTATUSARMGenerator != nil {
		return automaticOSUpgradePolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicySTATUSARM(generators)
	automaticOSUpgradePolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_STATUSARM{}), generators)

	return automaticOSUpgradePolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
	gens["UseRollingUpgradePolicy"] = gen.PtrOf(gen.Bool())
}

func Test_RollingUpgradePolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicySTATUSARM, RollingUpgradePolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicySTATUSARM runs a test to see if a specific instance of RollingUpgradePolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicySTATUSARM(subject RollingUpgradePolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RollingUpgradePolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RollingUpgradePolicy_STATUSARM instances for property testing - lazily instantiated by
// RollingUpgradePolicySTATUSARMGenerator()
var rollingUpgradePolicySTATUSARMGenerator gopter.Gen

// RollingUpgradePolicySTATUSARMGenerator returns a generator of RollingUpgradePolicy_STATUSARM instances for property testing.
func RollingUpgradePolicySTATUSARMGenerator() gopter.Gen {
	if rollingUpgradePolicySTATUSARMGenerator != nil {
		return rollingUpgradePolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicySTATUSARM(generators)
	rollingUpgradePolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_STATUSARM{}), generators)

	return rollingUpgradePolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_VirtualMachineScaleSetExtensionProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileSTATUSARM, VirtualMachineScaleSetExtensionProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileSTATUSARM(subject VirtualMachineScaleSetExtensionProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtensionProfileSTATUSARMGenerator()
var virtualMachineScaleSetExtensionProfileSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfileSTATUSARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionProfileSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfileSTATUSARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSTATUSARM(generators)
	virtualMachineScaleSetExtensionProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSTATUSARM(generators)
	virtualMachineScaleSetExtensionProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetExtensionProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["Extensions"] = gen.SliceOf(VirtualMachineScaleSetExtensionSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetHardwareProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetHardwareProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetHardwareProfileSTATUSARM, VirtualMachineScaleSetHardwareProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetHardwareProfileSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetHardwareProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetHardwareProfileSTATUSARM(subject VirtualMachineScaleSetHardwareProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetHardwareProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetHardwareProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetHardwareProfileSTATUSARMGenerator()
var virtualMachineScaleSetHardwareProfileSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetHardwareProfileSTATUSARMGenerator returns a generator of VirtualMachineScaleSetHardwareProfile_STATUSARM instances for property testing.
func VirtualMachineScaleSetHardwareProfileSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetHardwareProfileSTATUSARMGenerator != nil {
		return virtualMachineScaleSetHardwareProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetHardwareProfileSTATUSARM(generators)
	virtualMachineScaleSetHardwareProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetHardwareProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetHardwareProfileSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetHardwareProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetHardwareProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["VmSizeProperties"] = gen.PtrOf(VMSizePropertiesSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileSTATUSARM, VirtualMachineScaleSetNetworkProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileSTATUSARM(subject VirtualMachineScaleSetNetworkProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetNetworkProfileSTATUSARMGenerator()
var virtualMachineScaleSetNetworkProfileSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfileSTATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkProfileSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfileSTATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSTATUSARM(generators)
	virtualMachineScaleSetNetworkProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSTATUSARM(generators)
	virtualMachineScaleSetNetworkProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["NetworkApiVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetNetworkProfileSTATUSNetworkApiVersion_20201101))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReferenceSTATUSARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfileSTATUSARM, VirtualMachineScaleSetOSProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfileSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfileSTATUSARM(subject VirtualMachineScaleSetOSProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSProfileSTATUSARMGenerator()
var virtualMachineScaleSetOSProfileSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfileSTATUSARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfileSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfileSTATUSARMGenerator != nil {
		return virtualMachineScaleSetOSProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSTATUSARM(generators)
	virtualMachineScaleSetOSProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileSTATUSARM(generators)
	virtualMachineScaleSetOSProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetOSProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["AllowExtensionOperations"] = gen.PtrOf(gen.Bool())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfigurationSTATUSARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroupSTATUSARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfigurationSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileSTATUSARM, VirtualMachineScaleSetStorageProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileSTATUSARM(subject VirtualMachineScaleSetStorageProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetStorageProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetStorageProfile_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetStorageProfileSTATUSARMGenerator()
var virtualMachineScaleSetStorageProfileSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfileSTATUSARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_STATUSARM instances for property testing.
func VirtualMachineScaleSetStorageProfileSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfileSTATUSARMGenerator != nil {
		return virtualMachineScaleSetStorageProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileSTATUSARM(generators)
	virtualMachineScaleSetStorageProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_STATUSARM{}), generators)

	return virtualMachineScaleSetStorageProfileSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDiskSTATUSARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReferenceSTATUSARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDiskSTATUSARMGenerator())
}

func Test_ApiEntityReference_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReferenceSTATUSARM, ApiEntityReferenceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReferenceSTATUSARM runs a test to see if a specific instance of ApiEntityReference_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReferenceSTATUSARM(subject ApiEntityReference_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiEntityReference_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiEntityReference_STATUSARM instances for property testing - lazily instantiated by
// ApiEntityReferenceSTATUSARMGenerator()
var apiEntityReferenceSTATUSARMGenerator gopter.Gen

// ApiEntityReferenceSTATUSARMGenerator returns a generator of ApiEntityReference_STATUSARM instances for property testing.
func ApiEntityReferenceSTATUSARMGenerator() gopter.Gen {
	if apiEntityReferenceSTATUSARMGenerator != nil {
		return apiEntityReferenceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReferenceSTATUSARM(generators)
	apiEntityReferenceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_STATUSARM{}), generators)

	return apiEntityReferenceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReferenceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReferenceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetDataDisk_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDiskSTATUSARM, VirtualMachineScaleSetDataDiskSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDiskSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDiskSTATUSARM(subject VirtualMachineScaleSetDataDisk_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetDataDisk_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetDataDisk_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetDataDiskSTATUSARMGenerator()
var virtualMachineScaleSetDataDiskSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDiskSTATUSARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDiskSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDiskSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDiskSTATUSARMGenerator != nil {
		return virtualMachineScaleSetDataDiskSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSTATUSARM(generators)
	virtualMachineScaleSetDataDiskSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskSTATUSARM(generators)
	virtualMachineScaleSetDataDiskSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_STATUSARM{}), generators)

	return virtualMachineScaleSetDataDiskSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskSTATUSARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_STATUS_None, Caching_STATUS_ReadOnly, Caching_STATUS_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_STATUS_Attach, CreateOption_STATUS_Empty, CreateOption_STATUS_FromImage))
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(DeleteOption_STATUS_Delete, DeleteOption_STATUS_Detach))
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskSTATUSARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetExtension_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtension_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionSTATUSARM, VirtualMachineScaleSetExtensionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetExtension_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionSTATUSARM(subject VirtualMachineScaleSetExtension_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtension_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtension_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetExtensionSTATUSARMGenerator()
var virtualMachineScaleSetExtensionSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionSTATUSARMGenerator returns a generator of VirtualMachineScaleSetExtension_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionSTATUSARMGenerator != nil {
		return virtualMachineScaleSetExtensionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionSTATUSARM(generators)
	virtualMachineScaleSetExtensionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionSTATUSARM(generators)
	virtualMachineScaleSetExtensionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_STATUSARM{}), generators)

	return virtualMachineScaleSetExtensionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationSTATUSARM, VirtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationSTATUSARM(subject VirtualMachineScaleSetNetworkConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfiguration_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator()
var virtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSTATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSTATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDiskSTATUSARM, VirtualMachineScaleSetOSDiskSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDiskSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDiskSTATUSARM(subject VirtualMachineScaleSetOSDisk_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetOSDisk_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetOSDisk_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetOSDiskSTATUSARMGenerator()
var virtualMachineScaleSetOSDiskSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDiskSTATUSARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDiskSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDiskSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDiskSTATUSARMGenerator != nil {
		return virtualMachineScaleSetOSDiskSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSTATUSARM(generators)
	virtualMachineScaleSetOSDiskSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskSTATUSARM(generators)
	virtualMachineScaleSetOSDiskSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_STATUSARM{}), generators)

	return virtualMachineScaleSetOSDiskSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskSTATUSARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_STATUS_None, Caching_STATUS_ReadOnly, Caching_STATUS_ReadWrite))
	gens["CreateOption"] = gen.PtrOf(gen.OneConstOf(CreateOption_STATUS_Attach, CreateOption_STATUS_Empty, CreateOption_STATUS_FromImage))
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(DeleteOption_STATUS_Delete, DeleteOption_STATUS_Detach))
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetOSDiskSTATUSOsType_Linux, VirtualMachineScaleSetOSDiskSTATUSOsType_Windows))
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskSTATUSARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettingsSTATUSARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDiskSTATUSARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionPropertiesSTATUSARM, VirtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionPropertiesSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionPropertiesSTATUSARM(subject VirtualMachineScaleSetExtensionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetExtensionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetExtensionProperties_STATUSARM instances for property testing - lazily instantiated
// by VirtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator()
var virtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator returns a generator of VirtualMachineScaleSetExtensionProperties_STATUSARM instances for property testing.
func VirtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator != nil {
		return virtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionPropertiesSTATUSARM(generators)
	virtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetExtensionPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradeMinorVersion"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticUpgrade"] = gen.PtrOf(gen.Bool())
	gens["ForceUpdateTag"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisionAfterExtensions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["SuppressFailures"] = gen.PtrOf(gen.Bool())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersSTATUSARM, VirtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersSTATUSARM(subject VirtualMachineScaleSetManagedDiskParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetManagedDiskParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetManagedDiskParameters_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator()
var virtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSTATUSARM(generators)
	virtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSTATUSARM(generators)
	virtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_STATUSARM{}), generators)

	return virtualMachineScaleSetManagedDiskParametersSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSTATUSARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_STATUS_PremiumLRS,
		StorageAccountType_STATUS_PremiumV2LRS,
		StorageAccountType_STATUS_PremiumZRS,
		StorageAccountType_STATUS_StandardLRS,
		StorageAccountType_STATUS_StandardSSDLRS,
		StorageAccountType_STATUS_StandardSSDZRS,
		StorageAccountType_STATUS_UltraSSDLRS))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersSTATUSARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(VMDiskSecurityProfileSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM, VirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator()
var virtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSDeleteOption_Delete, VirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSDeleteOption_Detach))
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfigurationSTATUSARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetIPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationSTATUSARM, VirtualMachineScaleSetIPConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationSTATUSARM(subject VirtualMachineScaleSetIPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIPConfigurationSTATUSARMGenerator()
var virtualMachineScaleSetIPConfigurationSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationSTATUSARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationSTATUSARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSTATUSARM(generators)
	virtualMachineScaleSetIPConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSTATUSARM(generators)
	virtualMachineScaleSetIPConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_STATUSARM{}), generators)

	return virtualMachineScaleSetIPConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARM, VirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_STATUSARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM, VirtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM(subject VirtualMachineScaleSetIPConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIPConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator()
var virtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM(generators)
	virtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM(generators)
	virtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetIPConfigurationPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIPConfigurationPropertiesSTATUSPrivateIPAddressVersion_IPv4, VirtualMachineScaleSetIPConfigurationPropertiesSTATUSPrivateIPAddressVersion_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResourceSTATUSARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResourceSTATUSARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResourceSTATUSARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResourceSTATUSARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReferenceSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM, VirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM instances for property testing - lazily
// instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_STATUSARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM, VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM instances for property testing -
// lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_STATUSARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["DeleteOption"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSDeleteOption_Delete, VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSDeleteOption_Detach))
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSPublicIPAddressVersion_IPv4, VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSPublicIPAddressVersion_IPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTagSTATUSARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTagSTATUSARM, VirtualMachineScaleSetIpTagSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTagSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTagSTATUSARM(subject VirtualMachineScaleSetIpTag_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetIpTag_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetIpTag_STATUSARM instances for property testing - lazily instantiated by
// VirtualMachineScaleSetIpTagSTATUSARMGenerator()
var virtualMachineScaleSetIpTagSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTagSTATUSARMGenerator returns a generator of VirtualMachineScaleSetIpTag_STATUSARM instances for property testing.
func VirtualMachineScaleSetIpTagSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTagSTATUSARMGenerator != nil {
		return virtualMachineScaleSetIpTagSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagSTATUSARM(generators)
	virtualMachineScaleSetIpTagSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_STATUSARM{}), generators)

	return virtualMachineScaleSetIpTagSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagSTATUSARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM instances for property testing -
// lazily instantiated by VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_STATUSARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
}
