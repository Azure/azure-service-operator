// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Image_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Image_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImage_STATUSARM, Image_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImage_STATUSARM runs a test to see if a specific instance of Image_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImage_STATUSARM(subject Image_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Image_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Image_STATUSARM instances for property testing - lazily instantiated by Image_STATUSARMGenerator()
var image_STATUSARMGenerator gopter.Gen

// Image_STATUSARMGenerator returns a generator of Image_STATUSARM instances for property testing.
// We first initialize image_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Image_STATUSARMGenerator() gopter.Gen {
	if image_STATUSARMGenerator != nil {
		return image_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImage_STATUSARM(generators)
	image_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Image_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImage_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForImage_STATUSARM(generators)
	image_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Image_STATUSARM{}), generators)

	return image_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForImage_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImage_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForImage_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImage_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(ImageProperties_STATUSARMGenerator())
}

func Test_ExtendedLocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUSARM, ExtendedLocation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUSARM runs a test to see if a specific instance of ExtendedLocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUSARM(subject ExtendedLocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUSARM instances for property testing - lazily instantiated by
// ExtendedLocation_STATUSARMGenerator()
var extendedLocation_STATUSARMGenerator gopter.Gen

// ExtendedLocation_STATUSARMGenerator returns a generator of ExtendedLocation_STATUSARM instances for property testing.
func ExtendedLocation_STATUSARMGenerator() gopter.Gen {
	if extendedLocation_STATUSARMGenerator != nil {
		return extendedLocation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(generators)
	extendedLocation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUSARM{}), generators)

	return extendedLocation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_STATUS_EdgeZone))
}

func Test_ImageProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageProperties_STATUSARM, ImageProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageProperties_STATUSARM runs a test to see if a specific instance of ImageProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageProperties_STATUSARM(subject ImageProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageProperties_STATUSARM instances for property testing - lazily instantiated by
// ImageProperties_STATUSARMGenerator()
var imageProperties_STATUSARMGenerator gopter.Gen

// ImageProperties_STATUSARMGenerator returns a generator of ImageProperties_STATUSARM instances for property testing.
// We first initialize imageProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ImageProperties_STATUSARMGenerator() gopter.Gen {
	if imageProperties_STATUSARMGenerator != nil {
		return imageProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageProperties_STATUSARM(generators)
	imageProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForImageProperties_STATUSARM(generators)
	imageProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageProperties_STATUSARM{}), generators)

	return imageProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForImageProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["HyperVGeneration"] = gen.PtrOf(gen.OneConstOf(HyperVGenerationType_STATUS_V1, HyperVGenerationType_STATUS_V2))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForImageProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImageProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["SourceVirtualMachine"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(ImageStorageProfile_STATUSARMGenerator())
}

func Test_ImageStorageProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageStorageProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageStorageProfile_STATUSARM, ImageStorageProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageStorageProfile_STATUSARM runs a test to see if a specific instance of ImageStorageProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageStorageProfile_STATUSARM(subject ImageStorageProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageStorageProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageStorageProfile_STATUSARM instances for property testing - lazily instantiated by
// ImageStorageProfile_STATUSARMGenerator()
var imageStorageProfile_STATUSARMGenerator gopter.Gen

// ImageStorageProfile_STATUSARMGenerator returns a generator of ImageStorageProfile_STATUSARM instances for property testing.
// We first initialize imageStorageProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ImageStorageProfile_STATUSARMGenerator() gopter.Gen {
	if imageStorageProfile_STATUSARMGenerator != nil {
		return imageStorageProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageStorageProfile_STATUSARM(generators)
	imageStorageProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageStorageProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageStorageProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForImageStorageProfile_STATUSARM(generators)
	imageStorageProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageStorageProfile_STATUSARM{}), generators)

	return imageStorageProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForImageStorageProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageStorageProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["ZoneResilient"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForImageStorageProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImageStorageProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(ImageDataDisk_STATUSARMGenerator())
	gens["OsDisk"] = gen.PtrOf(ImageOSDisk_STATUSARMGenerator())
}

func Test_SubResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_STATUSARM, SubResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_STATUSARM runs a test to see if a specific instance of SubResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_STATUSARM(subject SubResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_STATUSARM instances for property testing - lazily instantiated by
// SubResource_STATUSARMGenerator()
var subResource_STATUSARMGenerator gopter.Gen

// SubResource_STATUSARMGenerator returns a generator of SubResource_STATUSARM instances for property testing.
func SubResource_STATUSARMGenerator() gopter.Gen {
	if subResource_STATUSARMGenerator != nil {
		return subResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_STATUSARM(generators)
	subResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SubResource_STATUSARM{}), generators)

	return subResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ImageDataDisk_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageDataDisk_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageDataDisk_STATUSARM, ImageDataDisk_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageDataDisk_STATUSARM runs a test to see if a specific instance of ImageDataDisk_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageDataDisk_STATUSARM(subject ImageDataDisk_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageDataDisk_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageDataDisk_STATUSARM instances for property testing - lazily instantiated by
// ImageDataDisk_STATUSARMGenerator()
var imageDataDisk_STATUSARMGenerator gopter.Gen

// ImageDataDisk_STATUSARMGenerator returns a generator of ImageDataDisk_STATUSARM instances for property testing.
// We first initialize imageDataDisk_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ImageDataDisk_STATUSARMGenerator() gopter.Gen {
	if imageDataDisk_STATUSARMGenerator != nil {
		return imageDataDisk_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageDataDisk_STATUSARM(generators)
	imageDataDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageDataDisk_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageDataDisk_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForImageDataDisk_STATUSARM(generators)
	imageDataDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageDataDisk_STATUSARM{}), generators)

	return imageDataDisk_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForImageDataDisk_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageDataDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["BlobUri"] = gen.PtrOf(gen.AlphaString())
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(ImageDataDisk_STATUS_Caching_None, ImageDataDisk_STATUS_Caching_ReadOnly, ImageDataDisk_STATUS_Caching_ReadWrite))
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.PtrOf(gen.Int())
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_STATUS_Premium_LRS,
		StorageAccountType_STATUS_Premium_ZRS,
		StorageAccountType_STATUS_StandardSSD_LRS,
		StorageAccountType_STATUS_StandardSSD_ZRS,
		StorageAccountType_STATUS_Standard_LRS,
		StorageAccountType_STATUS_UltraSSD_LRS))
}

// AddRelatedPropertyGeneratorsForImageDataDisk_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImageDataDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["Snapshot"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_ImageOSDisk_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageOSDisk_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageOSDisk_STATUSARM, ImageOSDisk_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageOSDisk_STATUSARM runs a test to see if a specific instance of ImageOSDisk_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageOSDisk_STATUSARM(subject ImageOSDisk_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageOSDisk_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageOSDisk_STATUSARM instances for property testing - lazily instantiated by
// ImageOSDisk_STATUSARMGenerator()
var imageOSDisk_STATUSARMGenerator gopter.Gen

// ImageOSDisk_STATUSARMGenerator returns a generator of ImageOSDisk_STATUSARM instances for property testing.
// We first initialize imageOSDisk_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ImageOSDisk_STATUSARMGenerator() gopter.Gen {
	if imageOSDisk_STATUSARMGenerator != nil {
		return imageOSDisk_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageOSDisk_STATUSARM(generators)
	imageOSDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageOSDisk_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageOSDisk_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForImageOSDisk_STATUSARM(generators)
	imageOSDisk_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageOSDisk_STATUSARM{}), generators)

	return imageOSDisk_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForImageOSDisk_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageOSDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["BlobUri"] = gen.PtrOf(gen.AlphaString())
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(ImageOSDisk_STATUS_Caching_None, ImageOSDisk_STATUS_Caching_ReadOnly, ImageOSDisk_STATUS_Caching_ReadWrite))
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsState"] = gen.PtrOf(gen.OneConstOf(ImageOSDisk_STATUS_OsState_Generalized, ImageOSDisk_STATUS_OsState_Specialized))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(ImageOSDisk_STATUS_OsType_Linux, ImageOSDisk_STATUS_OsType_Windows))
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(
		StorageAccountType_STATUS_Premium_LRS,
		StorageAccountType_STATUS_Premium_ZRS,
		StorageAccountType_STATUS_StandardSSD_LRS,
		StorageAccountType_STATUS_StandardSSD_ZRS,
		StorageAccountType_STATUS_Standard_LRS,
		StorageAccountType_STATUS_UltraSSD_LRS))
}

// AddRelatedPropertyGeneratorsForImageOSDisk_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForImageOSDisk_STATUSARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["Snapshot"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}
