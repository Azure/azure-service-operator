// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210701

import (
	"fmt"
	alpha20210701s "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20210701storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of Image. Use v1beta20210701.Image instead
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Images_Spec  `json:"spec,omitempty"`
	Status            Image_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Image{}

// GetConditions returns the conditions of the resource
func (image *Image) GetConditions() conditions.Conditions {
	return image.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (image *Image) SetConditions(conditions conditions.Conditions) {
	image.Status.Conditions = conditions
}

var _ conversion.Convertible = &Image{}

// ConvertFrom populates our Image from the provided hub Image
func (image *Image) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210701s.Image

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = image.AssignPropertiesFromImage(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to image")
	}

	return nil
}

// ConvertTo populates the provided hub Image from our Image
func (image *Image) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210701s.Image
	err := image.AssignPropertiesToImage(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from image")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-compute-azure-com-v1alpha1api20210701-image,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=images,verbs=create;update,versions=v1alpha1api20210701,name=default.v1alpha1api20210701.images.compute.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Image{}

// Default applies defaults to the Image resource
func (image *Image) Default() {
	image.defaultImpl()
	var temp interface{} = image
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (image *Image) defaultAzureName() {
	if image.Spec.AzureName == "" {
		image.Spec.AzureName = image.Name
	}
}

// defaultImpl applies the code generated defaults to the Image resource
func (image *Image) defaultImpl() { image.defaultAzureName() }

var _ genruntime.KubernetesResource = &Image{}

// AzureName returns the Azure name of the resource
func (image *Image) AzureName() string {
	return image.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-07-01"
func (image Image) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceScope returns the scope of the resource
func (image *Image) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (image *Image) GetSpec() genruntime.ConvertibleSpec {
	return &image.Spec
}

// GetStatus returns the status of this resource
func (image *Image) GetStatus() genruntime.ConvertibleStatus {
	return &image.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/images"
func (image *Image) GetType() string {
	return "Microsoft.Compute/images"
}

// NewEmptyStatus returns a new empty (blank) status
func (image *Image) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Image_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (image *Image) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(image.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  image.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (image *Image) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Image_Status); ok {
		image.Status = *st
		return nil
	}

	// Convert status to required version
	var st Image_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	image.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-compute-azure-com-v1alpha1api20210701-image,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=compute.azure.com,resources=images,verbs=create;update,versions=v1alpha1api20210701,name=validate.v1alpha1api20210701.images.compute.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Image{}

// ValidateCreate validates the creation of the resource
func (image *Image) ValidateCreate() error {
	validations := image.createValidations()
	var temp interface{} = image
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (image *Image) ValidateDelete() error {
	validations := image.deleteValidations()
	var temp interface{} = image
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (image *Image) ValidateUpdate(old runtime.Object) error {
	validations := image.updateValidations()
	var temp interface{} = image
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (image *Image) createValidations() []func() error {
	return []func() error{image.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (image *Image) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (image *Image) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return image.validateResourceReferences()
		},
		image.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (image *Image) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&image.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (image *Image) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Image)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, image)
}

// AssignPropertiesFromImage populates our Image from the provided source Image
func (image *Image) AssignPropertiesFromImage(source *alpha20210701s.Image) error {

	// ObjectMeta
	image.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Images_Spec
	err := spec.AssignPropertiesFromImagesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromImagesSpec() to populate field Spec")
	}
	image.Spec = spec

	// Status
	var status Image_Status
	err = status.AssignPropertiesFromImageStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromImageStatus() to populate field Status")
	}
	image.Status = status

	// No error
	return nil
}

// AssignPropertiesToImage populates the provided destination Image from our Image
func (image *Image) AssignPropertiesToImage(destination *alpha20210701s.Image) error {

	// ObjectMeta
	destination.ObjectMeta = *image.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210701s.Images_Spec
	err := image.Spec.AssignPropertiesToImagesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToImagesSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210701s.Image_Status
	err = image.Status.AssignPropertiesToImageStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToImageStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (image *Image) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: image.Spec.OriginalVersion(),
		Kind:    "Image",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of Image. Use v1beta20210701.Image instead
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Deprecated version of APIVersion. Use v1beta20210701.APIVersion instead
// +kubebuilder:validation:Enum={"2021-07-01"}
type APIVersion string

const APIVersionValue = APIVersion("2021-07-01")

// Deprecated version of Image_Status. Use v1beta20210701.Image_Status instead
type Image_Status struct {
	// Conditions: The observed state of the resource
	Conditions           []conditions.Condition       `json:"conditions,omitempty"`
	ExtendedLocation     *ExtendedLocation_Status     `json:"extendedLocation,omitempty"`
	HyperVGeneration     *HyperVGenerationType_Status `json:"hyperVGeneration,omitempty"`
	Id                   *string                      `json:"id,omitempty"`
	Location             *string                      `json:"location,omitempty"`
	Name                 *string                      `json:"name,omitempty"`
	ProvisioningState    *string                      `json:"provisioningState,omitempty"`
	SourceVirtualMachine *SubResource_Status          `json:"sourceVirtualMachine,omitempty"`
	StorageProfile       *ImageStorageProfile_Status  `json:"storageProfile,omitempty"`
	Tags                 map[string]string            `json:"tags,omitempty"`
	Type                 *string                      `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Image_Status{}

// ConvertStatusFrom populates our Image_Status from the provided source
func (image *Image_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210701s.Image_Status)
	if ok {
		// Populate our instance from source
		return image.AssignPropertiesFromImageStatus(src)
	}

	// Convert to an intermediate form
	src = &alpha20210701s.Image_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = image.AssignPropertiesFromImageStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Image_Status
func (image *Image_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210701s.Image_Status)
	if ok {
		// Populate destination from our instance
		return image.AssignPropertiesToImageStatus(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210701s.Image_Status{}
	err := image.AssignPropertiesToImageStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Image_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (image *Image_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Image_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (image *Image_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Image_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Image_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		image.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperVGeneration != nil {
			hyperVGeneration := *typedInput.Properties.HyperVGeneration
			image.HyperVGeneration = &hyperVGeneration
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		image.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		image.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		image.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			image.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘SourceVirtualMachine’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceVirtualMachine != nil {
			var sourceVirtualMachine1 SubResource_Status
			err := sourceVirtualMachine1.PopulateFromARM(owner, *typedInput.Properties.SourceVirtualMachine)
			if err != nil {
				return err
			}
			sourceVirtualMachine := sourceVirtualMachine1
			image.SourceVirtualMachine = &sourceVirtualMachine
		}
	}

	// Set property ‘StorageProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageProfile != nil {
			var storageProfile1 ImageStorageProfile_Status
			err := storageProfile1.PopulateFromARM(owner, *typedInput.Properties.StorageProfile)
			if err != nil {
				return err
			}
			storageProfile := storageProfile1
			image.StorageProfile = &storageProfile
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		image.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			image.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		image.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromImageStatus populates our Image_Status from the provided source Image_Status
func (image *Image_Status) AssignPropertiesFromImageStatus(source *alpha20210701s.Image_Status) error {

	// Conditions
	image.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationStatus() to populate field ExtendedLocation")
		}
		image.ExtendedLocation = &extendedLocation
	} else {
		image.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := HyperVGenerationType_Status(*source.HyperVGeneration)
		image.HyperVGeneration = &hyperVGeneration
	} else {
		image.HyperVGeneration = nil
	}

	// Id
	image.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	image.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	image.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	image.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// SourceVirtualMachine
	if source.SourceVirtualMachine != nil {
		var sourceVirtualMachine SubResource_Status
		err := sourceVirtualMachine.AssignPropertiesFromSubResourceStatus(source.SourceVirtualMachine)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field SourceVirtualMachine")
		}
		image.SourceVirtualMachine = &sourceVirtualMachine
	} else {
		image.SourceVirtualMachine = nil
	}

	// StorageProfile
	if source.StorageProfile != nil {
		var storageProfile ImageStorageProfile_Status
		err := storageProfile.AssignPropertiesFromImageStorageProfileStatus(source.StorageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageStorageProfileStatus() to populate field StorageProfile")
		}
		image.StorageProfile = &storageProfile
	} else {
		image.StorageProfile = nil
	}

	// Tags
	image.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	image.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToImageStatus populates the provided destination Image_Status from our Image_Status
func (image *Image_Status) AssignPropertiesToImageStatus(destination *alpha20210701s.Image_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(image.Conditions)

	// ExtendedLocation
	if image.ExtendedLocation != nil {
		var extendedLocation alpha20210701s.ExtendedLocation_Status
		err := image.ExtendedLocation.AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationStatus() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if image.HyperVGeneration != nil {
		hyperVGeneration := string(*image.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(image.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(image.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(image.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(image.ProvisioningState)

	// SourceVirtualMachine
	if image.SourceVirtualMachine != nil {
		var sourceVirtualMachine alpha20210701s.SubResource_Status
		err := image.SourceVirtualMachine.AssignPropertiesToSubResourceStatus(&sourceVirtualMachine)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field SourceVirtualMachine")
		}
		destination.SourceVirtualMachine = &sourceVirtualMachine
	} else {
		destination.SourceVirtualMachine = nil
	}

	// StorageProfile
	if image.StorageProfile != nil {
		var storageProfile alpha20210701s.ImageStorageProfile_Status
		err := image.StorageProfile.AssignPropertiesToImageStorageProfileStatus(&storageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageStorageProfileStatus() to populate field StorageProfile")
		}
		destination.StorageProfile = &storageProfile
	} else {
		destination.StorageProfile = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(image.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(image.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Images_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName        string                           `json:"azureName,omitempty"`
	ExtendedLocation *ExtendedLocation                `json:"extendedLocation,omitempty"`
	HyperVGeneration *ImagePropertiesHyperVGeneration `json:"hyperVGeneration,omitempty"`
	Location         *string                          `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	SourceVirtualMachine *SubResource                       `json:"sourceVirtualMachine,omitempty"`
	StorageProfile       *ImageStorageProfile               `json:"storageProfile,omitempty"`
	Tags                 map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &Images_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (images *Images_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if images == nil {
		return nil, nil
	}
	result := &Images_SpecARM{}

	// Set property ‘ExtendedLocation’:
	if images.ExtendedLocation != nil {
		extendedLocationARM, err := (*images.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := *extendedLocationARM.(*ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	if images.Location != nil {
		location := *images.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if images.HyperVGeneration != nil ||
		images.SourceVirtualMachine != nil ||
		images.StorageProfile != nil {
		result.Properties = &ImagePropertiesARM{}
	}
	if images.HyperVGeneration != nil {
		hyperVGeneration := *images.HyperVGeneration
		result.Properties.HyperVGeneration = &hyperVGeneration
	}
	if images.SourceVirtualMachine != nil {
		sourceVirtualMachineARM, err := (*images.SourceVirtualMachine).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sourceVirtualMachine := *sourceVirtualMachineARM.(*SubResourceARM)
		result.Properties.SourceVirtualMachine = &sourceVirtualMachine
	}
	if images.StorageProfile != nil {
		storageProfileARM, err := (*images.StorageProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storageProfile := *storageProfileARM.(*ImageStorageProfileARM)
		result.Properties.StorageProfile = &storageProfile
	}

	// Set property ‘Tags’:
	if images.Tags != nil {
		result.Tags = make(map[string]string, len(images.Tags))
		for key, value := range images.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (images *Images_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Images_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (images *Images_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Images_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Images_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	images.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		images.ExtendedLocation = &extendedLocation
	}

	// Set property ‘HyperVGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperVGeneration != nil {
			hyperVGeneration := *typedInput.Properties.HyperVGeneration
			images.HyperVGeneration = &hyperVGeneration
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		images.Location = &location
	}

	// Set property ‘Owner’:
	images.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘SourceVirtualMachine’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceVirtualMachine != nil {
			var sourceVirtualMachine1 SubResource
			err := sourceVirtualMachine1.PopulateFromARM(owner, *typedInput.Properties.SourceVirtualMachine)
			if err != nil {
				return err
			}
			sourceVirtualMachine := sourceVirtualMachine1
			images.SourceVirtualMachine = &sourceVirtualMachine
		}
	}

	// Set property ‘StorageProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageProfile != nil {
			var storageProfile1 ImageStorageProfile
			err := storageProfile1.PopulateFromARM(owner, *typedInput.Properties.StorageProfile)
			if err != nil {
				return err
			}
			storageProfile := storageProfile1
			images.StorageProfile = &storageProfile
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		images.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			images.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Images_Spec{}

// ConvertSpecFrom populates our Images_Spec from the provided source
func (images *Images_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210701s.Images_Spec)
	if ok {
		// Populate our instance from source
		return images.AssignPropertiesFromImagesSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210701s.Images_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = images.AssignPropertiesFromImagesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Images_Spec
func (images *Images_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210701s.Images_Spec)
	if ok {
		// Populate destination from our instance
		return images.AssignPropertiesToImagesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210701s.Images_Spec{}
	err := images.AssignPropertiesToImagesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromImagesSpec populates our Images_Spec from the provided source Images_Spec
func (images *Images_Spec) AssignPropertiesFromImagesSpec(source *alpha20210701s.Images_Spec) error {

	// AzureName
	images.AzureName = source.AzureName

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		images.ExtendedLocation = &extendedLocation
	} else {
		images.ExtendedLocation = nil
	}

	// HyperVGeneration
	if source.HyperVGeneration != nil {
		hyperVGeneration := ImagePropertiesHyperVGeneration(*source.HyperVGeneration)
		images.HyperVGeneration = &hyperVGeneration
	} else {
		images.HyperVGeneration = nil
	}

	// Location
	images.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		images.Owner = &owner
	} else {
		images.Owner = nil
	}

	// SourceVirtualMachine
	if source.SourceVirtualMachine != nil {
		var sourceVirtualMachine SubResource
		err := sourceVirtualMachine.AssignPropertiesFromSubResource(source.SourceVirtualMachine)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field SourceVirtualMachine")
		}
		images.SourceVirtualMachine = &sourceVirtualMachine
	} else {
		images.SourceVirtualMachine = nil
	}

	// StorageProfile
	if source.StorageProfile != nil {
		var storageProfile ImageStorageProfile
		err := storageProfile.AssignPropertiesFromImageStorageProfile(source.StorageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageStorageProfile() to populate field StorageProfile")
		}
		images.StorageProfile = &storageProfile
	} else {
		images.StorageProfile = nil
	}

	// Tags
	images.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToImagesSpec populates the provided destination Images_Spec from our Images_Spec
func (images *Images_Spec) AssignPropertiesToImagesSpec(destination *alpha20210701s.Images_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = images.AzureName

	// ExtendedLocation
	if images.ExtendedLocation != nil {
		var extendedLocation alpha20210701s.ExtendedLocation
		err := images.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// HyperVGeneration
	if images.HyperVGeneration != nil {
		hyperVGeneration := string(*images.HyperVGeneration)
		destination.HyperVGeneration = &hyperVGeneration
	} else {
		destination.HyperVGeneration = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(images.Location)

	// OriginalVersion
	destination.OriginalVersion = images.OriginalVersion()

	// Owner
	if images.Owner != nil {
		owner := images.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// SourceVirtualMachine
	if images.SourceVirtualMachine != nil {
		var sourceVirtualMachine alpha20210701s.SubResource
		err := images.SourceVirtualMachine.AssignPropertiesToSubResource(&sourceVirtualMachine)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field SourceVirtualMachine")
		}
		destination.SourceVirtualMachine = &sourceVirtualMachine
	} else {
		destination.SourceVirtualMachine = nil
	}

	// StorageProfile
	if images.StorageProfile != nil {
		var storageProfile alpha20210701s.ImageStorageProfile
		err := images.StorageProfile.AssignPropertiesToImageStorageProfile(&storageProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageStorageProfile() to populate field StorageProfile")
		}
		destination.StorageProfile = &storageProfile
	} else {
		destination.StorageProfile = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(images.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (images *Images_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (images *Images_Spec) SetAzureName(azureName string) { images.AzureName = azureName }

// Deprecated version of ExtendedLocation. Use v1beta20210701.ExtendedLocation instead
type ExtendedLocation struct {
	Name *string               `json:"name,omitempty"`
	Type *ExtendedLocationType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	result := &ExtendedLocationARM{}

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocationARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesFromExtendedLocation(source *alpha20210701s.ExtendedLocation) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesToExtendedLocation(destination *alpha20210701s.ExtendedLocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ExtendedLocation_Status. Use v1beta20210701.ExtendedLocation_Status instead
type ExtendedLocation_Status struct {
	Name *string                      `json:"name,omitempty"`
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationStatus populates our ExtendedLocation_Status from the provided source ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesFromExtendedLocationStatus(source *alpha20210701s.ExtendedLocation_Status) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Status(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationStatus populates the provided destination ExtendedLocation_Status from our ExtendedLocation_Status
func (location *ExtendedLocation_Status) AssignPropertiesToExtendedLocationStatus(destination *alpha20210701s.ExtendedLocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of HyperVGenerationType_Status. Use v1beta20210701.HyperVGenerationType_Status instead
type HyperVGenerationType_Status string

const (
	HyperVGenerationType_StatusV1 = HyperVGenerationType_Status("V1")
	HyperVGenerationType_StatusV2 = HyperVGenerationType_Status("V2")
)

// Deprecated version of ImagePropertiesHyperVGeneration. Use v1beta20210701.ImagePropertiesHyperVGeneration instead
// +kubebuilder:validation:Enum={"V1","V2"}
type ImagePropertiesHyperVGeneration string

const (
	ImagePropertiesHyperVGenerationV1 = ImagePropertiesHyperVGeneration("V1")
	ImagePropertiesHyperVGenerationV2 = ImagePropertiesHyperVGeneration("V2")
)

// Deprecated version of ImageStorageProfile. Use v1beta20210701.ImageStorageProfile instead
type ImageStorageProfile struct {
	DataDisks     []ImageDataDisk `json:"dataDisks,omitempty"`
	OsDisk        *ImageOSDisk    `json:"osDisk,omitempty"`
	ZoneResilient *bool           `json:"zoneResilient,omitempty"`
}

var _ genruntime.ARMTransformer = &ImageStorageProfile{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *ImageStorageProfile) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	result := &ImageStorageProfileARM{}

	// Set property ‘DataDisks’:
	for _, item := range profile.DataDisks {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.DataDisks = append(result.DataDisks, *itemARM.(*ImageDataDiskARM))
	}

	// Set property ‘OsDisk’:
	if profile.OsDisk != nil {
		osDiskARM, err := (*profile.OsDisk).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		osDisk := *osDiskARM.(*ImageOSDiskARM)
		result.OsDisk = &osDisk
	}

	// Set property ‘ZoneResilient’:
	if profile.ZoneResilient != nil {
		zoneResilient := *profile.ZoneResilient
		result.ZoneResilient = &zoneResilient
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *ImageStorageProfile) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageStorageProfileARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *ImageStorageProfile) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageStorageProfileARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageStorageProfileARM, got %T", armInput)
	}

	// Set property ‘DataDisks’:
	for _, item := range typedInput.DataDisks {
		var item1 ImageDataDisk
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.DataDisks = append(profile.DataDisks, item1)
	}

	// Set property ‘OsDisk’:
	if typedInput.OsDisk != nil {
		var osDisk1 ImageOSDisk
		err := osDisk1.PopulateFromARM(owner, *typedInput.OsDisk)
		if err != nil {
			return err
		}
		osDisk := osDisk1
		profile.OsDisk = &osDisk
	}

	// Set property ‘ZoneResilient’:
	if typedInput.ZoneResilient != nil {
		zoneResilient := *typedInput.ZoneResilient
		profile.ZoneResilient = &zoneResilient
	}

	// No error
	return nil
}

// AssignPropertiesFromImageStorageProfile populates our ImageStorageProfile from the provided source ImageStorageProfile
func (profile *ImageStorageProfile) AssignPropertiesFromImageStorageProfile(source *alpha20210701s.ImageStorageProfile) error {

	// DataDisks
	if source.DataDisks != nil {
		dataDiskList := make([]ImageDataDisk, len(source.DataDisks))
		for dataDiskIndex, dataDiskItem := range source.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk ImageDataDisk
			err := dataDisk.AssignPropertiesFromImageDataDisk(&dataDiskItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromImageDataDisk() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		profile.DataDisks = dataDiskList
	} else {
		profile.DataDisks = nil
	}

	// OsDisk
	if source.OsDisk != nil {
		var osDisk ImageOSDisk
		err := osDisk.AssignPropertiesFromImageOSDisk(source.OsDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageOSDisk() to populate field OsDisk")
		}
		profile.OsDisk = &osDisk
	} else {
		profile.OsDisk = nil
	}

	// ZoneResilient
	if source.ZoneResilient != nil {
		zoneResilient := *source.ZoneResilient
		profile.ZoneResilient = &zoneResilient
	} else {
		profile.ZoneResilient = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImageStorageProfile populates the provided destination ImageStorageProfile from our ImageStorageProfile
func (profile *ImageStorageProfile) AssignPropertiesToImageStorageProfile(destination *alpha20210701s.ImageStorageProfile) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataDisks
	if profile.DataDisks != nil {
		dataDiskList := make([]alpha20210701s.ImageDataDisk, len(profile.DataDisks))
		for dataDiskIndex, dataDiskItem := range profile.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk alpha20210701s.ImageDataDisk
			err := dataDiskItem.AssignPropertiesToImageDataDisk(&dataDisk)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToImageDataDisk() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		destination.DataDisks = dataDiskList
	} else {
		destination.DataDisks = nil
	}

	// OsDisk
	if profile.OsDisk != nil {
		var osDisk alpha20210701s.ImageOSDisk
		err := profile.OsDisk.AssignPropertiesToImageOSDisk(&osDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageOSDisk() to populate field OsDisk")
		}
		destination.OsDisk = &osDisk
	} else {
		destination.OsDisk = nil
	}

	// ZoneResilient
	if profile.ZoneResilient != nil {
		zoneResilient := *profile.ZoneResilient
		destination.ZoneResilient = &zoneResilient
	} else {
		destination.ZoneResilient = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImageStorageProfile_Status. Use v1beta20210701.ImageStorageProfile_Status instead
type ImageStorageProfile_Status struct {
	DataDisks     []ImageDataDisk_Status `json:"dataDisks,omitempty"`
	OsDisk        *ImageOSDisk_Status    `json:"osDisk,omitempty"`
	ZoneResilient *bool                  `json:"zoneResilient,omitempty"`
}

var _ genruntime.FromARMConverter = &ImageStorageProfile_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *ImageStorageProfile_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageStorageProfile_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *ImageStorageProfile_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageStorageProfile_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageStorageProfile_StatusARM, got %T", armInput)
	}

	// Set property ‘DataDisks’:
	for _, item := range typedInput.DataDisks {
		var item1 ImageDataDisk_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		profile.DataDisks = append(profile.DataDisks, item1)
	}

	// Set property ‘OsDisk’:
	if typedInput.OsDisk != nil {
		var osDisk1 ImageOSDisk_Status
		err := osDisk1.PopulateFromARM(owner, *typedInput.OsDisk)
		if err != nil {
			return err
		}
		osDisk := osDisk1
		profile.OsDisk = &osDisk
	}

	// Set property ‘ZoneResilient’:
	if typedInput.ZoneResilient != nil {
		zoneResilient := *typedInput.ZoneResilient
		profile.ZoneResilient = &zoneResilient
	}

	// No error
	return nil
}

// AssignPropertiesFromImageStorageProfileStatus populates our ImageStorageProfile_Status from the provided source ImageStorageProfile_Status
func (profile *ImageStorageProfile_Status) AssignPropertiesFromImageStorageProfileStatus(source *alpha20210701s.ImageStorageProfile_Status) error {

	// DataDisks
	if source.DataDisks != nil {
		dataDiskList := make([]ImageDataDisk_Status, len(source.DataDisks))
		for dataDiskIndex, dataDiskItem := range source.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk ImageDataDisk_Status
			err := dataDisk.AssignPropertiesFromImageDataDiskStatus(&dataDiskItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromImageDataDiskStatus() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		profile.DataDisks = dataDiskList
	} else {
		profile.DataDisks = nil
	}

	// OsDisk
	if source.OsDisk != nil {
		var osDisk ImageOSDisk_Status
		err := osDisk.AssignPropertiesFromImageOSDiskStatus(source.OsDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromImageOSDiskStatus() to populate field OsDisk")
		}
		profile.OsDisk = &osDisk
	} else {
		profile.OsDisk = nil
	}

	// ZoneResilient
	if source.ZoneResilient != nil {
		zoneResilient := *source.ZoneResilient
		profile.ZoneResilient = &zoneResilient
	} else {
		profile.ZoneResilient = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImageStorageProfileStatus populates the provided destination ImageStorageProfile_Status from our ImageStorageProfile_Status
func (profile *ImageStorageProfile_Status) AssignPropertiesToImageStorageProfileStatus(destination *alpha20210701s.ImageStorageProfile_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataDisks
	if profile.DataDisks != nil {
		dataDiskList := make([]alpha20210701s.ImageDataDisk_Status, len(profile.DataDisks))
		for dataDiskIndex, dataDiskItem := range profile.DataDisks {
			// Shadow the loop variable to avoid aliasing
			dataDiskItem := dataDiskItem
			var dataDisk alpha20210701s.ImageDataDisk_Status
			err := dataDiskItem.AssignPropertiesToImageDataDiskStatus(&dataDisk)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToImageDataDiskStatus() to populate field DataDisks")
			}
			dataDiskList[dataDiskIndex] = dataDisk
		}
		destination.DataDisks = dataDiskList
	} else {
		destination.DataDisks = nil
	}

	// OsDisk
	if profile.OsDisk != nil {
		var osDisk alpha20210701s.ImageOSDisk_Status
		err := profile.OsDisk.AssignPropertiesToImageOSDiskStatus(&osDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToImageOSDiskStatus() to populate field OsDisk")
		}
		destination.OsDisk = &osDisk
	} else {
		destination.OsDisk = nil
	}

	// ZoneResilient
	if profile.ZoneResilient != nil {
		zoneResilient := *profile.ZoneResilient
		destination.ZoneResilient = &zoneResilient
	} else {
		destination.ZoneResilient = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SubResource. Use v1beta20210701.SubResource instead
type SubResource struct {
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &SubResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *SubResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &SubResourceARM{}

	// Set property ‘Id’:
	if resource.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*resource.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SubResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SubResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(SubResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResourceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSubResource populates our SubResource from the provided source SubResource
func (resource *SubResource) AssignPropertiesFromSubResource(source *alpha20210701s.SubResource) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		resource.Reference = &reference
	} else {
		resource.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubResource populates the provided destination SubResource from our SubResource
func (resource *SubResource) AssignPropertiesToSubResource(destination *alpha20210701s.SubResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if resource.Reference != nil {
		reference := resource.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SubResource_Status. Use v1beta20210701.SubResource_Status instead
type SubResource_Status struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SubResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SubResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SubResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SubResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResource_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubResourceStatus populates our SubResource_Status from the provided source SubResource_Status
func (resource *SubResource_Status) AssignPropertiesFromSubResourceStatus(source *alpha20210701s.SubResource_Status) error {

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSubResourceStatus populates the provided destination SubResource_Status from our SubResource_Status
func (resource *SubResource_Status) AssignPropertiesToSubResourceStatus(destination *alpha20210701s.SubResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImageDataDisk. Use v1beta20210701.ImageDataDisk instead
type ImageDataDisk struct {
	BlobUri           *string                      `json:"blobUri,omitempty"`
	Caching           *ImageDataDiskCaching        `json:"caching,omitempty"`
	DiskEncryptionSet *DiskEncryptionSetParameters `json:"diskEncryptionSet,omitempty"`
	DiskSizeGB        *int                         `json:"diskSizeGB,omitempty"`

	// +kubebuilder:validation:Required
	Lun                *int                             `json:"lun,omitempty"`
	ManagedDisk        *SubResource                     `json:"managedDisk,omitempty"`
	Snapshot           *SubResource                     `json:"snapshot,omitempty"`
	StorageAccountType *ImageDataDiskStorageAccountType `json:"storageAccountType,omitempty"`
}

var _ genruntime.ARMTransformer = &ImageDataDisk{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (disk *ImageDataDisk) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if disk == nil {
		return nil, nil
	}
	result := &ImageDataDiskARM{}

	// Set property ‘BlobUri’:
	if disk.BlobUri != nil {
		blobUri := *disk.BlobUri
		result.BlobUri = &blobUri
	}

	// Set property ‘Caching’:
	if disk.Caching != nil {
		caching := *disk.Caching
		result.Caching = &caching
	}

	// Set property ‘DiskEncryptionSet’:
	if disk.DiskEncryptionSet != nil {
		diskEncryptionSetARM, err := (*disk.DiskEncryptionSet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diskEncryptionSet := *diskEncryptionSetARM.(*DiskEncryptionSetParametersARM)
		result.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘DiskSizeGB’:
	if disk.DiskSizeGB != nil {
		diskSizeGB := *disk.DiskSizeGB
		result.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘Lun’:
	if disk.Lun != nil {
		lun := *disk.Lun
		result.Lun = &lun
	}

	// Set property ‘ManagedDisk’:
	if disk.ManagedDisk != nil {
		managedDiskARM, err := (*disk.ManagedDisk).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		managedDisk := *managedDiskARM.(*SubResourceARM)
		result.ManagedDisk = &managedDisk
	}

	// Set property ‘Snapshot’:
	if disk.Snapshot != nil {
		snapshotARM, err := (*disk.Snapshot).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		snapshot := *snapshotARM.(*SubResourceARM)
		result.Snapshot = &snapshot
	}

	// Set property ‘StorageAccountType’:
	if disk.StorageAccountType != nil {
		storageAccountType := *disk.StorageAccountType
		result.StorageAccountType = &storageAccountType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *ImageDataDisk) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageDataDiskARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *ImageDataDisk) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageDataDiskARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageDataDiskARM, got %T", armInput)
	}

	// Set property ‘BlobUri’:
	if typedInput.BlobUri != nil {
		blobUri := *typedInput.BlobUri
		disk.BlobUri = &blobUri
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘DiskEncryptionSet’:
	if typedInput.DiskEncryptionSet != nil {
		var diskEncryptionSet1 DiskEncryptionSetParameters
		err := diskEncryptionSet1.PopulateFromARM(owner, *typedInput.DiskEncryptionSet)
		if err != nil {
			return err
		}
		diskEncryptionSet := diskEncryptionSet1
		disk.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘Lun’:
	if typedInput.Lun != nil {
		lun := *typedInput.Lun
		disk.Lun = &lun
	}

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 SubResource
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 SubResource
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		disk.Snapshot = &snapshot
	}

	// Set property ‘StorageAccountType’:
	if typedInput.StorageAccountType != nil {
		storageAccountType := *typedInput.StorageAccountType
		disk.StorageAccountType = &storageAccountType
	}

	// No error
	return nil
}

// AssignPropertiesFromImageDataDisk populates our ImageDataDisk from the provided source ImageDataDisk
func (disk *ImageDataDisk) AssignPropertiesFromImageDataDisk(source *alpha20210701s.ImageDataDisk) error {

	// BlobUri
	disk.BlobUri = genruntime.ClonePointerToString(source.BlobUri)

	// Caching
	if source.Caching != nil {
		caching := ImageDataDiskCaching(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// DiskEncryptionSet
	if source.DiskEncryptionSet != nil {
		var diskEncryptionSet DiskEncryptionSetParameters
		err := diskEncryptionSet.AssignPropertiesFromDiskEncryptionSetParameters(source.DiskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskEncryptionSetParameters() to populate field DiskEncryptionSet")
		}
		disk.DiskEncryptionSet = &diskEncryptionSet
	} else {
		disk.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// Lun
	disk.Lun = genruntime.ClonePointerToInt(source.Lun)

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk SubResource
		err := managedDisk.AssignPropertiesFromSubResource(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot SubResource
		err := snapshot.AssignPropertiesFromSubResource(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field Snapshot")
		}
		disk.Snapshot = &snapshot
	} else {
		disk.Snapshot = nil
	}

	// StorageAccountType
	if source.StorageAccountType != nil {
		storageAccountType := ImageDataDiskStorageAccountType(*source.StorageAccountType)
		disk.StorageAccountType = &storageAccountType
	} else {
		disk.StorageAccountType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImageDataDisk populates the provided destination ImageDataDisk from our ImageDataDisk
func (disk *ImageDataDisk) AssignPropertiesToImageDataDisk(destination *alpha20210701s.ImageDataDisk) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobUri
	destination.BlobUri = genruntime.ClonePointerToString(disk.BlobUri)

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// DiskEncryptionSet
	if disk.DiskEncryptionSet != nil {
		var diskEncryptionSet alpha20210701s.DiskEncryptionSetParameters
		err := disk.DiskEncryptionSet.AssignPropertiesToDiskEncryptionSetParameters(&diskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskEncryptionSetParameters() to populate field DiskEncryptionSet")
		}
		destination.DiskEncryptionSet = &diskEncryptionSet
	} else {
		destination.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// Lun
	destination.Lun = genruntime.ClonePointerToInt(disk.Lun)

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk alpha20210701s.SubResource
		err := disk.ManagedDisk.AssignPropertiesToSubResource(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// Snapshot
	if disk.Snapshot != nil {
		var snapshot alpha20210701s.SubResource
		err := disk.Snapshot.AssignPropertiesToSubResource(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// StorageAccountType
	if disk.StorageAccountType != nil {
		storageAccountType := string(*disk.StorageAccountType)
		destination.StorageAccountType = &storageAccountType
	} else {
		destination.StorageAccountType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImageDataDisk_Status. Use v1beta20210701.ImageDataDisk_Status instead
type ImageDataDisk_Status struct {
	BlobUri            *string                     `json:"blobUri,omitempty"`
	Caching            *ImageDataDiskStatusCaching `json:"caching,omitempty"`
	DiskEncryptionSet  *SubResource_Status         `json:"diskEncryptionSet,omitempty"`
	DiskSizeGB         *int                        `json:"diskSizeGB,omitempty"`
	Lun                *int                        `json:"lun,omitempty"`
	ManagedDisk        *SubResource_Status         `json:"managedDisk,omitempty"`
	Snapshot           *SubResource_Status         `json:"snapshot,omitempty"`
	StorageAccountType *StorageAccountType_Status  `json:"storageAccountType,omitempty"`
}

var _ genruntime.FromARMConverter = &ImageDataDisk_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *ImageDataDisk_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageDataDisk_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *ImageDataDisk_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageDataDisk_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageDataDisk_StatusARM, got %T", armInput)
	}

	// Set property ‘BlobUri’:
	if typedInput.BlobUri != nil {
		blobUri := *typedInput.BlobUri
		disk.BlobUri = &blobUri
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘DiskEncryptionSet’:
	if typedInput.DiskEncryptionSet != nil {
		var diskEncryptionSet1 SubResource_Status
		err := diskEncryptionSet1.PopulateFromARM(owner, *typedInput.DiskEncryptionSet)
		if err != nil {
			return err
		}
		diskEncryptionSet := diskEncryptionSet1
		disk.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘Lun’:
	if typedInput.Lun != nil {
		lun := *typedInput.Lun
		disk.Lun = &lun
	}

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 SubResource_Status
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 SubResource_Status
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		disk.Snapshot = &snapshot
	}

	// Set property ‘StorageAccountType’:
	if typedInput.StorageAccountType != nil {
		storageAccountType := *typedInput.StorageAccountType
		disk.StorageAccountType = &storageAccountType
	}

	// No error
	return nil
}

// AssignPropertiesFromImageDataDiskStatus populates our ImageDataDisk_Status from the provided source ImageDataDisk_Status
func (disk *ImageDataDisk_Status) AssignPropertiesFromImageDataDiskStatus(source *alpha20210701s.ImageDataDisk_Status) error {

	// BlobUri
	disk.BlobUri = genruntime.ClonePointerToString(source.BlobUri)

	// Caching
	if source.Caching != nil {
		caching := ImageDataDiskStatusCaching(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// DiskEncryptionSet
	if source.DiskEncryptionSet != nil {
		var diskEncryptionSet SubResource_Status
		err := diskEncryptionSet.AssignPropertiesFromSubResourceStatus(source.DiskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field DiskEncryptionSet")
		}
		disk.DiskEncryptionSet = &diskEncryptionSet
	} else {
		disk.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// Lun
	disk.Lun = genruntime.ClonePointerToInt(source.Lun)

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk SubResource_Status
		err := managedDisk.AssignPropertiesFromSubResourceStatus(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot SubResource_Status
		err := snapshot.AssignPropertiesFromSubResourceStatus(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field Snapshot")
		}
		disk.Snapshot = &snapshot
	} else {
		disk.Snapshot = nil
	}

	// StorageAccountType
	if source.StorageAccountType != nil {
		storageAccountType := StorageAccountType_Status(*source.StorageAccountType)
		disk.StorageAccountType = &storageAccountType
	} else {
		disk.StorageAccountType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImageDataDiskStatus populates the provided destination ImageDataDisk_Status from our ImageDataDisk_Status
func (disk *ImageDataDisk_Status) AssignPropertiesToImageDataDiskStatus(destination *alpha20210701s.ImageDataDisk_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobUri
	destination.BlobUri = genruntime.ClonePointerToString(disk.BlobUri)

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// DiskEncryptionSet
	if disk.DiskEncryptionSet != nil {
		var diskEncryptionSet alpha20210701s.SubResource_Status
		err := disk.DiskEncryptionSet.AssignPropertiesToSubResourceStatus(&diskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field DiskEncryptionSet")
		}
		destination.DiskEncryptionSet = &diskEncryptionSet
	} else {
		destination.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// Lun
	destination.Lun = genruntime.ClonePointerToInt(disk.Lun)

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk alpha20210701s.SubResource_Status
		err := disk.ManagedDisk.AssignPropertiesToSubResourceStatus(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// Snapshot
	if disk.Snapshot != nil {
		var snapshot alpha20210701s.SubResource_Status
		err := disk.Snapshot.AssignPropertiesToSubResourceStatus(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// StorageAccountType
	if disk.StorageAccountType != nil {
		storageAccountType := string(*disk.StorageAccountType)
		destination.StorageAccountType = &storageAccountType
	} else {
		destination.StorageAccountType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImageOSDisk. Use v1beta20210701.ImageOSDisk instead
type ImageOSDisk struct {
	BlobUri           *string                      `json:"blobUri,omitempty"`
	Caching           *ImageOSDiskCaching          `json:"caching,omitempty"`
	DiskEncryptionSet *DiskEncryptionSetParameters `json:"diskEncryptionSet,omitempty"`
	DiskSizeGB        *int                         `json:"diskSizeGB,omitempty"`
	ManagedDisk       *SubResource                 `json:"managedDisk,omitempty"`

	// +kubebuilder:validation:Required
	OsState *ImageOSDiskOsState `json:"osState,omitempty"`

	// +kubebuilder:validation:Required
	OsType             *ImageOSDiskOsType             `json:"osType,omitempty"`
	Snapshot           *SubResource                   `json:"snapshot,omitempty"`
	StorageAccountType *ImageOSDiskStorageAccountType `json:"storageAccountType,omitempty"`
}

var _ genruntime.ARMTransformer = &ImageOSDisk{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (disk *ImageOSDisk) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if disk == nil {
		return nil, nil
	}
	result := &ImageOSDiskARM{}

	// Set property ‘BlobUri’:
	if disk.BlobUri != nil {
		blobUri := *disk.BlobUri
		result.BlobUri = &blobUri
	}

	// Set property ‘Caching’:
	if disk.Caching != nil {
		caching := *disk.Caching
		result.Caching = &caching
	}

	// Set property ‘DiskEncryptionSet’:
	if disk.DiskEncryptionSet != nil {
		diskEncryptionSetARM, err := (*disk.DiskEncryptionSet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		diskEncryptionSet := *diskEncryptionSetARM.(*DiskEncryptionSetParametersARM)
		result.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘DiskSizeGB’:
	if disk.DiskSizeGB != nil {
		diskSizeGB := *disk.DiskSizeGB
		result.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘ManagedDisk’:
	if disk.ManagedDisk != nil {
		managedDiskARM, err := (*disk.ManagedDisk).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		managedDisk := *managedDiskARM.(*SubResourceARM)
		result.ManagedDisk = &managedDisk
	}

	// Set property ‘OsState’:
	if disk.OsState != nil {
		osState := *disk.OsState
		result.OsState = &osState
	}

	// Set property ‘OsType’:
	if disk.OsType != nil {
		osType := *disk.OsType
		result.OsType = &osType
	}

	// Set property ‘Snapshot’:
	if disk.Snapshot != nil {
		snapshotARM, err := (*disk.Snapshot).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		snapshot := *snapshotARM.(*SubResourceARM)
		result.Snapshot = &snapshot
	}

	// Set property ‘StorageAccountType’:
	if disk.StorageAccountType != nil {
		storageAccountType := *disk.StorageAccountType
		result.StorageAccountType = &storageAccountType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *ImageOSDisk) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageOSDiskARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *ImageOSDisk) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageOSDiskARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageOSDiskARM, got %T", armInput)
	}

	// Set property ‘BlobUri’:
	if typedInput.BlobUri != nil {
		blobUri := *typedInput.BlobUri
		disk.BlobUri = &blobUri
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘DiskEncryptionSet’:
	if typedInput.DiskEncryptionSet != nil {
		var diskEncryptionSet1 DiskEncryptionSetParameters
		err := diskEncryptionSet1.PopulateFromARM(owner, *typedInput.DiskEncryptionSet)
		if err != nil {
			return err
		}
		diskEncryptionSet := diskEncryptionSet1
		disk.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 SubResource
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘OsState’:
	if typedInput.OsState != nil {
		osState := *typedInput.OsState
		disk.OsState = &osState
	}

	// Set property ‘OsType’:
	if typedInput.OsType != nil {
		osType := *typedInput.OsType
		disk.OsType = &osType
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 SubResource
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		disk.Snapshot = &snapshot
	}

	// Set property ‘StorageAccountType’:
	if typedInput.StorageAccountType != nil {
		storageAccountType := *typedInput.StorageAccountType
		disk.StorageAccountType = &storageAccountType
	}

	// No error
	return nil
}

// AssignPropertiesFromImageOSDisk populates our ImageOSDisk from the provided source ImageOSDisk
func (disk *ImageOSDisk) AssignPropertiesFromImageOSDisk(source *alpha20210701s.ImageOSDisk) error {

	// BlobUri
	disk.BlobUri = genruntime.ClonePointerToString(source.BlobUri)

	// Caching
	if source.Caching != nil {
		caching := ImageOSDiskCaching(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// DiskEncryptionSet
	if source.DiskEncryptionSet != nil {
		var diskEncryptionSet DiskEncryptionSetParameters
		err := diskEncryptionSet.AssignPropertiesFromDiskEncryptionSetParameters(source.DiskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDiskEncryptionSetParameters() to populate field DiskEncryptionSet")
		}
		disk.DiskEncryptionSet = &diskEncryptionSet
	} else {
		disk.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk SubResource
		err := managedDisk.AssignPropertiesFromSubResource(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// OsState
	if source.OsState != nil {
		osState := ImageOSDiskOsState(*source.OsState)
		disk.OsState = &osState
	} else {
		disk.OsState = nil
	}

	// OsType
	if source.OsType != nil {
		osType := ImageOSDiskOsType(*source.OsType)
		disk.OsType = &osType
	} else {
		disk.OsType = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot SubResource
		err := snapshot.AssignPropertiesFromSubResource(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field Snapshot")
		}
		disk.Snapshot = &snapshot
	} else {
		disk.Snapshot = nil
	}

	// StorageAccountType
	if source.StorageAccountType != nil {
		storageAccountType := ImageOSDiskStorageAccountType(*source.StorageAccountType)
		disk.StorageAccountType = &storageAccountType
	} else {
		disk.StorageAccountType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImageOSDisk populates the provided destination ImageOSDisk from our ImageOSDisk
func (disk *ImageOSDisk) AssignPropertiesToImageOSDisk(destination *alpha20210701s.ImageOSDisk) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobUri
	destination.BlobUri = genruntime.ClonePointerToString(disk.BlobUri)

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// DiskEncryptionSet
	if disk.DiskEncryptionSet != nil {
		var diskEncryptionSet alpha20210701s.DiskEncryptionSetParameters
		err := disk.DiskEncryptionSet.AssignPropertiesToDiskEncryptionSetParameters(&diskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDiskEncryptionSetParameters() to populate field DiskEncryptionSet")
		}
		destination.DiskEncryptionSet = &diskEncryptionSet
	} else {
		destination.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk alpha20210701s.SubResource
		err := disk.ManagedDisk.AssignPropertiesToSubResource(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// OsState
	if disk.OsState != nil {
		osState := string(*disk.OsState)
		destination.OsState = &osState
	} else {
		destination.OsState = nil
	}

	// OsType
	if disk.OsType != nil {
		osType := string(*disk.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Snapshot
	if disk.Snapshot != nil {
		var snapshot alpha20210701s.SubResource
		err := disk.Snapshot.AssignPropertiesToSubResource(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// StorageAccountType
	if disk.StorageAccountType != nil {
		storageAccountType := string(*disk.StorageAccountType)
		destination.StorageAccountType = &storageAccountType
	} else {
		destination.StorageAccountType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImageOSDisk_Status. Use v1beta20210701.ImageOSDisk_Status instead
type ImageOSDisk_Status struct {
	BlobUri            *string                    `json:"blobUri,omitempty"`
	Caching            *ImageOSDiskStatusCaching  `json:"caching,omitempty"`
	DiskEncryptionSet  *SubResource_Status        `json:"diskEncryptionSet,omitempty"`
	DiskSizeGB         *int                       `json:"diskSizeGB,omitempty"`
	ManagedDisk        *SubResource_Status        `json:"managedDisk,omitempty"`
	OsState            *ImageOSDiskStatusOsState  `json:"osState,omitempty"`
	OsType             *ImageOSDiskStatusOsType   `json:"osType,omitempty"`
	Snapshot           *SubResource_Status        `json:"snapshot,omitempty"`
	StorageAccountType *StorageAccountType_Status `json:"storageAccountType,omitempty"`
}

var _ genruntime.FromARMConverter = &ImageOSDisk_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (disk *ImageOSDisk_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ImageOSDisk_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (disk *ImageOSDisk_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ImageOSDisk_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ImageOSDisk_StatusARM, got %T", armInput)
	}

	// Set property ‘BlobUri’:
	if typedInput.BlobUri != nil {
		blobUri := *typedInput.BlobUri
		disk.BlobUri = &blobUri
	}

	// Set property ‘Caching’:
	if typedInput.Caching != nil {
		caching := *typedInput.Caching
		disk.Caching = &caching
	}

	// Set property ‘DiskEncryptionSet’:
	if typedInput.DiskEncryptionSet != nil {
		var diskEncryptionSet1 SubResource_Status
		err := diskEncryptionSet1.PopulateFromARM(owner, *typedInput.DiskEncryptionSet)
		if err != nil {
			return err
		}
		diskEncryptionSet := diskEncryptionSet1
		disk.DiskEncryptionSet = &diskEncryptionSet
	}

	// Set property ‘DiskSizeGB’:
	if typedInput.DiskSizeGB != nil {
		diskSizeGB := *typedInput.DiskSizeGB
		disk.DiskSizeGB = &diskSizeGB
	}

	// Set property ‘ManagedDisk’:
	if typedInput.ManagedDisk != nil {
		var managedDisk1 SubResource_Status
		err := managedDisk1.PopulateFromARM(owner, *typedInput.ManagedDisk)
		if err != nil {
			return err
		}
		managedDisk := managedDisk1
		disk.ManagedDisk = &managedDisk
	}

	// Set property ‘OsState’:
	if typedInput.OsState != nil {
		osState := *typedInput.OsState
		disk.OsState = &osState
	}

	// Set property ‘OsType’:
	if typedInput.OsType != nil {
		osType := *typedInput.OsType
		disk.OsType = &osType
	}

	// Set property ‘Snapshot’:
	if typedInput.Snapshot != nil {
		var snapshot1 SubResource_Status
		err := snapshot1.PopulateFromARM(owner, *typedInput.Snapshot)
		if err != nil {
			return err
		}
		snapshot := snapshot1
		disk.Snapshot = &snapshot
	}

	// Set property ‘StorageAccountType’:
	if typedInput.StorageAccountType != nil {
		storageAccountType := *typedInput.StorageAccountType
		disk.StorageAccountType = &storageAccountType
	}

	// No error
	return nil
}

// AssignPropertiesFromImageOSDiskStatus populates our ImageOSDisk_Status from the provided source ImageOSDisk_Status
func (disk *ImageOSDisk_Status) AssignPropertiesFromImageOSDiskStatus(source *alpha20210701s.ImageOSDisk_Status) error {

	// BlobUri
	disk.BlobUri = genruntime.ClonePointerToString(source.BlobUri)

	// Caching
	if source.Caching != nil {
		caching := ImageOSDiskStatusCaching(*source.Caching)
		disk.Caching = &caching
	} else {
		disk.Caching = nil
	}

	// DiskEncryptionSet
	if source.DiskEncryptionSet != nil {
		var diskEncryptionSet SubResource_Status
		err := diskEncryptionSet.AssignPropertiesFromSubResourceStatus(source.DiskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field DiskEncryptionSet")
		}
		disk.DiskEncryptionSet = &diskEncryptionSet
	} else {
		disk.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	disk.DiskSizeGB = genruntime.ClonePointerToInt(source.DiskSizeGB)

	// ManagedDisk
	if source.ManagedDisk != nil {
		var managedDisk SubResource_Status
		err := managedDisk.AssignPropertiesFromSubResourceStatus(source.ManagedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field ManagedDisk")
		}
		disk.ManagedDisk = &managedDisk
	} else {
		disk.ManagedDisk = nil
	}

	// OsState
	if source.OsState != nil {
		osState := ImageOSDiskStatusOsState(*source.OsState)
		disk.OsState = &osState
	} else {
		disk.OsState = nil
	}

	// OsType
	if source.OsType != nil {
		osType := ImageOSDiskStatusOsType(*source.OsType)
		disk.OsType = &osType
	} else {
		disk.OsType = nil
	}

	// Snapshot
	if source.Snapshot != nil {
		var snapshot SubResource_Status
		err := snapshot.AssignPropertiesFromSubResourceStatus(source.Snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field Snapshot")
		}
		disk.Snapshot = &snapshot
	} else {
		disk.Snapshot = nil
	}

	// StorageAccountType
	if source.StorageAccountType != nil {
		storageAccountType := StorageAccountType_Status(*source.StorageAccountType)
		disk.StorageAccountType = &storageAccountType
	} else {
		disk.StorageAccountType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToImageOSDiskStatus populates the provided destination ImageOSDisk_Status from our ImageOSDisk_Status
func (disk *ImageOSDisk_Status) AssignPropertiesToImageOSDiskStatus(destination *alpha20210701s.ImageOSDisk_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobUri
	destination.BlobUri = genruntime.ClonePointerToString(disk.BlobUri)

	// Caching
	if disk.Caching != nil {
		caching := string(*disk.Caching)
		destination.Caching = &caching
	} else {
		destination.Caching = nil
	}

	// DiskEncryptionSet
	if disk.DiskEncryptionSet != nil {
		var diskEncryptionSet alpha20210701s.SubResource_Status
		err := disk.DiskEncryptionSet.AssignPropertiesToSubResourceStatus(&diskEncryptionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field DiskEncryptionSet")
		}
		destination.DiskEncryptionSet = &diskEncryptionSet
	} else {
		destination.DiskEncryptionSet = nil
	}

	// DiskSizeGB
	destination.DiskSizeGB = genruntime.ClonePointerToInt(disk.DiskSizeGB)

	// ManagedDisk
	if disk.ManagedDisk != nil {
		var managedDisk alpha20210701s.SubResource_Status
		err := disk.ManagedDisk.AssignPropertiesToSubResourceStatus(&managedDisk)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field ManagedDisk")
		}
		destination.ManagedDisk = &managedDisk
	} else {
		destination.ManagedDisk = nil
	}

	// OsState
	if disk.OsState != nil {
		osState := string(*disk.OsState)
		destination.OsState = &osState
	} else {
		destination.OsState = nil
	}

	// OsType
	if disk.OsType != nil {
		osType := string(*disk.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Snapshot
	if disk.Snapshot != nil {
		var snapshot alpha20210701s.SubResource_Status
		err := disk.Snapshot.AssignPropertiesToSubResourceStatus(&snapshot)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field Snapshot")
		}
		destination.Snapshot = &snapshot
	} else {
		destination.Snapshot = nil
	}

	// StorageAccountType
	if disk.StorageAccountType != nil {
		storageAccountType := string(*disk.StorageAccountType)
		destination.StorageAccountType = &storageAccountType
	} else {
		destination.StorageAccountType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DiskEncryptionSetParameters. Use v1beta20210701.DiskEncryptionSetParameters instead
type DiskEncryptionSetParameters struct {
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &DiskEncryptionSetParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *DiskEncryptionSetParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &DiskEncryptionSetParametersARM{}

	// Set property ‘Id’:
	if parameters.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*parameters.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *DiskEncryptionSetParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DiskEncryptionSetParametersARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *DiskEncryptionSetParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(DiskEncryptionSetParametersARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DiskEncryptionSetParametersARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromDiskEncryptionSetParameters populates our DiskEncryptionSetParameters from the provided source DiskEncryptionSetParameters
func (parameters *DiskEncryptionSetParameters) AssignPropertiesFromDiskEncryptionSetParameters(source *alpha20210701s.DiskEncryptionSetParameters) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		parameters.Reference = &reference
	} else {
		parameters.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDiskEncryptionSetParameters populates the provided destination DiskEncryptionSetParameters from our DiskEncryptionSetParameters
func (parameters *DiskEncryptionSetParameters) AssignPropertiesToDiskEncryptionSetParameters(destination *alpha20210701s.DiskEncryptionSetParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if parameters.Reference != nil {
		reference := parameters.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ImageDataDiskCaching. Use v1beta20210701.ImageDataDiskCaching instead
// +kubebuilder:validation:Enum={"None","ReadOnly","ReadWrite"}
type ImageDataDiskCaching string

const (
	ImageDataDiskCachingNone      = ImageDataDiskCaching("None")
	ImageDataDiskCachingReadOnly  = ImageDataDiskCaching("ReadOnly")
	ImageDataDiskCachingReadWrite = ImageDataDiskCaching("ReadWrite")
)

// Deprecated version of ImageDataDiskStatusCaching. Use v1beta20210701.ImageDataDiskStatusCaching instead
type ImageDataDiskStatusCaching string

const (
	ImageDataDiskStatusCachingNone      = ImageDataDiskStatusCaching("None")
	ImageDataDiskStatusCachingReadOnly  = ImageDataDiskStatusCaching("ReadOnly")
	ImageDataDiskStatusCachingReadWrite = ImageDataDiskStatusCaching("ReadWrite")
)

// Deprecated version of ImageDataDiskStorageAccountType. Use v1beta20210701.ImageDataDiskStorageAccountType instead
// +kubebuilder:validation:Enum={"Premium_LRS","Premium_ZRS","Standard_LRS","StandardSSD_LRS","StandardSSD_ZRS","UltraSSD_LRS"}
type ImageDataDiskStorageAccountType string

const (
	ImageDataDiskStorageAccountTypePremiumLRS     = ImageDataDiskStorageAccountType("Premium_LRS")
	ImageDataDiskStorageAccountTypePremiumZRS     = ImageDataDiskStorageAccountType("Premium_ZRS")
	ImageDataDiskStorageAccountTypeStandardLRS    = ImageDataDiskStorageAccountType("Standard_LRS")
	ImageDataDiskStorageAccountTypeStandardSSDLRS = ImageDataDiskStorageAccountType("StandardSSD_LRS")
	ImageDataDiskStorageAccountTypeStandardSSDZRS = ImageDataDiskStorageAccountType("StandardSSD_ZRS")
	ImageDataDiskStorageAccountTypeUltraSSDLRS    = ImageDataDiskStorageAccountType("UltraSSD_LRS")
)

// Deprecated version of ImageOSDiskCaching. Use v1beta20210701.ImageOSDiskCaching instead
// +kubebuilder:validation:Enum={"None","ReadOnly","ReadWrite"}
type ImageOSDiskCaching string

const (
	ImageOSDiskCachingNone      = ImageOSDiskCaching("None")
	ImageOSDiskCachingReadOnly  = ImageOSDiskCaching("ReadOnly")
	ImageOSDiskCachingReadWrite = ImageOSDiskCaching("ReadWrite")
)

// Deprecated version of ImageOSDiskOsState. Use v1beta20210701.ImageOSDiskOsState instead
// +kubebuilder:validation:Enum={"Generalized","Specialized"}
type ImageOSDiskOsState string

const (
	ImageOSDiskOsStateGeneralized = ImageOSDiskOsState("Generalized")
	ImageOSDiskOsStateSpecialized = ImageOSDiskOsState("Specialized")
)

// Deprecated version of ImageOSDiskOsType. Use v1beta20210701.ImageOSDiskOsType instead
// +kubebuilder:validation:Enum={"Linux","Windows"}
type ImageOSDiskOsType string

const (
	ImageOSDiskOsTypeLinux   = ImageOSDiskOsType("Linux")
	ImageOSDiskOsTypeWindows = ImageOSDiskOsType("Windows")
)

// Deprecated version of ImageOSDiskStatusCaching. Use v1beta20210701.ImageOSDiskStatusCaching instead
type ImageOSDiskStatusCaching string

const (
	ImageOSDiskStatusCachingNone      = ImageOSDiskStatusCaching("None")
	ImageOSDiskStatusCachingReadOnly  = ImageOSDiskStatusCaching("ReadOnly")
	ImageOSDiskStatusCachingReadWrite = ImageOSDiskStatusCaching("ReadWrite")
)

// Deprecated version of ImageOSDiskStatusOsState. Use v1beta20210701.ImageOSDiskStatusOsState instead
type ImageOSDiskStatusOsState string

const (
	ImageOSDiskStatusOsStateGeneralized = ImageOSDiskStatusOsState("Generalized")
	ImageOSDiskStatusOsStateSpecialized = ImageOSDiskStatusOsState("Specialized")
)

// Deprecated version of ImageOSDiskStatusOsType. Use v1beta20210701.ImageOSDiskStatusOsType instead
type ImageOSDiskStatusOsType string

const (
	ImageOSDiskStatusOsTypeLinux   = ImageOSDiskStatusOsType("Linux")
	ImageOSDiskStatusOsTypeWindows = ImageOSDiskStatusOsType("Windows")
)

// Deprecated version of ImageOSDiskStorageAccountType. Use v1beta20210701.ImageOSDiskStorageAccountType instead
// +kubebuilder:validation:Enum={"Premium_LRS","Premium_ZRS","Standard_LRS","StandardSSD_LRS","StandardSSD_ZRS","UltraSSD_LRS"}
type ImageOSDiskStorageAccountType string

const (
	ImageOSDiskStorageAccountTypePremiumLRS     = ImageOSDiskStorageAccountType("Premium_LRS")
	ImageOSDiskStorageAccountTypePremiumZRS     = ImageOSDiskStorageAccountType("Premium_ZRS")
	ImageOSDiskStorageAccountTypeStandardLRS    = ImageOSDiskStorageAccountType("Standard_LRS")
	ImageOSDiskStorageAccountTypeStandardSSDLRS = ImageOSDiskStorageAccountType("StandardSSD_LRS")
	ImageOSDiskStorageAccountTypeStandardSSDZRS = ImageOSDiskStorageAccountType("StandardSSD_ZRS")
	ImageOSDiskStorageAccountTypeUltraSSDLRS    = ImageOSDiskStorageAccountType("UltraSSD_LRS")
)

// Deprecated version of StorageAccountType_Status. Use v1beta20210701.StorageAccountType_Status instead
type StorageAccountType_Status string

const (
	StorageAccountType_StatusPremiumLRS     = StorageAccountType_Status("Premium_LRS")
	StorageAccountType_StatusPremiumZRS     = StorageAccountType_Status("Premium_ZRS")
	StorageAccountType_StatusStandardLRS    = StorageAccountType_Status("Standard_LRS")
	StorageAccountType_StatusStandardSSDLRS = StorageAccountType_Status("StandardSSD_LRS")
	StorageAccountType_StatusStandardSSDZRS = StorageAccountType_Status("StandardSSD_ZRS")
	StorageAccountType_StatusUltraSSDLRS    = StorageAccountType_Status("UltraSSD_LRS")
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
