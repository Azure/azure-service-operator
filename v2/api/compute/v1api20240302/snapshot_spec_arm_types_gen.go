// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240302

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Snapshot_Spec_ARM struct {
	// ExtendedLocation: The extended location where the snapshot will be created. Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation_ARM `json:"extendedLocation,omitempty"`

	// Location: Resource location
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Snapshot resource properties.
	Properties *SnapshotProperties_ARM `json:"properties,omitempty"`

	// Sku: The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for
	// incremental  snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
	Sku *SnapshotSku_ARM `json:"sku,omitempty"`

	// Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Snapshot_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-03-02"
func (snapshot Snapshot_Spec_ARM) GetAPIVersion() string {
	return "2024-03-02"
}

// GetName returns the Name of the resource
func (snapshot *Snapshot_Spec_ARM) GetName() string {
	return snapshot.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/snapshots"
func (snapshot *Snapshot_Spec_ARM) GetType() string {
	return "Microsoft.Compute/snapshots"
}

// Snapshot resource properties.
type SnapshotProperties_ARM struct {
	// CompletionPercent: Percentage complete for the background copy when a resource is created via the CopyStart operation.
	CompletionPercent *float64 `json:"completionPercent,omitempty"`

	// CopyCompletionError: Indicates the error details if the background copy of a resource created via the CopyStart
	// operation fails.
	CopyCompletionError *CopyCompletionError_ARM `json:"copyCompletionError,omitempty"`

	// CreationData: Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData *CreationData_ARM `json:"creationData,omitempty"`

	// DataAccessAuthMode: Additional authentication requirements when exporting or uploading to a disk or snapshot.
	DataAccessAuthMode *DataAccessAuthMode_ARM `json:"dataAccessAuthMode,omitempty"`
	DiskAccessId       *string                 `json:"diskAccessId,omitempty"`

	// DiskSizeGB: If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to
	// create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only
	// allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	// DiskState: The state of the snapshot.
	DiskState *DiskState_ARM `json:"diskState,omitempty"`

	// Encryption: Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption_ARM `json:"encryption,omitempty"`

	// EncryptionSettingsCollection: Encryption settings collection used be Azure Disk Encryption, can contain multiple
	// encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection_ARM `json:"encryptionSettingsCollection,omitempty"`

	// HyperVGeneration: The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *SnapshotProperties_HyperVGeneration_ARM `json:"hyperVGeneration,omitempty"`

	// Incremental: Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full
	// snapshots and can be diffed.
	Incremental *bool `json:"incremental,omitempty"`

	// NetworkAccessPolicy: Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy_ARM `json:"networkAccessPolicy,omitempty"`

	// OsType: The Operating System type.
	OsType *SnapshotProperties_OsType_ARM `json:"osType,omitempty"`

	// PublicNetworkAccess: Policy for controlling export on the disk.
	PublicNetworkAccess *PublicNetworkAccess_ARM `json:"publicNetworkAccess,omitempty"`

	// PurchasePlan: Purchase plan information for the image from which the source disk for the snapshot was originally created.
	PurchasePlan *PurchasePlan_ARM `json:"purchasePlan,omitempty"`

	// SecurityProfile: Contains the security related information for the resource.
	SecurityProfile *DiskSecurityProfile_ARM `json:"securityProfile,omitempty"`

	// SupportedCapabilities: List of supported capabilities for the image from which the source disk from the snapshot was
	// originally created.
	SupportedCapabilities *SupportedCapabilities_ARM `json:"supportedCapabilities,omitempty"`

	// SupportsHibernation: Indicates the OS on a snapshot supports hibernation.
	SupportsHibernation *bool `json:"supportsHibernation,omitempty"`
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental
// snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
type SnapshotSku_ARM struct {
	// Name: The sku name.
	Name *SnapshotSku_Name_ARM `json:"name,omitempty"`
}

// Indicates the error details if the background copy of a resource created via the CopyStart operation fails.
type CopyCompletionError_ARM struct {
	// ErrorCode: Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
	ErrorCode *CopyCompletionError_ErrorCode_ARM `json:"errorCode,omitempty"`

	// ErrorMessage: Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// This enumerates the possible state of the disk.
// +kubebuilder:validation:Enum={"ActiveSAS","ActiveSASFrozen","ActiveUpload","Attached","Frozen","ReadyToUpload","Reserved","Unattached"}
type DiskState_ARM string

const (
	DiskState_ARM_ActiveSAS       = DiskState_ARM("ActiveSAS")
	DiskState_ARM_ActiveSASFrozen = DiskState_ARM("ActiveSASFrozen")
	DiskState_ARM_ActiveUpload    = DiskState_ARM("ActiveUpload")
	DiskState_ARM_Attached        = DiskState_ARM("Attached")
	DiskState_ARM_Frozen          = DiskState_ARM("Frozen")
	DiskState_ARM_ReadyToUpload   = DiskState_ARM("ReadyToUpload")
	DiskState_ARM_Reserved        = DiskState_ARM("Reserved")
	DiskState_ARM_Unattached      = DiskState_ARM("Unattached")
)

// Mapping from string to DiskState_ARM
var diskState_ARM_Values = map[string]DiskState_ARM{
	"activesas":       DiskState_ARM_ActiveSAS,
	"activesasfrozen": DiskState_ARM_ActiveSASFrozen,
	"activeupload":    DiskState_ARM_ActiveUpload,
	"attached":        DiskState_ARM_Attached,
	"frozen":          DiskState_ARM_Frozen,
	"readytoupload":   DiskState_ARM_ReadyToUpload,
	"reserved":        DiskState_ARM_Reserved,
	"unattached":      DiskState_ARM_Unattached,
}

// +kubebuilder:validation:Enum={"V1","V2"}
type SnapshotProperties_HyperVGeneration_ARM string

const (
	SnapshotProperties_HyperVGeneration_ARM_V1 = SnapshotProperties_HyperVGeneration_ARM("V1")
	SnapshotProperties_HyperVGeneration_ARM_V2 = SnapshotProperties_HyperVGeneration_ARM("V2")
)

// Mapping from string to SnapshotProperties_HyperVGeneration_ARM
var snapshotProperties_HyperVGeneration_ARM_Values = map[string]SnapshotProperties_HyperVGeneration_ARM{
	"v1": SnapshotProperties_HyperVGeneration_ARM_V1,
	"v2": SnapshotProperties_HyperVGeneration_ARM_V2,
}

// +kubebuilder:validation:Enum={"Linux","Windows"}
type SnapshotProperties_OsType_ARM string

const (
	SnapshotProperties_OsType_ARM_Linux   = SnapshotProperties_OsType_ARM("Linux")
	SnapshotProperties_OsType_ARM_Windows = SnapshotProperties_OsType_ARM("Windows")
)

// Mapping from string to SnapshotProperties_OsType_ARM
var snapshotProperties_OsType_ARM_Values = map[string]SnapshotProperties_OsType_ARM{
	"linux":   SnapshotProperties_OsType_ARM_Linux,
	"windows": SnapshotProperties_OsType_ARM_Windows,
}

// +kubebuilder:validation:Enum={"Premium_LRS","Standard_LRS","Standard_ZRS"}
type SnapshotSku_Name_ARM string

const (
	SnapshotSku_Name_ARM_Premium_LRS  = SnapshotSku_Name_ARM("Premium_LRS")
	SnapshotSku_Name_ARM_Standard_LRS = SnapshotSku_Name_ARM("Standard_LRS")
	SnapshotSku_Name_ARM_Standard_ZRS = SnapshotSku_Name_ARM("Standard_ZRS")
)

// Mapping from string to SnapshotSku_Name_ARM
var snapshotSku_Name_ARM_Values = map[string]SnapshotSku_Name_ARM{
	"premium_lrs":  SnapshotSku_Name_ARM_Premium_LRS,
	"standard_lrs": SnapshotSku_Name_ARM_Standard_LRS,
	"standard_zrs": SnapshotSku_Name_ARM_Standard_ZRS,
}

// +kubebuilder:validation:Enum={"CopySourceNotFound"}
type CopyCompletionError_ErrorCode_ARM string

const CopyCompletionError_ErrorCode_ARM_CopySourceNotFound = CopyCompletionError_ErrorCode_ARM("CopySourceNotFound")

// Mapping from string to CopyCompletionError_ErrorCode_ARM
var copyCompletionError_ErrorCode_ARM_Values = map[string]CopyCompletionError_ErrorCode_ARM{
	"copysourcenotfound": CopyCompletionError_ErrorCode_ARM_CopySourceNotFound,
}
