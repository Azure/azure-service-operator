// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240302

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CopyCompletionError_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CopyCompletionError_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCopyCompletionError_STATUS_ARM, CopyCompletionError_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCopyCompletionError_STATUS_ARM runs a test to see if a specific instance of CopyCompletionError_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCopyCompletionError_STATUS_ARM(subject CopyCompletionError_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CopyCompletionError_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CopyCompletionError_STATUS_ARM instances for property testing - lazily instantiated by
// CopyCompletionError_STATUS_ARMGenerator()
var copyCompletionError_STATUS_ARMGenerator gopter.Gen

// CopyCompletionError_STATUS_ARMGenerator returns a generator of CopyCompletionError_STATUS_ARM instances for property testing.
func CopyCompletionError_STATUS_ARMGenerator() gopter.Gen {
	if copyCompletionError_STATUS_ARMGenerator != nil {
		return copyCompletionError_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCopyCompletionError_STATUS_ARM(generators)
	copyCompletionError_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CopyCompletionError_STATUS_ARM{}), generators)

	return copyCompletionError_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCopyCompletionError_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCopyCompletionError_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ErrorCode"] = gen.PtrOf(gen.OneConstOf(CopyCompletionError_ErrorCode_STATUS_CopySourceNotFound))
	gens["ErrorMessage"] = gen.PtrOf(gen.AlphaString())
}

func Test_SnapshotProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SnapshotProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshotProperties_STATUS_ARM, SnapshotProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshotProperties_STATUS_ARM runs a test to see if a specific instance of SnapshotProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshotProperties_STATUS_ARM(subject SnapshotProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SnapshotProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SnapshotProperties_STATUS_ARM instances for property testing - lazily instantiated by
// SnapshotProperties_STATUS_ARMGenerator()
var snapshotProperties_STATUS_ARMGenerator gopter.Gen

// SnapshotProperties_STATUS_ARMGenerator returns a generator of SnapshotProperties_STATUS_ARM instances for property testing.
// We first initialize snapshotProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SnapshotProperties_STATUS_ARMGenerator() gopter.Gen {
	if snapshotProperties_STATUS_ARMGenerator != nil {
		return snapshotProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS_ARM(generators)
	snapshotProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SnapshotProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSnapshotProperties_STATUS_ARM(generators)
	snapshotProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SnapshotProperties_STATUS_ARM{}), generators)

	return snapshotProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshotProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CompletionPercent"] = gen.PtrOf(gen.Float64())
	gens["DataAccessAuthMode"] = gen.PtrOf(gen.OneConstOf(DataAccessAuthMode_STATUS_AzureActiveDirectory, DataAccessAuthMode_STATUS_None))
	gens["DiskAccessId"] = gen.PtrOf(gen.AlphaString())
	gens["DiskSizeBytes"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["DiskState"] = gen.PtrOf(gen.OneConstOf(
		DiskState_STATUS_ActiveSAS,
		DiskState_STATUS_ActiveSASFrozen,
		DiskState_STATUS_ActiveUpload,
		DiskState_STATUS_Attached,
		DiskState_STATUS_Frozen,
		DiskState_STATUS_ReadyToUpload,
		DiskState_STATUS_Reserved,
		DiskState_STATUS_Unattached))
	gens["HyperVGeneration"] = gen.PtrOf(gen.OneConstOf(SnapshotProperties_HyperVGeneration_STATUS_V1, SnapshotProperties_HyperVGeneration_STATUS_V2))
	gens["Incremental"] = gen.PtrOf(gen.Bool())
	gens["IncrementalSnapshotFamilyId"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkAccessPolicy"] = gen.PtrOf(gen.OneConstOf(NetworkAccessPolicy_STATUS_AllowAll, NetworkAccessPolicy_STATUS_AllowPrivate, NetworkAccessPolicy_STATUS_DenyAll))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(SnapshotProperties_OsType_STATUS_Linux, SnapshotProperties_OsType_STATUS_Windows))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccess_STATUS_Disabled, PublicNetworkAccess_STATUS_Enabled))
	gens["SupportsHibernation"] = gen.PtrOf(gen.Bool())
	gens["TimeCreated"] = gen.PtrOf(gen.AlphaString())
	gens["UniqueId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSnapshotProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSnapshotProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CopyCompletionError"] = gen.PtrOf(CopyCompletionError_STATUS_ARMGenerator())
	gens["CreationData"] = gen.PtrOf(CreationData_STATUS_ARMGenerator())
	gens["Encryption"] = gen.PtrOf(Encryption_STATUS_ARMGenerator())
	gens["EncryptionSettingsCollection"] = gen.PtrOf(EncryptionSettingsCollection_STATUS_ARMGenerator())
	gens["PurchasePlan"] = gen.PtrOf(PurchasePlan_STATUS_ARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(DiskSecurityProfile_STATUS_ARMGenerator())
	gens["SupportedCapabilities"] = gen.PtrOf(SupportedCapabilities_STATUS_ARMGenerator())
}

func Test_SnapshotSku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SnapshotSku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshotSku_STATUS_ARM, SnapshotSku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshotSku_STATUS_ARM runs a test to see if a specific instance of SnapshotSku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshotSku_STATUS_ARM(subject SnapshotSku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SnapshotSku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SnapshotSku_STATUS_ARM instances for property testing - lazily instantiated by
// SnapshotSku_STATUS_ARMGenerator()
var snapshotSku_STATUS_ARMGenerator gopter.Gen

// SnapshotSku_STATUS_ARMGenerator returns a generator of SnapshotSku_STATUS_ARM instances for property testing.
func SnapshotSku_STATUS_ARMGenerator() gopter.Gen {
	if snapshotSku_STATUS_ARMGenerator != nil {
		return snapshotSku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshotSku_STATUS_ARM(generators)
	snapshotSku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SnapshotSku_STATUS_ARM{}), generators)

	return snapshotSku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSnapshotSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshotSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(SnapshotSku_Name_STATUS_Premium_LRS, SnapshotSku_Name_STATUS_Standard_LRS, SnapshotSku_Name_STATUS_Standard_ZRS))
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_Snapshot_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Snapshot_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSnapshot_STATUS_ARM, Snapshot_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSnapshot_STATUS_ARM runs a test to see if a specific instance of Snapshot_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSnapshot_STATUS_ARM(subject Snapshot_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Snapshot_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Snapshot_STATUS_ARM instances for property testing - lazily instantiated by
// Snapshot_STATUS_ARMGenerator()
var snapshot_STATUS_ARMGenerator gopter.Gen

// Snapshot_STATUS_ARMGenerator returns a generator of Snapshot_STATUS_ARM instances for property testing.
// We first initialize snapshot_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Snapshot_STATUS_ARMGenerator() gopter.Gen {
	if snapshot_STATUS_ARMGenerator != nil {
		return snapshot_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshot_STATUS_ARM(generators)
	snapshot_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Snapshot_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSnapshot_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSnapshot_STATUS_ARM(generators)
	snapshot_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Snapshot_STATUS_ARM{}), generators)

	return snapshot_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSnapshot_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSnapshot_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedBy"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSnapshot_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSnapshot_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(SnapshotProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(SnapshotSku_STATUS_ARMGenerator())
}
