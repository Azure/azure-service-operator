// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20250401

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/compute/v1api20250401/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/compute/v1api20250401/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,compute}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2025-04-01/ComputeRP.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/capacityReservations/{capacityReservationName}
type CapacityReservation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CapacityReservation_Spec   `json:"spec,omitempty"`
	Status            CapacityReservation_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &CapacityReservation{}

// GetConditions returns the conditions of the resource
func (reservation *CapacityReservation) GetConditions() conditions.Conditions {
	return reservation.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (reservation *CapacityReservation) SetConditions(conditions conditions.Conditions) {
	reservation.Status.Conditions = conditions
}

var _ conversion.Convertible = &CapacityReservation{}

// ConvertFrom populates our CapacityReservation from the provided hub CapacityReservation
func (reservation *CapacityReservation) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.CapacityReservation)
	if !ok {
		return fmt.Errorf("expected compute/v1api20250401/storage/CapacityReservation but received %T instead", hub)
	}

	return reservation.AssignProperties_From_CapacityReservation(source)
}

// ConvertTo populates the provided hub CapacityReservation from our CapacityReservation
func (reservation *CapacityReservation) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.CapacityReservation)
	if !ok {
		return fmt.Errorf("expected compute/v1api20250401/storage/CapacityReservation but received %T instead", hub)
	}

	return reservation.AssignProperties_To_CapacityReservation(destination)
}

var _ configmaps.Exporter = &CapacityReservation{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (reservation *CapacityReservation) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if reservation.Spec.OperatorSpec == nil {
		return nil
	}
	return reservation.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &CapacityReservation{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (reservation *CapacityReservation) SecretDestinationExpressions() []*core.DestinationExpression {
	if reservation.Spec.OperatorSpec == nil {
		return nil
	}
	return reservation.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &CapacityReservation{}

// InitializeSpec initializes the spec for this resource from the given status
func (reservation *CapacityReservation) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*CapacityReservation_STATUS); ok {
		return reservation.Spec.Initialize_From_CapacityReservation_STATUS(s)
	}

	return fmt.Errorf("expected Status of type CapacityReservation_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &CapacityReservation{}

// AzureName returns the Azure name of the resource
func (reservation *CapacityReservation) AzureName() string {
	return reservation.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2025-04-01"
func (reservation CapacityReservation) GetAPIVersion() string {
	return "2025-04-01"
}

// GetResourceScope returns the scope of the resource
func (reservation *CapacityReservation) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (reservation *CapacityReservation) GetSpec() genruntime.ConvertibleSpec {
	return &reservation.Spec
}

// GetStatus returns the status of this resource
func (reservation *CapacityReservation) GetStatus() genruntime.ConvertibleStatus {
	return &reservation.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (reservation *CapacityReservation) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/capacityReservationGroups/capacityReservations"
func (reservation *CapacityReservation) GetType() string {
	return "Microsoft.Compute/capacityReservationGroups/capacityReservations"
}

// NewEmptyStatus returns a new empty (blank) status
func (reservation *CapacityReservation) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &CapacityReservation_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (reservation *CapacityReservation) Owner() *genruntime.ResourceReference {
	if reservation.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(reservation.Spec)
	return reservation.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (reservation *CapacityReservation) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*CapacityReservation_STATUS); ok {
		reservation.Status = *st
		return nil
	}

	// Convert status to required version
	var st CapacityReservation_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	reservation.Status = st
	return nil
}

// AssignProperties_From_CapacityReservation populates our CapacityReservation from the provided source CapacityReservation
func (reservation *CapacityReservation) AssignProperties_From_CapacityReservation(source *storage.CapacityReservation) error {

	// ObjectMeta
	reservation.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec CapacityReservation_Spec
	err := spec.AssignProperties_From_CapacityReservation_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_CapacityReservation_Spec() to populate field Spec")
	}
	reservation.Spec = spec

	// Status
	var status CapacityReservation_STATUS
	err = status.AssignProperties_From_CapacityReservation_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_CapacityReservation_STATUS() to populate field Status")
	}
	reservation.Status = status

	// No error
	return nil
}

// AssignProperties_To_CapacityReservation populates the provided destination CapacityReservation from our CapacityReservation
func (reservation *CapacityReservation) AssignProperties_To_CapacityReservation(destination *storage.CapacityReservation) error {

	// ObjectMeta
	destination.ObjectMeta = *reservation.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.CapacityReservation_Spec
	err := reservation.Spec.AssignProperties_To_CapacityReservation_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_CapacityReservation_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.CapacityReservation_STATUS
	err = reservation.Status.AssignProperties_To_CapacityReservation_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_CapacityReservation_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (reservation *CapacityReservation) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: reservation.Spec.OriginalVersion(),
		Kind:    "CapacityReservation",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2025-04-01/ComputeRP.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/capacityReservations/{capacityReservationName}
type CapacityReservationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CapacityReservation `json:"items"`
}

// +kubebuilder:validation:Enum={"2025-04-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2025-04-01")

type CapacityReservation_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *CapacityReservationOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a compute.azure.com/CapacityReservationGroup resource
	Owner *genruntime.KnownResourceReference `group:"compute.azure.com" json:"owner,omitempty" kind:"CapacityReservationGroup"`

	// ScheduleProfile: Defines the schedule for Block-type capacity reservations. Specifies the schedule during which capacity
	// reservation is active and VM or VMSS resource can be allocated using reservation. This property is required and only
	// supported when the capacity reservation group type is 'Block'. The scheduleProfile, start, and end fields are immutable
	// after creation. Minimum API version: 2025-04-01. Please refer to https://aka.ms/blockcapacityreservation for more
	// details.
	ScheduleProfile *ScheduleProfile `json:"scheduleProfile,omitempty"`

	// +kubebuilder:validation:Required
	// Sku: SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set.  For
	// Block capacity reservations, sku.capacity can only accept values 1, 2, 4, 8, 16, 32, 64. Currently VM Skus with the
	// capability called 'CapacityReservationSupported' set to true are supported. When 'CapacityReservationSupported' is true,
	// the SKU capability also specifies the 'SupportedCapacityReservationTypes', which lists the types of capacity
	// reservations (such as Targeted or Block) that the SKU supports. Refer to List Microsoft.Compute SKUs in a region
	// (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values.
	Sku *Sku `json:"sku,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Zones: The availability zones.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &CapacityReservation_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reservation *CapacityReservation_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reservation == nil {
		return nil, nil
	}
	result := &arm.CapacityReservation_Spec{}

	// Set property "Location":
	if reservation.Location != nil {
		location := *reservation.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if reservation.ScheduleProfile != nil {
		result.Properties = &arm.CapacityReservationProperties{}
	}
	if reservation.ScheduleProfile != nil {
		scheduleProfile_ARM, err := reservation.ScheduleProfile.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		scheduleProfile := *scheduleProfile_ARM.(*arm.ScheduleProfile)
		result.Properties.ScheduleProfile = &scheduleProfile
	}

	// Set property "Sku":
	if reservation.Sku != nil {
		sku_ARM, err := reservation.Sku.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *sku_ARM.(*arm.Sku)
		result.Sku = &sku
	}

	// Set property "Tags":
	if reservation.Tags != nil {
		result.Tags = make(map[string]string, len(reservation.Tags))
		for key, value := range reservation.Tags {
			result.Tags[key] = value
		}
	}

	// Set property "Zones":
	for _, item := range reservation.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reservation *CapacityReservation_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservation_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reservation *CapacityReservation_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservation_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservation_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	reservation.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		reservation.Location = &location
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	reservation.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "ScheduleProfile":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScheduleProfile != nil {
			var scheduleProfile1 ScheduleProfile
			err := scheduleProfile1.PopulateFromARM(owner, *typedInput.Properties.ScheduleProfile)
			if err != nil {
				return err
			}
			scheduleProfile := scheduleProfile1
			reservation.ScheduleProfile = &scheduleProfile
		}
	}

	// Set property "Sku":
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		reservation.Sku = &sku
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		reservation.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			reservation.Tags[key] = value
		}
	}

	// Set property "Zones":
	for _, item := range typedInput.Zones {
		reservation.Zones = append(reservation.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &CapacityReservation_Spec{}

// ConvertSpecFrom populates our CapacityReservation_Spec from the provided source
func (reservation *CapacityReservation_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.CapacityReservation_Spec)
	if ok {
		// Populate our instance from source
		return reservation.AssignProperties_From_CapacityReservation_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.CapacityReservation_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = reservation.AssignProperties_From_CapacityReservation_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our CapacityReservation_Spec
func (reservation *CapacityReservation_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.CapacityReservation_Spec)
	if ok {
		// Populate destination from our instance
		return reservation.AssignProperties_To_CapacityReservation_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.CapacityReservation_Spec{}
	err := reservation.AssignProperties_To_CapacityReservation_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_CapacityReservation_Spec populates our CapacityReservation_Spec from the provided source CapacityReservation_Spec
func (reservation *CapacityReservation_Spec) AssignProperties_From_CapacityReservation_Spec(source *storage.CapacityReservation_Spec) error {

	// AzureName
	reservation.AzureName = source.AzureName

	// Location
	reservation.Location = genruntime.ClonePointerToString(source.Location)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec CapacityReservationOperatorSpec
		err := operatorSpec.AssignProperties_From_CapacityReservationOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationOperatorSpec() to populate field OperatorSpec")
		}
		reservation.OperatorSpec = &operatorSpec
	} else {
		reservation.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		reservation.Owner = &owner
	} else {
		reservation.Owner = nil
	}

	// ScheduleProfile
	if source.ScheduleProfile != nil {
		var scheduleProfile ScheduleProfile
		err := scheduleProfile.AssignProperties_From_ScheduleProfile(source.ScheduleProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_ScheduleProfile() to populate field ScheduleProfile")
		}
		reservation.ScheduleProfile = &scheduleProfile
	} else {
		reservation.ScheduleProfile = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignProperties_From_Sku(source.Sku)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_Sku() to populate field Sku")
		}
		reservation.Sku = &sku
	} else {
		reservation.Sku = nil
	}

	// Tags
	reservation.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	reservation.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_CapacityReservation_Spec populates the provided destination CapacityReservation_Spec from our CapacityReservation_Spec
func (reservation *CapacityReservation_Spec) AssignProperties_To_CapacityReservation_Spec(destination *storage.CapacityReservation_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = reservation.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(reservation.Location)

	// OperatorSpec
	if reservation.OperatorSpec != nil {
		var operatorSpec storage.CapacityReservationOperatorSpec
		err := reservation.OperatorSpec.AssignProperties_To_CapacityReservationOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = reservation.OriginalVersion()

	// Owner
	if reservation.Owner != nil {
		owner := reservation.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// ScheduleProfile
	if reservation.ScheduleProfile != nil {
		var scheduleProfile storage.ScheduleProfile
		err := reservation.ScheduleProfile.AssignProperties_To_ScheduleProfile(&scheduleProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_ScheduleProfile() to populate field ScheduleProfile")
		}
		destination.ScheduleProfile = &scheduleProfile
	} else {
		destination.ScheduleProfile = nil
	}

	// Sku
	if reservation.Sku != nil {
		var sku storage.Sku
		err := reservation.Sku.AssignProperties_To_Sku(&sku)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_Sku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(reservation.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(reservation.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_CapacityReservation_STATUS populates our CapacityReservation_Spec from the provided source CapacityReservation_STATUS
func (reservation *CapacityReservation_Spec) Initialize_From_CapacityReservation_STATUS(source *CapacityReservation_STATUS) error {

	// Location
	reservation.Location = genruntime.ClonePointerToString(source.Location)

	// ScheduleProfile
	if source.ScheduleProfile != nil {
		var scheduleProfile ScheduleProfile
		err := scheduleProfile.Initialize_From_ScheduleProfile_STATUS(source.ScheduleProfile)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_ScheduleProfile_STATUS() to populate field ScheduleProfile")
		}
		reservation.ScheduleProfile = &scheduleProfile
	} else {
		reservation.ScheduleProfile = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.Initialize_From_Sku_STATUS(source.Sku)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_Sku_STATUS() to populate field Sku")
		}
		reservation.Sku = &sku
	} else {
		reservation.Sku = nil
	}

	// Tags
	reservation.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	reservation.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (reservation *CapacityReservation_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (reservation *CapacityReservation_Spec) SetAzureName(azureName string) {
	reservation.AzureName = azureName
}

type CapacityReservation_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// InstanceView: The Capacity reservation instance view.
	InstanceView *CapacityReservationInstanceView_STATUS `json:"instanceView,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// PlatformFaultDomainCount: Specifies the value of fault domain count that Capacity Reservation supports for requested VM
	// size. Note: The fault domain count specified for a resource (like virtual machines scale set) must be less than or equal
	// to this value if it deploys using capacity reservation. Minimum api-version: 2022-08-01.
	PlatformFaultDomainCount *int `json:"platformFaultDomainCount,omitempty"`

	// ProvisioningState: The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// ProvisioningTime: The date time when the capacity reservation was last updated.
	ProvisioningTime *string `json:"provisioningTime,omitempty"`

	// ReservationId: A unique id generated and assigned to the capacity reservation by the platform which does not change
	// throughout the lifetime of the resource.
	ReservationId *string `json:"reservationId,omitempty"`

	// ScheduleProfile: Defines the schedule for Block-type capacity reservations. Specifies the schedule during which capacity
	// reservation is active and VM or VMSS resource can be allocated using reservation. This property is required and only
	// supported when the capacity reservation group type is 'Block'. The scheduleProfile, start, and end fields are immutable
	// after creation. Minimum API version: 2025-04-01. Please refer to https://aka.ms/blockcapacityreservation for more
	// details.
	ScheduleProfile *ScheduleProfile_STATUS `json:"scheduleProfile,omitempty"`

	// Sku: SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set.  For
	// Block capacity reservations, sku.capacity can only accept values 1, 2, 4, 8, 16, 32, 64. Currently VM Skus with the
	// capability called 'CapacityReservationSupported' set to true are supported. When 'CapacityReservationSupported' is true,
	// the SKU capability also specifies the 'SupportedCapacityReservationTypes', which lists the types of capacity
	// reservations (such as Targeted or Block) that the SKU supports. Refer to List Microsoft.Compute SKUs in a region
	// (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values.
	Sku *Sku_STATUS `json:"sku,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// TimeCreated: Specifies the time at which the Capacity Reservation resource was created. Minimum api-version: 2021-11-01.
	TimeCreated *string `json:"timeCreated,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	// VirtualMachinesAssociated: A list of all virtual machine resource ids that are associated with the capacity reservation.
	VirtualMachinesAssociated []SubResourceReadOnly_STATUS `json:"virtualMachinesAssociated,omitempty"`

	// Zones: The availability zones.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &CapacityReservation_STATUS{}

// ConvertStatusFrom populates our CapacityReservation_STATUS from the provided source
func (reservation *CapacityReservation_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.CapacityReservation_STATUS)
	if ok {
		// Populate our instance from source
		return reservation.AssignProperties_From_CapacityReservation_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.CapacityReservation_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = reservation.AssignProperties_From_CapacityReservation_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our CapacityReservation_STATUS
func (reservation *CapacityReservation_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.CapacityReservation_STATUS)
	if ok {
		// Populate destination from our instance
		return reservation.AssignProperties_To_CapacityReservation_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.CapacityReservation_STATUS{}
	err := reservation.AssignProperties_To_CapacityReservation_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &CapacityReservation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reservation *CapacityReservation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservation_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reservation *CapacityReservation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservation_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservation_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		reservation.Id = &id
	}

	// Set property "InstanceView":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InstanceView != nil {
			var instanceView1 CapacityReservationInstanceView_STATUS
			err := instanceView1.PopulateFromARM(owner, *typedInput.Properties.InstanceView)
			if err != nil {
				return err
			}
			instanceView := instanceView1
			reservation.InstanceView = &instanceView
		}
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		reservation.Location = &location
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		reservation.Name = &name
	}

	// Set property "PlatformFaultDomainCount":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PlatformFaultDomainCount != nil {
			platformFaultDomainCount := *typedInput.Properties.PlatformFaultDomainCount
			reservation.PlatformFaultDomainCount = &platformFaultDomainCount
		}
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			reservation.ProvisioningState = &provisioningState
		}
	}

	// Set property "ProvisioningTime":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningTime != nil {
			provisioningTime := *typedInput.Properties.ProvisioningTime
			reservation.ProvisioningTime = &provisioningTime
		}
	}

	// Set property "ReservationId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReservationId != nil {
			reservationId := *typedInput.Properties.ReservationId
			reservation.ReservationId = &reservationId
		}
	}

	// Set property "ScheduleProfile":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScheduleProfile != nil {
			var scheduleProfile1 ScheduleProfile_STATUS
			err := scheduleProfile1.PopulateFromARM(owner, *typedInput.Properties.ScheduleProfile)
			if err != nil {
				return err
			}
			scheduleProfile := scheduleProfile1
			reservation.ScheduleProfile = &scheduleProfile
		}
	}

	// Set property "Sku":
	if typedInput.Sku != nil {
		var sku1 Sku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		reservation.Sku = &sku
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		reservation.SystemData = &systemData
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		reservation.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			reservation.Tags[key] = value
		}
	}

	// Set property "TimeCreated":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TimeCreated != nil {
			timeCreated := *typedInput.Properties.TimeCreated
			reservation.TimeCreated = &timeCreated
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		reservation.Type = &typeVar
	}

	// Set property "VirtualMachinesAssociated":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.VirtualMachinesAssociated {
			var item1 SubResourceReadOnly_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			reservation.VirtualMachinesAssociated = append(reservation.VirtualMachinesAssociated, item1)
		}
	}

	// Set property "Zones":
	for _, item := range typedInput.Zones {
		reservation.Zones = append(reservation.Zones, item)
	}

	// No error
	return nil
}

// AssignProperties_From_CapacityReservation_STATUS populates our CapacityReservation_STATUS from the provided source CapacityReservation_STATUS
func (reservation *CapacityReservation_STATUS) AssignProperties_From_CapacityReservation_STATUS(source *storage.CapacityReservation_STATUS) error {

	// Conditions
	reservation.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	reservation.Id = genruntime.ClonePointerToString(source.Id)

	// InstanceView
	if source.InstanceView != nil {
		var instanceView CapacityReservationInstanceView_STATUS
		err := instanceView.AssignProperties_From_CapacityReservationInstanceView_STATUS(source.InstanceView)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationInstanceView_STATUS() to populate field InstanceView")
		}
		reservation.InstanceView = &instanceView
	} else {
		reservation.InstanceView = nil
	}

	// Location
	reservation.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	reservation.Name = genruntime.ClonePointerToString(source.Name)

	// PlatformFaultDomainCount
	reservation.PlatformFaultDomainCount = genruntime.ClonePointerToInt(source.PlatformFaultDomainCount)

	// ProvisioningState
	reservation.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ProvisioningTime
	reservation.ProvisioningTime = genruntime.ClonePointerToString(source.ProvisioningTime)

	// ReservationId
	reservation.ReservationId = genruntime.ClonePointerToString(source.ReservationId)

	// ScheduleProfile
	if source.ScheduleProfile != nil {
		var scheduleProfile ScheduleProfile_STATUS
		err := scheduleProfile.AssignProperties_From_ScheduleProfile_STATUS(source.ScheduleProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_ScheduleProfile_STATUS() to populate field ScheduleProfile")
		}
		reservation.ScheduleProfile = &scheduleProfile
	} else {
		reservation.ScheduleProfile = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignProperties_From_Sku_STATUS(source.Sku)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_Sku_STATUS() to populate field Sku")
		}
		reservation.Sku = &sku
	} else {
		reservation.Sku = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		reservation.SystemData = &systemDatum
	} else {
		reservation.SystemData = nil
	}

	// Tags
	reservation.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TimeCreated
	reservation.TimeCreated = genruntime.ClonePointerToString(source.TimeCreated)

	// Type
	reservation.Type = genruntime.ClonePointerToString(source.Type)

	// VirtualMachinesAssociated
	if source.VirtualMachinesAssociated != nil {
		virtualMachinesAssociatedList := make([]SubResourceReadOnly_STATUS, len(source.VirtualMachinesAssociated))
		for virtualMachinesAssociatedIndex, virtualMachinesAssociatedItem := range source.VirtualMachinesAssociated {
			var virtualMachinesAssociated SubResourceReadOnly_STATUS
			err := virtualMachinesAssociated.AssignProperties_From_SubResourceReadOnly_STATUS(&virtualMachinesAssociatedItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAssociated")
			}
			virtualMachinesAssociatedList[virtualMachinesAssociatedIndex] = virtualMachinesAssociated
		}
		reservation.VirtualMachinesAssociated = virtualMachinesAssociatedList
	} else {
		reservation.VirtualMachinesAssociated = nil
	}

	// Zones
	reservation.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_CapacityReservation_STATUS populates the provided destination CapacityReservation_STATUS from our CapacityReservation_STATUS
func (reservation *CapacityReservation_STATUS) AssignProperties_To_CapacityReservation_STATUS(destination *storage.CapacityReservation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(reservation.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(reservation.Id)

	// InstanceView
	if reservation.InstanceView != nil {
		var instanceView storage.CapacityReservationInstanceView_STATUS
		err := reservation.InstanceView.AssignProperties_To_CapacityReservationInstanceView_STATUS(&instanceView)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationInstanceView_STATUS() to populate field InstanceView")
		}
		destination.InstanceView = &instanceView
	} else {
		destination.InstanceView = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(reservation.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(reservation.Name)

	// PlatformFaultDomainCount
	destination.PlatformFaultDomainCount = genruntime.ClonePointerToInt(reservation.PlatformFaultDomainCount)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(reservation.ProvisioningState)

	// ProvisioningTime
	destination.ProvisioningTime = genruntime.ClonePointerToString(reservation.ProvisioningTime)

	// ReservationId
	destination.ReservationId = genruntime.ClonePointerToString(reservation.ReservationId)

	// ScheduleProfile
	if reservation.ScheduleProfile != nil {
		var scheduleProfile storage.ScheduleProfile_STATUS
		err := reservation.ScheduleProfile.AssignProperties_To_ScheduleProfile_STATUS(&scheduleProfile)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_ScheduleProfile_STATUS() to populate field ScheduleProfile")
		}
		destination.ScheduleProfile = &scheduleProfile
	} else {
		destination.ScheduleProfile = nil
	}

	// Sku
	if reservation.Sku != nil {
		var sku storage.Sku_STATUS
		err := reservation.Sku.AssignProperties_To_Sku_STATUS(&sku)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_Sku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SystemData
	if reservation.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := reservation.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(reservation.Tags)

	// TimeCreated
	destination.TimeCreated = genruntime.ClonePointerToString(reservation.TimeCreated)

	// Type
	destination.Type = genruntime.ClonePointerToString(reservation.Type)

	// VirtualMachinesAssociated
	if reservation.VirtualMachinesAssociated != nil {
		virtualMachinesAssociatedList := make([]storage.SubResourceReadOnly_STATUS, len(reservation.VirtualMachinesAssociated))
		for virtualMachinesAssociatedIndex, virtualMachinesAssociatedItem := range reservation.VirtualMachinesAssociated {
			var virtualMachinesAssociated storage.SubResourceReadOnly_STATUS
			err := virtualMachinesAssociatedItem.AssignProperties_To_SubResourceReadOnly_STATUS(&virtualMachinesAssociated)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAssociated")
			}
			virtualMachinesAssociatedList[virtualMachinesAssociatedIndex] = virtualMachinesAssociated
		}
		destination.VirtualMachinesAssociated = virtualMachinesAssociatedList
	} else {
		destination.VirtualMachinesAssociated = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(reservation.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity
// reservation that is managed by the platform and can change outside of control plane operations.
type CapacityReservationInstanceView_STATUS struct {
	// Statuses: The resource status information.
	Statuses []InstanceViewStatus_STATUS `json:"statuses,omitempty"`

	// UtilizationInfo: Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilization_STATUS `json:"utilizationInfo,omitempty"`
}

var _ genruntime.FromARMConverter = &CapacityReservationInstanceView_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (view *CapacityReservationInstanceView_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservationInstanceView_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (view *CapacityReservationInstanceView_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservationInstanceView_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservationInstanceView_STATUS, got %T", armInput)
	}

	// Set property "Statuses":
	for _, item := range typedInput.Statuses {
		var item1 InstanceViewStatus_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		view.Statuses = append(view.Statuses, item1)
	}

	// Set property "UtilizationInfo":
	if typedInput.UtilizationInfo != nil {
		var utilizationInfo1 CapacityReservationUtilization_STATUS
		err := utilizationInfo1.PopulateFromARM(owner, *typedInput.UtilizationInfo)
		if err != nil {
			return err
		}
		utilizationInfo := utilizationInfo1
		view.UtilizationInfo = &utilizationInfo
	}

	// No error
	return nil
}

// AssignProperties_From_CapacityReservationInstanceView_STATUS populates our CapacityReservationInstanceView_STATUS from the provided source CapacityReservationInstanceView_STATUS
func (view *CapacityReservationInstanceView_STATUS) AssignProperties_From_CapacityReservationInstanceView_STATUS(source *storage.CapacityReservationInstanceView_STATUS) error {

	// Statuses
	if source.Statuses != nil {
		statusList := make([]InstanceViewStatus_STATUS, len(source.Statuses))
		for statusIndex, statusItem := range source.Statuses {
			var status InstanceViewStatus_STATUS
			err := status.AssignProperties_From_InstanceViewStatus_STATUS(&statusItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_InstanceViewStatus_STATUS() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		view.Statuses = statusList
	} else {
		view.Statuses = nil
	}

	// UtilizationInfo
	if source.UtilizationInfo != nil {
		var utilizationInfo CapacityReservationUtilization_STATUS
		err := utilizationInfo.AssignProperties_From_CapacityReservationUtilization_STATUS(source.UtilizationInfo)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_CapacityReservationUtilization_STATUS() to populate field UtilizationInfo")
		}
		view.UtilizationInfo = &utilizationInfo
	} else {
		view.UtilizationInfo = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationInstanceView_STATUS populates the provided destination CapacityReservationInstanceView_STATUS from our CapacityReservationInstanceView_STATUS
func (view *CapacityReservationInstanceView_STATUS) AssignProperties_To_CapacityReservationInstanceView_STATUS(destination *storage.CapacityReservationInstanceView_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Statuses
	if view.Statuses != nil {
		statusList := make([]storage.InstanceViewStatus_STATUS, len(view.Statuses))
		for statusIndex, statusItem := range view.Statuses {
			var status storage.InstanceViewStatus_STATUS
			err := statusItem.AssignProperties_To_InstanceViewStatus_STATUS(&status)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_InstanceViewStatus_STATUS() to populate field Statuses")
			}
			statusList[statusIndex] = status
		}
		destination.Statuses = statusList
	} else {
		destination.Statuses = nil
	}

	// UtilizationInfo
	if view.UtilizationInfo != nil {
		var utilizationInfo storage.CapacityReservationUtilization_STATUS
		err := view.UtilizationInfo.AssignProperties_To_CapacityReservationUtilization_STATUS(&utilizationInfo)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_CapacityReservationUtilization_STATUS() to populate field UtilizationInfo")
		}
		destination.UtilizationInfo = &utilizationInfo
	} else {
		destination.UtilizationInfo = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type CapacityReservationOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_CapacityReservationOperatorSpec populates our CapacityReservationOperatorSpec from the provided source CapacityReservationOperatorSpec
func (operator *CapacityReservationOperatorSpec) AssignProperties_From_CapacityReservationOperatorSpec(source *storage.CapacityReservationOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationOperatorSpec populates the provided destination CapacityReservationOperatorSpec from our CapacityReservationOperatorSpec
func (operator *CapacityReservationOperatorSpec) AssignProperties_To_CapacityReservationOperatorSpec(destination *storage.CapacityReservationOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Defines the schedule for Block-type capacity reservations. Specifies the schedule during which capacity reservation is
// active and VM or VMSS resource can be allocated using reservation. This property is required and only supported when the
// capacity reservation group type is 'Block'. The scheduleProfile, start, and end fields are immutable after creation.
// Minimum API version: 2025-04-01. Please refer to https://aka.ms/blockcapacityreservation for more details.
type ScheduleProfile struct {
	// End: The required end date for block capacity reservations. Must be after the start date, with a duration of either
	// 1–14 whole days or 3–26 whole weeks. Example: 2025-06-28.
	End *string `json:"end,omitempty"`

	// Start: The required start date for block capacity reservations. Must be today or within 56 days in the future. For
	// same-day scheduling, requests must be submitted before 11:30 AM UTC. Example: 2025-06-27.
	Start *string `json:"start,omitempty"`
}

var _ genruntime.ARMTransformer = &ScheduleProfile{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *ScheduleProfile) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	result := &arm.ScheduleProfile{}

	// Set property "End":
	if profile.End != nil {
		end := *profile.End
		result.End = &end
	}

	// Set property "Start":
	if profile.Start != nil {
		start := *profile.Start
		result.Start = &start
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *ScheduleProfile) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ScheduleProfile{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *ScheduleProfile) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ScheduleProfile)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ScheduleProfile, got %T", armInput)
	}

	// Set property "End":
	if typedInput.End != nil {
		end := *typedInput.End
		profile.End = &end
	}

	// Set property "Start":
	if typedInput.Start != nil {
		start := *typedInput.Start
		profile.Start = &start
	}

	// No error
	return nil
}

// AssignProperties_From_ScheduleProfile populates our ScheduleProfile from the provided source ScheduleProfile
func (profile *ScheduleProfile) AssignProperties_From_ScheduleProfile(source *storage.ScheduleProfile) error {

	// End
	profile.End = genruntime.ClonePointerToString(source.End)

	// Start
	profile.Start = genruntime.ClonePointerToString(source.Start)

	// No error
	return nil
}

// AssignProperties_To_ScheduleProfile populates the provided destination ScheduleProfile from our ScheduleProfile
func (profile *ScheduleProfile) AssignProperties_To_ScheduleProfile(destination *storage.ScheduleProfile) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// End
	destination.End = genruntime.ClonePointerToString(profile.End)

	// Start
	destination.Start = genruntime.ClonePointerToString(profile.Start)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ScheduleProfile_STATUS populates our ScheduleProfile from the provided source ScheduleProfile_STATUS
func (profile *ScheduleProfile) Initialize_From_ScheduleProfile_STATUS(source *ScheduleProfile_STATUS) error {

	// End
	profile.End = genruntime.ClonePointerToString(source.End)

	// Start
	profile.Start = genruntime.ClonePointerToString(source.Start)

	// No error
	return nil
}

// Defines the schedule for Block-type capacity reservations. Specifies the schedule during which capacity reservation is
// active and VM or VMSS resource can be allocated using reservation. This property is required and only supported when the
// capacity reservation group type is 'Block'. The scheduleProfile, start, and end fields are immutable after creation.
// Minimum API version: 2025-04-01. Please refer to https://aka.ms/blockcapacityreservation for more details.
type ScheduleProfile_STATUS struct {
	// End: The required end date for block capacity reservations. Must be after the start date, with a duration of either
	// 1–14 whole days or 3–26 whole weeks. Example: 2025-06-28.
	End *string `json:"end,omitempty"`

	// Start: The required start date for block capacity reservations. Must be today or within 56 days in the future. For
	// same-day scheduling, requests must be submitted before 11:30 AM UTC. Example: 2025-06-27.
	Start *string `json:"start,omitempty"`
}

var _ genruntime.FromARMConverter = &ScheduleProfile_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *ScheduleProfile_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.ScheduleProfile_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *ScheduleProfile_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.ScheduleProfile_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.ScheduleProfile_STATUS, got %T", armInput)
	}

	// Set property "End":
	if typedInput.End != nil {
		end := *typedInput.End
		profile.End = &end
	}

	// Set property "Start":
	if typedInput.Start != nil {
		start := *typedInput.Start
		profile.Start = &start
	}

	// No error
	return nil
}

// AssignProperties_From_ScheduleProfile_STATUS populates our ScheduleProfile_STATUS from the provided source ScheduleProfile_STATUS
func (profile *ScheduleProfile_STATUS) AssignProperties_From_ScheduleProfile_STATUS(source *storage.ScheduleProfile_STATUS) error {

	// End
	profile.End = genruntime.ClonePointerToString(source.End)

	// Start
	profile.Start = genruntime.ClonePointerToString(source.Start)

	// No error
	return nil
}

// AssignProperties_To_ScheduleProfile_STATUS populates the provided destination ScheduleProfile_STATUS from our ScheduleProfile_STATUS
func (profile *ScheduleProfile_STATUS) AssignProperties_To_ScheduleProfile_STATUS(destination *storage.ScheduleProfile_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// End
	destination.End = genruntime.ClonePointerToString(profile.End)

	// Start
	destination.Start = genruntime.ClonePointerToString(profile.Start)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is
// currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type Sku struct {
	// Capacity: Specifies the number of virtual machines in the scale set.
	Capacity *int `json:"capacity,omitempty"`

	// Name: The sku name.
	Name *string `json:"name,omitempty"`

	// Tier: Specifies the tier of virtual machines in a scale set.
	// Possible Values:
	// Standard
	// Basic
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	result := &arm.Sku{}

	// Set property "Capacity":
	if sku.Capacity != nil {
		capacity := *sku.Capacity
		result.Capacity = &capacity
	}

	// Set property "Name":
	if sku.Name != nil {
		name := *sku.Name
		result.Name = &name
	}

	// Set property "Tier":
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Sku{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Sku)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Sku, got %T", armInput)
	}

	// Set property "Capacity":
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property "Tier":
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignProperties_From_Sku populates our Sku from the provided source Sku
func (sku *Sku) AssignProperties_From_Sku(source *storage.Sku) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	sku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignProperties_To_Sku populates the provided destination Sku from our Sku
func (sku *Sku) AssignProperties_To_Sku(destination *storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(sku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Sku_STATUS populates our Sku from the provided source Sku_STATUS
func (sku *Sku) Initialize_From_Sku_STATUS(source *Sku_STATUS) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	sku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is
// currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type Sku_STATUS struct {
	// Capacity: Specifies the number of virtual machines in the scale set.
	Capacity *int `json:"capacity,omitempty"`

	// Name: The sku name.
	Name *string `json:"name,omitempty"`

	// Tier: Specifies the tier of virtual machines in a scale set.
	// Possible Values:
	// Standard
	// Basic
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Sku_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Sku_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Sku_STATUS, got %T", armInput)
	}

	// Set property "Capacity":
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property "Tier":
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignProperties_From_Sku_STATUS populates our Sku_STATUS from the provided source Sku_STATUS
func (sku *Sku_STATUS) AssignProperties_From_Sku_STATUS(source *storage.Sku_STATUS) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	sku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignProperties_To_Sku_STATUS populates the provided destination Sku_STATUS from our Sku_STATUS
func (sku *Sku_STATUS) AssignProperties_To_Sku_STATUS(destination *storage.Sku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(sku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SubResourceReadOnly_STATUS struct {
	// Id: Resource Id
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SubResourceReadOnly_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (only *SubResourceReadOnly_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SubResourceReadOnly_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (only *SubResourceReadOnly_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SubResourceReadOnly_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SubResourceReadOnly_STATUS, got %T", armInput)
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		only.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_SubResourceReadOnly_STATUS populates our SubResourceReadOnly_STATUS from the provided source SubResourceReadOnly_STATUS
func (only *SubResourceReadOnly_STATUS) AssignProperties_From_SubResourceReadOnly_STATUS(source *storage.SubResourceReadOnly_STATUS) error {

	// Id
	only.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_SubResourceReadOnly_STATUS populates the provided destination SubResourceReadOnly_STATUS from our SubResourceReadOnly_STATUS
func (only *SubResourceReadOnly_STATUS) AssignProperties_To_SubResourceReadOnly_STATUS(destination *storage.SubResourceReadOnly_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(only.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemData_CreatedByType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemData_LastModifiedByType_STATUS `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SystemData_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SystemData_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SystemData_STATUS, got %T", armInput)
	}

	// Set property "CreatedAt":
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property "CreatedBy":
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property "CreatedByType":
	if typedInput.CreatedByType != nil {
		var temp string
		temp = string(*typedInput.CreatedByType)
		createdByType := SystemData_CreatedByType_STATUS(temp)
		data.CreatedByType = &createdByType
	}

	// Set property "LastModifiedAt":
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property "LastModifiedBy":
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property "LastModifiedByType":
	if typedInput.LastModifiedByType != nil {
		var temp string
		temp = string(*typedInput.LastModifiedByType)
		lastModifiedByType := SystemData_LastModifiedByType_STATUS(temp)
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *storage.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := *source.CreatedByType
		createdByTypeTemp := genruntime.ToEnum(createdByType, systemData_CreatedByType_STATUS_Values)
		data.CreatedByType = &createdByTypeTemp
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := *source.LastModifiedByType
		lastModifiedByTypeTemp := genruntime.ToEnum(lastModifiedByType, systemData_LastModifiedByType_STATUS_Values)
		data.LastModifiedByType = &lastModifiedByTypeTemp
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *storage.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Represents the capacity reservation utilization in terms of resources allocated.
type CapacityReservationUtilization_STATUS struct {
	// CurrentCapacity: The value provides the current capacity of the VM size which was reserved successfully and for which
	// the customer is getting billed. Minimum api-version: 2022-08-01.
	CurrentCapacity *int `json:"currentCapacity,omitempty"`

	// VirtualMachinesAllocated: A list of all virtual machines resource ids allocated against the capacity reservation.
	VirtualMachinesAllocated []SubResourceReadOnly_STATUS `json:"virtualMachinesAllocated,omitempty"`
}

var _ genruntime.FromARMConverter = &CapacityReservationUtilization_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (utilization *CapacityReservationUtilization_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.CapacityReservationUtilization_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (utilization *CapacityReservationUtilization_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.CapacityReservationUtilization_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.CapacityReservationUtilization_STATUS, got %T", armInput)
	}

	// Set property "CurrentCapacity":
	if typedInput.CurrentCapacity != nil {
		currentCapacity := *typedInput.CurrentCapacity
		utilization.CurrentCapacity = &currentCapacity
	}

	// Set property "VirtualMachinesAllocated":
	for _, item := range typedInput.VirtualMachinesAllocated {
		var item1 SubResourceReadOnly_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		utilization.VirtualMachinesAllocated = append(utilization.VirtualMachinesAllocated, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_CapacityReservationUtilization_STATUS populates our CapacityReservationUtilization_STATUS from the provided source CapacityReservationUtilization_STATUS
func (utilization *CapacityReservationUtilization_STATUS) AssignProperties_From_CapacityReservationUtilization_STATUS(source *storage.CapacityReservationUtilization_STATUS) error {

	// CurrentCapacity
	utilization.CurrentCapacity = genruntime.ClonePointerToInt(source.CurrentCapacity)

	// VirtualMachinesAllocated
	if source.VirtualMachinesAllocated != nil {
		virtualMachinesAllocatedList := make([]SubResourceReadOnly_STATUS, len(source.VirtualMachinesAllocated))
		for virtualMachinesAllocatedIndex, virtualMachinesAllocatedItem := range source.VirtualMachinesAllocated {
			var virtualMachinesAllocated SubResourceReadOnly_STATUS
			err := virtualMachinesAllocated.AssignProperties_From_SubResourceReadOnly_STATUS(&virtualMachinesAllocatedItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAllocated")
			}
			virtualMachinesAllocatedList[virtualMachinesAllocatedIndex] = virtualMachinesAllocated
		}
		utilization.VirtualMachinesAllocated = virtualMachinesAllocatedList
	} else {
		utilization.VirtualMachinesAllocated = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CapacityReservationUtilization_STATUS populates the provided destination CapacityReservationUtilization_STATUS from our CapacityReservationUtilization_STATUS
func (utilization *CapacityReservationUtilization_STATUS) AssignProperties_To_CapacityReservationUtilization_STATUS(destination *storage.CapacityReservationUtilization_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CurrentCapacity
	destination.CurrentCapacity = genruntime.ClonePointerToInt(utilization.CurrentCapacity)

	// VirtualMachinesAllocated
	if utilization.VirtualMachinesAllocated != nil {
		virtualMachinesAllocatedList := make([]storage.SubResourceReadOnly_STATUS, len(utilization.VirtualMachinesAllocated))
		for virtualMachinesAllocatedIndex, virtualMachinesAllocatedItem := range utilization.VirtualMachinesAllocated {
			var virtualMachinesAllocated storage.SubResourceReadOnly_STATUS
			err := virtualMachinesAllocatedItem.AssignProperties_To_SubResourceReadOnly_STATUS(&virtualMachinesAllocated)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_SubResourceReadOnly_STATUS() to populate field VirtualMachinesAllocated")
			}
			virtualMachinesAllocatedList[virtualMachinesAllocatedIndex] = virtualMachinesAllocated
		}
		destination.VirtualMachinesAllocated = virtualMachinesAllocatedList
	} else {
		destination.VirtualMachinesAllocated = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Instance view status.
type InstanceViewStatus_STATUS struct {
	// Code: The status code.
	Code *string `json:"code,omitempty"`

	// DisplayStatus: The short localizable label for the status.
	DisplayStatus *string `json:"displayStatus,omitempty"`

	// Level: The level code.
	Level *StatusLevelTypes_STATUS `json:"level,omitempty"`

	// Message: The detailed status message, including for alerts and error messages.
	Message *string `json:"message,omitempty"`

	// Time: The time of the status.
	Time *string `json:"time,omitempty"`
}

var _ genruntime.FromARMConverter = &InstanceViewStatus_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (status *InstanceViewStatus_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.InstanceViewStatus_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (status *InstanceViewStatus_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.InstanceViewStatus_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.InstanceViewStatus_STATUS, got %T", armInput)
	}

	// Set property "Code":
	if typedInput.Code != nil {
		code := *typedInput.Code
		status.Code = &code
	}

	// Set property "DisplayStatus":
	if typedInput.DisplayStatus != nil {
		displayStatus := *typedInput.DisplayStatus
		status.DisplayStatus = &displayStatus
	}

	// Set property "Level":
	if typedInput.Level != nil {
		var temp string
		temp = string(*typedInput.Level)
		level := StatusLevelTypes_STATUS(temp)
		status.Level = &level
	}

	// Set property "Message":
	if typedInput.Message != nil {
		message := *typedInput.Message
		status.Message = &message
	}

	// Set property "Time":
	if typedInput.Time != nil {
		time := *typedInput.Time
		status.Time = &time
	}

	// No error
	return nil
}

// AssignProperties_From_InstanceViewStatus_STATUS populates our InstanceViewStatus_STATUS from the provided source InstanceViewStatus_STATUS
func (status *InstanceViewStatus_STATUS) AssignProperties_From_InstanceViewStatus_STATUS(source *storage.InstanceViewStatus_STATUS) error {

	// Code
	status.Code = genruntime.ClonePointerToString(source.Code)

	// DisplayStatus
	status.DisplayStatus = genruntime.ClonePointerToString(source.DisplayStatus)

	// Level
	if source.Level != nil {
		level := *source.Level
		levelTemp := genruntime.ToEnum(level, statusLevelTypes_STATUS_Values)
		status.Level = &levelTemp
	} else {
		status.Level = nil
	}

	// Message
	status.Message = genruntime.ClonePointerToString(source.Message)

	// Time
	status.Time = genruntime.ClonePointerToString(source.Time)

	// No error
	return nil
}

// AssignProperties_To_InstanceViewStatus_STATUS populates the provided destination InstanceViewStatus_STATUS from our InstanceViewStatus_STATUS
func (status *InstanceViewStatus_STATUS) AssignProperties_To_InstanceViewStatus_STATUS(destination *storage.InstanceViewStatus_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Code
	destination.Code = genruntime.ClonePointerToString(status.Code)

	// DisplayStatus
	destination.DisplayStatus = genruntime.ClonePointerToString(status.DisplayStatus)

	// Level
	if status.Level != nil {
		level := string(*status.Level)
		destination.Level = &level
	} else {
		destination.Level = nil
	}

	// Message
	destination.Message = genruntime.ClonePointerToString(status.Message)

	// Time
	destination.Time = genruntime.ClonePointerToString(status.Time)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_CreatedByType_STATUS string

const (
	SystemData_CreatedByType_STATUS_Application     = SystemData_CreatedByType_STATUS("Application")
	SystemData_CreatedByType_STATUS_Key             = SystemData_CreatedByType_STATUS("Key")
	SystemData_CreatedByType_STATUS_ManagedIdentity = SystemData_CreatedByType_STATUS("ManagedIdentity")
	SystemData_CreatedByType_STATUS_User            = SystemData_CreatedByType_STATUS("User")
)

// Mapping from string to SystemData_CreatedByType_STATUS
var systemData_CreatedByType_STATUS_Values = map[string]SystemData_CreatedByType_STATUS{
	"application":     SystemData_CreatedByType_STATUS_Application,
	"key":             SystemData_CreatedByType_STATUS_Key,
	"managedidentity": SystemData_CreatedByType_STATUS_ManagedIdentity,
	"user":            SystemData_CreatedByType_STATUS_User,
}

type SystemData_LastModifiedByType_STATUS string

const (
	SystemData_LastModifiedByType_STATUS_Application     = SystemData_LastModifiedByType_STATUS("Application")
	SystemData_LastModifiedByType_STATUS_Key             = SystemData_LastModifiedByType_STATUS("Key")
	SystemData_LastModifiedByType_STATUS_ManagedIdentity = SystemData_LastModifiedByType_STATUS("ManagedIdentity")
	SystemData_LastModifiedByType_STATUS_User            = SystemData_LastModifiedByType_STATUS("User")
)

// Mapping from string to SystemData_LastModifiedByType_STATUS
var systemData_LastModifiedByType_STATUS_Values = map[string]SystemData_LastModifiedByType_STATUS{
	"application":     SystemData_LastModifiedByType_STATUS_Application,
	"key":             SystemData_LastModifiedByType_STATUS_Key,
	"managedidentity": SystemData_LastModifiedByType_STATUS_ManagedIdentity,
	"user":            SystemData_LastModifiedByType_STATUS_User,
}

// The level code.
type StatusLevelTypes_STATUS string

const (
	StatusLevelTypes_STATUS_Error   = StatusLevelTypes_STATUS("Error")
	StatusLevelTypes_STATUS_Info    = StatusLevelTypes_STATUS("Info")
	StatusLevelTypes_STATUS_Warning = StatusLevelTypes_STATUS("Warning")
)

// Mapping from string to StatusLevelTypes_STATUS
var statusLevelTypes_STATUS_Values = map[string]StatusLevelTypes_STATUS{
	"error":   StatusLevelTypes_STATUS_Error,
	"info":    StatusLevelTypes_STATUS_Info,
	"warning": StatusLevelTypes_STATUS_Warning,
}

func init() {
	SchemeBuilder.Register(&CapacityReservation{}, &CapacityReservationList{})
}
