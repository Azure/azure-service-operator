// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type CapacityReservation_Spec struct {
	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Properties of the Capacity reservation.
	Properties *CapacityReservationProperties `json:"properties,omitempty"`

	// Sku: SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set.  For
	// Block capacity reservations, sku.capacity can only accept values 1, 2, 4, 8, 16, 32, 64. Currently VM Skus with the
	// capability called 'CapacityReservationSupported' set to true are supported. When 'CapacityReservationSupported' is true,
	// the SKU capability also specifies the 'SupportedCapacityReservationTypes', which lists the types of capacity
	// reservations (such as Targeted or Block) that the SKU supports. Refer to List Microsoft.Compute SKUs in a region
	// (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values.
	Sku *Sku `json:"sku,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Zones: The availability zones.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMResourceSpec = &CapacityReservation_Spec{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2025-04-01"
func (reservation CapacityReservation_Spec) GetAPIVersion() string {
	return "2025-04-01"
}

// GetName returns the Name of the resource
func (reservation *CapacityReservation_Spec) GetName() string {
	return reservation.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Compute/capacityReservationGroups/capacityReservations"
func (reservation *CapacityReservation_Spec) GetType() string {
	return "Microsoft.Compute/capacityReservationGroups/capacityReservations"
}

// Properties of the Capacity reservation.
type CapacityReservationProperties struct {
	// ScheduleProfile: Defines the schedule for Block-type capacity reservations. Specifies the schedule during which capacity
	// reservation is active and VM or VMSS resource can be allocated using reservation. This property is required and only
	// supported when the capacity reservation group type is 'Block'. The scheduleProfile, start, and end fields are immutable
	// after creation. Minimum API version: 2025-04-01. Please refer to https://aka.ms/blockcapacityreservation for more
	// details.
	ScheduleProfile *ScheduleProfile `json:"scheduleProfile,omitempty"`
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is
// currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type Sku struct {
	// Capacity: Specifies the number of virtual machines in the scale set.
	Capacity *int `json:"capacity,omitempty"`

	// Name: The sku name.
	Name *string `json:"name,omitempty"`

	// Tier: Specifies the tier of virtual machines in a scale set.
	// Possible Values:
	// Standard
	// Basic
	Tier *string `json:"tier,omitempty"`
}

// Defines the schedule for Block-type capacity reservations. Specifies the schedule during which capacity reservation is
// active and VM or VMSS resource can be allocated using reservation. This property is required and only supported when the
// capacity reservation group type is 'Block'. The scheduleProfile, start, and end fields are immutable after creation.
// Minimum API version: 2025-04-01. Please refer to https://aka.ms/blockcapacityreservation for more details.
type ScheduleProfile struct {
	// End: The required end date for block capacity reservations. Must be after the start date, with a duration of either
	// 1–14 whole days or 3–26 whole weeks. Example: 2025-06-28.
	End *string `json:"end,omitempty"`

	// Start: The required start date for block capacity reservations. Must be today or within 56 days in the future. For
	// same-day scheduling, requests must be submitted before 11:30 AM UTC. Example: 2025-06-27.
	Start *string `json:"start,omitempty"`
}
