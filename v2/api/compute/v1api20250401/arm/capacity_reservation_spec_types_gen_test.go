// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CapacityReservationProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationProperties, CapacityReservationPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationProperties runs a test to see if a specific instance of CapacityReservationProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationProperties(subject CapacityReservationProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationProperties instances for property testing - lazily instantiated by
// CapacityReservationPropertiesGenerator()
var capacityReservationPropertiesGenerator gopter.Gen

// CapacityReservationPropertiesGenerator returns a generator of CapacityReservationProperties instances for property testing.
func CapacityReservationPropertiesGenerator() gopter.Gen {
	if capacityReservationPropertiesGenerator != nil {
		return capacityReservationPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservationProperties(generators)
	capacityReservationPropertiesGenerator = gen.Struct(reflect.TypeOf(CapacityReservationProperties{}), generators)

	return capacityReservationPropertiesGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservationProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationProperties(gens map[string]gopter.Gen) {
	gens["ScheduleProfile"] = gen.PtrOf(ScheduleProfileGenerator())
}

func Test_CapacityReservation_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservation_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservation_Spec, CapacityReservation_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservation_Spec runs a test to see if a specific instance of CapacityReservation_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservation_Spec(subject CapacityReservation_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservation_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservation_Spec instances for property testing - lazily instantiated by
// CapacityReservation_SpecGenerator()
var capacityReservation_SpecGenerator gopter.Gen

// CapacityReservation_SpecGenerator returns a generator of CapacityReservation_Spec instances for property testing.
// We first initialize capacityReservation_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservation_SpecGenerator() gopter.Gen {
	if capacityReservation_SpecGenerator != nil {
		return capacityReservation_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservation_Spec(generators)
	capacityReservation_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservation_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservation_Spec(generators)
	AddRelatedPropertyGeneratorsForCapacityReservation_Spec(generators)
	capacityReservation_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservation_Spec{}), generators)

	return capacityReservation_SpecGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservation_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservation_Spec(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservation_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservation_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(CapacityReservationPropertiesGenerator())
	gens["Sku"] = gen.PtrOf(SkuGenerator())
}

func Test_ScheduleProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleProfile, ScheduleProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleProfile runs a test to see if a specific instance of ScheduleProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleProfile(subject ScheduleProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleProfile instances for property testing - lazily instantiated by ScheduleProfileGenerator()
var scheduleProfileGenerator gopter.Gen

// ScheduleProfileGenerator returns a generator of ScheduleProfile instances for property testing.
func ScheduleProfileGenerator() gopter.Gen {
	if scheduleProfileGenerator != nil {
		return scheduleProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleProfile(generators)
	scheduleProfileGenerator = gen.Struct(reflect.TypeOf(ScheduleProfile{}), generators)

	return scheduleProfileGenerator
}

// AddIndependentPropertyGeneratorsForScheduleProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleProfile(gens map[string]gopter.Gen) {
	gens["End"] = gen.PtrOf(gen.AlphaString())
	gens["Start"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku, SkuGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku runs a test to see if a specific instance of Sku round trips to JSON and back losslessly
func RunJSONSerializationTestForSku(subject Sku) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku instances for property testing - lazily instantiated by SkuGenerator()
var skuGenerator gopter.Gen

// SkuGenerator returns a generator of Sku instances for property testing.
func SkuGenerator() gopter.Gen {
	if skuGenerator != nil {
		return skuGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku(generators)
	skuGenerator = gen.Struct(reflect.TypeOf(Sku{}), generators)

	return skuGenerator
}

// AddIndependentPropertyGeneratorsForSku is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}
