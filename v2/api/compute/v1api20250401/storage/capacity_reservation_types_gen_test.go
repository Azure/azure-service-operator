// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CapacityReservation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservation, CapacityReservationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservation runs a test to see if a specific instance of CapacityReservation round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservation(subject CapacityReservation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservation instances for property testing - lazily instantiated by
// CapacityReservationGenerator()
var capacityReservationGenerator gopter.Gen

// CapacityReservationGenerator returns a generator of CapacityReservation instances for property testing.
func CapacityReservationGenerator() gopter.Gen {
	if capacityReservationGenerator != nil {
		return capacityReservationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservation(generators)
	capacityReservationGenerator = gen.Struct(reflect.TypeOf(CapacityReservation{}), generators)

	return capacityReservationGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservation is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservation(gens map[string]gopter.Gen) {
	gens["Spec"] = CapacityReservation_SpecGenerator()
	gens["Status"] = CapacityReservation_STATUSGenerator()
}

func Test_CapacityReservationInstanceView_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationInstanceView_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationInstanceView_STATUS, CapacityReservationInstanceView_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationInstanceView_STATUS runs a test to see if a specific instance of CapacityReservationInstanceView_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationInstanceView_STATUS(subject CapacityReservationInstanceView_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationInstanceView_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationInstanceView_STATUS instances for property testing - lazily instantiated by
// CapacityReservationInstanceView_STATUSGenerator()
var capacityReservationInstanceView_STATUSGenerator gopter.Gen

// CapacityReservationInstanceView_STATUSGenerator returns a generator of CapacityReservationInstanceView_STATUS instances for property testing.
func CapacityReservationInstanceView_STATUSGenerator() gopter.Gen {
	if capacityReservationInstanceView_STATUSGenerator != nil {
		return capacityReservationInstanceView_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCapacityReservationInstanceView_STATUS(generators)
	capacityReservationInstanceView_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationInstanceView_STATUS{}), generators)

	return capacityReservationInstanceView_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForCapacityReservationInstanceView_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationInstanceView_STATUS(gens map[string]gopter.Gen) {
	gens["Statuses"] = gen.SliceOf(InstanceViewStatus_STATUSGenerator())
	gens["UtilizationInfo"] = gen.PtrOf(CapacityReservationUtilization_STATUSGenerator())
}

func Test_CapacityReservationOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationOperatorSpec, CapacityReservationOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationOperatorSpec runs a test to see if a specific instance of CapacityReservationOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationOperatorSpec(subject CapacityReservationOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationOperatorSpec instances for property testing - lazily instantiated by
// CapacityReservationOperatorSpecGenerator()
var capacityReservationOperatorSpecGenerator gopter.Gen

// CapacityReservationOperatorSpecGenerator returns a generator of CapacityReservationOperatorSpec instances for property testing.
func CapacityReservationOperatorSpecGenerator() gopter.Gen {
	if capacityReservationOperatorSpecGenerator != nil {
		return capacityReservationOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	capacityReservationOperatorSpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservationOperatorSpec{}), generators)

	return capacityReservationOperatorSpecGenerator
}

func Test_CapacityReservationUtilization_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservationUtilization_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservationUtilization_STATUS, CapacityReservationUtilization_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservationUtilization_STATUS runs a test to see if a specific instance of CapacityReservationUtilization_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservationUtilization_STATUS(subject CapacityReservationUtilization_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservationUtilization_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservationUtilization_STATUS instances for property testing - lazily instantiated by
// CapacityReservationUtilization_STATUSGenerator()
var capacityReservationUtilization_STATUSGenerator gopter.Gen

// CapacityReservationUtilization_STATUSGenerator returns a generator of CapacityReservationUtilization_STATUS instances for property testing.
// We first initialize capacityReservationUtilization_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservationUtilization_STATUSGenerator() gopter.Gen {
	if capacityReservationUtilization_STATUSGenerator != nil {
		return capacityReservationUtilization_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	capacityReservationUtilization_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationUtilization_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS(generators)
	capacityReservationUtilization_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservationUtilization_STATUS{}), generators)

	return capacityReservationUtilization_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservationUtilization_STATUS(gens map[string]gopter.Gen) {
	gens["CurrentCapacity"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservationUtilization_STATUS(gens map[string]gopter.Gen) {
	gens["VirtualMachinesAllocated"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_CapacityReservation_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservation_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservation_STATUS, CapacityReservation_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservation_STATUS runs a test to see if a specific instance of CapacityReservation_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservation_STATUS(subject CapacityReservation_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservation_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservation_STATUS instances for property testing - lazily instantiated by
// CapacityReservation_STATUSGenerator()
var capacityReservation_STATUSGenerator gopter.Gen

// CapacityReservation_STATUSGenerator returns a generator of CapacityReservation_STATUS instances for property testing.
// We first initialize capacityReservation_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservation_STATUSGenerator() gopter.Gen {
	if capacityReservation_STATUSGenerator != nil {
		return capacityReservation_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservation_STATUS(generators)
	capacityReservation_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservation_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservation_STATUS(generators)
	AddRelatedPropertyGeneratorsForCapacityReservation_STATUS(generators)
	capacityReservation_STATUSGenerator = gen.Struct(reflect.TypeOf(CapacityReservation_STATUS{}), generators)

	return capacityReservation_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservation_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservation_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningTime"] = gen.PtrOf(gen.AlphaString())
	gens["ReservationId"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["TimeCreated"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservation_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservation_STATUS(gens map[string]gopter.Gen) {
	gens["InstanceView"] = gen.PtrOf(CapacityReservationInstanceView_STATUSGenerator())
	gens["ScheduleProfile"] = gen.PtrOf(ScheduleProfile_STATUSGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
	gens["VirtualMachinesAssociated"] = gen.SliceOf(SubResourceReadOnly_STATUSGenerator())
}

func Test_CapacityReservation_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapacityReservation_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapacityReservation_Spec, CapacityReservation_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapacityReservation_Spec runs a test to see if a specific instance of CapacityReservation_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCapacityReservation_Spec(subject CapacityReservation_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapacityReservation_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapacityReservation_Spec instances for property testing - lazily instantiated by
// CapacityReservation_SpecGenerator()
var capacityReservation_SpecGenerator gopter.Gen

// CapacityReservation_SpecGenerator returns a generator of CapacityReservation_Spec instances for property testing.
// We first initialize capacityReservation_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CapacityReservation_SpecGenerator() gopter.Gen {
	if capacityReservation_SpecGenerator != nil {
		return capacityReservation_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservation_Spec(generators)
	capacityReservation_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservation_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapacityReservation_Spec(generators)
	AddRelatedPropertyGeneratorsForCapacityReservation_Spec(generators)
	capacityReservation_SpecGenerator = gen.Struct(reflect.TypeOf(CapacityReservation_Spec{}), generators)

	return capacityReservation_SpecGenerator
}

// AddIndependentPropertyGeneratorsForCapacityReservation_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapacityReservation_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCapacityReservation_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCapacityReservation_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(CapacityReservationOperatorSpecGenerator())
	gens["ScheduleProfile"] = gen.PtrOf(ScheduleProfileGenerator())
	gens["Sku"] = gen.PtrOf(SkuGenerator())
}

func Test_InstanceViewStatus_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InstanceViewStatus_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInstanceViewStatus_STATUS, InstanceViewStatus_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInstanceViewStatus_STATUS runs a test to see if a specific instance of InstanceViewStatus_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForInstanceViewStatus_STATUS(subject InstanceViewStatus_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InstanceViewStatus_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InstanceViewStatus_STATUS instances for property testing - lazily instantiated by
// InstanceViewStatus_STATUSGenerator()
var instanceViewStatus_STATUSGenerator gopter.Gen

// InstanceViewStatus_STATUSGenerator returns a generator of InstanceViewStatus_STATUS instances for property testing.
func InstanceViewStatus_STATUSGenerator() gopter.Gen {
	if instanceViewStatus_STATUSGenerator != nil {
		return instanceViewStatus_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInstanceViewStatus_STATUS(generators)
	instanceViewStatus_STATUSGenerator = gen.Struct(reflect.TypeOf(InstanceViewStatus_STATUS{}), generators)

	return instanceViewStatus_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForInstanceViewStatus_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInstanceViewStatus_STATUS(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayStatus"] = gen.PtrOf(gen.AlphaString())
	gens["Level"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Time"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScheduleProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleProfile, ScheduleProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleProfile runs a test to see if a specific instance of ScheduleProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleProfile(subject ScheduleProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleProfile instances for property testing - lazily instantiated by ScheduleProfileGenerator()
var scheduleProfileGenerator gopter.Gen

// ScheduleProfileGenerator returns a generator of ScheduleProfile instances for property testing.
func ScheduleProfileGenerator() gopter.Gen {
	if scheduleProfileGenerator != nil {
		return scheduleProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleProfile(generators)
	scheduleProfileGenerator = gen.Struct(reflect.TypeOf(ScheduleProfile{}), generators)

	return scheduleProfileGenerator
}

// AddIndependentPropertyGeneratorsForScheduleProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleProfile(gens map[string]gopter.Gen) {
	gens["End"] = gen.PtrOf(gen.AlphaString())
	gens["Start"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScheduleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleProfile_STATUS, ScheduleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleProfile_STATUS runs a test to see if a specific instance of ScheduleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleProfile_STATUS(subject ScheduleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleProfile_STATUS instances for property testing - lazily instantiated by
// ScheduleProfile_STATUSGenerator()
var scheduleProfile_STATUSGenerator gopter.Gen

// ScheduleProfile_STATUSGenerator returns a generator of ScheduleProfile_STATUS instances for property testing.
func ScheduleProfile_STATUSGenerator() gopter.Gen {
	if scheduleProfile_STATUSGenerator != nil {
		return scheduleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleProfile_STATUS(generators)
	scheduleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ScheduleProfile_STATUS{}), generators)

	return scheduleProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForScheduleProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["End"] = gen.PtrOf(gen.AlphaString())
	gens["Start"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku, SkuGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku runs a test to see if a specific instance of Sku round trips to JSON and back losslessly
func RunJSONSerializationTestForSku(subject Sku) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku instances for property testing - lazily instantiated by SkuGenerator()
var skuGenerator gopter.Gen

// SkuGenerator returns a generator of Sku instances for property testing.
func SkuGenerator() gopter.Gen {
	if skuGenerator != nil {
		return skuGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku(generators)
	skuGenerator = gen.Struct(reflect.TypeOf(Sku{}), generators)

	return skuGenerator
}

// AddIndependentPropertyGeneratorsForSku is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS, Sku_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS runs a test to see if a specific instance of Sku_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS(subject Sku_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS instances for property testing - lazily instantiated by Sku_STATUSGenerator()
var sku_STATUSGenerator gopter.Gen

// Sku_STATUSGenerator returns a generator of Sku_STATUS instances for property testing.
func Sku_STATUSGenerator() gopter.Gen {
	if sku_STATUSGenerator != nil {
		return sku_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS(generators)
	sku_STATUSGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS{}), generators)

	return sku_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_SubResourceReadOnly_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResourceReadOnly_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceReadOnly_STATUS, SubResourceReadOnly_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceReadOnly_STATUS runs a test to see if a specific instance of SubResourceReadOnly_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceReadOnly_STATUS(subject SubResourceReadOnly_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResourceReadOnly_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResourceReadOnly_STATUS instances for property testing - lazily instantiated by
// SubResourceReadOnly_STATUSGenerator()
var subResourceReadOnly_STATUSGenerator gopter.Gen

// SubResourceReadOnly_STATUSGenerator returns a generator of SubResourceReadOnly_STATUS instances for property testing.
func SubResourceReadOnly_STATUSGenerator() gopter.Gen {
	if subResourceReadOnly_STATUSGenerator != nil {
		return subResourceReadOnly_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS(generators)
	subResourceReadOnly_STATUSGenerator = gen.Struct(reflect.TypeOf(SubResourceReadOnly_STATUS{}), generators)

	return subResourceReadOnly_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceReadOnly_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.AlphaString())
}
