// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.servicebus/v1alpha1api20210101previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.servicebus.azure.com,resources=namespacesqueues,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.servicebus.azure.com,resources={namespacesqueues/status,namespacesqueues/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-01-01-preview/Microsoft.ServiceBus.json#/resourceDefinitions/namespaces_queues
type NamespacesQueue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespacesQueues_Spec `json:"spec,omitempty"`
	Status            SBQueue_Status        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NamespacesQueue{}

// GetConditions returns the conditions of the resource
func (namespacesQueue *NamespacesQueue) GetConditions() conditions.Conditions {
	return namespacesQueue.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespacesQueue *NamespacesQueue) SetConditions(conditions conditions.Conditions) {
	namespacesQueue.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-servicebus-azure-com-v1alpha1api20210101preview-namespacesqueue,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.servicebus.azure.com,resources=namespacesqueues,verbs=create;update,versions=v1alpha1api20210101preview,name=default.v1alpha1api20210101preview.namespacesqueues.microsoft.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &NamespacesQueue{}

// Default applies defaults to the NamespacesQueue resource
func (namespacesQueue *NamespacesQueue) Default() {
	namespacesQueue.defaultImpl()
	var temp interface{} = namespacesQueue
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (namespacesQueue *NamespacesQueue) defaultAzureName() {
	if namespacesQueue.Spec.AzureName == "" {
		namespacesQueue.Spec.AzureName = namespacesQueue.Name
	}
}

// defaultImpl applies the code generated defaults to the NamespacesQueue resource
func (namespacesQueue *NamespacesQueue) defaultImpl() { namespacesQueue.defaultAzureName() }

var _ genruntime.KubernetesResource = &NamespacesQueue{}

// AzureName returns the Azure name of the resource
func (namespacesQueue *NamespacesQueue) AzureName() string {
	return namespacesQueue.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (namespacesQueue *NamespacesQueue) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (namespacesQueue *NamespacesQueue) GetSpec() genruntime.ConvertibleSpec {
	return &namespacesQueue.Spec
}

// GetStatus returns the status of this resource
func (namespacesQueue *NamespacesQueue) GetStatus() genruntime.ConvertibleStatus {
	return &namespacesQueue.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ServiceBus/namespaces/queues"
func (namespacesQueue *NamespacesQueue) GetType() string {
	return "Microsoft.ServiceBus/namespaces/queues"
}

// NewEmptyStatus returns a new empty (blank) status
func (namespacesQueue *NamespacesQueue) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SBQueue_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespacesQueue *NamespacesQueue) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespacesQueue.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: namespacesQueue.Namespace,
		Name:      namespacesQueue.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespacesQueue *NamespacesQueue) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SBQueue_Status); ok {
		namespacesQueue.Status = *st
		return nil
	}

	// Convert status to required version
	var st SBQueue_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespacesQueue.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-servicebus-azure-com-v1alpha1api20210101preview-namespacesqueue,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.servicebus.azure.com,resources=namespacesqueues,verbs=create;update,versions=v1alpha1api20210101preview,name=validate.v1alpha1api20210101preview.namespacesqueues.microsoft.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &NamespacesQueue{}

// ValidateCreate validates the creation of the resource
func (namespacesQueue *NamespacesQueue) ValidateCreate() error {
	validations := namespacesQueue.createValidations()
	var temp interface{} = namespacesQueue
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (namespacesQueue *NamespacesQueue) ValidateDelete() error {
	validations := namespacesQueue.deleteValidations()
	var temp interface{} = namespacesQueue
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (namespacesQueue *NamespacesQueue) ValidateUpdate(old runtime.Object) error {
	validations := namespacesQueue.updateValidations()
	var temp interface{} = namespacesQueue
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (namespacesQueue *NamespacesQueue) createValidations() []func() error {
	return []func() error{namespacesQueue.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (namespacesQueue *NamespacesQueue) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (namespacesQueue *NamespacesQueue) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return namespacesQueue.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (namespacesQueue *NamespacesQueue) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&namespacesQueue.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNamespacesQueue populates our NamespacesQueue from the provided source NamespacesQueue
func (namespacesQueue *NamespacesQueue) AssignPropertiesFromNamespacesQueue(source *v1alpha1api20210101previewstorage.NamespacesQueue) error {

	// Spec
	var spec NamespacesQueues_Spec
	err := spec.AssignPropertiesFromNamespacesQueuesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromNamespacesQueuesSpec()")
	}
	namespacesQueue.Spec = spec

	// Status
	var status SBQueue_Status
	err = status.AssignPropertiesFromSBQueueStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSBQueueStatus()")
	}
	namespacesQueue.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespacesQueue populates the provided destination NamespacesQueue from our NamespacesQueue
func (namespacesQueue *NamespacesQueue) AssignPropertiesToNamespacesQueue(destination *v1alpha1api20210101previewstorage.NamespacesQueue) error {

	// Spec
	var spec v1alpha1api20210101previewstorage.NamespacesQueues_Spec
	err := namespacesQueue.Spec.AssignPropertiesToNamespacesQueuesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToNamespacesQueuesSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210101previewstorage.SBQueue_Status
	err = namespacesQueue.Status.AssignPropertiesToSBQueueStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSBQueueStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespacesQueue *NamespacesQueue) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespacesQueue.Spec.OriginalVersion(),
		Kind:    "NamespacesQueue",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-01-01-preview/Microsoft.ServiceBus.json#/resourceDefinitions/namespaces_queues
type NamespacesQueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesQueue `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-01-01-preview"}
type NamespacesQueuesSpecAPIVersion string

const NamespacesQueuesSpecAPIVersion20210101Preview = NamespacesQueuesSpecAPIVersion("2021-01-01-preview")

type NamespacesQueues_Spec struct {
	//AutoDeleteOnIdle: ISO 8061 timeSpan idle interval after which the queue is
	//automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	// +kubebuilder:validation:MinLength=1
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DeadLetteringOnMessageExpiration: A value that indicates whether this queue has
	//dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `json:"deadLetteringOnMessageExpiration,omitempty"`

	//DefaultMessageTimeToLive: ISO 8601 default message timespan to live value. This
	//is the duration after which the message expires, starting from when the message
	//is sent to Service Bus. This is the default value used when TimeToLive is not
	//set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	//DuplicateDetectionHistoryTimeWindow: ISO 8601 timeSpan structure that defines
	//the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	//EnableBatchedOperations: Value that indicates whether server-side batched
	//operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	//EnableExpress: A value that indicates whether Express Entities are enabled. An
	//express queue holds a message in memory temporarily before writing it to
	//persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	//EnablePartitioning: A value that indicates whether the queue is to be
	//partitioned across multiple message brokers.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	//ForwardDeadLetteredMessagesTo: Queue/Topic name to forward the Dead Letter
	//message
	ForwardDeadLetteredMessagesTo *string `json:"forwardDeadLetteredMessagesTo,omitempty"`

	//ForwardTo: Queue/Topic name to forward the messages
	ForwardTo *string `json:"forwardTo,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	//LockDuration: ISO 8601 timespan duration of a peek-lock; that is, the amount of
	//time that the message is locked for other receivers. The maximum value for
	//LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `json:"lockDuration,omitempty"`

	//MaxDeliveryCount: The maximum delivery count. A message is automatically
	//deadlettered after this number of deliveries. default value is 10.
	MaxDeliveryCount *int `json:"maxDeliveryCount,omitempty"`

	//MaxSizeInMegabytes: The maximum size of the queue in megabytes, which is the
	//size of memory allocated for the queue. Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.servicebus.azure.com" json:"owner" kind:"Namespace"`

	//RequiresDuplicateDetection: A value indicating if this queue requires duplicate
	//detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	//RequiresSession: A value that indicates whether the queue supports the concept
	//of sessions.
	RequiresSession *bool `json:"requiresSession,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &NamespacesQueues_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespacesQueuesSpec *NamespacesQueues_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespacesQueuesSpec == nil {
		return nil, nil
	}
	var result NamespacesQueues_SpecARM

	// Set property ‘Location’:
	if namespacesQueuesSpec.Location != nil {
		location := *namespacesQueuesSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if namespacesQueuesSpec.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *namespacesQueuesSpec.AutoDeleteOnIdle
		result.Properties.AutoDeleteOnIdle = &autoDeleteOnIdle
	}
	if namespacesQueuesSpec.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *namespacesQueuesSpec.DeadLetteringOnMessageExpiration
		result.Properties.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	}
	if namespacesQueuesSpec.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *namespacesQueuesSpec.DefaultMessageTimeToLive
		result.Properties.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	}
	if namespacesQueuesSpec.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *namespacesQueuesSpec.DuplicateDetectionHistoryTimeWindow
		result.Properties.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	}
	if namespacesQueuesSpec.EnableBatchedOperations != nil {
		enableBatchedOperations := *namespacesQueuesSpec.EnableBatchedOperations
		result.Properties.EnableBatchedOperations = &enableBatchedOperations
	}
	if namespacesQueuesSpec.EnableExpress != nil {
		enableExpress := *namespacesQueuesSpec.EnableExpress
		result.Properties.EnableExpress = &enableExpress
	}
	if namespacesQueuesSpec.EnablePartitioning != nil {
		enablePartitioning := *namespacesQueuesSpec.EnablePartitioning
		result.Properties.EnablePartitioning = &enablePartitioning
	}
	if namespacesQueuesSpec.ForwardDeadLetteredMessagesTo != nil {
		forwardDeadLetteredMessagesTo := *namespacesQueuesSpec.ForwardDeadLetteredMessagesTo
		result.Properties.ForwardDeadLetteredMessagesTo = &forwardDeadLetteredMessagesTo
	}
	if namespacesQueuesSpec.ForwardTo != nil {
		forwardTo := *namespacesQueuesSpec.ForwardTo
		result.Properties.ForwardTo = &forwardTo
	}
	if namespacesQueuesSpec.LockDuration != nil {
		lockDuration := *namespacesQueuesSpec.LockDuration
		result.Properties.LockDuration = &lockDuration
	}
	if namespacesQueuesSpec.MaxDeliveryCount != nil {
		maxDeliveryCount := *namespacesQueuesSpec.MaxDeliveryCount
		result.Properties.MaxDeliveryCount = &maxDeliveryCount
	}
	if namespacesQueuesSpec.MaxSizeInMegabytes != nil {
		maxSizeInMegabytes := *namespacesQueuesSpec.MaxSizeInMegabytes
		result.Properties.MaxSizeInMegabytes = &maxSizeInMegabytes
	}
	if namespacesQueuesSpec.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *namespacesQueuesSpec.RequiresDuplicateDetection
		result.Properties.RequiresDuplicateDetection = &requiresDuplicateDetection
	}
	if namespacesQueuesSpec.RequiresSession != nil {
		requiresSession := *namespacesQueuesSpec.RequiresSession
		result.Properties.RequiresSession = &requiresSession
	}

	// Set property ‘Tags’:
	if namespacesQueuesSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range namespacesQueuesSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespacesQueuesSpec *NamespacesQueues_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesQueues_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespacesQueuesSpec *NamespacesQueues_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesQueues_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesQueues_SpecARM, got %T", armInput)
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
		namespacesQueuesSpec.AutoDeleteOnIdle = &autoDeleteOnIdle
	}

	// Set property ‘AzureName’:
	namespacesQueuesSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DeadLetteringOnMessageExpiration’:
	// copying flattened property:
	if typedInput.Properties.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *typedInput.Properties.DeadLetteringOnMessageExpiration
		namespacesQueuesSpec.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	}

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
		namespacesQueuesSpec.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
		namespacesQueuesSpec.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties.EnableBatchedOperations != nil {
		enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
		namespacesQueuesSpec.EnableBatchedOperations = &enableBatchedOperations
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties.EnableExpress != nil {
		enableExpress := *typedInput.Properties.EnableExpress
		namespacesQueuesSpec.EnableExpress = &enableExpress
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties.EnablePartitioning != nil {
		enablePartitioning := *typedInput.Properties.EnablePartitioning
		namespacesQueuesSpec.EnablePartitioning = &enablePartitioning
	}

	// Set property ‘ForwardDeadLetteredMessagesTo’:
	// copying flattened property:
	if typedInput.Properties.ForwardDeadLetteredMessagesTo != nil {
		forwardDeadLetteredMessagesTo := *typedInput.Properties.ForwardDeadLetteredMessagesTo
		namespacesQueuesSpec.ForwardDeadLetteredMessagesTo = &forwardDeadLetteredMessagesTo
	}

	// Set property ‘ForwardTo’:
	// copying flattened property:
	if typedInput.Properties.ForwardTo != nil {
		forwardTo := *typedInput.Properties.ForwardTo
		namespacesQueuesSpec.ForwardTo = &forwardTo
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespacesQueuesSpec.Location = &location
	}

	// Set property ‘LockDuration’:
	// copying flattened property:
	if typedInput.Properties.LockDuration != nil {
		lockDuration := *typedInput.Properties.LockDuration
		namespacesQueuesSpec.LockDuration = &lockDuration
	}

	// Set property ‘MaxDeliveryCount’:
	// copying flattened property:
	if typedInput.Properties.MaxDeliveryCount != nil {
		maxDeliveryCount := *typedInput.Properties.MaxDeliveryCount
		namespacesQueuesSpec.MaxDeliveryCount = &maxDeliveryCount
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties.MaxSizeInMegabytes != nil {
		maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
		namespacesQueuesSpec.MaxSizeInMegabytes = &maxSizeInMegabytes
	}

	// Set property ‘Owner’:
	namespacesQueuesSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
		namespacesQueuesSpec.RequiresDuplicateDetection = &requiresDuplicateDetection
	}

	// Set property ‘RequiresSession’:
	// copying flattened property:
	if typedInput.Properties.RequiresSession != nil {
		requiresSession := *typedInput.Properties.RequiresSession
		namespacesQueuesSpec.RequiresSession = &requiresSession
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespacesQueuesSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			namespacesQueuesSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NamespacesQueues_Spec{}

// ConvertSpecFrom populates our NamespacesQueues_Spec from the provided source
func (namespacesQueuesSpec *NamespacesQueues_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.NamespacesQueues_Spec)
	if ok {
		// Populate our instance from source
		return namespacesQueuesSpec.AssignPropertiesFromNamespacesQueuesSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.NamespacesQueues_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = namespacesQueuesSpec.AssignPropertiesFromNamespacesQueuesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NamespacesQueues_Spec
func (namespacesQueuesSpec *NamespacesQueues_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.NamespacesQueues_Spec)
	if ok {
		// Populate destination from our instance
		return namespacesQueuesSpec.AssignPropertiesToNamespacesQueuesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.NamespacesQueues_Spec{}
	err := namespacesQueuesSpec.AssignPropertiesToNamespacesQueuesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesQueuesSpec populates our NamespacesQueues_Spec from the provided source NamespacesQueues_Spec
func (namespacesQueuesSpec *NamespacesQueues_Spec) AssignPropertiesFromNamespacesQueuesSpec(source *v1alpha1api20210101previewstorage.NamespacesQueues_Spec) error {

	// AutoDeleteOnIdle
	if source.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *source.AutoDeleteOnIdle
		namespacesQueuesSpec.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		namespacesQueuesSpec.AutoDeleteOnIdle = nil
	}

	// AzureName
	namespacesQueuesSpec.AzureName = source.AzureName

	// DeadLetteringOnMessageExpiration
	if source.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *source.DeadLetteringOnMessageExpiration
		namespacesQueuesSpec.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		namespacesQueuesSpec.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	if source.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *source.DefaultMessageTimeToLive
		namespacesQueuesSpec.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		namespacesQueuesSpec.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if source.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *source.DuplicateDetectionHistoryTimeWindow
		namespacesQueuesSpec.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		namespacesQueuesSpec.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		namespacesQueuesSpec.EnableBatchedOperations = &enableBatchedOperation
	} else {
		namespacesQueuesSpec.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		namespacesQueuesSpec.EnableExpress = &enableExpress
	} else {
		namespacesQueuesSpec.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		namespacesQueuesSpec.EnablePartitioning = &enablePartitioning
	} else {
		namespacesQueuesSpec.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	namespacesQueuesSpec.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(source.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	namespacesQueuesSpec.ForwardTo = genruntime.ClonePointerToString(source.ForwardTo)

	// Location
	namespacesQueuesSpec.Location = genruntime.ClonePointerToString(source.Location)

	// LockDuration
	if source.LockDuration != nil {
		lockDuration := *source.LockDuration
		namespacesQueuesSpec.LockDuration = &lockDuration
	} else {
		namespacesQueuesSpec.LockDuration = nil
	}

	// MaxDeliveryCount
	namespacesQueuesSpec.MaxDeliveryCount = genruntime.ClonePointerToInt(source.MaxDeliveryCount)

	// MaxSizeInMegabytes
	namespacesQueuesSpec.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// Owner
	namespacesQueuesSpec.Owner = source.Owner.Copy()

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		namespacesQueuesSpec.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		namespacesQueuesSpec.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if source.RequiresSession != nil {
		requiresSession := *source.RequiresSession
		namespacesQueuesSpec.RequiresSession = &requiresSession
	} else {
		namespacesQueuesSpec.RequiresSession = nil
	}

	// Tags
	namespacesQueuesSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToNamespacesQueuesSpec populates the provided destination NamespacesQueues_Spec from our NamespacesQueues_Spec
func (namespacesQueuesSpec *NamespacesQueues_Spec) AssignPropertiesToNamespacesQueuesSpec(destination *v1alpha1api20210101previewstorage.NamespacesQueues_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoDeleteOnIdle
	if namespacesQueuesSpec.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *namespacesQueuesSpec.AutoDeleteOnIdle
		destination.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		destination.AutoDeleteOnIdle = nil
	}

	// AzureName
	destination.AzureName = namespacesQueuesSpec.AzureName

	// DeadLetteringOnMessageExpiration
	if namespacesQueuesSpec.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *namespacesQueuesSpec.DeadLetteringOnMessageExpiration
		destination.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		destination.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	if namespacesQueuesSpec.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *namespacesQueuesSpec.DefaultMessageTimeToLive
		destination.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		destination.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if namespacesQueuesSpec.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *namespacesQueuesSpec.DuplicateDetectionHistoryTimeWindow
		destination.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		destination.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if namespacesQueuesSpec.EnableBatchedOperations != nil {
		enableBatchedOperation := *namespacesQueuesSpec.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if namespacesQueuesSpec.EnableExpress != nil {
		enableExpress := *namespacesQueuesSpec.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if namespacesQueuesSpec.EnablePartitioning != nil {
		enablePartitioning := *namespacesQueuesSpec.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	destination.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(namespacesQueuesSpec.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	destination.ForwardTo = genruntime.ClonePointerToString(namespacesQueuesSpec.ForwardTo)

	// Location
	destination.Location = genruntime.ClonePointerToString(namespacesQueuesSpec.Location)

	// LockDuration
	if namespacesQueuesSpec.LockDuration != nil {
		lockDuration := *namespacesQueuesSpec.LockDuration
		destination.LockDuration = &lockDuration
	} else {
		destination.LockDuration = nil
	}

	// MaxDeliveryCount
	destination.MaxDeliveryCount = genruntime.ClonePointerToInt(namespacesQueuesSpec.MaxDeliveryCount)

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(namespacesQueuesSpec.MaxSizeInMegabytes)

	// OriginalVersion
	destination.OriginalVersion = namespacesQueuesSpec.OriginalVersion()

	// Owner
	destination.Owner = namespacesQueuesSpec.Owner.Copy()

	// RequiresDuplicateDetection
	if namespacesQueuesSpec.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *namespacesQueuesSpec.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if namespacesQueuesSpec.RequiresSession != nil {
		requiresSession := *namespacesQueuesSpec.RequiresSession
		destination.RequiresSession = &requiresSession
	} else {
		destination.RequiresSession = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespacesQueuesSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (namespacesQueuesSpec *NamespacesQueues_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (namespacesQueuesSpec *NamespacesQueues_Spec) SetAzureName(azureName string) {
	namespacesQueuesSpec.AzureName = azureName
}

//Generated from:
type SBQueue_Status struct {
	//AccessedAt: Last time a message was sent, or the last time there was a receive
	//request to this queue.
	AccessedAt *string `json:"accessedAt,omitempty"`

	//AutoDeleteOnIdle: ISO 8061 timeSpan idle interval after which the queue is
	//automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CountDetails: Message Count Details.
	CountDetails *MessageCountDetails_Status `json:"countDetails,omitempty"`

	//CreatedAt: The exact time the message was created.
	CreatedAt *string `json:"createdAt,omitempty"`

	//DeadLetteringOnMessageExpiration: A value that indicates whether this queue has
	//dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `json:"deadLetteringOnMessageExpiration,omitempty"`

	//DefaultMessageTimeToLive: ISO 8601 default message timespan to live value. This
	//is the duration after which the message expires, starting from when the message
	//is sent to Service Bus. This is the default value used when TimeToLive is not
	//set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	//DuplicateDetectionHistoryTimeWindow: ISO 8601 timeSpan structure that defines
	//the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	//EnableBatchedOperations: Value that indicates whether server-side batched
	//operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	//EnableExpress: A value that indicates whether Express Entities are enabled. An
	//express queue holds a message in memory temporarily before writing it to
	//persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	//EnablePartitioning: A value that indicates whether the queue is to be
	//partitioned across multiple message brokers.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	//ForwardDeadLetteredMessagesTo: Queue/Topic name to forward the Dead Letter
	//message
	ForwardDeadLetteredMessagesTo *string `json:"forwardDeadLetteredMessagesTo,omitempty"`

	//ForwardTo: Queue/Topic name to forward the messages
	ForwardTo *string `json:"forwardTo,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//LockDuration: ISO 8601 timespan duration of a peek-lock; that is, the amount of
	//time that the message is locked for other receivers. The maximum value for
	//LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `json:"lockDuration,omitempty"`

	//MaxDeliveryCount: The maximum delivery count. A message is automatically
	//deadlettered after this number of deliveries. default value is 10.
	MaxDeliveryCount *int `json:"maxDeliveryCount,omitempty"`

	//MaxSizeInMegabytes: The maximum size of the queue in megabytes, which is the
	//size of memory allocated for the queue. Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	//MessageCount: The number of messages in the queue.
	MessageCount *int `json:"messageCount,omitempty"`

	//Name: Resource name
	Name *string `json:"name,omitempty"`

	//RequiresDuplicateDetection: A value indicating if this queue requires duplicate
	//detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	//RequiresSession: A value that indicates whether the queue supports the concept
	//of sessions.
	RequiresSession *bool `json:"requiresSession,omitempty"`

	//SizeInBytes: The size of the queue, in bytes.
	SizeInBytes *int `json:"sizeInBytes,omitempty"`

	//Status: Enumerates the possible values for the status of a messaging entity.
	Status *EntityStatus_Status `json:"status,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//UpdatedAt: The exact time the message was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SBQueue_Status{}

// ConvertStatusFrom populates our SBQueue_Status from the provided source
func (sbQueueStatus *SBQueue_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.SBQueue_Status)
	if ok {
		// Populate our instance from source
		return sbQueueStatus.AssignPropertiesFromSBQueueStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.SBQueue_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = sbQueueStatus.AssignPropertiesFromSBQueueStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SBQueue_Status
func (sbQueueStatus *SBQueue_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.SBQueue_Status)
	if ok {
		// Populate destination from our instance
		return sbQueueStatus.AssignPropertiesToSBQueueStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.SBQueue_Status{}
	err := sbQueueStatus.AssignPropertiesToSBQueueStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SBQueue_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sbQueueStatus *SBQueue_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SBQueue_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sbQueueStatus *SBQueue_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SBQueue_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SBQueue_StatusARM, got %T", armInput)
	}

	// Set property ‘AccessedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessedAt != nil {
			accessedAt := *typedInput.Properties.AccessedAt
			sbQueueStatus.AccessedAt = &accessedAt
		}
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoDeleteOnIdle != nil {
			autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
			sbQueueStatus.AutoDeleteOnIdle = &autoDeleteOnIdle
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CountDetails’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CountDetails != nil {
			var countDetails1 MessageCountDetails_Status
			err := countDetails1.PopulateFromARM(owner, *typedInput.Properties.CountDetails)
			if err != nil {
				return err
			}
			countDetails := countDetails1
			sbQueueStatus.CountDetails = &countDetails
		}
	}

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			sbQueueStatus.CreatedAt = &createdAt
		}
	}

	// Set property ‘DeadLetteringOnMessageExpiration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetteringOnMessageExpiration != nil {
			deadLetteringOnMessageExpiration := *typedInput.Properties.DeadLetteringOnMessageExpiration
			sbQueueStatus.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
		}
	}

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultMessageTimeToLive != nil {
			defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
			sbQueueStatus.DefaultMessageTimeToLive = &defaultMessageTimeToLive
		}
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
			duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
			sbQueueStatus.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
		}
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBatchedOperations != nil {
			enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
			sbQueueStatus.EnableBatchedOperations = &enableBatchedOperations
		}
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableExpress != nil {
			enableExpress := *typedInput.Properties.EnableExpress
			sbQueueStatus.EnableExpress = &enableExpress
		}
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePartitioning != nil {
			enablePartitioning := *typedInput.Properties.EnablePartitioning
			sbQueueStatus.EnablePartitioning = &enablePartitioning
		}
	}

	// Set property ‘ForwardDeadLetteredMessagesTo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardDeadLetteredMessagesTo != nil {
			forwardDeadLetteredMessagesTo := *typedInput.Properties.ForwardDeadLetteredMessagesTo
			sbQueueStatus.ForwardDeadLetteredMessagesTo = &forwardDeadLetteredMessagesTo
		}
	}

	// Set property ‘ForwardTo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ForwardTo != nil {
			forwardTo := *typedInput.Properties.ForwardTo
			sbQueueStatus.ForwardTo = &forwardTo
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		sbQueueStatus.Id = &id
	}

	// Set property ‘LockDuration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LockDuration != nil {
			lockDuration := *typedInput.Properties.LockDuration
			sbQueueStatus.LockDuration = &lockDuration
		}
	}

	// Set property ‘MaxDeliveryCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxDeliveryCount != nil {
			maxDeliveryCount := *typedInput.Properties.MaxDeliveryCount
			sbQueueStatus.MaxDeliveryCount = &maxDeliveryCount
		}
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeInMegabytes != nil {
			maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
			sbQueueStatus.MaxSizeInMegabytes = &maxSizeInMegabytes
		}
	}

	// Set property ‘MessageCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MessageCount != nil {
			messageCount := *typedInput.Properties.MessageCount
			sbQueueStatus.MessageCount = &messageCount
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sbQueueStatus.Name = &name
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresDuplicateDetection != nil {
			requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
			sbQueueStatus.RequiresDuplicateDetection = &requiresDuplicateDetection
		}
	}

	// Set property ‘RequiresSession’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresSession != nil {
			requiresSession := *typedInput.Properties.RequiresSession
			sbQueueStatus.RequiresSession = &requiresSession
		}
	}

	// Set property ‘SizeInBytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SizeInBytes != nil {
			sizeInBytes := *typedInput.Properties.SizeInBytes
			sbQueueStatus.SizeInBytes = &sizeInBytes
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			sbQueueStatus.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		sbQueueStatus.SystemData = &systemData
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		sbQueueStatus.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			sbQueueStatus.UpdatedAt = &updatedAt
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromSBQueueStatus populates our SBQueue_Status from the provided source SBQueue_Status
func (sbQueueStatus *SBQueue_Status) AssignPropertiesFromSBQueueStatus(source *v1alpha1api20210101previewstorage.SBQueue_Status) error {

	// AccessedAt
	sbQueueStatus.AccessedAt = genruntime.ClonePointerToString(source.AccessedAt)

	// AutoDeleteOnIdle
	sbQueueStatus.AutoDeleteOnIdle = genruntime.ClonePointerToString(source.AutoDeleteOnIdle)

	// Conditions
	sbQueueStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CountDetails
	if source.CountDetails != nil {
		var countDetail MessageCountDetails_Status
		err := countDetail.AssignPropertiesFromMessageCountDetailsStatus(source.CountDetails)
		if err != nil {
			return errors.Wrap(err, "populating CountDetails from CountDetails, calling AssignPropertiesFromMessageCountDetailsStatus()")
		}
		sbQueueStatus.CountDetails = &countDetail
	} else {
		sbQueueStatus.CountDetails = nil
	}

	// CreatedAt
	sbQueueStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// DeadLetteringOnMessageExpiration
	if source.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *source.DeadLetteringOnMessageExpiration
		sbQueueStatus.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		sbQueueStatus.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	sbQueueStatus.DefaultMessageTimeToLive = genruntime.ClonePointerToString(source.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	sbQueueStatus.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(source.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		sbQueueStatus.EnableBatchedOperations = &enableBatchedOperation
	} else {
		sbQueueStatus.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		sbQueueStatus.EnableExpress = &enableExpress
	} else {
		sbQueueStatus.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		sbQueueStatus.EnablePartitioning = &enablePartitioning
	} else {
		sbQueueStatus.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	sbQueueStatus.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(source.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	sbQueueStatus.ForwardTo = genruntime.ClonePointerToString(source.ForwardTo)

	// Id
	sbQueueStatus.Id = genruntime.ClonePointerToString(source.Id)

	// LockDuration
	sbQueueStatus.LockDuration = genruntime.ClonePointerToString(source.LockDuration)

	// MaxDeliveryCount
	sbQueueStatus.MaxDeliveryCount = genruntime.ClonePointerToInt(source.MaxDeliveryCount)

	// MaxSizeInMegabytes
	sbQueueStatus.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// MessageCount
	sbQueueStatus.MessageCount = genruntime.ClonePointerToInt(source.MessageCount)

	// Name
	sbQueueStatus.Name = genruntime.ClonePointerToString(source.Name)

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		sbQueueStatus.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		sbQueueStatus.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if source.RequiresSession != nil {
		requiresSession := *source.RequiresSession
		sbQueueStatus.RequiresSession = &requiresSession
	} else {
		sbQueueStatus.RequiresSession = nil
	}

	// SizeInBytes
	sbQueueStatus.SizeInBytes = genruntime.ClonePointerToInt(source.SizeInBytes)

	// Status
	if source.Status != nil {
		status := EntityStatus_Status(*source.Status)
		sbQueueStatus.Status = &status
	} else {
		sbQueueStatus.Status = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		sbQueueStatus.SystemData = &systemDatum
	} else {
		sbQueueStatus.SystemData = nil
	}

	// Type
	sbQueueStatus.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	sbQueueStatus.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// No error
	return nil
}

// AssignPropertiesToSBQueueStatus populates the provided destination SBQueue_Status from our SBQueue_Status
func (sbQueueStatus *SBQueue_Status) AssignPropertiesToSBQueueStatus(destination *v1alpha1api20210101previewstorage.SBQueue_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessedAt
	destination.AccessedAt = genruntime.ClonePointerToString(sbQueueStatus.AccessedAt)

	// AutoDeleteOnIdle
	destination.AutoDeleteOnIdle = genruntime.ClonePointerToString(sbQueueStatus.AutoDeleteOnIdle)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(sbQueueStatus.Conditions)

	// CountDetails
	if sbQueueStatus.CountDetails != nil {
		var countDetail v1alpha1api20210101previewstorage.MessageCountDetails_Status
		err := (*sbQueueStatus.CountDetails).AssignPropertiesToMessageCountDetailsStatus(&countDetail)
		if err != nil {
			return errors.Wrap(err, "populating CountDetails from CountDetails, calling AssignPropertiesToMessageCountDetailsStatus()")
		}
		destination.CountDetails = &countDetail
	} else {
		destination.CountDetails = nil
	}

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(sbQueueStatus.CreatedAt)

	// DeadLetteringOnMessageExpiration
	if sbQueueStatus.DeadLetteringOnMessageExpiration != nil {
		deadLetteringOnMessageExpiration := *sbQueueStatus.DeadLetteringOnMessageExpiration
		destination.DeadLetteringOnMessageExpiration = &deadLetteringOnMessageExpiration
	} else {
		destination.DeadLetteringOnMessageExpiration = nil
	}

	// DefaultMessageTimeToLive
	destination.DefaultMessageTimeToLive = genruntime.ClonePointerToString(sbQueueStatus.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	destination.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(sbQueueStatus.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if sbQueueStatus.EnableBatchedOperations != nil {
		enableBatchedOperation := *sbQueueStatus.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if sbQueueStatus.EnableExpress != nil {
		enableExpress := *sbQueueStatus.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if sbQueueStatus.EnablePartitioning != nil {
		enablePartitioning := *sbQueueStatus.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// ForwardDeadLetteredMessagesTo
	destination.ForwardDeadLetteredMessagesTo = genruntime.ClonePointerToString(sbQueueStatus.ForwardDeadLetteredMessagesTo)

	// ForwardTo
	destination.ForwardTo = genruntime.ClonePointerToString(sbQueueStatus.ForwardTo)

	// Id
	destination.Id = genruntime.ClonePointerToString(sbQueueStatus.Id)

	// LockDuration
	destination.LockDuration = genruntime.ClonePointerToString(sbQueueStatus.LockDuration)

	// MaxDeliveryCount
	destination.MaxDeliveryCount = genruntime.ClonePointerToInt(sbQueueStatus.MaxDeliveryCount)

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(sbQueueStatus.MaxSizeInMegabytes)

	// MessageCount
	destination.MessageCount = genruntime.ClonePointerToInt(sbQueueStatus.MessageCount)

	// Name
	destination.Name = genruntime.ClonePointerToString(sbQueueStatus.Name)

	// RequiresDuplicateDetection
	if sbQueueStatus.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *sbQueueStatus.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// RequiresSession
	if sbQueueStatus.RequiresSession != nil {
		requiresSession := *sbQueueStatus.RequiresSession
		destination.RequiresSession = &requiresSession
	} else {
		destination.RequiresSession = nil
	}

	// SizeInBytes
	destination.SizeInBytes = genruntime.ClonePointerToInt(sbQueueStatus.SizeInBytes)

	// Status
	if sbQueueStatus.Status != nil {
		status := string(*sbQueueStatus.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SystemData
	if sbQueueStatus.SystemData != nil {
		var systemDatum v1alpha1api20210101previewstorage.SystemData_Status
		err := (*sbQueueStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(sbQueueStatus.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(sbQueueStatus.UpdatedAt)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type EntityStatus_Status string

const (
	EntityStatus_StatusActive          = EntityStatus_Status("Active")
	EntityStatus_StatusCreating        = EntityStatus_Status("Creating")
	EntityStatus_StatusDeleting        = EntityStatus_Status("Deleting")
	EntityStatus_StatusDisabled        = EntityStatus_Status("Disabled")
	EntityStatus_StatusReceiveDisabled = EntityStatus_Status("ReceiveDisabled")
	EntityStatus_StatusRenaming        = EntityStatus_Status("Renaming")
	EntityStatus_StatusRestoring       = EntityStatus_Status("Restoring")
	EntityStatus_StatusSendDisabled    = EntityStatus_Status("SendDisabled")
	EntityStatus_StatusUnknown         = EntityStatus_Status("Unknown")
)

//Generated from:
type MessageCountDetails_Status struct {
	//ActiveMessageCount: Number of active messages in the queue, topic, or
	//subscription.
	ActiveMessageCount *int `json:"activeMessageCount,omitempty"`

	//DeadLetterMessageCount: Number of messages that are dead lettered.
	DeadLetterMessageCount *int `json:"deadLetterMessageCount,omitempty"`

	//ScheduledMessageCount: Number of scheduled messages.
	ScheduledMessageCount *int `json:"scheduledMessageCount,omitempty"`

	//TransferDeadLetterMessageCount: Number of messages transferred into dead letters.
	TransferDeadLetterMessageCount *int `json:"transferDeadLetterMessageCount,omitempty"`

	//TransferMessageCount: Number of messages transferred to another queue, topic, or
	//subscription.
	TransferMessageCount *int `json:"transferMessageCount,omitempty"`
}

var _ genruntime.FromARMConverter = &MessageCountDetails_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (messageCountDetailsStatus *MessageCountDetails_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &MessageCountDetails_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (messageCountDetailsStatus *MessageCountDetails_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MessageCountDetails_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MessageCountDetails_StatusARM, got %T", armInput)
	}

	// Set property ‘ActiveMessageCount’:
	if typedInput.ActiveMessageCount != nil {
		activeMessageCount := *typedInput.ActiveMessageCount
		messageCountDetailsStatus.ActiveMessageCount = &activeMessageCount
	}

	// Set property ‘DeadLetterMessageCount’:
	if typedInput.DeadLetterMessageCount != nil {
		deadLetterMessageCount := *typedInput.DeadLetterMessageCount
		messageCountDetailsStatus.DeadLetterMessageCount = &deadLetterMessageCount
	}

	// Set property ‘ScheduledMessageCount’:
	if typedInput.ScheduledMessageCount != nil {
		scheduledMessageCount := *typedInput.ScheduledMessageCount
		messageCountDetailsStatus.ScheduledMessageCount = &scheduledMessageCount
	}

	// Set property ‘TransferDeadLetterMessageCount’:
	if typedInput.TransferDeadLetterMessageCount != nil {
		transferDeadLetterMessageCount := *typedInput.TransferDeadLetterMessageCount
		messageCountDetailsStatus.TransferDeadLetterMessageCount = &transferDeadLetterMessageCount
	}

	// Set property ‘TransferMessageCount’:
	if typedInput.TransferMessageCount != nil {
		transferMessageCount := *typedInput.TransferMessageCount
		messageCountDetailsStatus.TransferMessageCount = &transferMessageCount
	}

	// No error
	return nil
}

// AssignPropertiesFromMessageCountDetailsStatus populates our MessageCountDetails_Status from the provided source MessageCountDetails_Status
func (messageCountDetailsStatus *MessageCountDetails_Status) AssignPropertiesFromMessageCountDetailsStatus(source *v1alpha1api20210101previewstorage.MessageCountDetails_Status) error {

	// ActiveMessageCount
	messageCountDetailsStatus.ActiveMessageCount = genruntime.ClonePointerToInt(source.ActiveMessageCount)

	// DeadLetterMessageCount
	messageCountDetailsStatus.DeadLetterMessageCount = genruntime.ClonePointerToInt(source.DeadLetterMessageCount)

	// ScheduledMessageCount
	messageCountDetailsStatus.ScheduledMessageCount = genruntime.ClonePointerToInt(source.ScheduledMessageCount)

	// TransferDeadLetterMessageCount
	messageCountDetailsStatus.TransferDeadLetterMessageCount = genruntime.ClonePointerToInt(source.TransferDeadLetterMessageCount)

	// TransferMessageCount
	messageCountDetailsStatus.TransferMessageCount = genruntime.ClonePointerToInt(source.TransferMessageCount)

	// No error
	return nil
}

// AssignPropertiesToMessageCountDetailsStatus populates the provided destination MessageCountDetails_Status from our MessageCountDetails_Status
func (messageCountDetailsStatus *MessageCountDetails_Status) AssignPropertiesToMessageCountDetailsStatus(destination *v1alpha1api20210101previewstorage.MessageCountDetails_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveMessageCount
	destination.ActiveMessageCount = genruntime.ClonePointerToInt(messageCountDetailsStatus.ActiveMessageCount)

	// DeadLetterMessageCount
	destination.DeadLetterMessageCount = genruntime.ClonePointerToInt(messageCountDetailsStatus.DeadLetterMessageCount)

	// ScheduledMessageCount
	destination.ScheduledMessageCount = genruntime.ClonePointerToInt(messageCountDetailsStatus.ScheduledMessageCount)

	// TransferDeadLetterMessageCount
	destination.TransferDeadLetterMessageCount = genruntime.ClonePointerToInt(messageCountDetailsStatus.TransferDeadLetterMessageCount)

	// TransferMessageCount
	destination.TransferMessageCount = genruntime.ClonePointerToInt(messageCountDetailsStatus.TransferMessageCount)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NamespacesQueue{}, &NamespacesQueueList{})
}
