// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101preview

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.servicebus/v1alpha1api20210101previewstorage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.servicebus.azure.com,resources=namespacestopics,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.servicebus.azure.com,resources={namespacestopics/status,namespacestopics/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-01-01-preview/Microsoft.ServiceBus.json#/resourceDefinitions/namespaces_topics
type NamespacesTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespacesTopics_Spec `json:"spec,omitempty"`
	Status            SBTopic_Status        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NamespacesTopic{}

// GetConditions returns the conditions of the resource
func (namespacesTopic *NamespacesTopic) GetConditions() conditions.Conditions {
	return namespacesTopic.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (namespacesTopic *NamespacesTopic) SetConditions(conditions conditions.Conditions) {
	namespacesTopic.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-servicebus-azure-com-v1alpha1api20210101preview-namespacestopic,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.servicebus.azure.com,resources=namespacestopics,verbs=create;update,versions=v1alpha1api20210101preview,name=default.v1alpha1api20210101preview.namespacestopics.microsoft.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &NamespacesTopic{}

// Default applies defaults to the NamespacesTopic resource
func (namespacesTopic *NamespacesTopic) Default() {
	namespacesTopic.defaultImpl()
	var temp interface{} = namespacesTopic
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (namespacesTopic *NamespacesTopic) defaultAzureName() {
	if namespacesTopic.Spec.AzureName == "" {
		namespacesTopic.Spec.AzureName = namespacesTopic.Name
	}
}

// defaultImpl applies the code generated defaults to the NamespacesTopic resource
func (namespacesTopic *NamespacesTopic) defaultImpl() { namespacesTopic.defaultAzureName() }

var _ genruntime.KubernetesResource = &NamespacesTopic{}

// AzureName returns the Azure name of the resource
func (namespacesTopic *NamespacesTopic) AzureName() string {
	return namespacesTopic.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-01-01-preview"
func (namespacesTopic NamespacesTopic) GetAPIVersion() string {
	return "2021-01-01-preview"
}

// GetResourceKind returns the kind of the resource
func (namespacesTopic *NamespacesTopic) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (namespacesTopic *NamespacesTopic) GetSpec() genruntime.ConvertibleSpec {
	return &namespacesTopic.Spec
}

// GetStatus returns the status of this resource
func (namespacesTopic *NamespacesTopic) GetStatus() genruntime.ConvertibleStatus {
	return &namespacesTopic.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ServiceBus/namespaces/topics"
func (namespacesTopic *NamespacesTopic) GetType() string {
	return "Microsoft.ServiceBus/namespaces/topics"
}

// NewEmptyStatus returns a new empty (blank) status
func (namespacesTopic *NamespacesTopic) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SBTopic_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (namespacesTopic *NamespacesTopic) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(namespacesTopic.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: namespacesTopic.Namespace,
		Name:      namespacesTopic.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (namespacesTopic *NamespacesTopic) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SBTopic_Status); ok {
		namespacesTopic.Status = *st
		return nil
	}

	// Convert status to required version
	var st SBTopic_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	namespacesTopic.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-servicebus-azure-com-v1alpha1api20210101preview-namespacestopic,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.servicebus.azure.com,resources=namespacestopics,verbs=create;update,versions=v1alpha1api20210101preview,name=validate.v1alpha1api20210101preview.namespacestopics.microsoft.servicebus.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &NamespacesTopic{}

// ValidateCreate validates the creation of the resource
func (namespacesTopic *NamespacesTopic) ValidateCreate() error {
	validations := namespacesTopic.createValidations()
	var temp interface{} = namespacesTopic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (namespacesTopic *NamespacesTopic) ValidateDelete() error {
	validations := namespacesTopic.deleteValidations()
	var temp interface{} = namespacesTopic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (namespacesTopic *NamespacesTopic) ValidateUpdate(old runtime.Object) error {
	validations := namespacesTopic.updateValidations()
	var temp interface{} = namespacesTopic
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (namespacesTopic *NamespacesTopic) createValidations() []func() error {
	return []func() error{namespacesTopic.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (namespacesTopic *NamespacesTopic) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (namespacesTopic *NamespacesTopic) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return namespacesTopic.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (namespacesTopic *NamespacesTopic) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&namespacesTopic.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNamespacesTopic populates our NamespacesTopic from the provided source NamespacesTopic
func (namespacesTopic *NamespacesTopic) AssignPropertiesFromNamespacesTopic(source *v1alpha1api20210101previewstorage.NamespacesTopic) error {

	// Spec
	var spec NamespacesTopics_Spec
	err := spec.AssignPropertiesFromNamespacesTopicsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromNamespacesTopicsSpec()")
	}
	namespacesTopic.Spec = spec

	// Status
	var status SBTopic_Status
	err = status.AssignPropertiesFromSBTopicStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSBTopicStatus()")
	}
	namespacesTopic.Status = status

	// No error
	return nil
}

// AssignPropertiesToNamespacesTopic populates the provided destination NamespacesTopic from our NamespacesTopic
func (namespacesTopic *NamespacesTopic) AssignPropertiesToNamespacesTopic(destination *v1alpha1api20210101previewstorage.NamespacesTopic) error {

	// Spec
	var spec v1alpha1api20210101previewstorage.NamespacesTopics_Spec
	err := namespacesTopic.Spec.AssignPropertiesToNamespacesTopicsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToNamespacesTopicsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210101previewstorage.SBTopic_Status
	err = namespacesTopic.Status.AssignPropertiesToSBTopicStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSBTopicStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (namespacesTopic *NamespacesTopic) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: namespacesTopic.Spec.OriginalVersion(),
		Kind:    "NamespacesTopic",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-01-01-preview/Microsoft.ServiceBus.json#/resourceDefinitions/namespaces_topics
type NamespacesTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespacesTopic `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-01-01-preview"}
type NamespacesTopicsSpecAPIVersion string

const NamespacesTopicsSpecAPIVersion20210101Preview = NamespacesTopicsSpecAPIVersion("2021-01-01-preview")

type NamespacesTopics_Spec struct {
	//AutoDeleteOnIdle: ISO 8601 timespan idle interval after which the topic is
	//automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	// +kubebuilder:validation:MinLength=1
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DefaultMessageTimeToLive: ISO 8601 Default message timespan to live value. This
	//is the duration after which the message expires, starting from when the message
	//is sent to Service Bus. This is the default value used when TimeToLive is not
	//set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	//DuplicateDetectionHistoryTimeWindow: ISO8601 timespan structure that defines the
	//duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	//EnableBatchedOperations: Value that indicates whether server-side batched
	//operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	//EnableExpress: Value that indicates whether Express Entities are enabled. An
	//express topic holds a message in memory temporarily before writing it to
	//persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	//EnablePartitioning: Value that indicates whether the topic to be partitioned
	//across multiple message brokers is enabled.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	//MaxSizeInMegabytes: Maximum size of the topic in megabytes, which is the size of
	//the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.servicebus.azure.com" json:"owner" kind:"Namespace"`

	//RequiresDuplicateDetection: Value indicating if this topic requires duplicate
	//detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	//SupportOrdering: Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `json:"supportOrdering,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &NamespacesTopics_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (namespacesTopicsSpec *NamespacesTopics_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if namespacesTopicsSpec == nil {
		return nil, nil
	}
	var result NamespacesTopics_SpecARM

	// Set property ‘Location’:
	if namespacesTopicsSpec.Location != nil {
		location := *namespacesTopicsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if namespacesTopicsSpec.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *namespacesTopicsSpec.AutoDeleteOnIdle
		result.Properties.AutoDeleteOnIdle = &autoDeleteOnIdle
	}
	if namespacesTopicsSpec.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *namespacesTopicsSpec.DefaultMessageTimeToLive
		result.Properties.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	}
	if namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow
		result.Properties.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	}
	if namespacesTopicsSpec.EnableBatchedOperations != nil {
		enableBatchedOperations := *namespacesTopicsSpec.EnableBatchedOperations
		result.Properties.EnableBatchedOperations = &enableBatchedOperations
	}
	if namespacesTopicsSpec.EnableExpress != nil {
		enableExpress := *namespacesTopicsSpec.EnableExpress
		result.Properties.EnableExpress = &enableExpress
	}
	if namespacesTopicsSpec.EnablePartitioning != nil {
		enablePartitioning := *namespacesTopicsSpec.EnablePartitioning
		result.Properties.EnablePartitioning = &enablePartitioning
	}
	if namespacesTopicsSpec.MaxSizeInMegabytes != nil {
		maxSizeInMegabytes := *namespacesTopicsSpec.MaxSizeInMegabytes
		result.Properties.MaxSizeInMegabytes = &maxSizeInMegabytes
	}
	if namespacesTopicsSpec.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *namespacesTopicsSpec.RequiresDuplicateDetection
		result.Properties.RequiresDuplicateDetection = &requiresDuplicateDetection
	}
	if namespacesTopicsSpec.SupportOrdering != nil {
		supportOrdering := *namespacesTopicsSpec.SupportOrdering
		result.Properties.SupportOrdering = &supportOrdering
	}

	// Set property ‘Tags’:
	if namespacesTopicsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range namespacesTopicsSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (namespacesTopicsSpec *NamespacesTopics_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NamespacesTopics_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (namespacesTopicsSpec *NamespacesTopics_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NamespacesTopics_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NamespacesTopics_SpecARM, got %T", armInput)
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
		namespacesTopicsSpec.AutoDeleteOnIdle = &autoDeleteOnIdle
	}

	// Set property ‘AzureName’:
	namespacesTopicsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
		namespacesTopicsSpec.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
		namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties.EnableBatchedOperations != nil {
		enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
		namespacesTopicsSpec.EnableBatchedOperations = &enableBatchedOperations
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties.EnableExpress != nil {
		enableExpress := *typedInput.Properties.EnableExpress
		namespacesTopicsSpec.EnableExpress = &enableExpress
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties.EnablePartitioning != nil {
		enablePartitioning := *typedInput.Properties.EnablePartitioning
		namespacesTopicsSpec.EnablePartitioning = &enablePartitioning
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		namespacesTopicsSpec.Location = &location
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties.MaxSizeInMegabytes != nil {
		maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
		namespacesTopicsSpec.MaxSizeInMegabytes = &maxSizeInMegabytes
	}

	// Set property ‘Owner’:
	namespacesTopicsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
		namespacesTopicsSpec.RequiresDuplicateDetection = &requiresDuplicateDetection
	}

	// Set property ‘SupportOrdering’:
	// copying flattened property:
	if typedInput.Properties.SupportOrdering != nil {
		supportOrdering := *typedInput.Properties.SupportOrdering
		namespacesTopicsSpec.SupportOrdering = &supportOrdering
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		namespacesTopicsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			namespacesTopicsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NamespacesTopics_Spec{}

// ConvertSpecFrom populates our NamespacesTopics_Spec from the provided source
func (namespacesTopicsSpec *NamespacesTopics_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.NamespacesTopics_Spec)
	if ok {
		// Populate our instance from source
		return namespacesTopicsSpec.AssignPropertiesFromNamespacesTopicsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.NamespacesTopics_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = namespacesTopicsSpec.AssignPropertiesFromNamespacesTopicsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NamespacesTopics_Spec
func (namespacesTopicsSpec *NamespacesTopics_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.NamespacesTopics_Spec)
	if ok {
		// Populate destination from our instance
		return namespacesTopicsSpec.AssignPropertiesToNamespacesTopicsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.NamespacesTopics_Spec{}
	err := namespacesTopicsSpec.AssignPropertiesToNamespacesTopicsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNamespacesTopicsSpec populates our NamespacesTopics_Spec from the provided source NamespacesTopics_Spec
func (namespacesTopicsSpec *NamespacesTopics_Spec) AssignPropertiesFromNamespacesTopicsSpec(source *v1alpha1api20210101previewstorage.NamespacesTopics_Spec) error {

	// AutoDeleteOnIdle
	if source.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *source.AutoDeleteOnIdle
		namespacesTopicsSpec.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		namespacesTopicsSpec.AutoDeleteOnIdle = nil
	}

	// AzureName
	namespacesTopicsSpec.AzureName = source.AzureName

	// DefaultMessageTimeToLive
	if source.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *source.DefaultMessageTimeToLive
		namespacesTopicsSpec.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		namespacesTopicsSpec.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if source.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *source.DuplicateDetectionHistoryTimeWindow
		namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		namespacesTopicsSpec.EnableBatchedOperations = &enableBatchedOperation
	} else {
		namespacesTopicsSpec.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		namespacesTopicsSpec.EnableExpress = &enableExpress
	} else {
		namespacesTopicsSpec.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		namespacesTopicsSpec.EnablePartitioning = &enablePartitioning
	} else {
		namespacesTopicsSpec.EnablePartitioning = nil
	}

	// Location
	namespacesTopicsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// MaxSizeInMegabytes
	namespacesTopicsSpec.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// Owner
	namespacesTopicsSpec.Owner = source.Owner.Copy()

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		namespacesTopicsSpec.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		namespacesTopicsSpec.RequiresDuplicateDetection = nil
	}

	// SupportOrdering
	if source.SupportOrdering != nil {
		supportOrdering := *source.SupportOrdering
		namespacesTopicsSpec.SupportOrdering = &supportOrdering
	} else {
		namespacesTopicsSpec.SupportOrdering = nil
	}

	// Tags
	namespacesTopicsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToNamespacesTopicsSpec populates the provided destination NamespacesTopics_Spec from our NamespacesTopics_Spec
func (namespacesTopicsSpec *NamespacesTopics_Spec) AssignPropertiesToNamespacesTopicsSpec(destination *v1alpha1api20210101previewstorage.NamespacesTopics_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoDeleteOnIdle
	if namespacesTopicsSpec.AutoDeleteOnIdle != nil {
		autoDeleteOnIdle := *namespacesTopicsSpec.AutoDeleteOnIdle
		destination.AutoDeleteOnIdle = &autoDeleteOnIdle
	} else {
		destination.AutoDeleteOnIdle = nil
	}

	// AzureName
	destination.AzureName = namespacesTopicsSpec.AzureName

	// DefaultMessageTimeToLive
	if namespacesTopicsSpec.DefaultMessageTimeToLive != nil {
		defaultMessageTimeToLive := *namespacesTopicsSpec.DefaultMessageTimeToLive
		destination.DefaultMessageTimeToLive = &defaultMessageTimeToLive
	} else {
		destination.DefaultMessageTimeToLive = nil
	}

	// DuplicateDetectionHistoryTimeWindow
	if namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow != nil {
		duplicateDetectionHistoryTimeWindow := *namespacesTopicsSpec.DuplicateDetectionHistoryTimeWindow
		destination.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
	} else {
		destination.DuplicateDetectionHistoryTimeWindow = nil
	}

	// EnableBatchedOperations
	if namespacesTopicsSpec.EnableBatchedOperations != nil {
		enableBatchedOperation := *namespacesTopicsSpec.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if namespacesTopicsSpec.EnableExpress != nil {
		enableExpress := *namespacesTopicsSpec.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if namespacesTopicsSpec.EnablePartitioning != nil {
		enablePartitioning := *namespacesTopicsSpec.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(namespacesTopicsSpec.Location)

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(namespacesTopicsSpec.MaxSizeInMegabytes)

	// OriginalVersion
	destination.OriginalVersion = namespacesTopicsSpec.OriginalVersion()

	// Owner
	destination.Owner = namespacesTopicsSpec.Owner.Copy()

	// RequiresDuplicateDetection
	if namespacesTopicsSpec.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *namespacesTopicsSpec.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// SupportOrdering
	if namespacesTopicsSpec.SupportOrdering != nil {
		supportOrdering := *namespacesTopicsSpec.SupportOrdering
		destination.SupportOrdering = &supportOrdering
	} else {
		destination.SupportOrdering = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(namespacesTopicsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (namespacesTopicsSpec *NamespacesTopics_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (namespacesTopicsSpec *NamespacesTopics_Spec) SetAzureName(azureName string) {
	namespacesTopicsSpec.AzureName = azureName
}

//Generated from:
type SBTopic_Status struct {
	//AccessedAt: Last time the message was sent, or a request was received, for this
	//topic.
	AccessedAt *string `json:"accessedAt,omitempty"`

	//AutoDeleteOnIdle: ISO 8601 timespan idle interval after which the topic is
	//automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `json:"autoDeleteOnIdle,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CountDetails: Message count details
	CountDetails *MessageCountDetails_Status `json:"countDetails,omitempty"`

	//CreatedAt: Exact time the message was created.
	CreatedAt *string `json:"createdAt,omitempty"`

	//DefaultMessageTimeToLive: ISO 8601 Default message timespan to live value. This
	//is the duration after which the message expires, starting from when the message
	//is sent to Service Bus. This is the default value used when TimeToLive is not
	//set on a message itself.
	DefaultMessageTimeToLive *string `json:"defaultMessageTimeToLive,omitempty"`

	//DuplicateDetectionHistoryTimeWindow: ISO8601 timespan structure that defines the
	//duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `json:"duplicateDetectionHistoryTimeWindow,omitempty"`

	//EnableBatchedOperations: Value that indicates whether server-side batched
	//operations are enabled.
	EnableBatchedOperations *bool `json:"enableBatchedOperations,omitempty"`

	//EnableExpress: Value that indicates whether Express Entities are enabled. An
	//express topic holds a message in memory temporarily before writing it to
	//persistent storage.
	EnableExpress *bool `json:"enableExpress,omitempty"`

	//EnablePartitioning: Value that indicates whether the topic to be partitioned
	//across multiple message brokers is enabled.
	EnablePartitioning *bool `json:"enablePartitioning,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//MaxSizeInMegabytes: Maximum size of the topic in megabytes, which is the size of
	//the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes *int `json:"maxSizeInMegabytes,omitempty"`

	//Name: Resource name
	Name *string `json:"name,omitempty"`

	//RequiresDuplicateDetection: Value indicating if this topic requires duplicate
	//detection.
	RequiresDuplicateDetection *bool `json:"requiresDuplicateDetection,omitempty"`

	//SizeInBytes: Size of the topic, in bytes.
	SizeInBytes *int `json:"sizeInBytes,omitempty"`

	//Status: Enumerates the possible values for the status of a messaging entity.
	Status *EntityStatus_Status `json:"status,omitempty"`

	//SubscriptionCount: Number of subscriptions.
	SubscriptionCount *int `json:"subscriptionCount,omitempty"`

	//SupportOrdering: Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `json:"supportOrdering,omitempty"`

	//SystemData: The system meta data relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//UpdatedAt: The exact time the message was updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SBTopic_Status{}

// ConvertStatusFrom populates our SBTopic_Status from the provided source
func (sbTopicStatus *SBTopic_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210101previewstorage.SBTopic_Status)
	if ok {
		// Populate our instance from source
		return sbTopicStatus.AssignPropertiesFromSBTopicStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101previewstorage.SBTopic_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = sbTopicStatus.AssignPropertiesFromSBTopicStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SBTopic_Status
func (sbTopicStatus *SBTopic_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210101previewstorage.SBTopic_Status)
	if ok {
		// Populate destination from our instance
		return sbTopicStatus.AssignPropertiesToSBTopicStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101previewstorage.SBTopic_Status{}
	err := sbTopicStatus.AssignPropertiesToSBTopicStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SBTopic_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sbTopicStatus *SBTopic_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SBTopic_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sbTopicStatus *SBTopic_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SBTopic_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SBTopic_StatusARM, got %T", armInput)
	}

	// Set property ‘AccessedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessedAt != nil {
			accessedAt := *typedInput.Properties.AccessedAt
			sbTopicStatus.AccessedAt = &accessedAt
		}
	}

	// Set property ‘AutoDeleteOnIdle’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoDeleteOnIdle != nil {
			autoDeleteOnIdle := *typedInput.Properties.AutoDeleteOnIdle
			sbTopicStatus.AutoDeleteOnIdle = &autoDeleteOnIdle
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CountDetails’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CountDetails != nil {
			var countDetails1 MessageCountDetails_Status
			err := countDetails1.PopulateFromARM(owner, *typedInput.Properties.CountDetails)
			if err != nil {
				return err
			}
			countDetails := countDetails1
			sbTopicStatus.CountDetails = &countDetails
		}
	}

	// Set property ‘CreatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreatedAt != nil {
			createdAt := *typedInput.Properties.CreatedAt
			sbTopicStatus.CreatedAt = &createdAt
		}
	}

	// Set property ‘DefaultMessageTimeToLive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultMessageTimeToLive != nil {
			defaultMessageTimeToLive := *typedInput.Properties.DefaultMessageTimeToLive
			sbTopicStatus.DefaultMessageTimeToLive = &defaultMessageTimeToLive
		}
	}

	// Set property ‘DuplicateDetectionHistoryTimeWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DuplicateDetectionHistoryTimeWindow != nil {
			duplicateDetectionHistoryTimeWindow := *typedInput.Properties.DuplicateDetectionHistoryTimeWindow
			sbTopicStatus.DuplicateDetectionHistoryTimeWindow = &duplicateDetectionHistoryTimeWindow
		}
	}

	// Set property ‘EnableBatchedOperations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBatchedOperations != nil {
			enableBatchedOperations := *typedInput.Properties.EnableBatchedOperations
			sbTopicStatus.EnableBatchedOperations = &enableBatchedOperations
		}
	}

	// Set property ‘EnableExpress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableExpress != nil {
			enableExpress := *typedInput.Properties.EnableExpress
			sbTopicStatus.EnableExpress = &enableExpress
		}
	}

	// Set property ‘EnablePartitioning’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePartitioning != nil {
			enablePartitioning := *typedInput.Properties.EnablePartitioning
			sbTopicStatus.EnablePartitioning = &enablePartitioning
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		sbTopicStatus.Id = &id
	}

	// Set property ‘MaxSizeInMegabytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeInMegabytes != nil {
			maxSizeInMegabytes := *typedInput.Properties.MaxSizeInMegabytes
			sbTopicStatus.MaxSizeInMegabytes = &maxSizeInMegabytes
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sbTopicStatus.Name = &name
	}

	// Set property ‘RequiresDuplicateDetection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RequiresDuplicateDetection != nil {
			requiresDuplicateDetection := *typedInput.Properties.RequiresDuplicateDetection
			sbTopicStatus.RequiresDuplicateDetection = &requiresDuplicateDetection
		}
	}

	// Set property ‘SizeInBytes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SizeInBytes != nil {
			sizeInBytes := *typedInput.Properties.SizeInBytes
			sbTopicStatus.SizeInBytes = &sizeInBytes
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			sbTopicStatus.Status = &status
		}
	}

	// Set property ‘SubscriptionCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubscriptionCount != nil {
			subscriptionCount := *typedInput.Properties.SubscriptionCount
			sbTopicStatus.SubscriptionCount = &subscriptionCount
		}
	}

	// Set property ‘SupportOrdering’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportOrdering != nil {
			supportOrdering := *typedInput.Properties.SupportOrdering
			sbTopicStatus.SupportOrdering = &supportOrdering
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		sbTopicStatus.SystemData = &systemData
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		sbTopicStatus.Type = &typeVar
	}

	// Set property ‘UpdatedAt’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpdatedAt != nil {
			updatedAt := *typedInput.Properties.UpdatedAt
			sbTopicStatus.UpdatedAt = &updatedAt
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromSBTopicStatus populates our SBTopic_Status from the provided source SBTopic_Status
func (sbTopicStatus *SBTopic_Status) AssignPropertiesFromSBTopicStatus(source *v1alpha1api20210101previewstorage.SBTopic_Status) error {

	// AccessedAt
	sbTopicStatus.AccessedAt = genruntime.ClonePointerToString(source.AccessedAt)

	// AutoDeleteOnIdle
	sbTopicStatus.AutoDeleteOnIdle = genruntime.ClonePointerToString(source.AutoDeleteOnIdle)

	// Conditions
	sbTopicStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CountDetails
	if source.CountDetails != nil {
		var countDetail MessageCountDetails_Status
		err := countDetail.AssignPropertiesFromMessageCountDetailsStatus(source.CountDetails)
		if err != nil {
			return errors.Wrap(err, "populating CountDetails from CountDetails, calling AssignPropertiesFromMessageCountDetailsStatus()")
		}
		sbTopicStatus.CountDetails = &countDetail
	} else {
		sbTopicStatus.CountDetails = nil
	}

	// CreatedAt
	sbTopicStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// DefaultMessageTimeToLive
	sbTopicStatus.DefaultMessageTimeToLive = genruntime.ClonePointerToString(source.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	sbTopicStatus.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(source.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if source.EnableBatchedOperations != nil {
		enableBatchedOperation := *source.EnableBatchedOperations
		sbTopicStatus.EnableBatchedOperations = &enableBatchedOperation
	} else {
		sbTopicStatus.EnableBatchedOperations = nil
	}

	// EnableExpress
	if source.EnableExpress != nil {
		enableExpress := *source.EnableExpress
		sbTopicStatus.EnableExpress = &enableExpress
	} else {
		sbTopicStatus.EnableExpress = nil
	}

	// EnablePartitioning
	if source.EnablePartitioning != nil {
		enablePartitioning := *source.EnablePartitioning
		sbTopicStatus.EnablePartitioning = &enablePartitioning
	} else {
		sbTopicStatus.EnablePartitioning = nil
	}

	// Id
	sbTopicStatus.Id = genruntime.ClonePointerToString(source.Id)

	// MaxSizeInMegabytes
	sbTopicStatus.MaxSizeInMegabytes = genruntime.ClonePointerToInt(source.MaxSizeInMegabytes)

	// Name
	sbTopicStatus.Name = genruntime.ClonePointerToString(source.Name)

	// RequiresDuplicateDetection
	if source.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *source.RequiresDuplicateDetection
		sbTopicStatus.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		sbTopicStatus.RequiresDuplicateDetection = nil
	}

	// SizeInBytes
	sbTopicStatus.SizeInBytes = genruntime.ClonePointerToInt(source.SizeInBytes)

	// Status
	if source.Status != nil {
		status := EntityStatus_Status(*source.Status)
		sbTopicStatus.Status = &status
	} else {
		sbTopicStatus.Status = nil
	}

	// SubscriptionCount
	sbTopicStatus.SubscriptionCount = genruntime.ClonePointerToInt(source.SubscriptionCount)

	// SupportOrdering
	if source.SupportOrdering != nil {
		supportOrdering := *source.SupportOrdering
		sbTopicStatus.SupportOrdering = &supportOrdering
	} else {
		sbTopicStatus.SupportOrdering = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		sbTopicStatus.SystemData = &systemDatum
	} else {
		sbTopicStatus.SystemData = nil
	}

	// Type
	sbTopicStatus.Type = genruntime.ClonePointerToString(source.Type)

	// UpdatedAt
	sbTopicStatus.UpdatedAt = genruntime.ClonePointerToString(source.UpdatedAt)

	// No error
	return nil
}

// AssignPropertiesToSBTopicStatus populates the provided destination SBTopic_Status from our SBTopic_Status
func (sbTopicStatus *SBTopic_Status) AssignPropertiesToSBTopicStatus(destination *v1alpha1api20210101previewstorage.SBTopic_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessedAt
	destination.AccessedAt = genruntime.ClonePointerToString(sbTopicStatus.AccessedAt)

	// AutoDeleteOnIdle
	destination.AutoDeleteOnIdle = genruntime.ClonePointerToString(sbTopicStatus.AutoDeleteOnIdle)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(sbTopicStatus.Conditions)

	// CountDetails
	if sbTopicStatus.CountDetails != nil {
		var countDetail v1alpha1api20210101previewstorage.MessageCountDetails_Status
		err := (*sbTopicStatus.CountDetails).AssignPropertiesToMessageCountDetailsStatus(&countDetail)
		if err != nil {
			return errors.Wrap(err, "populating CountDetails from CountDetails, calling AssignPropertiesToMessageCountDetailsStatus()")
		}
		destination.CountDetails = &countDetail
	} else {
		destination.CountDetails = nil
	}

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(sbTopicStatus.CreatedAt)

	// DefaultMessageTimeToLive
	destination.DefaultMessageTimeToLive = genruntime.ClonePointerToString(sbTopicStatus.DefaultMessageTimeToLive)

	// DuplicateDetectionHistoryTimeWindow
	destination.DuplicateDetectionHistoryTimeWindow = genruntime.ClonePointerToString(sbTopicStatus.DuplicateDetectionHistoryTimeWindow)

	// EnableBatchedOperations
	if sbTopicStatus.EnableBatchedOperations != nil {
		enableBatchedOperation := *sbTopicStatus.EnableBatchedOperations
		destination.EnableBatchedOperations = &enableBatchedOperation
	} else {
		destination.EnableBatchedOperations = nil
	}

	// EnableExpress
	if sbTopicStatus.EnableExpress != nil {
		enableExpress := *sbTopicStatus.EnableExpress
		destination.EnableExpress = &enableExpress
	} else {
		destination.EnableExpress = nil
	}

	// EnablePartitioning
	if sbTopicStatus.EnablePartitioning != nil {
		enablePartitioning := *sbTopicStatus.EnablePartitioning
		destination.EnablePartitioning = &enablePartitioning
	} else {
		destination.EnablePartitioning = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(sbTopicStatus.Id)

	// MaxSizeInMegabytes
	destination.MaxSizeInMegabytes = genruntime.ClonePointerToInt(sbTopicStatus.MaxSizeInMegabytes)

	// Name
	destination.Name = genruntime.ClonePointerToString(sbTopicStatus.Name)

	// RequiresDuplicateDetection
	if sbTopicStatus.RequiresDuplicateDetection != nil {
		requiresDuplicateDetection := *sbTopicStatus.RequiresDuplicateDetection
		destination.RequiresDuplicateDetection = &requiresDuplicateDetection
	} else {
		destination.RequiresDuplicateDetection = nil
	}

	// SizeInBytes
	destination.SizeInBytes = genruntime.ClonePointerToInt(sbTopicStatus.SizeInBytes)

	// Status
	if sbTopicStatus.Status != nil {
		status := string(*sbTopicStatus.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SubscriptionCount
	destination.SubscriptionCount = genruntime.ClonePointerToInt(sbTopicStatus.SubscriptionCount)

	// SupportOrdering
	if sbTopicStatus.SupportOrdering != nil {
		supportOrdering := *sbTopicStatus.SupportOrdering
		destination.SupportOrdering = &supportOrdering
	} else {
		destination.SupportOrdering = nil
	}

	// SystemData
	if sbTopicStatus.SystemData != nil {
		var systemDatum v1alpha1api20210101previewstorage.SystemData_Status
		err := (*sbTopicStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(sbTopicStatus.Type)

	// UpdatedAt
	destination.UpdatedAt = genruntime.ClonePointerToString(sbTopicStatus.UpdatedAt)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NamespacesTopic{}, &NamespacesTopicList{})
}
